%TITLE 'Field (error) message requests from other modules'
MODULE ERRORO (	!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:  RUNOFF Document Formatter
!
! ABSTRACT:
!
!	This module generates messages (generally errors) for RUNOFF.
!	These messages are edited at the time the routine is called to
!	allow inclusion of various information necessary in the
!	diagnostic.  The details of this editing are described below.
!
! ENVIRONMENT:  Transportable
!
! AUTHOR:  D. Knight	, CREATION DATE:  June 1978
!
! MODIFIED BY:
!
!	008	REM00008	Ray Marshall	16-October-1981
!		The numeric parameters to the MRC & NIC messages will now be
!		  added to the total error counter.
!		LOM is no longer a special case as it is no longer supposed
!		  to be used.
!		Added %X to SCNMSG to insert an 's' if %N NEQ 1.  Autoplurals!
!
!	007	REM00007	Ray Marshall	14-October-1981
!		Add new (conditional compilation for BLISS32 only) to handle
!		  error messages using the VMS $PUTMSG facility.  This was
!		  accomplished by calling EMSG.BLI to setup the appropriate
!		  VMS specific structures and envoke $PUTMSG.  See that
!		  module for details on what it does.
!
!	006	RWF00006	R. Friday	July, 1978 
!	        for VERSION 01
!--

%SBTTL 'Module declarations'
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	ERM:		NOVALUE,	!Error message writer
	ERMA:		NOVALUE,	!Common error handling sequence
	ERMB:		NOVALUE,	!Common error handling sequence
	ERML:		NOVALUE,	!Common error handling sequence
	ERMN:		NOVALUE,	!Common error handling sequence
	ERMS:		NOVALUE,	!Common error handling sequence
	PUTMSG:		NOVALUE,	!Miscellaneous messages writer
	SCNMSG;				!Do text insertion.

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';		!  XPORT macros
%IF %BLISS(BLISS32)
%THEN
LIBRARY 'SYS$LIBRARY:STARLET';	!  System macros for VMS error messages
%FI
REQUIRE 'REQ:BOOL.REQ';		!  Defines TRUE & FALSE literals (only!)
REQUIRE 'REQ:FSPACK.REQ';	!  FIXED_STRING structure & FS_... macros
REQUIRE 'REQ:GCA.REQ';		!  GCA (General Control Array) definitions
REQUIRE 'REQ:IRAC.REQ';		!  IRAC_... structure Macros & literal
REQUIRE 'REQ:PAGEN.REQ';	!  Page-number-control macros and literals
REQUIRE 'REQ:PHDEF.REQ';	!  Page handler control vector definition
!
! MACROS:
!


!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!


!
! EXTERNAL REFERENCES:
!

EXTERNAL
	GCA:	GCA_DEFINITION,
	IRA:	FIXED_STRING,
	IRAC:	IRAC_DEFINITION,
	MSGTXT:	VECTOR,			!Vector of CH$PTRs to messages.
	PAGEN:	PAGE_DEFINITION,
	PHAN:	PHAN_DEFINITION,
	RNOIOB: REF $XPO_IOB(),		!Output file (document being built)
	TTOIOB:	$XPO_IOB(),		!Standard messages (TTY: usually)
	TTEIOB:	$XPO_IOB();		!Standard error unit (TTY: usually)

EXTERNAL LITERAL			!Error messages
	RNFLOC;

EXTERNAL ROUTINE
	ENDCMT,				!Skip to end of comment
	PACBAS,				!Convert binary to specified base
	PACPAG,				!Convert page number to ASCII
	PACSTR;				!Move ASCII characters.

%IF %BLISS(BLISS32)
%THEN
EXTERNAL ROUTINE
	EMSG;				!Error message handler for VMS
%FI

%SBTTL 'ERMA -- add DIRECTIVE and location to error message'
GLOBAL ROUTINE ERMA (ERROR,POSITION) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains a sequence of code that is commonly used
!	for handling errors.
!
!	If the POSITION parameter is TRUE, it calls ENDCMT to
!	position to the end of the erroneous command.  Then it passes
!	to ERM the specified error message (ERROR), and the start and
!	length of the string to be inserted into the error message. 
!	Note that this call on ERM does not depend on the value of POSITION.
!
!	Finally, it calls ERM to output the error message indicating
!	where in the input and output files the error occurred.
!
!	It is by no means necessary to call ERM only via ERMA.  ERMA is
!	simply a collection of commonly used code and is here for the
!	sake of convenience.
!
! FORMAL PARAMETERS:
!
!	ERROR - Address of desired error diagnostic. Passed to ERM.
!	POSITION - If TRUE, ERMA positions to the end of the
!		   command before issuing the second call on ERM.
!
! IMPLICIT INPUTS:
!
!	RNFLOC	- An error message stating where error occurred
!	GCA_COM_START - A ch$ptr to the start of the command
!	FS_NEXT(IRA)  - A ch$ptr to the character after the last one
!		        in the command
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF
	.POSITION
    THEN
	ENDCMT();	! Position to end of command.

    ERM(.ERROR,.GCA_COM_START,CH$DIFF(.FS_NEXT(IRA),.GCA_COM_START));

    ERM(RNFLOC,0,0);

    END;		! End of ERMA

%SBTTL 'ERMB -- add input text & location to error message'
GLOBAL ROUTINE ERMB (ERROR,POSITION) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains a sequence of code that is commonly used
!	for handling errors.
!
!	Processing is like ERMA except that the entire input line is
!	displayed rather than just a command.
!
!	If the POSITION parameter is TRUE, it calls ENDCMT to
!	position to the end of the erroneous command.  It always passes
!	to ERM the specified error message (ERROR), and the start and
!	length of the string to be inserted into the error message. 
!	Note that this call on ERM does not depend on the value of POSITION.
!
!	Finally, it calls ERM to output the error message indicating
!	where in the input and output files the error occurred.
!
! FORMAL PARAMETERS:
!
!	ERROR - Address of desired error diagnostic. Passed to ERM.
!	POSITION - If TRUE, ERMA positions to the end of the
!		   command before issuing the second call on ERM.
!
! IMPLICIT INPUTS:
!
!	RNFLOC	- An error message stating where error occurred
!	FS_START(IRA)	- A ch$ptr to the start of the input line.
!	FS_MAXSIZE(IRA)	- The total size of the input line.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF
	.POSITION
    THEN
	ENDCMT();	! Position to end of command.

    ERM(.ERROR,.FS_START(IRA),.FS_MAXSIZE(IRA));

    ERM(RNFLOC,0,0);

    END;		! End of ERMB

%SBTTL 'ERML -- add location to error message without additional data'
GLOBAL ROUTINE ERML (ERROR) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains a sequence of code that is commonly used
!	for handling errors.
!
!	ERML is just a shortcut for the following calls:
!		ERM(.ERROR,0,0);
!		ERM(RNFLOC,0,0);
!	In other words, it saves code.
!
!
! FORMAL PARAMETERS:
!
!	ERROR - Address of desired error diagnostic. Passed to ERM.
!
! IMPLICIT INPUTS:
!
!	RNFLOC	- An error message stating where error occurred
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    ERM(.ERROR,0,0);

    ERM(RNFLOC,0,0);

    END;		! End of ERML

%SBTTL 'ERMN -- add location to error message w/numeric data'
GLOBAL ROUTINE ERMN (ERROR, ARG) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains a sequence of code that is commonly used
!	for handling errors.
!
!	The code is straightforward.  It is mainly a code-saver.
!
!
! FORMAL PARAMETERS:
!
!	ERROR - Address of desired error diagnostic. Passed to ERM.
!	ARG -   A number to be output.
!
! IMPLICIT INPUTS:
!
!	RNFLOC	- An error message stating where error occurred
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    ERM(.ERROR,.ARG,0);

    ERM(RNFLOC,0,0);

    END;		! End of ERMN

%SBTTL 'ERMS -- add location to error message w/string data'
GLOBAL ROUTINE ERMS (ERROR, ARG, LEN) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains a sequence of code that is commonly used
!	for handling errors.
!
!	The code is straightforward.  It is mainly a code-saver.
!
!
! FORMAL PARAMETERS:
!
!	ERROR - Address of desired error diagnostic. Passed to ERM.
!	ARG -   A CH$PTR to the string to be output.
!	LEN -   The length of the string.
!
! IMPLICIT INPUTS:
!
!	RNFLOC	- An error message stating where error occurred
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    ERM(.ERROR, .ARG, .LEN);

    ERM(RNFLOC, 0, 0);

    END;		! End of ERMS

%SBTTL 'ERM -- funnel message to appropriate error output mechinism'
GLOBAL ROUTINE ERM (ERROR,ARG,LEN) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates and prints the requested error diagnostic.
!	The first routine argument points to an error string consisting of
!	a string intermixed with special formatting flags which cause special
!	actions to happen to the string when a flag is encountered.
!	The routine SCNMSG is called to expand the error message
!	before it is output.
!
! FORMAL PARAMETERS:
!
!	ERROR - Pointer to the desired error diagnostic.
!	ARG - Contains a value if it is to be used with %N;
!	      contains a pointer to a string if it is to be used with %S.
!	LEN - Unused with %N, Contains the string length for %S.
!
!	All parameters are "pass through" parameters for SCNMSG.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	GCA_FEHLER	- Set to TRUE to indicate an error occurred
!	GCA_ERRCNT	- Count of lines of error messages
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

EXTERNAL LITERAL			!Error messages previously undeclaired
	RNFBAK,
	RNFERD,
	RNFMRC,
	RNFNIC,
	RNFNED,
	RNFPCT,
	RNFPC1,
	RNFSTR;

LITERAL	e_number_mask	= %X'7FF8';

    LOCAL
	LINE:	VECTOR[CH$ALLOCATION(500)],	!Packed line for output
	LINE_CNT,				!Size of output line
	e_number,				!error number
	STATUS;					!Status code returned by XPORT

%IF %BLISS(BLISS32)
%THEN
    LOCAL
	strdesc: BLOCK[8,BYTE];			!eventual pointer to message

	! Initialize message string descriptor:

    strdesc [dsc$b_dtype] = dsc$k_dtype_t;	! ASCII text (8-bit)
    strdesc [dsc$b_class] = dsc$k_class_s;	! Scalar, String Descriptor
    strdesc [dsc$a_pointer] = line[0];		! First byte of LINE vector

    e_number = (.error and e_number_mask)/8;
%ELSE

    e_number = .error;

%FI

    !Count every real error message
    IF (    .ERROR NEQ RNFBAK
	AND .ERROR NEQ RNFERD
	AND .ERROR NEQ RNFLOC
	AND .ERROR NEQ RNFMRC	! The parameter passed will be added in later.
	AND .ERROR NEQ RNFNIC	! The parameter passed will be added in later.
	AND .ERROR NEQ RNFNED
	AND .ERROR NEQ RNFPCT
	AND .ERROR NEQ RNFPC1
	AND .ERROR NEQ RNFSTR  ) 
	THEN
	    BEGIN
	    GCA_FEHLER	= TRUE;
	    GCA_ERRCNT	= .GCA_ERRCNT + 1;
	    END;

    IF (    .ERROR EQL RNFMRC	! These two messages display an accumulated
	OR  .ERROR EQL RNFNIC ) ! count of errors previously unreported.
	THEN			!   Add their count to total counter.
	    GCA_ERRCNT  = .GCA_ERRCNT + .ARG;

    LINE_CNT = SCNMSG(CH$PTR(LINE),.MSGTXT[.e_number],.ARG,.LEN);

%IF %BLISS(BLISS32)
%THEN
    strdesc [dsc$w_length] = .line_cnt;	! Put message length into descriptor
%FI

    !The line is now packed correctly, so output it to the requested places.
    CASE .GCA_ERR_DIR FROM REPORT_ERR_NONE TO REPORT_ERR_BOTH OF
    SET
    [REPORT_ERR_NONE]:
		BEGIN
		0	!Don't bother to output the message
		END;

    [REPORT_ERR_FILE]:
		BEGIN
		!Report error in output file
%IF NOT %BLISS(BLISS32)
%THEN
		STATUS = $XPO_PUT( IOB = .RNOIOB,
				STRING = (.LINE_CNT, CH$PTR(LINE)) );
		!Add carriage control information to the end of the error message
		STATUS = $XPO_PUT ( IOB = .RNOIOB,
				STRING = (2, CH$PTR (UPLIT (%STRING (%CHAR  (%O'15', %O'12'))))) );
%ELSE
		STATUS = emsg(.error,strdesc,true);
%FI
		END;

    [REPORT_ERR_STD]:
		BEGIN
		!Report error on standard error log
%IF NOT %BLISS(BLISS32)
%THEN
		STATUS = $XPO_PUT( IOB = TTEIOB,
				  STRING = (.LINE_CNT, CH$PTR(LINE)) );
%ELSE
		STATUS = emsg(.error,strdesc,false);
%FI
		END;

    [REPORT_ERR_BOTH]:
		!Report error both places
		BEGIN
		!Report error in output file
%IF NOT %BLISS(BLISS32)
%THEN
		STATUS = $XPO_PUT( IOB = .RNOIOB,
				  STRING = (.LINE_CNT, CH$PTR(LINE)) );
		!Add carriage control information to the end of the error message
		STATUS = $XPO_PUT ( IOB = .RNOIOB,
				    STRING = (2, CH$PTR (UPLIT (%STRING (%CHAR  (%O'15', %O'12'))))) );

		!Report error on standard error log
		STATUS = $XPO_PUT( IOB = TTEIOB,
				  STRING = (.LINE_CNT, CH$PTR(LINE)) );
%ELSE
		STATUS = emsg(.error,strdesc,true);
%FI
		END;
    TES;



    END;			!End of ERM

%SBTTL 'PUTMSG -- funnel message to appropriate output mechinism'
GLOBAL ROUTINE PUTMSG (MESSAGE,ARG,LEN) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates and prints the requested message.
!	The first routine argument points to a string consisting of
!	a string intermixed with special formatting flags which cause special
!	actions to happen to the string when a flag is encountered.
!	The routine SCNMSG is called to expand the message
!	before it is output.
!
! FORMAL PARAMETERS:
!
!	MESSAGE - Pointer to the desired message.
!	ARG - Contains a value, if it is to be used with %N,
!	      contains a pointer to a string if it is to be used with %S.
!	LEN - Unused with %N, Contains the string length for %S.
!
!	All parameters are "pass through" parameters for SCNMSG.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LITERAL	e_number_mask	= %X'7FF8';

    LOCAL
	LINE:	VECTOR[CH$ALLOCATION(500)],	!Packed line for output
	LINE_CNT,				!Size of output line
	e_number,				!error number
	STATUS;					!Status code returned by XPORT

%IF %BLISS(BLISS32)
%THEN
    LOCAL
	strdesc: BLOCK[8,BYTE];			!eventual pointer to message

	! Initialize message string descriptor:

    strdesc [dsc$b_dtype] = dsc$k_dtype_t;	! ASCII text (8-bit)
    strdesc [dsc$b_class] = dsc$k_class_s;	! Scalar, String Descriptor
    strdesc [dsc$a_pointer] = line[0];		! First byte of LINE vector

    e_number = (.message and e_number_mask)/8;
%ELSE

    e_number = .message;

%FI

    LINE_CNT = SCNMSG(CH$PTR(LINE),.MSGTXT[.e_number],.ARG,.LEN);

%IF %BLISS(BLISS32)
%THEN
    strdesc [dsc$w_length] = .line_cnt;	! Put message length into descriptor
%FI

    !The line is now packed correctly, so output it to the terminal
%IF NOT %BLISS(BLISS32)
%THEN
    STATUS = $XPO_PUT( IOB = TTOIOB,	!Standard message device (usually TTY:)
		       STRING = (.LINE_CNT, CH$PTR(LINE)) );
%ELSE
    STATUS = 	emsg(.message,strdesc,false);
%FI

    END;			!End of PUTMSG

%SBTTL 'SCNMSG -- fill in missing arguments in message string'
ROUTINE SCNMSG (LINE,MESSAGE,ARG,LEN) = 

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine expands the specified message.
!	The first routine argument is a ch$ptr to a work area where the
!	expanded message is written to.
!	The second routine argument points to a string consisting of
!	a string intermixed with special formatting flags which cause special
!	actions to happen to the string when a flag is encountered.
!	The legal flags in the string are:
!
!		%S - Using the second and third call arguments place the
!		     specified string at this point.
!		%N - Using the second argument only, place the specified
!		     decimal number at this point.
!		%P - Insert the Current Output Page.
!		%L - Insert the Current Output Line.
!		%I - Insert the input page number.
!		%C - Insert the input sequence number.
!		%F - Insert the name of the current input file.
!		%O - Insert the name of the output file.
!		%V - Insert the program version number
!		%X - Insert "s" if %N is other then 1.
!
!	More than one of the above arguments can occur in a message,
!	except that %S and %N are mutually exclusive and cannot occur
!	in the same message.
!
!	An illegal flag will be interpreted as plaintext.
!
! FORMAL PARAMETERS:
!
!	LINE - Ch$ptr to where the message is to be built up
!	MESSAGE - Pointer to the desired message (unexpanded).
!	ARG - Contains a value, if it is to be used with %N,
!	      contains a pointer to a string if it is to be used with %S.
!	LEN - Unused with %N, Contains the string length for %S.
!
! IMPLICIT INPUTS:
!
!	PAGEN		- Output Page number
!	PHAN_LINES_TP	- Output Line number
!	IRAC_IPAGEN	- Input page number
!	IRAC_ISEQN	- input line count
!	IRAC_FSPECP	- Pointer to Input file name string
!	IRAC_FSPECC	- Length of Input file name string
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Returns the number of characters in the expanded message.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	LINE_CNT,				!Size of output line
	LINE_PTR,				!String pointer to output line
	STRG_CNT,				!Size of input line
	STRG_PTR;				!String pointer to input line

    !Set up for processing
    LINE_PTR=.LINE;
    LINE_CNT=0;
    STRG_PTR=.MESSAGE;

    !Get input line size
    STRG_CNT=CH$RCHAR_A(STRG_PTR);

    !Now process the entire input string
    INCR I FROM 1 TO .STRG_CNT DO
	BEGIN

	LOCAL
	    CHARACTER;

	CHARACTER=CH$RCHAR_A(STRG_PTR);

	IF
	    .CHARACTER NEQ %C'%'
	THEN
	    !Normal text characters are packed directly
	    BEGIN
	    CH$WCHAR_A(.CHARACTER,LINE_PTR);
	    LINE_CNT=.LINE_CNT+1
	    END
	ELSE
	    !Special case flag handling goes on here
	    BEGIN

	    CHARACTER=CH$RCHAR_A(STRG_PTR);
	    I=.I+1;

	    !Process all of the alternatives
	    SELECTONE .CHARACTER OF
		SET

		[%C'C']:
		    !Input Sequence Number
		    LINE_CNT=.LINE_CNT+PACBAS(.IRAC_ISEQN,LINE_PTR, 10);

		[%C'F']:
		    !Current Input File Name
		    LINE_CNT=.LINE_CNT+PACSTR(.IRAC_FSPECP,.IRAC_FSPECC,LINE_PTR);

		[%C'O']:
		    !Output File Specification
		    BEGIN
		    BIND
			FILE_SPEC_DESCR = RNOIOB [IOB$T_RESULTANT] : $STR_DESCRIPTOR ();
		    LINE_CNT = .LINE_CNT + PACSTR(.FILE_SPEC_DESCR [STR$A_POINTER],
						  .FILE_SPEC_DESCR [STR$H_LENGTH],
						  LINE_PTR);
		    END;

		[%C'I']:
		    !Input Page Number
		    LINE_CNT=.LINE_CNT+PACBAS(.IRAC_IPAGEN,LINE_PTR, 10);

		[%C'L']:
		    !Output Line Number
		    LINE_CNT=.LINE_CNT+PACBAS(.PHAN_LINES_TP,LINE_PTR, 10);

		[%C'N']:
		    !Numeric passed argument
		    LINE_CNT=.LINE_CNT+PACBAS(.ARG,LINE_PTR, 10);

		[%C'P']:
		    !Current Output Page Number
		    LINE_CNT=.LINE_CNT+PACPAG(PAGEN,LINE_PTR);

		[%C'S']:
		    !String passed argument
		    !In no case insert more than 100 characters.  (Defensive coding.)
		    LINE_CNT=.LINE_CNT+PACSTR(.ARG, MIN (100,.LEN) ,LINE_PTR);
		
		[%C'V']:
		    !Insert version number of program
		    BEGIN
		    EXTERNAL
			RNOVRL,		!Length of version number string
			RNOVRP;		!CH$PTR to string
		    LINE_CNT=.LINE_CNT+PACSTR(.RNOVRP,.RNOVRL,LINE_PTR);
		    END;

		[%C'X']:
		    !Insert an "s" if %N was other then 1.
		    IF .ARG NEQ 1 THEN
			BEGIN
			CH$WCHAR_A(%C's',LINE_PTR);
			LINE_CNT=.LINE_CNT+1
			END;

		[OTHERWISE]:
		    !Unrecognized flag, treat as text
		    BEGIN
		    CH$WCHAR_A(%C'%',LINE_PTR);
		    CH$WCHAR_A(.CHARACTER,LINE_PTR);
		    LINE_CNT=.LINE_CNT+2
		    END;

		TES

	    END

	END;

    RETURN .LINE_CNT;

    END;			!End of SCNMSG
END				!End of module
ELUDOM
