MODULE CNVDAO (		!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Convert binary and date and time into something
!		more legible (i.e., ASCII).
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!
! MODIFIED BY:
!
!--
!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    CONVBB;
GLOBAL ROUTINE CNVDAT (PIECES, RESULT, RESULT_LENGTH) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts a binary date into something legible.
!
! FORMAL PARAMETERS:
!
!	PIECES are the separated month, day, and year.
!	It's really the complete binary date and time, but only the
!	date portion is used.
!	RESULT is a CH$PTR to where the results are to go.
!	RESULT_LENGTH is the number of characters in the result.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Advances the pointer, RESULT.
!
!--

    BEGIN

    LOCAL
	CHARS : VECTOR [20],
	COUNT;

    MAP
	PIECES : REF VECTOR;

    BIND
	YEAR = PIECES[0],
	MONTH = PIECES[1],
	DAY = PIECES[2];

    !Convert the day to ASCII.
    CONVBB(.DAY,CHARS,COUNT, 10);

    !Insist that the day be two digits.
    IF!
	.COUNT NEQ 2
    THEN
	CH$WCHAR_A(%C'0', .RESULT);

    !Now copy over what was actually converted.
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Now, add an appropriate separator.
    CH$WCHAR_A(%C' ', .RESULT);

    !Add the name of the month.
    BEGIN
    BIND
	MONTH_NAME = UPLIT (CH$PTR(UPLIT('Jan')),
			    CH$PTR(UPLIT('Feb')),
			    CH$PTR(UPLIT('Mar')),
			    CH$PTR(UPLIT('Apr')),
			    CH$PTR(UPLIT('May')),
			    CH$PTR(UPLIT('Jun')),
			    CH$PTR(UPLIT('Jul')),
			    CH$PTR(UPLIT('Aug')),
			    CH$PTR(UPLIT('Sep')),
			    CH$PTR(UPLIT('Oct')),
			    CH$PTR(UPLIT('Nov')),
			    CH$PTR(UPLIT('Dec')) ) : VECTOR;
    LOCAL
	PTR;

    PTR = .MONTH_NAME[.MONTH-1];

    INCR I FROM 1 TO 3 DO CH$WCHAR_A(CH$RCHAR_A(PTR), .RESULT);
    END;
   
    !Add a separator.
    CH$WCHAR_A(%C' ', .RESULT);

    !Put in the year.
    CONVBB(.YEAR,CHARS,COUNT, 10);
    CH$WCHAR_A(.CHARS[1], .RESULT);
    CH$WCHAR_A(.CHARS[0], .RESULT);

    !And return the length.
    .RESULT_LENGTH = 2 + 1 + 3 + 1 + 2;

    RETURN;



    END;			!End of CNVDAT
GLOBAL ROUTINE CNVTIM (PIECES, RESULT, RESULT_LENGTH) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts a binary time into something legible.
!
! FORMAL PARAMETERS:
!
!	PIECES is the complete binary date and time.  This routine
!	uses only the time information.
!	RESULT is a CH$PTR to where the results are to go.
!	RESULT_LENGTH is the number of characters in the result.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Advances the pointer, RESULT.
!
!--

    BEGIN

    LOCAL
	CHARS : VECTOR[20],
	COUNT;

    MAP
	PIECES : REF VECTOR;

    BIND
	HOURS = PIECES[3],
	MINUTES = PIECES [4],
	SECONDS = PIECES [5];

    !Convert the hours.
    CONVBB(.HOURS,CHARS,COUNT, 10);

    !Put the characters into the string.  Force it to be exactly
    !two digits.
    INCR I FROM 1 TO (2 - .COUNT) DO
	CH$WCHAR_A(%C'0', .RESULT);
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Insert a separator
    CH$WCHAR_A(%C':', .RESULT);

    !Convert the minutes
    CONVBB(.MINUTES,CHARS,COUNT, 10);

    !Put the characters into the string.  Force it to be exactly
    !two digits.
    INCR I FROM 1 TO (2 - .COUNT) DO
	CH$WCHAR_A(%C'0', .RESULT);
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Insert a separator
    CH$WCHAR_A(%C':', .RESULT);

    !Convert the seconds
    CONVBB(.SECONDS,CHARS,COUNT, 10);

    !Put the characters into the string.  Force it to be exactly
    !two digits.
    INCR I FROM 1 TO (2 - .COUNT) DO
	CH$WCHAR_A(%C'0', .RESULT);
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Return the length.
    .RESULT_LENGTH = 2 + 1 + 2 + 1 + 2;

    RETURN;

    END;			!End of CNVTIM
END				!End of module
ELUDOM
