MODULE PARAGO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes .PARAGRAPH, .SET PARAGRAPH, .(NO)AUTOPARAGRAPH, and .(NO)AUTOTABLE
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! 	MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:NMLST.REQ';

REQUIRE 'REQ:PDT.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    NMLST : NUMBER_LIST,
    PDT : REF PDT_DEFINITION,
    SCA : SCA_DEFINITION;

!

EXTERNAL LITERAL 				!Error messages
    RNFINM;

EXTERNAL ROUTINE
    ERMA,
    GCPOS,
    GCSKIP,
    GLNM,
    GTPC,
    OUTNJ,
    RSKIPS;


GLOBAL ROUTINE PARAG (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates the command to be processed.
!	In addition, -1 means set a pending paragraph.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    SELECTONE .HANDLER_CODE OF
	SET

	[-1] :
	    BEGIN				!an "auto-ed" paragraph
	    OUTNJ ();
	    !Skip all spaces and tabs to get to
	    !text on line.  This duplicates handling
	    !done by old RUNOFFs.
	    RSKIPS (IRA);
	    !Always do the indentation.
	    SCA_INDENT = .PDT_INDENT;
	    !Pend the skipping only if this section is not empty.
	    SCA_PARA_PND = NOT .SCA_SECT_EMPTY;
	    END;

	[H_AUTOPARAGRAPH] :
	    BEGIN
	    GCA_AUTOPARA = TRUE;
	    !Disable .AUTOTABLE.
	    GCA_AUTOTABL = FALSE;
	    END;

	[H_NO_AUTOTABLE, H_NO_AUTOPARAGR] :
	    BEGIN
	    !Disable both .AUTOTABLE and .AUTOPARAGRAPH.
	    GCA_AUTOPARA = FALSE;
	    GCA_AUTOTABL = FALSE;
	    END;

	[H_AUTOTABLE] :
	    BEGIN
	    GCA_AUTOTABL = TRUE;
	    !Disable .AUTOPARAGRAPH.
	    GCA_AUTOPARA = FALSE;
	    END;

	[H_PARAGRAPH, H_SET_PARAGRAPH] :
	    BEGIN
!
	    ! Get parameters
	    GLNM (3);

	    INCR I FROM 1 TO .NMLST_COUNT DO

		IF 				!
		    .NMLST_DESCR (.I) EQL NM_BAD
		THEN 				!Ignore entire command if a single argument is bad.
		    RETURN;

	    IF 					!
		.NMLST_COUNT GTR 0
	    THEN
	    !User supplied at least one parameter.
		BEGIN

		IF 				!
		    .NMLST_DESCR (1) NEQ NM_NULL
		THEN
		!Use first argument as paragraph indentation, if
		!it was supplied.
		    PDT_INDENT = .NMLST_VALUE (1);

		IF 				!
		    .NMLST_COUNT GTR 1
		THEN

		    IF 				!
			.NMLST_DESCR (2) NEQ NM_NULL
		    THEN

!!!!			IF 			!
!!!!			!Use second argument as pre-paragraph skipping,
!!!!			!if it was supplied.
!!!!			    .NMLST_VALUE (2) GEQ -1
!!!!			THEN
			    PDT_SKIP = .NMLST_VALUE (2);
!!!!			ELSE
!!!!			    BEGIN
!!!!			    !Invalid argument.
!!!!			    ERMA (RNFINM, FALSE);
!!!!			    END;

		!Validation of "paragraph test page" parameter.

		IF 				!
		    .NMLST_COUNT EQL 3
		THEN

		    IF 				!
			.NMLST_DESCR (3) NEQ NM_NULL
		    THEN
			BEGIN

			IF 			!
			    .NMLST_DESCR (3) EQL NM_UNSIGNED
			THEN
			!If 3rd argument is unsigned, that is the
			!the test page value.
			    PDT_TP = .NMLST_VALUE (3)
			ELSE
			!Validate 3rd argument if it's signed.
			    BEGIN

			    LOCAL
				TEMP;

			    !Try out adjustment to current test page value.
			    TEMP = .PDT_TP + .NMLST_VALUE (3);

			    IF 			!
				.TEMP GEQ 0
			    THEN
			    !Save valid adjusted test page setting.
				PDT_TP = .TEMP
			    ELSE
			    !Invalid test page specification.
				ERMA (RNFINM, FALSE);

			    END;

			END;

		END;				!End of parameter processing

	    IF					!
		.HANDLER_CODE EQL H_SET_PARAGRAPH
	    THEN
		RETURN;

	    !Now, actually start a paragraph.
	    !
	    !Generate intermediate code for the paragraph
	    !paper vertical positioning.

	    IF 					!
		(NOT .SCA_SECT_EMPTY)
		OR (.PDT_SKIP LSS 0)
	    THEN
	    !Do the pre-paragraph skipping only if there is
	    !something in the current section.
		BEGIN

		LOCAL
		    SKIP,
		    TEST_PAGE;

		!

		IF 				!
		    .PDT_SKIP LSS 0
		THEN
		!Special case if pre-paragraph skipping is less than 0.
		    SKIP = (.SCA_SPACING + 1)/2
		ELSE
		    SKIP = .PDT_SKIP*.SCA_SPACING;

		!See if a new page should be started.
		TEST_PAGE = (.PDT_TP + 1)*.SCA_SPACING + .SKIP;

		IF 				!
		    .TEST_PAGE NEQ 0
		THEN
		    BEGIN			!Code for a test page command
		    GTPC (.TEST_PAGE);
		    END;

		IF 				!
		    .PDT_SKIP NEQ 0
		THEN
		    BEGIN			!Code for skipping lines.

		    IF 				!
			.PDT_SKIP LSS 0
		    THEN
		    !A negative pre-paragraph skip setting means
		    !"go to" a particular line on the page.
			GCPOS (.PDT_SKIP*.SCA_SPACING)
		    ELSE
		    !Usual, positive pre-paragraph skipping.
!!!!			GCSKIP (.PDT_SKIP*.SCA_SPACING);
			GCSKIP ( MAX (1, (.PDT_SKIP-(.SCA_SPACING-1))*.SCA_SPACING));

		    END;

		END;

	    !Force out the vertical motion so that change bars don't get
	    !carried back too far.  This is a patch to fix a bug.
	    OUTNJ ();

	    SCA_INDENT = .PDT_INDENT;		!Pend the indentation.
	    END;
	TES;

    END;					!End of PARAG

END						!End of module

ELUDOM
