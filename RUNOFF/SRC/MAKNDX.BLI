MODULE MAKNDO (					!
	IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the .INDEX, .ENTRY, and .SUBINDEX commands
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY: K. A. Dawson
!
!
!	008	REM00008	Ray Marshall	17-December-1981
!		Built up revision history based on CMS library generations.
!
!	007	RWF00007	Rich Friday	5-November-1981
!		Footnote control was moved to its own control area in its own
!		  require file (FNCT.REQ).  Appropreate changes have been made.
!
!	006	REM00006	Ray Marshall	25-August-1981
!		Update copyright and initial reformatting of revision history.
!
!	005	KAD00005	Keith Dawson	4-February-1981
!		For V1.126c.
!		Turn off SCA_X_FLAG here, to fix bug of .X appending to
!		  index-flag buffer if flagged word is not ended.  
!
!	004	KAD00004	Keith Dawson	14-November-1980
! 		For V1.124h:  Change meaning of SCA_XROUTINE. It is now a bit,
!		  not an address. If TRUE, then call SUBXR for index=phrase
!		  processing. If FALSE (as initialized in RINIT), then call XR.
!		Moved routine OUTXPH to OUTXHR.BLI to aid in developing the
!		  PDP-11 overlay structure.
!
!	003	KAD00003	Keith Dawson	21-October-1980
!		Fixup require file declarations so they now all come from REQ:
!		  and not the local directory.
!
!	002	KAD00002	Keith Dawson	20-October-1980
!		Commented out the REQUIRE of SETCAS.REQ.
!		Case translation is now controlled by GCA_XCASE which is in
!		  turn controlled by the new directives .XUPPER/.XLOWER.
!
!	001	KAD00001	Keith Dawson	17-October-1980
!		I (Ray Marshall) don't know what (if any) changes were made
!		  on or before this date.  This is the first generation in
!		  the CMS library.
!--

!
! TABLE OF CONTENTS:
!


!
! INCLUDE FILES:
!

REQUIRE 'REQ:ATCODE.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FNCT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:LSTBTS.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    ATABLE : VECTOR,
    FLGT : FLAG_TABLE,
    FNCT : FNCT_DEFINITION,
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    XMRA : FIXED_STRING,
    XTSF : VECTOR;

EXTERNAL ROUTINE
    ENDWRD,
    OFT,
    OUTLIN,
    RSKIPS,
    SCANT,
    SETCAS,
    SUBXR;


GLOBAL ROUTINE MAKNDX (HANDLER_CODE, DO_INDEXING) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE	- The command to be processed.
!	DO_INDEXING	- If FALSE, the scan is done but no index entry is made.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	SCA_PARA_COPY,
	SCA_INDENT_COPY,
	HOLD_IND_FLAG,
	HOLD_IND_EFLAG,
	SCA_COPY : SCA_DEFINITION;		!Used to preserve SCA.

    LOCAL
	MRA_TEMP : VECTOR [4 + CH$ALLOCATION (1000)],	!Temporary MRA area
	TSF_TEMP : VECTOR [TSF_SIZE];		!Temporary TSF

    LOCAL
	MRA_ADDRESS,				!Preserve interrupted MRA
	TSF_ADDRESS;				!Preserve interrupted TSF

    LOCAL
	XTN;					!Computed transaction number for index entry.

    XTN = 0;					!Assume it's a .ENTRY command.
    !No transaction number is needed for .ENTRY commands, since they
    !get no page number in the index.  Also, if indexing commands
    !are to be ignored, no transaction number is needed either.

    IF 						!
	.DO_INDEXING				!
	AND (.HANDLER_CODE NEQ H_ENTRY)
    THEN
	BEGIN
	! Compute the transaction number associated with this entry.

	IF 					!
	    .FNCT_COLLECTING
	THEN
	!For footnotes, use the alternate set of transaction numbers.
	    BEGIN
	    XTN = .GCA_FOOT_XTN;
	    GCA_FOOT_XTN = .GCA_FOOT_XTN + 1;	!Bump for next index entry
	    END
	ELSE
	!Use the primary set of transaction numbers for index entries
	!coming from the main text.
	    BEGIN
	    XTN = .GCA_NORMAL_XTN;
	    GCA_NORMAL_XTN = .GCA_NORMAL_XTN + 1;	!Bump for next index entry
	    END;

	!The page number associated with this index entry is the same
	!as that of the word being worked on.

	IF 					!
	    .SCA_WRD_F_XTN EQL 0
	THEN
	    SCA_WRD_F_XTN = .XTN;

	IF 					!
	    .XTN NEQ 0
	THEN
	    SCA_WRD_L_XTN = .XTN;

	END;

    RSKIPS (IRA);				!Skip spaces and tabs preceeding the index item(s)

    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA_COPY [.I] = .SCA [.I];		!Save SCA

    !Initialize SCA prior to scanning the string.
    !Incr I from 0 to SCA_SIZE - 1 do SCA[.i] = 0;
    SCA_LM = 0;
    SCA_RM = 150;				!Set wide right margin so won't start a new line.
    SCA_X_FLAG = FALSE;				!Turn off index flag now in case we are in the middle of an index-flagged word.
    SCA_SPACING = 1;				!Single spacing avoids spurious intermediate code.
!!    SETCAS (ONE_CAP);				!Force first character of first word
!!						!to upper case, rest to lower case.
    SETCAS (.GCA_XCASE);			!Use case translation rules defined by .XLOWER or .XUPPER command.
    SCA_FC = TRUE;				!This is the first character for the MRA.
    SCA_FC_CASE = TRUE;				!Use first character-of-word case rules.
    SCA_XROUTINE = TRUE;			!TRUE ==> use SUBXR for index phrase processing routine.
    SCA_PRESCAN = TRUE;				!A ';' terminates the scan.
    SCA_PARA_COPY = .SCA_PARA_PND;		!Don't let FCIMRA do any indentation, etc.
    SCA_INDENT_COPY = .SCA_INDENT;		!...
    SCA_PARA_PND = FALSE;			!...
    SCA_INDENT = 0;				!...
    SCA_FILL = FALSE;
    SCA_JUSTIFY = FALSE;
!
    !Preserve the addresses of the structures to which these items refer.
    MRA_ADDRESS = .MRA;
    TSF_ADDRESS = .TSF;
    !Now switch working buffers, so that text currently being accumulated
    !is not disturbed.
    MRA = MRA_TEMP;
    TSF = TSF_TEMP;
    !Now manually set up MRA, to look like a FIXED STRING.
    FS_MAXSIZE (MRA) = 1000;
    FS_INIT (MRA);				!And that finishes the initialization.
!
    !Now initialize TSF for SCANT.

    INCR I FROM 0 TO TSF_SIZE - 1 DO
	TSF [.I] = 0;

    TSF_INDEX = TRUE;				!This TSF record describes an index entry.
    TSF_FIRST_XTN = .XTN;
!
    SCA_WRD_INT_L = 0;
    SCA_WRD_EXT_L = 0;
    SCA_WRD_ISEQN = 0;
    SCA_WRD_DRAFT = 0;
    SCA_WRD_DRAFT_F = 0;
    SCA_WRD_BARS = 0;
    SCA_WRD_BAR_CHR = 0;
    SCA_WRD_SEQN_F = 0;
    SCA_WRD_IPAGEN = 0;
    SCA_WRD_FOOTW = 0;
    SCA_WRD_F_XTN = 0;
    SCA_WRD_L_XTN = 0;
    SCA_WRD_LC_PNCT = 0;
    SCA_WRD_LST_SP = 0;
    SCA_WRD_LST_JUS = 0;
    SCA_WRD_LST_UND = 0;
    SCA_WRD_PNTR = .FS_NEXT (MRA);
    SCA_WRD_CPEND = RINTES;			!Tell ENDCHR no character is pending.
    FS_START (MRA) = .SCA_WRD_PNTR;
    HOLD_IND_FLAG = .FLGT [IND_FLAG, FLAG_CHARACTER];	!Preserve <INDEX flag> status.
    HOLD_IND_EFLAG = .FLGT [IND_FLAG, FLAG_ENABLED];	!...
    OFT (H_NO_FLAGS_INDE, IND_FLAG);		!Disable <INDEX flag>

    IF 						!
	.FLGT [SBX_FLAG, FLAG_ENABLED]		!
	AND .SCA_FLAGS
    THEN
    !Enable <SUBINDEX flag> recognition.
    !The <SUBINDEX flag> temporarily occupies areas reserved for
    !the <INDEX flag>.
	BEGIN
	FLGT [IND_FLAG, FLAG_CHARACTER] = .FLGT [SBX_FLAG, FLAG_CHARACTER];
	FLGT [IND_FLAG, FLAG_ENABLED] = TRUE;
	ATABLE [.FLGT [SBX_FLAG, FLAG_CHARACTER]] = A_FLAG;
	END;

    !Now let SCANT process the command.
    SCANT ();
    !Restore <INDEX flag> to former status.
    OFT (H_NO_FLAGS_INDE, IND_FLAG);
    FLGT [IND_FLAG, FLAG_CHARACTER] = .HOLD_IND_FLAG;
    FLGT [IND_FLAG, FLAG_ENABLED] = .HOLD_IND_EFLAG;

    IF 						!
	.FLGT [IND_FLAG, FLAG_ENABLED]		!
	AND .SCA_FLAGS
    THEN
	ATABLE [.FLGT [IND_FLAG, FLAG_CHARACTER]] = A_FLAG;

    !Return here is with a word.

    IF 						!
	.DO_INDEXING
    THEN
	BEGIN

	IF 					!
	    .SCA_WRD_CPEND NEQ RINTES
	THEN
	    ENDWRD (FALSE, FALSE, FALSE);		!End word, but don't write a space too.

	OUTLIN (FALSE);				!Don't disturb justification algorithm
	END;

    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA [.I] = .SCA_COPY [.I];		!Restore SCA

    MRA = .MRA_ADDRESS;				!Restore previous status.
    TSF = .TSF_ADDRESS;				!...
    SCA_PARA_PND = .SCA_PARA_COPY;		!...
    SCA_INDENT = .SCA_INDENT_COPY;		!...
    END;					!End of MAKNDX

END						!End of module

ELUDOM
