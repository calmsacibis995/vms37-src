MODULE COOVBR (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: General purpose routine
!
! ABSTRACT: Convert a binary number into a vector of roman numerals and
!	    return the result and character count.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1979
!
! MODIFIED BY:
!
!--

!
! MACROS:
!
MACRO
    R10(C) =
	IF C EQL %C'i' THEN %C'x'
	ELSE
	IF C EQL %C'x' THEN %C'c'
	ELSE
	IF C EQL %C'c' THEN %C'm'
	ELSE
	IF C EQL %C'v' THEN %C'l'
	ELSE
	IF C EQL %C'l' THEN %C'd'
	ELSE
		%C'*'			%;

MACRO
    RPLIT (S) =
	CH$PTR( UPLIT(%STRING(%CHAR(%CHARCOUNT(S)),S)) ) %;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

BIND
    ROM_TAB = UPLIT (
			RPLIT('0'),		!0
			RPLIT('i'),		!1
			RPLIT('ii'),		!2
			RPLIT('iii'),		!3
			RPLIT('iv'),		!4
			RPLIT('v'),		!5
			RPLIT('vi'),		!6
			RPLIT('vii'),		!7
			RPLIT('viii'),		!8
			RPLIT('ix')		!9
				): VECTOR;

GLOBAL ROUTINE CONVBR (BINARY_NUMBER, KHARACTERS, KHARACTER_COUNT, ULM) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts 'binary_number' to a vector of roman numerals,
!	returning them in 'kharacters'; kharacter_count is the
!	number of characters that result.
!	The absolute value of 'binary_number' is converted,
!	so that the user is responsible for handling negative numbers.
!	ULM is as follows: -1 means return all characters in upper case.
!			    0 means return all characters in lower case.
!			   +1 means first character in upper case, rest in lower case.
!
!				NOTE
!	The algorithm used here does not take into account many
!	special cases for which shorter Roman forms are possible.
!	For example, 45 is translated to XLV, even though VL is
!	obviously shorter.  This is not a bug, but is well within
!	the tradition of how Roman numerals were formulated.
!	The Romans themselves did not always use the "subtractive"
!	principle in its fullest;  it is possible to find Roman
!	inscriptions that use IIXX for 18, for example.  Similarily,
!	VIIII is not uncommon for 9.
!
! FORMAL PARAMETERS:
!
!	See FUNCTIONAL DESCRIPTION
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND
	ROM_DIGITS = .KHARACTERS : VECTOR;

    LOCAL
	DEC_DIGITS : VECTOR [20],
	DEC_DIG_COUNT,
	ROM_DIG_COUNT,
	T,
	X,
	XC;

    !First get all the decimal digits separated out.
    DEC_DIG_COUNT = 0;				!Assume user supplied zero.
    ROM_DIG_COUNT = 0;				!...
    
    !Force number into correct range.
    T = ABS(.BINARY_NUMBER) MOD 4000;

    !Special case, if user supplied zero.  In such a case return '0'.
    IF						!
	.T EQL 0
    THEN
	BEGIN
	.KHARACTER_COUNT = 1;
	ROM_DIGITS [0] = %C'0';
	RETURN
	END;

    !And now do strip off the digits, one by one.
    WHILE (.T NEQ 0) DO
	BEGIN
	DEC_DIGITS [.DEC_DIG_COUNT] = .T MOD 10;
	T = .T/10;
	DEC_DIG_COUNT = .DEC_DIG_COUNT + 1;
	END;

    !Convert decimal digits to roman numerals.
    DECR I FROM (.DEC_DIG_COUNT - 1) TO 0  DO
	BEGIN
	!Prior to converting the next decimal digit, do the equivalent
	!of multiplying the partial roman numeral result by 10.
	INCR J FROM 0 TO (.ROM_DIG_COUNT - 1) DO
	    ROM_DIGITS [.J] = (R10(.ROM_DIGITS [.J]));

	!Now convert the next decimal digit.  This is done by
	!a simple table lookup, followed by copying into ROM_DIGITS.
	X = .ROM_TAB[.DEC_DIGITS[.I]];		!Look up the roman equivalent of this digit.
	XC = CH$RCHAR_A(X);			!Get the digit count into XC.
	!Discard zeroes (i.e., 10, 20, etc) but continue in the loop so
        !what's already been converted gets multiplied by 10.
	IF					!
	    .DEC_DIGITS [.I] NEQ 0
	THEN
	    !Not zero, so convert it as usual
	    INCR J FROM (.ROM_DIG_COUNT + 1) TO (.ROM_DIG_COUNT + .XC) DO
		BEGIN
		ROM_DIGITS [.J - 1] = CH$RCHAR_A(X);
		ROM_DIG_COUNT = .J;			!Update current length.
		END;
	END;

    !Set up the length for the user.
    .KHARACTER_COUNT = .ROM_DIG_COUNT;

    !Apply case conversion rules.
    IF						!
	.ULM EQL 0
    THEN
	!User is content with lower case, so just return.
	RETURN;

    !Compute how many characters need to be converted to upper case.
    !The result is saved in T.
    IF
	.ULM EQL -1
    THEN
	T = .ROM_DIG_COUNT - 1			!Upper case
    ELSE
	T = 0;					!Mixed case

    !Now loop over the characters to be converted and make them upper case.
    INCR I FROM 0 TO .T DO
	ROM_DIGITS [.I] = .ROM_DIGITS [.I] - %C'a' + %C'A';

    RETURN;
    END;					!End of CONVBR

END						!End of module

ELUDOM
