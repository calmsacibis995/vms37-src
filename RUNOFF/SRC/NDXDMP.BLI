MODULE NDXDMO (		!
		MAIN = NDXDMP,
		IDENT = 'V03-000'
		%BLISS36[, ENVIRONMENT (TOPS10), VERSION='1.1(2)']
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Read and dump a RUNOFF binary index file.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: October, 1979
!
! MODIFIED BY: K. A. Dawson, 2-17-1981
!
!	009	REM00009	R.E. Marshall	April 22,1981
!		Updated version # for release using XPORT V1.0.
!
!       008	KAD00008	K. A. Dawson 
!		For(V1.02) Added CONFUSE_COUNT to limit CONFUSED messages, 
!		for PDP-11 XPORT bug. Changed the names of two forward 
!		routines to avoid naming conflicts in libraries:
!	      	ASGXTN --> DMPXTN
!	      	UNPUS  --> DUNPUS
!
!
!--
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    DMPXTN : NOVALUE,
    DUNPUS : NOVALUE;

!
! INCLUDE FILES:
!
REQUIRE 'REQ:PAGEN.REQ';

LIBRARY 'NXPORT:XPORT';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!
LITERAL
    RINTES = %O'34' : UNSIGNED (8);			!Special escape character

LITERAL
    LM = 80;						!Column where the transaction number starts.

LITERAL
    NEW_SEQUENCE = 1,
    INDEX_XTN = 2,
    INDEX_ENTRY = 3;

!This literal defines which .BIX format is appropriate for this program.
LITERAL
    INDEX_FORMAT = 2;

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!
OWN
    NDXIOB : $XPO_IOB ();			!IOB for binary index file.

OWN
    NDXOOB : $XPO_IOB (),			!Write output via this IOB.
    TTIIOB : $XPO_IOB (),			!Terminal input.
    TTOIOB : $XPO_IOB (),			!Terminal messages.
    PAGEN : PAGE_DEFINITION;

OWN
    CONFUSE_COUNT : INITIAL (0),		!Count number of CONFUSED messages. V1.02a.
    HIGHEST_XTN_IN : INITIAL (0),		!Highest XTN input so far.
    HIGHEST_XTN_OUT : INITIAL (0),		!Highest XTN output so far.
    XTN_OFFSET : INITIAL (0);

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
    PACBAS,
    PACPAG;

ROUTINE NDXDMP =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	Implicit is the order in which records are written, and
!	the format of the file.
!		1.	Each record is really a group of records, hereafter
!			called a record-group.
!		2.	The first record of a record-group is a single
!			BLISS value indicating what the remainder of the
!			record-group contains.
!		3.	The remainder of a record-group consists of one
!			or more records.
!		4.	The very first record of the file indicates
!			that a new binary index follows.  The program
!			can key on this to sort out concatenated binary
!			indexes.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $XPO_IOB_INIT (IOB = NDXIOB);		!Initialize input IOB
    $XPO_IOB_INIT (IOB = NDXOOB);		!Initialize output IOB
    $XPO_IOB_INIT (IOB = TTIIOB);		!Initialize terminal input IOB.
    $XPO_IOB_INIT (IOB = TTOIOB);		!Initialize terminal IOB

    $XPO_OPEN (IOB = TTIIOB,			!Open terminal input IOB.
		FILE_SPEC = $XPO_INPUT,
		OPTIONS = INPUT);

    $XPO_OPEN (IOB = TTOIOB,			!Open terminal IOB
		FILE_SPEC = $XPO_OUTPUT,
		OPTIONS = OUTPUT,
		ATTRIBUTES = RECORD);

    !Identify version of program.
%IF
    %BLISS(BLISS36)
%THEN
    $XPO_PUT (IOB = TTOIOB,
	      STRING = ('NDXDMP, Version 1.1(02a')	);
%ELSE
    $XPO_PUT (IOB = TTOIOB,
	      STRING = ('NDXDMP, Version 1.02a')	);
%FI

    !Request name of input file (the .BIX file).
    $XPO_PUT (IOB = TTOIOB,
		STRING = ('Specify input file: ')   );

    $XPO_GET (IOB = TTIIOB);			!Read name of file.

    $XPO_OPEN (IOB = NDXIOB,			!Open input IOB
		FILE_SPEC = TTIIOB [IOB$T_STRING],
		DEFAULT = ('.BIX'),
		OPTIONS = INPUT,
		ATTRIBUTES = BINARY);

    $XPO_OPEN (IOB = NDXOOB,
		FILE_SPEC = ('.XMP'),
		RELATED = NDXIOB [IOB$T_RESULTANT],
		OPTIONS = OUTPUT);

    !Read record-groups until end of file.  Process each record group
    !in turn.  Return at end-of-file.
    WHILE TRUE DO
	BEGIN

	LOCAL
	    FORMAT_DESCR,
	    RECORD_DESCR,
	    STATUS;

	!Get record-group descriptor.
	!Reset confuse-count.
	CONFUSE_COUNT = 0;
	STATUS = $XPO_GET ( IOB = NDXIOB,
			    FULLWORDS = 1);

	IF!
	    .STATUS NEQ XPO$_NORMAL
	THEN
	!No record-group descriptor, and therefore no record-group.
	!I.e., end-of-file.
	    EXITLOOP;

	!Separate out the record descriptor and the format descriptor.
	RECORD_DESCR = .(.NDXIOB[IOB$A_DATA])<0,%BPVAL/2>;		!Record descriptor
	FORMAT_DESCR = .(.NDXIOB[IOB$A_DATA])<%BPVAL/2, %BPVAL/2>;	!Format descriptor

	SELECTONE .RECORD_DESCR OF
	SET
	[NEW_SEQUENCE] : BEGIN

			 !Start a new indexing sequence.
			 XTN_OFFSET = .HIGHEST_XTN_OUT;

			!Make sure this file is in the format expected.
			IF				!
			    .FORMAT_DESCR NEQ INDEX_FORMAT
			THEN
			    !Warn the user that something's mucked up!!
			    $XPO_PUT (IOB = TTOIOB,
				      STRING = (39,
						CH$PTR(UPLIT('INCOMPATIBLE VERSIONS OF DSR AND NDXDMP'))) );

			 END;

	[INDEX_XTN]	: BEGIN
			  !Reset confuse-count.
			  CONFUSE_COUNT = 0;
			  $XPO_GET (IOB = NDXIOB,
				    FULLWORDS = PAGE_SCT_SIZE + 1);

			    BEGIN
			    BIND
				XTN_AND_PAGE = .NDXIOB [IOB$A_DATA] : VECTOR,
				PAGE_REF = XTN_AND_PAGE [1] : PAGE_DEFINITION;


			   !Pass the transaction number on only if
			   !it's not zero.
			   IF!
				.XTN_AND_PAGE [0] NEQ 0
			   THEN
				BEGIN
				!Remember highest input XTN in this set.
				HIGHEST_XTN_IN = .XTN_AND_PAGE [0];
				!Map XTN into correct range.
				HIGHEST_XTN_OUT = .HIGHEST_XTN_IN + .XTN_OFFSET;

				!Output new transaction number.
				DMPXTN (PAGE_REF, .HIGHEST_XTN_OUT);

				!See if this document contains sections.
				END;
			    END;
			  END;

	[INDEX_ENTRY]	: BEGIN
			  LOCAL
				DESCRIPTOR : VECTOR [3];
	
			  !First get the descriptor.
			  !Reset confuse-count.
			  CONFUSE_COUNT = 0;
			  $XPO_GET (IOB = NDXIOB,
				    FULLWORDS = 3);

			  !Now copy the descriptor into a holding area.
			   BEGIN
			   BIND
			  	X = .NDXIOB [IOB$A_DATA] : VECTOR;

			   INCR I FROM 1 TO 3 DO
				DESCRIPTOR[.I-1] = .X[.I-1];
			   END;
			  
			  !Now, pick up the actual index entry.
			  !Reset confuse-count.
			  CONFUSE_COUNT = 0;
			  $XPO_GET (IOB = NDXIOB,
				    FULLWORDS = CH$ALLOCATION(.DESCRIPTOR[0]));
			  !Map the transaction number into the correct
			  !range, unless this came from a .ENTRY command.
			  IF
				.DESCRIPTOR [1] NEQ 0
			  THEN
				DESCRIPTOR [1] = .DESCRIPTOR [1] + .XTN_OFFSET;

			  !Dump this entry to the .XMP file
			  DUNPUS (.DESCRIPTOR[0], CH$PTR(.NDXIOB[IOB$A_DATA]), .DESCRIPTOR[1]);
			  END;

	[OTHERWISE]	: BEGIN
			  CONFUSE_COUNT = .CONFUSE_COUNT + 1;
			  IF 
				.CONFUSE_COUNT LEQ 5 
			  THEN
			  $XPO_PUT (IOB = TTOIOB,
				    STRING = (8,
					      CH$PTR(UPLIT('CONFUSED')))  );
			  EXITLOOP;
			  END;
	TES;
	END;

    !Finished processing file.
    $XPO_CLOSE (IOB = NDXIOB);			!Close index file

    $XPO_CLOSE (IOB = NDXOOB);			!Close file containing the dump.


    $XPO_PUT (IOB = TTOIOB,			!Tell user we're done.
		STRING = (8,
			   CH$PTR(UPLIT('FINISHED'))) );

    $XPO_CLOSE (IOB = TTOIOB);			!Close the terminal.

    RETURN 1					!Successful completion (by definition)


    END;			!End of GETNDX

ROUTINE DUNPUS (NCHARS, PTR_CHARS, XTN)  : NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	DUNPUS untranslates the results of a .INDEX or .ENTRY command or
!	INDEX flag, and puts the result into the output file.
!
! FORMAL PARAMETERS:
!
!	NCHARS is the number of bytes to be scanned.
!	PTR_CHARS is a CH$PTR to the index entry
!	XTN is the transaction number of the entry.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	COUNT,					!Number of characters in output stream.
	XLP,					!A CH$PTR to the next character location in XLINE.
	XLINE : VECTOR [CH$ALLOCATION (1000)],	!Build up the dump line here.
	MARK,
	PTR;


    !Initialize
    COUNT = 0;
    XLP = CH$PTR (XLINE);

    !Copy pointer to what's to be "unparsed"
    PTR = .PTR_CHARS;

    !Generate either .INDEX or .ENTRY
	IF					!
	    .XTN NEQ 0
	THEN
	    MARK = CH$PTR ( UPLIT('.INDEX       '))
	ELSE
	    MARK = CH$PTR ( UPLIT('.ENTRY       '));

    !Insert either .INDEX or .ENTRY into the output line.
    INCR I FROM 1 TO 10 DO
	BEGIN
	COUNT = .COUNT + 1;
	CH$WCHAR_A (CH$RCHAR_A (MARK), XLP);
	END;
	
	!Put out a blank
	COUNT = .COUNT + 1;
	CH$WCHAR_A (%C' ', XLP);

    !Scan the text, untranslating escape codes, etc back to RUNOFF flags.
    INCR I FROM 1 TO .NCHARS DO
	BEGIN
	LOCAL
	    KHAR;

	KHAR = CH$RCHAR_A(PTR);

	IF!
	    .KHAR EQL RINTES
	THEN
	!Untranslate special function
	    BEGIN
	    LOCAL
		FUNCTION_CODE,
		OPERAND;

	    FUNCTION_CODE = CH$RCHAR_A(PTR);
	    OPERAND = CH$RCHAR_A(PTR);
	    I = .I + 2;

	    SELECTONE .FUNCTION_CODE OF
		SET
		[%C'B'] : BEGIN
			  !Bolded character.
			  COUNT = .COUNT + 1;
			  CH$WCHAR_A (%C'*', XLP);
			  END;

		[%C'U'] : BEGIN
			  !Underlined character.
			  COUNT = .COUNT + 1;
			  CH$WCHAR_A (%C'&', XLP);
			  END;

		[%C'O'] : BEGIN
			  !An overstruck character.
			  !NOTE: Order is the reverse of what user specified.
			  COUNT = .COUNT+1;
			  CH$WCHAR_A(.OPERAND,XLP);
			  COUNT = .COUNT + 1;
			  CH$WCHAR_A (%C'%', XLP);
			  END;
		
		[%C'J'] : BEGIN
			  !A word mark.  For indexing commands, this
			  !starts a new sub-indexing level.
			  COUNT = .COUNT + 1;
			  CH$WCHAR_A (%C'>', XLP);
			  END;

		[OTHERWISE] : BEGIN
			      !Unknown/unsupported special function
			  COUNT = .COUNT + 1;
			  CH$WCHAR_A (%C'?', XLP);
			      END;
		TES;
	    END
	ELSE
	!Some normal character
	    BEGIN
	    !Normal characters go out as themselves.  Control characters
	    !are translated to something else.
	    IF!
		(.KHAR GEQ %C' ')
		AND (.KHAR LEQ %O'176')
	    THEN
	    !Output a normal character
		(COUNT = .COUNT+1;
		 CH$WCHAR_A (.KHAR, XLP);)
	    ELSE
	    !Translate and output a control character.
	    !NOTE: DEL (Octal 177) and NUL (Octal 0) have the same result.
		BEGIN
		COUNT=.COUNT+1;
		CH$WCHAR_A (%C'^', XLP);
		COUNT=.COUNT+1;
		CH$WCHAR_A (.KHAR+%C'@', XLP);
		END;
	    END;
	END;

    !Put out the transaction number only if the entry was not .ENTRY
    IF
	.XTN NEQ 0
    THEN
	!It's not .ENTRY, so output the transaction number
	BEGIN
    !Pad out the index text to column LM.
    INCR I FROM .COUNT TO LM DO
	BEGIN
	CH$WCHAR_A(%C' ', XLP);
	COUNT=.COUNT+1
	END;

    !Insert the transaction number
    COUNT=.COUNT+PACBAS(.XTN,XLP,10)
	END;

    !Now write this line to the .XMP file
    $XPO_PUT (IOB = NDXOOB, STRING = (.COUNT, CH$PTR (XLINE) )	);

    END;			!End of DUNPUS

GLOBAL ROUTINE DMPXTN (PAGE, XTN) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine dumps a transaction number and associated page number to the .XMP file.
!
! FORMAL PARAMETERS:
!
! PAGE is the page number associated with XTN, the transaction number.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	MSG_AREA : VECTOR [CH$ALLOCATION(150)],			!Build up line of text here
	PTR,							!A CH$PTR along MSG_AREA
	COUNT;							!Number of characters in the line of text.

    !Initialize
    COUNT=0;							!Nothing in the line of text yet.
    PTR=CH$PTR (MSG_AREA);					!Point to start of message.

    !Position out to a convenient point in the record.
    INCR I FROM 1 TO LM+1 DO CH$WCHAR_A (%C' ', PTR);
    COUNT=LM+1;

    !Output the XTN number
    COUNT=.COUNT+PACBAS(.XTN,PTR,10);

    !Output "maps to page"
    BEGIN
    LOCAL
	T_PTR;
    T_PTR = CH$PTR (UPLIT (' maps to page '));

    INCR I FROM 1 TO 14 DO CH$WCHAR_A (CH$RCHAR_A(T_PTR), PTR);
    COUNT=.COUNT+14
    END;

    !Insert the page number now.
    COUNT=.COUNT+PACPAG(.PAGE,PTR);

    !And now for the main event: write the info to the .XMP file
    $XPO_PUT (IOB=NDXOOB, STRING = (.COUNT, CH$PTR(MSG_AREA))	);

    !That's all folks.
    RETURN

    END;			!End of DMPXTN
END				!End of module
ELUDOM
