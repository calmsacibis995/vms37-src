MODULE OUTXHO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Enter a single character into the <INDEX flag> buffer.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: December, 1978
!
! MODIFIED BY: K. A. Dawson
!
!	007	REM00007	Ray Marshall	17-December-1981
!		Built up revision history based on CMS library generations.
!
!	006	RWF00006	Rich Friday	5-November-1981
!		Footnote control was moved to its own control area in its own
!		  require file (FNCT.REQ).  Appropreate changes have been made.
!
!	005	REM00005	Ray Marshall	25-August-1981
!		Update Copyright and initial reformatting of revision (history.
!
!	004	KAD00004	K. A. Dawson	14-November-1980
! 	 	For VERSION V1.124h: Moved routine OUTXPH from MAKNDX to this 
!		module to remove MAKNDX from the root for PDP-11 overlay.
!
!	003	KAD00003	Keith Dawson	21-October-1980
!		Fixup require file declarations so they now all come from REQ:
!		  and not the local directory.
!
!	002	KAD00002	Keith Dawson	20-October-1980
!		Added support for .XUPPER and .XLOWER directives.
!
!	001	KAD00001	Keith Dawson	17-October-1980
!		I (Ray Marshall) don't know what (if any) changes were made
!		  on or before this date.  This is the first generation in
!		  the CMS library.
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    OUTXPH : NOVALUE;
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FNCT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:LETTER.REQ';

REQUIRE 'REQ:NBITS.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:SETCAS.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL LITERAL			!Error messages
    RNFITC;

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FNCT : FNCT_DEFINITION,
    GCA : GCA_DEFINITION,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    MRA : REF FIXED_STRING,
    XMRA : FIXED_STRING,
    XTSF : VECTOR;

EXTERNAL ROUTINE
	ERML,
	OUTLIN;


GLOBAL ROUTINE OUTXHR (KHAR) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	OUTXHR takes KHAR and puts it, along with underlining codes,
!	into the buffer where things marked with the <INDEX flag>
!	are saved.
!
! FORMAL PARAMETERS:
!
!	KHAR is the character to be output.
!
! IMPLICIT INPUTS:
!
!	This code will continue to work correctly only if the only
!	possible values that GCA_XCASE can have is ONE_CAP or LEAVE_CASE.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	HOLD_TSF,
	XCHAR;					!Actual character to put in index buffer

    !Assume character needs no translation.
    XCHAR = .KHAR;
    !Now see if it needs translation.

    IF 						!
	NOT (.SCA_FRC_CHR 
	      OR .SCA_WORD_SET 
	      OR .SCA_FRC_CASE
	      OR (.GCA_XCASE EQL LEAVE_CASE))
    THEN 					!
    !Character needs to be translated.

	IF 					!
	    LETTER (.XCHAR)
	THEN 					!
	!Only letters get translated, and this is one.

	    IF 					!
		.FS_LENGTH (XMRA) EQL 0
	    THEN 				!
	    !The first character of the word, if it's a letter,
	    !gets translated to upper case.
	    !NOTE:  Implicit here is that GCA_XCASE is specifying ONE_CAP

		IF 				!
		    LOWER_LETTER (.XCHAR)
		THEN 				!
		    XCHAR = UPPER_CASE (.XCHAR)
		ELSE 				!
		    (0)

	    ELSE 				!
	    !Other letters in the word get translated
	    !to lower case.

		IF 				!
		    UPPER_LETTER (.XCHAR)
		THEN 				!
		    XCHAR = LOWER_CASE (.XCHAR);

    !Switch to <INDEX flag> work area.
    HOLD_TSF = .TSF;
    TSF = XTSF;

    !First, be sure there's room enough to save the entry.
    BEGIN
    LOCAL
	NEEDED;

    NEEDED = 0;

    IF!
	.SCA_WRD_AC_UND
    THEN
	NEEDED = 3;

    IF!
	.SCA_WRD_AC_BLD
    THEN
	NEEDED = .NEEDED + 3;

    NEEDED = .NEEDED + 1;

    IF!
	(.TSF_INT_HL + .NEEDED) GTR .FS_MAXSIZE (XMRA)
    THEN
    !Won't fit.  Tell user and terminate in the middle of this phrase.
	BEGIN
	TSF = .HOLD_TSF;				!Restore "real" TSF.
	ERML(RNFITC);
	OUTXPH ();
	RETURN;
	END;

    END;

    !Now, put the character into the <INDEX flag> buffer.
    !First, check for underlining.  Note that only
    !underlining on a "per character" basis is sticky
    !enough to get into the index.  I.e., ^&A gets
    !indexed as "A", but &A really does get underlined.
    IF 						!
	.SCA_WRD_AC_UND
    THEN 					!
    !Underlining was forced for this character.
	BEGIN
	FS_WCHAR (XMRA, RINTES);
	FS_WCHAR (XMRA, %C'U');
	FS_WCHAR (XMRA, %C' ');
	TSF_INT_HL = .TSF_INT_HL + 3;
	END;

    !Now put the character itself in.
    FS_WCHAR (XMRA, .XCHAR);
    TSF_INT_HL = .TSF_INT_HL + 1;

    IF 						!
	.XCHAR GEQ %C' '			!
	AND .XCHAR LSS %O'177'
    THEN 					!
	TSF_EXT_HL = .TSF_EXT_HL + 1
    ELSE
	IF!
	    .XCHAR EQL %O'010'			!Backspace???
	THEN
	!Back up for backspace.
	    TSF_EXT_HL = .TSF_EXT_HL - 1;

    !Switch back to primary buffer
    TSF = .HOLD_TSF;
    END;					!End of OUTXHR

GLOBAL ROUTINE OUTXPH : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	OUTXPH is called to output a word collected by the action of
!	the <INDEX flag>.  At the same time, it turns off the index flag.
!	Note that this routine is currently NOT called when a .SUBINDEX,
!	.INDEX, or .ENTRY command is being processed.  In later enhancements
!	it could be made possible to allow the <INDEX flag> to be active during
!	the processing of one of these commands.  However that is not the
!	case at this time.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TSF_HOLD,
	MRA_HOLD,
	XTN;

    !Preserve current buffer status.
    TSF_HOLD = .TSF;
    MRA_HOLD = .MRA;
    !Set up buffers where <INDEX flag> is doing its work.
    TSF = XTSF;
    MRA = XMRA;
    !Output the collected word only if there is one.

    IF 						!
	.TSF_INT_HL NEQ 0
    THEN
	BEGIN
	!Allocate a transaction number for this entry.

	IF 					!
	    .FNCT_COLLECTING
	THEN
	!For footnotes use alternate transaction number list.
	    BEGIN
	    XTN = .GCA_FOOT_XTN;
	    GCA_FOOT_XTN = .GCA_FOOT_XTN + 1;	!Bump for next index entry
	    END
	ELSE
	!For entries in main text use primary transaction number list.
	    BEGIN
	    XTN = .GCA_NORMAL_XTN;
	    GCA_NORMAL_XTN = .GCA_NORMAL_XTN + 1;	!Bump for next index entry
	    END;

	!Now associate the transaction number with the entry.
	TSF_FIRST_XTN = .XTN;
	TSF_LAST_XTN = .XTN;
	!And finally, attach the same transaction number to the
	!word in the text to which this applies.

	IF 					!
	    .SCA_WRD_F_XTN EQL 0
	THEN
	    SCA_WRD_F_XTN = .XTN;

	SCA_WRD_L_XTN = .XTN;
	!Make this TSF something that goes into the index.
	TSF_INDEX = TRUE;
	!And now go output this line.
	OUTLIN (FALSE);
	END;

    !Retrieve previous buffer status.
    TSF = .TSF_HOLD;
    MRA = .MRA_HOLD;
    !Turn off the index flag now, and that's it until next time.
    !Note that SCA_X_FLAG is used only when the <INDEX flag> is
    !active.  Failure to turn it off will cause the program to
    !lose coordination with <INDEX flag> processing.  Typical
    !symptoms of this problem include the index table getting too
    !large, or, even more obscurely, normal text being rejected
    !because it's too complicated.
    SCA_X_FLAG = FALSE;
    RETURN;
    END;					!End of OUTXPH

END						!End of module

ELUDOM
