%TITLE 'RNOVMS - DSR VMS Command Line Interface'
MODULE RNOVMS (	IDENT = '005',
		MAIN = RNOVMS,	! Entry point of main program
		ADDRESSING_MODE( EXTERNAL=LONG_RELATIVE,
				 NONEXTERNAL=LONG_RELATIVE )
		) =
BEGIN

!
!			  COPYRIGHT (c) 1980 BY
!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!

!++
!
! FACILITY:	DSR (Digital Standard Runoff)
!
! ABSTRACT:
!
!	This module is the DSR VMS Command Line interface module.
!
! ENVIRONMENT:  VAX/VMS User Mode
!
! AUTHOR:  Ray Marshall,	CREATION DATE:  23 August 1981
!
!	The original version is designed to perform exactly the same as the
!	previous interface module written by Ward Clark and modified up to
!	ident # X00.07.  I started the ident of this module at 001 because
!	it is a total redesign & rewrite.
!
! MODIFIED BY:
!
!	005	REM00005	Ray Marshall	3-April-1982
!		All qualifiers taking character values are now parsed by
!		  TPARSE to allow them to pickup either an undelimited
!		  character or a numeric value using the % construct.
!		Numeric parameters were being loaded into RUNOFF_COMMAND
!		  directly with the LIB$CVT_DTB function.  Unfortunately,
!		  that function loads a full word and the destination fields
!		  are smaller then that.  Therefore, the qualifiers taking
!		  numeric values are now buffered through a temp field so
!		  that only the expected destination field gets changed when
!		  a value is loaded.
!
!	004	REM00004	Ray Marshall	25-January-1982
!		Removed all reference to the /QUICK qualifier in the code.
!		Removed the mask of the values CLI$PRESENT returns because
!		  VMS-land changed them to 5 digit hex. values and the mask
!		  caused us to only look at the two low order bits!
!		Replaced the commented copy of the .CLD file.
!		Picked up the information about whether or not a qualifier
!		  was actually specified (asserted or negated) and pass it
!		  along to RUNOFF in the now expanded "runoff_command" table.
!
!	003	REM00003	Ray Marshall	5-November-1981
!		Add /[NO]LOG and /DEC_INTERNAL switches.
!		Commented out the /QUICK qualifier processing because the
!		  appropriate status is now handled by the /NOOUTPUT qualifier.
!
!	002	REM00002	Ray Marshall	20-September-1981
!		Fixed reported bug where /NOCHANGES didn't work.
!
!--

%SBTTL 'Command line descriptor file text'
%(
!
define type debug_options
	keyword all
	keyword conditionals
	keyword contents
	keyword files
	keyword index

define type message_options
	keyword output
	keyword user

define verb RUNOFF
	parameter p1,label=p1,prompt="File",value(required,list,type=$infile)
	qualifier backspace	nonnegatable,placement=positional
	qualifier bold,		value(default=1),default,placement=positional
	qualifier change_bars,	value(default="|"),placement=positional
	qualifier contents,	value(type=$outfile),placement=positional
	qualifier debug,	value(list,type=debug_options,default=ALL),placement=positional
	qualifier dec_internal, value(list),placement=positional,nonnegatable
	qualifier down,		value(default=5),placement=positional
	qualifier form_size,	value(required),nonnegatable
	qualifier index,	value(type=$outfile),placement=positional
	qualifier log
	qualifier messages,	value(required,list,type=message_options),placement=positional,nonnegatable
	qualifier output,	value(type=$outfile),placement=positional
	qualifier overprint,	default,placement=positional
	qualifier pages,	value(required),placement=positional,nonnegatable
	qualifier pause
	qualifier right,	value(default=5),placement=positional
	qualifier sequence	placement=positional
	qualifier simulate
	qualifier underline_character,	value(default="_"),default,placement=positional
	qualifier separate_underline,	value(default="-"),placement=positional,nonnegatable
	qualifier nonspacing_underline,	value(default=""),placement=positional,nonnegatable
	qualifier variant,	value,placement=positional,nonnegatable
)%

%SBTTL 'Declarations';
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    rnovms,			! DSR VMS command interface routine
    call_tparse,		! Causes TPARSE to put data into command table
    save_value;			! Used by TPARSE to store a DBG1 or DBG2 value

!
! INCLUDE FILES:
!

LIBRARY	'SYS$LIBRARY:STARLET.L32';	! System macros
LIBRARY	'SYS$LIBRARY:TPAMAC.L32';	! TPARSE macros
LIBRARY  'SYS$LIBRARY:XPORT' ;		! XPORT macro and field definitions
SWITCHES LIST (REQUIRE);		!     Enable printing of REQUIRE files
REQUIRE  'REQ:RNOMAC' ;			! DSR macro and field definitions
undeclare %quote $descriptor;
SWITCHES LIST (NOREQUIRE);		!     Disable printing of REQUIRE files

STRUCTURE
    BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK + O) <P, S, E>;
!
! MACROS:
!
!
!	Define internal descripters
!
MACRO
    CSTRING[] =  %STRING( %CHAR(%CHARCOUNT(%REMAINING)),%REMAINING)%,

    string_descr [] = (uplit (%charcount (%remaining),
				ch$ptr (uplit (%string (%remaining)))))%,
    swch_backspace =  string_descr('BACKSPACE') %,
    swch_bold =  string_descr('BOLD') %,
    swch_change =  string_descr('CHANGE_BARS') %,
    swch_contents =  string_descr('CONTENTS') %,
    swch_dec_internal =  string_descr('DEC_INTERNAL') %,
    swch_debug =  string_descr('DEBUG') %,
    swch_down =  string_descr('DOWN') %,
    swch_form_size =  string_descr('FORM_SIZE') %,
    swch_index =  string_descr('INDEX') %,
    swch_input =  string_descr('P1') %,
    swch_log =  string_descr('LOG') %,
    swch_messages =  string_descr('MESSAGES') %,
    swch_output =  string_descr('OUTPUT') %,
    swch_overprint =  string_descr('OVERPRINT') %,
    swch_pages =  string_descr('PAGES') %,
    swch_pause =  string_descr('PAUSE') %,
    swch_right =  string_descr('RIGHT') %,
    swch_separate =  string_descr('SEPARATE_UNDERLINE') %,
    swch_sequence =  string_descr('SEQUENCE') %,
    swch_simulate =  string_descr('SIMULATE') %,
    swch_spacing =  string_descr('NONSPACING_UNDERLINE') %,
    swch_underline =  string_descr('UNDERLINE_CHARACTER') %,
    swch_variant =  string_descr('VARIANT') %;


!
! EQUATED SYMBOLS:
!

LITERAL
    yes = 1,			! Used to turn indicators on
    true = 1,			! Used to turn indicators on
    no = 0,			! Used to turn indicators off
    false = 0;			! Used to turn indicators off

$LITERAL
    swch_id_backspace	= $DISTINCT,
    swch_id_bold	= $DISTINCT,
    swch_id_change	= $DISTINCT,
    swch_id_contents	= $DISTINCT,
    swch_id_dec_internal= $DISTINCT,
    swch_id_debug	= $DISTINCT,
    swch_id_down	= $DISTINCT,
    swch_id_form_size	= $DISTINCT,
    swch_id_index	= $DISTINCT,
    swch_id_input	= $DISTINCT,
    swch_id_log		= $DISTINCT,
    swch_id_messages	= $DISTINCT,
    swch_id_output	= $DISTINCT,
    swch_id_overprint	= $DISTINCT,
    swch_id_pages	= $DISTINCT,
    swch_id_pause	= $DISTINCT,
    swch_id_right	= $DISTINCT,
    swch_id_separate	= $DISTINCT,
    swch_id_sequence	= $DISTINCT,
    swch_id_simulate	= $DISTINCT,
    swch_id_spacing	= $DISTINCT,
    swch_id_underline	= $DISTINCT,
    swch_id_variant	= $DISTINCT;

!
! OWN STORAGE:
!
OWN
    runoff_command :  $RNO_CMD,	! DSR command information block
    swch_id;			! Will contain value assigned to the swch_xxx
				!   names assigned previously.  This is used
				!   within common routines to know which
				!   qualifier is being processed.
!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
    RUNOFF,					! Transportable DSR entry point
    CLI$GET_VALUE : ADDRESSING_MODE(GENERAL),	! Gets switch value
    CLI$PRESENT : ADDRESSING_MODE(GENERAL),	! Checks for switch
    CLI$END_PARSE: ADDRESSING_MODE(GENERAL),	! Cleans up & reports garbage
    LIB$CVT_DTB: ADDRESSING_MODE(GENERAL),	! Converts decimal ASCII string to integer
    LIB$TPARSE: ADDRESSING_MODE(GENERAL);	! Table driven parser
!    LIB$FIND_FILE: ADDRESSING_MODE(GENERAL);	! Wild-card parse/search

LITERAL
    COMPILED_ON_VMS2	= NOT %DECLARED (JPI$_WSEXTENT);

%IF COMPILED_ON_VMS2
%THEN
LITERAL
    JPI$_WSEXTENT	= 1046,

	! The values shown below are valid for V2.3 & V2.4.  I have not checked
	! their validity on other versions of VMS.  But, as of the first field
	! test distribution of V3, the values were defined in the system
	! library and the REMOTE LITERAL is conditionally compiled instead of
	! these local literals.

    CLI$_ABSENT		= 0,	! Value returned by CLI$PRESENT
    CLI$_DEFAULTED	= 1,	!   ""
    CLI$_NEGATED	= 2,	!   ""
    CLI$_PRESENT	= 3,	!   ""

    flag_mask		= 3;	! mask for extracting flags from returned value
%ELSE
EXTERNAL LITERAL
    CLI$_ABSENT,		! Value returned by CLI$PRESENT
    CLI$_PRESENT,		!   ""
    CLI$_DEFAULTED,		!   ""
    CLI$_NEGATED;		!   ""
%FI

%SBTTL 'TPARSE state tables'
!
!	Build a (MASK,ADDR) pair for TPARSE bit-mask table entries
!
MACRO
    xmask_[i,p,s,e]	 =	(1^((p)+(s))) - (1^(p)) %,
    mask_[]		 =	(0 OR xmask_(%REMAINING)) %,
    tpmsk_(o,p,s,e,base) =	mask_(o,p,s,e) , (base) + %UPVAL*(o) %,
    tpmskf_(fld,base)	 =	tpmsk_(%FIELDEXPAND(fld), base) %;

!
!	Tables to parse /DEBUG
!
$init_state(debug_states,debug_keys);
$state(,
    ('ALL',		tpa$_exit,,tpmsk_(%FIELDEXPAND(rno$v_deb_cond,0),
					  %FIELDEXPAND(rno$v_deb_cond,1),
					  4,0,		     runoff_command)),
    ('CONDITIONALS',	tpa$_exit,,tpmskf_(rno$v_deb_cond,   runoff_command)),
    ('CONTENTS',	tpa$_exit,,tpmskf_(rno$v_deb_cont,   runoff_command)),
    ('FILES',		tpa$_exit,,tpmskf_(rno$v_deb_files,  runoff_command)),
    ('INDEX',		tpa$_exit,,tpmskf_(rno$v_deb_index,  runoff_command)),
    (tpa$_lambda,tpa$_exit,)
    );
!
!	Tables to parse /MESSAGES
!
$init_state(messages_states,messages_keys);
$state(,
    ('OUTPUT',		tpa$_exit,,tpmskf_(rno$v_msg_out,    runoff_command)),
    ('USER',		tpa$_exit,,tpmskf_(rno$v_msg_user,   runoff_command)),
    (tpa$_lambda,tpa$_exit,)
    );
!
!	Tables to parse /DEC_INTERNAL
!
$init_state(dec_internal_states,dec_internal_keys);
$state(options,
    (',',	options),
    ('FLIP',	options,,tpmskf_(rno$v_flip,	     runoff_command)),
    ('TERMINAL',term_option),
    ('DBG1',	dbg1,,,,1),
    ('DBG2',	dbg1,,,,2),
    (tpa$_lambda,tpa$_exit,)
    );
$state(dbg1,
    ('='),
    (':'),
    (',',	options)
    );
$state(,
    ('%',	which_base),
    (tpa$_lambda,hex_num)
    );
$state(which_base,
    ('X',	hex_num),
    ('O',	oct_num),
    ('D',	dec_num),
    (tpa$_lambda,options)
    );
$state(hex_num,
    (tpa$_hex,options,save_value));
$state(oct_num,
    (tpa$_octal,options,save_value));
$state(dec_num,
    (tpa$_decimal,options,save_value));

$state(term_option,
    ('='),
    (':'),
    (',',	options,,tpmskf_(rno$v_outctl1, 	     runoff_command)),
    (tpa$_lambda,options,,tpmskf_(rno$v_outctl1, 	     runoff_command))
    );
$state(,
    ('ANSI',	options,,tpmskf_(rno$v_outctl1, 	     runoff_command)),
    ('VT100',	options,,tpmskf_(rno$v_outctl1, 	     runoff_command)),
    ('LIST',	options,,tpmskf_(rno$v_outctl2, 	     runoff_command))
    );
!
!	Tables to parse /CHANGE_BARS, /UNDERLINE_CHARACTER,
!			/NONSPACING_UNDERLINE, & /SEPARATE_UNDERLINE.
!
!	For that matter, with the appropriate changes made to routine
!	SAVE_VALUE, these tables will handle any qualifier that expects to
!	be given a single character or the numeric value representing that
!	character.
!
$init_state(chars_states,chars_keys);
$state(,
    ('%',	chars_which_base,,,,3),
    (tpa$_any,	tpa$_exit	,save_value,,,4),
    (tpa$_lambda,tpa$_exit,)
    );
$state(chars_which_base,
    ('X',	chars_hex_num),
    ('O',	chars_oct_num),
    ('D',	chars_dec_num),
    (tpa$_lambda,tpa$_exit,)
    );
$state(chars_hex_num,
    (tpa$_hex,tpa$_exit,save_value));
$state(chars_oct_num,
    (tpa$_octal,tpa$_exit,save_value));
$state(chars_dec_num,
    (tpa$_decimal,tpa$_exit,save_value));

%SBTTL 'ROUTINE RNOVMS - Header and local storage'
GLOBAL ROUTINE rnovms =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the VMS DCL CLE routines to obtain command
!	line information which is in turn passed to the DSR application
!	in a transportable manner.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! COMPLETION CODES:
!
!	completion code from DSR
!
! SIDE EFFECTS:
!
!	None
!
!--

BEGIN

    LOCAL
	desc : 			! Descriptor work area for translating #'s
		$STR_DESCRIPTOR(CLASS=DYNAMIC),
	flag_state,		! Presence/absence implicit/explicit of /FLAG
	status,			! Temporary routine completion code
	temp;			! Real temporary storage!

%SBTTL 'ROUTINE RNOVMS - Initialization'
!
! Initialize the DSR command block.
!
    $STR_DESC_INIT( DESCRIPTOR = desc,  CLASS = DYNAMIC);

    WHILE	CLI$GET_VALUE(swch_input,desc)
    DO
	BEGIN

	    BEGIN
	    MAP runoff_command :  VECTOR;

	    INCR index FROM 0 TO RNO$K_CMD_LEN / %UPVAL - 1 DO
		runoff_command[.index] = false;
	    END;

	runoff_command[RNO$C_CHANGE] = %X'FF';
	runoff_command[RNO$C_UNDERLINE] = %X'FF';

!
! Complete the DSR command block (RNOCMD) from the information returned by
! the DCL CLI.
!
!	NOTE :  Some RNOCMD fields are set by qualifier action routines.
!

	$STR_DESC_INIT( DESCRIPTOR = runoff_command[RNO$T_INPUT],
		CLASS = DYNAMIC);

	$STR_COPY(STRING = desc, TARGET = runoff_command[RNO$T_INPUT] );

	$STR_DESC_INIT( DESCRIPTOR = runoff_command[RNO$T_OUTPUT],
		CLASS = DYNAMIC);

	$STR_DESC_INIT( DESCRIPTOR = runoff_command[RNO$T_CONTENTS],
		CLASS = DYNAMIC);

	$STR_DESC_INIT( DESCRIPTOR = runoff_command[RNO$T_INDEX],
		CLASS = DYNAMIC);

	$STR_DESC_INIT( DESCRIPTOR = runoff_command[RNO$T_PAGES],
		CLASS = DYNAMIC);

	$STR_DESC_INIT( DESCRIPTOR = runoff_command[RNO$T_VARIANT],
		CLASS = DYNAMIC);


%SBTTL 'ROUTINE RNOVMS - /BACK /PAUSE /SEQ /SIM /OVER /LOG'
!
!	Pickup switch settings and setup command table accordingly
!
!	Process switches without values:  /BACKSPACE /PAUSE /SEQUENCE
!					  /SIMULATE /OVERPRINT /LOG
!
%(
	temp = cli$present(swch_log);
$xpo_dump_field ( FIELD_NAME = '  CLI$PRESENT returned for /LOG', TYPE = ADDRESS, VALUE=.temp);
	temp = cli$present(swch_overprint);
$xpo_dump_field ( FIELD_NAME = '  CLI$PRESENT returned for /OVERPRINT', TYPE = ADDRESS, VALUE=.temp);
)%
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_backspace) AND flag_mask) OF
%ELSE
	    cli$present(swch_backspace) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_backspace] = true;
	    [CLI$_NEGATED] : runoff_command[rno$v_s_backspace] = true;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_backspace] = true;
		runoff_command[rno$v_s_backspace] = true
		END;
	    TES;
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_log) AND flag_mask) OF
%ELSE
	    cli$present(swch_log) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_log] = true;
	    [CLI$_NEGATED] : runoff_command[rno$v_s_log] = true;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_log] = true;
		runoff_command[rno$v_log] = true
		END;
	    TES;
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_pause) AND flag_mask) OF
%ELSE
	    cli$present(swch_pause) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_pause] = true;
	    [CLI$_NEGATED] : runoff_command[rno$v_s_pause] = true;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_pause] = true;
		runoff_command[rno$v_pause] = true
		END;
	    TES;
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_sequence) AND flag_mask) OF
%ELSE
	    cli$present(swch_sequence) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_sequence] = true;
	    [CLI$_NEGATED] : runoff_command[rno$v_s_sequence] = true;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_sequence] = true;
		runoff_command[rno$v_sequence] = true
		END;
	    TES;
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_simulate) AND flag_mask) OF
%ELSE
	    cli$present(swch_simulate) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_simulate] = true;
	    [CLI$_NEGATED] : runoff_command[rno$v_s_simulate] = true;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_simulate] = true;
		runoff_command[rno$v_simulate] = true
		END;
	    TES;
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_overprint) AND flag_mask) OF
%ELSE
	    cli$present(swch_overprint) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_overprint] = true;
	    [CLI$_NEGATED] : runoff_command[rno$v_s_overprint] = true;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_overprint] = true;
		runoff_command[rno$v_overprint] = true
		END;
	    TES;

%SBTTL 'ROUTINE RNOVMS - /OUTPUT /CONTENTS /INDEX'
!
!	Process switchs specifying files: /OUTPUT /CONTENTS /INDEX
!	The input file(s) [currently identified as INFIL] will be processed last.
!
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_output) AND flag_mask) OF
%ELSE
	    cli$present(swch_output) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		BEGIN
		runoff_command[rno$v_output] = true;
		cli$get_value(swch_output,runoff_command[rno$t_output]);
		END;
	    [CLI$_NEGATED] : 
		BEGIN
		runoff_command[rno$v_s_output] = true;
		runoff_command[rno$v_quick] = true;
		cli$get_value(swch_output,runoff_command[rno$t_output])
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_output] = true;
		runoff_command[rno$v_output] = true;
		cli$get_value(swch_output,runoff_command[rno$t_output])
		END;
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_contents) AND flag_mask) OF
%ELSE
	    cli$present(swch_contents) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_contents] = true;
	    [CLI$_NEGATED] : 
		BEGIN
		runoff_command[rno$v_s_contents] = true;
		cli$get_value(swch_contents,runoff_command[rno$t_contents])
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_contents] = true;
		runoff_command[rno$v_contents] = true;
		cli$get_value(swch_contents,runoff_command[rno$t_contents])
		END;
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_index) AND flag_mask) OF
%ELSE
	    cli$present(swch_index) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : runoff_command[rno$v_index] = true;
	    [CLI$_NEGATED] : 
		BEGIN
		runoff_command[rno$v_s_index] = true;
		cli$get_value(swch_index,runoff_command[rno$t_index])
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_index] = true;
		runoff_command[rno$v_index] = true;
		cli$get_value(swch_index,runoff_command[rno$t_index])
		END;
	    TES;

%SBTTL 'ROUTINE RNOVMS - /CHANGE /UNDER /SEPARATE /NONSPACING'
!
!	Process switches passing ASCII characters: /CHANGE_BARS
!		/UNDERLINE_CHARACTER /SEPARATE_UNDERLINE /NONSPACING_UNDERLINE
!

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_change) AND flag_mask) OF
%ELSE
	    cli$present(swch_change) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		BEGIN
		runoff_command[rno$v_change] = true;
		IF cli$get_value(swch_change,desc)
		    THEN
		    BEGIN
			swch_id = swch_change;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_chng_char] = true;
			IF runoff_command[rno$c_change] EQL 0
			    THEN  runoff_command[rno$v_change] = false
		    END;
		END;
	    [CLI$_NEGATED] :
		BEGIN
		runoff_command[rno$v_s_change] = true;
		runoff_command[rno$c_change] = 0;
		runoff_command[rno$v_chng_char] = true;
		IF cli$get_value(swch_change,desc)
		    THEN
		    BEGIN
			swch_id = swch_change;
			call_tparse(desc,chars_states,chars_keys)
		    END;
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_change] = true;
		runoff_command[rno$v_change] = true;
		IF cli$get_value(swch_change,desc)
		    THEN
		    BEGIN
!$xpo_put_msg (STRING = '/CHANGE specified', SEVERITY = SUCCESS);
			swch_id = swch_id_change;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_chng_char] = true;
			IF runoff_command[rno$c_change] EQL 0
			    THEN runoff_command[rno$v_change] = false;
		    END;
		END;
	    TES;


	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_underline) AND flag_mask) OF
%ELSE
	    cli$present(swch_underline) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		BEGIN
		runoff_command[rno$v_underline] = true;
		IF cli$get_value(swch_underline,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_underline;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true
		    END;
		END;
	    [CLI$_NEGATED] :
		BEGIN
		runoff_command[rno$v_s_underline] = true;
		IF cli$get_value(swch_underline,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_underline;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_underline] = true;
		runoff_command[rno$v_underline] = true;
		IF cli$get_value(swch_underline,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_underline;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_separate) AND flag_mask) OF
%ELSE
	    cli$present(swch_separate) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		BEGIN
		runoff_command[rno$v_und_separ] = true;
		runoff_command[rno$v_underline] = true;
		IF cli$get_value(swch_separate,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_separate;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    [CLI$_NEGATED] :
		BEGIN
		runoff_command[rno$v_s_und_separ] = true;
		IF cli$get_value(swch_separate,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_separate;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_und_separ] = true;
		runoff_command[rno$v_und_separ] = true;
		runoff_command[rno$v_underline] = true;
		IF cli$get_value(swch_separate,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_separate;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    TES;
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_spacing) AND flag_mask) OF
%ELSE
	    cli$present(swch_spacing) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		BEGIN
		runoff_command[rno$v_und_nonsp] = true;
		runoff_command[rno$v_underline] = true;
		IF cli$get_value(swch_spacing,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_spacing;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    [CLI$_NEGATED] :
		BEGIN
		runoff_command[rno$v_s_und_nonsp] = true;
		IF cli$get_value(swch_spacing,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_spacing;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    [CLI$_PRESENT] : 
		BEGIN
		runoff_command[rno$v_s_und_nonsp] = true;
		runoff_command[rno$v_und_nonsp] = true;
		runoff_command[rno$v_underline] = true;
		IF cli$get_value(swch_spacing,desc)
		    THEN
		    BEGIN
			swch_id = swch_id_spacing;
			call_tparse(desc,chars_states,chars_keys);
			runoff_command[rno$v_und_char] = true;
		    END;
		END;
	    TES;

	IF .runoff_command[RNO$C_UNDERLINE] EQLU %X'FF'
	THEN
	    runoff_command[RNO$C_UNDERLINE] = no
	ELSE
	    runoff_command[RNO$V_UND_CHAR] = yes;

%SBTTL 'ROUTINE RNOVMS - /PAGES /VARIANT'
!
!	Process switches passing ASCII strings parsed by DSR:
!
!				/PAGES 	/VARIANT
!
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_pages) AND flag_mask) OF
%ELSE
	    cli$present(swch_pages) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : cli$get_value(swch_pages,runoff_command[rno$t_pages]);
	    [CLI$_NEGATED] : false;
	    [CLI$_PRESENT] : cli$get_value(swch_pages,runoff_command[rno$t_pages]);
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_variant) AND flag_mask) OF
%ELSE
	    cli$present(swch_variant) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : cli$get_value(swch_variant,runoff_command[rno$t_variant]);
	    [CLI$_NEGATED] : false;
	    [CLI$_PRESENT] : cli$get_value(swch_variant,runoff_command[rno$t_variant]);
	    TES;

%SBTTL 'ROUTINE RNOVMS - /BOLD /DOWN /FORM_SIZE /RIGHT'
!
!	Process switches passing numeric arguments:  /BOLD /DOWN /FORM_SIZE
!						     /RIGHT
!
%(
	temp = cli$present(swch_bold);
$xpo_dump_field ( FIELD_NAME = '  CLI$PRESENT returned for /BOLD', TYPE = ADDRESS, VALUE=.temp);
	temp = cli$present(swch_bold);
$xpo_dump_field ( FIELD_NAME = '  CLI$PRESENT returned for /BOLD (again!)', TYPE = ADDRESS, VALUE=.temp);
)%
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_bold) AND flag_mask) OF
%ELSE
	    cli$present(swch_bold) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		IF cli$get_value(swch_bold,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_bold] = .temp
		    END;
	    [CLI$_NEGATED] :
		IF cli$get_value(swch_bold,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_bold] = .temp
		    END;
	    [CLI$_PRESENT] : 
		IF cli$get_value(swch_bold,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_bold] = .temp
		    END;
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_down) AND flag_mask) OF
%ELSE
	    cli$present(swch_down) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		IF cli$get_value(swch_down,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_down] = .temp
		    END;
	    [CLI$_NEGATED] :
		IF cli$get_value(swch_down,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_down] = .temp
		    END;
	    [CLI$_PRESENT] : 
		IF cli$get_value(swch_down,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_down] = .temp
		    END;
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_right) AND flag_mask) OF
%ELSE
	    cli$present(swch_right) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		IF cli$get_value(swch_right,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_right] = .temp
		    END;
	    [CLI$_NEGATED] :
		IF cli$get_value(swch_right,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_right] = .temp
		    END;
	    [CLI$_PRESENT] : 
		IF cli$get_value(swch_right,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_right] = .temp
		    END;
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_form_size) AND flag_mask) OF
%ELSE
	    cli$present(swch_form_size) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] : 
		IF cli$get_value(swch_form_size,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_form_size] = .temp
		    END;
	    [CLI$_NEGATED] :
		IF cli$get_value(swch_form_size,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_form_size] = .temp
		    END;
	    [CLI$_PRESENT] : 
		IF cli$get_value(swch_form_size,desc)
		THEN
		    BEGIN
		    status = lib$cvt_dtb(.desc[str$h_length],
					 .desc[str$a_pointer],
					 temp);
		    runoff_command[rno$h_form_size] = .temp
		    END;
	    TES;

%SBTTL 'ROUTINE RNOVMS - /DEBUG /MESSAGES /DEC_INTERNAL'
!
!	Process switches passing lists of arguments: /DEBUG /MESSAGES and
!						     /DEC_INTERNAL
!
	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_debug) AND flag_mask) OF
%ELSE
	    cli$present(swch_debug) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] :
		WHILE cli$get_value(swch_debug,desc)
		DO  call_tparse(desc,debug_states,debug_keys);
	    [CLI$_NEGATED] : false;
	    [CLI$_PRESENT] :
		WHILE cli$get_value(swch_debug,desc)
		DO call_tparse(desc,debug_states,debug_keys);
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_messages) AND flag_mask) OF
%ELSE
	    cli$present(swch_messages) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] :
		WHILE cli$get_value(swch_messages,desc)
		DO call_tparse(desc,messages_states,messages_keys);
	    [CLI$_NEGATED] : false;
	    [CLI$_PRESENT] :
		WHILE cli$get_value(swch_messages,desc)
		DO call_tparse(desc,messages_states,messages_keys);
	    TES;

	SELECTONE
%IF COMPILED_ON_VMS2
%THEN
	    (cli$present(swch_dec_internal) AND flag_mask) OF
%ELSE
	    cli$present(swch_dec_internal) OF
%FI
	    SET
	    [CLI$_ABSENT] : false;
	    [CLI$_DEFAULTED] :
		WHILE cli$get_value(swch_dec_internal,desc)
		DO  call_tparse(desc,dec_internal_states,dec_internal_keys);
	    [CLI$_NEGATED] : false;
	    [CLI$_PRESENT] :
		WHILE cli$get_value(swch_dec_internal,desc)
		DO call_tparse(desc,dec_internal_states,dec_internal_keys);
	    TES;


%SBTTL 'ROUTINE RNOVMS - DSR invocation and exit'
!
! Call the DSR application to process a single command line.
!

	status =  RUNOFF( runoff_command );	! Pass the DSR application the address
						! of the complete command information block.

	IF NOT .status				! If DSR returns a failure completion code,
	THEN					!
	    EXITLOOP				! exit the input file-spec processing loop.
	END;

    CLI$END_PARSE();				! Signal VMS to report an error if the user
						! puts junk on the command line.  Junk is
						! anything that we didn't ask for.
!
! Return to the system.
!
    RETURN .status				! Return the final DSR completion code to the caller.

    END;

%SBTTL 'Routine to call LIB$TPARSE'
ROUTINE call_tparse(string,states,keys) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls tparse given the string, states, and keys
!
! FORMAL PARAMETERS:
!
!	string		Address of string descriptor for string to parse
!	states		Address of tparse states table
!	keys		Address of tparse keys table
!
! IMPLICIT INPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	return code of LIB$TPARSE
!
! SIDE EFFECTS:
!
!	none known
!
!--
    BEGIN

    MAP	string : REF BBLOCK;
    LOCAL
    	status,
    	tpablock : BBLOCK[tpa$k_length0];
!
!    Initialize the TPARSE block:
!
    CH$FILL(0,tpa$k_length0,tpablock);
    tpablock[tpa$l_count] = tpa$k_count0;
    tpablock[tpa$l_options] = tpa$m_abbrev;
    tpablock[tpa$l_stringcnt] = .string[dsc$w_length];
    tpablock[tpa$l_stringptr] = .string[dsc$a_pointer];
!
!    Envoke TPARSE and return with its return code:
!
    RETURN LIB$TPARSE(tpablock,.states,.keys)
    END;


%SBTTL 'Routine to store values decided by $TPARSE'
ROUTINE save_value =
    BEGIN
    BUILTIN AP;
    MAP AP : REF BBLOCK;

!$xpo_put_msg (STRING = 'SAVE_VALUE invoked', SEVERITY = SUCCESS);

	SELECTONE .AP[TPA$L_PARAM] OF
	SET

	    [1] : runoff_command[rno$h_dbg1] = .AP[TPA$L_NUMBER];

	    [2] : runoff_command[rno$h_dbg2] = .AP[TPA$L_NUMBER];

	    [3] : BEGIN

!$xpo_put_msg (STRING = 'Character parameter being processed', SEVERITY = SUCCESS);

!$xpo_dump_field ( FIELD_NAME = '  .SWCH_ID', TYPE = ADDRESS, VALUE=.swch_id);
!$xpo_dump_field ( FIELD_NAME = '  swch_id_CHANGE for reference', TYPE = ADDRESS, VALUE=swch_id_change);

		  SELECTONE .swch_id OF
		  SET

		    [swch_id_change] : 
			runoff_command[rno$c_change] = .AP[TPA$L_NUMBER];

		    [swch_id_underline,swch_id_spacing,swch_id_separate] :
			runoff_command[rno$c_underline] = .AP[TPA$L_NUMBER];

		    [OTHERWISE] : RETURN 0;

		  TES
		  END;

	    [4] : BEGIN

		  SELECTONE .swch_id OF
		  SET

		    [swch_id_change] : 
			runoff_command[rno$c_change] = .AP[TPA$B_CHAR];

		    [swch_id_underline,swch_id_spacing,swch_id_separate] :
			runoff_command[rno$c_underline] = .AP[TPA$B_CHAR];

		    [OTHERWISE] : RETURN 0;

		  TES
		  END;

	    [OTHERWISE] : RETURN 0;

	TES

    END;	! End of routine SAVE_VALUE

%sbttl 'CHECK_VMS_VERSION -- Determine version of current VMS'
%(
ROUTINE CHECK_VMS_VERSION : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Check to see if this program is running on VMS Version 2 or earlier.
!	Issue a $GETJPI asking for the current "working set extent", something
!	that is new with Version 3 of VMS, and check the status.  If this
!	module was compiled on VMS Version 2 and run on VMS Version 3 or
!	later, issue a fatal error message and immediately abort.
!
! FORMAL PARAMETERS:
!
!	- NONE -
!
! IMPLICIT INPUTS:
!
!	COMPILED_ON_VMS2	- True if this module was compiled on VMS V2.x
!
! IMPLICIT OUTPUTS:
!
!	- NONE -
!
! ROUTINE VALUE and
! COMPLETION CODES:
!
!	- NOVALUE -
!
! SIDE EFFECTS:
!
!	Can abort the program if VMS version mismatch is detected.
!
!--

    BEGIN

    LOCAL
	IS_VMS2,				! TRUE if this is VMS 2.x
	JPIBLOCK	: BLOCK [7],		! JPI item description
	JPIVAL;					! JPI information buffer

    INCR I FROM 0 TO 6 DO
	JPIBLOCK [.I, 0, 32, 0] = 0;

    JPIBLOCK [0,0,16,0] = 4;			! Size of JPI information buff
    JPIBLOCK [0,16,16,0] = JPI$_WSEXTENT;	! Only on VMS 3.0 or later
    JPIBLOCK [1,0,32,0] = JPIVAL;		! Address of JPI info. buff.

    IS_VMS2 = ($GETJPI (ITMLST = JPIBLOCK)) EQL SS$_BADPARAM;

    IF .IS_VMS2 XOR COMPILED_ON_VMS2
    THEN
	BEGIN
	VMS_FATAL ('VMSVERSION',
	    %IF COMPILED_ON_VMS2
	    %THEN
		'This image will not run on VMS 3.0 or later.'
	    %ELSE
		'This image will not run on VMS 2.x or earlier.'
	    %FI);

	$XPO_TERMINATE (CODE = STS$K_SEVERE);
	END;

    END;					! End of CHECK_VMS_VERSION
)%
END
ELUDOM
