MODULE GETLIO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Picks up a line of text and centers it for output.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: July, 1978
!
! MODIFIED BY:
!
!	002	REM00002	Ray Marshall	May 1981.
!		For V1.126e.  Call to this routine changed: added one parameter
!		indicating whether or not to output the text of the command.
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:TSF.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    TTABLE : COUNTED_LIST;

EXTERNAL ROUTINE
    ENDCHR,
    ENDWRD,
    ERMA,
    ERML,
    OUTNJ,
    SCANT,
    SETCAS;

EXTERNAL LITERAL 				!Error messages
    RNFCJL,
    RNFTTL;


GLOBAL ROUTINE GETLIN (PRESCAN, DO_CASE, TRANSLATION, DO_OUTPUT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Starting with the current position, GETLIN parses up to
!	the first ';' or end-of-line; the resulting line is
!	centered and output.
!
! FORMAL PARAMETERS:
!
!	PRESCAN		- If true, scanning stops when the first ';'
!			  is found.  Otherwise, scanning goes to the
!			  end of the record.
!	DO_CASE		- If true, then TRANSLATION indicates which
!			  case rules are to be applied.
!	TRANSLATION	-
!	DO_OUTPUT	- If true, then output the scanned text,
!			  else, skip output related code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	HOLD_TAB_COUNT,
	SCA_HOLD : VECTOR [SCA_SIZE];

		!Preserve SCA so flags in text don't cause changes
		!to the formatting environment.

    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA_HOLD [.I] = .SCA [.I];

		!Set up SCA so SCANT preserves white space; lots of room
		!is provided so a new line doesn't get started unless
		!the user makes an error.
    SCA_FILL = FALSE;
    SCA_JUSTIFY = FALSE;
    SCA_LM = 0;
    SCA_RM = 150;				!Maximum width line.
    SCA_PRESCAN = .PRESCAN;			!Indicate when processing stops.
!

    IF 						!
	.DO_CASE
    THEN
	SETCAS (.TRANSLATION);			!Establish specified case rules.

		!Preserve tab count; temporarily set it to zero
		!so tabs get treated like spaces.
    HOLD_TAB_COUNT = .TTABLE [CL_INDEX];
    TTABLE [CL_INDEX] = 0;

    SCANT ();	!Scan one input line.

		! Drop trailing spaces, unless at least one of them is
		! underlined.  SCA_WRD_CPEND is equal to RINTES if a space/tab
		! was encountered after the last character on the line.

    IF
	.SCA_WRD_CPEND EQL RINTES
    THEN

	IF
	    .SCA_WRD_LST_UND EQL 0
	THEN

		!None of the trailing spaces were underlined.
		!This means that it is safe to drop them.

	    SCA_WRD_LST_SP = 0;

		!The call on ENDWRD is made here, rather than letting
		!OUTNJ do it.  The reason it's done here is so that
		!TSF_EXT_HL gets updated, so that the length of the
		!text can be obtained.

    ENDWRD (FALSE, FALSE, FALSE);

		!Check to see that the text retrieved is not too long

    IF
	.TSF_EXT_HL GTR .GCA_LWIDTH
    THEN

	BEGIN
	ERMA (RNFTTL, FALSE);	!Text cannot possibly be centered
	TSF_EXT_HL = 0;	!Fix up TSF_EXT_HL. The entire line still gets printed.
	END;

		!Restore SCA so actual margins can be used.

    INCR I FROM SCA_CASE_SIZE TO SCA_SIZE - 1 DO	!NOTE: modified case rules "play through".
	SCA [.I] = .SCA_HOLD [.I];

    TTABLE [CL_INDEX] = .HOLD_TAB_COUNT;		!Restore tab count

    IF
	NOT .DO_OUTPUT	! If output was not wanted,
	THEN RETURN;	!   it best we return now.  Otherwise, proceding
			!   beyond here will generate output.

			!Compute and validate number of spaces that have to
			!be inserted on the left to center the line
    TSF_ADJUST = .SCA_LM + (.SCA_RM - .SCA_LM - .TSF_EXT_HL)/2;

    IF 						!
	.TSF_ADJUST LSS 0
    THEN

	BEGIN
	ERML (RNFCJL);	!It's not possible to center the line.
	TSF_ADJUST = 0;	!Setting tsf_adjust to zero causes the line
	END;		!to go out against the left edge of the page.

			!Force out the line of text
    OUTNJ ();
    END;		!End of GETLIN

END			!End of module

ELUDOM
