MODULE ALINEO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes .CENTER, .RIGHT, .LEFT, and .INDENT commands
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY:
!
!	004	KAD00001	Keith A. Dawson		February 1981
!		Missed a REQ: on one REQUIRE statement. For V1.126d.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:NUMPRM.REQ';

REQUIRE 'REQ:PDT.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FLGT : FLAG_TABLE,
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    KHAR,
    NUMPRM : NUMPRM_DEFINE,
    PDT : REF PDT_DEFINITION,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    TTABLE : COUNTED_LIST;

EXTERNAL LITERAL 				! Error messages
    RNFBMS,
    RNFCJL,
    RNFCNF;

EXTERNAL ROUTINE
    ENDCMT,
    ENDWRD,
    ERM,
    ERMA,
    ERML,
    GUSKIP,
    OUTNJ,
    RSKIPS,
    SCANT;


GLOBAL ROUTINE ALINE (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to be processed.
!
! IMPLICIT INPUTS:
!
!	NUMPRM contains a number, as picked up by GETNUM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	HOLD_TAB_COUNT,				!Tab count preserved here.
	SCA_HOLD : VECTOR [SCA_SIZE];		!SCA preserved here.

    !All these commands accept a number as a parameter.

    IF 						!
	NOT .NUM_RESULT
    THEN 					!
    !Ignore the command if the number was bad.
	RETURN;

    SELECT .HANDLER_CODE OF
	SET

	[H_CENTER] :
	    BEGIN
	    !Validate number given on .CENTER command

	    IF 					!
		.NUM_SIGN NEQ 0			!Process a signed number.
	    THEN 				!
		NUM_VALUE = .NUM_VALUE + .GCA_LWIDTH
	    ELSE 				!

		IF 				!
		    .NUM_LENGTH EQL 0		!Apply default (page width).
		THEN 				!
		    NUM_VALUE = .GCA_LWIDTH;

	    IF 					!
		.NUM_VALUE LEQ 0
	    THEN 				!
	    !Can't center to the left of the left margin!!
		BEGIN
		ERMA (RNFBMS, FALSE);
		!Fix up parameter so text gets centered anyway
		NUM_VALUE = .GCA_LWIDTH;
		END;

	    END;

	[H_RIGHT] :
	    BEGIN
	    !Validate number given on .RIGHT command.
	    !Always handle number as an adjustment to the right margin.
	    NUM_VALUE = .SCA_RM - .NUM_VALUE;

	    IF 					!
		.NUM_VALUE LSS 0
	    THEN 				!
	    !Can't back up to the left of the left margin!!
		BEGIN
		ERMA (RNFBMS, FALSE);
		!Fix up parameter so text goes as far right as allowed.
		NUM_VALUE = .GCA_LWIDTH;
		END;

	    END;

	[H_CENTER, H_RIGHT] :
	    BEGIN
	    !Both .CENTER and .RIGHT can have a ';' or a comment after the number,
	    !or the text can be on the next line.
	    RSKIPS (IRA);			! Skip spaces after the number.

	    IF 					!
		(.KHAR EQL %C';')		!Just a semi-colon??
		OR
		(.FLGT [COM_FLAG, FLAG_ENABLED]			!A comment??
		 AND (.KHAR EQL .FLGT [COM_FLAG, FLAG_CHARACTER]))
	    THEN 				!
	    !User said .CENTER/.RIGHT nnn;.......
	    !OR		.CENTER/RIGHT nnn!.......
		BEGIN
		ENDCMT ();			!Skip characters, stopping when
						!a ';' or RINTES is encountered.

		IF
		    .KHAR NEQ RINTES
		THEN
		    !Scan terminated on a ';', which indicates that
		    !the text follows on the same line.  Skip the ';'
		    !and verify that there is something there.
		    BEGIN
		    KCNS ();			!Skip the ';'

		    IF 				!
			.KHAR EQL RINTES
		    THEN 				!
			BEGIN
			!A ';' followed by end-of-record
			!is a user error. Since a ';' functions
			!like an end-of-record, what the user has
			!done is give the command an empty record
			!to be .CENTERed or .RIGHTed.  The error
			!message warns him of this.  Then, processing
			!merges with the normal flow.  The result
			!will be that when SCANT gets called it
			!will return a null string, and all the
			!command will do is generate a blank line
			!in the output file.
			ERMA (RNFCNF, FALSE);
			END
		    END

		END
	    ELSE 				!

		IF 				!
		    .KHAR EQL RINTES
		THEN 				!
		!User said .CENTER/.RIGHT nnn <CRLF>
		    BEGIN
		    !Text is on the next record

		    REQUIRE 'REQ:CLHOPS.REQ';

		    EXTERNAL ROUTINE
			CLH;

		    CLH (CLH_READ_INPUT);
		    KCNS ();
		    END
		ELSE
		!Illegal character after the number.  Returning
		!lets DOCM issue the error message.
		    RETURN;

	    !At this point it has been ascertained that the .CENTER
	    !or .RIGHT command is syntatically correct.
	    !Also, the start of the text argument has been located.
	    !
	    !Preserve SCA used for normal text processing.

	    INCR I FROM 0 TO SCA_SIZE - 1 DO
		SCA_HOLD [.I] = .SCA [.I];

	    !Set up SCA so SCANT preserves white space, and there
	    !is lots of room so that a new line doesn't get started
	    !unless the user makes an error.
	    SCA_FILL = FALSE;
	    SCA_JUSTIFY = FALSE;
	    SCA_LM = 0;
	    SCA_RM = 150;
	    !
	    !Preserve tab count; temporarily set it to zero
	    !so that tabs get replaced by spaces.
	    HOLD_TAB_COUNT = .TTABLE [CL_INDEX];
	    TTABLE [CL_INDEX] = 0;
	    RSKIPS (IRA);			!Skip leading spaces and tabs.
	    SCANT ();				!Scan one input line.
	    !
	    !Trailing spaces are dropped, unless there is at least
	    !one underlined space in the sequence.
	    !SCA_WRD_CPEND is not equal to RINTES iff the last character
	    !has not yet been made part of the word that was interrupted
	    !by the end of the line occurring; this can happen iff
	    !trailing spaces/tabs did not force the end of word processing
	    !to take place, i.e., there were no trailing spaces/tabs.
	    !See SCANT to see how spaces/tabs get handled.

	    IF 					!
		.SCA_WRD_CPEND EQL RINTES
	    THEN 				!

		IF 				!
		    .SCA_WRD_LST_UND EQL 0
		THEN 				!
		    SCA_WRD_LST_SP = 0;

	    !The call on ENDWRD is made here, rather than letting
	    !OUTNJ do it.  The reason it's done here is so that
	    !TSF_EXT_HL gets updated, so that the length of the text
	    !can be used.
	    ENDWRD (FALSE, FALSE, FALSE);
	    !Check to see that the text retrieved is not too long.

	    IF 					!
		.TSF_EXT_HL GTR .GCA_LWIDTH
	    THEN 				!
		BEGIN
		!Text is too long even before adjustment.
		ERML  (RNFCJL);
		!Fix up TSF_EXT_HL.  However, the entire line
		!will still get printed.
		TSF_EXT_HL = 0;
		END;

	    END;

	[H_CENTER] :
	    BEGIN
	    !Compute number of spaces needed to center the line.
	    TSF_ADJUST = (.NUM_VALUE - .TSF_EXT_HL)/2;
	    END;

	[H_RIGHT] :
	    BEGIN
	    !Compute number of spaces needed to push the line the
	    !specified amount to the right.
	    TSF_ADJUST = .NUM_VALUE - .TSF_EXT_HL;
	    END;

	[H_CENTER, H_RIGHT] :
	    BEGIN

	    IF 					!
		.TSF_ADJUST LSS 0
	    THEN 				!
		BEGIN
		!It's not possible to adjust the line.
		ERML (RNFCJL);
		!By setting tsf_adjust to zero, the line
		!will go out against the left edge of the page.
		TSF_ADJUST = 0;
		END;

	    !If, after going through all the above, it turns
	    !out to be the case that no text was picked up,
	    !skip a blank line, unconditionally.

	    IF 					!
		.TSF_INT_HL EQL 0
	    THEN 				!
		GUSKIP (1);

	    OUTNJ ();				!Force out line of text.
	    !
	    !Restore tab count and SCA to previous status
	    TTABLE [CL_INDEX] = .HOLD_TAB_COUNT;
	    !When restoring SCA note that case rules "play through"

	    INCR I FROM SCA_CASE_SIZE TO SCA_SIZE - 1 DO
		SCA [.I] = .SCA_HOLD [.I];

	    SCA_SECT_EMPTY = FALSE;		!There's something in this section.
	    RETURN;
	    END;

	[H_LEFT, H_INDENT] :
	    BEGIN
	    !The specified indentation is just remembered.  It
	    !picked up by FCIMRA when the first character for the
	    !next line has been picked up.

	    IF 					!
		.NUM_LENGTH NEQ 0
	    THEN 				!
		BEGIN				! A number was supplied.
		SCA_INDENT = .NUM_VALUE;
		END
	    ELSE
		BEGIN				!A number was not supplied.
		SCA_INDENT = .PDT_INDENT;	!Use paragraph indentation
		END;

	    END;
	TES;

    END;					!End of ALINE

END						!End of module

ELUDOM
