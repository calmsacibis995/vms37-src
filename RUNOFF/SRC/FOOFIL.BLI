MODULE FOOFIO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Handle all file operations for .FOOTNOTE and .END FOOTNOTE 
!	    commands.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: September, 1978
!
! MODIFIED BY:
!
!	005	REM00005	Ray Marshall	15-December-1981
!		Built up revision history based on CMS library generations.
!
!	004	RWF00004	Rich Friday	11-November-1981
!		MASIVE changes were made herein.  The whole way in which
!		  footnotes are processed has been completely redesigned.
!
!	003	REM00003	Ray Marshall	25-August-1981
!		Updated copyright notice.
!
!	002	KAD00002	Keith Dawson	28-January-1981
!		For V1.126b. Add delete operation, FOO_DELE.
!
!	001	KAD00001	Keith Dawson	21-October-1980
!		I (Ray Marshall) don't know what (if any) changes were made
!		  on or before this date.  This is the first generation in
!		  the CMS library.  There was some text implying that there
!		  was a change made in September-1980 by Keith, but there was
!		  nothing indicating what it was.
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:FNCT.REQ';

REQUIRE 'REQ:FOOFIL.REQ';		!Operations performed by FOOFIL.

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
MACRO
    ERM_T (RNFCODE, STR_DESCR) =
	BEGIN
	BIND
	    TEMP = STR_DESCR : $STR_DESCRIPTOR ();

	ERM (RNFCODE, .TEMP [STR$A_POINTER], .TEMP [STR$H_LENGTH])
	END	%;
!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FNCT : FNCT_DEFINITION,		!Overall footnote statistics.
    FNESIZ : FN_EXT_SIZE_DEFINITION,	!Size of each pending footnote.
    FNISIZ : FN_INT_SIZE_DEFINITION,	!Internal size of each pending footnote (number of TSF/MRA pairs)
    MRA : REF FIXED_STRING,
    TSF : TSF_DEFINITION;

EXTERNAL
    FO1IOB : $XPO_IOB (),		!Only the address is looked at.
    FOOIOB : REF  $XPO_IOB (),		!The primary footnote IOB.  Except for FOO_CLEAN, all
					!footnote operations refer to this IOB.
    FOTIOB : REF  $XPO_IOB (),		!Used as a work file for footnotes.
    FOOMRA : FIXED_STRING,		!Substitute MRA.
    FOOTSF : VECTOR [TSF_SIZE];		!Substitute TSF area
!
EXTERNAL LITERAL 				!Error messages
    RNFCOF,
    RNFCRF,
    RNFCWF,
    RNFILE;

EXTERNAL ROUTINE
    ERM,
    ERMS;


GLOBAL ROUTINE FOOFIL (OPERATION) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Performs operations on the footnote file.
!
! FORMAL PARAMETERS:
!
!	OPERATION indicates what should be done.
!	See the file FOOFIL.REQ.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS;

    CASE .OPERATION FROM 0 TO FFOO_OP OF
	SET

	[FOO_INIT] :
	    !Initialize footnote file.
	    BEGIN
	    !When initializing the IOB make sure the associated file name is correct.
	    IF
		.FOOIOB EQLA FO1IOB
	    THEN
		$XPO_IOB_INIT (IOB = .FOOIOB, 	!
		    FILE_SPEC = ('001RNO.TMP'),
		    ATTRIBUTES = BINARY)
	    ELSE
		$XPO_IOB_INIT (IOB = .FOOIOB, 	!
		    FILE_SPEC = ('002RNO.TMP'),
		    ATTRIBUTES = BINARY);
	    RETURN FOO_NORMAL;
	    END;

	[FOO_OPIN] :
	    !Open footnote file for input.
	    BEGIN
	    !The file may already be open for input, in which case
	    !all we have to do is RETURN.
	    IF
		.FOOIOB [IOB$V_OPEN]					!Is the file open?
	    THEN
		!The file is open, but check to see if it's for input.
		IF
		    .FOOIOB [IOB$V_INPUT]
		THEN
		    !It is open for input, so simply return.
		    RETURN FOO_NORMAL
		ELSE
		    !Although it's open, it's not open for output, so we
		    !have to make it open.
		    BEGIN
		    FOOFIL (FOO_CLOS);				!Always succeeds, so no status check needed.
		    STATUS = $XPO_OPEN (IOB = .FOOIOB, 	!
			FAILURE = XPO$IO_FAILURE,
			OPTIONS = INPUT);

		    IF 					!
			.STATUS
		    THEN 				!
			BEGIN
			RETURN FOO_NORMAL
			END
		    ELSE 				!Can't open footnote file for reading.
			BEGIN
			ERM_T (RNFCOF, .FOOIOB [IOB$A_FILE_SPEC]);
			RETURN FOO_BAD;
			END;
		    END
	    ELSE
		!The file is not open at all.  This indicates some serious error,
		!since the only reason the file could be closed is either that
		!the user has defined no footnotes, or all the footnotes have already
		!been output.
		!At any rate, output an error message and return.
		BEGIN
		ERMS (RNFILE, CH$PTR (UPLIT ('FOO_OPIN')), 9);
		RETURN FOO_BAD
		END
	    END;

	[FOO_OPOU] :
	    !Open footnote file for output.
	    BEGIN

	    !If the file is already opened for output just return.
	    IF
		.FOOIOB [IOB$V_OPEN]
	    THEN
		!The file is at least open.  See if it's open for output.
		IF
		    .FOOIOB [IOB$V_OUTPUT]
		THEN
		    !The file is in exactly the state we want it in.
		    RETURN FOO_NORMAL
		ELSE
		    !The file is open for input, so we have to clean it up
		    RETURN FOOFIL (FOO_CLEAN);

	    !The file is not open at all. So start anew.
	    !Initialize the footnote IOB.
	    FOOFIL (FOO_INIT);

	    !Open file for output now.
	    STATUS = $XPO_OPEN (IOB = .FOOIOB, 	!
		FAILURE = XPO$IO_FAILURE,
		OPTIONS = OUTPUT);

	    IF 					!
		.STATUS
	    THEN 				!
		BEGIN
		RETURN FOO_NORMAL
		END
	    ELSE 				!Can't open footnote file for output.
		BEGIN
		ERM_T (RNFCOF, .FOOIOB [IOB$A_FILE_SPEC]);
		RETURN FOO_BAD;
		END;

	    END;

	[FOO_READ] :
	    !Read back a footnote record.  A footnote record consists
	    !of a TSF record and an MRA record.
	    BEGIN
	    !First, get the description of the text that has been saved.
	    STATUS = $XPO_GET (IOB = .FOOIOB, 	!
		FAILURE = XPO$IO_FAILURE,
		FULLWORDS = TSF_SIZE);

	    IF 					!
		NOT .STATUS
	    THEN 				!

		IF 				!
		    .STATUS EQL XPO$_END_FILE
		THEN 				!Reached the end of the footnote file.
		    RETURN FOO_ENDFIL
		ELSE 				!Couldn't read back footnote record.
		    BEGIN
		    ERM (RNFCRF, 0, 0);
		    RETURN FOO_BAD;
		    END;

	    !The text descriptor (TSF) was read correctly.  Now
	    !move the results into a waiting TSF.
	    !The move is done because the next read invalidates
	    !the current IOB pointers.
	    BEGIN

	    BIND
		FOOTSF = FOOIOB [IOB$A_DATA] : REF VECTOR;

	    INCR I FROM 0 TO TSF_SIZE - 1 DO
		TSF [.I] = .FOOTSF [.I];

	    END;

	    !Now, get the actual saved text.
	    STATUS = $XPO_GET (IOB = .FOOIOB, 	!
		FAILURE = XPO$IO_FAILURE,
		FULLWORDS = CH$ALLOCATION (.TSF_INT_HL + .TSF_INT_VL + 1));

	    !Make sure the read went ok.
	    IF 					!
		NOT .STATUS
	    THEN 				!Couldn't read back MRA.
		BEGIN
		ERM (RNFCRF, 0, 0);
		RETURN FOO_BAD;
		END;

	    !Data was read, so make MRA look like a real FIXED string.
	    FS_START (MRA) = CH$PTR (.FOOIOB [IOB$A_DATA]);
	    FS_NEXT (MRA) = .FS_START (MRA);
	    FS_MAXSIZE (MRA) = .TSF_INT_HL + .TSF_INT_VL;
	    FS_LENGTH (MRA) = .TSF_INT_HL + .TSF_INT_VL;;
	    RETURN FOO_NORMAL;
	    END;

	[FOO_WRIT] :
	    !Write a footnote record.  A footnote record consists of
	    !a TSF record and an MRA record.
	    BEGIN
	    STATUS = $XPO_PUT (IOB = .FOOIOB, 	!
		FAILURE = XPO$IO_FAILURE,
		BINARY_DATA = (TSF_SIZE, .TSF) );

	    !Make sure the write went ok.
	    IF 					!
		NOT .STATUS
	    THEN 				!Couldn't write the TSF.
		BEGIN
		ERM (RNFCWF, .STATUS, 0);
		RETURN FOO_BAD;
		END;

	    !Write the MRA.  Always write at least 1 word.
	    STATUS = $XPO_PUT (IOB = .FOOIOB, 	!
		FAILURE = XPO$IO_FAILURE,
		BINARY_DATA = ( CH$ALLOCATION(.TSF_INT_HL + .TSF_INT_VL +1), MRA [5]) );

	    !Update current size of this footnote as it's being output.
	    FNESIZ [.FNCT_COUNT] = .FNESIZ [.FNCT_COUNT] + .TSF_LINES;

	    IF 					!
		.STATUS
	    THEN 				!
		BEGIN
		!Update the current internal size of this footnote (number of TSF/MRA pairs)
		FNISIZ [.FNCT_COUNT] = .FNISIZ [.FNCT_COUNT] + 1;
		RETURN FOO_NORMAL;
		END
	    ELSE 				!Couldn't write the MRA.
		BEGIN
		ERM (RNFCWF, .STATUS, 0);
		RETURN FOO_BAD;
		END;

	    END;

	[FOO_CLOS] :
	    !Close the footnote file.
	    BEGIN
	    $XPO_CLOSE (IOB = .FOOIOB,
			OPTIONS = REMEMBER);	!Always remember file information, so file can later be deleted.
	    RETURN FOO_NORMAL;
	    END;

	[FOO_DELE] :
	    !Delete the footnote file.
	    BEGIN
	    $XPO_DELETE (IOB = .FOOIOB);
	    RETURN FOO_NORMAL;
	    END;

	[FOO_CLEAN] :
	    !The footnote file is open for reading, but we want to put a new footnote
	    !at the end of it.  Therefore, copy the remainder of the footnote file into
	    !a new file, and leave it open for output, so that stuff can be written to the
	    !end of the file.
	    BEGIN
	    $XPO_IOB_INIT (IOB = .FOTIOB);

	    !Open the work file.  Note that its name depends on which IOB FOTIOB
	    !refers to.
	    IF
		.FOTIOB EQLA FO1IOB
	    THEN
		STATUS = $XPO_OPEN (IOB = .FOTIOB,
				    FILE_SPEC = ('001RNO.TMP'),
				    OPTIONS = OUTPUT,
				    ATTRIBUTES = BINARY)
	    ELSE
		STATUS = $XPO_OPEN (IOB = .FOTIOB,
				    FILE_SPEC = ('002RNO.TMP'),
				    OPTIONS = OUTPUT,
				    ATTRIBUTES = BINARY);

	    !Verify that this work file could be opened.
	    IF
		NOT .STATUS
	    THEN
		!Something went wrong
		BEGIN
		ERM_T (RNFCOF, .FOTIOB [IOB$A_FILE_SPEC]);
		RETURN FOO_BAD
		END;

	    !Now copy everything from the active footnote file into
	    !the footnote work file.
	    STATUS = XPO$_NORMAL;
	    WHILE .STATUS NEQ XPO$_END_FILE DO
		BEGIN
		STATUS = $XPO_GET (IOB = .FOOIOB,
				   FAILURE = XPO$IO_FAILURE,
				   FULLWORDS = TSF_SIZE);

		IF
		    NOT .STATUS
		THEN
		    !Something's not quite right.  See what it is.
		    IF
			.STATUS EQL XPO$_END_FILE
		    THEN
			!Get out of this copy loop if nothing more to read.
			EXITLOOP
		    ELSE
			!Something serious.  Can't read back a footnote record.
			BEGIN
			ERM (RNFCRF, 0, 0);
			RETURN FOO_BAD
			END;

		!The read went correctly.  Now simply copy it to the work file.
		STATUS = $XPO_PUT (IOB = .FOTIOB, BINARY_DATA = FOOIOB [IOB$T_DATA]);

		!Check that it went ok.
		IF
		    NOT .STATUS
		THEN
		    !Something happened.
		    BEGIN
		    ERM (RNFCWF, .STATUS, 0);
		    RETURN FOO_BAD
		    END;

		!Read the MRA that corresponds to the TSF that was read above.
		BEGIN
		BIND
		    TSF = FOOIOB [IOB$A_DATA] : TSF_DEFINITION;

		!Read precisely as much as was written.
		STATUS = $XPO_GET (IOB = .FOOIOB,
				   FAILURE = XPO$IO_FAILURE,
				   FULLWORDS = CH$ALLOCATION (.TSF_INT_HL + .TSF_INT_VL + 1));

		!Make sure the read went ok.
		IF
		    NOT .STATUS
		THEN
		    !Something went wrong.  End of file is not allowed here, so it must be an error.
		    BEGIN
		    ERM (RNFCRF, 0, 0);
		    RETURN (FOO_BAD)
		    END;

		!Now write this information to the work file.
		STATUS = $XPO_PUT (IOB = .FOTIOB,
				   BINARY_DATA = FOOIOB [IOB$T_DATA]);

		!Make sure the write went ok.
		IF
		    NOT .STATUS
		THEN
		    !Something bad happened
		    BEGIN
		    ERM (RNFCWF, .STATUS, 0);
		    RETURN FOO_BAD
		    END;
		END;
		END;					!End of copying from FOOIOB to FOTIOB.

	    !Get rid of the file that we just copied stuff from.
	    $XPO_CLOSE (IOB = .FOOIOB,
			OPTIONS = REMEMBER);		!Don't forget the name of the file.
	    $XPO_DELETE (IOB = .FOOIOB);		!And now the old stuff is gone.

	    !Now switch IOB pointers because all the other FOOFIL operations work only
	    !on FOOIOB.
	    BEGIN
	    LOCAL
		TEMP;

	    TEMP = .FOTIOB;
	    FOTIOB = .FOOIOB;
	    FOOIOB = .TEMP;
	    END;

	    !Update the footnote counting information
	    INCR I FROM 0 TO .FNCT_COUNT - 1 DO
		BEGIN
		FNESIZ [.I] = .FNESIZ [.I + .FNCT_OLD];
		FNISIZ [.I] = .FNISIZ [.I + .FNCT_OLD];
		END;

	    !And now forget there ever were any old footnotes.
	    FNCT_OLD = 0;

	    RETURN FOO_NORMAL
	    END;

	TES;

    END;					!End of FOOFIL

END						!End of module

ELUDOM
