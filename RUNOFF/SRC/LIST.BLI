MODULE LISTOO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes .LIST and .LIST ELEMENT commands 
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:CONVRT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:NUMPRM.REQ';

REQUIRE 'REQ:PDT.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FS01 : FIXED_STRING,
    IRA : FIXED_STRING,
    LSTCHR : REF VECTOR,			!.LIST ELEMENT character.
    LSTCNT : REF COUNTED_LIST,			!.LIST ELEMENT counters and controls.
    LSTLCH : REF VECTOR,			!The character to the left of the counter.
    LSTRCH : REF VECTOR,			!The character to the right of the counter.
    LSTLDD : REF VECTOR,			!.LIST ELEMENT display codes.
    LSTSKP : REF VECTOR,			!Inter-.LIST ELEMENT skipping
    NUMPRM : NUMPRM_DEFINE,
    PDT : REF PDT_DEFINITION,
    SCA : SCA_DEFINITION;

!

EXTERNAL LITERAL 				!Error messages
    RNFMQS,
    RNFSTD;

EXTERNAL ROUTINE
    ENDCHR,
    ENDWRD,
    ERMA,
    GCSKIP,
    GETQC,
    PACXXX,
    SKPSEP,
    STKFRM;


GLOBAL ROUTINE LIST (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to be processed.
!
! IMPLICIT INPUTS:
!
!	NUMPRM contains a number, as processed by GETNUM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BULLET,
	LIST_SKIP;

    SELECTONE .HANDLER_CODE OF
	SET

	[H_LIST] :
	    BEGIN
	    LOCAL
		GETQC_RESULT,
		GOT_SEPARATOR;

	    !If the user specified a bullet as the second parameter, pick it up.
	    GOT_SEPARATOR=SKPSEP (IRA);		!Skip spaces/tabs, and a comma

	    !Attempt to pick up a bullet.
	    GETQC_RESULT = GETQC ();

	    !See if user did specify a quoted string.
	    IF					!
		(.GETQC_RESULT GEQ 0)
	    THEN
	    !User did give a quoted string.
		    BULLET = .GETQC_RESULT
	    ELSE
	    !User specified no bullet.
		BEGIN
		IF				!
		    .GOT_SEPARATOR
		THEN
		!But user said to expect something!!!
		    ERMA (RNFMQS,TRUE);
		BULLET = 0;
		END;

	    IF 					!
		NOT STKFRM (.HANDLER_CODE)
	    THEN
		RETURN;				!Forget it if stack overflow.

!

	    IF 					!
		.LSTCNT [CL_MAX_INDEX] EQL .LSTCNT [CL_INDEX]
	    THEN
		BEGIN				!Too many nested lists
		ERMA (RNFSTD, FALSE);
		RETURN;
		END;

	    !Compute the inter .LIST ELEMENT spacing.
	    IF!
		.NUM_LENGTH NEQ 0
	    THEN
	    !User has specified a first parameter.
		LSTSKP [ .LSTCNT [CL_INDEX] ] = .NUM_VALUE
	    ELSE
	    !User said nothing.  Use paragraph skipping.
		LSTSKP [ .LSTCNT [CL_INDEX] ] = .PDT_SKIP;

!
	    BEGIN				!Left margin computation

	    LOCAL
		TEMP;

	    !Use defensive margin computation in case of restrictive margins
	    IF 					!
		.SCA_LM EQL 0
	    THEN
		TEMP = 9
	    ELSE
		TEMP = 4;

	    IF 					!
		(.SCA_LM + .TEMP) LSS .SCA_RM
	    THEN
		SCA_LM = .SCA_LM + .TEMP;

	    END;
!
	    !Set up for next (anticipated) .LIST ELEMENT command
	    LSTCNT [CL_INDEX] = .LSTCNT [CL_INDEX] + 1;
	    LSTCNT [.LSTCNT [CL_INDEX]] = 0;
	    LSTCHR [.LSTCNT [CL_INDEX] - 1] = .BULLET;		!Either the bullet, or zero.
	    LSTLCH [.LSTCNT [CL_INDEX] - 1] = 0;		!No character on the left.
	    LSTRCH [.LSTCNT [CL_INDEX] - 1] = %C'.';		!Follow number with a '.'
	    LSTLDD [.LSTCNT [CL_INDEX] - 1] = TCONVRT_DEC_NOZ;	!Convert counter to decimal.
	    END;

	[H_LIST_ELEMENT] :
	    BEGIN

	    LOCAL
		DIGITS : VECTOR [CH$ALLOCATION(20)],
		DIGIT_COUNT,
		PTR;

	    LOCAL
		NEEDED_COLUMNS;			!Columns needed for number plus '.##'

!
	    !Update the running counter for this .LIST ELEMENT level
	    LSTCNT [.LSTCNT [CL_INDEX]] = .LSTCNT [.LSTCNT [CL_INDEX]] + 1;
	    
	    !Pick up proper inter-list-element spacing.
	    IF!
		.LSTCNT [CL_INDEX] NEQ 1
	    THEN
	    !User said .LIST before .LIST ELEMENT, so pick up his
	    !specified spacing.
		LIST_SKIP = .LSTSKP [.LSTCNT [CL_INDEX] - 1 ]
	    ELSE
	    !User is starting a "level zero" list.  Use current
	    !paragraph skip instead.
		LIST_SKIP = .PDT_SKIP;


	    IF 					!
		.LSTCHR [.LSTCNT [CL_INDEX] - 1] EQL 0
	    THEN
	    !The list elements are to be numbered.
		BEGIN
		PTR = CH$PTR (DIGITS);
		DIGIT_COUNT = 0;

		!If user specified a left-character output it right now.
		IF
		    .LSTLCH [.LSTCNT [CL_INDEX] - 1 ] NEQ 0
		THEN
		    !User did specify a left-character, so output it.
		    BEGIN
		    CH$WCHAR_A (.LSTLCH [.LSTCNT [CL_INDEX] - 1], PTR);
		    DIGIT_COUNT = 1
		    END;
		!Convert the counter to characters.
		DIGIT_COUNT = .DIGIT_COUNT +  PACXXX (.LSTCNT [.LSTCNT [CL_INDEX]], PTR, .LSTLDD [.LSTCNT [CL_INDEX] -1]);

		!Add on the right-character (usually a '.') if there is one
		IF
		    .LSTRCH [.LSTCNT [CL_INDEX] - 1 ] NEQ 0
		THEN
		    BEGIN
		    CH$WCHAR (.LSTRCH [.LSTCNT [CL_INDEX] - 1], .PTR);
		    DIGIT_COUNT = .DIGIT_COUNT + 1;
		    END;
!
		!Now figure out how much to "back-dent", so that the number and
		!the '.' appear just to the left of the left margin.
		NEEDED_COLUMNS = .DIGIT_COUNT + 2;	!2 for '##'
		END
	    ELSE
	    !The user has specified that a bullet is to be output.
		NEEDED_COLUMNS = 3;		!3 for character + '##'.

	    IF 					!
		.NEEDED_COLUMNS GTR .SCA_LM
	    THEN
		SCA_INDENT = -.SCA_LM
	    ELSE
		SCA_INDENT = -.NEEDED_COLUMNS;

	    !Now signal a paragraph is to be started.
	    SCA_PARA_PND = TRUE;
!
	    !Text is output just as if it were coming from the 'IRA'
	    BEGIN
	    LOCAL
		HOLD_PDT_SKIP;

	    !Substitute list element spacing for paragraph skip.
	    HOLD_PDT_SKIP = .PDT_SKIP;		!Preserve current status.
	    PDT_SKIP = .LIST_SKIP;		!Insert list element spacing.

	    !Output the list element marker; either a number or a bullet.
	    IF 					!
		.LSTCHR [.LSTCNT [CL_INDEX] - 1] EQL 0
	    THEN
	    !Output a numbered list element
		BEGIN

		PTR = CH$PTR (DIGITS);
		INCR I FROM 1 TO .DIGIT_COUNT DO
		    ENDCHR (CH$RCHAR_A (PTR))

		END
	    ELSE
	    !Output a list element marked with a bullet.
		ENDCHR (.LSTCHR [.LSTCNT [CL_INDEX] - 1]);

	    !Output two spaces which are to preceed the start of the text.
	    ENDCHR (%C' ');
	    ENDCHR (%C' ');
	    ENDWRD (FALSE, FALSE, FALSE);
	    
	    !Restore paragraph skipping.
	    PDT_SKIP = .HOLD_PDT_SKIP;
	    END;
!
	    END;
	TES;

    END;					!End of LIST

END						!End of module

ELUDOM
