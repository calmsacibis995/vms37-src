MODULE XTNOOO (	!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Routines for processing transaction numbers.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: January, 1979
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    ASGXTN : NOVALUE,
    XTNPAG;

!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:PAGEN.REQ';

REQUIRE 'REQ:POOL.REQ';

REQUIRE 'REQ:XTNTAB.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL
    XTN_MAX_SEGS = 100;				!Maximum number of pieces into

						!which the transaction number
						!tables can be broken.
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    XPAGEN : REF XPAGEN_DEFINE,
    XTNCNT,
    XTNLSP : REF PAGE_DEFINITION,
    XTNLSX : REF VECTOR [XTN_MAX_SEGS + 1],
    XTNPOL : REF POOL,
    XTNSGP : REF BLOCK,
    XTNTAB : REF XTNTAB_DEFINE;

EXTERNAL ROUTINE
    GPOOL,
    PAGEQL,
    XNFILE,
    XPOOL;


GLOBAL ROUTINE ASGXTN (PAGE, TRANSACTION) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Associates the current page number with a transaction
!	number range.
!
! FORMAL PARAMETERS:
!
!	PAGE indicates which page number is to be attached to
!	the index entry.
!	TRANSACTION, if not zero, is the highest transaction number
!	to be associated with the given PAGE.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Implicit in this routine is the compression of the list of
!	transaction numbers for a single page.  Note that before
!	the document page number is copied, a check is made to
!	see if the previous transaction number refers to something
!	on the same page.  If that is the case, then no copy of the
!	page number is made.
!	This fact is important for the operation of the MODULE
!	XPRT, which prints the index entries later.
!	If the compression is not made, that module assumes that
!	there are distinct pages having the same number; subsequently,
!	it won't merge page numbers with 'to' or '-' correctly.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PAGE : REF PAGE_DEFINITION;

    LOCAL
	MERGE;

    !Is this trip necessary??

    IF 						!
	.TRANSACTION EQL 0
    THEN
	RETURN;

    !The first time through this code, initialize the pool.
    IF 						!
	.XTNPOL EQL 0				!First time through?
    THEN
	BEGIN
	!First, allocate the pool itself.
	!(Extra slot gets pointer to XTNLSX segment.)
	GPOOL (XTNPOL, XTN_MAX_SEGS + 1);
	!Now, allocate space for XTNLSX.
	!(Extra slot avoids having to subtract 1 all the time).
	XTNLSX = XPOOL (XTNPOL, XTN_MAX_SEGS + 1);
	END;

    !At this point at least a pool exists for saving the
    !segment information.  However, the current segment, wherein
    !the transaction numbers and associated pages reside,
    !may be full, or even not yet allocated.
    !
    !In preparation for merging, see if the current page number and
    !last referenced page number are the same.
    IF 						!
	.XTNLSP EQL 0
    THEN
    !There is no last page.
	MERGE = FALSE
    ELSE
    !Compare the two page numbers, taking display characterstics into account.
	MERGE = PAGEQL (.XTNLSP, .PAGE, TRUE);

    IF 						!
	.MERGE
    THEN
    !The transaction numbers refer to the same page of the
    !document.  Just record the new highest transaction number.
	BEGIN
	XTNTAB [.XTNCNT] = .TRANSACTION;	!Record transaction in table, permanently.
	XTNLSX [.XTNPOL [POOL_ACT_PADS]] = .TRANSACTION;	!Remember it for next time around.
	RETURN;
	END;

    !The new transaction number does not refer to the last
    !page, so no merge was possible.  Allocate a new segment
    !if the current segment is either full, or else doesn't
    !exist.
    IF .XTNSGP EQL 0				!Any segment at all yet?
	OR (.XTNCNT GEQ MAX_XTN_COUNT)		!Current segment full?
    THEN
	BEGIN
	!Allocate a new segment.
	!Note that the transaction numbers and page numbers
	!are saved in the same segment.
	XTNSGP = XPOOL (XTNPOL, XTN_XTNTAB_SIZE + XTN_PAGTAB_SIZE);
	!Make sure that a segment could be allocated.

	IF 					!
	    .XTNSGP EQL 0 OR (.XTNLSX EQL 0)	!Catch no XTNLSX space here.
	THEN
	!The requested amount could not be allocated (pool full)
	    BEGIN
	    !Complain to user.  Don't put the message in the
	    !output file, so at least he gets a clean document.
	    EXTERNAL ROUTINE
		XOVFLO;

	    XOVFLO ();
	    RETURN;
	    END;

	XTNCNT = 0;				!No transaction numbers in this segment yet.
	XTNTAB = .XTNSGP;			!Transaction table is at start of segment.
						!Page numbers are saved after transaction numbers.
	XPAGEN = .XTNSGP + XTN_XTNTAB_SIZE*%UPVAL;
	END;

    !At this point, there is definitely a spot free to save the
    !transaction number and the associated page number.
    !That slot is the one AFTER the previous slot.
    XTNCNT = .XTNCNT + 1;			!New transaction number slot.
    XTNTAB [0] = .XTNCNT;			!Remember count in this list.
    XTNLSP = XPAGEN [.XTNCNT, SCT_TYP];		!Remember where this page is.
    BEGIN
    BIND						!Make these structures
	COPY = XPAGEN [.XTNCNT, 0,0,0,0] : VECTOR;	!vectors so that
    MAP							!copying is easier.
	PAGE :	REF VECTOR;				!...
    
    !Copy items one by one.
    INCR I FROM 0 TO (PAGE_SCT_SIZE -1) DO
	COPY [.I] = .PAGE [.I];
    END;
!!    XPAGEN [.XTNCNT, SCT_TYP] = .PAGE [SCT_TYP];	!Save this page number.
!!    XPAGEN [.XTNCNT, SCT_SUB_PAGE] = .PAGE [SCT_SUB_PAGE];	!...
!!    XPAGEN [.XTNCNT, SCT_NUMBER] = .PAGE [SCT_NUMBER];	!...
!!    XPAGEN [.XTNCNT, SCT_PAGE] = .PAGE [SCT_PAGE];	!...
!!    XPAGEN [.XTNCNT, SCT_DISPLAY] = .PAGE [SCT_DISPLAY];	!...
    XTNTAB [.XTNCNT] = .TRANSACTION;		!Record transaction in table, permanently.
    XTNLSX [.XTNPOL [POOL_ACT_PADS]] = .TRANSACTION;	!Remember it for next time around.
    END;					!End of ASGXTN


GLOBAL ROUTINE XTNPAG (TRANSACTION) = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Given a transaction number, return the address of
!	the corresponding page number.
!
! FORMAL PARAMETERS:
!
!	TRANSACTION - The transaction number.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Address of the corresponding page number.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.TRANSACTION EQL 0
    THEN
	RETURN 0;

    !Find the correct segment number.
    !NOTE: Start at 2 because first is XTNLSX.

    INCR I FROM 2 TO .XTNPOL [POOL_ACT_PADS] DO
	BEGIN

	IF 					!
	    .TRANSACTION LEQ .XTNLSX [.I]
	THEN
	!Search segment for exact transaction number.
	!That results in an index into the corresponding
	!set of saved pages.
	    BEGIN

	    LOCAL
		XTN_TABLE : REF XTNTAB_DEFINE,
		XPAGEN : REF XPAGEN_DEFINE;

	    XTN_TABLE = GET_SEG_ADDR (XTNPOL, .I);
	    XPAGEN = GET_SEG_ADDR (XTNPOL, .I) + XTN_XTNTAB_SIZE*%UPVAL;

	    INCR J FROM 1 TO .XTN_TABLE [0] DO
		BEGIN

		IF 				!
		    .TRANSACTION LEQ .XTN_TABLE [.J]
		THEN
		    RETURN XPAGEN [.J, SCT_TYP]

		END;

	    END;

	END;

    XNFILE (6, CH$PTR (UPLIT ('XTNPAG')));	!Not found: internal error.
    RETURN (

	EXTERNAL
	    PAGEN;

	PAGEN)
    END;					!End of XTNPAG

END						!End of module

ELUDOM
