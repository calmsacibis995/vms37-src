MODULE GETNUO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Get a number and convert it to binary
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BIGNUM.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:DIGIT.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:KC.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FLGT : FLAG_TABLE [FLAG_COUNT],
    KHAR;

EXTERNAL LITERAL 				!Error messages
    RNFMFN;

EXTERNAL ROUTINE
    ERMA,
    RSKIPS;


GLOBAL ROUTINE GETNUM (INPUT_STRING, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Beginning with KHAR, GETNUM skips spaces and tabs until it
! finds something that is neither.  From that point on, it processes
! characters until it encounters that cannot be part of a number;
! a leading sign will be accepted.
!	If GETNUM encounters a number that is incorrect (e.g., too long)
! it returns FALSE; otherwise it returns the value TRUE.
!	NUMBER_VALUE will contain the binary equivalent of the
! original input.  'Number_sign' will contain the value 1 if a +
! sign was encountered, -1 if a minus sign was encountered, and 0 if
! no sign was encountered.  'Number_length' will contain the number
! of digits that were processed.  If 'number_length' is zero upon
! return, this means that no number was found.  In such a case, all
! other parameters will have the value zero too.
!
! FORMAL PARAMETERS:
!
!	See FUNCTIONAL DESCRIPTION, above.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if a valid number was found, else FALSE.
!
! SIDE EFFECTS:
!
!	Issues an error message in the case of an invalid number.
!
!--

    BEGIN

    BIND
	IRA =
INPUT_STRING : REF FIXED_STRING,
	NV = .NUMBER_VALUE,
	NS = .NUMBER_SIGN,
	NL = .NUMBER_LENGTH;

    LOCAL
	LEADING_ZEROES,				!TRUE if leading zeroes were found, else FALSE
	SIGN_CONVERT;				!Either +1 or -1; used in multiplying to get the right sign.

    NL = 0;
    NV = 0;
    NS = 0;
    RSKIPS (.INPUT_STRING);			!Ignore leading spaces and tabs.
    !Check for a possible sign

    IF 						!
	.KHAR EQL %C'+'				!
	OR .KHAR EQL %C'-'
    THEN
	BEGIN
	NS = (IF .KHAR EQL %C'+' THEN 1 ELSE -1);
	KCNS ();
	END;

    LEADING_ZEROES = .KHAR EQL %C'0';

    WHILE .KHAR EQL %C'0' DO
	KCNS ();					!Skip leading zeroes.

    IF 						!
	NOT DIGIT (.KHAR)			!Detect special cases.
    THEN

	IF 					!
	    .NS NEQ 0				!Sign alone, or + or - zero
	THEN
	    BEGIN
	    ERMA (RNFMFN, FALSE);
	    RETURN FALSE;
	    END
	ELSE
	    BEGIN
	    ! Set NUMBER_LENGTH to 1 (arbitrarily) for any
	    ! string of zeroes only

	    IF 					!
		.LEADING_ZEROES
	    THEN
		NL = 1;

	    RETURN TRUE;
	    END;

    SIGN_CONVERT = (IF .NS GEQ 0 THEN 1 ELSE -1);

    WHILE DIGIT (.KHAR) DO
	BEGIN

	LOCAL
	    CONVERTED_DIGIT;

	IF 					!
	    .NL EQL MOST_DIGITS_9
	THEN
	    BEGIN

	    WHILE DIGIT (.KHAR) DO
		KCNS ();				!skip overflow

	    ERMA (RNFMFN, FALSE);
	    RETURN FALSE;
	    END;

	CONVERTED_DIGIT = .KHAR - %C'0';	!Convert character to binary
	NV = .NV*10 + .CONVERTED_DIGIT*.SIGN_CONVERT;
	NL = .NL + 1;
	KCNS ();					!Get next character
	END;

    RETURN TRUE
    END;					!End of GETNUM

END						!End of module

ELUDOM
