MODULE SUBSTO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the <SUBSTITUTE flag>
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GSLUCC.REQ';

REQUIRE 'REQ:KC.REQ';
!
! MACROS:
!
MACRO
    NAME_ENTRY(X) =
	CH$PTR( (UPLIT ( %STRING( %CHAR(%CHARCOUNT(X)), X) ) )) %;
!
! EQUATED SYMBOLS:
!
LITERAL
    FIRST_INDEX = 1,			!Don't change this!!!!
    SUBST_DATE = 1,				
    SUBST_TIME = 2,
    SUBST_YEAR = 3,
    SUBST_MONTH = 4,
    SUBST_DAY = 5,
    SUBST_HOURS = 6,
    SUBST_MINUTES = 7,
    SUBST_SECONDS = 8,
    LAST_INDEX = 8;			!Keep updated for additional symbols!!!!
!
! OWN STORAGE:
!
BIND
    SUBST_NAMES = PLIT (NAME_ENTRY('DATE'),
			NAME_ENTRY('TIME'),
			NAME_ENTRY('YEAR'),
			NAME_ENTRY('MONTH'),
			NAME_ENTRY('DAY'),
			NAME_ENTRY('HOURS'),
			NAME_ENTRY('MINUTES'),
			NAME_ENTRY('SECONDS')
					  	) : VECTOR;
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    DATTIM : VECTOR,				!Date and time pieces.
    IRA : FIXED_STRING,
    KHAR;

EXTERNAL LITERAL				!Error messages
    RNFFNA,
    RNFUDS;

EXTERNAL ROUTINE
    CNVDAT,
    CNVTIM,
    ENDCHR,
    ERMS,
    GSLU,
    PACBAS;

GLOBAL ROUTINE SUBST : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	KHAR must be the current <SUBSTITUTE flag>, the first of
!	the (presumed) pair.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	DUMMY_FS : FIXED_STRING[50],
	GSLU_RESULT,
	WORK_AREA : VECTOR [CH$ALLOCATION(50)],
	WORK_PTR,
	WORK_LENGTH,
	HOLD_FLAG,
        SUBST_INDEX;

    HOLD_FLAG=.KHAR;				!Remember current <SUBSTITUTE flag>

    KCNS ();					!Get next character.

    !Make sure user has specified doubled <SUBSTITUTE flag>s.
    !(Single <SUBSTITUTE flag>s are for extensions, i.e., macro facility).
    IF						!
	.KHAR NEQ .HOLD_FLAG			!Check for error case first.
    THEN					!
	!Not doubled  <SUBSTITUTE flag>s
	BEGIN
	ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
	RETURN;
	END;

    !Position to character immediately after the second <SUBSTITUTE flag>
    KCNS ();

    !Fudge up DUMMY_FS to look like a FIXED_STRING;
    FS_MAXSIZE (DUMMY_FS) = 50;
    FS_INIT (DUMMY_FS);

    !Attempt to pick up the word DATE or TIME.
    GSLU_RESULT = GSLU (IRA, DUMMY_FS);

    !Make sure something was found.
    IF						!
	.GSLU_RESULT NEQ GSLU_NORMAL
    THEN					!
	!Something's wrong.
	BEGIN
	ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
	RETURN;
	END;

    !Attempt to identify the word.  The result of this block is either a RETURN
    !if the word was not identified, or an indicator as to which routine to call to
    !translate the string into something displayable.
    BEGIN
    LOCAL
	PTR;

    !Assume the word won't be identified.
    SUBST_INDEX = 0;

    INCR I FROM 0 TO (.SUBST_NAMES[-1]-1) DO
	BEGIN
	IF					!
	    CH$EQL (.FS_LENGTH(DUMMY_FS),
		    .FS_START(DUMMY_FS),
		    CH$RCHAR(.SUBST_NAMES[.I]),
		    CH$PLUS(.SUBST_NAMES[.I],1) )
       THEN					!
	    !Keyword identified!!!!
	    BEGIN
	    !Remember which word it was.
	    SUBST_INDEX = .I + 1;
	    EXITLOOP
	    END
	END;

    !See if the keyword was found.
    IF						!
	.SUBST_INDEX EQL 0
    THEN					!
	!Word was not identified
	BEGIN
	ERMS  (RNFUDS, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
	RETURN
	END;
    END;					!End of identification of word.

    !Now get the character string that the user has requested.
    !The result of this CASE statement is that WORK_AREA will contain the text, and
    !WORK_LENGTH will be the number of characters.
    WORK_PTR = CH$PTR(WORK_AREA);
    CASE .SUBST_INDEX FROM FIRST_INDEX TO LAST_INDEX OF
    SET
	[SUBST_DATE]:
		BEGIN
		CNVDAT(DATTIM, WORK_PTR, WORK_LENGTH);
		WORK_PTR = CH$PTR(WORK_AREA)
		END;

	[SUBST_TIME]:
		BEGIN
		CNVTIM(DATTIM, WORK_PTR, WORK_LENGTH);
		WORK_PTR = CH$PTR(WORK_AREA)
		END;

	[SUBST_YEAR]:
		BEGIN
		WORK_LENGTH = PACBAS (.DATTIM [0], WORK_PTR, 10);
		WORK_PTR = CH$PTR(WORK_AREA);
		END;

	[SUBST_MONTH]:
		BEGIN
		BIND
		    MONTHS = UPLIT (
					CH$PTR(UPLIT(%STRING('January'))),
					CH$PTR(UPLIT(%STRING('February'))),
					CH$PTR(UPLIT(%STRING('March'))),
					CH$PTR(UPLIT(%STRING('April'))),
					CH$PTR(UPLIT(%STRING('May'))),
					CH$PTR(UPLIT(%STRING('June'))),
					CH$PTR(UPLIT(%STRING('July'))),
					CH$PTR(UPLIT(%STRING('August'))),
					CH$PTR(UPLIT(%STRING('September'))),
					CH$PTR(UPLIT(%STRING('October'))),
					CH$PTR(UPLIT(%STRING('November'))),
					CH$PTR(UPLIT(%STRING('December')))
					) : VECTOR;
		OWN
		    MONTHL : VECTOR [12] INITIAL (
					7, 8, 5, 5, 3, 4, 4, 6, 9, 7, 8, 8
					);
		WORK_PTR = .MONTHS [.DATTIM[1] - 1];
		WORK_LENGTH = .MONTHL [.DATTIM[1] - 1];
		END;

	[SUBST_DAY]:
		BEGIN
		WORK_LENGTH = PACBAS (.DATTIM [2], WORK_PTR, 10);
		WORK_PTR = CH$PTR(WORK_AREA);
		END;

	[SUBST_HOURS]:
		BEGIN
		!Assume result will be less than two digits, and prepad with a '0'.
		CH$WCHAR(%C'0', CH$PTR(WORK_AREA));
		WORK_PTR = CH$PLUS(.WORK_PTR,1);
		WORK_LENGTH = PACBAS (.DATTIM [3], WORK_PTR, 10);
		WORK_PTR = CH$PTR(WORK_AREA);
		!If the result was at least two digits, forget the leading zero.
		IF
		    .WORK_LENGTH EQL 1
		THEN
		    WORK_LENGTH = .WORK_LENGTH + 1
		ELSE
		    WORK_PTR = CH$PLUS(.WORK_PTR, 1);
		END;

	[SUBST_MINUTES]:
		BEGIN
		!Assume result will be less than two digits, and prepad with a '0'.
		CH$WCHAR(%C'0', CH$PTR(WORK_AREA));
		WORK_PTR = CH$PLUS(.WORK_PTR,1);
		WORK_LENGTH = PACBAS (.DATTIM [4], WORK_PTR, 10);
		WORK_PTR = CH$PTR(WORK_AREA);
		!If the result was at least two digits, forget the leading zero.
		IF
		    .WORK_LENGTH EQL 1
		THEN
		    WORK_LENGTH = .WORK_LENGTH + 1
		ELSE
		    WORK_PTR = CH$PLUS(.WORK_PTR, 1);
		END;

	[SUBST_SECONDS]:
		BEGIN
		!Assume result will be less than two digits, and prepad with a '0'.
		CH$WCHAR(%C'0', CH$PTR(WORK_AREA));
		WORK_PTR = CH$PLUS(.WORK_PTR,1);
		WORK_LENGTH = PACBAS (.DATTIM [5], WORK_PTR, 10);
		WORK_PTR = CH$PTR(WORK_AREA);
		!If the result was at least two digits, forget the leading zero.
		IF
		    .WORK_LENGTH EQL 1
		THEN
		    WORK_LENGTH = .WORK_LENGTH + 1
		ELSE
		    WORK_PTR = CH$PLUS(.WORK_PTR, 1);
		END;
    TES;

    !Now feed these characters into the document.
    INCR I FROM 1 TO .WORK_LENGTH DO
	ENDCHR ( CH$RCHAR_A (WORK_PTR) );

    !That's all there is, so just return.
    RETURN;
    END;					!End of SUBST

END						!End of module

ELUDOM
