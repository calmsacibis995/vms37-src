%TITLE 'Final data translation for output'
MODULE LOUTOO (					!
		IDENT = '013'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!			  COPYRIGHT (c) 1981 BY
!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Translation from intermediate format to final output.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!
! MODIFIED BY:
!
!	013	REM00013	Ray Marshall	27-January-1982
!		Fixed bug where a justification escape sequence at the end of
!		  MRA text caused crash with register dump because, in LOUT1,
!		  PADDING was never initialized and had bad values in it.
!
!	012	REM00012	Ray Marshall	1-January-1982
!		Many cosmetic changes including the addition of SBTTLs.
!
!	011	RWF00011	Rich Friday	20-November-1981
!		Added footnote control table (FNCT.REQ) to list of required
!		  files.
!		Added routine ASCFTN to link footnotes that are associated with
!		  the current line to the current page.  They may be output at
!		  any point after this link is made.
!
!	010	REM00010	Ray Marshall	23-September-1981
!		Added all of the revision history below.  Note that LOUT was
!		  created in the step library at IDENT = 009 and there were no
!		  increments till now!
!		Commented require file commands.
!
!	009	REM00009	Ray Marshall	25-August-1981
!		Updated Copyright and changed heading for history.  No
!		  history inserted at this time.
!
!	009	KAD00008	Keith Dawson	21-October-1980
!		Modified REQUIRE's to point to REQ: logical for the files.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    JUSTF : NOVALUE,
    LOUT : NOVALUE,
    LOUT1 : NOVALUE,
    FIND_NEXT_DOT : NOVALUE,
    ASCFTN : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'REQ:RNODEF.REQ';	!  Define /VARIANT macros

REQUIRE 'REQ:BOOL.REQ';		!  Defines TRUE & FALSE literals (only!)

REQUIRE 'REQ:BPOSIT.REQ';	!  Macro to return the bit position part of a field definition.

REQUIRE 'REQ:CLHOPS.REQ';	!  Literal definitions of CLH operations

REQUIRE 'REQ:FNCT.REQ';		!  Footnote control table

REQUIRE 'REQ:FSPACK.REQ';	!  FIXED_STRING structure & FS_... macros

REQUIRE 'REQ:GCA.REQ';		!  GCA (General Control Array) definitions

REQUIRE 'REQ:HCT.REQ';		!  Heading Control Table & layout definitions

REQUIRE 'REQ:LSTBTS.REQ';	!  Definitions of: BAR__, CND__, ISQ__, & RIT__

REQUIRE 'REQ:LSTOPS.REQ';	!  Literal definitions of LSTOPS operations

REQUIRE 'REQ:NBITS.REQ';	!  More "__" bit macro definitions (???)

REQUIRE 'REQ:OUTOPT.REQ';	!  Define output control vector elements

REQUIRE 'REQ:PAGEN.REQ';	!  Page-number-control macros and literals

REQUIRE 'REQ:PHDEF.REQ';	!  Page handler control vector definition

REQUIRE 'REQ:TSF.REQ';		!  TSF_ (Text so far) macro definitions

!
! MACROS:
!

MACRO
    REPEAT =
	WHILE 1 DO %;

MACRO
    EXCHANGE (A, B) =
	BEGIN
	LOCAL H;
	H = .(A); A = .(B); B = .H;
	END %;

MACRO
    SAVE_XTN (PAGE_REF, XTN) =
	BEGIN
%IF	NOT FILE_INDEX
%THEN
	IF!
	    NOT .GCA_BIX
	THEN
	    ASGXTN (PAGE_REF, XTN);
%FI
	IF!
	    .GCA_BIX
	THEN
	    PUTXTN (PAGE_REF, XTN);
	END	%;

!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

LITERAL
    BACKSPACE = %O'10';

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FNCT : FNCT_DEFINITION,
    FRA : FIXED_STRING,
    GCA : GCA_DEFINITION,
    HCT : HCT_DEFINITION,
    MRA : REF FIXED_STRING,
    TSF : TSF_DEFINITION,
    FS01 : FIXED_STRING,
    NPAGEN : PAGE_DEFINITION,
    OUTOPT : VECTOR [OUTOPT_SIZE],
    PAGEN : PAGE_DEFINITION,
    PHAN : PHAN_DEFINITION;

EXTERNAL LITERAL 				! Error messages
    RNFILE;

EXTERNAL ROUTINE
%IF NOT FILE_INDEX
%THEN
    ASGXTN,
%FI
    CLH,
    CSKIPL,
    ERMS,
    FBWAIT,
    LSTOPS,
    NEWPAG,
    PUTXTN,
    TPFEQL,
    TPR,
    UFORM,
    USKIPL;

%SBTTL 'LOUT -- '
GLOBAL ROUTINE LOUT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LOUT accepts as input a line of text as encoded by SCANT and described
!	by the TSF data structure.  If GCA_SKIP_OUT is true, the line is
!	ignored; otherwise LOUT generates the necessary device control
!	sequences that cause the line to be printed correctly and leaves its
!	output in the FRA to be output by WRTFIL.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	PHAN_FIGURE	-
!	PHAN_TOP_PAGE	-
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BRANCH,
	PTR_COPY,
	TSF_PHREGS : REF VECTOR [TSF_NREGS];

    !			Nothing to output??
    ! TSF_INT_?L NEQ 0	means either paper control codes and/or some text to
    !			be output.
    ! TSF_FIRST_XTN NEQ 0  means that there is an index entry referring to
    ! 			something on the current page;  it is possible for just
    ! 			this item to be set.  That can happen if, for example,
    ! 			the very first command in the file is a .INDEX command,
    ! 			and a .SKIP command follows that.

    IF 					! If all of the following:
	(.TSF_INT_HL EQL 0)		!	Text to do?
	AND (.TSF_INT_VL EQL 0)		!	Vertical positioning?
	AND (.TSF_FIRST_XTN EQL 0)	!	Indexing to do?
	AND (.TSF_FOOTW EQL 0)		!	Footnotes attached to this line?
    THEN
					! THEN do absolutely nothing!
	RETURN;

    TSF_PHREGS = TSF__PHREGS;
    PTR_COPY = .FS_START (MRA);

    INCR K FROM 1 TO .TSF_INT_VL DO	! Process vertical movement
	BEGIN

	LOCAL
	    HOLD_KHAR;

	HOLD_KHAR = CH$RCHAR_A (PTR_COPY);

	! All vertical motion code starts with RINTES.  Otherwise it shouldn't
	! be there and is an error (see the ELSE branch, below).
	IF 					!
	    .HOLD_KHAR EQL RINTES
	THEN
	    BEGIN

	    LOCAL
		OP_CODE,
		OPERAND;

	    ! The character after RINTES indicates what type of vertical motion
	    ! is to be done, and gets saved as OP_CODE.  The character after
	    ! that is either a dummy or is a parameter; it gets saved as
	    ! OPERAND.
	    OP_CODE = CH$RCHAR_A (PTR_COPY);
	    OPERAND = CH$RCHAR_A (PTR_COPY);
	    K = .K + 2;

	    ! Process the particular type of vertical motion
	    SELECTONE .OP_CODE OF
		SET

		[%C'p'] :
		    PHAN_TOP_PAGE = TRUE;	! Start a new page

		[%C's'] :
		    CSKIPL (.TSF_PHREGS [.OPERAND]);	! skip lines if not top
							! of page
		[%C'u'] :
		    BEGIN    ! skip lines regardless of page position

		    IF 				!
			.PHAN_TOP_PAGE		!
			AND NOT .FNCT_EXPANDING
		    THEN
			NEWPAG ();

		    USKIPL (.TSF_PHREGS [.OPERAND]);
		    END;

		[%C'd'] :
		    ! Defer blank lines until top of page
		    PHAN_FIGURE = .PHAN_FIGURE + .TSF_PHREGS [.OPERAND];

		[%C'g'] :
		    ! Go to a specific line immediately.
		    ! Start a new page if necessary.
		    ! NOTE: You can only go to a line within the text area of
		    !	    the page.  So a negative line number is interpreted
		    !	    as that many lines above the footer area (but not
		    !	    above footnotes).
		    BEGIN

		    LOCAL
			X,	! TRUE, if not already past that position.
			Y;	! Skip this many lines to position.

		    IF 		!
			(.TSF_PHREGS [.OPERAND] LSS 0)
		    THEN	! Count from bottom.
			X = TPR (ABS (.TSF_PHREGS[.OPERAND]) )
		    ELSE	! Absolute line number.
			X = (.TSF_PHREGS [.OPERAND]) GEQ .PHAN_LINES_TP;

		    IF 			!
			NOT .X
		    THEN
			NEWPAG ();	! Already too far.  Start a new page.

		    IF 			!
			(.TSF_PHREGS [.OPERAND] LSS 0)
		    THEN
			Y = .PHAN_LLINES - .HCT_LAYOUTN - .PHAN_LINES_TP + .TSF_PHREGS [.OPERAND]
		    ELSE
			Y = .TSF_PHREGS [.OPERAND] - .PHAN_LINES_TP;
			
		    ! If already at that position do nothing.  However, if not
		    ! at that position, get there.  Note the following special
		    ! case:  if we're at the top of a page then we have to get
		    ! past the top of the page for the counting to work
		    ! correctly.
		    IF				!
			.Y NEQ 0
		    THEN
			BEGIN
			USKIPL (1);	! Force a blank line to get past the
					! top of the page, if that's the case.

			! Now recompute position all over again, since
			! we may have just gotten past the top of a page.
			IF			!
			    (.TSF_PHREGS [.OPERAND] LSS 0)
			THEN
			    Y = .PHAN_LLINES - .PHAN_LINES_TP - .HCT_LAYOUTN + .TSF_PHREGS [.OPERAND]
			ELSE
			    Y = .TSF_PHREGS [.OPERAND] - .PHAN_LINES_TP;

			! Now do the remainder of the positioning to the
			! proper spot.
			USKIPL (.Y)
			END
		    END;

		[%C'.'] :
		    BEGIN

		    IF 				!
			.BRANCH
		    THEN
		    ! Skip until next '.' is found.
			FIND_NEXT_DOT (K, PTR_COPY, HOLD_KHAR);

		    BRANCH = NOT .BRANCH
		    END;

		[%C't'] :
		    ! Test page
		    BEGIN

		    IF 				!
			TPR (.TSF_PHREGS [.OPERAND])
		    THEN
		    ! Take the 'THEN' branch
			BRANCH = TRUE
		    ELSE
		    ! Skip the 'THEN' branch.
			BEGIN
			FIND_NEXT_DOT (K, PTR_COPY, HOLD_KHAR);
			BRANCH = FALSE;
			END

		    END;

		[OTHERWISE] :
		    ! Unrecognized sequence!!
		    ! Issue error message and carry on.
		    BEGIN
		    ERMS (RNFILE, CH$PTR (UPLIT ('LOUT')), 4);
		    END;
		TES;

	    END
	ELSE
	! Not an escape sequence.
	! Issue an error message and ignore the character.
	    BEGIN
	    ERMS (RNFILE, CH$PTR (UPLIT ('LOUT')), 4);
	    END;

	END;

    ! Paper-motion codes have been taken care of.
!
    ! The index entry is associated with the current page number.  However,
    ! what the current page number is depends on whether or not there is some
    ! text on the page.  According to "strict" usage of indexing, indexing
    ! commands should go immediately after the line to which they apply.
    ! However, it can be expected that users will do the natural thing,
    ! i.e., put the indexing commands before the text to which they apply.
    ! This leads to the situation where the (other) indexing routines have no
    ! text with which to associate the index entry; for example, this is
    ! obviously true at the top of the very first page, or the top of any page
    ! for that matter.
    IF!
	.TSF_INT_HL NEQ 0
    THEN
	! There is some text on the page.
	BEGIN
	LOUT1(.PTR_COPY);			! Output text.
	IF					!
	    .TSF_LAST_XTN NEQ  0
	THEN
	    SAVE_XTN (PAGEN, .TSF_LAST_XTN);	! Associate current page number
	END					! with transaction number.
    ELSE
	BEGIN

	! Promote index entries attached to this line, if any.
	IF!
	    .TSF_LAST_XTN NEQ 0
	THEN
	    BEGIN
	    IF!
		.PHAN_TOP_PAGE
		AND NOT .PHAN_TOP_FIRST
	    THEN
		SAVE_XTN(NPAGEN, .TSF_LAST_XTN)
	    ELSE
		SAVE_XTN (PAGEN, .TSF_LAST_XTN);
	    END
	END;

    ! Clear transaction numbers in the TSF.  This is done so that for things
    ! such as titles, that reoccur, no attempt is made to "redefine" the page
    ! number associated with the transaction number.
    TSF_FIRST_XTN = 0;
    TSF_LAST_XTN = 0;

    ! If there were any footnotes associated with this line, associate them
    ! with this page.
    ASCFTN ();
    END;					! End of LOUT

%SBTTL 'LOUT1 -- Process remaining normal text in line.'
ROUTINE LOUT1 (PTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Process the remaining normal text in the line.
!
! FORMAL PARAMETERS:
!
!	PTR - Character reader in input line.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	P_LINES,		! Number of physical lines represented.
	PADDING : VECTOR [75],	! Justification spacing built up here.
	PI;			! Index into padding.

    LOCAL
	BOLD_LIMIT,		! Location of last character to be bolded.
	OVER_LIMIT,		! Location of last overstruck character.
	UNDER_LIMIT,		! Location of last character to be underlined.
	PASS_LIMIT,		! Limit of scan for current pass
	LAST_PASS,		! The number of the last pass for this line.
	PASS_CNTR,		! pass 1 - print line, pass 2 - bold
				! passes 3 and 4 - overstrike,
				! passes 5 and 6 - underline
	PTR_COPY;		! temporary string pointer

    PASS_CNTR = 1;

    BOLD_LIMIT = 0;
    OVER_LIMIT = 0;
    UNDER_LIMIT = 0;

    INCR I FROM 1 TO 74 DO  PADDING [.I] = 1;

    ! Compute number of physical lines that this record represents.
    P_LINES = 1;

    IF 				!
	.TSF_UND		!
	AND .OUTOPT_UND_SEP
    THEN
	P_LINES = 2;		! Underline with dashes on next line.

    ! This 'turns a page' if necessary.

    IF 				!
	NOT .FNCT_EXPANDING
    THEN
	BEGIN

	IF 			!
	    NOT TPR (.P_LINES)
	THEN
	    PHAN_TOP_PAGE = .PHAN_PAGING OR .PHAN_TOP_PAGE;

	! If we are positioned at precisely the position where it would be ok
	! to output one or more footnotes, terminate a new page.
	IF 	    	    	!
	    (TPFEQL() NEQ 0)
	THEN
	    BEGIN
	    PHAN_TOP_PAGE = .PHAN_PAGING OR .PHAN_TOP_PAGE;
	    END;

	END;

    ! If necessary, put heading on page before writing text.
    IF 						!
	.PHAN_TOP_PAGE				!
	AND NOT .FNCT_EXPANDING
    THEN
	NEWPAG ();

    ! Compute spacing for justification.
    IF 						! If justification required,
	.TSF_JUS_CNT NEQ 0			!   setup PADDING accordingly.
    THEN
	JUSTF (PADDING, .TSF_JUS_CNT,
			(IF .TSF_JUSTIFY THEN .TSF_PADDING ELSE 0),
			.TSF_JUST_ALG);

    ! Take care of possible pending formfeed.
    IF 						!
	.PHAN_FORM_PEND NEQ 0
    THEN
	IF 					!
	    .PHAN_SIMULATE
	THEN
	    UFORM ()				!/SIMULATE
	ELSE
	    IF 					!
		.PHAN_PAUSE
	    THEN
		FBWAIT ()
	    ELSE
		FS_WCHAR (FRA, .PHAN_FORM_PEND);

    PHAN_FORM_PEND = 0;

    ! If skipping output because the user used the /PAGES switch, just count
    ! the lines but don't do any output.
    IF 						!
	.GCA_SKIP_OUT
    THEN
	BEGIN
	PHAN_LINES_TP = .PHAN_LINES_TP + .P_LINES;
	RETURN;
	END;

    ! Generation of what TSF/MRA represent happens in the code below this point.

	! Output listing options.
	LSTOPS(LSTOPS_ALL, FALSE);

    ! Take care of actual line printing, including bold, overstriking,
    ! and underlining.  This, if not done using backspace, requires several
    ! passes over the line to generate separate lines which can then
    ! be used to overstrike each other.
    REPEAT
    BEGIN

    LOCAL
	BOLD_CHAR,
	HOLD_KHAR,
	HOLD_OPERAND1,
	HOLD_SEQ_START,		! A CH$PTR to the start of a character sequence.
	OP_CODE,
	OPERAND1,
	CHAR_OVERSTRIKE,
	OSTRIKE_COUNT,		! The number of overstriking characters.
	OVERSTRIKE_SEQ,		! A CH$PTR to the start of an overstrike sequence.
	UNDERLINE_CHAR;

    HOLD_OPERAND1 = 0;
    OPERAND1 = 0;
    BOLD_CHAR = FALSE;
    CHAR_OVERSTRIKE = 0;
    OSTRIKE_COUNT = 0;
    UNDERLINE_CHAR = FALSE;
    PTR_COPY = .PTR;
    PI = 0;

    ! For all passes except first, output spaces instead of the change bars.

    IF 						!
	.PASS_CNTR NEQ 1
    THEN
	BEGIN
	! Space over the listing option columns.
	LSTOPS(LSTOPS_NONE, FALSE);
	END;

    ! Shift text according to amount computed by .CENTER, etc commands.

    INCR I FROM 1 TO .TSF_ADJUST DO
	FS_WCHAR (FRA, %C' ');

    ! Get limit of scan for this pass.
    PASS_LIMIT = (CASE .PASS_CNTR FROM 1 TO 6 OF
	SET
	[1] : .TSF_INT_HL;		! First pass sets up others
	[2] : .BOLD_LIMIT;		! Last character for bolding
	[3, 4] : .OVER_LIMIT;		! Last overstriking character
	[5, 6] : .UNDER_LIMIT;		! Last character for underlining
	TES);

    INCR K FROM 1 TO .PASS_LIMIT DO
	BEGIN
	HOLD_SEQ_START = .PTR_COPY;	! Remember start of this sequence.
	HOLD_KHAR = CH$RCHAR_A (PTR_COPY);

	IF 				!
	    .HOLD_KHAR EQL RINTES
	THEN
	    BEGIN
	    OP_CODE = CH$RCHAR_A (PTR_COPY);
	    HOLD_OPERAND1 = CH$RCHAR_A (PTR_COPY);
	    K = .K + 2;

	    SELECT .OP_CODE OF
		SET

		[%C'B'] :
		    (IF 			!
			.TSF_BLD		!
		    THEN
		    ! Remember bolding information if bolding wanted.
			BEGIN
			BOLD_CHAR = TRUE;
			OPERAND1 = .HOLD_OPERAND1;
			END
		    );

		[%C'U'] :
		    (IF 			!
			.TSF_UND		!
		    THEN
		    ! Remember underlining information if underlining wanted.
			BEGIN
			UNDERLINE_CHAR = TRUE;
			OPERAND1 = .HOLD_OPERAND1;
			END
		    );

		[%C'N'] :
		    ! A No-operation
		    BEGIN
		    0				! Avoid compiler message
		    END;

		[%C'I'] :
		    ! Insert this character.
		    BEGIN
		    FS_WCHAR (FRA, .HOLD_OPERAND1);
		    END;

		[%C'J'] :
		    ! Justification mark
		    BEGIN
		    ! Insert appropriate amount of spacing here.

		    INCR I FROM 1 TO .PADDING [.PI] DO
			FS_WCHAR (FRA, %C' ');

		    OPERAND1 = 0;
		    PI = .PI + 1;	! Sychronize insert count with word
		    END;		! count.

		[%C'O'] :
		    (IF 		!
			.TSF_OVR	!
		    THEN
		    ! If overstriking is wanted remember this information.
			BEGIN
			! Remember overstrike character
			CHAR_OVERSTRIKE = .HOLD_OPERAND1;
			OPERAND1 = .HOLD_OPERAND1;

			IF 			!
			    .OSTRIKE_COUNT EQL 0
			THEN 			!
			! Remember start of overstrike sequence.
			    OVERSTRIKE_SEQ = .HOLD_SEQ_START;

			OSTRIKE_COUNT = .OSTRIKE_COUNT + 1;
			END
		    );

		[OTHERWISE] :
		    BEGIN
		    ! Some illegal character following RINTES.  Tell the user
		    ! it's an internal logic error and then carry on.
		    ERMS (RNFILE, CH$PTR (UPLIT ('LOUT1')), 5);
		    END;
		TES;

	    END
	ELSE 			! Are positioned at the "naked" character.
	    BEGIN
	    ! Is this a special character?

	    IF 			!
		.OPERAND1 NEQ 0
	    THEN
	    ! Process special character according to which pass
		BEGIN

		IF 		!
		    .PASS_CNTR EQL 1
		THEN
		! Save location of special character for later passes
		    BEGIN

		    IF 		!
			.BOLD_CHAR
		    THEN
			BOLD_LIMIT = .K;

		    IF 		!
			.CHAR_OVERSTRIKE NEQ 0
		    THEN
			OVER_LIMIT = .K;

		    IF 		!
			.UNDERLINE_CHAR
		    THEN
			UNDER_LIMIT = .K;

		    END;

		IF 		!
		    .OUTOPT_BACK
		THEN
		! backspace mode
		    BEGIN

		    LOCAL
			COUNT;

		    ! Before processing the character make sure that there will
		    ! be sufficient space in the output buffer.
		    IF
			.FS_LENGTH (FRA) GTR (.FS_MAXSIZE (FRA) - 100)	! Must be at least 100 characters free
		    THEN
			! Not at least 100 characters free
			BEGIN			! Output what's been built up
			CLH (CLH_OUT_NOCRLF);	! so far and start filling a
			FS_INIT (FRA)		! new buffer
			END;

		    IF 				!
			.BOLD_CHAR
		    THEN
			! Protective code against /BOLD:<ridiculous amount> and
			COUNT = MIN (50,.OUTOPT_BLDN + 1) ! stops buffer overflow.
							
		    ELSE
			COUNT = 1;

		    ! Repeatedly process the character as many times as it is
		    ! to output. In most cases, this is once.  But if the
		    ! character is bolded it will be scanned several times.
		    INCR I FROM 1 TO .COUNT DO
			BEGIN
			! If bolding, output a backspace before each re-scan
			! of the character.
			IF 			!
			    .I GTR 1
			THEN
			    FS_WCHAR (FRA, BACKSPACE);

			! Look for underlining
			IF 			!
			    .UNDERLINE_CHAR
			THEN
			    BEGIN
			    FS_WCHAR (FRA, .OUTOPT_UND_CHAR);

			    ! Don't backspace if underscore is non-spacing
			    IF 			!
				NOT .OUTOPT_UND_NOSP
			    THEN
				FS_WCHAR (FRA, BACKSPACE)

			    END;

			! Output the deferred character
			FS_WCHAR (FRA, .HOLD_KHAR);

			! look for overstrike
			IF 			!
			    .CHAR_OVERSTRIKE NEQ 0
			THEN
			    BEGIN

			    LOCAL
				TEMP_SEQ_PTR;

			    TEMP_SEQ_PTR = .OVERSTRIKE_SEQ;

			    INCR I FROM 1 TO .OSTRIKE_COUNT DO
				BEGIN
				! Rescan overstrike sequence to take care of
				! multiple overstriking.

				LOCAL
				    X;

				X = CH$RCHAR_A (TEMP_SEQ_PTR);	! Point to the 'O';
				X = CH$RCHAR_A (TEMP_SEQ_PTR);	! Point to the overstriking character.
				X = CH$RCHAR_A (TEMP_SEQ_PTR);	! Get character and advance to next.
				FS_WCHAR (FRA, BACKSPACE);
				FS_WCHAR (FRA, .X);
				END;

			    END

			END

		    END
		ELSE
		! Line overprinting mode
		    BEGIN

		    IF 				!
			.PASS_CNTR EQL 1	!
			OR .PASS_CNTR EQL 2
		    THEN
			BEGIN
			! Generate non-spacing underscore if requested

			IF 			!
			    .UNDERLINE_CHAR	!
			    AND .OUTOPT_UND_NOSP	!
			    AND NOT .OUTOPT_UND_SEP
			THEN
			    IF				!
				(.PASS_CNTR EQL 1)
				OR .BOLD_CHAR
			    THEN
				FS_WCHAR (FRA, .OUTOPT_UND_CHAR);

			! Generate character
			IF
			    .PASS_CNTR EQL 1	!
			    OR .BOLD_CHAR
			THEN
			    FS_WCHAR (FRA, .HOLD_KHAR)
			ELSE
			    FS_WCHAR (FRA, %C' ')
			END
		    ELSE

			IF 			!
			    .PASS_CNTR EQL 3	!
			    OR .PASS_CNTR EQL 4
			THEN
			! process overstriking
			! Note the following:  At this point it is only known
			! that this character is a special character, and that
			! overstriking is being processed.  It has not yet been
			! determined whether or not this character is to be
			! overstruck.  Just putting out CHAR_OVERSTRIKE will
			! result in NULLs being output if this character is not
			! to be overstruck, but is none-the-less a special
			! character.  Using MAX makes sure that NULL never gets
			! output.  This makes an implicit restriction,
			! i.e., that the user will never try to overstrike with
			! a character LSS %C' ';  if this restriction turns
			! out to hurt lots of people, MAX can be replaced
			! with a simple test to see if CHAR_OVERSTRIKE
			! is NULL or not.
			    IF
				(.PASS_CNTR EQL 3)
				OR .BOLD_CHAR
			    THEN
			 	FS_WCHAR (FRA, MAX(%C' ', .CHAR_OVERSTRIKE))
			    ELSE
				FS_WCHAR (FRA, %C' ')
			ELSE

			    IF 			!
				.PASS_CNTR GEQ 5
			    THEN
				! Process underlining.
				IF		!
				    .UNDERLINE_CHAR
				THEN
				    IF			!
					(.PASS_CNTR EQL 5)
					OR .BOLD_CHAR
				    THEN
					FS_WCHAR (FRA, .OUTOPT_UND_CHAR)
				    ELSE
					FS_WCHAR (FRA, %C' ')
				ELSE
				    FS_WCHAR (FRA, %C' ')

		    END;

		OPERAND1 = 0;
		HOLD_OPERAND1 = 0;
		BOLD_CHAR = FALSE;
		CHAR_OVERSTRIKE = 0;
		OSTRIKE_COUNT = 0;
		UNDERLINE_CHAR = FALSE
		END
	    ELSE
	    ! It's a normal character to be output
	    ! output it only if pass 1 otherwise use ' ' place holder.

		IF 				!
		    .PASS_CNTR EQL 1
		THEN
		    FS_WCHAR (FRA, .HOLD_KHAR)
		ELSE
		    FS_WCHAR (FRA, %C' ')

	    END

	END;

    ! In /BACKSPACE mode everything is done in one pass.
    ! That means no further passes are needed.
    IF
	.OUTOPT_BACK
    THEN
	! Yup, user said /BACKSPACE.  Finish up.
	! Note that the CRLF is added and the line output below.
	EXITLOOP;

    ! User didn't say /BACKSPACE.  Continue on with the
    ! current pass over the line.
    ! If this is a bolding pass (.PASS_CNTR is even) then repeat the
    ! line as many times as specified on the /BOLD:n switch.
    IF
	NOT .PASS_CNTR
    THEN
	! This is a bolding pass
	! Note that the expression .OUTOPT_BLDN - 1 is arrived at as follows:
	! First, remember that .OUTOPT_BLDN is the number of times that the
	! line should be overprinted.  
	! So, this INCR overprints one time less.  If you read the code
	! a bit you'll see an additional CLH (CLH_OUT_NOCRLF) that adds
	! an overprint.  Alternatively, the EXITLOOP takes you to the
	! end of the loop, which does the final overprinting.
	! Lest you think that /BOLD:0 won't work correctly, rest assurred
	! that the module DOOPTS has taken care of that case, so that
	! if you say /BOLD:0 no bolding is seen by this routine at all.
	INCR I FROM 1 TO (.OUTOPT_BLDN - 1) DO
	    CLH (CLH_OUT_NOCRLF);

    ! So, we are now finished with one pass..... well, almost.
    ! Regardless of how we got here, there's some text hanging in
    ! limbo, i.e., it hasn't been output yet.  If there is nothing
    ! left to do, then we'll do an EXITLOOP, that forces out this
    ! text with a CRLF after it.  Otherwise, we carry on, in which
    ! case the text still gets output, but with no CRLF after it.

    ! Compute the number of the last pass that will be made over this text.
    IF
	.UNDER_LIMIT NEQ 0
    THEN
	LAST_PASS = 5
    ELSE				! No underlining; see if overstriking
    IF
	.OVER_LIMIT NEQ 0
    THEN
	LAST_PASS = 3
    ELSE
	LAST_PASS = 1;			! There's always at least one pass.
    ! Add one for bolding
    IF
	.BOLD_LIMIT NEQ 0
    THEN
	LAST_PASS = .LAST_PASS + 1;

    ! If the pass just completed was the last pass,
    ! then exit immediately.
    ! NOTE: If this exit condition were not checked for, everything
    !	    would still work; but we'd end up writing records containing
    !	    just CRLF after the text records.  So this exit check has the
    !	    effect of generating smaller files and speeding up the
    !	    program a bit.
    IF
	(.PASS_CNTR EQL .LAST_PASS)		! Was this the last pass?
    THEN
	EXITLOOP;

    ! At the end of every pass over the line output the line without
    ! any carriage control following it.
    CLH (CLH_OUT_NOCRLF);

    ! Now clear the line buffer
    FS_INIT (FRA);

    ! Skip extra passes if no bolding required
    IF 						!
	NOT .TSF_BLD
    THEN
	PASS_CNTR = .PASS_CNTR + 2
    ELSE
	PASS_CNTR = .PASS_CNTR + 1;

    ! Exit loop if finished all passes or
    ! if everything was done by backspacing in one pass.
    IF 						!
	.PASS_CNTR GTR 6			!
	OR .OUTOPT_BACK
    THEN
	EXITLOOP;				! SEE COMMENT BELOW

    ! Overstriking required?
    IF 						!
	.PASS_CNTR EQL 3			!
	AND NOT .TSF_OVR
    THEN
    ! No, skip overstriking
	PASS_CNTR = .PASS_CNTR + 2;

    ! Check for underlining in Passes 5 and 6.
    IF 						!
	.PASS_CNTR GEQ 5
    THEN
	BEGIN

	IF 					!
	    .TSF_UND
	THEN
	    BEGIN
	    ! See if non-spacing underline was already done
	    IF 					!
		.OUTOPT_UND_NOSP		!
		AND NOT .OUTOPT_UND_SEP
	    THEN
		EXITLOOP;			! SEE COMMENT BELOW

	    ! Figure out how to do the underlining
	    IF 					!
		.PASS_CNTR EQL 5		!
		AND .OUTOPT_UND_SEP
	    THEN
	    ! Underlining is done by printing on next line
		BEGIN
		CLH (CLH_WRITE_OUT);
		! reset output buffer
		FS_INIT (FRA);
		PHAN_LINES_TP = .PHAN_LINES_TP + 1
		END

	    END
	ELSE
	! No underlining at all
	    EXITLOOP				! SEE COMMENT BELOW

	END;

    ! Put in a carriage return.  The CR is at the start of the
    ! line which is to do the overprinting, not at the end of the line which is
    ! to be overprinted.
    FS_WCHAR (FRA, 13)
    END;

! The EXITLOOPs above cause processing to continue here.
    ! 1.  This output statement (also) does the last overprint
    !	  to achieve the proper bolding depth.
    ! 2.  In /BACKSPACE mode, this write statement does the
    !	  actual output, since nothing has been output yet.
    ! 3.  In either case, the terminating CRLF is output.
    CLH (CLH_WRITE_OUT);

    ! Clear output buffer for next line.
    FS_INIT (FRA);
    
    ! Update count of number of lines on this page.
    PHAN_LINES_TP = .PHAN_LINES_TP + 1;
    END;					! End of LOUT1
%SBTTL 'FIND_NEXT_DOT -- Skip to next "." in text.'
ROUTINE FIND_NEXT_DOT (N, PTR, KHAR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Skip text until a "." is seen
!
! FORMAL PARAMETERS:
!
!	N	-  Address of current offset into the string.
!	PTR	-  Address of a String descriptor pointing to a text string.
!	KHAR	-  Character just beyond the period (returned value).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	N and PTR are advanced to reflect updated position.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MACRO
	K = .N %,
	PTR_COPY = .PTR %,
	HOLD_KHAR = .KHAR %;

    REPEAT
    BEGIN
    HOLD_KHAR = CH$RCHAR_A (PTR_COPY);
    K = .K + 1;

    IF 						!
	.HOLD_KHAR EQL RINTES
    THEN
	BEGIN

	LOCAL
	    TEMP;

	TEMP = CH$RCHAR_A (PTR_COPY);
	K = .K + 1;
	HOLD_KHAR = CH$RCHAR_A (PTR_COPY);
	K = .K + 1;

	IF 					!
	    .TEMP EQL %C'.'
	THEN
	    RETURN;

	END

    END
    END;					! End of find_next_dot
%SBTTL 'JUSTF -- Compute spaces needed for justification'
ROUTINE JUSTF (PADDING, INSERT_COUNT, SPACE_COUNT, ALGORITHM) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Computes the number of spaces to be dropped between words
!	and their locations.
!
! FORMAL PARAMETERS:
!
!	INSERT_COUNT is the number of places where spaces can
!	be inserted.  SPACE_COUNT is the number of spaces to
!	be distributed.
!	ALGORITHM specifies how spaces are to be distributed.
!	The space distribution is returned in PADDING as a set
!	of insert counts.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PADDING : REF VECTOR;

    LOCAL
	SPACES_PER_I,				! This number of spaces inserted per word.
	REMAINING,				! This number of "odd" spaces remain.
	RIGHT_INSERT,				! Put this number of spaces at the right.
	LEFT_INSERT,				! Put this number of spaces between words on the left.
	RIGHT_COUNT,				! There are this many words on the right.
	LEFT_COUNT,				! There are this many words on the left.
	PI;					! Index into padding.

    SPACES_PER_I = .SPACE_COUNT/.INSERT_COUNT;
    REMAINING = .SPACE_COUNT MOD .INSERT_COUNT;
    LEFT_INSERT = .SPACES_PER_I;
    RIGHT_INSERT = .SPACES_PER_I + (.REMAINING NEQ 0);
    RIGHT_COUNT = .REMAINING;
    LEFT_COUNT = .INSERT_COUNT - .RIGHT_COUNT;

    IF 						!
	.ALGORITHM
    THEN
	BEGIN					! Use alternate space distribution algorithm.
	EXCHANGE (LEFT_INSERT, RIGHT_INSERT);
	EXCHANGE (LEFT_COUNT, RIGHT_COUNT);
	END;

    PI = 0;

    INCR I FROM 1 TO .RIGHT_COUNT DO
	BEGIN
	PADDING [.PI] = .RIGHT_INSERT;
	PI = .PI + 1;
	END;

    INCR I FROM 1 TO .LEFT_COUNT DO
	BEGIN
	PADDING [.PI] = .LEFT_INSERT;
	PI = .PI + 1;
	END;

    END;					! End of JUSTF
%SBTTL 'ASCFTN -- Associat cur. line''s fn''s to cur. pg.'
GLOBAL ROUTINE ASCFTN : NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Associates footnotes associated with the current line with
!	the current page.  Such footnotes may be output at any point after
!	this.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    FNCT_READY = .FNCT_READY + .TSF_FOOTW;	! Number of footnotes that can be output.
    ! The following code is not really necessary.  All it does is establish a
    ! consistancy check to make sure footnotes are being counted correctly.
    FNCT_WAITING = .FNCT_WAITING - .TSF_FOOTW;	! Reduce number of footnotes "in limbo."
    TSF_FOOTW = 0;				! Forget these footnotes now, so they don't get counted twice accidentally.

    ! Now perform the consistancy check.
    IF
	.FNCT_WAITING LSS 0
    THEN
	! Something's wrong.  Complain (INTERNAL LOGIC ERROR) and try to recover.
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('ASCFTN')), 6);
	! Attempt to reset this consistancy check so this message
	! doesn't continue to happen.
	FNCT_WAITING = .FNCT_COUNT - .FNCT_READY
	END;

    ! Clear out the counter, so these footnotes don't accidentally get counted twice.
    TSF_FOOTW = 0;

    END;					! End of ASCFTN

END						! End of module
ELUDOM
