MODULE FNOOOO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the .FOOTNOTE and .END FOOTNOTE commands.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: September, 1978
!
! MODIFIED BY:
!
!	021	REM00021	Ray Marshall	14-December-1981
!		Built up revision history based on CMS library generations.
!
!	020	RWF00020	Rich Friday	16-November-1981
!		Fairly extensive changes were made as a result of the re-
!		  design of footnote processing.
!		Footnote control was moved to its own control area in its own
!		  require file (FNCT.REQ).  Appropreate changes have been made.
!
!	019	REM00019	Ray Marshall	24-September-1981
!		Make footnotes respond to the .[no]autojustify directive.
!
!	018	REM00018	Ray Marshall	25-August-1981
!		Updated copyright notice.
!
!	017	KAD00017	K. A. Dawson	12-February-1981
!		For V1.126d. Added check for .end foot without preceding 
!	          .footnote. VERSION 2(1)
!
!	016	KAD00016	Keith Dawson	September-1980	
!		Removed all use of dynamic memory. We never want to use dynamic
!	          memory on the PDP-11.
!		Reduced the maximum list depth within footnotes to 3 (from 20!)
!		Removed FOOFIL to its own module, so it can be overlayed with
!		  the rest of FN.
!		Removed FOOOUT to its own module, so it can be overlayed with
!		  the rest of FN.
!		This version was the first one put into the CMS library on
!		  21-October-1981 by Keith.  (REM)
!--
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:CONVRT.REQ';

REQUIRE 'REQ:FNCT.REQ';

REQUIRE 'REQ:FOOFIL.REQ';		!Operations performed by FOOFIL.

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:NUMPRM.REQ';

REQUIRE 'REQ:PDT.REQ';

REQUIRE 'REQ:PHDEF.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:SETCAS.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FNCT : FNCT_DEFINITION,				!General information about footnotes
    FNESIZ : FN_EXT_SIZE_DEFINITION,			!Number of lines in each pending footnote
    FNISIZ : FN_INT_SIZE_DEFINITION,			!Number of TSF/MRA sets per pending footnote
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    LSTCHR : REF VECTOR,
    LSTLCH : REF VECTOR,
    LSTRCH : REF VECTOR,
    LSTLDD : REF VECTOR,
    LSTCNT : REF COUNTED_LIST,
    LSTSKP : REF VECTOR,
    MRA : REF FIXED_STRING,
    NUMPRM : NUMPRM_DEFINE,
    PDT : REF PDT_DEFINITION,
    PHAN : PHAN_DEFINITION,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL
    FOOMRA : FIXED_STRING,		!Substitute MRA.
    FOOPDT : VECTOR [PDT_SIZE],		!Save area for paragraph stuff.
    FOOSCA : VECTOR [SCA_SIZE],		!Save area for SCA
    F_LIST : COUNTED_LIST [3],		!Substitute .LIST counters
    F_LCHR : VECTOR [3],		!Substitute .LIST bullet char.
    F_LSKP : VECTOR [3],		!Substitute .LIST EL spacing.
    F_LLCHR : VECTOR [3],		!Substitute left character
    F_LRCHR : VECTOR [3],		!Substitute right character
    F_LDD   : VECTOR [3],		!Susbtitute display descriptor.
    FOOTSF : VECTOR [TSF_SIZE];		!Substitute TSF area
!
EXTERNAL
    FOHLCH,
    FOHRCH,
    FOHDD,
    FOHLSC,
    FOHLSK,
    FOHLST,
    FOHPDT,
    FOHMRA,
    FOHTSF;

EXTERNAL LITERAL 				!Error messages
    RNFGFC,
    RNFTMF,
    RNFUME;

EXTERNAL LITERAL
    S_FMRA;		!Allocated size for footnote MRA.

EXTERNAL ROUTINE
    ERM,
    ERMA,
    ERML,
    ERMN,
    FOOFIL,
    OUTNJ,
    SETCAS;


GLOBAL ROUTINE FN (HANDLER_CODE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to be processed.
!
! IMPLICIT INPUTS:
!
!	NUMPRM contains a number, as processed by GETNUM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    SELECTONE .HANDLER_CODE OF
	SET

	[H_FOOTNOTE] :
	    BEGIN
	    GCA_CONCAT = FALSE;			!Don't allow .NO SPACE
	    FNCT_N = .NUM_VALUE;		!Save specified count.

	    IF 				!
		FOOFIL (FOO_OPOU) NEQ FOO_NORMAL
	    THEN 				!
		!Couldn't open footnote file.
		RETURN;

	    !Check for too many footnotes.
	    IF
		.FNCT_COUNT GEQ FNCT_MAX
	    THEN
		!Tell the user that he's attempting to define too many footnotes.
		!Note that everything proceeds as if nothing was wrong.
		!However, what eventually happens, when .END FOOTNOTE occurs,
		!is that the footnotes get merged together.  As soon as a footnote
		!gets expanded and output however, everything continues along ok.
		!Note that relevant data structures have extra space allocated so
		!special casing can be pretty much avoided in this situation.
		ERML (RNFTMF, FALSE);

	    FNCT_COLLECTING = TRUE;		!Officially collecting footnotes now.
	    FNESIZ [.FNCT_COUNT] = 0;		!Clear external size.
	    FNISIZ [.FNCT_COUNT] = 0;		!Clear internal size.
	    FOHTSF = .TSF;			!Save previous status of SCANT.
	    FOHMRA = .MRA;			!...
	    !Save entire status of SCA.

	    INCR I FROM 0 TO SCA_SIZE - 1 DO
		FOOSCA [.I] = .SCA [.I];

	    !  Initialize SCA to footnote environment.

	    SCA_LM = 0;				!
	    SCA_FC = TRUE;			!...
	    SCA_FC_CASE = TRUE;			!...
	    SCA_RM = .GCA_LWIDTH;		!...
	    SCA_NBITS = FALSE;			!...
	    SCA_WRD_NBITS = FALSE;		!...
	    SCA_WRD_CNBITS = FALSE;		!...
	    SCA_WRD_ACNBITS = FALSE;		!...
	    SCA_WRD_FOOTW = 0;			!...
	    SCA_SECT_EMPTY = FALSE;		!...
	    SCA_FILL = TRUE;			!...
	    SCA_JUSTIFY = .GCA_AUTOJUST OR .SCA_JUSTIFY; ! Obey .[no]autojustify directive
	    SCA_CROCK = .SCA_JUSTIFY;		! Obey .[no]autojustify directive
	    SCA_WRD_LST_UND = 0;		!...
	    SCA_WRD_LST_SP  = 0;		!...
	    SCA_WRD_LST_JUS = 0;		!...
	    SCA_WRD_INT_L = 0;			!...
	    SCA_WRD_EXT_L = 0;			!...
	    SCA_WRD_F_XTN = 0;			!...
	    SCA_WRD_L_XTN = 0;			!...
	    SCA_WRD_LC_PNCT = FALSE;		!...
	    SCA_WRD_LST_HYP = FALSE;		!...
	    SCA_WRD_HYP_PTR = 0;		!...

	    !Set proper case conversion.
	    SETCAS (.GCA_CASE);

	    !Set up paragraphs for footnote.  Characteristics are inherited
	    !from the main body of text.
	    INCR I FROM 0 TO PDT_SIZE - 1 DO
		FOOPDT [.I] = .PDT [.I];

	    FOHPDT = .PDT;			!Remember previous paragraph settings.
	    PDT = FOOPDT;			!Point to footnote paragraph settings.
	    !Set up for .LIST and related commands.
	    FOHLST = .LSTCNT;			!Save previous .LIST status.
	    FOHLSC = .LSTCHR;			!...
	    FOHLSK = .LSTSKP;			!...
	    FOHLCH = .LSTLCH;			!...
	    FOHRCH = .LSTRCH;			!...
	    FOHDD = .LSTLDD;			!...
	    LSTCNT = F_LIST;			!Set up footnote .LIST information.
	    LSTCHR = F_LCHR;			!...
	    LSTSKP = F_LSKP;			!...
	    LSTLCH = F_LLCHR;			!...
	    LSTRCH = F_LRCHR;			!...
	    LSTLDD = F_LDD;			!
	    LSTCNT [CL_MAX_INDEX] = 3;		!...
	    LSTCNT [CL_INDEX] = 1;		!...
	    LSTCNT [1] = 0;			!...
	    LSTCHR [0] = 0;			!...
	    LSTLCH [0] = 0;			!...
	    LSTRCH [0] = %C'.';			!...
	    LSTLDD [0] = TCONVRT_DEC_NOZ;	!...
	    TSF = FOOTSF;			!Switch to footnote TSF.
	    MRA = FOOMRA;			!Switch to footnote MRA.

	    INCR I FROM 0 TO TSF_SIZE - 1 DO
		TSF [.I] = 0;			!Initialize footnote TSF.

	    !It is necessary here to explicitly reset the
	    !maximum size of the MRA where the footnote text will be
	    !built up.  This is because a previous footnote may have
	    !been expanded and written into the document.  And a
	    !call on FOOOUT destroys FS_MAXSIZE, since the various
	    !control cells are simply fudged in to allow the information
	    !to be read without having to first move it.  Look in FOOFIL
	    !(FOO_READ) to see where these cells are clobbered when 
	    !footnotes are read back in.
	    !
	    !The MRA size is reset using a global literal, defined in
	    !GLBDAT as the allocated size of FOOMRA.
	    !
	    FS_MAXSIZE (MRA) = S_FMRA;
	    !
	    !Now do normal MRA initialization.
	    FS_INIT (MRA);
	    SCA_WRD_PNTR = .FS_NEXT (MRA);
	    SCA_WRD_CPEND = RINTES;		!Current word is empty.
	    END;

	[H_END_FOOTNOTE] :
	    BEGIN
	    IF
		NOT .FNCT_COLLECTING
	    THEN
		!User said .END FOOT without first saying .FN.
		BEGIN
		ERMA (RNFUME, FALSE);
		RETURN;
		END;

	    OUTNJ ();				!Terminate pending text.
	    !NOTE:**** It is important that the call on OUTNJ *NOT* be removed.
	    !This is because the routine PUS, when it detects an ENDFOOTNOTE flag,
	    !has no way of telling this routine via DOCM to call OUTNJ.  If there
	    !were no ENDFOOTNOTE flag, or if the user says .END FOOTNOTE, there is
	    !no problem, since the entries in RUNTAB.REQ for .END FOOTNOTE  do
	    !indicate OUTNJ is to be called.

	    FNCT_COLLECTING = FALSE;	!Officially not collecting footnotes any more.

	    INCR I FROM 0 TO SCA_SIZE - 1 DO
		SCA [.I] = .FOOSCA [.I];	!Restore  previous SCA.

	    !If the footnote tables have not overflowed, update the count of footnotes
	    !associated with this word.
	    IF
		(.FNCT_COUNT LSS FNCT_MAX)
		AND
		.PHAN_PAGING			!Merge all footnotes if .NO PAGING
	    THEN
		SCA_WRD_FOOTW = .SCA_WRD_FOOTW + 1;

	    MRA = .FOHMRA;			!Restore previous MRA.
	    TSF = .FOHTSF;			!Restore previous TSF.
	    PDT = .FOHPDT;			!Restore previous paragraph settings.
	    LSTCNT = .FOHLST;			!Restore previous .LIST information.
	    LSTCHR = .FOHLSC;			!...
	    LSTSKP = .FOHLSK;			!...
	    LSTLCH = .FOHLCH;			!...
	    LSTRCH = .FOHRCH;			!...
	    LSTLDD = .FOHDD;			!...

	    !If the user used the outmoded .FN n command (i.e., specifed what he believed
	    !the number of footnote lines to be) verify that he indeed gave a correct
	    !value for "n".
	    IF 					!
		(.FNCT_N NEQ .FNESIZ [.FNCT_COUNT])
		AND (.FNCT_N NEQ 0)
	    THEN
		!User specified a count and it doesn't agree with how big the footnote really is.
		BEGIN
		!Tell the user he made a mistake, and also how big the footnote really is.
		ERMN (RNFGFC, .FNESIZ [.FNCT_COUNT]);
		END;

	    !Update some footnote statistics.
	    !Note that three situations occur here, one of which is an error condition.
	    IF
		.FNCT_COUNT GEQ FNCT_MAX
	    THEN
		!The error case.  Statistics have been piling up in an extra
		!location in the tables.  Merge that info with other information
		!so that the footnotes get merged.
		BEGIN
		FNISIZ [FNCT_MAX - 1] = .FNISIZ [.FNCT_COUNT - 1] + .FNISIZ [.FNCT_COUNT];
		FNESIZ [FNCT_MAX - 1] = .FNESIZ [.FNCT_COUNT - 1] + .FNESIZ [.FNCT_COUNT]
		END
	    ELSE
		!The normal situation.  The tables won't overflow, and so all we have to
		!do is update footnote count information.
		IF
		    .PHAN_PAGING
		THEN
		    !The document is being paged, so don't merge footnotes.
		    BEGIN
		    FNCT_COUNT = .FNCT_COUNT + 1;
		    FNCT_WAITING = .FNCT_WAITING + 1
		    END
		ELSE
		    !The document is not being paged.
		    !Merge all footnotes into one biggie.
		    IF
			.FNCT_COUNT EQL 0
		    THEN
			!This is the first footnote in the .NOPAGING environment
			BEGIN
			FNCT_COUNT = 1;
			FNCT_READY = 1
			END
		    ELSE
			!Merge new footnote with first footnote
			BEGIN
			!Note that FNCT_COUNT will not necessarily be 1.  That's because
			!the user may have entered no paging mode after having accumulated
			!some footnotes in paging mode.  In any case, this new footnote gets
			!arbitrarily counted in with the size of the very first footnote.
			FNESIZ [0] = .FNESIZ [0] + .FNESIZ [.FNCT_COUNT];
			FNISIZ [0] = .FNISIZ [0] + .FNISIZ [.FNCT_COUNT]
			END;

	    END;
	TES;

    END;					!End of FN

END						!End of module

ELUDOM
