MODULE PARSEO (		!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Translates a "human-readible" page number into internal format.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February 1979
!
! MODIFIED BY: K. A. Dawson, Feb. 5, 1981
!
!	 003	KAD00003	K. A. Dawson 
!		Added a trap before calling GETNUM a second time, to catch 
!		the ERMA %RNFMFN bug (which causes an access violation on VMS),
!		when user says /PAGES:"1-i"
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:DIGIT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GSLUCC.REQ';

REQUIRE 'REQ:PAGEN.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL				!Error messages
    RNFCRP;

EXTERNAL
    FS01 : FIXED_STRING,
    KHAR;

EXTERNAL ROUTINE
    CONVLB,
    ERM,
    GETNUM,
    GSLU;


GLOBAL ROUTINE PARSEP (IRA, PAGEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PARSEP scans IRA in an attempt to recognize a page number.
!	If a page number is recognized, the results are returned
!	in PAGEN, and PARSEP returns TRUE as its completion code.
!	If a page number is not recognized, PAGEN is left in an
!	undefined state, and PARSEP returns false.
!
! FORMAL PARAMETERS:
!
!	IRA is the FIXED_STRING to be scanned.  PAGEN is where
!	the results go.
!
! IMPLICIT INPUTS:
!
!	The format of the page number is implicit to this routine.
!	The required format is:
!		SECTION-PAGE SUBPAGE
!	where SECTION is a digit or string of letters, thereby indicating
!		a chapter, appendix, or the index,
!	where the '-' is required iff SECTION is present,
!	where PAGE is required if SECTION is a number, and indicates
!		the page number,
!	where SUBPAGE, if present, is a single letter.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if a page number was recognized, and it was ok.
!	Returns FALSE if no page number was found, or it was bad.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	IRA : REF FIXED_STRING,
	PAGEN : REF PAGE_DEFINITION;

    LOCAL
	HOLD_NUMBER,
	NUMBER_VALUE,
	NUMBER_SIGN,
	NUMBER_LENGTH;


    !Try for a simple page number.
    IF 						!
	NOT GETNUM (.IRA, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH)
    THEN 					!
    !Bad number (as opposed to none).  Give up.
	BEGIN
	ERM (RNFCRP, 0 ,0);
	RETURN FALSE;
	END
    ELSE 					!

	IF 					!
	    .NUMBER_LENGTH GTR 0
	THEN 					!
	!A number was specified.
	!Don't know if it's a page number or chapter number yet.
	    BEGIN

	    IF 					!
		.NUMBER_VALUE LSS 0
	    THEN 				!
	    !A negative number is illegal.  Give up.
		BEGIN
		ERM (RNFCRP, 0, 0);
		RETURN FALSE;
		END;

	    HOLD_NUMBER = .NUMBER_VALUE;
	    !If another number follows, the first number was a
	    !a chapter number.  Otherwise it was a page number.

	    !The following code catches the case of "1-i" ... which would cause ERMA to
	    !wander out into space, if GETNUM is allowed to call ERMA (RNFMFN ...).
	    IF
		.KHAR EQL %C'-'
		AND NOT DIGIT (CH$RCHAR (.FS_NEXT (IRA)))
	    THEN
 		BEGIN
 		ERM (RNFCRP, 0, 0);
 		RETURN FALSE;
 		END;

	    IF 					!
		NOT GETNUM (.IRA, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH)
	    THEN 				!
	    !Bad number.  Give up.
		BEGIN
		ERM (RNFCRP, 0, 0);
		RETURN FALSE;
		END
	    ELSE 				!

		IF 				!
		    .NUMBER_LENGTH GTR 0
		THEN 				!
		!Got a page number. Save it.
		    BEGIN
		    PAGEN [SCT_TYP] = SCT_CHAPT;
		    PAGEN [SCT_NUMBER] = .HOLD_NUMBER;
		    PAGEN [SCT_PAGE] = ABS (.NUMBER_VALUE);
		    !Flow now merges with looking for a subpage.
		    END
		ELSE 				!
		!There is no second number, so first number
		!is really a page number.
		    BEGIN
		    PAGEN [SCT_PAGE] = .HOLD_NUMBER
		    !Flow now merges with looking for a subpage.
		    END

	    END
	ELSE 					!
	!No leading number, so try for letters.
	    BEGIN
	    FS_INIT (FS01);

	    IF 					!
		GSLU (.IRA, FS01) NEQ GSLU_NORMAL
	    THEN
	    !User said something strange.  Give up.
		BEGIN
		ERM (RNFCRP, 0, 0);
		RETURN FALSE;
		END
	    ELSE 				!
	    !Got something starting with a letter.
		BEGIN

		IF 				!
		    .FS_LENGTH (FS01) EQL 5
		THEN 				!

		    IF 				!
			CH$EQL (5, .FS_START (FS01), 5, CH$PTR (UPLIT ('INDEX')))
		    THEN 			!
		    !User said /ORANGE:"INDEX...."
			BEGIN
			PAGEN [SCT_TYP] = SCT_INDEX;
			!Merge with logic to get a page number.
			END
		    ELSE 			!
		    !There are no 5 character appendix names.  Give up.
			BEGIN
			ERM (RNFCRP, 0, 0);
			RETURN FALSE;
			END

		ELSE 				!
		!Found an appendix letter
		    BEGIN

		    !Convert string to equivalent binary value and save it.
		    PAGEN [SCT_NUMBER] = CONVLB(.FS_START(FS01), .FS_LENGTH(FS01));
		    PAGEN [SCT_TYP] = SCT_APPEND;

!!		    IF 				!
!!			.FS_LENGTH (FS01) GTR 2
!!		    THEN 			!
!!		    !An appendix "number" cannot be more
!!		    !than 2 letters.  Give up.
!!			BEGIN
!!			ERM (RNFCRP, 0, 0);
!!			RETURN FALSE;
!!			END
!!		    ELSE 			!
!!		    !Save appendix designator.
!!			BEGIN
!!
!!			LOCAL
!!			    CHAR,
!!			    NAC,
!!			    PTR;
!!
!!			IF 			!
!!			    .FS_LENGTH (FS01) EQL 1
!!			THEN 			!
!!			    NAC = SCT_STG1
!!			ELSE 			!
!!			    NAC = SCT_STG2;
!!
!!			!Save the appendix number.
!!			PTR = CH$PTR (PAGEN [SCT_NUMBER]);
!!			FS_NEXT (FS01) = .FS_START (FS01);
!!			FS_RCHAR (FS01, CHAR);
!!			CH$WCHAR_A (.CHAR, PTR);
!!			FS_RCHAR (FS01, CHAR);
!!
!!			IF 			!
!!			    .NAC EQL SCT_STG2
!!			THEN 			!
!!			    CH$WCHAR (.CHAR, .PTR)
!!			ELSE 			!
!!			    CH$WCHAR (%C'@', .PTR);
!!
!!			PAGEN [SCT_TYP] = .NAC;
!!			!Now merge with logic to get a
!!			!page number.
!!			END;

		    END;

		!Attempt to get a page number

		IF 				!
		    NOT GETNUM (.IRA, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH)
		THEN 				!
		!Bad number.  Give up.
		    BEGIN
		    ERM (RNFCRP, 0, 0);
		    RETURN FALSE;
		    END
		ELSE 				!

		    IF 				!
			.NUMBER_LENGTH GTR 0
		    THEN
			BEGIN
			PAGEN [SCT_PAGE] = ABS (.NUMBER_VALUE);
			!Merge with logic to get a subpage.
			END
		    ELSE
			PAGEN [SCT_PAGE] = 1;

		END;

	    END;

    !Try to get a subpage.
    FS_INIT (FS01);
    GSLU (.IRA, FS01);

    IF 						!
	.FS_LENGTH (FS01) NEQ 0
    THEN
	PAGEN [SCT_SUB_PAGE] = CONVLB (.FS_START(FS01), .FS_LENGTH(FS01));

    RETURN TRUE;				!Success!!!!!
    END;					!End of PARSEP

END						!End of module

ELUDOM
