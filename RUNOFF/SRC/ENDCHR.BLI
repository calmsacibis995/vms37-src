MODULE ENDCHO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Put character and "emphasis" indicators into the MRA.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:IRAC.REQ';

REQUIRE 'REQ:LETTER.REQ';

REQUIRE 'REQ:LSTBTS.REQ';

REQUIRE 'REQ:NBITS.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!!GLOBAL
!!    RNQTOT,
!!    RNQRNT,
!!    RNQZIP;
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    IRAC : IRAC_DEFINITION,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

!

EXTERNAL LITERAL 				!Error messages
    RNFLTC;

EXTERNAL ROUTINE
    ENDWRD,
    ERMS,
    FCIMRA,
    OUTXHR;


GLOBAL ROUTINE ENDCHR (KHAR) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	ENDCHR takes KHAR and puts it, along with bolding and
!	underlining codes, into the MRA.  However, the functioning
!	is somewhat more complex than that.  Basically, KHAR must
!	be help up for one character, so that overstriking can
!	be handled correctly.
!
! FORMAL PARAMETERS:
!
!	KHAR is the character to be output when ENDCHR gets called again.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!!Code commented out with !! is used for counting calls on
!!ENDCHR that result in a simple return (i.e., nothing to do).
!!    RNQTOT = .RNQTOT + 1;

    IF 						!
	.KHAR EQL RINTES
    THEN 					!

	IF 					!
	    .SCA_WRD_CPEND EQL RINTES
	THEN 					!
	    RETURN
!!		then	( RNQZIP = .RNQZIP + 1; return)
!!		else	( RNQRNT = .RNQRNT + 1 )
	ELSE
	    (0)

    ELSE 					!

	IF 					!
	    .SCA_X_FLAG
	THEN 					!
	!Send a character to the <INDEX flag> buffer.
	    OUTXHR (.KHAR);

    !
    !Force out previous character
    IF 						!
	.SCA_WRD_CPEND NEQ RINTES
    THEN 					!
	BEGIN
	FS_WCHAR (MRA, .SCA_WRD_CPEND);
	SCA_WRD_INT_L = .SCA_WRD_INT_L + 1;

	IF 					!
	    .SCA_WRD_CPEND GEQ %C' '		!
	    AND .SCA_WRD_CPEND LSS %O'177'
	THEN 					!
	    SCA_WRD_EXT_L = .SCA_WRD_EXT_L + 1
	ELSE
	    IF
		.SCA_WRD_CPEND EQL %O'010'	!Backspace???
	    THEN
	    !Back up for a backspace
		SCA_WRD_EXT_L = .SCA_WRD_EXT_L - 1;

	END;

    SCA_WRD_CPEND = .KHAR;			!Save character for next time around
    !Clear single character force indicator.
    SCA_FRC_CHR = FALSE;

    IF 						!
	.KHAR EQL RINTES
    THEN 					!
	RETURN
    ELSE 					!
	SCA_SECT_EMPTY = FALSE;

    !Check for spaces just before the first character of the first word on the line.
    !This can arise only in .NO FILL mode.
    !The spaces are put there by the routine OUTXSP, in the module SCANT.
    !It's not necessary to call FCIMRA in such a case because OUTXSP called it
    !when it detected the first space, in .NO FILL mode, starting a line.
    !(The special handling of such leading spaces lets RUNOFF convert lines full of
    ! just spaces, in .NO FILL mode, to just a <CRLF> pair.)
    !In addition, propagation of change bars, the draft flag, and sequence numbers
    !is done here.  (Logically some of this should be organized otherwise.  But that
    !would make this run slower on -11s.)
    IF
	.SCA_FC					!First character of a word?
    THEN
	BEGIN
	SCA_WRD_BARS = .IRAC_BARS;		!Propagate change bars at start of every word.
	SCA_WRD_BAR_CHR = .SCA_BAR_CHAR;	!...

	SCA_WRD_DRAFT = .GCA_DEBUG_CND;	!Propagate draft character at start of each new line.
	SCA_WRD_DRAFT_F = .IRAC_DRAFT_FLG; !...
	SCA_WRD_ISEQN = .IRAC_ISEQN;	!Set up for /SEQUENCE at start of each new line.
	SCA_WRD_SEQN_F = .IRAC_SEQN_FLAG;	!...
	SCA_WRD_IPAGEN = .IRAC_IPAGEN;	!Page number part of sequence number.

	SCA_FC = FALSE;				!Next character is not the first of a word.

	IF
	    (.TSF_INT_HL EQL 0)			!Absolutely nothing in MRA yet?
	THEN
	    IF
		(.SCA_WRD_LST_SP EQL 0)		!Leading spaces?
	    THEN
		!No leading spaces, so this is just the first character to go into the MRA.
		FCIMRA ()
	    ELSE
		!Count leading spaces at the start of the MRA.  They are already physically there.
		BEGIN
		TSF_INT_HL = .TSF_INT_HL + .SCA_WRD_LST_SP;
		TSF_EXT_HL = .TSF_EXT_HL + .SCA_WRD_LST_SP;
		SCA_WRD_LST_SP = 0;		!Make sure they don't hang around.
		END;
	END;

    !In the following check for buffer overflow, "10" comes
    !from the fact that the character plus emphasis coding
    !will require at least 10 characters.  This avoids having
    !constant checks whenever something is generated.
    !Having enough space for overstriking too is checked elsewhere.
    IF 						!
	(.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS 10
    THEN 					!
	BEGIN					!Character might not fit in storage
	!The effect of the error handling is
	!that, besides an error message being generated,
	!an end of word is forced.  ENDWRD will do additional
	!checking, eventually forcing out the line, and
	!the text causing the problem.  When the return is made
	!TSF will be empty, and it will look just like a new
	!word is being started.
	!Then, the remainder of the current line is skipped.
	UNDECLARE KHAR;				!Don't conflict with the KHAR parameter
	EXTERNAL
	    IRA : FIXED_STRING,			!Needed only for error message.
	    KHAR;				!''     '' '''''''''

	REQUIRE 'REQ:KC.REQ';

	ERMS (RNFLTC, .FS_NEXT (IRA), .FS_REMAINS (IRA));
	!End this word, but suppress trailing spaces and justification
	ENDWRD (FALSE, FALSE, FALSE);
	WHILE .KHAR NEQ RINTES DO
	    KCNS ();				!Skip to end of offending line.
	RETURN
	END;

    SCA_FC_CASE = FALSE;
    SCA_CONT = TRUE;				!.NO SPACE is legal now.
    SCA_WRD_LC_PNCT = FALSE;			!Turn off 'punctuation', for .PERIOD

    !Remember bolding and underlining facts
    SCA_WRD_NBITS = (.SCA_WRD_CNBITS OR .SCA_WRD_NBITS OR .SCA_WRD_ACNBITS);

    !This select statement depends very much on the arrangement of the
    !bolding and underlining bits in SCA.  The reason this code
    !has been written this way is so to make this routine run a bit faster,
    !especially on -11s.
    SELECT (.SCA_WRD_C_BLDUN OR .SCA_WRD_AC_BLUN) OF
	SET

	[1,3]:
		!Bolding only or both underlining and bolding.
		BEGIN
		SCA_WRD_INT_L = .SCA_WRD_INT_L + 3;
		FS_WCHAR (MRA, RINTES);
		FS_WCHAR (MRA, %C'B');
		FS_WCHAR (MRA, .KHAR);
		END;

	[2,3]:
		!Underlining only or both underlining and bolding
		BEGIN
		SCA_WRD_INT_L = .SCA_WRD_INT_L + 3;
		FS_WCHAR (MRA, RINTES);
		FS_WCHAR (MRA, %C'U');
		FS_WCHAR (MRA, %C' ');
		END;

	TES;

    !Set up underlining/bolding as specified by ^& and \&, etc.
    SCA_WRD_C_BLDUN = .SCA_BLDUND AND .SCA_DO_BLDUND;
    SCA_WRD_ACNBITS = FALSE;			!Additional functions

    !Set up case translation rules.
    SCA_WRD_FC_UT = .SCA_FC_UT;
    SCA_WRD_OC_UT = .SCA_OC_UT;
    SCA_WRD_FC_LT = .SCA_FC_LT;
    SCA_WRD_OC_LT = .SCA_OC_LT;
    END;					!End of ENDCHR

END						!End of module

ELUDOM
