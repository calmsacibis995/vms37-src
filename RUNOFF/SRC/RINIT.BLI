MODULE RINITO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Initialization of RUNOFF
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1978
!
! MODIFIED BY: K. A. Dawson
!
!	021	REM00021	Ray Marshall	17-December-1981
!		Built up revision history based on CMS library generations.
!
!	020	RWF00020	Rich Friday	11-November-1981
!		Footnote control was moved to its own control area in its own
!		  require file (FNCT.REQ).  Appropreate changes have been made.
!		In addition, the new files used by the new footnote processing
!		  are also now initialized herein.
!
!	019	KAD00019	Keith Dawson	21-August-1981
!		For V1.126i
!		Add initialization for GCA_CMD_QUICK, support /QUICK switch.
!
!	018	REM00018	Ray Marshall	17-August-1981
!		Update copyright and initial reformatting of revision history.
!
!	017	KAD00017	K. A. Dawson	14-November-1980
!		For V1.124h (in TOPS-10/20 that's VERSION 2(1)  )
!		Change meaning of SCA_XROUTINE. It is now a bit, not an address.
!		  If TRUE, then call SUBXR for index-phrase processing. If
!		  FALSE (as initialized in RINIT), then call XR.
!
!	016	KAD00016	Keith Dawson	21-October-1980
!		Fixup require file declarations so they now all come from REQ:
!		  and not the local directory.
!
!	015	KAD00015	Keith Dawson	21-October-1980
!		Using conditionals based on the compiler, BLISS16 will now
!		  initialize several buffers, work areas, and constants to
!		  smaller values to help fit RUNOFF into the PDP-11 systems.
!		Footnote IOB initialized here, for PDP-11 changes.
!
!	014	KAD00014	Keith Dawson	20-October-1980
!		Add initialization of HLC_xxxxxx header level control variables.
!		Add initialization of GCA_XCASE -- the new control flag used by
!		  the new .XUPPER/.XLOWER directives.
!
!	012	KAD00012	Keith Dawson	17-October-1980
!		I (Ray Marshall) don't know what (if any) changes were made
!		  on or before this date.  This is the first generation in
!		  the CMS library.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';				!XPORT I/O macros

REQUIRE 'REQ:ATCODE.REQ';

REQUIRE 'REQ:BIGNUM.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:CONVRT.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FNCT.REQ';

REQUIRE 'REQ:FRMSTK.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:HCT.REQ';

REQUIRE 'REQ:HLC.REQ';

REQUIRE 'REQ:IFSTK.REQ';

REQUIRE 'REQ:IRAC.REQ';

REQUIRE 'REQ:LSTBTS.REQ';

REQUIRE 'REQ:NBITS.REQ';

REQUIRE 'REQ:NMLST.REQ';

REQUIRE 'REQ:OUTOPT.REQ';

REQUIRE 'REQ:PAGEN.REQ';

REQUIRE 'REQ:PDT.REQ';

REQUIRE 'REQ:PHDEF.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:SETCAS.REQ';

REQUIRE 'REQ:TSF.REQ';

REQUIRE 'REQ:VR.REQ';

REQUIRE 'REQ:XTNTAB.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

LITERAL
    MAX_TITLE =					!Maximum internal length of titles and subtitles.
	%IF %BLISS(BLISS16)
	%THEN
	    300,
	%ELSE
	    450,
	%FI
    MAX_REQUIRE =				!Maximum depth of .REQUIRE commands.
	%IF %BLISS(BLISS16)
	%THEN
	    3,
	%ELSE
	    10,
	%FI
    MAX_LEVELS = 6,				!Maximum .HEADER LEVEL depth
    MAX_TABS = 40;				!Maximum number of tab stops.

!
! OWN STORAGE:
!

EXTERNAL
    MRAA : FIXED_STRING,
    LSTSTF : COUNTED_LIST,
    PDTSTF : VECTOR [PDT_SIZE],
    TSFA : VECTOR [TSF_SIZE];

!
! GLOBAL STORAGE:
!

EXTERNAL
    FRA : FIXED_STRING,
    IRA : FIXED_STRING,
    XMRA : FIXED_STRING,
    MRA;					!Refers to MRAa or MRAb.

EXTERNAL 					!Intermediate storage for subtitle and title.
    SBTMRA : FIXED_STRING,
    TITMRA : FIXED_STRING;

EXTERNAL 					!Descriptors for subtitle and title.
    SBTTSF : VECTOR [TSF_SIZE],
    TITTSF : VECTOR [TSF_SIZE],
    XTSF : VECTOR [TSF_SIZE];			!Used for <INDEX flag> processing.

EXTERNAL
    KHAR;

EXTERNAL
    ATABLE : VECTOR [128];

!

EXTERNAL
    TSF : REF VECTOR [TSF_SIZE];		!refers to TSFa or TSFb

EXTERNAL
    DATTIM : VECTOR[6],				!Day and time pieces.
    FNESIZ : FN_EXT_SIZE_DEFINITION,		!Sizes of pending footnotes.
    FNISIZ : FN_INT_SIZE_DEFINITION,		!Number of TSF/MRA pairs in each pending footnote.
    FNCT : FNCT_DEFINITION,			!Footnote control table.
    GCA : GCA_DEFINITION,			!Global control area
    HCT : HCT_DEFINITION,			!Header control area
    IFSTK : IFSTACK;				!Stack for .IFs, etc

EXTERNAL
    IRAC : IRAC_DEFINITION,
    NPAGEN : PAGE_DEFINITION,			!Page number of next page
    PAGEN : PAGE_DEFINITION,			!Page number of current page
    NDXOOB : $XPO_IOB (),			!IOB for binary index, output.
    TOCOOB : $XPO_IOB (),			!IOB for binary table of contents, output.
    NDXPOL,					!Address of indexing pool, if any.
    NDXSGE,					!End of current index segment.
    NDXSGF,					!Free space in current index segment.
    XTNCNT,					!Number of XTNTAB entries
    XTNLSP : REF PAGE_DEFINITION,		!Page number of last index entry.
    XTNLSX : REF VECTOR,			!Index segment list.
    XTNPOL : REF BLOCK,				!Indexing storage pool.
    XTNSGP : REF BLOCK,				!Address of current segment.
    XTNTAB : REF XTNTAB_DEFINE,			!List of transaction numbers assigned
    XPAGEN : REF XPAGEN_DEFINE;			!Page number associated with transaction number.

EXTERNAL
    FLGT : FLAG_TABLE [FLAG_COUNT];

EXTERNAL
    SCA : SCA_DEFINITION,			!Scanner control area.
    SCALIT : VECTOR [SCA_CASE_SIZE];		!Save case rules here during literal processing.

EXTERNAL
    FS01 : FIXED_STRING;			!General purpose character stringg.

EXTERNAL
    OUTOPT : OUTOPT_DEFINE;			!Output options

!

EXTERNAL
    FRMSTD,					!Depth of FRMSTK (0 means empty)
    FRMSTK : FORM_STACK,
    HLC : HLC_DEFINITION,
    HLLIST : COUNTED_LIST [MAX_LEVELS],
    HLDSP : VECTOR [MAX_LEVELS],
    LSTCHR : REF VECTOR,
    LSTLCH : REF VECTOR,
    LSTRCH : REF VECTOR,
    LSTLDD : REF VECTOR,
    LSTCNT : REF COUNTED_LIST,
    LSTSKP : REF VECTOR,
    CHLST : VECTOR,
    LCHLST : VECTOR,
    RCHLST : VECTOR,
    LDDLST : VECTOR,
    NMLST : NUMBER_LIST,
    PDT : REF PDT_DEFINITION,
    PHAN : PHAN_DEFINITION,
    SKPLST : VECTOR [NMLST_MAXSIZE],
    TTABLE : COUNTED_LIST [MAX_TABS];		!Tab settings

EXTERNAL
    IOBSTK : BLOCKVECTOR [MAX_REQUIRE, IOB$K_LENGTH],
    !Active input file IOBs saved in IOBSTK.
    RNEIOB : REF $XPO_IOB (),			!Storage for primary input IOB.
    RNAIOB : REF $XPO_IOB (),			!Storage for output IOB.
    RNIIOB : REF $XPO_IOB (),			!Input IOB currently active
    RNOIOB : REF $XPO_IOB (),			!Output file IOB (i.e., for generated document)
    FOOIOB : ref $XPO_IOB (),			!Standard footnote IOB.
    FOTIOB : ref $XPO_IOB (),			!Refers to a temporary IOB for footnotes.
    FO1IOB : $XPO_IOB (),			!Never referred to directly
    FO2IOB : $XPO_IOB (),			!Never referred to directly
    TTEIOB : $XPO_IOB (),			!Standard error file (usually TTY:)
    TTIIOB : $XPO_IOB (),			!Standard input file (usually TTY:)
    TTOIOB : $XPO_IOB (),			!Standard output file (usually TTY:)
    TSIIOB : $XPO_IOB ();			!Standard input file; but STREAM; not RECORD.

!!  TSOIOB:	    $XPO_IOB();			!Standard output file, but STREAM, not RECORD.

EXTERNAL
    VRCNT,					!Number of variables.
    VRNAME : VRNAME_DEF,			!The variable names.
    VRLNG : VRLNG_DEF,				!The length of the names.
    VRBOOL : VRBOOL_DEF,			!TRUE/FALSE value
    VRFFLG : VRFFLG_DEF,			!FALSE flag
    VRTFLG : VRTFLG_DEF,			!TRUE flag
    VRSRC : VRSRC_DEF;				!Source of variable definition.

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE

%IF NOT %BLISS(BLISS16)
%THEN
    FPOOL,
%FI

    NATE,
    RNODAT,
    SETCAS;


GLOBAL ROUTINE RINIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION: RUNOFF initialization
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS;

    FS_INIT (IRA);
    FS_INIT (MRAA);
    FS_INIT (FRA);
    FS_INIT (FS01);
    FS_INIT (TITMRA);
    FS_INIT (SBTMRA);
    FS_INIT (XMRA);
	
    !Initialize text descriptors.
    INCR I FROM 0 TO TSF_SIZE - 1 DO
	BEGIN
	TSFA [.I] = 0;				!Text descriptor for primary area
	SBTTSF [.I] = 0;			!Text descriptor for subtitles
	TITTSF [.I] = 0;			!Text descriptor for titles
	XTSF [.I] = 0;				!Text descriptor for indexing
	END;

    !Point to primary text areas.
    MRA = MRAA;					!Primary intermediate build area.
    TSF = TSFA;					!Primary control area.

    NMLST_COUNT = 0;				!No waiting number lists
    GCA_FEHLER = FALSE;				!No errors yet
    GCA_ERRCNT = 0;				!No errors yet
    GCA_ERR_DIR = REPORT_ERR_STD;		!Report errors in error log.
    GCA_CMD_MSG = REPORT_ERR_BOTH;		!After opening files report errors in both places.

!	Some I/O initialization
    RNIIOB = .RNEIOB;				!Set up pointer to primary input IOB.
    RNOIOB = .RNAIOB;				!Set up pointer to output IOB.
    $XPO_IOB_INIT (IOB = TTIIOB);		!Standard input (TTY:)
    $XPO_IOB_INIT (IOB = TTOIOB);		!Standard output (TTY:)
    $XPO_IOB_INIT (IOB = TTEIOB);		!Standard error log (TTY:)
    $XPO_IOB_INIT (IOB = TSIIOB);		!Standard input, but STREAM.
!!  $XPO_IOB_INIT( IOB = TSOIOB );		!Standard output, but STREAM.
    $XPO_IOB_INIT (IOB = NDXOOB);		!Indexing output IOB.
    $XPO_IOB_INIT (IOB = TOCOOB);		!Table of contents IOB, output.
    $XPO_IOB_INIT (IOB = FO1IOB,		!Standard footnote IOB.
	FILE_SPEC = ('001RNO.TMP'),
	ATTRIBUTES = BINARY);
    $XPO_IOB_INIT (IOB = FO2IOB,		!Temporary working footnote IOB.
	FILE_SPEC = ('002RNO.TMP'),
	ATTRIBUTES = BINARY);
    FOOIOB = FO1IOB;				!Set up "double IOBing"
    FOTIOB = FO2IOB;				!...
    !Open standard error log
    STATUS = $XPO_OPEN (IOB = TTEIOB, FILE_SPEC = $XPO_ERROR, OPTIONS = OUTPUT);
    !Open user's terminal for input
    STATUS = $XPO_OPEN (IOB = TTIIOB, FILE_SPEC = $XPO_INPUT, OPTIONS = INPUT);
    !Open user's terminal for output
    STATUS = $XPO_OPEN (IOB = TTOIOB, FILE_SPEC = $XPO_OUTPUT, OPTIONS = OUTPUT);

    !Initialize HCT (header control table)
    HCT_HD_CASE = HCT_HD_MIXED;			! Display 'Page' and 'Index'
    HCT_HEADERS = TRUE;
    HCT_NUMBER_PAGE = TRUE;
    HCT_NMPG_NP = TRUE;
    HCT_SUBTITLE = FALSE;
    HCT_LAYOUT = LAYOUT_STANDARD;		! Standard page arrangement.
    HCT_LAYOUTN = 0;				! ...
    HCT_LAYOUT_NP = LAYOUT_STANDARD;		! ...
    HCT_LAYOUTN_NP = 0;				! ...
    HCT_ODD_EVEN = 0;				! Set to even parity, as each call on NEWPAG
						! flips the parity before outputting the title.

    !Initialize footnote control tables
    INCR I FROM 0 TO FNCT_CONTROL - 1 DO
	FNCT [.I] = 0;
    INCR I FROM 0 TO FNCT_MAX - 1 DO
	BEGIN
	FNESIZ [.I] = 0;
	FNISIZ [.I] = 0;
	END;

!
    !Initialize tables for variables (.VARIABLE and /VARIANT)
    VRCNT = 0;					!There are no variables defined yet.
    VRTFLG [0] = %C' ';
    VRFFLG [0] = %C' ';
    VRBOOL [0] = TRUE;
!
!	Initialize the IFSTACK
    IFSTK [0, IFSTK_DEPTH] = 0;			!There are no active ".IFs"
    IFSTK [0, IFSTK_REQ_D] = 0;
    IFSTK [0, IFSTK_BOOL] = TRUE;
    IFSTK [0, IFSTK_VR] = 0;
    IFSTK [0, IFSTK_SOURCE] = 0;
    IFSTK [0, IFSTK_FLAG] = %C' ';
!
    !Initialize .LIST ELEMENT character "counter".
    LSTCHR = CHLST;
    LSTCHR [0] = 0;
    !Initialize list of .LIST ELEMENT counters
    LSTCNT = LSTSTF;
    !Initialize .LIST ELEMENT display information
    LSTLCH = LCHLST;
    LSTRCH = RCHLST;
    LSTLDD = LDDLST;
    LSTLCH [0] = 0;
    LSTRCH [0] = %C'.';
    LSTLDD [0] = TCONVRT_DEC_NOZ;
    LSTCNT [CL_MAX_INDEX] = CL_DEFAULT_SIZE;
    LSTCNT [CL_INDEX] = 1;
    LSTCNT [1] = 0;
    !Initialize inter-list-element spacing;
    LSTSKP = SKPLST;
    LSTSKP [0] = 1;
!
    !Initialize list of .HEADER LEVEL counters
    HLLIST [CL_MAX_INDEX] = 6;
    HLLIST [CL_INDEX] = 1;

    !Set display characteristics for all header level counters to decimal
    INCR I FROM 1 TO .HLLIST [CL_MAX_INDEX] DO
	BEGIN
	HLDSP [.I - 1] = TCONVRT_DEC_NOZ;
	HLLIST [.I] = 0;
	END;
!
    !Initialize .HEADER LEVEL processing controls.
    HLC_CO_NBITS = FALSE;		!Don't carry over underlining and bolding to subtitles,
    HLC_CO_OVR = TRUE;			!but do carry over overstriking.
    HLC_UPPER = 1;			!Force .HL1s to upper case.
    HLC_CAP = MAX_LEVELS;		!First character of all .HLs to upper case.
    HLC_RUNON = 3;			!Generate '-' starting with .HL3
    HLC_HEADLC = 1;			!Skip this many lines after the .HL command
    HLC_HEADLT = 4;			!Anticipate this many lines when doing a test page
    HLC_HEADLB = 3;			!Skip this many lines before the .HL command
    HLC_HEADSP = 2;			!Insert this many spaces after the section number.
    HLC_NO_NUMBER = 99;			!All headers are numbered.
    HLC_CENTER = 99;			!Don't center any headers.

!
    !Initialize tab settings;
    TTABLE [CL_MAX_INDEX] = MAX_TABS;
    TTABLE [1] = 8;

    INCR I FROM 2 TO MAX_TABS DO
	TTABLE [.I] = 8 + .TTABLE [.I - 1];

    TTABLE [CL_INDEX] = MAX_TABS;
    !End of initialization of tab stops
!
    !	! Normal character recognition
    INCR I FROM 0 TO 127 DO
	NATE (.I);

!
    !Set up case translation rules ("as is in input", i.e., .UPPER CASE)
    SETCAS (LEAVE_CASE);

    ! Initialize flag table
    !Set initial enabled or disabled states.
    FLGT [SUB_FLAG, FLAG_ENABLED] = FALSE;		!SUBSTITUTE flag
    FLGT [EFO_FLAG, FLAG_ENABLED] = TRUE;		!ENDFOOTNOTE flag
    FLGT [CON_FLAG, FLAG_ENABLED] = TRUE;		!CONTROL flag
    FLGT [QUO_FLAG, FLAG_ENABLED] = TRUE;		!QUOTE flag
    FLGT [UPP_FLAG, FLAG_ENABLED] = TRUE;		!UPPERCASE flag
    FLGT [LOW_FLAG, FLAG_ENABLED] = TRUE;		!LOWERCASE flag
    FLGT [CAP_FLAG, FLAG_ENABLED] = FALSE;		!CAPITALIZE flag
    FLGT [UND_FLAG, FLAG_ENABLED] = TRUE;		!UNDERLINE flag
    FLGT [BLD_FLAG, FLAG_ENABLED] = FALSE;		!BOLD flag
    FLGT [SPA_FLAG, FLAG_ENABLED] = TRUE;		!SPACE flag
    FLGT [IND_FLAG, FLAG_ENABLED] = FALSE;		!INDEX flag
    FLGT [HYP_FLAG, FLAG_ENABLED] = FALSE;		!HYPHENATE flag
    FLGT [OVR_FLAG, FLAG_ENABLED] = FALSE;		!OVERSTRIKE flag
    FLGT [SBX_FLAG, FLAG_ENABLED] = TRUE;		!SUBINDEX flag
    FLGT [COM_FLAG, FLAG_ENABLED] = TRUE;		!COMMENT flag
    FLGT [PER_FLAG, FLAG_ENABLED] = FALSE;		!PERIOD flag
    FLGT [BRK_FLAG, FLAG_ENABLED] = FALSE;		!BREAK flag

    !Set up default flag characters for all flags.
    FLGT [SUB_FLAG, FLAG_CHARACTER] = %C'$';		!SUBSTITUTE flag
    FLGT [EFO_FLAG, FLAG_CHARACTER] = %C'!';		!ENDFOOTNOTE flag
    FLGT [CON_FLAG, FLAG_CHARACTER] = %C'.';		!CONTROL flag
    FLGT [QUO_FLAG, FLAG_CHARACTER] = %C'_';		!QUOTE flag
    FLGT [UPP_FLAG, FLAG_CHARACTER] = %C'^';		!UPPERCASE flag
    FLGT [LOW_FLAG, FLAG_CHARACTER] = %C'\';		!LOWERCASE flag
    FLGT [CAP_FLAG, FLAG_CHARACTER] = %C'<';		!CAPITALIZE flag
    FLGT [UND_FLAG, FLAG_CHARACTER] = %C'&';		!UNDERLINE flag
    FLGT [BLD_FLAG, FLAG_CHARACTER] = %C'*';		!BOLD flag
    FLGT [SPA_FLAG, FLAG_CHARACTER] = %C'#';		!SPACE flag
    FLGT [IND_FLAG, FLAG_CHARACTER] = %C'>';		!INDEX flag
    FLGT [HYP_FLAG, FLAG_CHARACTER] = %C'=';		!HYPHENATE flag
    FLGT [OVR_FLAG, FLAG_CHARACTER] = %C'%';		!OVERSTRIKE flag
    FLGT [SBX_FLAG, FLAG_CHARACTER] = %C'>';		!SUBINDEX flag
    FLGT [COM_FLAG, FLAG_CHARACTER] = %C'!';		!COMMENT flag
    FLGT [PER_FLAG, FLAG_CHARACTER] = %C'+';		!PERIOD flag
    FLGT [BRK_FLAG, FLAG_CHARACTER] = %C'|';		!BREAK flag
!
    ! Update action table to be consistant with
    ! the flag table.
    ATABLE [.FLGT [QUO_FLAG, FLAG_CHARACTER]] = A_FLAG;	!Enable QUOTE flag
    ATABLE [.FLGT [UPP_FLAG, FLAG_CHARACTER]] = A_FLAG;	!Enable UPPERCASE flag
    ATABLE [.FLGT [LOW_FLAG, FLAG_CHARACTER]] = A_FLAG;	!Enable LOWERCASE flag
    ATABLE [.FLGT [UND_FLAG, FLAG_CHARACTER]] = A_FLAG; !Enable UNDERLINE flag
    ATABLE [.FLGT [SPA_FLAG, FLAG_CHARACTER]] = A_FLAG; !Enable SPACE flag
!
    ! Initialize IRAC
    IRAC_IPAGEN = 1;				!Input starts on page 1.
    IRAC_ISEQN = 0;
    IRAC_BARS = FALSE;				!Don't want change bars.
    IRAC_DRAFT_FLG = %C' ';			!Default /DRAFT flag.
!		End of IRAC initialization
!

    !!Initialize SCA
    BEGIN
    MAP
	SCA : VECTOR[SCA_SIZE];
    MAP
	MRA : REF FIXED_STRING;

    INCR I FROM 0 TO SCA_SIZE - 1 DO SCA[.I] = 0;
    SCA_FC_CASE = TRUE;
    SCA_RM = 60;
    SCA_LM = 0;
    SCA_SPACING = 1;
    SCA_FC = TRUE;
    SCA_FILL = TRUE;
    SCA_JUSTIFY = TRUE;
    SCA_CROCK = TRUE;
    SCA_PERIOD = TRUE;
    SCA_FLAGS = TRUE;
    SCA_DO_UND = TRUE;
    SCA_DO_BLD = TRUE;
    SCA_DO_OVR = TRUE;
    SCA_DO_HYP = TRUE;
    SCA_DO_IND = TRUE;
    SCA_SECT_EMPTY = TRUE;			!No HEADER LEVELs with text yet.
    SCA_INDEX = TRUE;				!Obey indexing commands.
    SCA_XROUTINE = FALSE;			!FALSE ==> use XR as the indexing routine.
    SCA_BAR_CHAR = %C'|';			!Default change bar character.


    SCA_WRD_PNTR = .FS_START (MRA);
    SCA_WRD_CPEND = RINTES;
    END;
    !End of initialization of SCA
!
!
    !initialize OUTOPT
    OUTOPT_UND_CHAR = %C'_';
    OUTOPT_UND_NOSP = FALSE;			!Underline character is not non-spacing.
    OUTOPT_UND_SEP = FALSE;			!Don't use a separate line for
    						!underlining.
    OUTOPT_OVER = TRUE;				!Do special functions by overprinting.
    OUTOPT_BACK = FALSE;			!Do not use the backspace character.
!

    !Pick up date and time
    RNODAT (DATTIM);

    !initialize GCA
    GCA_AUTOSUBT = TRUE;			!Default is .AUTOSUBTITLE 1
    GCA_AUTOPARA = FALSE;			!Default is .NO AUTOPARAGRAPH
    GCA_AUTOTABL = FALSE;			!Default is .NO AUTOTABLE
    GCA_AUTOJUST = TRUE;			!Default is .AUTOJUSTIFY
    GCA_KEEP = FALSE;				!Default is .NO KEEP
    GCA_MAX_ASTN = 1;				!...
    GCA_BARS = FALSE;				!Don't want change bars.
    GCA_BARS_ENAB = FALSE;			!...
    GCA_BARS_ON = FALSE;			!...
    GCA_EVER_BARS = FALSE;			!Change bars never seen.
    GCA_CMD_BAR = TRUE;				!Assume user won't forbid bars.
    GCA_CMD_RIT = FALSE;			!Don't shift /RIGHT.
    GCA_DEBUG_CND = FALSE;			!Don't assume /DEBUG:CONDITIONALS
    GCA_DEBUG_INDEX = FALSE;			!Don't assume /DEBUG:INDEX
    GCA_DEBUG_TOC = FALSE;			!Don't assume /DEBUG:CONTENTS
    GCA_DEBUG_FIL = FALSE;			!Don't assume /DEBUG:FILES
    GCA_CMD_UND = TRUE;				!Assume user won't forbid underlining.
    GCA_CMD_BLD = TRUE;				!Assume user won't forbid bolding.
    GCA_CMD_OVR = TRUE;				!Assume user won't forbid overstriking.
    GCA_CMD_IND = TRUE;				!Assume user won't forbid indexing.
    GCA_BIX = FALSE;				!Assume user won't say /BIX
    GCA_CMD_BTC = FALSE;			!Assume user won't say /BTC
    GCA_BTC = FALSE;				!...
    GCA_PWIDTH = 150;
    GCA_LWIDTH = 60;
    GCA_NOTE_PRIM = 15;				!Primary margins for .NOTE
    GCA_NOTE_ALT = 4;				!Secondary margins for .NOTE
    GCA_SKIPPING = FALSE;			!There are no active ".IFs"
    GCA_NORMAL_XTN = 1;
    GCA_FOOT_XTN = 1;
    GCA_INDEX_FMT = TRUE;			!Generate DOTS in the index
    GCA_XCASE = ONE_CAP;			!Default index case rule is cap. first letter.
    GCA_MAX_REQUIRE = MAX_REQUIRE;
    GCA_REQ_DEPTH = 0;				!No .REQUIRES yet (i.e., main file)
    GCA_PAGE_CNT = 0;				!Have no physical pages yet.
    GCA_PCHAX = FALSE;				!No pending .NUMBER CHAPTER/APPENDIX.
    GCA_FLAG_CMD = H_FLAGS_ALL;
    GCA_CASE = LEAVE_CASE;
    GCA_CMD_ISQ = FALSE;			!Don't output input line sequence numbers.
    GCA_ORANGE_CNT = 0;				!No output pages specified.
    GCA_SKIP_OUT = FALSE;			!Start outputting immediately.
    GCA_CMD_QUICK = FALSE;			!Assume user won't say /QUICK.
!
    !initialize PHAN
    PHAN_PLINES = 66;				!Can have this many lines per page at most,
%IF
    %BLISS (BLISS32)
%THEN
    PHAN_SLINES = 66;
%ELSE
    PHAN_SLINES = 60;				!but the spooler allows only this many,
%FI
    PHAN_LLINES = 58;				!and I'm going to let you try to write this many.
    PHAN_TOP_PAGE = TRUE;			!Start at top of a new page
    PHAN_LINES_TP = 0;
    PHAN_FIGURE = 0;				!No waiting figures
    PHAN_TOP_FIRST = TRUE;			!Output starts at top of first page.
    PHAN_HEADER = FALSE;			!Don't want header at top of first page unless .FIRST TITLE
    PHAN_FORM_PEND = FALSE;			!No pending form feed.
    PHAN_PAGING = TRUE;				!Divide document into pages.
    PHAN_CMD_PAGING = TRUE;			!Assume /PAGING
    PHAN_RIGHT = 0;				!Don't shift output right.
    PHAN_DOWN = 0;				!Don't move output down on page.
    PHAN_SIMULATE = FALSE;			!Don't simulate formfeeds.
    PHAN_BOTTOM = 0;				!Nothing on page yet.
    PHAN_PAUSE = FALSE;				!Don't assume /PAUSE
    PHAN_LCHAR = 0;				!No character to the left of the page number
    PHAN_RCHAR = 0;				!No character to the right of the page number
!
!Initialize current page number
    BEGIN

    MAP
	PAGEN : VECTOR [PAGE_SCT_SIZE];

    INCR I FROM 0 TO PAGE_SCT_SIZE - 1 DO
	PAGEN [.I] = 0;

    END;
    PAGEN [SCT_PAGE] = 1;
    PAGEN [SCT_RUN_PAGE] = 1;
    
    !Set up initial display characteristics for the
    !various parts of the page number.
    PAGEN [SCT_PAGE_D] = TCONVRT_DEC_NOZ;	!Page number part to decimal, no leading zeros.
    PAGEN [SCT_INDEX_D] = TCONVRT_LET_MIX;	!The word index appears as "Index"
    PAGEN [SCT_CHAPT_D] = TCONVRT_DEC_NOZ;	!Chapters to decimal, no leading zeroes.
    PAGEN [SCT_APPEN_D] = TCONVRT_LET_UPP;	!Appendices to upper case letters.
    PAGEN [SCT_SUBPG_D] = TCONVRT_LET_UPP;	!Subpages to upper case letters.
    !End of initialization of current page number
    !Initialize next page number
    BEGIN

    MAP
	NPAGEN : VECTOR [PAGE_SCT_SIZE],
	PAGEN  : VECTOR [PAGE_SCT_SIZE];

    INCR I FROM 0 TO PAGE_SCT_SIZE - 1 DO
	NPAGEN [.I] = .PAGEN [.I];

    END;
    NPAGEN [SCT_PAGE] = 2;
    NPAGEN [SCT_RUN_PAGE] = 2;
    !End of initialization of next page number.

    !Initialize paragraph description table.
    PDT = PDTSTF;				!Point to paragraph information.
    PDT_TP = 2;					!Make sure this many lines are available on current page,
    PDT_SKIP = 1;		!then skip this many lines unless at top of page or section is empty,
    PDT_INDENT = 5;				!and finally, indent this much,
!
    !Delete left over index entries, if any.
    IF!
	.NDXPOL NEQ 0
    THEN
	BEGIN

%IF NOT %BLISS(BLISS16)
%THEN
	FPOOL(NDXPOL);
%FI

	NDXSGE=0;
	NDXSGF=0;
	END;
    IF!
	.XTNPOL NEQ 0
    THEN
	BEGIN
	!Clear left over transaction numbers

%IF NOT %BLISS(BLISS16)
%THEN
	FPOOL(XTNPOL);
%FI

	XTNCNT = 0;				!No transaction numbers yet.
	XPAGEN = 0;
	XTNLSP = 0;
	XTNLSX = 0;
	XTNSGP = 0;
	XTNTAB = 0;
	END;
    END;					!End of RINIT

END						!End of module

ELUDOM


