%TITLE 'file processing interface and command line handler'
MODULE CLHOOO (					!
		IDENT = '025'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!			  COPYRIGHT (c) 1981 BY
!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: file processing interface and command line handler.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1978
!
! MODIFIED BY:
!
!	025	REM00025	Ray Marshall	3-April-1982
!		Modified CLH_CLOSE_DEL_OUT function such that if the device
!		  is a terminal, there will be no attempt to delete.  XPORT
!		  should be doing this, but it isn't!
!
!	024	REM00024	Ray Marshall	28-December-1981
!		Added %TITLE and %SBTTLs.
!		Removed routine RNO_IERROR.  It was not global and not used
!		  anywhere within this module!
!
!	023	REM00023	Ray Marshall	9-December-1981
!		Add function CLH_CLOSE_DEL_OUT to close and delete the output
!		  .MEM file.  Used if a fatal command line error is detected
!		  after the output file has been opened and created.
!
!	022	KAD00022	Keith Dawson	2 December 1981
!		Add default file type of .RNO to Require open-file.
!		Note that Idents 018 through 021 were on the variant line of
!		  development for "related Require," now abandoned. The final
!		  version in that line of descent will be found in the CMS 
!		  library as variant 4R1.
!
!	017	REM00017	Ray Marshall	25 July 1981
!		Include BELL & DELL macro definitions so the REQUIRE 'MSG.REQ'
!		  can be removed.
!
!	016	REM00016	Ray Marshall	25 June 1981
!		Fixed up comments about the BLISS /VARIANT: command.
!
!	015	KAD00015	K. A. Dawson	   June 1980
!		Added conditional call on BL$XIT() for graceful exit on PDP-11
!		  for ctrl/Z at input-file prompt.
!
!	V123	KAD00014	K. A. Dawson	   June 1980
!		XPO$OPEN failures now put out XPORT error messages
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BWAIT : NOVALUE,
    FBWAIT : NOVALUE,
    GET_OUT_DEFAULT : NOVALUE;

!
! INCLUDE FILES:
!
REQUIRE 'REQ:RNODEF.REQ';			!RUNOFF characteristics

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLHCC.REQ';

REQUIRE 'REQ:CLHOPS.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:IRAC.REQ';

REQUIRE 'REQ:LETTER.REQ';

REQUIRE 'REQ:LSTBTS.REQ';

!
! MACROS:
!

MACRO
    XPROMPT (TEXT) =
		($XPO_PUT( IOB = TTOIOB,
			  STRING = (%CHARCOUNT(TEXT),
				    CH$PTR(UPLIT(TEXT))) )  )%;
MACRO BELL = %CHAR(%O'07')%;

MACRO DEL = %CHAR(%O'177')%;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

OWN
    !This is OWN rather than local so
    !that debugging with SIX12 is easier.
    STATUS;

!
!The following two lists of file types determine which output file
!type results from an input file type.  The two lists must remain
!in order since translation is done by searching down one list and
!using the computed index to fetch the result from the other list.

BIND
    IN_TYPE = PLIT (
		 CH$PTR(UPLIT('.RNO')),	!Produces .MEM
		 CH$PTR(UPLIT('.RNB')), !Produces .BLB
		 CH$PTR(UPLIT('.RNC')), !Produces .CCO
		 CH$PTR(UPLIT('.RND')), !Produces .DOC
		 CH$PTR(UPLIT('.RNE')), !Produces .ERR
		 CH$PTR(UPLIT('.RNH')), !Produces .HLP
		 CH$PTR(UPLIT('.RNL')), !Produces .PLM
		 CH$PTR(UPLIT('.RNM')), !Produces .MAN
		 CH$PTR(UPLIT('.RNP')),	!Produces .OPR
		 CH$PTR(UPLIT('.RNS')), !Produces .STD
		 CH$PTR(UPLIT('.RNX')),	!Produces .MEX
		 CH$PTR(UPLIT('.RNT'))	!Produces .MEC
					): VECTOR;

BIND
    OUT_TYPE = PLIT (
		  CH$PTR(UPLIT('.MEM')), !From .RNO
		  CH$PTR(UPLIT('.BLB')), !From .RNB
		  CH$PTR(UPLIT('.CCO')), !From .RNC
		  CH$PTR(UPLIT('.DOC')), !From .RND
		  CH$PTR(UPLIT('.ERR')), !From .RNE
		  CH$PTR(UPLIT('.HLP')), !From .RNH
		  CH$PTR(UPLIT('.PLM')), !From .PNL
		  CH$PTR(UPLIT('.MAN')), !From .RNM
		  CH$PTR(UPLIT('.OPR')), !From .RNP
		  CH$PTR(UPLIT('.STD')), !From .RNS
		  CH$PTR(UPLIT('.MEX')), !From .RNX
		  CH$PTR(UPLIT('.MEC'))  !From .RNT
					 ): VECTOR;

OWN
    DEF_OUT_LNG,
    DEF_OUT_SPC : VECTOR [CH$ALLOCATION (50)];

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FRA : FIXED_STRING,
    GCA : GCA_DEFINITION,
    FS01 : FIXED_STRING,
    IRA : FIXED_STRING,
    IRAC : IRAC_DEFINITION;

EXTERNAL
    IOBSTK : BLOCK,				!IOB stack for doing .REQUIRE.
    RNEIOB : REF $XPO_IOB (),			!Always points to IOB for primary input.
    RNIIOB : REF $XPO_IOB (),			!Primary input file
    RNOIOB : REF $XPO_IOB (),			!IOB for output file
    TSIIOB : $XPO_IOB (),			!IOB for STREAM input from terminal.
    TTIIOB : $XPO_IOB (),			!IOB for input from terminal
    TTOIOB : $XPO_IOB ();			!IOB for output to terminal

EXTERNAL LITERAL 				!Error messages
    RNFILE,
    RNFRTL;

EXTERNAL ROUTINE
    ERMS,
    PUTMSG,
    TSTTFE;

%sbttl 'CLH -- OPCODE controlled main-line routine'
GLOBAL ROUTINE CLH (OPCODE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	OPCODE specifies the operation to be performed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	See CLHCC.REQ for a description.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    CASE .OPCODE FROM 1 TO CLH_OPS_COUNT OF
	SET
%sbttl 'CLH -- open input file'

	[CLH_OPEN_INPUT] :
	    !Open primary input file.
	    BEGIN

%IF NO_CLI
%THEN
	    !If this program is compiled with /VARIANT: bit 0 set, the
	    !standard command line interface is not to be used.  In such a case
	    !RUNOFF prompts for the file names.
	    !NOTE: See RUNOFF also!!!
	    XPROMPT ('Enter input file name:');
	    STATUS = $XPO_GET (IOB = TTIIOB);
%IF	%BLISS(BLISS32)
%THEN
	    !Return to system if user said just ^Z to the prompt
	    IF
		.STATUS EQL XPO$_END_FILE
	    THEN
		BEGIN
		LIBRARY 'SYS$LIBRARY:STARLET';
		$EXIT(CODE=1);
		END;
%FI
%IF	%BLISS(BLISS16)
%THEN
	    !Return to system if user said just ^Z to the prompt
	    IF
		.STATUS EQL XPO$_END_FILE
	    THEN
		BEGIN
		EXTERNAL ROUTINE
		    BL$XIT;
		BL$XIT();
		END;
%FI
	    STATUS = $XPO_IOB_INIT (IOB = .RNIIOB);
	    STATUS = $XPO_OPEN (IOB = .RNIIOB, 	!
		OPTIONS = INPUT, 		!
		FILE_SPEC = TTIIOB [IOB$T_STRING] ,	!
		DEFAULT = (4,CH$PTR(UPLIT('.RNO'))) );
%ELSE
	    !If this program is compiled with /VARIANT: bit 0 cleared,
	    !the standard command line handling is used.
	    !NOTE: See RUNOFF also!!!
	    STATUS = $XPO_OPEN (IOB = .RNIIOB, 	!
		DEFAULT = (4,CH$PTR (UPLIT ('.RNO'))),	!
		FAILURE = XPO$IO_FAILURE,			!
		OPTIONS = INPUT);
%FI

	    BEGIN
	    !Pick of the name and length of the file spec
	    BIND
		FILE_SPEC_STUFF = RNIIOB [IOB$T_RESULTANT] : $STR_DESCRIPTOR ();
	    IRAC_FSPECP = .FILE_SPEC_STUFF [STR$A_POINTER];
	    IRAC_FSPECC = .FILE_SPEC_STUFF [STR$H_LENGTH];
	    END;

	    IF 					!
		NOT .STATUS
	    THEN 				!
		BEGIN
		RETURN CLH_CANT_OPEN;
		END
	    ELSE 				!
		BEGIN
		RETURN CLH_NORMAL;
		END;

	    END;
%sbttl 'CLH -- open output file'

	[CLH_OPEN_OUT] :
	    !Open output file.
	    BEGIN
	    GET_OUT_DEFAULT (RNIIOB [IOB$T_RESULTANT]); 	!

%IF NO_CLI
%THEN
	    XPROMPT ('Enter output file name:');
	    STATUS = $XPO_GET (IOB = TTIIOB);
	    STATUS = $XPO_IOB_INIT (IOB = .RNOIOB);
	    STATUS = $XPO_OPEN (IOB = .RNOIOB, 	!
		OPTIONS = OUTPUT, 		!
		ATTRIBUTES = STREAM,
		FILE_SPEC = TTIIOB [IOB$T_STRING] ,	!
		DEFAULT = (.DEF_OUT_LNG,CH$PTR(DEF_OUT_SPC)) );
%ELSE
	    STATUS = $XPO_OPEN (IOB = .RNOIOB, 	!
		OPTIONS = OUTPUT, 		!
		ATTRIBUTES = STREAM,
		RELATED = RNIIOB [IOB$T_RESULTANT],	!
		FAILURE = XPO$IO_FAILURE ,
		DEFAULT = (.DEF_OUT_LNG, CH$PTR(DEF_OUT_SPC)) );!
%FI

	    IF 					!
		NOT .STATUS
	    THEN 				!
		BEGIN
		RETURN CLH_CANT_OPEN;
		END
	    ELSE 				!
		RETURN CLH_NORMAL;

	    END;
%sbttl 'CLH -- Read one record from current input file'

	[CLH_READ_INPUT] :
	    !Read one record from current input file.
	    BEGIN
	    STATUS = $XPO_GET (IOB = .RNIIOB);

	    IF 					!
		.STATUS				!
		OR (.STATUS EQL XPO$_TRUNCATED)	!Truncated records are really not too bad.
	    THEN 				!
	    !A record was successfully read. Set up information
	    !needed by the remainder of the program.
		BEGIN
		IRAC_ISEQN = .RNIIOB [IOB$G_SEQ_NUMB];	!Input record/sequence number.
		IRAC_IPAGEN = .RNIIOB [IOB$H_PAGE_NUMB];	!Input page number.
		IRAC_SEQN_FLAG = .RNIIOB [IOB$V_SEQUENCED];	!Indicates meaning of IRAC_ISEQN.
		
		!Inform user if it was a truncated record that
	 	!was read.
		IF!
		    .STATUS EQL XPO$_TRUNCATED
		THEN
		    ERMS(RNFRTL,
			 .RNIIOB [IOB$A_STRING],
			 MIN(.RNIIOB [IOB$H_STRING],50) );

		!Set up the input as a FIXED_STRING.
		FS_START (IRA) = .RNIIOB [IOB$A_STRING];
		FS_NEXT (IRA) = .FS_START (IRA);
		FS_MAXSIZE (IRA) = .RNIIOB [IOB$H_STRING];
		FS_LENGTH (IRA) = .FS_MAXSIZE (IRA);
!******PATCH TO GET AROUND XPORT DEFICIENCIES
!Upon entering this block, the fixed string IRA is set up such that
!FS_NEXT(IRA) returns a CH$PTR to the first character to be processed.
!The contents of KHAR are undefined.  The block is exited with the
!same conditions holding; the only effects are:
!	1. Updating the input page/line counters, and
!	2. Movement of FS_NEXT(IRA) over all LEADING formfeeds, nulls,
!	   and dels.
		BEGIN

		LITERAL
		    FF = %O'014';

		LOCAL
		    PTR,
		    X;

		WHILE (.FS_LENGTH(IRA) GTR 0) DO

		    BEGIN

		    !First point to the character about to be considered.
		    PTR = .FS_NEXT (IRA);
		    !Now, actually pick up the character.  Note that
		    !FS_RCHAR is not used because it advances its pointer
		    !such that if this character is not to be discarded we can't
		    !back up.
		    X = CH$RCHAR (.PTR);

		    SELECT .X OF
			SET

			[FF] :
			    BEGIN
			    !If the file is sequenced, LEADING formfeeds do not
			    !start new pages; the assumption here is that the
			    !file will be looked at using the same editor (presumably SOS)
			    !as the one that created it, and that editor behaves like
			    !SOS.  The action for sequenced files is
			    !simply to ignore the formfeed.
			    !For unsequenced files, leading formfeeds do start new
			    !pages, especially if you look at that file using SOS.
			    !In such cases, XPORT does not pay attention to the
			    !formfeeds, and feeds them through without counting a
			    !new page.  In this case, WE have to look for them and
			    !set up the page and sequence number items.
			    !(Note however that XPORT does count pagemarks).

			    IF 			!
				NOT .RNIIOB [IOB$V_SEQUENCED]
			    THEN 		!
				BEGIN
				IRAC_IPAGEN = .IRAC_IPAGEN + 1;
				IRAC_ISEQN = 1;
				RNIIOB [IOB$G_SEQ_NUMB] = .IRAC_ISEQN;
				RNIIOB [IOB$H_PAGE_NUMB] = .IRAC_IPAGEN;
				END;

			    END;

			[0, FF, DEL] :
			    BEGIN
			    !Actually read the character that is being rejected.
			    !This results in FS_NEXT(IRA) pointing to the next
			    !character that is to be considered.
			    FS_RCHAR (IRA, X);	!(X is a dummy for this one line.)
			    END;

			[OTHERWISE] :
			    EXITLOOP;
			TES;
		    END;

		END;
!******END OF PATCH
		RETURN CLH_NORMAL;
		END
	    ELSE 				!
		BEGIN

		IF 				!
		    .STATUS EQL XPO$_END_FILE
		THEN 				!
		!End of file processing
		    BEGIN

		    IF 				!
			.GCA_REQ_DEPTH NEQ 0
		    THEN 			!
		    !It's a ".REQUIRE" file to be closed.
			BEGIN
			CLH (CLH_POP);
			! Note that the following is a recursive call on this
			! particular code sequence.  When CLH encounters an end
			! of file when it attempts to read a record from a
			! require file, it must still, nevertheless, return a
			! record, unless there is not more input.  If a
			! .REQUIRE command is the last record read from the
			! file that referenced the file just closed, then the
			! attempt to read a record from that file will also
			! meet with an end of file being detected.  In this
			! case, you have to pop that file too, and try again.
			! That happens until either a record is finally read,
			! or all files have been popped and an end of file
			! occurs when trying to read the main input file.
			RETURN CLH (CLH_READ_INPUT);
			END;

		    !End of file on primary input file.
		    FS_LENGTH (IRA) = 0;
		    RETURN CLH_END_FILE;
		    END
		ELSE 				!
		!Error reading input file.
		    BEGIN
		    FS_LENGTH (IRA) = 0;
		    RETURN CLH_CANT_READ;
		    END;

		END;

	    END;
%sbttl 'CLH -- Write 1 record to O/P file with CRLF suffix'

	[CLH_WRITE_OUT] :
	    !Write one record to the output file.
	    BEGIN
	    !Append carriage control information to the record
	    FS_WCHAR (FRA, %O'15');		!Carriage return
	    FS_WCHAR (FRA, %O'12');		!Line feed
	    STATUS = $XPO_PUT (IOB = .RNOIOB, 	!
		STRING = (.FS_LENGTH (FRA), .FS_START (FRA)) );
	    !Remove the appended characters from the end of the buffer
	    FS_NEXT (FRA) = CH$PLUS (.FS_NEXT (FRA), -2);	!Back up pointer
	    FS_LENGTH (FRA) = .FS_LENGTH (FRA) - 2;		!Back up counter

	    IF 					!
		.STATUS
	    THEN 				!
		RETURN CLH_NORMAL;

	    END;
%sbttl 'CLH -- Write 1 record to O/P file w/o CRLF suffix'

	[CLH_OUT_NOCRLF] :
	    !Write one record to the output file.
	    !Don't add carriage control information.
	    BEGIN
	    STATUS = $XPO_PUT (IOB = .RNOIOB, 	!
		STRING = (.FS_LENGTH (FRA), .FS_START (FRA)) );

	    IF 					!
		.STATUS
	    THEN 				!
		RETURN CLH_NORMAL;

	    END;
%sbttl 'CLH -- file closing functions'

	[CLH_CLOSE_INPUT] :
	    !Close current input file.
	    BEGIN
	    STATUS = $XPO_CLOSE (IOB = .RNIIOB);
	    RETURN CLH_NORMAL;
	    END;

	[CLH_CLOSE_OUT] :
	    !Close output file
	    BEGIN
	    STATUS = $XPO_CLOSE (IOB = .RNOIOB);
	    RETURN CLH_NORMAL;
	    END;

	[CLH_CLOSE_DEL_OUT] :
	    !Close output file
	    BEGIN
	    IF .RNOIOB[IOB$V_TERMINAL] THEN		! If it's a terminal,
		STATUS = $XPO_CLOSE (IOB = .RNOIOB)	!   just close it.
	    ELSE
		BEGIN
		STATUS = $XPO_CLOSE (IOB = .RNOIOB,	! Otherwise, close
				 OPTIONS = REMEMBER);	!   and delete it.
		STATUS = $XPO_DELETE (IOB = .RNOIOB)
		END;
	    RETURN CLH_NORMAL;
	    END;
%sbttl 'CLH -- Push IOB onto stack'

	[CLH_PUSH] :
	    BEGIN
	    !If there are not too many files already open
	    !allocate a new IOB on IOBSTK (pointed to by
	    !RNIIOB).

	    IF 					!
		.GCA_REQ_DEPTH NEQ .GCA_MAX_REQUIRE
	    THEN 				!
		BEGIN
		RNIIOB = IOBSTK + (IOB$K_LENGTH*%UPVAL)*.GCA_REQ_DEPTH;
		GCA_REQ_DEPTH = .GCA_REQ_DEPTH + 1;
		RETURN CLH_NORMAL;
		END
	    ELSE
	    !No room on IOB stack for the IOB.
		RETURN CLH_NO_SPACE;

	    END;
%sbttl 'CLH -- Pop IOB from stack and re-access previous one'

	[CLH_POP] :
	    !Cause RUNOFF to stop reading from the current file
	    !and read from the previous file instead.
	    BEGIN

	    IF 					!
		.GCA_REQ_DEPTH EQL 0
	    THEN 				!
		BEGIN
		!Internal logic error: should not try to
		!pop the main file.
		0
		END
	    ELSE
		BEGIN

		! Forcefully terminate open .LIST, .NOTE and .IF commands that
		! are still open when the file in which they occured is about
		! to be closed.  I.E., do not allow .END commands to be in a
		! different file than the the opening .LIST, .NOTE,... command.

		TSTTFE (.GCA_REQ_DEPTH);
		!Really close the file
		IF				!
		    .RNIIOB [IOB$V_OPEN]	!
		THEN
		    !There was a file opened (see REQ.BLI for case when it's not)
		    STATUS = $XPO_CLOSE (IOB = .RNIIOB);
		!Now do pop the file stack.
		RNIIOB = .RNIIOB - (IOB$K_LENGTH*%UPVAL);
		GCA_REQ_DEPTH = .GCA_REQ_DEPTH - 1;

		IF 				!
		    .GCA_REQ_DEPTH EQL 0
		THEN 				!
		!Popped all the way back to primary input file
		    RNIIOB = .RNEIOB;		!Get real primary IOB.

		!The routine ERROR needs the following
		!information in IRAC.
		BEGIN
		!Pick of the name and length of the file spec
		BIND
		    FILE_SPEC_STUFF = RNIIOB [IOB$T_RESULTANT] : $STR_DESCRIPTOR ();
		IRAC_FSPECP = .FILE_SPEC_STUFF [STR$A_POINTER];
		IRAC_FSPECC = .FILE_SPEC_STUFF [STR$H_LENGTH];
		END;
		IRAC_ISEQN = .RNIIOB [IOB$G_SEQ_NUMB];
		IRAC_IPAGEN = .RNIIOB [IOB$H_PAGE_NUMB];
		RETURN CLH_NORMAL;
		END;

	    END;
%sbttl 'CLH -- Open REQUIRE file spec.'

	[CLH_OPEN_REQ] :
	    !Open a file requested on a .REQUIRE command.
	    BEGIN
	    STATUS = $XPO_IOB_INIT (IOB = .RNIIOB);
	    STATUS = $XPO_OPEN (IOB = .RNIIOB, 	!
		OPTIONS = INPUT, 		!  INPUT file
		FAILURE = XPO$IO_FAILURE,	!  Use XPORT's failure routine
		DEFAULT = '.RNO',		!  Default the extension only!
		FILE_SPEC = (.FS_LENGTH(FS01), .FS_START (FS01)) ); ! filename

	    IF 					!
		.STATUS
	    THEN
	    !Reset input line/page counters.
		BEGIN
		IRAC_IPAGEN = 1;
		IRAC_ISEQN = 1;
		BEGIN
		!Pick of the name and length of the file spec
		BIND
		    FILE_SPEC_STUFF = RNIIOB [IOB$T_RESULTANT] : $STR_DESCRIPTOR ();
		IRAC_FSPECP = .FILE_SPEC_STUFF [STR$A_POINTER];
		IRAC_FSPECC = .FILE_SPEC_STUFF [STR$H_LENGTH];
		!Output name of .REQUIRED file in .MEM file, if user
		!said /DEBUG:FILES
		IF
		    .GCA_DEBUG_FIL
		    AND NOT .GCA_SKIP_OUT
		THEN
		    !Yup: User said /DEBUG:FILES and output is being
		    !generated because the current page is included in a /PAGES list
		    BEGIN
		    LOCAL
			WORK_AREA : VECTOR [CH$ALLOCATION (100)],
			WORK_COUNT,
			WORK_PTR;

		    WORK_PTR = CH$PTR (WORK_AREA);
		    WORK_PTR = CH$MOVE (10, CH$PTR (UPLIT ('.REQUIRE "')), .WORK_PTR);
		    WORK_COUNT = 10;
		    WORK_PTR = CH$MOVE (.IRAC_FSPECC, .IRAC_FSPECP, .WORK_PTR);
		    WORK_COUNT = .WORK_COUNT + .IRAC_FSPECC;
		    CH$WCHAR_A (%C'"', WORK_PTR);
		    CH$WCHAR_A (%O'15', WORK_PTR);			!Carriage return
		    CH$WCHAR_A (%O'12', WORK_PTR);			!Line feed
		    WORK_COUNT = .WORK_COUNT + 3;
		    $XPO_PUT (IOB = .RNOIOB, STRING = (.WORK_COUNT, CH$PTR (WORK_AREA)) );
		    END;
		END;
		RETURN CLH_NORMAL;
		END
	    ELSE 				!
		RETURN CLH_CANT_OPEN;

	    END;
%sbttl 'CLH -- Close REQUIRE file (NULL) and bad OPCODE processing'

	[CLH_CLOSE_REQ] :
	    !Close a ".REQUIRE" file.
	    BEGIN
	    0
	    END;

	[OUTRANGE] :
	    !Error in program.
	    BEGIN
	    PUTMSG (RNFILE, CH$PTR (UPLIT ('CLH')), 3);
	    RETURN CLH_END_FILE;		!Make a guess
	    END;
	TES;
	0

    END;					!End of CLH

%sbttl 'GET_OUT_DEFAULT -- compute output filename from input filename'
ROUTINE GET_OUT_DEFAULT (FILE_DESCRIPTOR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the input file type to compute the
!	output file type (i.e., sometimes called extension).
!
! FORMAL PARAMETERS:
!
!	FILE_DESCRIPTOR is a string descriptor for the input file name.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND
	FILE_SPEC_STUFF = .FILE_DESCRIPTOR : $STR_DESCRIPTOR ();

    LOCAL
	FILE_SPECX,
	FILE_SPEC_LNG,
	NAME_LENGTH,
	PARSE_SPEC_BLK : $XPO_SPEC_BLOCK,
	PTR_U_EXT,
	PTR_I,
	PTR_O,
	TYPE_LENGTH,
	U_EXT : VECTOR [CH$ALLOCATION (50)];

    FILE_SPECX = .FILE_SPEC_STUFF [STR$A_POINTER];
    FILE_SPEC_LNG = .FILE_SPEC_STUFF [STR$H_LENGTH];

!The code conditionalized by the %BLISS32 lexical function is
!to get around a bug introduced in version 2.0 of VAX/VMS.
!Logical names now start with an underscore, and this mucks up
!XPORT's file spec parsing.
%IF	%BLISS(BLISS32)
%THEN
	!Inform the builder of RUNOFF that this kludge is here.
	%MESSAGE ('BLISS32 Patch code included to strip "_" from output filespec');
	!Ignore the first character of the file spec if it's
	!an underscore so XPORT; this lets XPORT work correctly.
	IF
	    CH$RCHAR(.FILE_SPECX) EQL %C'_'
	THEN
	    !Curses, it's an underscore.  Do the
	    !kludge.
	    BEGIN
	    FILE_SPECX = CH$PLUS (.FILE_SPECX, 1);
	    FILE_SPEC_LNG = .FILE_SPEC_LNG - 1;
	    END;
%FI
	   !End of crock code.

    !Parse the input file spec to get the specified type.
    $XPO_PARSE_SPEC (SPEC_BLOCK = PARSE_SPEC_BLK, 	!
	FILE_SPEC = (.FILE_SPEC_LNG, .FILE_SPECX) );
    !Start building the output file spec.
    !
    !First set CH$PTRs to the parsed input file name.
    BEGIN
    BIND
	TEMP = PARSE_SPEC_BLK [XPO$T_FILE_NAME] : $STR_DESCRIPTOR ();
    NAME_LENGTH = .TEMP [STR$H_LENGTH];
    PTR_I = .TEMP [STR$A_POINTER];
    END;
    !Set a CH$PTR to where the computed output file spec goes.
    PTR_O = CH$PTR (DEF_OUT_SPC);
    !Copy the input file name to the output file spec.

    INCR I FROM 1 TO .NAME_LENGTH DO
	CH$WCHAR_A (CH$RCHAR_A (PTR_I), PTR_O);

    DEF_OUT_LNG = .NAME_LENGTH;			!Set current length.
    BEGIN
    BIND
	TEMP = PARSE_SPEC_BLK [XPO$T_FILE_TYPE] : $STR_DESCRIPTOR ();
    TYPE_LENGTH = .TEMP [STR$H_LENGTH];
    PTR_I = .TEMP [STR$A_POINTER];
    END;

    !Translate the file type to upper case.
    !Leave the result in U_EXT.
    PTR_U_EXT = CH$PTR (U_EXT);			!CH$PTR to where file type goes when in upper case.
    INCR I FROM 1 TO .TYPE_LENGTH DO
	BEGIN

	LOCAL
	    TEMP;

	TEMP = CH$RCHAR_A (PTR_I);

	IF 					!
	    LOWER_LETTER (.TEMP)
	THEN 					!
	!Convert lower case letter to upper case.
	    TEMP = UPPER_CASE (.TEMP);

	!Put processed character into file type area.
	CH$WCHAR_A (.TEMP, PTR_U_EXT);
	END;

    !Search through IN_TYPEs looking for a type that
    !matches what was given.
    PTR_U_EXT = .OUT_TYPE [0];			!Assume it won't be found, and point to ".MEM".

    INCR I FROM 1 TO .IN_TYPE [-1] DO

	IF CH$EQL (.TYPE_LENGTH,		!
		CH$PTR (U_EXT), 		!
		4, 				!
		.IN_TYPE [.I - 1])
	THEN
	!Found a match.  Set a CH$PTR to the matching output file type.
	    BEGIN
	    PTR_U_EXT = .OUT_TYPE [.I - 1];
	    EXITLOOP;
	    END;

    !Copy the file type to the output file spec area.
    !Note that if there was no match, then PTR_U_EXT points to ".MEM"

    INCR I FROM 1 TO 4 DO
	CH$WCHAR_A (CH$RCHAR_A (PTR_U_EXT), PTR_O);

    DEF_OUT_LNG = .DEF_OUT_LNG + 4;		!Update file spec length.
    END;					!End of GET_OUT_DEFAULT

%sbttl 'FBWAIT -- performs user syncronization for /PAUSE O/P w/FF'
GLOBAL ROUTINE FBWAIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Issues some BELLs (^Gs) and a FORMFEED (^L) and waits for
!	the RUNOFF user to input a single character of hizzer choice.
!	Then returns.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    $XPO_GET (IOB = TSIIOB, 			!
	PROMPT = (3, CH$PTR (UPLIT (%STRING (BELL, BELL, %CHAR (%O'14')))) ), 	!
	CHARACTERS = 1);

    !Send a carriage return, so text starts at the left margin
    $XPO_PUT (IOB = TSIIOB, STRING = (1, CH$PTR(UPLIT(%STRING(%CHAR(%O'15'))))) );

    END;					!End of FBWAIT

%sbttl 'BWAIT -- performs user syncronization for /PAUSE O/P w/o FF'
GLOBAL ROUTINE BWAIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is just like FBWAIT, except that no
!	FORMFEED is issued.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

	EXTERNAL
		TSIIOB: $XPO_IOB();
	$XPO_GET( IOB = TSIIOB,
		  PROMPT = (4, CH$PTR(UPLIT(%STRING(BELL,DEL,BELL,DEL))) ),
		  CHARACTERS = 1 );

    !Send a carriage return, so text starts at the left margin
    $XPO_PUT (IOB = TSIIOB, STRING = (1, CH$PTR(UPLIT(%STRING(%CHAR(%O'15'))))) );

    END;					!End of BWAIT

END						!End of module

ELUDOM
