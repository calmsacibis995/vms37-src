MODULE XPRTOO (	!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!
!	RUNOFF Index processor
!
! ABSTRACT:
!
!
! ENVIRONMENT:
!
! AUTHOR: D. Knight	, CREATION DATE: July 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	XPRT:		NOVALUE,	!Print index
	GET_ENTRY,			!Get entry from storage
	FILL_LINE:	NOVALUE,	!Pack the print line
	INS_LINE_NO:	NOVALUE;	!Insert line number(s) in print line
!
! INCLUDE FILES:
!
REQUIRE 'REQ:BOOL';

REQUIRE 'REQ:INDEX';

REQUIRE 'REQ:NBITS';

REQUIRE 'REQ:PAGEN';

REQUIRE 'REQ:SCA';

!
! MACROS:
!

MACRO
    REPEAT=
	WHILE 1 DO %;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
EXTERNAL LITERAL
	RINTES:UNSIGNED(8);

OWN
	FILL_CNT,			!Size of line to fill
	IND_LVL,			!Index level
	LIST_PTR: REF BLOCK,
	LST_STK: VECTOR[11],		!Temporary stack for storing back links
	SECTIONS;			!TRUE if chapters, and appendices.

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	BUCKET:	VECTOR;

EXTERNAL
	SCA:	SCA_DEFINITION;

EXTERNAL ROUTINE
	GET_DATA,
	XTNPAG,			!Find position in index table
	PACPAG,
	PAGEQL,
	PAGMRG;

EXTERNAL ROUTINE
	ENDCHR,
	GCSKIP,
	OUTNJ;

GLOBAL ROUTINE XPRT (SECTION_FLAG, DOT_FLG) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Print the index as built up by XOUT.
!
! FORMAL PARAMETERS:
!
!	SECTION_FLAG - True if document contains chapters, appendices, etc.
!	DOT_FLG	- True if normal index
!		  False if abbreviated index
!
! IMPLICIT INPUTS:
!
!	SCA_LM		- left margin
!	SCA_RM		- right margin
!	SCA_SPACING	- page spacing
!
! IMPLICIT OUTPUTS:
!
!	FILL_CNT	- blank fill count
!	IND_LVL		- indent level
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	NOT_NULL;

    !Make "chapter-ness" attribute global to rest of module.
    SECTIONS = .SECTION_FLAG;

    !Make sure all buckets are examined.
    INCR I FROM 0 TO 26 DO
	BEGIN

	!Set starting point for listing at head
	LIST_PTR=0;

	IND_LVL=0;
	NOT_NULL=FALSE;

	!Set fill count to half page as default
	FILL_CNT=(.SCA_RM-.SCA_LM)/2;

	REPEAT
	    BEGIN

	    !Get an entry
	    IF!
		NOT GET_ENTRY(.I,FALSE)
	    THEN
		EXITLOOP;

	    NOT_NULL=TRUE;

	    !Put out the entire line and its references.
	    FILL_LINE(.DOT_FLG)

	    END;

	!Put out blank line at end of each non-empty bucket
	IF!
	    .NOT_NULL
	THEN
	    GCSKIP(.SCA_SPACING)
	END;

    END;			!End of XPRT

ROUTINE GET_ENTRY (B_NO,NO_SUBX) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Get a data entry from the working storage space.
!
! FORMAL PARAMETERS:
!
!	B_NO	- bucket #
!	NO_SUBX	- If true, ignore sub-index while advancing
!
! IMPLICIT INPUTS:
!
!	IND_LVL	-  indentation level
!	LIST_PTR - contains current position in list
!
! IMPLICIT OUTPUTS:
!
!	IND_LVL	 - indentation level
!	LIST_PTR - updated position in list.
!	LST_STK	 - temporary stack for saving sub-index lists
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE	- entry found
!	FALSE	- No more entries left in list
!
! SIDE EFFECTS:
!
!	Each time called, the pointer is advanced along the chain of entries
!	in the list.
!
!--

    BEGIN

    LOCAL
	L_PTR: REF BLOCK;

    IF!
	.LIST_PTR EQL 0
    THEN
	!Head of list processing
	BEGIN
	LIST_PTR=GET_DATA(DS_X_ENTRY,.BUCKET[.B_NO]);
	IF!
	    .LIST_PTR[X_TEXT] EQL 0
	THEN
	    RETURN FALSE
	END
    ELSE
	!Processing for all other list elements
	BEGIN
	L_PTR=GET_DATA(DS_X_ENTRY,.LIST_PTR);

	!Look for a sub-list entry
	IF!
	    .L_PTR[X_SUBX] NEQ 0!
	    AND NOT .NO_SUBX
	THEN
	    BEGIN

	    !Remember where we left off by placing top of sub-list on the stack
	    LST_STK[.IND_LVL]=.LIST_PTR;

	    !Point to sub-list
	    LIST_PTR=GET_DATA(DS_X_ENTRY,.L_PTR[X_SUBX]);

	    !Keep track of indentation level
	    IND_LVL=.IND_LVL+1;

	    RETURN TRUE

	    END;

	!Check for end of list
	IF!
	    .L_PTR[X_NEXT] NEQ 0
	THEN
	    LIST_PTR=GET_DATA(DS_X_ENTRY,.L_PTR[X_NEXT])
	ELSE
	    RETURN FALSE;

	!Look out for entries on a sub-list
	IF!
	    .LIST_PTR[X_NEXT] EQL 0
	THEN
	    BEGIN

	    !See if we need to unstack a sub-list
	    IF!
		.IND_LVL EQL 0
	    THEN
		!Nothing to unstack, quit
		RETURN FALSE
	    ELSE
		!Unstack branch of tree
		BEGIN
		IND_LVL=.IND_LVL-1;
		LIST_PTR=.LST_STK[.IND_LVL];
		RETURN GET_ENTRY (.B_NO,TRUE)
		END
	    END
	END;

    TRUE

    END;			!End of GET_ENTRY

ROUTINE FILL_LINE (DOT_FLG) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Collect and print the entire index line, including
!	name and all line number references.
!
! FORMAL PARAMETERS:
!
!	DOT_FLG	- Index flag (TRUE - normal index, FALSE - abbreviated index)
!
! IMPLICIT INPUTS:
!
!	FILL_CNT
!	LIST_PTR - address of list item for index entry
!	SCA_LM
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CHAR_COUNT,
	OUT_COUNT,
	TEXT_PTR;

    !Make sure pointers are set up correctly
    GET_DATA(DS_X_ENTRY,.LIST_PTR);

    !Get source text marker
    TEXT_PTR=CH$PTR(.LIST_PTR[X_TEXT]);

    CHAR_COUNT=CH$RCHAR_A(TEXT_PTR);
    OUT_COUNT=0;

    !Handle indenting
    IF!
	.IND_LVL NEQ 0
    THEN
	INCR I FROM 1 TO .IND_LVL DO
	    BEGIN
	    ENDCHR(%C' ');
	    ENDCHR(%C' ');
	    OUT_COUNT=.OUT_COUNT+2
	    END;

    !Now process the entire line
    INCR I FROM 1 TO .CHAR_COUNT DO
	BEGIN

	LOCAL
	    CHARACTER;

	CHARACTER=CH$RCHAR_A(TEXT_PTR);

	IF!
	    .CHARACTER EQL RINTES
	THEN
	    !Special handling for underscore and bold (overstrike disallowed)
	    BEGIN

	    !Get the special command
	    CHARACTER=CH$RCHAR_A(TEXT_PTR);

	    !Ignore the dummy argument
	    CH$RCHAR_A(TEXT_PTR);

	    !Count off the two skipped characters.
	    I=.I+2;

	    !Process the special option
	    SELECT .CHARACTER OF
		SET

		[%C'B']:
		    !Bold
		    SCA_WRD_AC_BLD=TRUE;

		[%C'O']:
		    !Overstrike
		    BEGIN

		    !Overstriking is NOT handled just like bolding and underlining
		    !You can set SCA_WRD_AC_OVR, but it won't do anything for you.
		    !What you need to do is get access to TSF and MRA, and essentially
		    !duplicate the logic for the OVERTSRIKE flag, as done on DOFLG
		    !Note that overstriking is not done here because whatever sorting
		    !algorithm is done, it's wrong.  Therefore, the strategy is to simply
		    !ignore it.  In the resultant index, overstruck entries will appear
		    !at the top of the set of entries to which they apply, but the
		    !overstriking itself doesn't happen.

		    0	!Dummy value to avoid a compiler message.

		    END;

		[%C'U']:
		    !Underscore
		    SCA_WRD_AC_UND=TRUE;

		TES;

	    END
	ELSE
	    !Normal character
	    BEGIN
	    ENDCHR(.CHARACTER);
	    OUT_COUNT=.OUT_COUNT+1
	    END

	END;

    !Now fill line
    IF!
	.LIST_PTR[X_REF] NEQ 0
    THEN
	BEGIN

	IF!
	    .DOT_FLG
	THEN
	    !Normal Index
	    BEGIN
	    !Generate one blank following the word
	    ENDCHR(%C' ');
	    OUT_COUNT=.OUT_COUNT+1;

	    !Pad line with '. ' until middle of page
	    WHILE (.OUT_COUNT LSS .FILL_CNT) DO
		BEGIN
		IF!
		    .OUT_COUNT
		THEN
		    ENDCHR(%C'.')			!Odd column.
		ELSE
		    ENDCHR(%C' ');			!Even column.
		OUT_COUNT=.OUT_COUNT+1;
		END;
	
	
	    !Add one extra space before the page number
	    ENDCHR(%C' ');
	    END
	ELSE
	    !Abbreviated index
	    BEGIN
	    ENDCHR(%C',');
	    ENDCHR(%C' ');
	    FILL_CNT=.SCA_LM+.SCA_WRD_EXT_L
	    END;

	!Put out the line number(s), if any
	INS_LINE_NO(.LIST_PTR[X_REF])

	END;

    !Terminate the line
    OUTNJ()

    END;			!End of FILL_LINE

ROUTINE INS_LINE_NO (LIST_HEAD) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generate the line number list for the index item
!
! FORMAL PARAMETERS:
!
!	LIST_HEAD - address of line number list
!
! IMPLICIT INPUTS:
!
!	FILL_CNT
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	ENTRY_LENGTH,
	ESTRING:	VECTOR[CH$ALLOCATION(100)],
	ESTRING_L,				!Number of characters in ESTRING.
	ESTRING_P,				!CH$PTR to next position in ESTRING.
	JOIN,
	MORE,
	NEXT_POSITION,
	NEXT_PTR:	REF BLOCK,
	PEEK_POSITION,
	PEEK_PTR,
	POSITION,
	POSIT_PTR:	REF BLOCK;

    POSIT_PTR=.LIST_HEAD;

    WHILE TRUE DO
	BEGIN

	LOCAL
	    HEAD_PNTR : REF BLOCK;


	!Get first position of triplet
	HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.POSIT_PTR);
	IF!
	    .HEAD_PNTR EQL 0
	THEN
	    POSITION = 0
	ELSE
	    POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);

	!Get second position of triplet
	NEXT_PTR=.POSIT_PTR[XX_LINK];
	HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.NEXT_PTR);
	IF!
	    .HEAD_PNTR EQL 0
	THEN
	    NEXT_POSITION = 0
	ELSE
	    NEXT_POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);
	
	!Remember if first two items should be joined.
	JOIN=PAGMRG(.POSITION,.NEXT_POSITION);

	!Cop a peek at third position in triplet.
	IF!
	    .NEXT_PTR NEQ 0
	THEN
	    BEGIN
	    PEEK_PTR=.NEXT_PTR[XX_LINK];
	    HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.PEEK_PTR);
	    IF!
		.HEAD_PNTR EQL 0
	    THEN
		PEEK_POSITION=0
	    ELSE
		PEEK_POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);
	    END
	ELSE
	    BEGIN
	    PEEK_PTR=0;
	    PEEK_POSITION=0;
	    END;
	

	IF!
	    .JOIN
	THEN
	!Skip over adjacent page numbers.  Keep first page number
	!of the triplet in POSITION.  Advance over all pages
	!for which NEXT and PEEK can be merged until
	!you can't peek any more (i.e., end of list) or
	!you can't merge NEXT and PEEK.
	    WHILE PAGMRG(.NEXT_POSITION,.PEEK_POSITION) DO
		BEGIN
		NEXT_POSITION=.PEEK_POSITION;
		NEXT_PTR=.PEEK_PTR;
		!Cop a peek at last item in triplet.
		IF!
		    .NEXT_PTR NEQ 0
		THEN
		    BEGIN
		    PEEK_PTR=.NEXT_PTR[XX_LINK];
		    HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.PEEK_PTR);
		    IF!
			.HEAD_PNTR EQL 0
		    THEN
			PEEK_POSITION=0
		    ELSE
			PEEK_POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);
		    END
		ELSE
		    BEGIN
		    PEEK_PTR=0;
		    PEEK_POSITION=0;
		    END;
	    END;
	!We now have something to output.
	!At this point, POSITION is the transaction number of
	!the first page number of a line entry in the index.
	!NEXT is another page number, or else 0; ditto for PEEK.

	!Build an entry to see how long it is.
	ESTRING_P=CH$PTR(ESTRING);		!Nothing to output yet.
	ESTRING_L=0;				!...
	ESTRING_L=PACPAG(.POSITION,ESTRING_P);

	!Detect matching entries.  This arises if the file contains
	!two or more pages having the same page number and duplicate
	!index entries.
	IF!
	    .JOIN
	THEN
	    IF!
		(.POSITION NEQ .NEXT_POSITION)
		AND PAGEQL(.POSITION, .NEXT_POSITION, TRUE)
	    THEN
		JOIN = FALSE;

	IF!
	    .JOIN!
	    AND (.POSITION NEQ .NEXT_POSITION)	!Don't duplicate page numbers.
	THEN
	    !POSITION and NEXT can be merged.
	    BEGIN
	    !Connect POSITION and NEXT with '-' or ' to '.
	    IF!
		.SECTIONS
	    THEN
	    !In a chapter-oriented document join entries with ' to '.
		BEGIN
		ESTRING_P=CH$MOVE(4,CH$PTR(UPLIT(' to ')),.ESTRING_P);
		ESTRING_L=.ESTRING_L+4;
		END
	    ELSE
	    !Join entries in a non-chapter oriented document with '-'.
		BEGIN
		CH$WCHAR_A(%C'-',ESTRING_P);
		ESTRING_L=.ESTRING_L+1;
		END;
	    !Put second page number into entry.
	    ESTRING_L=.ESTRING_L+PACPAG(.NEXT_POSITION,ESTRING_P);
	    END;

	!See if there will be something else after this entry
	!is put out.
	MORE=
	    (.JOIN
	     AND (.PEEK_POSITION NEQ 0))
	    OR
	    ((.NEXT_POSITION NEQ 0)
	     AND NOT .JOIN);

	!If there will be more, put ', ' after what's been built up
	!so far.
	IF!
	    .MORE
	THEN
	    BEGIN
	    CH$WCHAR_A(%C',',ESTRING_P);
	    CH$WCHAR_A(%C' ',ESTRING_P);
	    ESTRING_L=.ESTRING_L+2;
	    END;

	!Start a new line in the index if this entry won't fit.
	!NOTE: The counting is as follows:
	!(.SCA_WRD_EXT_L + 1) is used instead of just .SCA_WRD_EXT_L because there is
	!always a character pending that has not yet been counted.
	!(.ESTRING_L - .MORE) is used because, if the last character is a space, it will
	!get dropped, below;  and there will be a trailing space IFF additional entries
	!follow (i.e., .MORE is TRUE).  Note that this also makes use of the fact that
	!TRUE is represented as the value 1.
	IF!
	    (.ESTRING_L - .MORE) + (.SCA_WRD_EXT_L + 1) + .SCA_LM GTR .SCA_RM
	THEN
	    BEGIN
	    !NOTE**** The following kludge is a patch needed to
	    !prevent this routine from putting one more character than
	    !allowed onto the output line being built.  That character will
	    !always be a space, and so it's ok to widen the right margin
	    !to avoid the RNFCJL message.
	    SCA_RM = .SCA_RM + 1;
	    !NOTE**** End of first part of kludge patch
	    !Force out filled line.
	    OUTNJ();
	    !NOTE**** Un-do the kludge just perpetrated
	    SCA_RM = .SCA_RM - 1;
	    !NOTE**** End of klude un-doing

	    !Fill line to align fields
	    INCR I FROM 1 TO .FILL_CNT+1 DO
		ENDCHR(%C' ');
	    END;

	!Put entry onto the line.
	ESTRING_P=CH$PTR(ESTRING);
	INCR I FROM 1 TO .ESTRING_L DO
	    ENDCHR(CH$RCHAR_A(ESTRING_P));


	!See if list is exhausted.  If so, return.
	IF!
	    NOT .MORE
	THEN
	    RETURN;
	
	!Set up for next entry
	IF
	    .JOIN
	THEN
	    POSIT_PTR=.PEEK_PTR
	ELSE
	    POSIT_PTR=.NEXT_PTR;

	END;

    END;			!End of INS_LINE_NO

END				!End of module
ELUDOM
