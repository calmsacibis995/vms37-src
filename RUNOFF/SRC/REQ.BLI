MODULE REQOOO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the .REQUIRE command
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: July, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:ARECCC.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLHCC.REQ';

REQUIRE 'REQ:CLHOPS.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GETQSC.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FLGT : FLAG_TABLE,
    FS01 : FIXED_STRING,			!Temporary storage for file-spec
    IRA : FIXED_STRING,
    KHAR;

EXTERNAL LITERAL 				!Error messages
    RNFCOR,
    RNFLOC,
    RNFMFS,
    RNFNTD,
    RNFTAR;

EXTERNAL ROUTINE
    AREC,
    CLH,
    ENDCMT,
    ERM,
    ERMA,
    GETQS,
    RSKIPS;


GLOBAL ROUTINE REQ (HANDLER_CODE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine causes RUNOFF to take its input from the file
!	specified as the parameter to the .REQUIRE command.  Spaces,
!	tabs, and comments following the file-spec are ignored; other
!	characters are not allowed.
!
! FORMAL PARAMETERS:
!
!	Handler_code is passed by DOCM for conformity with other routines.
!	It is never used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	FS01 contains the file-spec of the file ".REQUIREd".  When
!	CLH gets called with the operation CLH_OPEN_REQ it expects
!	to find the file-spec of the file to be opened in FS01.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	RESULT;

    RSKIPS (IRA);				!Skip spaces and tabs before file-spec.
    RESULT = GETQS (FS01);			!Get file-spec into FS01

    IF 						!
	.RESULT EQL GETQS_NORMAL
    THEN
    !Found a file-spec.
	BEGIN
	!Skip trailing spaces, tabs, and comments before opening file.
	!The entire remainder of the record is skipped.
	RSKIPS (IRA);				!Skip trailing spaces and tabs

	IF 					!
		.FLGT [COM_FLAG, FLAG_ENABLED]	!Skip single trailing comment
		AND (.KHAR EQL .FLGT [COM_FLAG, FLAG_CHARACTER])
	THEN
	    ENDCMT ();

	WHILE 1 DO
	    BEGIN
	    !Skip spaces and tabs
	    RESULT = AREC ();

	    IF 					!
		.RESULT EQL END_OF_STRING
	    THEN
		EXITLOOP
	    ELSE

		IF 				!
		    .RESULT EQL CF_COMMENT
		THEN
		!Skip a comment.
		    ENDCMT ()
		ELSE
		!Something other than spaces, tabs, and comments
		!after the file-spec.
		!Note: comments of the form .COMMENT are illegal
		!	here.  If they are to be allowed, this is
		!	the place to put the code to check for them.
		    BEGIN
		    ERMA (RNFTAR, TRUE);
		    RETURN
		    END

	    END;

	!Stack current input file
	RESULT = CLH (CLH_PUSH);

	IF 					!
	    .RESULT NEQ CLH_NORMAL
	THEN
	!No room to stack current input file.
	    BEGIN
	    ERMA (RNFNTD, FALSE);
	    RETURN;
	    END
	ELSE
	!Have ascertained that there is enough room
	!for the control blocks needed for the processing,
	!so try to open the file.
	    BEGIN
	    !CLH expects to find the file-spec in FS01.
	    RESULT = CLH (CLH_OPEN_REQ);

	    IF 					!
		.RESULT EQL CLH_NORMAL
	    THEN
	    !And away we go!!!!!
	    !Popping the file stack is done
	    !automatically by CLH, when it gets
	    !an end of file when it gets called
	    !to read the next input record.
		RETURN
	    ELSE
	    !File could not be opened, damnit.
		BEGIN
		ERM (RNFCOR, .FS_START (FS01), .FS_LENGTH (FS01));
		!Continue with previous file.
		CLH (CLH_POP);
		ERM (RNFLOC, 0, 0);
		RETURN;
		END;

	    END;

	END
    ELSE
    !Missing file-spec, or one not properly delimited.
	BEGIN
	ERMA (RNFMFS, TRUE);
	END;

    END;					!End of REQ

END						!End of module

ELUDOM
