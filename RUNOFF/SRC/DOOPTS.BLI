%TITLE 'Digests and distributes command line information.'
MODULE DOOPTO (					!
		IDENT = '025'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!			  COPYRIGHT (c) 1981 BY
!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Digests and distributes options specified to RUNOFF.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: September, 1978
!
! MODIFIED BY:
!
!	025	REM00025	Ray Marshall	12-April-1982
!		Fix bug introduced in 024 where /NOUNDERLINE caused an "illegal
!		  value" error message.  This fixes the VMS QAR # 01162.
!
!	024	REM00024	Ray Marshall	3-April-1982
!		Added code to do range checking on all numeric and character
!		  values.  Large and negitive values really caused problems
!		  later on in RUNOFF!
!
!	023	REM00023	Ray Marshall	19-November-1981
!		Added support for /[NO]LOG and the DIAG1 & DIAG2 values
!		  passed from the /DEC_INTERNAL qualifier (or switch).
!
!	022	REM00022	Ray Marshall	28-September-1981
!		Cause OUTOPT.REQ to be listed herein.
!		Added comments to require file commands.
!
!	021	KAD00021	Keith Dawson	21-August 1981
!		Process /QUICK qualifier.
!
!	020	REM00020	Ray Marshall	25 July 1981
!		Include BELL & DELL macro definitions so the REQUIRE 'MSG.REQ'
!		can be removed.
!  
!	019	KAD00019	K. A. Dawson,	October 1980
!		For PDP-11, recognize :/| as range-indicator; recognize ,/; as
!		range-separator and as variant-separator. (For V2(1))
!
!	018	KAD00018	K. A. Dawson
!		New TOC format (3).  (For V1(124b))
!--
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

%SBTTL 'MODULE level definitions'

LIBRARY 'NXPORT:XPORT';		!  XPORT macros

REQUIRE 'REQ:BOOL.REQ';		!  Defines TRUE & FALSE literals (only!)

REQUIRE 'REQ:FSPACK.REQ';	!  FIXED_STRING structure & FS_... macros

REQUIRE 'REQ:GCA.REQ';		!  GCA (General Control Array) definitions

REQUIRE 'REQ:GNCC.REQ';		!  Completion codes returned by GNAME.

REQUIRE 'REQ:HCT.REQ';		!  Heading Control Table & layout definitions

REQUIRE 'REQ:KC.REQ';		!  Definition of macros: KCNS, KCS, & TISF

REQUIRE 'REQ:LETTER.REQ';	!  Alpha testing and case changing macros

REQUIRE 'REQ:LSTBTS.REQ';	!  Definitions of: BAR__, CND__, ISQ__, & RIT__

REQUIRE 'REQ:NBITS.REQ';	!  More "__" bit macro definitions (???)

SWITCHES LIST (REQUIRE);	!Enable printing of this require file.
REQUIRE 'REQ:OUTOPT.REQ';	!  Define output control vector elements
SWITCHES LIST (NOREQUIRE);	!Disable printing require files.

REQUIRE 'REQ:PAGEN.REQ';	!  Page-number-control macros and literals

REQUIRE 'REQ:PHDEF.REQ';	!  Page handler control vector definition

REQUIRE 'REQ:RNOMAC.REQ';	!  Command line information from the interface

REQUIRE 'REQ:RUNHAN.REQ';	!  Defines literals for referencing directives

REQUIRE 'REQ:SCA.REQ';		!  Control area definition for text scanner and
				!  translator (SCA)

REQUIRE 'REQ:TOCRTY.REQ';	!  TOC record type definitions (MAJ_ & MIN_)

REQUIRE 'REQ:VR.REQ';		!  Tables and definitions used for .VARIABLE,
				!  .IF, .IFNOT, .ELSE, and .ENDIF


!
! MACROS:
!
MACRO

	! This macro, ERM_T, is used to output as part of an error message a
	!   string described by an XPORT string descriptor.
    ERM_T (RNFCODE, STR_DESCR) =
	BEGIN
	BIND
	    TEMP = STR_DESCR : $STR_DESCRIPTOR ();
	ERM (RNFCODE, .TEMP [STR$A_POINTER], .TEMP [STR$H_LENGTH])
	END	%,

    BELL = %CHAR(%O'07')%,

    DEL = %CHAR(%O'177')%;

!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    MAXORA,
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL 				!Error messages
    RNFCEM,		! Comma expected, missing: "<%S>"
    RNFCOT,		! Can''t open contents file "<filename>"
    RNFCOX,		! Can''t open indexing file "<filename"
    RNFINM,		! Illegal number value: <qualifier>  {or switch}
    RNFIVS,		! Illegal /VARIANT qualifier  {or switch}
    RNFTMP,		! Too many page ranges on /PAGES qualifier {or switch}
    RNFTMV,		! Too many /VARIANTs
    RNFVVZ;		! /VARIANT value zero

EXTERNAL
    FS01 : FIXED_STRING,
    GCA : GCA_DEFINITION,
    HCT : HCT_DEFINITION,
    KHAR,
    SPAGER : BLOCKVECTOR [1,PAGE_SCT_SIZE],
    TPAGER : BLOCKVECTOR [1,PAGE_SCT_SIZE],
    NDXOOB : $XPO_IOB (),
    RNIIOB : REF $XPO_IOB (),
    TOCOOB : $XPO_IOB (),
    OUTOPT : OUTOPT_DEFINE,
    PHAN : PHAN_DEFINITION,
    SCA : SCA_DEFINITION,
    TSIIOB : $XPO_IOB (),
    VRCNT;

EXTERNAL ROUTINE
    BARS,
    BWAIT,
    ERM,
    GNAME,
    PARSEP,
    PUTRTY,
    VRENTR,
    VRFIND;


%SBTTL 'DOOPTS -- ROUTINE header'
GLOBAL ROUTINE DOOPTS (RNO_CMD) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	DOOPTS interprets the switches that the user specified on
!	the command line.  Information is disseminated to various
!	RUNOFF control structures.
!
! FORMAL PARAMETERS:
!
!	RNO_CMD is the preprocessed set of switches.
!
! IMPLICIT INPUTS:	NONE
!
! IMPLICIT OUTPUTS:	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:	NONE
!
! SIDE EFFECTS:		NONE
!
!--

    BEGIN

    OWN
	U_EXT : VECTOR [CH$ALLOCATION (4)],
	U_EXT_PTR,
	TYPE_LENGTH,
	TYPE_PTR,
	PRSE_SPEC_BLOCK : $XPO_SPEC_BLOCK,
	range_error_flag;

    MAP
	RNO_CMD : REF $RNO_CMD;

    range_error_flag = 0;		! Turn the bloody thing off to start with!

%SBTTL 'DOOPTS -- Process .RNH file type'
    !See if the user specified a .RNH input file, and if so apply special formatting rules.
    BEGIN

    !Get the input file type.
    $XPO_PARSE_SPEC (SPEC_BLOCK = PRSE_SPEC_BLOCK, 	!
	FILE_SPEC = RNIIOB [IOB$T_RESULTANT] );


    !Get the length and location of the file type
    BEGIN
    BIND
	TEMP = PRSE_SPEC_BLOCK [XPO$T_FILE_TYPE] : $STR_DESCRIPTOR ();
    TYPE_LENGTH = .TEMP [STR$H_LENGTH];
    TYPE_PTR = .TEMP [STR$A_POINTER];
    END;

    IF 						!
	.TYPE_LENGTH EQL 4
    THEN 					!
    !Check further to see if the type is '.RNH'.
	BEGIN
	!First convert the file type to upper case.
	U_EXT_PTR = CH$PTR (U_EXT);

	INCR I FROM 1 TO 4 DO
	    BEGIN

	    LOCAL
		KAHR;

	    KAHR = CH$RCHAR_A (TYPE_PTR);

	    IF 					!
		LOWER_LETTER (.KAHR)
	    THEN 				!
		CH$WCHAR_A (UPPER_LETTER (.KAHR), U_EXT_PTR)
	    ELSE 				!
		CH$WCHAR_A (.KAHR, U_EXT_PTR)

	    END;

	U_EXT_PTR = CH$PTR (U_EXT);

	IF 					!
	    CH$EQL (4, .U_EXT_PTR, 4, CH$PTR (UPLIT ('.RNH')))
	THEN 					!
	!It is a .RNH input file.
	    BEGIN
	    HCT_HEADERS = FALSE;		!No page headers wanted.
	    PHAN_PAGING = FALSE;		!Don't divide document into pages.
	    PHAN_CMD_PAGING = FALSE;		!...
	    SCA_RM = 72;			!Set right margin to 72.
	    GCA_LWIDTH = 72;			!...
	    END;

	END;

    END;


%SBTTL 'DOOPTS -- Process /PAGES switch'

    IF 						!
	.RNO_CMD [RNO$H_PAGES] GTR 0
    THEN 					!
    !User did specify some pages.
	BEGIN

	LOCAL
	    IRA : VECTOR [4];

	!Set up dummy fixed string, so other routines
	!can do parsing.

	MAP
	    IRA : FIXED_STRING;

	FS_START (IRA) = .RNO_CMD [RNO$A_PAGES];
	FS_NEXT (IRA) = .FS_START (IRA);
	FS_MAXSIZE (IRA) = .RNO_CMD [RNO$H_PAGES];
	FS_LENGTH (IRA) = .FS_MAXSIZE (IRA);
	!Initialize working string.
	FS_INIT (FS01);
	KCNS ();
	
!Collect list of pages.
INCR I FROM 0 TO (MAXORA - 1) DO

    !Attempt to get a page number.
    IF 						!
	NOT PARSEP (IRA, SPAGER [.I, SCT_TYP])
    THEN
	RETURN FALSE				!Invalid page number.
    ELSE
    !Valid page number.  Attempt to pick up a terminating page.
	BEGIN

	BIND 					!Clear terminating page.
	    X = TPAGER [.I, SCT_TYP] : VECTOR;	!...

	INCR I FROM 0 TO (PAGE_SCT_SIZE - 1) DO	!...
	    X [.I] = 0;				!...

	GCA_ORANGE_CNT = .I + 1;		!Remember page range count.

	IF 					!
	    .KHAR NEQ RINTES
	THEN
	!The parse of the initial page did not exhaust the entire
	!list of pages.  If a ':' follows, a terminating page must
	!have been given.  Otherwise, there must be a ',' to
	!introduce a new page.
	    BEGIN

	    !For PDP-11: recognize | or : as range-indicator.
	    IF .KHAR EQL %C':' OR .KHAR EQL %C'|'
	    THEN
	    !A terminating page number has to follow.
	    !Attempt to pick it up.
		BEGIN
		KCNS ();			!Skip the ':'

		IF 				!
		    NOT PARSEP (IRA, TPAGER [.I, SCT_TYP])
		THEN
		    RETURN FALSE		!Bad or missing page number.
		END;

	    !Got the terminating page number successfully.
	    !See if another page range might follow.
	    IF					!
		.KHAR EQL RINTES
	    THEN
		EXITLOOP;			!Nothing left.

	    !Something still there after the last page number.
	    IF 					!
		!For PDP-11: recognize ; or , as range-separator.
		.KHAR EQL %C',' OR .KHAR EQL %C';'
	    THEN
	    !Yup, there should be another.  For now
	    !just skip the ','.  The next pass through
	    !the loop will get the next one.
		KCNS ()
	    ELSE
	    !Tell user a comma is (probably) missing
		BEGIN
		ERM (RNFCEM, .FS_START(IRA), .FS_MAXSIZE(IRA));
		RETURN FALSE;
		END

	    END

	ELSE
	!The list of pages has been completely scanned, and
	!everything went ok.
	    EXITLOOP

	END;					!End of loop.

	!Be sure the user did not specify too many page ranges.
	IF!
	    .KHAR NEQ RINTES
	THEN
	!User specified too many page ranges.  Give up.
	    BEGIN
	    ERM (RNFTMP, 0, 0);
	    RETURN FALSE;
	    END;

	GCA_SKIP_OUT = TRUE;			!Start with output suppressed.
	END;


%SBTTL 'DOOPTS -- Process /INDEX switch'

    IF!
	.RNO_CMD [RNO$V_INDEX]
    THEN
    !User said /INDEX
	BEGIN

	IF
	    NOT $XPO_OPEN ( IOB = NDXOOB,
			    FILE_SPEC = RNO_CMD [RNO$T_INDEX],
			    DEFAULT = ('.BIX'),
			    RELATED = .RNIIOB [IOB$A_FILE_SPEC],
			    FAILURE = 0,
			    OPTIONS = OUTPUT,
			    ATTRIBUTES = BINARY )
	THEN
	    BEGIN
	    ERM_T (RNFCOX, NDXOOB [IOB$T_RESULTANT]);
	    RETURN FALSE;
	    END
	ELSE
	    BEGIN
	    !Now that the file has been opened successfully,
	    !initialize it with a "new sequence" header word.
	    LOCAL
		TEMP;

	    LITERAL
		INDEX_FORMAT = 2;		!The format of the .BIX file.
						!NOTE: Bump this if .BIX file format changes!!!!

	    !Create the one-word record that starts each .BIX file.
	    !It consists of
	    !	o  The value 1 in the right half of the word (i.e., least significant half)
	    !	o  The format indicator in the left half.
	    TEMP = 1 + (INDEX_FORMAT^(%BPVAL/2));

	    !Write this record as the first item in the file.  This lets TCX know
	    !if it is prepared to read this format.
	    $XPO_PUT ( IOB = NDXOOB,
			BINARY_DATA = (1,
					TEMP)  );
	    GCA_BIX = TRUE;			!Set binary-index flag.
	    END;
	END
    ELSE
	GCA_BIX = FALSE;


%SBTTL 'DOOPTS -- Process /CONTENTS switch'

    IF!
	.RNO_CMD [RNO$V_CONTENTS]
    THEN
    !User said /CONTENTS
	BEGIN

	IF
	    NOT $XPO_OPEN ( IOB = TOCOOB,
			    FILE_SPEC = RNO_CMD [RNO$T_CONTENTS],
			    DEFAULT = ('.BTC'),
			    RELATED = .RNIIOB [IOB$A_FILE_SPEC],
			    FAILURE = 0,
			    OPTIONS = OUTPUT,
			    ATTRIBUTES = BINARY )
	THEN
	    BEGIN
	    ERM_T (RNFCOT, TOCOOB [IOB$T_RESULTANT]);
	    RETURN FALSE;
	    END
	ELSE
	    BEGIN
	    !Now that the file has been opened successfully,
	    !initialize it with a "new sequence" header.

	    LITERAL
		TOC_FORMAT = 3;		!The format of the .BTC file.
						!NOTE: Bump this if .BTC file format changes!

	    PUTRTY (MAJ_NEW_TOC, TOC_FORMAT);

	    !Wind up initialization.
	    GCA_BTC = TRUE;			!Set binary-toc flag.
	    GCA_CMD_BTC = TRUE;			!...
	    END;
	END
    ELSE
	GCA_BTC = FALSE;


%SBTTL 'DOOPTS -- Process /VARIANT switch'

    IF 						!
	.RNO_CMD [RNO$H_VARIANT] GTR 0
    THEN 					!
    !User did specify at least one /VARIANT.
	BEGIN

	LOCAL
	    IRA : VECTOR [4],
	    GNCC;

	!Fix up IRA to look like a fixed string so other routines
	!can do some parsing.
	MAP
	    IRA : FIXED_STRING;


	FS_START (IRA) = .RNO_CMD [RNO$A_VARIANT];
	FS_NEXT (IRA) = .FS_START (IRA);
	FS_MAXSIZE (IRA) = .RNO_CMD [RNO$H_VARIANT];
	FS_LENGTH (IRA) = .FS_MAXSIZE (IRA);
	KCNS ();				!Start the scan.

	WHILE .KHAR NEQ RINTES DO
	    BEGIN
	    FS_INIT (FS01);

	    IF 					!
		GNAME (IRA, FS01) NEQ GNAME_NORMAL
	    THEN
	    !Bad variable name.  Abhort entire command line.
		BEGIN
		ERM (RNFIVS, 0, 0);
		RETURN FALSE;
		END;

	    IF 					!
		.VRCNT GEQ VR_MAX_NAMES
	    THEN 				!
	    !Too many variants.  Abhort entire command line.
		BEGIN
		ERM (RNFTMV, 0, 0);
		RETURN FALSE;
		END;

	    IF 					!
		VRFIND (.FS_START (FS01), .FS_LENGTH (FS01)) EQL -1
	    THEN 				!
	    !This is a brand new name, so save it marked as TRUE.
		VRENTR (.FS_START (FS01), .FS_LENGTH (FS01), %C' ', %C' ', 0, TRUE)
	    ELSE 				!
	    !Ignore duplicates
		(0);

	    IF 					!
		!For PDP-11: recognize ; or , as variant-separator.
		.KHAR EQL %C',' OR .KHAR EQL %C';'
	    THEN 				!
	    !Skip separator.  This is a list of names.
		KCNS ()
	    ELSE 				!

		IF 				!
		    .KHAR NEQ RINTES
		THEN 				!
		!Garbage after the variable name.
		!Abort the entire command line.
		    BEGIN
		    ERM (RNFIVS, 0, 0);
		    RETURN FALSE;
		    END;

	    END;

	END;


%SBTTL 'DOOPTS -- Check range of numeric parameters'

    IF (.rno_cmd[rno$h_bold] LSS 0  OR
	.rno_cmd[rno$h_bold] GTR 10  )
    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/BOLD')), 5);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF (.rno_cmd[rno$h_down] LSS 0  OR
	.rno_cmd[rno$h_down] GTR 200 )
    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/DOWN')), 5);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF (.rno_cmd[rno$h_form_size] LSS 0 OR
	.rno_cmd[rno$h_form_size] GTR 200 )
    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/FORM_SIZE')), 10);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF (.rno_cmd[rno$h_right] LSS 0  OR
	.rno_cmd[rno$h_right] GTR 150  )
    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/RIGHT')), 6);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF	(.rno_cmd[rno$v_s_underline] AND .rno_cmd[rno$c_underline] NEQ 0 AND
		(.rno_cmd[rno$c_underline] LSS 32 OR	! These values describe
		 .rno_cmd[rno$c_underline] GTR 125 ))	! "printable" characters

    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/UNDERLINE')), 10);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF	(.rno_cmd[rno$v_s_und_separ] AND .rno_cmd[rno$c_underline] NEQ 0 AND
		(.rno_cmd[rno$c_underline] LSS 32 OR	! These values describe
		 .rno_cmd[rno$c_underline] GTR 125 ))	! "printable" characters
    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/SEPARATE_UNDERLINE')), 19);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF	(.rno_cmd[rno$v_s_und_nonsp] AND .rno_cmd[rno$c_underline] NEQ 0 AND
		(.rno_cmd[rno$c_underline] LSS 0  OR	! These values describe
		 .rno_cmd[rno$c_underline] GTR 32 ))	! "NONprintable" characters
    THEN
	BEGIN
	ERM (RNFINM, CH$PTR(UPLIT ('/NONSPACING_UNDERLINE')), 21);
	range_error_flag = 1;		! Indicate error to force exit later.
	END;

    IF .range_error_flag THEN		! If one of the above beasties was out
	RETURN FALSE;			! of range, we can't go on; now can we?

%SBTTL 'DOOPTS -- Process /BACKSPACE, /OVERPRINT, /BOLD, & /UNDERLINE'

    !Process /BACKSPACE switch'
    OUTOPT_BACK = .RNO_CMD [RNO$V_BACKSPACE];

    !Process /OVERPRINT switch
    OUTOPT_OVER = .RNO_CMD [RNO$V_OVERPRINT] OR TRUE;	!Can always use line overprinting

    !Process /BOLD switch information
    GCA_CMD_BLD = .RNO_CMD [RNO$H_BOLD] GTR 0;	!Turn off bolding if user said /BOLD:0
    SCA_DO_BLD = .GCA_CMD_BLD;
    OUTOPT_BLDN = .RNO_CMD [RNO$H_BOLD];	!Copy bolding depth indicator

    !Process /UNDERLINE switch information.
    GCA_CMD_UND = .RNO_CMD [RNO$V_UNDERLINE];
    SCA_DO_UND = .RNO_CMD [RNO$V_UNDERLINE];

    IF 						!
	(.RNO_CMD [RNO$C_UNDERLINE] EQL 0)	!
	AND .RNO_CMD [RNO$V_UND_CHAR]
    THEN 					!
    !User said /UNDERLINE:0
	BEGIN
	GCA_CMD_UND = FALSE;			!Turn off underlining for entire document.
	SCA_DO_UND = FALSE;			!...
	END;

    IF 						!
	.RNO_CMD [RNO$V_UNDERLINE]
    THEN 					!
	BEGIN

	IF 					!
	    .RNO_CMD [RNO$V_UND_CHAR]
	THEN
	    OUTOPT_UND_CHAR = .RNO_CMD [RNO$C_UNDERLINE];

	!Pick up information about how to do underlining.
	OUTOPT_UND_SEP = .RNO_CMD [RNO$V_UND_SEPAR];	!Put dashes on next line.
	OUTOPT_UND_NOSP = .RNO_CMD [RNO$V_UND_NONSP];	!Underline character is non-spacing.

	IF 					!
	    NOT .RNO_CMD [RNO$V_UND_CHAR]
	THEN 					!
	!User did not specify the underline character, so
	!figure it out, based on how underlining is to be done.

	    IF 					!
		.OUTOPT_UND_SEP
	    THEN 				!
		OUTOPT_UND_CHAR = %C'-'
	    ELSE 				!

		IF 				!
		    .OUTOPT_UND_NOSP
		THEN 				!
		    OUTOPT_UND_CHAR = 0
		ELSE 				!

		    IF 				!
			.OUTOPT_BACK
		    THEN 			!
			OUTOPT_UND_CHAR = %C'_'
		    ELSE 			!

			IF 			!
			    .OUTOPT_OVER
			THEN 			!
			    OUTOPT_UND_CHAR = %C'_';

	END;

%SBTTL 'DOOPTS -- Process /QUICK switch'

    IF
	.RNO_CMD [RNO$V_QUICK]
    THEN
	BEGIN
	GCA_CMD_QUICK = TRUE;		!User wants quick processing.	
	GCA_CMD_BLD = FALSE;		!Never do bolding 
	GCA_CMD_UND = FALSE;		! ... or underlining 
	GCA_CMD_BAR = FALSE;		! ... or change-bars.
	GCA_SKIP_OUT = TRUE;		!Begin skipping output as if user gave a page range.
	END;

%SBTTL 'DOOPTS -- Process /DEBUG switch'

    !Process /DEBUG:INDEX switch
    GCA_DEBUG_INDEX = .RNO_CMD [RNO$V_DEB_INDEX];

    !Process /DEBUG:CONTENTS switch
    GCA_DEBUG_TOC = .RNO_CMD [RNO$V_DEB_CONT];

    !Process /DEBUG:FILES switch
    GCA_DEBUG_FIL = .RNO_CMD [RNO$V_DEB_FILES];

    !Process /DEBUG:CONDITIONALS switch
    GCA_DEBUG_CND = .RNO_CMD [RNO$V_DEB_COND];

%SBTTL 'DOOPTS -- Process /MESSAGES switch'

    !NOTE:  This code relies on the bit representations of
    !	    REPORT_ERR_?????
    IF
	.GCA_CMD_QUICK
    THEN
	GCA_CMD_MSG = (1 ^ 1)		!If /QUICK, always report errors to user.
    ELSE
	BEGIN
	GCA_CMD_MSG = .RNO_CMD [RNO$V_MSG_OUT] + (.RNO_CMD [RNO$V_MSG_USER] ^ 1);
	!If user didn't say /MESSAGES at all, direct them to everywhere
	IF
	    .GCA_CMD_MSG EQL 0
	THEN				!User didn't say /MESSAGES, so
	    GCA_CMD_MSG = %B'11';	!direct messages everywhere.
	END;				

%SBTTL 'DOOPTS -- Process change bar options.'

    IF
	.RNO_CMD [RNO$V_CHNG_CHAR]
    THEN
    !User specified character to be used as change bar.
	BEGIN
	SCA_BAR_CHAR = .RNO_CMD [RNO$C_CHANGE];

	IF 					!
	    .RNO_CMD [RNO$C_CHANGE] EQL 0
	THEN 					!
	!User is forbidding change bars for entire document.
	    GCA_CMD_BAR = FALSE;

	END;

    IF 						!
	.RNO_CMD [RNO$V_CHANGE]
    THEN 					!
    !User wants change bars enabled.
	BARS (H_ENABLE_BAR);

%SBTTL 'DOOPTS -- Process /RIGHT, /DOWN, /SIM, /PAUSE, & /SEQ'

    !Process /RIGHT switch information
    PHAN_RIGHT = .RNO_CMD [RNO$H_RIGHT];
    IF!
	.PHAN_RIGHT NEQ 0
    THEN
	GCA_CMD_RIT = TRUE;
!
    !Process /DOWN switch information
    PHAN_DOWN = .RNO_CMD [RNO$H_DOWN];
!
    !Process /SIMULATE switch information
    IF						!
	.RNO_CMD [RNO$V_SIMULATE]
    THEN
	!User said /SIMULATE
	PHAN_SIMULATE = TRUE
    ELSE
	PHAN_SIMULATE = FALSE;
!
    !Process /PAUSE switch information
    PHAN_PAUSE = .RNO_CMD [RNO$V_PAUSE];
!
    !Process /SEQUENCE switch information
    GCA_CMD_ISQ = .RNO_CMD [RNO$V_SEQUENCE];

%SBTTL 'DOOPTS -- Process /FORMSIZE switch information'

    IF
	.RNO_CMD [RNO$H_FORM_SIZE] GTR 0
    THEN
	!User said /FORMSIZE:n.  Use it either for /SIMULATE or
	!/NOSIMULATE, as appropriate.
	IF
	    .PHAN_SIMULATE
	THEN
	    !User said /SIMULATE, so the specified form size is
	    !physical paper size
	    PHAN_PLINES = .RNO_CMD [RNO$H_FORM_SIZE]
	ELSE
	    !User is not simulating, so specified form size is
	    !number of lines allowed on the page by the spooler.
	    PHAN_SLINES = .RNO_CMD [RNO$H_FORM_SIZE];

    !If simulating formfeeds, or want to pause at top of
    !each page, open the stream IOBs.
    IF						!
       .PHAN_SIMULATE OR .PHAN_PAUSE
    THEN					!
	BEGIN
	$XPO_OPEN (IOB = TSIIOB, 		!
	    FILE_SPEC = $XPO_INPUT, 		!
	    OPTIONS = (INPUT, OUTPUT),		!
	    ATTRIBUTES = STREAM);
	END;

    !Initial signals for /SIMULATE and /PAUSE

    IF 						!
	.PHAN_SIMULATE
    THEN 					!
	BEGIN

	$XPO_GET (IOB = TSIIOB,
	    PROMPT = (36,   CH$PTR (UPLIT (%STRING (BELL, DEL, BELL, DEL,
		    'Position paper, type a character')))), CHARACTERS = 1);

	!After getting the user's character, issue a carriage return so he starts out ok.
	$XPO_PUT (IOB = TSIIOB, STRING = (1, CH$PTR (UPLIT (%STRING (%CHAR(%O'15'))))) )
	END
    ELSE 					!

	IF 					!
	    .PHAN_PAUSE
	THEN 					!
	    BWAIT ();


%SBTTL 'DOOPTS -- Process /[NO]LOG & /DEC_INTERNAL switchs'

    ! /[NO]LOG switch

	TERMINATION_LOG = .RNO_CMD [RNO$V_LOG];

    ! /DEC_INTERNAL switch'

	!Pickup the debugging flags
	GCA_DIAG1	=  .RNO_CMD [RNO$H_DBG1];
	GCA_DIAG2	=  .RNO_CMD [RNO$H_DBG2];

	!Pickup the FLIP flag
	GCA_FLIP	=  .RNO_CMD [RNO$V_FLIP];

	!Pickup special output flags.  These may be needed in the future.
	SPEC_OP_CTL0  =  .RNO_CMD [RNO$V_OUTCTL1];
	SPEC_OP_CTL1  =  .RNO_CMD [RNO$V_OUTCTL2];

    RETURN TRUE					!Command line was ok.
    END;					!End of DOOPTS

END						!End of module

ELUDOM
