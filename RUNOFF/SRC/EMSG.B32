%TITLE 'VMS error message handler'
MODULE EMSG (IDENT = 'V03-000',
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DEC Standard Runoff
!
! ABSTRACT:
!   Handle requests for an error to be reported to the user.
!
! ENVIRONMENT:
!   VAX/VMS user mode
!
! AUTHOR: Ray Marshall	, CREATION DATE: 5-October-1981
!
! MODIFIED BY:
!
!	002	REM00002	Ray Marshall	15-October-1981
!		Remove special support for the LOM message.
!		The MRC & NIC messages are now treated as warnings and should
!		  be output as any other warning.  Therefore, the special
!		  support for them has been removed.
!
!--
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	EMSG,		! Send message to system which will envoke EMSGA
	EMSGA;		! Determine where to write message & make it happen

!
! INCLUDE FILES:
!
LIBRARY 'SYS$LIBRARY:STARLET';	! System macros
LIBRARY 'NXPORT:XPORT';		!  XPORT macros
REQUIRE 'REQ:BOOL.REQ';		!  Defines TRUE & FALSE literals (only!)
REQUIRE 'REQ:GCA.REQ';		!  GCA (General Control Array) definitions
!
! MACROS:
!
MACRO
    L_ = 0,32,0  %,	! Longword reference
    W0_ = 0,16,0 %,	! Word reference (low order word of longword)
    W1_ = 16,16,0 %;	! Word reference (high order word of longword)

!
! EQUATED SYMBOLS:
!
LITERAL
	CR =	%O'15',		! <return>
	LF =	%O'12';		! <linefeed>
!  None (for now)
!
! OWN STORAGE:
!
!  None (for now)
!
! EXTERNAL REFERENCES:
!
! Messages that shouldn't output the facility, severity, and error codes.

EXTERNAL LITERAL
	RNFBAK,	! See command on input line %C of page %I of file %S
	RNFERD,	! DIGITAL Standard Runoff Version %V: %N diagnostic messages reported
	RNFERR,	! DIGITAL Standard Runoff Version %V: %N diagnostic message reported
	RNFLOC,	! on output page %P; on input line %C of page %I of file "%F"
	RNFNED,	! DIGITAL Standard Runoff Version %V: No errors detected
	RNFPCT,	! %N pages written to %O
	RNFPC1,	! %N page written to %O
	RNFSTR;	! "%S"	(Used to output diagnostic message text.)

EXTERNAL
	GCA:	GCA_DEFINITION,
	RNOIOB: REF $XPO_IOB();		!Output file (document being built)


%SBTTL 'EMSG -- Routine declaration'
GLOBAL ROUTINE EMSG (e_code,e_string,no_mem_out) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Given the error code and message string, build an appropriate error
!	message vector.  Then make an appropriate call to the VMS system
!	service $PUTMSG with the vector as a parameter.  Based on the value of
!	NO_MEM_OUT, the call either does or does NOT specify the action routine
!	EMSGA (for Error MeSsaGe Action routine) which will determine whether
!	or not to send the message to the .MEM file.
!
!	The action routine must be used because it isn't till then that the
!	whole message has been constructed.  $PUTMSG will add in the facility,
!	severity code, and error code as a prefix to the text we send to it.
!
! FORMAL PARAMETERS:
!
!	E_CODE		Number of error.
!	E_STRING	Descriptor pointing to error string.
!	NO_MEM_OUT	True if output should NOT go to the mem file.
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Return status from the VMS $PUTMSG call.
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN
    LOCAL
	msgdesc: BLOCK[5];	! Descriptor for message argument vector

    msgdesc[0,W0_] = 3;		! Always passing one argument, the message text

! Determine whether to print just the text or the whole message.

    IF (    .E_CODE EQL RNFBAK
	OR  .E_CODE EQL RNFERD
	OR  .E_CODE EQL RNFERR
	OR  .E_CODE EQL RNFLOC
	OR  .E_CODE EQL RNFNED
	OR  .E_CODE EQL RNFPCT
	OR  .E_CODE EQL RNFPC1
	OR  .E_CODE EQL RNFSTR  ) 
	THEN
	    msgdesc[0,w1_] = 1	! If any of above, only print text of message!
	ELSE
	    msgdesc[0,w1_] = 0;	! Else, default to printing all of message

    msgdesc[1,l_] = .e_code;	! Error message number.
    msgdesc[2,w0_] = 1;		! There is one FAO arg. -- the message text.
    msgdesc[2,w1_] = 0;		! No new message flags.
    msgdesc[3,l_] = .e_string;	! Pointer to descripter for message text.
    
!	Send message to VMS:

    IF NOT .no_mem_out then		! if mem file shouldn't get message,
	$PUTMSG (msgvec=msgdesc)	!	don't specify an action routine
    ELSE				! otherwise, action routine will see to
	$PUTMSG (msgvec=msgdesc,actrtn=EMSGA) ! it that the .MEM file get's it.

    END;			! End of routine

%SBTTL 'EMSGA -- Action routine for all messages'
GLOBAL ROUTINE EMSGA (full_message_p) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Intercept message before VMS outputs it.  Determine just where it
!	should be written, and see to it that it goes there.
!
! FORMAL PARAMETERS:
!
!	FULL_MESSAGE_P	A pointer to the message text as expanded by VMS.
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	FALSE = 0 -- directs VMS NOT to send the message to SYS$ERROR.
!	TRUE  = 1 -- directs VMS to output the message.
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN
    LOCAL
	hack: $STR_DESCRIPTOR(),
	STATUS;
    MAP
	full_message_p: REF $STR_DESCRIPTOR();

    $STR_DESC_INIT(DESCRIPTOR=HACK,STRING=(.full_message_p[str$h_length],
					.full_message_p[str$a_pointer]));

    !The line is now packed correctly, so output it to the requested places.
    CASE .GCA_ERR_DIR FROM REPORT_ERR_NONE TO REPORT_ERR_BOTH OF
    SET
    [REPORT_ERR_NONE]:
	BEGIN
	STATUS = FALSE;	!Don't bother to output the message
	END;

    [REPORT_ERR_FILE]:
	BEGIN
	!Report error in output file
	STATUS = $XPO_PUT( IOB = .RNOIOB, STRING = hack );
	!Add carriage control information to the end of the error message
	STATUS = $XPO_PUT( IOB	  = .RNOIOB,
			   STRING = (2, CH$PTR(UPLIT (%STRING (%CHAR(CR,LF)))))
			 );
	STATUS = FALSE;
	END;

    [REPORT_ERR_STD]:
	BEGIN
	!Report error on standard error log
	STATUS = TRUE;
	END;

    [REPORT_ERR_BOTH]:
	!Report error both places
	BEGIN
	!Report error in output file
	STATUS = $XPO_PUT( IOB = .RNOIOB, STRING = hack );
	!Add carriage control information to the end of the error message
	STATUS = $XPO_PUT( IOB	  = .RNOIOB,
			   STRING = (2, CH$PTR(UPLIT (%STRING (%CHAR(CR,LF)))))
			 );
	STATUS = TRUE;
	END;
    TES;

    .STATUS
    END;
END				! End of module
ELUDOM
