MODULE IFIFNO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the .IF, .IFNOT, .ELSE, .ENDIF, and .VARIABLE commands
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    IFIFNE : NOVALUE,
    VR : NOVALUE,
    VRENTR : NOVALUE,
    VRFIND;

!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:GNCC.REQ';

REQUIRE 'REQ:IFSTK.REQ';

REQUIRE 'REQ:IRAC.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:LSTBTS.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:VR.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FS01 : FIXED_STRING,
    GCA : GCA_DEFINITION,
    IFSTK : IFSTACK,
    IRA : FIXED_STRING,
    IRAC : IRAC_DEFINITION,
    KHAR;

!

EXTERNAL 					!See VR.REQ for definition of items.
    VRCNT,					!Number of variables.
    VRNAME : VRNAME_DEF,			!The variable names.
    VRLNG : VRLNG_DEF,				!The length of the names.
    VRBOOL : VRBOOL_DEF,			!TRUE/FALSE value
    VRFFLG : VRFFLG_DEF,			!FALSE flag
    VRTFLG : VRTFLG_DEF,			!TRUE flag
    VRSRC : VRSRC_DEF;				!Source of variable definition.

EXTERNAL LITERAL 				!Error messages
    RNFBVN,
    RNFDVN,
    RNFEVL,
    RNFINI,
    RNFITD,
    RNFSKC;

EXTERNAL ROUTINE
    ERMA,
    GNAME,
    RSKIPS,
    SKPSEP;


GLOBAL ROUTINE IFIFNE (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to be processed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Swallows a portion of the uneaten string.
!
!--

    BEGIN

    LOCAL
	GNAME_RESULT,
	VR_INDEX,				!Will be used to point into the variables tables
	X;					!Just a copy of the IFSTACK depth

    RSKIPS (IRA);				!Position to variable name.
    GNAME_RESULT = GNAME (IRA, FS01);

    IF 						!
	.GNAME_RESULT NEQ GNAME_NORMAL
    THEN
	BEGIN
	ERMA (RNFBVN, TRUE);			!Skip to end of command and output message
	RETURN;
	END;

!

    SELECT .HANDLER_CODE OF
	SET

	[H_IF, H_IFNOT] :
	    BEGIN
	    !See if this variable exists already.
	    VR_INDEX = VRFIND (.FS_START (FS01), .FS_LENGTH (FS01));

	    IF 					!
		.VR_INDEX EQL -1
	    THEN
		BEGIN				!Unrecognized variable.

		IF .VRCNT EQL VR_MAX_NAMES
		THEN
		    BEGIN			!Table would overflow if this were added!!!!!
		    ERMA (RNFEVL, FALSE);
		    RETURN;
		    END;

		!Allocate a new spot and put this stuff in.
		VRENTR (.FS_START (FS01), .FS_LENGTH (FS01), %C' ', %C' ', 1, FALSE);
		VR_INDEX = .VRCNT;
		END;

	    X = .IFSTK [0, IFSTK_DEPTH] + 1;

	    IF 					!
		.X GTR IFSTK_SIZE
	    THEN
		BEGIN				!.IFs nested too deeply
		ERMA (RNFITD, FALSE);
		RETURN;
		END;

	    !Remember how the .IF/.IFNOT was started.
	    IFSTK [0, IFSTK_DEPTH] = .X;			!Save new stack depth.
	    IFSTK [.X, IFSTK_SOURCE] = .HANDLER_CODE;		!Remember command.
	    IFSTK [.X, IFSTK_VR] = .VR_INDEX;			!Save pointer to variable name entry
	    IFSTK [.X, IFSTK_REQ_D] = .GCA_REQ_DEPTH;		!Remember .REQUIRE depth.
	    IFSTK [.X, IFSTK_IPAGEN] = .IRAC_IPAGEN;		!Remember input line number.
	    IFSTK [.X, IFSTK_ISEQN] = .IRAC_ISEQN;		!...
	    IFSTK [.X, IFSTK_FLAG] = .IRAC_DRAFT_FLG;		!Remember /DRAFT stus.
	    IFSTK [.X, IFSTK_BOOL] = .VRBOOL [.VR_INDEX];	!Remember TRUE/FALSE setting.
	
	    !In a /DRAFT document, set all variables FALSE
	    IF							!
		.GCA_DEBUG_CND
	    THEN						!
		IFSTK [.X, IFSTK_BOOL] = FALSE;			!

	    IF 					!
		.HANDLER_CODE EQL H_IFNOT
	    THEN
		IFSTK [.X, IFSTK_BOOL] = NOT .IFSTK [.X, IFSTK_BOOL];

	    !The TRUE/FALSE value really must include the TRUE/FALSE
	    !value of the previous level, to take nested .IF's into account.
	    IFSTK [.X, IFSTK_BOOL] = .IFSTK [.X - 1, IFSTK_BOOL] AND .IFSTK [.X, IFSTK_BOOL];
	    !Normally, skipping of text and commands is determined solely
	    !by the logical value just computed.  However, in a DRAFT document,
	    !skipping never takes place.
	    GCA_SKIPPING = NOT .IFSTK [.X, IFSTK_BOOL];

	    IF 					!
		.GCA_DEBUG_CND
	    THEN
		GCA_SKIPPING = FALSE;

	    END;

	[H_IF] :
	    BEGIN

!!	    IF 					!
!!		.VRBOOL [.VR_INDEX]
!!	    THEN
!!		BEGIN
		IFSTK [.X, IFSTK_ELSE_FLG] = .VRFFLG [.VR_INDEX];
		IRAC_DRAFT_FLG = .VRTFLG [.VR_INDEX];
!!		END
!!	    ELSE
!!		BEGIN
!!		IFSTK [.X, IFSTK_ELSE_FLG] = .VRTFLG [.VR_INDEX];
!!		IRAC_DRAFT_FLG = .VRFFLG [.VR_INDEX];
!!		END

	    END;

	[H_IFNOT] :
	    BEGIN

!!	    IF 					!
!!		.VRBOOL [.VR_INDEX]
!!	    THEN
!!		BEGIN
		IRAC_DRAFT_FLG = .VRFFLG [.VR_INDEX];
		IFSTK [.X, IFSTK_ELSE_FLG] = .VRTFLG [.VR_INDEX];
!!		END
!!	    ELSE
!!		BEGIN
!!		IRAC_DRAFT_FLG = .VRTFLG [.VR_INDEX];
!!		IFSTK [.X, IFSTK_ELSE_FLG] = .VRFFLG [.VR_INDEX];
!!		END

	    END;
!

	[H_ELSE, H_ENDIF] :
	    BEGIN				!Variable must match one on stack.
	    X = .IFSTK [0, IFSTK_DEPTH];

	    IF 					!
		CH$NEQ (.FS_LENGTH (FS01), 	!
		    .FS_START (FS01), 		!
		    .VRLNG [.IFSTK [.X, IFSTK_VR]], 	!
		    CH$PTR (VRNAME [.IFSTK [.X, IFSTK_VR], 0, 0, 0, 0]))
	    THEN
		BEGIN				!Improperly nested, etc
		ERMA (RNFINI, FALSE);
		RETURN;
		END;				!.ELSE and .ENDIF must appear in same file as .IF/.IFNOT

	    IF 					!
		.IFSTK [.X, IFSTK_REQ_D] NEQ .GCA_REQ_DEPTH
	    THEN
		ERMA (RNFSKC, FALSE);

	    END;
!

	[H_ELSE] :
	    BEGIN
	    !'X' gets set in the error checking block, above.
	    IFSTK [.X, IFSTK_BOOL] = ( NOT .IFSTK [.X, IFSTK_BOOL]) AND .IFSTK [.X - 1, IFSTK_BOOL];

	    IF 					!
		.GCA_DEBUG_CND
	    THEN 				!
	    !If a /DRAFT document, don't skip.
		GCA_SKIPPING = FALSE
	    ELSE
		GCA_SKIPPING = NOT (.IFSTK [.X, IFSTK_BOOL] AND .IFSTK [.X - 1, IFSTK_BOOL]);

	    !Pick up appropriate /DRAFT flag
	    IRAC_DRAFT_FLG = .IFSTK [.X, IFSTK_ELSE_FLG];
	    END;
!

	[H_ENDIF] :
	    BEGIN
	    X = .IFSTK [0, IFSTK_DEPTH] - 1;
	    IFSTK [0, IFSTK_DEPTH] = .X;

	    IF 					!
		.GCA_DEBUG_CND
	    THEN
		BEGIN
		GCA_SKIPPING = FALSE;
		END
	    ELSE
		BEGIN

		IF .X EQL 0
		THEN
		    GCA_SKIPPING = FALSE	! No more active .IFs
		ELSE
		    GCA_SKIPPING = NOT (.IFSTK [.X, IFSTK_BOOL] AND .IFSTK [.X - 1, IFSTK_BOOL]);

		END;

	    !Restore interrupted /DRAFT flag
	    !Note that we have already popped the stack, and so need to
	    !look back in the stack.  (The data's still valid though).
	    IRAC_DRAFT_FLG = .IFSTK [.X+1, IFSTK_FLAG];
	    END;
	TES;

    END;					!End of IFIFNE


GLOBAL ROUTINE VR (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE is never checked by this routine.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Swallows a part of the uneaten string.
!
!--

    BEGIN

    LOCAL
	VR_INDEX,				!Index in VRxxxx where variable goes.
	HOLD_T_FLAG,				!Temporary location of TRUE flag
	HOLD_F_FLAG,				!Temporary location of FALSE flag
	GNAME_RESULT;

    RSKIPS (IRA);				!Position to name
    GNAME_RESULT = GNAME (IRA, FS01);		!Get name
!

    IF 						!
	.GNAME_RESULT NEQ GNAME_NORMAL
    THEN
	BEGIN
	ERMA (RNFBVN, TRUE);			!Skip to end of command and issue message
	RETURN;
	END;

!
    HOLD_T_FLAG = %C' ';			!Default TRUE/FALSE flags
    HOLD_F_FLAG = %C' ';
!
    SKPSEP (IRA);				!Skip spaces,tabs, and a comma before the flags.
!
    !The two flags are given as [[x]  [,] [y]]
    !Note that a single character is always taken as the TRUE flag.
    !The input ",y" can be used to specify the FALSE flag alone.

    IF 						!
	.KHAR NEQ RINTES
    THEN
	BEGIN					!There might be TRUE/FALSE flags supplied.

	IF 					!
	    .KHAR NEQ %C','
	THEN
	    BEGIN				!pick up the TRUE flag
	    HOLD_T_FLAG = .KHAR;
	    KCNS ();				!Get character after the flag
	    RSKIPS (IRA);			!Skip spaces and tabs
	    END;

	IF .KHAR EQL %C','
	THEN
	    BEGIN
	    KCNS ();				!Get character after the comma
	    RSKIPS (IRA);
	    END;

	IF 					!
	    .KHAR NEQ RINTES
	THEN
	    BEGIN				!Get FALSE flag
	    HOLD_F_FLAG = .KHAR;
	    KCNS ();				!Position past KHAR.
	    END;

	END;

!
    VR_INDEX = VRFIND (.FS_START (FS01), .FS_LENGTH (FS01));

    IF 						!
	.VR_INDEX EQL -1
    THEN
	BEGIN					!It's a new entry

	IF .VRCNT EQL VR_MAX_NAMES
	THEN
	    BEGIN				!Table would overflow if this were added!!!!!
	    ERMA (RNFEVL, FALSE);
	    RETURN;
	    END;

	!Allocate a new spot and put this stuff in.
	VRENTR (.FS_START (FS01), .FS_LENGTH (FS01), .HOLD_T_FLAG, .HOLD_F_FLAG, 1, FALSE);
	END
    ELSE
	BEGIN					!It's probably an entry made via /VARIANT.

	IF 					!
	    .VRSRC [.VR_INDEX] EQL 1
	THEN
	    BEGIN				!This is duplicate declaration!!!!
	    ERMA (RNFDVN, FALSE);
	    RETURN;
	    END;

	VRSRC [.VR_INDEX] = 1;			!"1" means from a .IF or .VARIABLE command.
	VRTFLG [.VR_INDEX] = .HOLD_T_FLAG;	!Save TRUE flag
	VRFFLG [.VR_INDEX] = .HOLD_F_FLAG;	!Save FALSE flag
	END;

    END;					!End of VR


GLOBAL ROUTINE VRFIND (PTR, LNGTH) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns the index to the name, if found. otherwise, returns -1.
!
! FORMAL PARAMETERS:
!
!	PTR is a ch$ptr to a name to be located; LNGTH is its length
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    !In the loop, I starts at 1 even though there is a 0th element.
    !This is because the 0th one is a dummy.

    INCR I FROM 1 TO .VRCNT DO
	BEGIN

	IF 					!
	    .VRLNG [.I] EQL .LNGTH
	THEN 					!

	    IF 					!
		CH$EQL (.LNGTH, .PTR, 		!
		    .LNGTH, CH$PTR (VRNAME [.I, 0, 0, 0, 0]))
	    THEN
		RETURN .I;			!Variable found

	END;

!
    RETURN -1;					!Variable not found
    END;					!End of VRFIND


GLOBAL ROUTINE VRENTR (VARIABLE, VARIABLE_LNG, TRUE_FLAG, FALSE_FLAG, SOURCE_FLAG, LOGICAL_VALUE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	VRENTR saves a variable in the variable tables, along with
!	associated information.
!
! FORMAL PARAMETERS:
!
!	VARIABLE is a CH$PTR to the variable name. VARIABLE_LNG is its length.
!	TRUE_FLAG and FALSE_FLAG are the two draft flags.
!	SOURCE_FLAG indicates whether the definition came from a command
!	or a /VARIANT switch.
!	LOGICAL_VALUE is the TRUE/FALSE setting of the variable.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!
!--

    BEGIN
    VRCNT = .VRCNT + 1;				!Allocate a new slot.
    CH$MOVE (.VARIABLE_LNG, 			!Move variable name into the slot.
	.VARIABLE, 				!...
	CH$PTR (VRNAME [.VRCNT, 0, 0, 0, 0]));
    VRLNG [.VRCNT] = .VARIABLE_LNG;		!Save length of name.
    VRBOOL [.VRCNT] = .LOGICAL_VALUE;		!Save TRUE/FALSE value.
    VRSRC [.VRCNT] = .SOURCE_FLAG;		!Remember how variable got defined.
    VRTFLG [.VRCNT] = .TRUE_FLAG;		!Save TRUE flag
    VRFFLG [.VRCNT] = .FALSE_FLAG;		!Save FALSE flag
    END;					!End of VRENTR

END						!End of module

ELUDOM
