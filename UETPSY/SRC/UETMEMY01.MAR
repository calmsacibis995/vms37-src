	.Title	UETMEMY01 PAGING LOAD
	.ident	'V03-000'
	.default displacement WORD
	.enable suppression
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; ABSTRACT:	The UETMEMY01 module does an EXPAND REGION to the size of the
;		maximum working set size.  It then touches the pages within
;		that region randomly by writing to them (PAGE FAULT) for a
;		set time period.
;		The intent is to use, (or misuse), the virtual memory
;		management facility very inefficiently in order to simulate
;		a heavy user environment.  The program is intended to be one
;		part of a test package aimed at using up system resources.
;
; ENVIRONMENT:	User mode only.
;		No particular privileges are required by the module.
;
;--
;
; AUTHOR: Fred Matthes		CREATION DATE: December, 1981
;
; MODIFIED BY:
;
;**

	.sbttl	Include Files
;
; INCLUDE FILES:
;
;	SYS$LIBRARY:LIB.MLB	for general definitions
;	SHRLIB$:UETP.MLB	for UETP definitions
;
	.sbttl	Macros
;
; MACROS:
;
	$chfdef				; Condition handler frame definitions
	$shrdef				; Shared messages definitions
	$jpidef				; Job process information definitions
	$uetpdef			; UETP definitions
	$stsdef				; Status return definitions
	.sbttl	Equates
;
; Equated symbols
;
RMS_K		=	1
UETP_K		=	116
UETP		=	UETP_K@STS$V_FAC_NO	; define UETP facility code
UETP$_ABENDD 	= 	UETP!SHR$_ABENDD	; Define the UETP message codes
UETP$_BEGIND	=	UETP!SHR$_BEGIND
UETP$_ENDEDD	=	UETP!SHR$_ENDEDD
UETP$_TEXT	=	UETP!SHR$_TEXT
TEXT_BUFFER	=	132			; buffer size
	.sbttl	Declarations
;
; Declarations
;
TWO_MIN:	.long	-10*1000*1000*120,-1	; 120 seconds
TIME_FLAG:	.byte	0
SEED:		.long	^X71269417
VAS_PAGCNT:	.long	512			; # pages we grab each time
BEG$END_ADD:	.quad				; for ret beg/end address
GTLIST:		.word	4
		.word	JPI$_WSEXTENT		; max working set size
		.long	VAS_PAGCNT
		.long	0
		.long	0			; end of list

	.sbttl	ASCII string definitions
FILE:	.ASCID	/file/			; Fills in RMS_ERR_STRING

RECORD:	.ASCID	/record/		; Fills in RMS_ERR_STRING

RMS_ERR_STRING:				; Announces an RMS error
	.ASCID	/RMS !AS error in file !AD/
FAO_BUF:				; FAO output string descriptor
	.WORD	TEXT_BUFFER,0
	.ADDRESS BUFFER

BUFFER_PTR:				; Fake .ASCID buffer for misc. strings
	.WORD	TEXT_BUFFER,0		; A word for length, a word for desc.
	.ADDRESS BUFFER

BUFFER:	.BLKB	TEXT_BUFFER		; FAO output and other misc. buffer

STATUS:	.LONG	0			; Status value on program exit

MSG_BLOCK:				; Auxiliary $GETMSG info
	.BLKB	4
ARG_COUNT:				; Argument counter used by ERROR_EXIT
	.LONG	0
ERROR_COUNT:				; Cumulative error count at runtime
	.LONG	0
PROCESS_NAME:				; Process name
	.ASCID	/UETMEMY01/

	.sbttl	Main Program
	.entry	UETMEMY01,^M<>			; entry mask
	moval	SSERROR,(FP)			; Declare exception handler
	$SETSFM_S enbflg = #1			; Enable system service failure mode
	$GETJPI_S itmlst = GTLIST		; get # of pages
	$EXPREG_S pagcnt = VAS_PAGCNT,-		; expand our region
		  retadr = BEG$END_ADD,-
		  region = #0
	subl3	BEG$END_ADD,-			; fig # bytes actually got
		BEG$END_ADD+4,-
		R3
	incl	R3				; <last-first> + 1
	ashl	#-9,R3,R5			; (div by 512) loop count
	movl	BEG$END_ADD,R2			; address
	movl	#128,R3				; longwords per page
	cvtlf	R5,R4				; page offset into VAS
	clrb	TIME_FLAG			; clear time signal flag
	$SETIMR_S daytim = TWO_MIN,-		; start the clock ticking
		  astadr = SET_TIMOUT_FLAG
OUTER_LOOP:
	clrl	R7
LOOP:
	pushal	SEED				; plant seed
	calls	#1,G^MTH$RANDOM			; get random number
	mulf3	R4,R0,R6			; 0 to .999 x PAGES
	cvtfl	R6,R6				; fixed point
	mull	R3,R6				; byte offset into VAS
	movl	R7,(R2)[R6]			; touch the page (FAULT IT)
	aoblss	R5,R7,LOOP
	blbc	TIME_FLAG,OUTER_LOOP		; any time left?
	$DELTVA_S inadr  = BEG$END_ADD		; release all expanded pages
	movl	#SS$_NORMAL,R0
	$EXIT_S R0				; see Y'all

	.sbttl	AST Handler
SET_TIMOUT_FLAG:				; AST handler
	.word	0
	bisb	#1,TIME_FLAG
	RET

	.SBTTL	System Service Exception Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine is executed if a software or hardware exception occurs or
;	if a LIB$SIGNAL system service is used to output a message.
;	Information about this method of handling messages and errors can be
;	found in the VMS COMMON RUN-TIME manual and in the VMS SYSTEM SERVICE
;	manual.
;
; CALLING SEQUENCE:
;	Entered via an exception from the system
;
; INPUT PARAMETERS:
;	ERROR_COUNT   = previous cumulative error count
;	                -----------------
;	   AP ---->     !       2       !
;			!---------------!
;			! SIGNL ARY PNT !
;			!---------------!
;			! MECH  ARY PNT !
;			!---------------! ---------
;			!       4       !         ^
;			!---------------!         !
;			! ESTABLISH FP  !         !
;			!---------------!         !
;			!    DEPTH      ! Mechanism Array
;			!---------------!         !
;			!      R0       !         !
;			!---------------!         !
;			!      R1       !         v
;			!---------------! ---------
;			!       N       !         ^
;			!---------------!         !
;			! CONDITION NAME!         !
;			!---------------!         !
;			! N-3 ADDITIONAL!    Signal Array
;			! LONG WORD ARGS!         !
;			!---------------!         !
;			!      PC       !         !
;			!---------------!         !
;			!      PSL      !         v
;			!---------------! ---------
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;--

SSERROR:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$SETSFM_S ENBFLG = #0		; Disable SS failure mode for PUTMSG
	$SETAST_S ENBFLG = #0		; ASTs can play havoc with cond handler
	MOVL	CHF$L_SIGARGLST(AP),R6	; Get the signal array pointer
	CMPZV	#STS$V_FAC_NO,#STS$S_FAC_NO,- ; Is this a message from LIB$SIGNAL?
		CHF$L_SIG_NAME(R6),#UETP_K
	BNEQ	10$			; BR if this is a system exception
	SUBL2	#2,CHF$L_SIG_ARGS(R6)	; Drop the PC and PSL
	$PUTMSG_S MSGVEC = CHF$L_SIG_ARGS(R6) ; Print the message
	$SETSFM_S ENBFLG = #1		; Enable SS failure mode
	$SETAST_S ENBFLG = #1		; Enable ASTs
	RET				; Return to the program
10$:
	CMPZV	#STS$V_FAC_NO,#STS$S_FAC_NO,- ; Is it an RMS failure?
		CHF$L_SIG_ARG1(R6),#RMS_K
	BNEQ	20$			; BR if not
	$SETAST_S ENBFLG = #1		; Enable ASTs
	RET				; Yes, RMS_ERROR gets to handle them
20$:
	MOVL	CHF$L_SIG_NAME(R6),STATUS ; Save the status
	CLRL	R8			; Assume for now it's not SS failure
	CMPL	#SS$_SSFAIL,STATUS	; But is it a System Service failure?
	BNEQ	40$			; BR if not - no special case message
	$GETMSG_S MSGID = CHF$L_SIG_ARG1(R6),- ; Get SS failure code associated text
		 MSGLEN = BUFFER_PTR,-
		 BUFADR = FAO_BUF,-
		 FLAGS  = #14,-
		 OUTADR = MSG_BLOCK
	TSTB	MSG_BLOCK+1		; Get FAO arg count for SS failure code
	BEQL	30$			; Don't use $GETMSG if no $FAO args...
	PUSHAL	BUFFER_PTR		; ...else build up...
	PUSHL	#1			; ...a message describing...
	PUSHL	#UETP$_TEXT		; ...why the System Service failed
	INSV	CHF$L_SIG_ARG1(R6),-	; Give the message...
		#STS$V_SEVERITY,-	; ...the correct severity code
		#STS$S_SEVERITY,(SP)
	MOVL	#3,R8			; Count the number of args we pushed
	BRB	40$
30$:
	PUSHL	CHF$L_SIG_ARG1(R6)	; Save SS failure code
	MOVL	#1,R8			; Count the number of args we pushed
40$:
	MULL3	#4,CHF$L_SIG_ARGS(R6),R7 ; Convert longwords to bytes
	SUBL2	R7,SP			; Save the current signal array...
	MOVC3	R7,CHF$L_SIG_NAME(R6),(SP) ; ...on the stack
	ADDL3	R8,CHF$L_SIG_ARGS(R6),-(SP) ; Push the current arg count
	BRW	ERROR_EXIT		; Exit in error

	.SBTTL	RMS Error Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles error returns from RMS calls.
;
; CALLING SEQUENCE:
;	Called by RMS when a file processing error is found.
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	The FAB or RAB associated with the RMS call.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Error message
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Program may exit, depending on severity of the error.
;
;--

RMS_ERROR:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	MOVL	4(AP),R6		; See whether we're dealing with...
	CMPB	#FAB$C_BID,FAB$B_BID(R6) ; ...a FAB or a RAB
	BNEQ	10$			; BR if it's a RAB
	MOVAL	FILE,R7			; FAB-specific code:  text string...
	MOVL	R6,R8			; ...address of FAB...
	PUSHL	FAB$L_STV(R6)		; ...STV field for error...
	PUSHL	FAB$L_STS(R6)		; ...STS field for error...
	MOVL	FAB$L_STS(R6),STATUS	; ...and save the error code
	BRB	COMMON			; FAB and RAB share other code
10$:
	MOVAL	RECORD,R7		; RAB-specific code:  text string...
	MOVL	RAB$L_FAB(R6),R8	; ...address of associated FAB...
	PUSHL	RAB$L_STV(R6)		; ...STV field for error...
	PUSHL	RAB$L_STS(R6)		; ...STS field for error...
	MOVL	RAB$L_STS(R6),STATUS	; ...and save the error code
COMMON:
	MOVZBL	FAB$B_FNS(R8),R10	; Get the file name size
	$FAO_S	CTRSTR = RMS_ERR_STRING,- ; Common code, prepare error message...
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = R7,-
		P2     = R10,-
		P3     = FAB$L_FNA(R8)
	PUSHAL	BUFFER_PTR		; ...and arguments for ERROR_EXIT...
	PUSHL	#1			; ...
	PUSHL	#UETP$_TEXT		; ...
	EXTZV	#STS$V_SEVERITY,-
		#STS$S_SEVERITY,-
		STATUS,R9 		; ...get the severity code...
	BISB2	R9,(SP)			; ...and add it into the signal name
	PUSHL	#5			; Current arg count

	.sbttl	Error Exit
;++
; FUNCTIONAL DESCRIPTION:
;	This routine prints an error message and exits.
;
; CALLING SEQUENCE:
;	MOVx  error status value,STATUS
;	PUSHx error specific information on the stack
;	PUSHL current argument count
;	BRW   ERROR_EXIT
;
; INPUT PARAMETERS:
;	Arguments to LIB$SIGNAL, as above
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	Message to SYS$OUTPUT and SYS$ERROR
;
; IMPLICIT OUTPUTS:
;	Program exit
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

ERROR_EXIT:

	$SETAST_S ENBFLG = #0		; ASTs can play havoc with messages
	ADDL3	(SP)+,#7,ARG_COUNT	; Get total # args, pop partial count
	INCL	ERROR_COUNT		; Keep running error count
	PUSHL	#0			; Push the time parameter
	PUSHAL	PROCESS_NAME		; Push test name...
	PUSHL	#2			; ...arg count...
	PUSHL	#UETP$_ABENDD!STS$K_ERROR ; ...and signal name
	PUSHL	ERROR_COUNT		; Finish off arg list...
	PUSHL	#1			; ...
	PUSHL	#UETP$_ERBOX!STS$K_ERROR ; ...for error box message
	CALLS	ARG_COUNT,G^LIB$SIGNAL	; Truly bitch

	BISL	#STS$M_INHIB_MSG,STATUS	; Don't print messages twice!
	$EXIT_S STATUS			; Exit in error
	.end	UETMEMY01
