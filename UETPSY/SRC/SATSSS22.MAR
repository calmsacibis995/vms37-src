	.TITLE	SATSSS22 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS22 module tests the execution of the following
;		VMS system services:
;
;		$SETEXV
;		$SETSFM
;		$UNWIND
;
;
; ENVIRONMENT:	User, Supervisor and Executive mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: MMM, 1978
;	  PAUL D. FAY (DISPSERV & TESTSERV MACROS)
;
; MODIFIED BY:
;
;	V03-002	LDJ0002		Larry D. Jones,		11-Mar-1981
;		Modified to match a VMS change in exception stack frame size
;		for VMS version 3.0.
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	.LIBRARY /SYS$LIBRARY:STARLET.MLB/
	$CHFDEF				; Condition handler frame definitions
	$PRDEF				; processor register definitions
	$PRVDEF				; privilege definitions
	$PSLDEF				; PSL definitions
	$SFDEF				; Stack Frame definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
; MACROS
;
	.MACRO SEVT MODE,PRINT,?LAB1
	.LIST ME
;+
;
; The next section will declare 2 mode exception handlers.
; A primary and secondary handler will be
; set using the $SETEXV_G system service.
;
;-
	.NLIST ME
	.LIST MEB
		CLRL	R5			; set init. handler type
		MOVL	#PSL$C_'MODE,W^SET+SETEXV$_ACMODE ; set access mode
LAB1:
		PUSHL	#0			; push dummy parameter
		CALLS	#1,W^REG_SAVE		; save register snapshot
		MOVL	R5,W^SET+SETEXV$_VECTOR ; set vector type
		MOVAL	W^PRE_'MODE'_PRI[R5],-
			W^SET+SETEXV$_PRVHND	; set previous handler
		MOVL	W^'MODE'_HANTAB[R5],-
			W^SET+SETEXV$_ADDRES	; set handler address
		$SETEXV_G W^SET			; declare the handler
	.IF IDN,PRINT,NO
		FAIL_CHECKNP SS$_NORMAL		; check for success
	.IFF
		FAIL_CHECK SS$_NORMAL		; check for success
	.ENDC
	.LIST MEB
		INCL	W^CURRENT_TC		; increment step number
		AOBLEQ	#1,R5,LAB1		; do all 1 types
		STEP=STEP+1			; bump the step # variable
	.LIST ME
;+
;
; An exception will now be caused to check the handlers.
;
;-
	.NLIST ME
	.LIST MEB
		BISB2	#2,W^FLAG1		; set excep. should occur
		CHMU	#0			; cause an exception
		BRB	MODE'_END		; go on
MODE'_HANTAB:
		.ADDRESS MODE'_PRIM		; handler address table
		.ADDRESS MODE'_SEC
;
PRE_'MODE'_PRI:
		.LONG	0			; previous handler table
PRE_'MODE'_SEC:
		.LONG	0
;
	.LIST ME
;+
;
; test the mode primary exception handler
;
;-
	.NLIST ME
	.LIST MEB
MODE'_PRIM:
		.WORD	0
		NEXT_TEST
	.LIST MEB
		INCB	W^FLAG1			; set excep. did occur
	.IF IDN,PRINT,NO
		BSBW	EXCEP_CHECKNP
	.IFF
		BSBW	EXCEP_CHECK		; check primary handler
	.ENDC
		MOVL	#SS$_RESIGNAL,R0	; and resignal
		DECB	W^FLAG1			; reset excep. did occur
		RET
	.LIST ME
;+
;
; test the mode secondary handler and clean up the exception
;
;-
	.NLIST ME
	.LIST MEB
MODE'_SEC:
		.WORD	0
		NEXT_TEST
	.LIST MEB
		INCB	W^FLAG1			; set excep. did occur
	.IF IDN,PRINT,NO
		BSBW EXCEP_CHECKNP
	.IFF
		BSBW	EXCEP_CHECK		; check secondary handler
	.ENDC
		$UNWIND_S			; clean the stack
		MOVL	#SS$_CONTINUE,R0	; and resignal
		BICB2	#3,W^FLAG1		; clear excep. did & should FLAG1
		RET
	.LIST ME
;+
;
; the mode last chance handler can not be tested because
; it will always force an exit from the process.
;
; reset the mode primary handler
;
;-
	.NLIST ME
	.LIST MEB
MODE'_END:
		NEXT_TEST
	.LIST MEB
		$SETEXV_S #0,@W^PRE_'MODE'_PRI,#PSL$C_'MODE ; reset the handlers
	.IF IDN,PRINT,NO
		FAIL_CHECKNP SS$_NORMAL		; check for success
	.IFF
		FAIL_CHECK SS$_NORMAL
	.ENDC
	.LIST ME
;+
;
; reset the mode secondary handler
;
;-
	.NLIST ME
	.LIST MEB
		NEXT_TEST
	.LIST MEB
		$SETEXV_S #1,@W^PRE_'MODE'_SEC,#PSL$C_'MODE'
	.IF IDN,PRINT,NO
		FAIL_CHECKNP SS$_NORMAL	; check for success
	.IFF
		FAIL_CHECK SS$_NORMAL
	.ENDC
	.ENDM SEVT
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS22/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS22/		; module name
TEST_MOD_BEGIN:
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
SETEXV:
	.ASCIC	/SETEXV/
SETSFM:
	.ASCIC	/SETSFM/
UNWIND:
	.ASCIC	/UNWIND/
CS1:
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS4:
	.ASCID	\Unexpected !AS mode exception occured in !AC step !UL.\
CS5:
	.ASCID	\Mode was !AS.\
CS6:
	.ASCID	\Required !AS mode exception did'nt occur in !AC step !UL.\
UM:
	.ASCID	\user\
SM:
	.ASCID	\super\
EM:
	.ASCID	\executive\
KM:
	.ASCID	\kernel\
EXP:
	.ASCID	\status\
STACK:
	.ASCID	\SP\
RETPC:
	.ASCID	\return PC\
ARGLST:
	.LONG	1			; super mode setup arg list
	.ADDRESS SUPER_MODE
MSGVEC:					; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
MODE:
	.LONG	0
SET:
	$SETEXV 0,0,0,0			; SETEXV parameter list
SET1:
	$SETSFM 0			; SETSFM parameter list
UNW:
	$UNWIND DEPTH,0			; UNWIND parameter list
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
PRVHND1:
	.LONG	0			; previous handler address
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	80
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
MSGVEC1:
	.LONG	4			; PUTMSG message vector for exit
	.LONG	0
	.LONG	2
	.BLKL	2
FLAG1:					; flag byte
	.BYTE	0			; BIT0 = 0 exception did'nt occur
					; BIT0 = 1 exception occured
					; BIT1 = 0 exception should'nt have occured
					; BIT1 = 1 exception should have occured
DEPTH:
	.LONG	1			; unwind depth indicator
.PAGE
	.PSECT	SATSSS22,RD,WRT,EXE,LONG
	.SBTTL	SATSSS22
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS22  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS22.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS22 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS22 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS22 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS22 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--



	TEST_START SATSSS22		; let the test begin
	.SBTTL	SETEXV TESTS
;+
;
; $SETEXV tests
;
; test user mode
;
;-
	$CMKRNL_S W^SETUP_SUPER,W^ARGLST	; declare CHMS handler
	ADDL2	S^#EXE$C_CMSTKSZ+16,SP		; fix the user stackpointer
	MOVL	SP,FP				; and user framepointer
	CALLS	#0,W^ERLBUF_DUMP		; dump any errors that occured at kernel mode
	MOVAL	W^SETEXV,W^SERV_NAME		; set service name
	MOVAL	W^UM,W^MODE			; set the mode
	SEVT	USER,YES			; do the user mode tests
;+
;
; test super mode
;
;-
	NEXT_TEST
	MOVAL	W^SM,W^MODE			; set the mode
	CHMS	#1				; do the super mode tests
	STEP=STEP+5
;+
;
; test exec mode
;
;-
	NEXT_TEST
	MOVAL	W^EM,W^MODE			; set the mode
	MODE TO,B10,EXEC,NOREGS			; set mode to exec
	SEVT	EXEC,NO				; do the exec mode tests
	MODE	FROM,B10			; back to user mode
	CALLS	#0,W^ERLBUF_DUMP		; dump any errors
;+
;
; test kernel mode
;
;-
	NEXT_TEST
	MOVAL	W^KM,W^MODE			; set the mode
	MODE TO,C10,KRNL,NOREGS			; get into kernal mode
	SEVT	KERNEL,NO,			; do the kernal mode tests
	MODE	FROM,C10			; back to user mode
	CALLS	#0,W^ERLBUF_DUMP		; dump any errors
.PAGE
	.SBTTL	SETSFM TESTS
;+
;
; $SETSFM tests
;
; test _S disable mode
;
;-
	NEXT_TEST
	MOVAL	W^UM,W^MODE		; set mode
	CLRB	W^FLAG1			; clear flag bits
	MOVAL	W^SETSFM,W^SERV_NAME	; set service name
	MOVAL	W^NOT_ENABLED,(FP)	; set handler address
	$SETSFM_S #0			; disable failure mode
	FAIL_CHECK SS$_WASCLR		; check success
;
; make sure that it's really disabled by forcing an error
;
	$CLREF_S #2000			; force an error
	BRB	A10			; if you got here we're OK
NOT_ENABLED:
	.WORD	0			; enter here if illegally enabled
	CALLS	#0,W^EXCEP_FAIL		; print a failure message
	RET				; go on
A10:
;+
;
; test _S & enable
;
;-
	NEXT_TEST
	MOVAL	W^ENABLED,(FP)		; set the handler address
	$SETSFM_S #1			; test _S & enable mode
	FAIL_CHECK SS$_WASCLR		; check success
;
; make sure that its really enabled by forcing an error
;
	BISB2	#2,W^FLAG1		; set expecting exception flag
	$CLREF_S #2000			; force an error
	BBSC	#0,W^FLAG1,A30		; check the exception flag and clear it if set
	CALLS	#0,W^EXCEP_FAIL		; print exception failure if not set
	BRB	A30			; get to the next test
ENABLED:
	.WORD	^M<R2>			; enter here if OK
	INCB	W^FLAG1			; set exception occured flag
	MOVL	CHF$L_MCHARGLST(AP),R2	; get mechanism array pointer
	CMPL	CHF$L_MCH_SAVR0(R2),-
		#SS$_ILLEFC		; is this the right error?
	BEQL	A20			; br if OK
	PUSHL	CHF$L_MCH_SAVR0(R2)	; push received
	PUSHL	#SS$_ILLEFC		; push expected
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
A20:
	RET				; carry on
A30:
	BICB2	#1,W^FLAG1		; clear exception occured flag
;+
;
; test _G disable mode
;
;-
	NEXT_TEST
	MOVAL	W^NOT_ENABLED1,(FP)	; set handler address
	$SETSFM_G	W^SET1		; test _G & disable
	FAIL_CHECK SS$_WASSET		; check for success
;
; make sure that it really is disabled by forcing an error
;
	BICB2	#2,W^FLAG1		; clear expecting exception flag
	$CLREF_S #2000			; force an error
	BRB	A40			; if we got here we're OK
NOT_ENABLED1:
	.WORD	0			; enter here if illegally enabled
	CALLS	#0,W^EXCEP_FAIL		; print exception failure message
	RET				; carry on
A40:
;+
;
; test _G & enable mode
;
;-
	NEXT_TEST
	MOVAL	B^ENABLED1,(FP)		; set handler address
	INCL	W^SET1+SETSFM$_ENBFLG	; set mode to enable
	$SETSFM_G W^SET1		; test _G & enable
	FAIL_CHECK SS$_WASCLR		; check success
;
; make sure it's enabled by forcing an error
;
	BISB2	#2,W^FLAG1		; set expecting exception flag
	$CLREF_S #2000			; force an error
	BBSC	#0,W^FLAG1,A60		; br if OK and clear the flag bit
	CALLS	#0,W^EXCEP_FAIL		; otherwise print exception fail message
	BRB	A60			; bad news if you got here
ENABLED1:
	.WORD	^M<R2>			; if you are here we're OK
	INCB	W^FLAG1			; set exception occured flag
	MOVL	CHF$L_MCHARGLST(AP),R2	; get mechanism array pointer
	CMPL	CHF$L_MCH_SAVR0(R2),-
		#SS$_ILLEFC		; is it the right error message
	BEQL	A60			; br if good
	PUSHL	CHF$L_MCH_SAVR0(R2)	; push received
	PUSHL	#SS$_ILLEFC		; set expected
	PUSHAL	W^EXP			; set string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
A50:
	RET				; carry on
A60:
	BICB2	#1,W^FLAG1		; clear exception occured flag

	.SBTTL	UNWIND TESTS
;+
;
; $UNWIND tests
;
; test level 1 _S
;
;-
	NEXT_TEST
	MOVAL	W^UM,W^MODE		; set the mode
	MOVAL	W^UNWIND,W^SERV_NAME	; set service name
	MOVL	SP,W^WORK2		; save the stack pointer
	SUBL2	#4,W^WORK2		; compensate for BSBW PC+2 word
	CALLS	#0,B^10$		; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)		; set the handler address
	CHMU	#0			; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2 ; get signal array address
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; check the signal name
	BEQL	25$			; br if its an unwind signal
	PUSHL	#0			; push dummy parameter
	CALLS	#1,W^REG_SAVE		; save a register snapshot
	$UNWIND_S DEPADR=DEPTH,NEWPC=30$ ; try level 1 _S
	FAIL_CHECK SS$_NORMAL		; check success
25$:
	MOVL	#SS$_CONTINUE,R0	; signal a continue
	RET				; do your magic now
30$:
	BSBW	W^STACK_CHECK		; check the stack
;+
;
; test level 1 _G
;
;-
	NEXT_TEST
	MOVAL	B^30$,UNW+UNWIND$_NEWPC	; set new PC
	CALLS	#0,B^10$		; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)		; set the handler address
	CHMU	#0			; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2 ; get signal array address
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; check the signal name
	BEQL	25$			; br if its an unwind signal
	MOVAL	B^30$,W^UNW+UNWIND$_NEWPC ; set the return PC
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a register snapshot
	$UNWIND_G W^UNW			; try level 1 _G
	FAIL_CHECK SS$_NORMAL		; check for success
25$:
	MOVL	#SS$_CONTINUE,R0	; signal a continue
	RET				; do your magic now
30$:
	BSBW	W^STACK_CHECK		; check the stack
;+
;
; test level 2 _S
;
;-
	NEXT_TEST
	MOVL	#2,W^DEPTH		; set the depth
	CALLS	#0,B^5$			; put a call frame on the stack
5$:
	.WORD	0
	CALLS	#0,B^10$		; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)		; set the handler address
	CHMU	#0			; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2 ; get signal array address
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; check the signal name
	BEQL	25$			; br if its an unwind signal
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a register snapshot
	$UNWIND_S DEPADR=DEPTH,NEWPC=30$ ; try level 1 _S
	FAIL_CHECK SS$_NORMAL		; check success
25$:
	MOVL	#SS$_CONTINUE,R0	; signal a continue
	RET
30$:
	BSBW	W^STACK_CHECK		; check the stack
;+
;
; test level 2 _G
;
;-
	NEXT_TEST
	MOVAL	B^30$,W^UNW+UNWIND$_NEWPC ; set the new PC
	CALLS	#0,B^5$			; put a stack frame on the stack
5$:
	.WORD	0
	CALLS	#0,B^10$		; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)		; set the handler address
	CHMU	#0			; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2 ; get signal array address
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; check the signal name
	BEQL	25$			; br if its an unwind signal
	MOVAL	B^30$,W^UNW+UNWIND$_NEWPC ; set the return PC
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a register snapshot
	$UNWIND_G W^UNW			; try level 1 _G
	FAIL_CHECK SS$_NORMAL		; check for success
25$:
	MOVL	#SS$_CONTINUE,R0	; set continue
	RET
30$:
	BSBW	W^STACK_CHECK		; check the stack
;+
;
; test level 3 _S
;
;-
	NEXT_TEST
	MOVL	S^#3,W^DEPTH		; set the depth
	CALLS	#0,B^4$			; put a frame on the stack
4$:
	.WORD	0
	CALLS	#0,B^8$			; and an other
8$:
	.WORD	0
	CALLS	#0,B^10$		; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)		; set the handler address
	CHMU	#0			; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2 ; get signal array address
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; check the signal name
	BEQL	25$			; br if its an unwind signal
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a register snapshot
	$UNWIND_S DEPADR=DEPTH,NEWPC=30$ ; try level 1 _S
	FAIL_CHECK SS$_NORMAL		; check success
25$:
	MOVL	#SS$_CONTINUE,R0	; set continue
	RET
30$:
	BSBW	W^STACK_CHECK		; check the stack
;+
;
; test level 3 with _G
;
;-
	NEXT_TEST
	MOVAL	B^30$,W^UNW+UNWIND$_NEWPC ; set the new PC
	CALLS	#0,B^4$			; put a frame on the stack
4$:
	.WORD	0
	CALLS	#0,B^8$			; and another
8$:
	.WORD	0
	CALLS	#0,B^10$		; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)		; set the handler address
	CHMU	#0			; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2 ; get signal array address
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; check the signal name
	BEQL	25$			; br if its an unwind signal
	MOVAL	B^30$,W^UNW+UNWIND$_NEWPC ; set the return PC
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a register snapshot
	$UNWIND_G W^UNW			; try level 1 _G
	FAIL_CHECK SS$_NORMAL		; check for success
25$:
	MOVL	#SS$_CONTINUE,R0	; set continue
	RET
30$:
	BSBW	W^STACK_CHECK		; check the stack
	TEST_END

.PAGE
	.SBTTL SETUP_SUPER ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to declare an initial CHMS handler from user mode.
;
; CALLING SEQUENCE:
;	$CMKRNL_S W^SETUP_SUPER,ARGLST
;
;		ARGLST = address of a pointer to a one parameter argument list containing
;			 the address of the entry mask of the CHMS handler
;
; INPUT PARAMETERS:
;	ARGLST
;
; IMPLICIT INPUTS
;	NONE
;
; OUTPUT PARAMETERS:
;	Declares a change mode handler for super mode which must be
;	reset to DCL in the users handler routine when the handler is
;	no longer needed.
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	SERV_NAME is left containing a pointer to DCLCMH
;
; ON ENTRY:
;		       ---------	       ---------
;		KSP => !   0   !	USP => !       !
;		       !   0   !	       !  USER !
;		       !   AP  !	       !       !
;		       !   FP  !	       !  CALL !
;		       !   PC  !	       !       !
;		       !   0   !	       ! FRAME !
;		       !   0   !	       !       !
;		       !   AP  !	       ---------
;		       !   FP  !
;		       !SRVEXIT!
;		       !   PC  !
;		       !  PSL  !
;		       ---------
;--
.PAGE
RETURN_PC:
	.LONG	0			; storage for user return PC
HANDLER_PC:
	.LONG	0			; storage for handler PC
;
SETUP_SUPER:
	.WORD	^M<R2,R3>	
	MFPR	#PR$_USP,R3		; get the user call frame address
	MOVL	SF$L_SAVE_PC(R3),B^RETURN_PC ; get the user return PC
	MOVL	4(AP),HANDLER_PC	; save the handler address
	MOVL	SF$L_SAVE_FP(FP),R2	; get saved FP
	ADDL	S^#EXE$C_CMSTKSZ,R2	; back over change mode stack frame
	MOVAB	B^20$,(R2)		; set return address
	INSV	#<<PSL$C_SUPER@PSL$S_CURMOD>+PSL$C_SUPER>,-
		#PSL$V_PRVMOD,-
		#PSL$S_CURMOD*2,4(R2)	; set current and previous mode to super
	MOVL	S^#SS$_NORMAL,R0	; set correct return code
	RET				; enter super mode
20$:
	CLRL	-(SP)			; set up dummy PSL
	CALLG	(SP),B^30$		; create initial call frame
30$:
	.WORD	^M<>			; entry mask
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save the registers
	MOVAL	W^SM,W^MODE		; set the mode
	MOVAL	W^DCLCMH,W^SERV_NAME	; set service name
	$DCLCMH_S @HANDLER_PC,W^PRVHND1,#0 ; set real handler
	FAIL_CHECKNP SS$_NORMAL		; check for success
	PUSHL	#<<PSL$C_USER@PSL$V_CURMOD>-
		!<PSL$C_USER@PSL$V_PRVMOD>>; set return to user
	PUSHL	RETURN_PC		; set the return PC
	REI				; return to user mode
.PAGE
.SBTTL SUPER_MODE
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to handle the CHMS instructions.
;
; CALLING SEQUENCE:
;	CHMS	#N
;
; INPUT PARAMETERS:
;	  SP=>	CHMS parameter
;		PC
;		PSL
;
;	  The CHMS parameter can be one of the following:
;
;		1 = execute the $SETEXV tests
;		2 = execute a $DCLCMH_S to reset the CHMS handler
;
; OUTPUT PARAMETERS:
;	NONE
;--

WORK:
	.LONG	0			; scratch storage
DCLCMH:
	.ASCIC	/DCLCMH/		; service name
SUPER_MODE:
	MOVL	(SP)+,R0		; get CHM parameter off the stack
	CASEB	R0,#1,#2		; do the right thing
10$:
	.WORD	20$-10$
	.WORD	B30-10$
20$:
	STEP=6
	SEVT	SUPER,YES		; do the super tests
	BRW	B70			; carry on
B30:
	MOVAL	W^SERV_NAME,W^WORK	; save previous service name
	MOVAL	W^DCLCMH,W^SERV_NAME	; set temp service name
	$DCLCMH_S @PRVHND1,,#0		; reset the CHMS handler to DCL
	FAIL_CHECK SS$_NORMAL		; check for success
	MOVL	W^WORK,W^SERV_NAME	; reset to the previous service name
B70:
	REI				; go back to user mode
.PAGE
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)		; set number past R0-R1 and save
	BICL2	#3,R1			; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
.PAGE
	.SBTTL REG_CHECKNP
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution without printing it. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed. This routine collects the error
;	information in buffer ERLB instead of printing it.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages logged in buffer ERLB which are printed
;	using routine ERLBUF_DUMP.
;
;	Error packets are in the following form:
;		!-----------------!
;		!Service name pntr!
;		!-----------------!
;		!     Step #	  !
;		!-----------------!
;		!Mode name pointer!
;		!-----------------!
;		!	      !   ! long word count
;		!-----------------!
;		!\/\/\/\/\/\/\/\/\! 3-4 parameter long words
;
;--

FLAG:
	.BYTE 0			; error flags are BIT0 = 0 means no errors in the buffer
				;		  BIT0 = 1 means errors in the buffer
ELBP:
	.ADDRESS ERLB		; error log buffer pointer
ERLB:
	.BLKB	1000		; error log buffer
;
REG_CHECKNP:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0	; is this the right fail code
	BEQL	10$		; br if yes
	BISB2	#1,FLAG		; set the error logged flag bit
	MOVL	ELBP,R2		; get the current error log pointer
	MOVL	W^SERV_NAME,(R2)+ ; save the service name
	MOVL	W^CURRENT_TC,(R2)+ ; save the step number
	MOVL	W^MODE,(R2)+	; save the mode
	MOVB	#3,(R2)+	; save the long word count
	MOVL	R0,(R2)+	; save received status
	MOVL	4(AP),(R2)+	; save expected status
	MOVAL	W^EXP,(R2)+	; save the string variable
	CLRB	(R2)		; set the terminator
	MOVL	R2,ELBP		; reset the buffer pointer
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR ; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE ; set severity code
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA ; check all but R0 and R1
	BEQL	20$		; br if OK
	BISB2	#1,FLAG		; set error logged flag bit
	MOVL	ELBP,R2		; get current error log buf pointer
	MOVL	W^SERV_NAME,(R2)+ ; save the service name
	MOVL	W^CURRENT_TC,(R2)+ ; save the step number
	MOVL	W^MODE,(R2)+	; save the mode
	MOVB	S^#4,(R2)+	; set longword count
	SUBL3	#REG_SAVE_AREA,-
	R3,R6			; calc reg number
	DIVL2	S^#4,R6		; make it a longword count
	ADDL3	S^#2,R6,(R2)+	; correct for R0-R1 and save
	MOVL	(R1),(R2)+	; save received results
	MOVL	(R3),(R2)+	; save expected results
	MOVAL	W^REG,(R2)+	; save string variable
	CLRB	(R2)		; set the terminator
	MOVL	R2,ELBP		; reset the buffer pointer
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
20$:
	RET			; bail out
.PAGE
	.SBTTL	ERLBUF_DUMP
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check for errors in the error log buffer and
;	report any that are there.
;
; CALLING SEQUENCE:
;	CALLS #0,W^ERLBUF_DUMP
;
; INPUT PARAMETERS:
;	FLAG bit 0 = 0 for no errors logged
;	FLAG bit 0 = 1 for errors logged
;	if errors logged then buffer ERLB must contain legal format errors
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

ERLBUF_DUMP:
	.WORD	^M<R2,R3,R4>
	BLBC	FLAG,30$	; br if no errors to report
	MOVAL	ERLB,R2		; set up buffer pointer
10$:
	TSTB	(R2)		; any more errors?
	BEQL	30$		; br if not
	MOVL	(R2)+,W^SERV_NAME ; reset service name
	MOVL	(R2)+,W^CURRENT_TC ; reset step #
	MOVL	(R2)+,W^MODE	; reset the mode
	MOVZBL	(R2)+,R3	; get the longword count
	MOVL	R3,R4		; and save it
20$:
	PUSHL	(R2)+		; push a parameter
	SOBGTR	R3,20$		; and push them all
	CALLS	R4,W^PRINT_FAIL	; print the failure
	BRB	10$		; do the next one
30$:
	MOVAL	ERLB,ELBP	; reset the buffer pointer
	CLRB	W^ERLB		; set fresh terminater
	RET			; bail out
.PAGE
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	20$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
20$:
	
	$PUTMSG_S W^MSGVEC			; print the message
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET
	.SBTTL	EXCEP_FAIL
;++
; FUCTIONAL DESCRIPTION:
;	Subroutine to identify an exception failure.
;
; CALLING SEQUENCE:
;	CALLS #0,W^EXCEP_FAIL
;
; INPUT PARAMETERS:
;	MODE		contains an address pointing to an ascii string desc.
;			of the current CPU mode.
;	CURRENT_TC	contains the current test case number.
;	FLAG		contains expected or unexpected flag.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

EXCEP_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	BBC	#1,W^FLAG,10$			; br if unexpected exception
	$FAO_S	W^CS6,W^MESSAGEL,W^MSGL,W^MODE,-
		#TEST_MOD_NAME,W^CURRENT_TC	; print missing exception
	BRB	20$				; and carry on
10$:
	$FAO_S	W^CS4,W^MESSAGEL,W^MSGL,W^MODE,-
		#TEST_MOD_NAME,W^CURRENT_TC	; print unexpected exception
20$:
	$PUTMSG_S	W^MSGVEC		; print the message
	RET
.PAGE
	.SBTTL	EXCEP_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check for proper exception name.
;
; CALLING SEQUENCE:
;	CALLS #0,W^EXCEP_CHECK
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	Possible error messages.
;
;--

WORK1:
	.LONG	0			; temp storage
;
EXCEP_CHECK:
	MOVL	R2,B^WORK1		; save r2
	MOVL	CHF$L_SIGARGLST(AP),R2	; get signal array pointer
	CMPL	CHF$L_SIG_NAME(R2),-
		#SS$_CMODUSER		; is it the right exception?
	BEQL	10$			; br if yes
	PUSHL	B^CHF$L_SIG_NAME(R2)	; push received
	PUSHL	#SS$_CMODUSER		; push expected
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
10$:
	MOVL	B^WORK1,R2		; restore R2
	RSB				; return
	.SBTTL STACK_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check the stack level.
;
; CALLING SEQUENCE:
;	BSBW W^STACK_CHECK
;
; INPUT PARAMETERS:
;	WORK2 = stack pointer value to check against
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

WORK2:
	.LONG	0		; stack save location
STACK_CHECK:
	CMPL	SP,B^WORK2	; check the level
	BEQL	10$		; br if OK
	PUSHL	SP		; push received
	PUSHL	B^WORK2		; push expected
	PUSHAL	W^STACK		; push string variable
	CALLS	#3,W^PRINT_FAIL	; print the failure
10$:
	RSB			; return
	.SBTTL	EXCEP_CHECKNP
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check for proper exception name without printing.
;
; CALLING SEQUENCE:
;	CALLS #0,W^EXCEP_CHECKNP
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	Possible output to ERLB.
;
;--

;
EXCEP_CHECKNP:
	MOVL	R2,W^WORK1		; save R2
	MOVL	R3,B^WORK2		; save R3
	MOVL	CHF$L_SIGARGLST(AP),R3	; get signal array pointer
	CMPL	CHF$L_SIG_NAME(R3),-
		#SS$_CMODUSER		; is it the right exception?
	BEQL	10$			; br if yes
	BISB2	#1,W^FLAG		; set the error logged flag bit
	MOVL	ELBP,R2			; get current error log pointer
	MOVL	W^SERV_NAME,(R2)+	; save the service name
	MOVL	W^CURRENT_TC,(R2)+	; save the step number
	MOVL	W^MODE,(R2)+		; save the mode
	MOVB	S^#3,(R2)+		; save the long word count
	MOVL	CHF$L_SIG_NAME(R3),(R2)+ ; save received name
	MOVL	#SS$_CMODUSER,(R2)+	; save expected name
	MOVAL	W^EXP,(R2)+		; save string variable
	CLRB	(R2)			; set the terminator
	MOVL	R2,W^ELBP		; reset the buffer pointer
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR ; set failure message adr
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE ; set severity code
10$:
	MOVL	W^WORK1,R2		; restore R2
	MOVL	B^WORK2,R3		; restore R3
	RSB				; return
.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSS22
