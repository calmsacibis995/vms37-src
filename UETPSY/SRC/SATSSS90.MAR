	.TITLE	SATSSS90 SATS SYST SERV TESTS  $CMKRNL/EXEC (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSTST (SATS SYSTEM SERVICE TESTS)
;
; ABSTRACT:
;
;		THIS MODULE CONTAINS SUBROUTINES WHICH, WHEN LINKED
; WITH SUCCOMMON.OBJ, FORM TEST MODULE SATSSS90 TO TEST SUCCESSFUL
; OPERATION OF THE $CMKRNL/EXEC SYSTEM SERVICES. EACH SERVICE IS INVOKED
; UNDER VARIOUS INPUT CONDITIONS WITH VARYING INPUT PARAMETERS. ONLY
; SUCCESSFUL STATUS CODES ARE EXPECTED IN THIS TEST MODULE.  CORRECT 
; OPERATION OF EACH SERVICE FOR EACH OF ITS ISSUANCES IS VERIFIED BY
; CHECKING FOR AN SS$_NORMAL STATUS CODE, EXPECTED RETURN ARGUMENTS
; AND EXPECTED FUNCTIONALITY PERFORMED.
;
; ENVIRONMENT:	USER MODE IMAGE; NEEDS CMKRNL PRIVILEGE,
;		DYNAMICALLY ACQUIRES OTHER PRIVILEGES, AS NEEDED.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: MAY, 1978
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PRVDEF				; PRIVILEGE BIT DEFINITIONS
	$PHDDEF				; PROCESS HEADER OFFSETS
	$PSLDEF				; MODE SYMBOL DEFINITIONS
	$LOGDEF				; LOG NAME TABLE DEFINITIONS
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
RLEN		= 10			; NO. OF RANDOM LWORDS FOR ARG LIST
STRING_MASK	= ^M<R2,R3,R4,R5> 	; REGISTER SAVE MASK FOR CMPC INSTRUCTION
;
; OWN STORAGE:
;
	.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
TEST_MOD_NAME::	STRING	C,<SATSSS90>	; TEST MODULE NAME
TEST_MOD_NAME_D: STRING	I,<SATSSS90>	; TEST MODULE NAME DESCRIPTOR
MSG1_INP_CTL:	STRING	I,<  SSCHM!4ZW: CONDITIONS:>
					; FAO CTL STRING FOR MSG1 IN SUCCOMMON.MAR
MSG3_ERR_CTL::	STRING	I,< *SSCHM!4ZW: !AS> 
					; FAO CTL STRING FOR MSG3 IN SUCCOMMON.MAR
ARGLST0:	.LONG	0		; ZERO LENGTH ARG LIST
PMODE_LOG:	.LONG	2		; UNIQUE LOGICAL NAME ...
		.ADDRESS TESTNUM 	; ... FOR EACH TEST CASE
	.PAGE
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
PRIVMASK:	.BLKQ	1		; ADDR OF PRIVILEGE MASK (IN PHD)
ARGLST:		.BLKL	1		; HOLDS CURRENT COND 1 TABLE ENTRY
ARGLSTR:	.LONG	RLEN		; ARG LIST TO CONTAIN ...
		.BLKL	RLEN		; ... RANDOM DATA
ARGLSTDESC1:	.BLKL	2		; DESCRIPTOR FOR ARG LIST (BEFORE RTN CALL)
ARGLSTDESC2:	STRING	O,4*<RLEN+1> 	; DESCR'R FOR ARG LIST (DURING RTN CALL)
RTNMODE:	.BLKB	1		; MODE IN WHICH PRIV MODE RTN GETS CONTROL
PMODE_EQL:	STRING	O,1		; EQUIVALENCE NAME STRING
	.PAGE
	.SBTTL	CONDITION TABLES
;
;	***** CONDITION TABLES FOR CMKRNL/CMEXEC SYSTEM SERVICES *****
;
	COND	1,NOTARG,<ARGUMENT LIST TYPE>,-
		  <ARG LIST NOT SPECIFIED>,-
		  <ARG LIST SPECIFIED WITH 0 ARGS>,-
		  <ARG LIST SPECIFIED WITH SEVERAL ARGS>,-
 
		    .LONG	0	; ARG LIST NOT SPECIFIED
		    .ADDRESS	ARGLST0	; ARG LIST WITH 0 ARGS
		    .ADDRESS	ARGLSTR	; ARG LIST WITH SEVERAL ARGS
;
	COND	2,NOTARG,<PRIVILEGED MODE SERVICE>,-
		  <$CMKRNL>,-
		  <$CMEXEC>,-
 
		    .BYTE	PSL$C_KERNEL ; $CMKRNL SERVICE
		    .BYTE	PSL$C_EXEC   ; $CMEXEC SERVICE
;
	COND	3,NULL
 
	COND	4,NULL
 
	COND	5,NULL
 
	.PSECT	SATSSS90,RD,WRT,EXE
	.PAGE
	.SBTTL	TM_SETUP, TM_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		TM_SETUP AND TM_CLEANUP ARE CALLED TO PERFORM
; REQUIRED HOUSEKEEPING AT THE BEGINNING AND END, RESPECTIVELY, OF
; TEST MODULE EXECUTION.
;
; CALLING SEQUENCE:
;
;	BSBW TM_SETUP   BSBW TM_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	TM_SETUP:  COND TABLE INDEX REGISTERS (R2,3,4,5,6) CLEARED;
;		   ALL PRIVILEGES ACQUIRED.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



TM_SETUP::
	CLRL	R2			; INITIALIZE
	CLRL	R3			; .. CONDITION
	CLRL	R4			; .... TABLE
	CLRL	R5			; ...... INDEX
	CLRL	R6			; ........ REGISTERS
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE BEGIN MSG
	MOVAL	TEST_MOD_SUCC,TMD_ADDR	; ASSUME END MSG WILL SHOW SUCCESS
	INSV	#SUCCESS,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR SUCCESS
	MODE	TO,5$,KRNL		; KERNEL MODE TO ACCESS PHD
	MOVL	@#CTL$GL_PHD,R9		; GET PROCESS HEADER ADDRESS
	MOVAL	PHD$Q_PRIVMSK(R9),PRIVMASK ; GET PRIV MASK ADDRESS
	MODE	FROM,5$	; BACK TO USER MODE
	PRIV	ADD,ALL			; GET ALL PRIVILEGES
	$SETPRN_S TEST_MOD_NAME_D 	; SET PROCESS NAME
	SS_CHECK  NORMAL		; CHECK STATUS CODE RETURNED FROM SETPRN
	PUSHR	#STRING_MASK		; SAVE REGS R2-R5 FOR MOVC3
	MOVC3	#4*RLEN,TM_SETUP,ARGLSTR+4 ; GET "RLEN" LWORDS OF RANDOM DATA
	POPR	#STRING_MASK		; RESTORE REGS R2-R5
	RSB				; RETURN TO MAIN ROUTINE
TM_CLEANUP::
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE END MSG
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	CONDITION SUBROUTINES - SETUP AND CLEANUP 
;++
; FUNCTIONAL DESCRIPTION:
;
;		CONDX AND CONDX_CLEANUP ARE SUBROUTINES WHICH ARE EXECUTED
; BEFORE AND AFTER THE VERIFY SUBROUTINE, RESPECTIVELY, WHENEVER A NEW
; CONDITION X VALUE IS SELECTED (SEE FUNCTIONAL DESCRIPTION OF SUCCOMMON
; ROUTINE IN SUCCOMMON.MAR). ANY SETUP FUNCTION PARTICULAR TO THE 
; CONDITION X TABLE IS INCLUDED IN THE CONDX SUBROUTINE AND CLEANED
; UP, IF NECESSARY, IN THE CONDX_CLEANUP SUBROUTINE. THIS INCLUDES,
; ESPECIALLY, CODE TO DETECT CONFLICTS AMONG CURRENT ENTRIES IN TWO
; OR MORE CONDITION TABLES. IF A CONFLICT IS DETECTED, A NON-ZERO
; VALUE IS STORED INTO CONFLICT, WHICH CAUSES THE CALLING ROUTINE
; (SUCCOMMON) TO SKIP THE CURRENT ENTRY IN THE CONDITION X TABLE.
;
; CALLING SEQUENCE:
;
;	BSBW CONDX   BSBW CONDX_CLEANUP
;	  WHERE X = 1,2,3,4,5
;
; INPUT PARAMETERS:
;
;	CONFLICT = 0
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;
; OUTPUT PARAMETERS:
;
;	CONFLICT SET TO NON-ZERO IF COND TABLE CONFLICT DETECTED.
;
; IMPLICIT OUTPUTS:
;
;	R2,3,4,5,6 PRESERVED
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



COND1::
	RSB				; RETURN TO MAIN ROUTINE
COND1_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND2::
	RSB				; RETURN TO MAIN ROUTINE
COND2_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND3::
	RSB				; RETURN TO MAIN ROUTINE
COND3_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND4::
	RSB				; RETURN TO MAIN ROUTINE
COND4_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND5::
	RSB				; RETURN TO MAIN ROUTINE
COND5_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	FORM_CONDS
;++
; FUNCTIONAL DESCRIPTION:
;
; 		FORM_CONDS FORMATS AND PRINTS INFORMATION ABOUT
;  THE CURRENT ELEMENT IN EACH OF THE CONDITION TABLES.
;
; CALLING SEQUENCE:
;
;	BSBW FORM_CONDS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_T - TITLE TEXT FOR CONDX TABLE
;		CONDX_TAB - ELEMENT TEXT FOR CONDX TABLE
;		CONDX_C - CONTEXT OF THE CONDX TABLE
;		CONDX_E - DATA ELEMENTS OF THE CONDX TABLE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



FORM_CONDS::
	$FAO_S	MSG1_INP_CTL,FAO_LEN,FAO_DESC,TESTNUM
					; FORMAT CONDITIONS HEADER MSG
	BSBW	OUTPUT_MSG		; ... AND PRINT IT
	CMPB	#COND1_C,#NULL		; IS CONDITION 1 NULL ?
	BNEQU	10$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
10$:
	MOVAL	COND1_T,MSG_A		; SAVE ADDRESS OF CONDITION 1 TITLE FOR FAO
	MOVL	COND1_TAB[R2],MSG_B 	; SAVE ADDR OF COND 1 CURR TEXT ELT FOR FAO
	MOVB	#COND1_C,MSG_CTXT 	; SAVE CONDITION 1 CONTEXT FOR FAO
	MOV_VAL	COND1_C,COND1_E[R2],MSG_DATA1 ; GIVE COND 1 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 1 MSG
	CMPB	#COND2_C,#NULL		; IS CONDITION 2 NULL ?
	BNEQU	20$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
20$:
	MOVAL	COND2_T,MSG_A		; SAVE ADDRESS OF CONDITION 2 TITLE FOR FAO
	MOVL	COND2_TAB[R3],MSG_B 	; SAVE ADDR OF COND 2 CURR TEXT ELT FOR FAO
	MOVB	#COND2_C,MSG_CTXT 	; SAVE CONDITION 2 CONTEXT FOR FAO
	MOV_VAL	COND2_C,COND2_E[R3],MSG_DATA1 ; GIVE COND 2 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 2 MSG
	CMPB	#COND3_C,#NULL		; IS CONDITION 3 NULL ?
	BNEQU	30$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
30$:
	MOVAL	COND3_T,MSG_A		; SAVE ADDRESS OF CONDITION 3 TITLE FOR FAO
	MOVL	COND3_TAB[R4],MSG_B 	; SAVE ADDR OF COND 3 CURR TEXT ELT FOR FAO
	MOVB	#COND3_C,MSG_CTXT 	; SAVE CONDITION 3 CONTEXT FOR FAO
	MOV_VAL	COND3_C,COND3_E[R4],MSG_DATA1 ; GIVE COND 3 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 3 MSG
	CMPB	#COND4_C,#NULL		; IS CONDITION 4 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND4_T,MSG_A		; SAVE ADDRESS OF CONDITION 4 TITLE FOR FAO
	MOVL	COND4_TAB[R5],MSG_B 	; SAVE ADDR OF COND 4 CURR TEXT ELT FOR FAO
	MOVB	#COND4_C,MSG_CTXT 	; SAVE CONDITION 4 CONTEXT FOR FAO
	MOV_VAL	COND4_C,COND4_E[R5],MSG_DATA1 ; GIVE COND 4 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 4 MSG
	CMPB	#COND5_C,#NULL		; IS CONDITION 5 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND5_T,MSG_A		; SAVE ADDRESS OF CONDITION 5 TITLE FOR FAO
	MOVL	COND5_TAB[R6],MSG_B 	; SAVE ADDR OF COND 5 CURR TEXT ELT FOR FAO
	MOVB	#COND5_C,MSG_CTXT 	; SAVE CONDITION 5 CONTEXT FOR FAO
	MOV_VAL	COND5_C,COND5_E[R6],MSG_DATA1 ; GIVE COND 5 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 5 MSG
FORM_CONDSX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VERIFY
;++
; FUNCTIONAL DESCRIPTION:
;
;		VERIFY IS CALLED ONCE FOR EACH COMBINATION OF CONDITION
; TABLE VALUES (AS DETERMINED BY THE INDEX REGISTERS R2,3,4,5,6 FOR
; COND TABLES 1,2,3,4,5, RESPECTIVELY). VERIFY ESTABLISHES THE CONDITIONS
; SPECIFIED BY THE COND TABLES AND ISSUES THE SUBJECT SYSTEM SERVICE
; ($CMKRNL OR $CMEXEC). THEN, THE SUCCESSFUL OPERATION OF THE SERVICE IS
; VERIFIED BY EXAMINING THE STATUS CODE RETURNED, THE VALUES FOR RETURN ARGS
; AND THE FUNCTIONALITY PERFORMED. THE EXAMINATIONS TAKE THE FORM OF 
; COMPARISONS AGAINST EXPECTED VALUES. ANY FAILING COMPARISON CAUSES AN
; ERR_EXIT MACRO TO BE EXECUTED (EITHER DIRECTLY, OR INDIRECTLY,
; THROUGH THE SS_CHECK MACRO); ERR_EXIT SETS EFLAG TO NON-ZERO,
; PRINTS ERROR MESSAGES AND CAUSES AN IMMEDIATE RSB TO CALLER.
; WHEN ERR_EXIT IS EXECUTED, FURTHER CALLS TO VERIFY ARE SUPPRESSED,
; AND, AFTER EXECUTING CLEANUP SUBROUTINES, THE IMAGE EXITS.
;
; CALLING SEQUENCE:
;
;	BSBW VERIFY
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	VERIFY HAS NO OUTPUT. SINCE ITS PURPOSE IS TO TEST FOR ERRORS,
;	IT MERELY RETURNS TO CALLER NORMALLY AFTER THE TESTS, PROVIDING
;	ALL WERE SUCCESSFUL; IF AN ERROR IS DISCOVERED, RETURN IS VIA
;	AN ERR_EXIT OR SS_CHECK MACRO, BOTH OF WHICH DOCUMENT DETECTED
;	ERRORS.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VERIFY::
	TSTB	CFLAG			; SHOULD CONDITIONS BE PRINTED ?
	BEQL	5$			; NO -- CONTINUE
	BSBW	FORM_CONDS		; YES -- FMT & PRINT ALL CONDS FOR THIS T.C.
5$:
	MOVL	COND1_E[R2],ARGLST 	; GET CURRENT ENTRY OUT OF TABLE
	MOVB	ONES,RTNMODE		; INIT MODE FOR EACH TST CASE
	MOVW	TESTNUM,ARGLSTR+4 	; MAKE RANDOM DATA UNIQUE FOR EACH T.C.
;
; ****** SYSTEM SERVICE CALL WHICH IS THE SUBJECT OF THIS TEST CASE ******
;
	CMPB	COND2_E[R3],#PSL$C_KERNEL ; IS THIS A CMKRNL REQUEST ?
	BEQLU	10$			; YES -- GO DO IT
	$CMEXEC_S  PRIVMODERTN,@ARGLST 	; ISSUE CMEXEC REQUEST
	BRB	15$			; ... AND GO CHECK RESULTS
10$:
	$CMKRNL_S PRIVMODERTN,@ARGLST 	; ISSUE KERNEL REQUEST
15$:
	MOVL	ONES,R7			; PREPARE FOR R0 COMPARISON
	MOVW	TESTNUM,R7		; ......
	CMPL	R0,R7			; DID PRIV MODE RTN RETURN EXPECTED STATUS ?
	BEQLU	20$			; YES -- CONTINUE
	MOVL	R7,EXPV			; NO -- LOAD EXPECTED AND ....
	MOVL	R0,RECV			; ... RETURNED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT USER-GENERATED STATUS CODE>, -
		      < RETURNED FROM PRIV MODE RTN>
20$:
	CMPB	RTNMODE,COND2_E[R3] 	; DID PRIV MODE RTN REALLY GET EXP MODE ?
	BEQLU	30$			; YES -- CONTINUE
	MOVB	COND2_E[R3],EXPV 	; NO -- LOAD UP EXPECTED AND
	MOVB	RTNMODE,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT BYTE,<PRIVILEGED MODE SERVICE GAVE USER>, -
		      < ROUTINE INCORRECT MODE>
30$:
	MOVL	ARGLSTDESC2,ARGLSTDESC1 ; GET LENGTH OF DESCRIPTOR
	MOVL	ARGLST,ARGLSTDESC1+4 	; ... AND ITS ADDRESS
	TSTL	R2			; 1ST CONDITION 1 ELEMENT ?
	BNEQ	40$			; NO -- CONTINUE
	MOVAL	ARGLST0,ARGLSTDESC1+4 	; YES -- USE 0 ARG LIST
40$:
	PUSHR	#STRING_MASK		; SAVE REGS R2-R5 FOR CMPC
	CMPC3	ARGLSTDESC1,@ARGLSTDESC1+4,@ARGLSTDESC2+4
					; IS EXPECTED LIST = ACTUAL LIST ?
	POPR	#STRING_MASK		; RESTORE REGS R2-R5
	BEQLU	VERIFYX			; YES -- ALL FINISHED
	MOVQ	ARGLSTDESC1,EXPV 	; NO -- LOAD UP EXPECTED AND
	MOVQ	ARGLSTDESC2,RECV 	; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT DESC,<ARG LIST IN PRIV MODE ROUTINE >, -
		      <CONTAINS INCORRECT DATA>
VERIFYX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VFY_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		VFY_CLEANUP EXECUTES SYSTEM SERVICES TO UNDO THE
; EFFECT OF THOSE ISSUED IN THE VERIFY SUBROUTINE. VFY_CLEANUP MUST
; ASSUME THAT VERIFY MAY NOT HAVE EXECUTED IN ITS ENTIRETY (IF AN
; ERROR IS FOUND). ALSO, VFY_CLEANUP MAY ISSUE SS_CHECK OR ERR_EXIT
; ONLY AFTER PERFORMING ALL OF ITS CLEANUP OPERATIONS; THIS IS REQUIRED
; IN THE EVENT THAT VFY_CLEANUP IS CALLED DURING ERROR PROCESSING,
; WHEN PERFORMING THE REQUIRED CLEANUP IS MORE IMPORTANT THAN
; POSSIBLY DISCOVERING A SECOND ERROR.
;
; CALLING SEQUENCE:
;
;	BSBW VFY_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VFY_CLEANUP::
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL KERNEL OR EXEC MODE ROUTINE
;
;	THIS ROUTINE IS INVOKED IN THE VERIFY SUBROUTINE BY A $CMKRNL
;	OR $CMEXEC SYSTEM SERVICE. ITS FUNCTION IS TO ASCERTAIN
;	ITS EXECUTION MODE, STORING ITS VALUE IN RTNMODE;
;	SET A RETURN STATUS VALUE IN R0; AND,STORE THE
;	CONTENTS OF ITS ARGUMENT LIST IN ARGLSTDESC2.
;	ALL THREE OF THESE DATA BASES (RTNMODE, R0, 
;	ARGLSTDESC2) WILL BE EXAMINED FOR EXPECTED VALUES
;	IN THE VERIFY SUBROUTINE.
;
PRIVMODERTN:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
;
; FIND CURRENT EXECUTION MODE BY MAKING A LOG NAME AND TRANSLATING IT.
;
	$CRELOG_S TBLFLG=#LOG$C_PROCESS, -  ; DEFINE A LOG NAME
		  LOGNAM=PMODE_LOG,      -
		  EQLNAM=PMODE_EQL
	$TRNLOG_S LOGNAM=PMODE_LOG, -  	; TRAN IT TO RECEIVE MODE
		  RSLBUF=PMODE_EQL, -
		  ACMODE=RTNMODE
	$DELLOG_S TBLFLG=#LOG$C_PROCESS, - ; NO LONGER NEED IT
		  LOGNAM=PMODE_LOG
	TSTL	AP			; IS THERE AN ARGUMENT LIST ?
	BNEQ	10$			; YES -- CONTINUE
	MOVZBL	#4,R8			; NO -- ESTABLISH LENGTH OF NULL LIST
	CLRL	@ARGLSTDESC2+4		; ... AND SET ZERO ARGUMENT COUNT
	BRB	20$			; JOIN COMMON CODE
10$:
	MULL3	(AP),#4,R8		; GET NUMBER OF BYTES IN ARG LIST
	ADDL2	#4,R8			; ... ADD IN LENGTH OF LIST HEADER 
	MOVC3	R8,(AP),@ARGLSTDESC2+4 	; SAVE ENTIRE ARG LIST INCL HDR
20$:
	MOVL	R8,ARGLSTDESC2		; PUT LENGTH IN DESCRIPTOR
	MOVL	ONES,R0			; SAVE RETURN DATA IN R0 
	MOVW	TESTNUM,R0		; ... MAKE IT UNIQUE TO TEST CASE
	RET				; EXIT FROM PRIV MODE RTN
	.END
