	.TITLE	SATSSS05 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS05 module tests the execution of the following
;		VMS system services:
;
;		$SNDACC
;		$SNDERR
;		$SNDOPR
;		$SNDSMB
;
;
; ENVIRONMENT:	User mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: JULY, 1978
;
; MODIFIED BY:
;
;	V03-002 PCG0001		Peter C. George		16-Feb-1981
;		Add OPCMSG macro expansion
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	$ACCDEF				; accounting definitions
	$DIBDEF				; device info block offsets
	$EMBDEF				; error log buffer definitions
	$JBCMSGDEF			; job controller definitions
	$OPCDEF				; operator communications def.
	$OPCMSG				; operator communications messages
	$OPRDEF				; operator message definitions
	$PHDDEF				; process header definitions
	$PRVDEF				; privilege definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$SMRDEF				; symbiot manager definitions
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
	CR = 13				; terminal definitions
	LF = 10
;
	FIDSIZ = 6			; ID sizes
	DIDSIZ = 6
	FILNAMSIZ = 20
	COM_FIL_SIZ = 7
;
	BUF_SIZE=100			; buffer size
;
	ALL_OPR = OPC$M_NM_CENTRL!OPC$M_NM_PRINT!-
		  OPC$M_NM_TAPES!OPC$M_NM_DISKS!-
		  OPC$M_NM_DEVICE!OPC$M_NM_OPER1!-
		  OPC$M_NM_OPER2!OPC$M_NM_OPER3!-
		  OPC$M_NM_OPER4!OPC$M_NM_OPER5!-
		  OPC$M_NM_OPER6!OPC$M_NM_OPER7!-
		  OPC$M_NM_OPER8!OPC$M_NM_OPER9!-
		  OPC$M_NM_OPER10!OPC$M_NM_OPER11!-
		  OPC$M_NM_OPER12
;
; ***** NOTE *****
;
; THE FOLLOWING DEFINITION IS TO BE REMOVED WHEN VMS RELEASE 2 IS FIXED.
;
	SNDACC$_CHAN = 8
; MACROS
;
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS05/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS05/		; module name
TEST_MOD_BEGIN:
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
SNDACC:
	.ASCIC	/SNDACC/
SNDERR:
	.ASCIC	/SNDERR/
SNDOPR:
	.ASCIC	/SNDOPR/
SNDSMB:
	.ASCIC	/SNDSMB/
CS1:
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS5:
	.ASCID	\Mode was !AS.\
CS6:
	.ASCID	\Expected byte offset !UB(10) = !XB(16) received !XB(16).\
UM:
	.ASCID	\user\
MBNAM:
	.ASCID	\SST$MBX\
TTNAM:
	.ASCIC	\_TTA\			; terminal name to send opr messages to
TTUNIT:
	.WORD	1			; unit number for above
EXP:
	.ASCID	\status\
BAT_IMP_EXC:
	.ASCID	\Batch job improperly executed.\
YES_DESC:
	.LONG	3
	.ADDRESS SYM_NAME
SYM_NAME:				; batch job symbol name
	.ASCII	\SYM\
SYM_DESC:
	.LONG	20
	.ADDRESS SYM
YES:
	.ASCIC	\YES\			; parameter for SNDSMB
QUENAM1:
	.ASCIC	/UETP_BAT_QUE1/
	QUENAM1L=.-QUENAM1
QUENAM2:
	.ASCIC	/UETP_BAT_QUE2/
	QUENAM2L=.-QUENAM2
MSGVEC:
	.LONG	3			; PUTMSG message vector
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
TEST_ERROR:				; SNDERR test data
	.LONG BUF_SIZE
	.ADDRESS .+4
	A=0
	.REPT BUF_SIZE
	.BYTE A
	A=A+1
	.ENDR
OPNAME:
	.ASCIC	/_OPA/			; operator console name
OP_MSG1:
	.LONG	MSG1L			; GENREQ routine OPRMSG buffer
	.ADDRESS .+4
	.BYTE	OPC$_RQ_RQST
	.LONG	OPC$M_NM_CENTRL		; request operator type
	.=.-1				; is only 3 bytes big
	.LONG	0			; global request ID of 0
OP_MESG:
	.ASCII	/UETP $SNDOPR system service test user message./
	OP_MESG_LEN=.-OP_MESG
	MSG1L=.-OP_MSG1-8		; message buffer size
FILE_NAME:
	.ASCIC	/S05.COM/
	NAME_SIZE=.-FILE_NAME
	.BLKB	<FILNAMSIZ-NAME_SIZE>	; filler for SNDSMB
FILE_NAME1:
	.ASCII	/S05.LOG/		; log file name
COM_FILE:
	.ASCII	/$! SATSSS05 SNDSMB test batch job/<CR><LF>
	.ASCII	/$!/
	REC0_SIZE=.-COM_FILE		; record 0 size
REC1:
	.ASCII	/$ SYM:='P1'/
	REC1_SIZE=.-REC1		; record 1 size
REC2:
	.ASCII	\$ IF SYM.EQS."YES" THEN DEF/GR SYM 'P1'\<CR><LF>
	REC2_SIZE=.-REC2
OL1:
	.BYTE	OL1S
	.BYTE	SMO$K_HOLD
	.BYTE	SMO$K_PARAMS
	.ASCIC	/YES/
	.BYTE	0
	OL1S=.-OL1-1
OL2:
	.BYTE	OL2S
	.BYTE	SMO$K_JOBPRI
	.BYTE	3
	.BYTE	SMO$K_HOLD
	.BYTE	0
	OL2S=.-OL2-1
JN1:
	.ASCIC	/JOB_NUM1/
	.BYTE	0
JN2:
	.ASCIC	/JOB_NUM2/
	.BYTE	0
JN3:
	.ASCIC	/JOB_NUM3/
	.BYTE	0
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUSM:
	.LONG	0
QIO:
	$QIO 2,MBCHAN,IO$_READVBLK,,,,BUF,BUF_SIZE+30 ; QIO parameter list
SNDA:
	$SNDACC	ACC_DESC,MBCHAN		; SNDACC parameter list
SNDE:
	$SNDERR	TEST_ERROR		; SNDERR paramter list
SNDO:
	$SNDOPR	OPMSG_DESC,0		; SNDOPR parameter list
SNDS:
	$SNDSMB	SMSG_DESC,0		; SNDSMB paramter list
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	130			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	130
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
MBCHAN:
	.WORD	0			; mailbox channel number
MODE:
	.LONG	0			; current mode string pointer
MBUF:
	.BLKB	80			; mailbox buffer
MSGVEC1:				; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.LONG	0
STATUS:
	.BLKL	2			; mailbox status block
ACC_MSG:
	.WORD	ACC$K_INSMESG		; starting message code
	.WORD	MSG_SIZE		; message size
	.LONG	1			; final exit status
	.LONG	0			; PID
	.LONG	2			; job ID
	.QUAD	0			; system job termination time
	.ASCIC	/SYSTEST/		; account name
	.ASCIC	/UETP $SNDACC system service test user data record/	; user data
	MSG_SIZE=.-ACC_MSG
ACC_MSG1:
	.WORD	ACC$K_DISASEL		; function code
	.BYTE	ACC$K_BATTRM		; batch job type
	.BYTE	ACC$K_INSMSG		; arbitrary message type
	.BYTE	ACC$K_INTTRM		; interactive job type
	.BYTE	ACC$K_LOGTRM		; login failure termination type
	.BYTE	ACC$K_PRCTRM		; non-interactive process type
	.BYTE	ACC$K_PRTJOB		; print job type
	.BYTE	0			; terminator byte
	MSG1_SIZE=.-ACC_MSG1
ACC_DESC:
	.LONG	MSG_SIZE		; descriptor for accounting message
	.ADDRESS ACC_MSG
.PAGE
OPTYPE:
	.LONG	OPC$M_NM_CENTRL!<1@24>	; opr type & ID table
	.LONG	OPC$M_NM_PRINT!<2@24>
	.LONG	OPC$M_NM_TAPES!<3@24>
	.LONG	OPC$M_NM_DISKS!<4@24>
	.LONG	OPC$M_NM_DEVICE!<5@24>
	.LONG	OPC$M_NM_OPER1!<6@24>
	.LONG	OPC$M_NM_OPER2!<7@24>
	.LONG	OPC$M_NM_OPER3!<8@24>
	.LONG	OPC$M_NM_OPER4!<9@24>
	.LONG	OPC$M_NM_OPER5!<10@24>
	.LONG	OPC$M_NM_OPER6!<11@24>
	.LONG	OPC$M_NM_OPER7!<12@24>
	.LONG	OPC$M_NM_OPER8!<13@24>
	.LONG	OPC$M_NM_OPER9!<14@24>
	.LONG	OPC$M_NM_OPER10!<15@24>
	.LONG	OPC$M_NM_OPER11!<16@24>
	.LONG	OPC$M_NM_OPER12!<17@24>
	.LONG	OPC$M_NM_CENTRL!<18@24>	; just to make an even number
OPMSG_DESC:
	.LONG	MSG_LEN			; SNDOPR msg buffer desc
	.ADDRESS OPMSG
OPMSG:
	.BYTE	OPC$_RQ_RQST		; function code
	.BLKB	3			; operator type
	.LONG	0			; ID
	.BLKB	120			; message or terminal info
	MSG_LEN=.-OPMSG
SMSG_DESC:
	.LONG	SMSG_LEN		; SNDSMB msg buffer desc
	.ADDRESS SMSG
SMSG:
	.WORD	SMR$K_INITIAL		; SNDSMB msg buffer
	.BLKB	16			; queue name
SMSG1:
	.BLKB	16			; device name
	.BLKB	6			; file ID
	.BLKB	6			; directory ID
	.BLKB	20			; filename
	.BLKB	2			; Job ID
	.BLKB	8			; job name
	.BLKB	32			; room for options and option data
	SMSG_LEN=.-SMSG
SYM:
	.BLKB	20
;
	.ALIGN LONG
NAMBLK:
	$NAM
FAB:
	$FAB	FAC=PUT,-
		FNA=FILE_NAME+1,-
		FNS=COM_FIL_SIZ,-
		NAM=NAMBLK,-
		RAT=CR,-
		RFM=VAR
RAB:
	$RAB	FAB=FAB,-
		MBF=1,-
		RBF=COM_FILE,-
		RSZ=REC0_SIZE
FAB1:
	$FAB	FAC=PUT,-
		FNA=FILE_NAME1,-
		FNS=COM_FIL_SIZ
.PAGE
	.PSECT	SATSSS05,RD,WRT,EXE,LONG
	.SBTTL	SATSSS05
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS05  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS05.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS05 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS05 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS05 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS05 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--

	TEST_START SATSSS05		; let the test begin
	.SBTTL	SNDACC TESTS
;+
;
; $SNDACC tests
;
; test ACC$K_NEWFILE
;
; This function will not be tested because of the possible interference
; that it might cause with the ACCOUNTNG.DAT file on a customer's system.
;
; test ACC$K_INSMESG
;
;-
	MODE	TO,10$,KRNL,NOREGS	; kernal mode to access PHD
	MOVL	@#CTL$GL_PHD,R9		; get process header address
	MOVAL	PHD$Q_PRIVMSK(R9),W^PRIVMASK ; get priv mask address
	MODE	FROM,10$		; get back to user mode
	PRIV	ADD,OPER		; add the OPER priv.
	MOVAL	W^SNDACC,W^SERV_NAME	; set service name
	MOVAL	W^UM,W^MODE		; set the mode
	PUSHL	#0			; push a dummy param
	CALLS	#1,W^REG_SAVE		; save a reg snapshot
	$CREMBX_S CHAN=W^MBCHAN		; create a mailbox
	BLBS	R0,20$			; br if OK
	$EXIT_S R0			; exit and show why
20$:
	$SNDACC_S MSGBUF=W^ACC_DESC,-
		  CHAN  =W^MBCHAN	; try a ACC$K_NEWFILE
	FAIL_CHECK SS$_NORMAL		; check for success
	CALLS #0,W^READ_CHECK		; check the mailbox
;+
;
; test ACC$K_DISAACC
;
;-
	NEXT_TEST
	MOVW	#ACC$K_DISAACC,W^ACC_MSG ; set the new function
	MOVZWL	W^MBCHAN,W^SNDA+SNDACC$_CHAN ; set up the channel number
	$SNDACC_G W^SNDA		; try ACC$K_DISAACC with a little _G
	FAIL_CHECK SS$_NORMAL		; check for success
	CALLS #0,W^READ_CHECK		; check the mailbox
;+
;
; test ACC$K_ENABACC
;
;-
	NEXT_TEST
	MOVW	#ACC$K_ENABACC,W^ACC_MSG ; set function code
	$SNDACC_S MSGBUF=W^ACC_DESC,-
		  CHAN  =W^MBCHAN	; try ACC$K_ENABACC with a little _S
	FAIL_CHECK SS$_NORMAL		; check for success
	CALLS #0,W^READ_CHECK		; check the mailbox
;+
;
; test ACC$K_DISASEL with all types selected
;
;-
	NEXT_TEST
	MOVAL	W^ACC_MSG1,W^ACC_DESC+4	; set new message address
	MOVL	#MSG1_SIZE,W^ACC_DESC	; set new message size
	$SNDACC_G W^SNDA			; try ACC$K_DISASEL
	FAIL_CHECK SS$_NORMAL			; check for success
	CALLS #0,W^READ_CHECK			; check the mailbox
;+
;
; test ACC$K_ENABSEL
;
;-
	NEXT_TEST
	MOVW	#ACC$K_ENABSEL,W^ACC_MSG1	; set new function
	$SNDACC_S MSGBUF=W^ACC_DESC,-
		  CHAN  =W^MBCHAN		; try ACC$K_ENABSEL
	FAIL_CHECK SS$_NORMAL			; check for success
	CALLS #0,W^READ_CHECK			; check the mailbox
.PAGE
	.SBTTL	SNDERR_S TESTS
;+
;
; $SNDERR_S tests
;
;-
	NEXT_TEST
	PRIV	ADD,BUGCHK			; add the BUGCHK priv.
	MOVAL	W^SNDERR,W^SERV_NAME		; set service name
	$CREMBX_S CHAN=W^MBCHAN,-
		  LOGNAM=W^MBNAM,-
		  PRMFLG=#0			; make a mailbox
	$GETCHN_S CHAN=W^MBCHAN,-
		PRIBUF=W^MSGL			; get the unit number
	MOVZWL	W^BUF+DIB$W_UNIT,-(SP)		; push the MBX unit #
	CALLS	#1,G^SYS$DERLMB			; declare errorlog MBX
	$SNDERR_S MSGBUF=W^TEST_ERROR		; try _S form
	FAIL_CHECK SS$_NORMAL			; check for success
GET1:
	MOVW	W^MBCHAN,W^QIO+QIO$_CHAN	; get the channel number
	$QIO_G	W^QIO				; do a read
	$WAITFR_S EFN=#2			; wait for it to complete
	BISB2	#IO$M_NOW,W^QIO+QIO$_FUNC	; set the NOW modifier
	CMPW	#EMB$C_SS,W^BUF+EMB$W_HD_ENTRY	; is this the right entry?
	BNEQ	GET1				; br if not
	MOVAL	W^BUF+18,R6			; set buffer address
	MOVAL	W^TEST_ERROR+8,R7		; set good data address
	MOVL	#BUF_SIZE,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
;+
;
; $SNDERR_G tests
;
;-
	NEXT_TEST
	MOVC5	#0,W^BUF,#0,#BUF_SIZE,W^BUF	; zero the buffer
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDERR_G W^SNDE			; try _G
	FAIL_CHECK SS$_NORMAL			; check for success
	BICL2	#IO$M_NOW,W^QIO+QIO$_FUNC	; set to wait for mailbox
GET2:
	$QIO_G	W^QIO				; read the mailbox
	$WAITFR_S EFN=#2			; wait for completion
	BISB2	#IO$M_NOW,W^QIO+QIO$_FUNC	; set to read it until found
	CMPW	#EMB$C_SS,W^BUF+EMB$W_HD_ENTRY	; the right entry?
	BNEQ	GET2				; br if not
	CALLS	#0,W^BUF_CHECK			; check results
	CLRL	-(SP)				; set channel to 0
	CALLS	#1,G^SYS$DERLMB			; reset the error logger

	.SBTTL SNDOPR TESTS
;+
;
; 
;$SNDOPR tests
;
; DISABLE tests with _S
;
;-
	NEXT_TEST
	MOVAL	W^SNDOPR,W^SERV_NAME		; set service name
	MOVB	#OPC$_RQ_TERME,W^OPMSG		; set the function code
	CLRL	W^OPMSG+OPC$B_MS_ENAB		; set disable ID mask
	MOVL	#-1,W^OPMSG+OPC$L_MS_MASK	; set operators to be disabled
	CLRW	W^OPMSG+OPC$W_MS_OUNIT		; set unit to zero
	MOVB	W^OPNAME,W^OPMSG+OPC$T_MS_ONAME	; set operator name size
	MOVL	W^OPNAME+1,W^OPMSG+OPC$T_MS_ONAME+1 ; set operator device name
	$SNDOPR_S MSGBUF=W^OPMSG_DESC,-
		    CHAN=W^MBCHAN		; try _S
	FAIL_CHECK SS$_NORMAL			; check success
;+
;
; ENABLE tests with _S
;
;-
	NEXT_TEST
	MOVL	#ALL_OPR,W^OPMSG+OPC$B_MS_ENAB	; set oprators to enable
	MOVL	#-1,W^OPMSG+OPC$L_MS_MASK	; set enableable bits
	MOVW	W^TTUNIT,W^OPMSG+OPC$W_MS_OUNIT	; set the terminal unit number
	MOVB	W^TTNAM,W^OPMSG+OPC$T_MS_ONAME	; set the terminal name size
	MOVL	W^TTNAM+1,W^OPMSG+OPC$T_MS_ONAME+1 ; set the terminal name
	$SNDOPR_S MSGBUF=W^OPMSG_DESC,-
		    CHAN=W^MBCHAN		; enable the alternate terminal
	FAIL_CHECK SS$_NORMAL			; check for success
;+
;
; RQST tests to make a request with ID = 1-18
;
;-
	NEXT_TEST
	MOVZWL	W^MBCHAN,W^SNDO+SNDOPR$_CHAN	; set the channel number
	MOVB	#OPC$_RQ_RQST,W^OPMSG		; set function code
	MOVC3	#OP_MESG_LEN,W^OP_MESG,-
		W^OPMSG+OPC$L_MS_TEXT		; put the text in the message
	CLRL	R7				; init loop variable
	CLRL	W^OPMSG+OPC$L_MS_RQSTID		; init the ID field
	MOVAL	W^OPTYPE,R2			; set oper type list pointer
10$:
	MOVL	(R2)+,W^OPMSG+1			; set opr type & ID
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save the registers
	$SNDOPR_S MSGBUF=W^OPMSG_DESC,-
		    CHAN=W^MBCHAN		; try _S form
	FAIL_CHECK SS$_NORMAL			; check for success
	MOVL	(R2)+,W^OPMSG+1			; set opr type & ID
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDOPR_G W^SNDO			; try _G
	FAIL_CHECK SS$_NORMAL			; check for success
	AOBLSS	#9,R7,10$			; do all opr types
;+
;
; CANCEL tests to cancel requests 1-18
;
;-
	NEXT_TEST
	MOVB	#OPC$_RQ_CANCEL,W^OPMSG		; set function code
	MOVAL	W^OPTYPE,R2			; set table pointer
	MOVL	#<OPC$_RQSTCAN&^XFFFF>,R6	; set completion code
	CLRL	R7				; set loop variable
10$:
	MOVL	(R2)+,W^OPMSG+1			; set opr type & ID
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDOPR_S MSGBUF=W^OPMSG_DESC,-
		    CHAN=W^MBCHAN		; try _S form
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^SND_CHECK			; check the results
	MOVL	(R2)+,W^OPMSG+1			; set opr type & ID
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDOPR_G W^SNDO			; try _G form
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^SND_CHECK			; check the results
	AOBLSS	#9,R7,10$			; do all opr types
;+
;
; REPLY tests to respond to requests
;
;-
	NEXT_TEST
	MOVL	#<OPC$_RQSTCMPLTE&^XFFFF>,R6	; set expected status return
	MOVB	#OPC$_RQ_REPLY,W^OPMSG		; set the function
	MOVW	R6,W^OPMSG+OPC$W_MS_STATUS 	; set status reply return
	CLRL	W^OPMSG+OPC$L_MS_RPLYID		; set the message ID
	MOVW	W^TTUNIT,W^OPMSG+OPC$W_MS_OUNIT	; set the unit number
	MOVC3	#5,W^TTNAM,W^OPMSG+OPC$T_MS_ONAME ; set the device name
	MOVC3	#OP_MESG_LEN,W^OP_MESG,-
		W^OPMSG+OPC$L_MS_OTEXT		; set the message text
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	CALLS	#0,W^GENREQ			; generate a pending request
	$SNDOPR_S MSGBUF=W^OPMSG_DESC,-
		    CHAN=W^MBCHAN		; try _S
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^SND_CHECK			; check results
	MOVW	#<OPC$_RQSTABORT&^XFFFF>,R6	; set expected status return
	MOVW	R6,W^OPMSG+OPC$W_MS_STATUS 	; set reply status code
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	CALLS	#0,W^GENREQ			; generate a pending request
	$SNDOPR_G W^SNDO			; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^SND_CHECK			; check results
	MOVW	#<OPC$_RQSTPEND&^XFFFF>,R6	; set expected status return
	MOVW	R6,W^OPMSG+OPC$W_MS_STATUS 	; set the reply status code
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	CALLS	#0,W^GENREQ			; generate a pending request
	$SNDOPR_S MSGBUF=W^OPMSG_DESC,-
		    CHAN=W^MBCHAN		; try _S and leave the request pending
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^SND_CHECK			; check results
	MOVW	#<OPC$_RQSTCAN&^XFFFF>,R6	; set expected status return
	MOVW	R6,W^OPMSG+OPC$W_MS_STATUS 	; set reply status
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDOPR_G W^SNDO			; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^SND_CHECK			; check results
;+
;
; DISABLE tests with _G
;
;-
	NEXT_TEST
	MOVB	#OPC$_RQ_TERME,W^OPMSG		; set the function code
	CLRL	W^OPMSG+OPC$B_MS_ENAB		; set disable ID mask
	MOVL	#-1,W^OPMSG+OPC$L_MS_MASK	; set operators to disable
	$SNDOPR_G W^SNDO			; disable the alternate TTY
	FAIL_CHECK SS$_NORMAL			; check for success
;+
;
; ENABLE tests with _G
;
;-
	NEXT_TEST
	MOVL	#ALL_OPR,W^OPMSG+OPC$B_MS_ENAB	; set enable ID mask
	MOVL	#-1,W^OPMSG+OPC$L_MS_MASK	; set all enables
	CLRW	W^OPMSG+OPC$W_MS_OUNIT		; set unit number
	MOVB	W^OPNAME,W^OPMSG+OPC$T_MS_ONAME	; set name size
	MOVL	W^OPNAME+1,W^OPMSG+OPC$T_MS_ONAME+1 ;  set name
	$SNDOPR_G W^SNDO			; enable the console again
	FAIL_CHECK SS$_NORMAL			; check for failure
.PAGE
.SBTTL	SNDSMB TESTS
;+
;
; $SNDSMB tests
;
; The following request types cannot be tested because of the lack of a
; queueable device in the minimum configuration.
;
;	SMR$K_ABORT, SMR$K_ASSIGN, SMR$K_JUSTIFY, SMR$K_ENTER
;
; test SMR$K_INITIAL by creating que1 and que2
;
;-
	NEXT_TEST
	MOVAL	W^SNDSMB,W^SERV_NAME		; set service name
	MOVW	W^MBCHAN,W^SNDS+SNDSMB$_CHAN	; set the mailbox channel #
	MOVAL	W^SMSG+2,R3			; set argument pointer
	MOVC3	#QUENAM1L,W^QUENAM1,(R3)	; set the queue name
	MOVAL	W^SMSG1,R3			; set to proper end of que name
	MOVB	#SMO$K_DETJOB,(R3)+		; set to BATCH
	CLRB	(R3)				; set option terminator
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_S MSGBUF = W^SMSG_DESC,-
		    CHAN = W^MBCHAN		; try _S INITIAL
	FAIL_CHECK SS$_NORMAL			; check failure
	MOVL	#JBC$_NORMAL,R6			; set expected return status
	CALLS	#0,W^SND_CHECK			; check results
	MOVB	#SMO$K_DISWAP,(R3)+		; set to disable swapping
	MOVB	#SMO$K_INIPRI,(R3)+		; set a new job priority
	MOVB	#2,(R3)+			; by default of 2
	MOVB	#SMO$K_JOBLIM,(R3)+		; set a job limit of
	MOVB	#2,(R3)+			; 2
	CLRB	(R3)				; set the terminator
	MOVC3	#QUENAM2L,W^QUENAM2,W^SMSG+2	; set new que name
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$SNDSMB_G W^SNDS			; init the next que
	FAIL_CHECK SS$_NORMAL			; check for failure
	CALLS	#0,W^SND_CHECK			; check the results
;+
;
; test SMR$K_START by starting que1 and que2
;
;-
	NEXT_TEST
	MOVW	#SMR$K_START,W^SMSG		; set request code
	CLRB	W^SMSG1				; set for no start options
	$SNDSMB_G W^SNDS			; try _G START
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
	MOVC3	#QUENAM1L,W^QUENAM1,W^SMSG+2	; set que name
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_G W^SNDS			; start the next que
	FAIL_CHECK SS$_NORMAL			; check for failures
	CALLS	#0,W^SND_CHECK			; check the results
;+
;
; test SMR$K_STOP
;
;-
	NEXT_TEST
	MOVW	#SMR$K_STOP,W^SMSG		; set request code
	$SNDSMB_S MSGBUF = W^SMSG_DESC,-
		    CHAN = W^MBCHAN		; try _S STOP
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
	MOVW	#SMR$K_START,W^SMSG		; reset request code
	$SNDSMB_G W^SNDS			; restart the queue
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
;+
;
; test SMR$K_PAUSE
;
;-
	NEXT_TEST
	MOVW	#SMR$K_PAUSE,W^SMSG		; set request code
	$SNDSMB_S MSGBUF = W^SMSG_DESC,-
		    CHAN = W^MBCHAN		; try _S PAUSE
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
	MOVW	#SMR$K_START,W^SMSG		; reset the request code
	$SNDSMB_G W^SNDS			; reset the queue state
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
;+
;
; test SMR$K_CREJOB, SMR$K_ADDFIL, SMR$K_CLSJOB
;
;-
	NEXT_TEST
	$CREATE FAB = W^FAB			; open the command file
	$CONNECT RAB = W^RAB			; connect up
	$PUT RAB = W^RAB			; write the command file
	MOVAL	W^REC1,W^RAB+RAB$L_RBF		; set rec #1 address
	MOVW	#REC1_SIZE,W^RAB+RAB$W_RSZ	; set rec #1 size
	$PUT RAB = W^RAB			; write record #1
	MOVAL	W^REC2,W^RAB+RAB$L_RBF		; set rec #2 address
	MOVW	#REC2_SIZE,W^RAB+RAB$W_RSZ	; set rec #2 size
	$PUT RAB = W^RAB			; write record #2
	$DISCONNECT RAB = W^RAB			; disconnect
	$CLOSE FAB = W^FAB			; file S05.COM now exists
	PUSHAL	W^OL1				; set option list #1
	PUSHAL	W^JN1				; set job name #1
	CALLS	#2,W^CRE_JOB			; put a job in the que
;+
;
; test SMR$K_ALTER on job #1 to release it
;
;-
	NEXT_TEST
	MOVW	#SMR$K_ALTER,W^SMSG		; set request code
	MOVAL	W^SMSG+2,R3			; set message buffer pointer
	MOVC3	#QUENAM1L,W^QUENAM1,(R3)	; set the que name
	MOVAL	W^SMSG1,R3			; set to correct end of que name
	MOVW	W^JOBID,(R3)+			; set job ID
	MOVB	#SMO$K_JOBPRI,(R3)+		; set option code
	MOVB	#1,(R3)+			; set the job priority
	CLRB	(R3)				; terminate the option list
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$SNDSMB_G W^SNDS			; try _G ALTER
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
;+
;
; test SMR$K_RELEASE on job #1
;
;-
	NEXT_TEST
	MOVW	#SMR$K_RELEASE,W^SMSG		; set request code
	MOVW	W^JOBID,W^SMSG1			; set job ID
	CLRB	W^SMSG1+2			; set no options
	$SNDSMB_G W^SNDS			; try _G RELEASE
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
;+
;
; test SMR$K_SYNCJOB on job #1
;
;-
	NEXT_TEST
	MOVW	#SMR$K_SYNCJOB,W^SMSG		; set request code
	MOVW	W^JOBID,W^SMSG1			; set job ID
	CLRB	W^SMSG1+2			; set option list end
	$SNDSMB_G W^SNDS			; try _G SYNCJOB
	FAIL_CHECK SS$_NORMAL			; check failure
	MOVL	#SS$_NORMAL,R6			; set expected status return
	CALLS	#0,W^SND_CHECK			; check results
	MOVL	#JBC$_NORMAL,R6			; set expected status return
	$TRNLOG_S LOGNAM = W^YES_DESC,-
		  RSLBUF = W^SYM_DESC,-
		  DSBMSK = #5			; look for the group symbol
	CMPL	#SS$_NORMAL,R0			; is it there?
	BEQL	10$				; br if OK
	PUSHAL	W^BAT_IMP_EXC			; push error message address
	CALLS	#1,W^PRINT_FAIL			; print the failure
10$:
	$DELLOG_S LOGNAM = W^YES_DESC		; dump the logical name
	$ERASE FAB = W^FAB1			; delete the log file
;+
;
; test SMR$K_RMVJOB on job #2
;
;-
	NEXT_TEST
	PUSHAL	W^OL2				; set option list #2
	PUSHAL	W^JN2				; set job name #2
	CALLS	#2,W^CRE_JOB			; put job #2 in the que
	MOVW	#SMR$K_RMVJOB,W^SMSG		; set request code
	MOVW	W^JOBID,W^SMSG1			; set job ID
	CLRB	W^SMSG1+2			; set no options
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_G W^SNDS			; try _G and nail the last job
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
;+
;
; test SMR$K_MERGE on job #3
;
;-
	NEXT_TEST
	PUSHAL	W^OL1				; set option list #3
	PUSHAL	W^JN3				; set job name #3
	CALLS	#2,W^CRE_JOB			; put job 3 in the que
	MOVAL	W^SMSG,R3			; set address
	MOVW	#SMR$K_MERGE,(R3)+		; set request code
	MOVC3	#QUENAM2L,W^QUENAM2,(R3)	; set queue name 1
	MOVAL	W^SMSG1,R3			; get to correct end of name
	MOVC3	#QUENAM1L,W^QUENAM1,(R3)	; set queue name 2
	CLRB	2(R3)				; set no options(*watch que name len*) 
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_G W^SNDS			; try _G MERGE
	FAIL_CHECK SS$_NORMAL			; check failure
	CALLS	#0,W^SND_CHECK			; check results
	MOVAL	W^SMSG,R3			; set message address
	MOVW	#SMR$K_RELEASE,(R3)+		; set request code
	MOVC3	#QUENAM2L,W^QUENAM2,(R3)	; set the que name
	MOVAL	W^SMSG1,R3			; get to the end of the quenam
	MOVW	W^JOBID,(R3)+			; set the job ID
	CLRB	(R3)				; set no options
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$SNDSMB_G W^SNDS			; release the job
	FAIL_CHECK SS$_NORMAL			; check for failures
	CALLS	#0,W^SND_CHECK			; check the results
	MOVW	#SMR$K_SYNCJOB,W^SMSG		; set request code
	$SNDSMB_G W^SNDS			; sync on the job
	FAIL_CHECK SS$_NORMAL			; check for failures
	MOVL	#SS$_NORMAL,R6			; set the expected status return
	CALLS	#0,W^SND_CHECK			; check the results
	MOVL	#JBC$_NORMAL,R6			; set the expected status return
	$TRNLOG_S LOGNAM = W^YES_DESC,-
		  RSLBUF = W^SYM_DESC,-
		  DSBMSK = #5			; look for the group symbol
	CMPL	#SS$_NORMAL,R0			; is it there?
	BEQL	10$				; br if OK
	PUSHAL	W^BAT_IMP_EXC			; push error message address
	CALLS	#1,W^PRINT_FAIL			; print the failure
10$:
	$DELLOG_S LOGNAM = W^YES_DESC		; dump the logical name
;+
;
; test SMR$K_DELETE
;
;-
	NEXT_TEST
	MOVW	#SMR$K_STOP,W^SMSG		; set request code
	MOVC3	#QUENAM1L,W^QUENAM1,W^SMSG+2	; set the que name
	CLRB	W^SMSG1				; set no options
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_G W^SNDS			; stop que 1
	FAIL_CHECK SS$_NORMAL			; check for failures
	CALLS	#0,W^SND_CHECK			; check the results
	MOVC3	#QUENAM2L,W^QUENAM2,W^SMSG+2	; set the que name
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_G W^SNDS			; stop que 2
	FAIL_CHECK SS$_NORMAL			; check for failures
	CALLS	#0,W^SND_CHECK			; check the results
	MOVW	#SMR$K_DELETE,W^SMSG		; set the request code
	$SNDSMB_G W^SNDS			; delete the que
	FAIL_CHECK SS$_NORMAL			; check for failures
	CALLS	#0,W^SND_CHECK			;  check the results
	MOVC3	#QUENAM1L,W^QUENAM1,W^SMSG+2	; set the new que name
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SNDSMB_G W^SNDS			; delete the last que
	FAIL_CHECK SS$_NORMAL			; check for failures
	CALLS	#0,W^SND_CHECK			; check the last results
	$ERASE FAB=W^FAB			; delete the .COM file
	$ERASE FAB=W^FAB1			; delete the .LOG file
	$DASSGN_S CHAN=W^MBCHAN			; drop the mailbox
	TEST_END
.PAGE
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)		; set number past R0-R1 and save
	BICL2	#3,R1			; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; Mode	#3	PUSHAL STRING_VAR
;		CALLS #1,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	CMPB	(AP),#1				; is this just a message?
	BEQL	20$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	30$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
	BRB	30$				; goto output message
20$:
	MOVL	4(AP),W^MSGVEC1+12		; save string address
	$PUTMSG_S W^MSGVEC1			; print the message
	BRB	40$				; skip the other message
30$:
	$PUTMSG_S W^MSGVEC			; print the message
40$:
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
	.SBTTL	READ_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to read a mailbox and check the status returned
;	from the $SNDACC system service.
;
; CALLING SEQUENCE:
;	CALLS #0,W^READ_CHECK
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

READ_CHECK:
	.WORD	^M<R2,R3,R4,R5>
	$QIOW_S	FUNC=#IO$_READVBLK,-
		CHAN=W^MBCHAN,-
		IOSB=W^STATUSM,-
		P1  =W^MBUF,-
		P2  =#80		; read the mail
	CMPW	W^MBUF,#MSG$_ACCRSP	; correct response type?
	BEQL	10$			; br if yes
	PUSHL	W^MBUF			; push received
	PUSHL	#MSG$_ACCRSP		; push expected
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
10$:
	CMPL	W^MBUF+4,#4@16!SS$_NORMAL ; check the results
	BEQL	20$			; br if OK
	PUSHL	W^MBUF+4		; push received
	PUSHL	#4@16!SS$_NORMAL	; push expected
	PUSHAL	W^EXP			; push the string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
20$:
	RET				; return
.PAGE
	.SBTTL CRE_JOB
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to enter a job in queue #1
;
; CALLING SEQUENCE:
;	PUSHAL	W^OPTION_LIST		; counted option list ending with a
;					; byte of 0
;	PUSHAL	W^JOB_NAME		; counted job name ending with a byte of 0
;	CALLS #0,W^CRE_JOB		; check buffer
;
; INPUT PARAMETERS:
;	Listed above plus inited NAMBLK to proper command file and
;	location MBCHAN inited to the mailbox channel.
;
; OUTPUT PARAMETERS:
;	Location JOBID contains the job ID of the created job and
;	the job is placed in QUE #1
;
;--

CREATE:					; create a job message buffer
	.LONG	CR_MSGSIZ
	.ADDRESS .+4
	.WORD	SMR$K_CREJOB
	.ASCIC	/UETP_BAT_QUE1/
	.BLKB	2
OPTIONS:
	.BLKB	32
	CR_MSGSIZ=.-CREATE-8
ADDFILE:				; add a file message buffer
	.LONG	AD_MSGSIZ
	.ADDRESS .+4
	.WORD	SMR$K_ADDFIL
DEVICE:
	.BLKB	16
FID:
	.BLKB	6
DID:
	.BLKB	6
	.ASCIC	/S05.COM/
	.BLKB	13
JOBID:
	.WORD	0
JOB_NAME:
	.BLKB	8
	.BYTE	0
	AD_MSGSIZ=.-ADDFILE-8
CLOSE:					; close a job message buffer
	.LONG	CL_MSGSIZ
	.ADDRESS .+4
	.WORD	SMR$K_CLSJOB
	.BYTE	0
	CL_MSGSIZ=.-CLOSE-8
;
 CRE_JOB:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	8(AP),R6		; get the option list pointer
	MOVZBL	(R6)+,R7		; get the option list size
	MOVC3	R7,(R6),W^OPTIONS	; set the option list
	MOVL	4(AP),R6		; get the job name pointer
	MOVZBL	(R6)+,R7		; get the job name size
	MOVC3	R7,(R6),W^JOB_NAME	; set the job name
	MOVC3	#FIDSIZ,W^NAMBLK+NAM$W_FID,W^FID ; set the FID
	MOVC3	#DIDSIZ,W^NAMBLK+NAM$W_DID,W^DID ; set the DID
	MOVZBL	W^NAMBLK+NAM$T_DVI,R6	; get device name size
	INCL	R6			; include the count byte
	MOVC3	R6,W^NAMBLK+NAM$T_DVI,W^DEVICE ; set the device name
	MOVL	#JBC$_NORMAL,R6		; set expected status return
	PUSHL	#0			; set a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a reg snapshot
	$SNDSMB_S MSGBUF = W^CREATE,-
		    CHAN = W^MBCHAN	; create a job
	FAIL_CHECK SS$_NORMAL		; check for failure
	CALLS	#0,W^SND_CHECK		; check the results
	MOVW	W^MBUF+2,W^JOBID	; save the job ID
	$SNDSMB_S MSGBUF = W^ADDFILE,-
		    CHAN = W^MBCHAN	; add the file
	FAIL_CHECK SS$_NORMAL		; check for failure
	CALLS	#0,W^SND_CHECK		; check the results
	$SNDSMB_S MSGBUF = W^CLOSE,-
		    CHAN = W^MBCHAN	; close the job
	FAIL_CHECK SS$_NORMAL		; check for failures
	CALLS	#0,W^SND_CHECK		; check the results
	RET				; thats all folks
.PAGE
	.SBTTL BUF_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check the contents of a buffer against known good 
;	data.
;
; CALLING SEQUENCE:
;	CALLS #0,W^BUF_CHECK		; check buffer
;
; INPUT PARAMETERS:
;	R6 = buffer address
;	R7 = good data address
;	R8 = byte count
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

BCSD:
	.LONG	80
	.ADDRESS BCBUF
BCBUF:
	.BLKB	80
BCOSD:
	.LONG	0
	.ADDRESS BCBUF
PARAM1:
	.BLKL	3
;
BUF_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	R6,R9				; save a copy of the buffer address
	CMPC3	R8,(R7),(R6)			; check the buffer
	BEQL	10$				; br if good
	MOVAL	B^PARAM1,R10			; set parameter pointer
	MOVZBL	(R3),(R10)+			; save bad data
	MOVZBL	(R1),(R10)+			; save good data
	SUBL3	R9,R3,(R10)+			; save byte offset
	MOVAL	B^PARAM1,R10			; reset address pointer
	$FAO_S	CTRSTR = W^CS6,-
		OUTLEN = W^BCOSD,-
		OUTBUF = W^BCSD,-
		    P1 = (R10)+,-
		    P2 = (R10)+,-
		    P3 = (R10)+			; make the string
	PUSHAL	B^BCOSD				; push the string variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
10$:
	RET					; return
.PAGE
	.SBTTL	SND_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check the contents of a buffer against known good 
;	data.
;
; CALLING SEQUENCE:
;	CALLS #0,W^SND_CHECK		; check buffer
;
; INPUT PARAMETERS:
;	R6 = expected status code
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

SND_CHECK:
	.WORD	^M<R2,R3,R4,R5>
	$QIOW_S	FUNC=#IO$_READVBLK,-
		CHAN=W^MBCHAN,-
		IOSB=W^STATUSM,-
		P1  =W^MBUF,-
		P2  =#80		; read the mail
	CMPL	W^SERV_NAME,#SNDSMB	; SNDSMB or SNDOPR
	BEQL	10$			; br if SNDSMB
	CMPW	W^MBUF+OPC$W_MS_STATUS,R6 ; correct response type?
	BEQL	30$			; br if yes
	PUSHL	W^MBUF+OPC$W_MS_STATUS	; push received
	BRB	20$			; br to common code
10$:
	CMPL	W^MBUF+4,R6		; correct status return?
	BEQL	30$			; br if yes
	PUSHL	W^MBUF+4		; push received
20$:
	PUSHL	R6			; push expected
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
30$:
	RET
	.SBTTL GENREQ
;++
; FUNCTIONAL DESCRIPTION:
; routine to generate a pending request for $SNDOPR
;
; CALLING SEQUENCE:
;	CALLS	#0,W^GENREQ	; generate a pending request
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

GENREQ:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	$SNDOPR_S MSGBUF = W^OP_MSG1,-
		    CHAN = W^MBCHAN	; generate a request
	FAIL_CHECK SS$_NORMAL		; check for failure
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET
.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSS05
