	.TITLE	SATSSS52 SATS SYSTEM SERVICE TESTS  $DLCEFC (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSTST (SATS SYSTEM SERVICE TESTS)
;
; ABSTRACT:
;
;		THIS MODULE CONTAINS SUBROUTINES WHICH, WHEN LINKED
; WITH SUCCOMMON.OBJ, FORM TEST MODULE SATSSS52 TO TEST SUCCESSFUL
; OPERATION OF THE $DLCEFC SYSTEM SERVICE. THE SERVICE IS INVOKED
; UNDER VARIOUS INPUT CONDITIONS WITH VARYING INPUT PARAMETERS. ONLY
; SUCCESSFUL STATUS CODES ARE EXPECTED IN THIS TEST MODULE.  CORRECT 
; OPERATION OF THE SERVICE FOR EACH OF ITS ISSUANCES IS VERIFIED BY
; CHECKING FOR AN SS$_NORMAL STATUS CODE, EXPECTED RETURN ARGUMENTS
; AND EXPECTED FUNCTIONALITY PERFORMED.
;
; ENVIRONMENT:	USER MODE IMAGE; NEEDS CMKRNL PRIVILEGE,
;		DYNAMICALLY ACQUIRES OTHER PRIVILEGES, AS NEEDED.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: JAN, 1978
;
; MODIFIED BY:
;
;		VERSION 1.5 : 25-MAY-79
;
; 01  LDJ  10/11/79	Fixed bug caused by DIB$K_LENGTH change ACG052.RNO mem
;
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PRVDEF				; PRIVILEGE BIT DEFINITIONS
	$PHDDEF				; PROCESS HEADER OFFSETS
	$PQLDEF				; PROCESS QUOTA CODES
	$DIBDEF				; DEVICE INFO BLOCK OFFSETS
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
	.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
TEST_MOD_NAME::	STRING	C,<SATSSS52>	; TEST MODULE NAME
TEST_MOD_NAME_D: STRING	I,<SATSSS52>	; TEST MODULE NAME DESCRIPTOR
MSG1_INP_CTL:	STRING	I,<  SSDEF!4ZW: CONDITIONS:>
					; FAO CTL STRING FOR MSG1 IN SUCCOMMON.MAR
MSG3_ERR_CTL::	STRING	I,< *SSDEF!4ZW: !AS> 
					; FAO CTL STRING FOR MSG3 IN SUCCOMMON.MAR
CREPRN:		STRING	I,<SATSSS52_CRE> ; CREATED PROCESS NAME
CLUS_NAME:	STRING	I,<SATSSS52_CLUS> ; SUBJECT CLUSTER NAME
IMAGNAM:	STRING	I,<SYSTST$RES:SATSUT10.EXE> ; IMAGE NAME FOR CREATED PROC
QUOTALIST:	$QUOTA	CPULM,0		; INFINITE CPU
		$QUOTA	BYTLM,512	; BYTE LIMIT FOR BUFFERED I/O
		$QUOTA	FILLM,2		; OPEN FILE COUNT LIMIT
		$QUOTA	PGFLQUOTA,10	; PAGING FILE QUOTA
		$QUOTA	PRCLM,2		; SUBPROCESS QUOTA
		$QUOTA	TQELM,3		; TIMER QUEUE ENTRY QUOTA
		$QUOTA	LISTEND		; DEFINES END OF LIST
	.PAGE
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
PRIVMASK:	.BLKQ	1		; ADDR OF PRIVILEGE MASK (IN PHD)
MBXCHAN:	.BLKL	1		; CHAN NO. FOR MAILBOX FOR CREATED PROCESS
MBXCHANINFO:				; CHANNEL INFO RETURNED BY GETCHN
		.LONG	DIB$K_LENGTH
		.ADDRESS .+4
		.BLKB	DIB$K_LENGTH
MBXUNIT:	.BLKL	1		; SAVE AREA FOR MAILBOX UNIT NUMBER
MBXBUFF:	STRING	O,120		; MAILBOX BUFFER FOR CREATED PROCESS
CLUS_MASK:	.BLKL	1		; CLUSTER MASK; USED TO SET SUBJECT CLUSTER
CLUS_STATE:	.BLKL	1		; STATE OF SUBJECT CLUSTER
EFN_REFCT1:	.BLKL	1		; SAVE AREA FOR EFN WHEN REF CT = 1
	.PAGE
	.SBTTL	CONDITION TABLES
;
;	***** CONDITION TABLES FOR DLCEFC SYSTEM SERVICE *****
;
	COND	1,NOTARG,<CLUSTER'S PERM/TEMP SETTING AT TIME OF DLCEFC>,-
		  <TEMPORARY>,-
		  <PERMANENT>,-
 
		    .LONG	0,1	; TEMPORARY/PERMANENT
;
	COND	2,NOTARG,<CLUSTER'S REFERENCE COUNT AT TIME OF DLCEFC>,-
		  <ZERO>,-
		  <ONE (E.F. GROUP 2)>,-
		  <ONE (E.F. GROUP 3)>,-
		  <TWO (BOTH E.F. GROUPS)>,-
		  <FOUR (BOTH E.F. GROUPS IN TWO PROCESSES)>,-
 
	COND	3,NULL
 
	COND	4,NULL
 
	COND	5,NULL
 
	.PSECT	SATSSS52,RD,WRT,EXE
	.PAGE
	.SBTTL	TM_SETUP, TM_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		TM_SETUP AND TM_CLEANUP ARE CALLED TO PERFORM
; REQUIRED HOUSEKEEPING AT THE BEGINNING AND END, RESPECTIVELY, OF
; TEST MODULE EXECUTION.
;
; CALLING SEQUENCE:
;
;	BSBW TM_SETUP   BSBW TM_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	TM_SETUP:  COND TABLE INDEX REGISTERS (R2,3,4,5,6) CLEARED;
;		   ALL PRIVILEGES ACQUIRED.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



TM_SETUP::
	CLRL	R2			; INITIALIZE
	CLRL	R3			; .. CONDITION
	CLRL	R4			; .... TABLE
	CLRL	R5			; ...... INDEX
	CLRL	R6			; ........ REGISTERS
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE BEGIN MSG
	MOVAL	TEST_MOD_SUCC,TMD_ADDR	; ASSUME END MSG WILL SHOW SUCCESS
	INSV	#SUCCESS,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR SUCCESS
	MODE	TO,5$,KRNL		; KERNEL MODE TO ACCESS PHD
	MOVL	@#CTL$GL_PHD,R9		; GET PROCESS HEADER ADDRESS
	MOVAL	PHD$Q_PRIVMSK(R9),PRIVMASK ; GET PRIV MASK ADDRESS
	MODE	FROM,5$	; BACK TO USER MODE
	PRIV	ADD,ALL			; GET ALL PRIVILEGES
	$SETPRN_S TEST_MOD_NAME_D 	; SET PROCESS NAME
	SS_CHECK  NORMAL		; CHECK STATUS CODE RETURNED FROM SETPRN
	$CREMBX_S CHAN=MBXCHAN, LOGNAM=CREPRN, - ; GET MAILBOX FOR PROCESS
		  MAXMSG=#120, PROMSK=#0, BUFQUO=#240
	SS_CHECK NORMAL			; CHECK NORMAL COMPLETION
	$GETCHN_S CHAN=MBXCHAN, - 	; GET CHAN INFO (UNIT NUMBER)
		  PRIBUF=MBXCHANINFO
	SS_CHECK NORMAL			; CHECK NORMAL COMPLETION
	MOVZWL	MBXCHANINFO+8+DIB$W_UNIT,MBXUNIT ; SAVE MAILBOX UNIT NUMBER
	RSB				; RETURN TO MAIN ROUTINE
TM_CLEANUP::
	$DELMBX_S  MBXCHAN		; DELETE TERMINATION MAILBOX
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE END MSG
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	CONDITION SUBROUTINES - SETUP AND CLEANUP 
;++
; FUNCTIONAL DESCRIPTION:
;
;		CONDX AND CONDX_CLEANUP ARE SUBROUTINES WHICH ARE EXECUTED
; BEFORE AND AFTER THE VERIFY SUBROUTINE, RESPECTIVELY, WHENEVER A NEW
; CONDITION X VALUE IS SELECTED (SEE FUNCTIONAL DESCRIPTION OF SUCCOMMON
; ROUTINE IN SUCCOMMON.MAR). ANY SETUP FUNCTION PARTICULAR TO THE 
; CONDITION X TABLE IS INCLUDED IN THE CONDX SUBROUTINE AND CLEANED
; UP, IF NECESSARY, IN THE CONDX_CLEANUP SUBROUTINE. THIS INCLUDES,
; ESPECIALLY, CODE TO DETECT CONFLICTS AMONG CURRENT ENTRIES IN TWO
; OR MORE CONDITION TABLES. IF A CONFLICT IS DETECTED, A NON-ZERO
; VALUE IS STORED INTO CONFLICT, WHICH CAUSES THE CALLING ROUTINE
; (SUCCOMMON) TO SKIP THE CURRENT ENTRY IN THE CONDITION X TABLE.
;
; CALLING SEQUENCE:
;
;	BSBW CONDX   BSBW CONDX_CLEANUP
;	  WHERE X = 1,2,3,4,5
;
; INPUT PARAMETERS:
;
;	CONFLICT = 0
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;
; OUTPUT PARAMETERS:
;
;	CONFLICT SET TO NON-ZERO IF COND TABLE CONFLICT DETECTED.
;
; IMPLICIT OUTPUTS:
;
;	R2,3,4,5,6 PRESERVED
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



COND1::
	RSB				; RETURN TO MAIN ROUTINE
COND1_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND2::
	RSB				; RETURN TO MAIN ROUTINE
COND2_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND3::
	RSB				; RETURN TO MAIN ROUTINE
COND3_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND4::
	RSB				; RETURN TO MAIN ROUTINE
COND4_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND5::
	RSB				; RETURN TO MAIN ROUTINE
COND5_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	FORM_CONDS
;++
; FUNCTIONAL DESCRIPTION:
;
; 		FORM_CONDS FORMATS AND PRINTS INFORMATION ABOUT
;  THE CURRENT ELEMENT IN EACH OF THE CONDITION TABLES.
;
; CALLING SEQUENCE:
;
;	BSBW FORM_CONDS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_T - TITLE TEXT FOR CONDX TABLE
;		CONDX_TAB - ELEMENT TEXT FOR CONDX TABLE
;		CONDX_C - CONTEXT OF THE CONDX TABLE
;		CONDX_E - DATA ELEMENTS OF THE CONDX TABLE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



FORM_CONDS::
	$FAO_S	MSG1_INP_CTL,FAO_LEN,FAO_DESC,TESTNUM
					; FORMAT CONDITIONS HEADER MSG
	BSBW	OUTPUT_MSG		; ... AND PRINT IT
	CMPB	#COND1_C,#NULL		; IS CONDITION 1 NULL ?
	BNEQU	10$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
10$:
	MOVAL	COND1_T,MSG_A		; SAVE ADDRESS OF CONDITION 1 TITLE FOR FAO
	MOVL	COND1_TAB[R2],MSG_B 	; SAVE ADDR OF COND 1 CURR TEXT ELT FOR FAO
	MOVB	#COND1_C,MSG_CTXT 	; SAVE CONDITION 1 CONTEXT FOR FAO
	MOV_VAL	COND1_C,COND1_E[R2],MSG_DATA1 ; GIVE COND 1 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 1 MSG
	CMPB	#COND2_C,#NULL		; IS CONDITION 2 NULL ?
	BNEQU	20$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
20$:
	MOVAL	COND2_T,MSG_A		; SAVE ADDRESS OF CONDITION 2 TITLE FOR FAO
	MOVL	COND2_TAB[R3],MSG_B 	; SAVE ADDR OF COND 2 CURR TEXT ELT FOR FAO
	MOVB	#COND2_C,MSG_CTXT 	; SAVE CONDITION 2 CONTEXT FOR FAO
	MOV_VAL	COND2_C,COND2_E[R3],MSG_DATA1 ; GIVE COND 2 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 2 MSG
	CMPB	#COND3_C,#NULL		; IS CONDITION 3 NULL ?
	BNEQU	30$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
30$:
	MOVAL	COND3_T,MSG_A		; SAVE ADDRESS OF CONDITION 3 TITLE FOR FAO
	MOVL	COND3_TAB[R4],MSG_B 	; SAVE ADDR OF COND 3 CURR TEXT ELT FOR FAO
	MOVB	#COND3_C,MSG_CTXT 	; SAVE CONDITION 3 CONTEXT FOR FAO
	MOV_VAL	COND3_C,COND3_E[R4],MSG_DATA1 ; GIVE COND 3 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 3 MSG
	CMPB	#COND4_C,#NULL		; IS CONDITION 4 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND4_T,MSG_A		; SAVE ADDRESS OF CONDITION 4 TITLE FOR FAO
	MOVL	COND4_TAB[R5],MSG_B 	; SAVE ADDR OF COND 4 CURR TEXT ELT FOR FAO
	MOVB	#COND4_C,MSG_CTXT 	; SAVE CONDITION 4 CONTEXT FOR FAO
	MOV_VAL	COND4_C,COND4_E[R5],MSG_DATA1 ; GIVE COND 4 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 4 MSG
	CMPB	#COND5_C,#NULL		; IS CONDITION 5 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND5_T,MSG_A		; SAVE ADDRESS OF CONDITION 5 TITLE FOR FAO
	MOVL	COND5_TAB[R6],MSG_B 	; SAVE ADDR OF COND 5 CURR TEXT ELT FOR FAO
	MOVB	#COND5_C,MSG_CTXT 	; SAVE CONDITION 5 CONTEXT FOR FAO
	MOV_VAL	COND5_C,COND5_E[R6],MSG_DATA1 ; GIVE COND 5 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 5 MSG
FORM_CONDSX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VERIFY
;++
; FUNCTIONAL DESCRIPTION:
;
;		VERIFY IS CALLED ONCE FOR EACH COMBINATION OF CONDITION
; TABLE VALUES (AS DETERMINED BY THE INDEX REGISTERS R2,3,4,5,6 FOR
; COND TABLES 1,2,3,4,5, RESPECTIVELY). VERIFY ESTABLISHES THE CONDITIONS
; SPECIFIED BY THE COND TABLES AND ISSUES THE SUBJECT SYSTEM SERVICE
; ($DLCEFC). THEN, THE SUCCESSFUL OPERATION OF THE SERVICE IS VERIFIED
; BY EXAMINING THE STATUS CODE RETURNED, THE VALUES FOR RETURN ARGUMENTS
; AND THE FUNCTIONALITY PERFORMED. THE EXAMINATIONS TAKE THE FORM OF 
; COMPARISONS AGAINST EXPECTED VALUES. ANY FAILING COMPARISON CAUSES AN
; ERR_EXIT MACRO TO BE EXECUTED (EITHER DIRECTLY, OR INDIRECTLY,
; THROUGH THE SS_CHECK MACRO); ERR_EXIT SETS EFLAG TO NON-ZERO,
; PRINTS ERROR MESSAGES AND CAUSES AN IMMEDIATE RSB TO CALLER.
; WHEN ERR_EXIT IS EXECUTED, FURTHER CALLS TO VERIFY ARE SUPPRESSED,
; AND, AFTER EXECUTING CLEANUP SUBROUTINES, THE IMAGE EXITS.
;
; CALLING SEQUENCE:
;
;	BSBW VERIFY
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	VERIFY HAS NO OUTPUT. SINCE ITS PURPOSE IS TO TEST FOR ERRORS,
;	IT MERELY RETURNS TO CALLER NORMALLY AFTER THE TESTS, PROVIDING
;	ALL WERE SUCCESSFUL; IF AN ERROR IS DISCOVERED, RETURN IS VIA
;	AN ERR_EXIT OR SS_CHECK MACRO, BOTH OF WHICH DOCUMENT DETECTED
;	ERRORS.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VERIFY::
	TSTB	CFLAG			; SHOULD CONDITIONS BE PRINTED ?
	BEQL	5$			; NO -- CONTINUE
	BSBW	FORM_CONDS		; YES -- FMT & PRINT ALL CONDS FOR THIS T.C.
5$:
;
;  CREATE A CLUSTER AND GET IT BUILT AT LEAST ONCE, THEN DELETE
;    IT WITH A DACEFC.
;
	$ASCEFC_S EFN=#64, NAME=CLUS_NAME ; CREATE A NEW CLUSTER
	SS_CHECK NORMAL			; CHECK ITS COMPLETION
	MOVZBL	#64,R10			; IDENTIFY EVENT FLAG GROUP TO BUILD_CLUST
	BSBW	BUILD_CLUST		; BUILD THE SUBJECT CLUSTER
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	10$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
10$:
	$SETEF_S EFN=#95		; ENSURE CLUSTER HAS AT LEAST ONE FLAG ON
	SS_CHECK WASCLR			; FLAG 95 SHOULD HAVE BEEN CLEAR PREVIOUSLY
	$DACEFC_S EFN=#64		; NOW GET RID OF TEMPORARY CLUSTER
	SS_CHECK NORMAL			; ... CHECK ITS COMPLETION
;
;  THE FOLLOWING CASE INSTRUCTION AND SUBSEQUENT CODING
;    ISSUES AS MANY ASCEFC'S AS NECESSARY TO ACHIEVE THE
;    SPECIFIED REFERENCE COUNT FOR THIS TEST CASE.
;
	MOVZBL	#64,EFN_REFCT1		; ASSUME EVENT FLAG GROUP 2
	CASEB	R3,#0,#4		; ISSU CORRECT ASCEFC'S PER COND 2 INDEX REG
15$:					; START OF CASE WORD DISPLACEMENTS
	.WORD	20$-15$			; REF COUNT 0
	.WORD	30$-15$			; REF COUNT 1, EVENT FLAG GROUP 2
	.WORD	40$-15$			; REF COUNT 1, EVENT FLAG GROUP 3
	.WORD	50$-15$			; REF COUNT 2
	.WORD	50$-15$			; REF COUNT 4
	BRW	55$			; BRANCH PAST CASE ROUTINES
20$:
;
;  REF COUNT 0, NO ASCEFC'S TO BE ISSUED
;
	BRW	60$			; GO ON TO ISSUE SUBJECT DLCEFC
30$:
;
;  REF COUNT 1, EVENT FLAG GROUP 2
;
	$ASCEFC_S EFN=EFN_REFCT1, -	; INCREMENT REF COUNT; EFN SET UP ABOVE
		  NAME=CLUS_NAME, -
		  PERM=COND1_E[R2]
	SS_CHECK NORMAL			; CHECK FOR NORMAL COMPLETION
	BRW	55$			; GO BUILD THE CLUSTER JUST CREATED
40$:
;
;  REF COUNT 1, EVENT FLAG GROUP 3
;
	MOVZBL	#96,EFN_REFCT1		; EST EFN FOR E.F. GROUP 3
	$ASCEFC_S EFN=EFN_REFCT1, - 	; INCREMENT REF COUNT
		  NAME=CLUS_NAME, -
		  PERM=COND1_E[R2]
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS CODE
	BRW	55$			; GO BUILD CLUSTER JUST CREATED
50$:
;
;  REF COUNT 2 OR 4, BOTH EVENT FLAG GROUPS IN THIS PROCESS
;
	$ASCEFC_S EFN=#64, -		; INCREMENT REF COUNT
		  NAME=CLUS_NAME, -
		  PERM=COND1_E[R2]
	SS_CHECK NORMAL			; CHECK FOR NORMAL COMPLETION
	$ASCEFC_S EFN=#96, -		; INCREMENT REF COUNT
		  NAME=CLUS_NAME, -
		  PERM=COND1_E[R2]
	SS_CHECK NORMAL			; CHECK FOR NORMAL COMPLETION
	CMPL	R3,#4			; FIFTH COND 2 ELEMENT (REF COUNT 4) ?
	BNEQU	55$			; NO -- REF COUNT IS 2 -- NO MORE ASCEFC'S
					; YES -- CREATED PROC ISSUE 2 MORE ASCEFC'S
	$CREPRC_S PRCNAM=CREPRN, IMAGE=IMAGNAM, -
		  MBXUNT=MBXUNIT, QUOTA=QUOTALIST
	SS_CHECK NORMAL			; CHECK CREPRC COMPLETION STATUS
	$HIBER_S			; SLEEP UNTIL CREATED PROCESS DOES ASCEFC'S
55$:
;
;  END OF CASE ROUTINES
;
;  AT THIS POINT, AT LEAST ONE ASCEFC HAS BEEN ISSUED; CALL
;    BUILD_CLUST TO GET THE CREATED CLUSTER BUILT.
;
	MOVL	EFN_REFCT1,R10		; ESTABLISH EFN FOR BUILD_CLUST
	BSBW	BUILD_CLUST		; BUILD CLUSTER
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	60$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
60$:
;
; ****** SYSTEM SERVICE CALL WHICH IS THE SUBJECT OF THIS TEST CASE ******
;
	$DLCEFC_S NAME=CLUS_NAME 	; CLEAR PERMANENT INDICATOR
	CMPL	R0,#SS$_NORMAL		; CODE RECEIVED = CODE EXPECTED ?
	BEQLU	70$			; YES -- CONTINUE
	MOVL	#SS$_NORMAL,EXPV 	; LOAD UP EXPECTED AND ...
	MOVL	R0,RECV			; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT STATUS CODE RETURNED FROM DLCEFC>
70$:
;
;  TO VERIFY THE SUBJECT DLCEFC, THE CLUSTER'S REFERENCE COUNT
;    WILL BE DROPPED TO 0 (BY ISSUING DACEFC'S) AND THEN AN
;    ADDITIONAL ASCEFC WILL BE ISSUED TO CREATE A NEW CLUSTER
;    WHICH WILL BE VERIFIED TO BE ALL 0'S.  BEFORE EACH DACEFC
;    IS ISSUED, A READEF OF THE CLUSTER WILL BE DONE TO ENSURE
;    THAT THE CLUSTER REMAINS EQUAL TO THE CLUSTER MASK; THIS
;    GUARANTEES THAT THE REFERENCE COUNT WAS CORRECT AND, IN
;    FACT, THAT THE CLUSTER IS NOT DELETED UNTIL THE COUNT
;    GOES TO 0.
;
;
;  THE FOLLOWING CASE STATEMENT AND SUBSEQUENT CODING
;    DECREMENTS THE REFERENCE COUNT BY ISSUING THE CORRECT
;    SEQUENCE OF DACEFC'S, BASED ON THE REFERENCE COUNT 
;    FOR THIS TEST CASE.
;
	CASEB	R3,#0,#4		; ISSU CORRECT DACEFC'S PER COND 2 INDEX REG
75$:					; CASE INSTRUCTION WORD DISPLACEMENTS
	.WORD	80$-75$			; REF COUNT 0
	.WORD	90$-75$			; REF COUNT 1, EVENT FLAG GROUP 2
	.WORD	90$-75$			; REF COUNT 1, EVENT FLAG GROUP 3
	.WORD	100$-75$		; REF COUNT 2
	.WORD	100$-75$		; REF COUNT 4
	BRW	130$			; BRANCH PAST CASE ROUTINES
80$:
;
;  REF COUNT 0, NO DACEFC NECESSARY
;
	BRW	130$			; GO ON TO CHECK CLUSTER FOR 0'S
90$:
;
;  REF COUNT 1, ISSUE ONE DACEFC
;
	MOVL	EFN_REFCT1,R10		; SET UP CORRECT EFN FOR READ_DACEFC SUBRTN
	BSBW	READ_DACEFC		; CHECK THE CLUSTER AND DISASSOCIATE
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	95$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
95$:
	BRW	130$			; GO ON TO CHECK CLUSTER FOR 0'S
100$:
;
;  REF COUNT 2 OR 4, ISSUE 2 OR 4 DACEFC'S
;
	CMPL	R3,#4			; FIFTH COND 2 ELEMENT (REF COUNT 4) ?
	BEQLU	105$			; YES -- CONTINUE
	BRW	110$			; NO -- REF COUNT MUST BE 2
105$:
	$WAKE_S PRCNAM=CREPRN		; WAKE PROCESS TO GET DACEFC'S ISSUED
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS CODE
	$QIOW_S	CHAN=MBXCHAN, FUNC=#IO$_READVBLK, -
		P1=MBXBUFF+8, P2=MBXBUFF
					; ... AND WAIT FOR IT TO SEND MAIL
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS CODE
110$:
	MOVZBL	#64,R10			; SET UP CORRECT EFN FOR READ_DACEFC SUBRTN
	BSBW	READ_DACEFC		; CHECK THE CLUSTER AND DISASSOCIATE
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	120$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
120$:
	MOVZBL	#96,R10			; SET UP CORRECT EFN FOR READ_DACEFC SUBRTN
	BSBW	READ_DACEFC		; CHECK THE CLUSTER AND DISASSOCIATE
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	130$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
130$:
;
;  REFERENCE COUNT SHOULD BE DOWN TO 0 AND CLUSTER DELETED.
;    DO ONE MORE ASCEFC AND EXPECT A CLUSTER OF 0'S.
;
	$ASCEFC_S EFN=#64, NAME=CLUS_NAME ; RE-ASSOCIATE SAME CLUSTER
	SS_CHECK NORMAL			; CHECK COMPLETION STATUS
	$READEF_S EFN=#64, STATE=CLUS_STATE ; READ CLUSTER
	BLBS	R0,140$			; CONTINUE IF NORMAL COMPLETION
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
140$:
	TSTL	CLUS_STATE		; IS CLUSTER INITIALIZED TO 0'S ?
	BEQLU	VERIFYX			; YES -- THIS TEST CASE COMPLETE
	CLRL	EXPV			; NO -- LOAD EXPECTED AND ...
	MOVL	CLUS_STATE,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<DELETED AND RE-ASSOCIATED CLUSTER NOT RE-INIT'D>
VERIFYX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VFY_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		VFY_CLEANUP EXECUTES SYSTEM SERVICES TO UNDO THE
; EFFECT OF THOSE ISSUED IN THE VERIFY SUBROUTINE. VFY_CLEANUP MUST
; ASSUME THAT VERIFY MAY NOT HAVE EXECUTED IN ITS ENTIRETY (IF AN
; ERROR IS FOUND). ALSO, VFY_CLEANUP MAY ISSUE SS_CHECK OR ERR_EXIT
; ONLY AFTER PERFORMING ALL OF ITS CLEANUP OPERATIONS; THIS IS REQUIRED
; IN THE EVENT THAT VFY_CLEANUP IS CALLED DURING ERROR PROCESSING,
; WHEN PERFORMING THE REQUIRED CLEANUP IS MORE IMPORTANT THAN
; POSSIBLY DISCOVERING A SECOND ERROR.
;
; CALLING SEQUENCE:
;
;	BSBW VFY_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VFY_CLEANUP::
	$DLCEFC_S NAME=CLUS_NAME 	; CLEAR PERM INDICATOR IF PRESENT ...
	SS_CHECK NORMAL			; ... AND CHECK COMPLETION
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	BUILD_CLUST SUBROUTINE
;
; **************************************************************
; *
; *	BUILD_CLUST SUBROUTINE
; *
; *	THIS SUBROUTINE CREATES A 32-BIT CLUSTER MASK BY
; *	  CONCATENATING THE LOW-ORDER BYTES OF REGS R2-R5.
; *	  IT THEN SETS CLUSTER A EQUAL TO THE MASK BY
; *	  ISSUING THE PROPER COMBINATION OF 32 SETEF/CLREF'S.
; *
; *	INPUTS:
; *
; *		R2,R3,R4,R5   -  CONDITION TABLE INDEX VALUES
; *
; *		R10      -       ANY EFN IN CLUSTER A
; *
; *	OUTPUTS:
; *
; *		CLUS_MASK   -    LONGWORD CONTAINING THE CREATED
; *		                   CLUSTER MASK.
; *
; *		SUBJECT CLUSTER - UPDATED TO LOOK LIKE CLUS_MASK.
; *
; *	VOLATILE REGISTERS:
; *
; *		R0, R1, R8, R9
; *
; **************************************************************
;
BUILD_CLUST:
	MOVB	R5,CLUS_MASK		; BUILD
	MOVB	R4,CLUS_MASK+1		; .. CLUSTER
	MOVB	R3,CLUS_MASK+2		; ...... MASK
	MOVB	R2,CLUS_MASK+3		; ..............
;
; THE FOLLOWING CODE SETS SUBJECT CLUSTER EQUAL TO CLUS_MASK
;
	MOVL	R10,R8			; ESTABLISH FIRST EFN (EVENT FLAG NO.)
	CLRL	R9			; INIT OFFSET INTO CLUS_MASK
20$:
	BBS	R9,CLUS_MASK,30$ 	; ISSUE $SETEF IF BIT FOR THIS FLAG IS SET
	$CLREF_S EFN=R8			; ... OTHERWISE, ISSUE $CLREF
	BLBS	R0,40$			; IF NORMAL STATUS, PROCESS NEXT EVENT FLAG
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
30$:
	$SETEF_S EFN=R8			; SET CURRENT EVENT FLAG
	BLBS	R0,40$			; IF NORMAL STATUS, PROCESS NEXT EVENT FLAG
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
40$:
	INCW	R8			; GET NEXT EFN
	ACBB	#31,#1,R9,20$		; GO DO NEXT EVENT FLAG
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	READ_DACEFC SUBROUTINE
;
; **************************************************************
; *
; *	READ_DACEFC SUBROUTINE
; *
; *	THIS SUBROUTINE COMPARES THE CLUSTER AGAINST THE MASK
; *	  AND THEN DISASSOCIATES THE EVENT FLAG GROUP SPECIFIED
; *	  BY R10 FROM THE CLUSTER.
; *
; *	INPUTS:
; *
; *		R10      -       ANY EFN IN THE EVENT FLAG GROUP
; *				   TO BE DISASSOCIATED.
; *
; *		CLUS_MASK   -    LONGWORD CONTAINING THE IMAGE
; *				   OF THE SUBJECT CLUSTER.
; *	OUTPUTS:
; *
; *		NONE.
; *
; *	EXITS:
; *
; *		NORMAL     -     RSB TO CALLER IF CLUSTER EQUALS
; *				   MASK AND SYSTEM SERVICES
; *				   FINISH NORMALLY.
; *
; *		ERROR      -     ERR_EXIT MACRO EXECUTED IF ABOVE
; *				   NORMAL CONDITIONS ARE NOT MET.
; *
; *	VOLATILE REGISTERS, AREAS:
; *
; *		R0, R1, R8, R9, CLUS_STATE, EXPV, RECV
; *
; **************************************************************
;
READ_DACEFC:
	$READEF_S EFN=R10, STATE=CLUS_STATE ; READ CLUSTER
	BLBS	R0,10$			; CONTINUE IF NORMAL COMPLETION
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
10$:
	CMPL	CLUS_STATE,CLUS_MASK 	; DOES CLUSTER STILL = MASK ?
	BEQLU	20$			; YES -- ISSUE DACEFC AND GET OUT
	MOVL	CLUS_MASK,EXPV		; NO -- LOAD EXPECTED AND ...
	MOVL	CLUS_STATE,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<CLUSTER STATE NOT MAINTAINED ACROSS DLCEFC OR DACEFC>
20$:
	$DACEFC_S EFN=R10		; DISASSOCIATE (DECR REF CT BY 1)
	SS_CHECK NORMAL			; CHECK FOR NORMAL COMPLETION
READ_DACEFCX:
	RSB				; RETURN TO CALLER
	.END
