	.TITLE	SATSSS43 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS43 module tests the execution of the following
;		VMS system services:
;
;		$DCLCMH
;		$DCLEXH
;		$CANEXH
;
;
; ENVIRONMENT:	User, Supervisor and Executive mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: MMM, 1978
;	  PAUL D. FAY (DISPSERV & TESTSERV MACROS)
;
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	$PCBDEF				; PCB definitions
	$PHDDEF				; process header definitions
	$PRDEF				; processor register definitions
	$PRVDEF				; privilege definitions
	$PSLDEF				; PSL definitions
	$SFDEF				; Stack Frame definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$SSDEF				; system service definitions
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
	.SBTTL	MACROS
;
	.MACRO	EHDB	MODE,NUM
	.LIST	MEB
MODE'NUM:
		.LONG	0
		.ADDRESS MODE'H'NUM
		.LONG	2
		.ADDRESS STATUS
		.LONG	NUM
	.NLIST MEB
	.ENDM	EHDB
;
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS43/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID	/SATSSS43/		; module name
TEST_MOD_BEGIN:
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
DCLCMH:
	.ASCIC	/DCLCMH/
DCLEXH:
	.ASCIC	/DCLEXH/
CANEXH:
	.ASCIC	/CANEXH/
CS1:
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS4:
	.ASCID	\Unexpected !AS mode exit handler found in !AS.\
CS5:
	.ASCID	\Mode was !AS.\
UM:
	.ASCID	\user\
SM:
	.ASCID	\super\
EM:
	.ASCID	\executive\
EXP:
	.ASCID	\status\
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
MODE:
	.LONG	0
DCL:
	$DCLCMH DUMMY,OHC,0		; DCLCMH parameter list
DCL1:
	$DCLEXH EXEC3			; DCLEXH parameter list
CAN:
	$CANEXH EXEC1			; CANEXH parameter list
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	80
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
PRVHND1:
	.LONG	0			; previous handler address 1
PRVHND2:
	.LONG	0			; previous handler address 2
PRVHND3:
	.LONG	0			; previous handler address 3
OHC:
	.LONG	0			; old handler check location
ARGLST:
	.LONG	1			; super mode setup arg list
	.ADDRESS SUPER_MODE
MSGVEC:					; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
MSGVEC1:
	.LONG	4			; PUTMSG message vector for exit
	.LONG	0
	.LONG	2
	.BLKL	2
	.PAGE
; exit handler desc. blocks
	EHDB	USER,1			; user #1 will be deleted
	EHDB	USER,2			; user #2 will be used
	EHDB	USER,3			; user #3 will be deleted
	EHDB	USER,4			; user #4 will be used
	EHDB	SUPER,1			; super #1 will be deleted
	EHDB	SUPER,3			; super #3 will be deleted
	EHDB	EXEC,1			; exec #1 will be deleted
	EHDB	EXEC,3			; exec #3 will be deleted
.PAGE
	.PSECT	SATSSS43,RD,WRT,EXE,LONG
	.SBTTL	SATSSS43
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS43  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS43.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS43 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS43 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS43 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS43 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--



	TEST_START SATSSS43		; let the test begin
	.SBTTL	DCLCMH TESTS
;+
;
; $DCLCMH tests
; test super mode handler declaration
;
;-
	MOVAL	W^DCLCMH,W^SERV_NAME	; set service name
	$CMKRNL_S W^SETUP_SUPER,W^ARGLST ; test super mode declaration
	CALLS	#0,W^ERLBUF_DUMP	; report any errors
	CHMS	#1			; declare dummy handler
	CMPL	#SUPER_MODE,W^OHC	; make sure it happened
	BEQL	10$			; br if yes
	PUSHL	W^OHC			; else setup to report the error
	PUSHAL	W^SUPER_MODE		; save the expected results
	PUSHAL	W^EXP			; push the message address
	CALLS	#3,W^PRINT_FAIL		; report the failure
10$:
	CHMS	#2			; remove the dummy handler
;+
;
; test user mode handler declaration
;
;-
	NEXT_TEST
	MOVAL	W^UM,W^MODE		; set the mode
	MOVAL	W^DUMMY,W^DCL+DCLCMH$_ADDRES ; reset the handler address
	MOVAL	W^PRVHND2,W^DCL+DCLCMH$_PRVHND ; set new handler save address
	$DCLCMH_G W^DCL			; check _G form
	FAIL_CHECK SS$_NORMAL		; check for success
	$DCLCMH_S W^USER_MODE,W^OHC	; set real handler
	FAIL_CHECK SS$_NORMAL		; check for success
	CMPL	#DUMMY,W^OHC		; is handler address correct?
	BEQL	10$			; br if yes
	PUSHL	W^OHC			; push received address
	PUSHAL	W^DUMMY			; push expected address
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
10$:
;+
;
; test for compatiblity mode handler declaration
;
;-
	NEXT_TEST
	MOVAL	W^PRVHND3,W^DCL+DCLCMH$_PRVHND ; set new handler save location
	INCL	W^DCL+DCLCMH$_TYPE	; set to compatiblity mode type
	$DCLCMH_G W^DCL			; check _G form
	FAIL_CHECK SS$_NORMAL		; check for success
	$DCLCMH_S W^COMP_MODE,W^OHC,#1	; set real handler
	FAIL_CHECK SS$_NORMAL		; check for success
	CMPL	#DUMMY,W^OHC		; is handler address correct?
	BEQL	10$			; br if yes
	PUSHL	W^OHC			; push received address
	PUSHAL	W^DUMMY			; push expected address
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
10$:
;+
;
; check the compatibility mode handler
;
;-
	NEXT_TEST
	PUSHL	#<<PSL$M_CM>!<PSL$C_USER@PSL$V_PRVMOD>-
		!<PSL$C_USER@PSL$V_CURMOD>>	; set compatibility mode
	PUSHAL	B^10$			; set new address
	REI				; enter compatibility mode
.PAGE
	.ALIGN	WORD			; adjust addressing for PDP-11's
10$:
	.WORD	^O012767		; MOV	#-1,TEST ;prove we were here
	.WORD	^O177777
	.WORD	^O000002
	.WORD	^O000000		; HALT		;cause an exception
TEST:
	.WORD	^O000000		; compatibility mode flag location
RETURN:					; return to the good life
;+
;
; test the user mode handler
;
;-
	NEXT_TEST
	CHMU	#5			; use a param of 5
;+
;
; reset handlers to the original address
;
;-
	NEXT_TEST
	MOVAL	W^DCLCMH,W^SERV_NAME	; set service name
	$DCLCMH_S 0,W^PRVHND2		; reset CHMU handler
	FAIL_CHECK SS$_NORMAL		; check for success
	$DCLCMH_S 0,W^PRVHND3,#1	; reset CM handler
	FAIL_CHECK SS$_NORMAL		; check for success
.PAGE
	.SBTTL	DCLEXH TESTS #1
;+
;
; $DCLEXH tests
;
; These tests are divided into two parts.  This part is the declaration
; tests.  The second part is the servicing part.
;
; test for exec mode exit handler declaration
;
;-
	NEXT_TEST
	MOVAL	W^EM,W^MODE		; set the mode
	MOVAL	W^DCLEXH,W^SERV_NAME	; set service name
	$CMEXEC_S B^10$			; get to exec mode
	BRB	20$			; skip over exec routine
10$:
	.WORD	0
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a reg snapshot
	$DCLEXH_S W^EXEC1		; declare #1 exec exit handler
	FAIL_CHECKNP SS$_NORMAL		; check for success
	$DCLEXH_G W^DCL1		; declare #3 exec exit handler
	FAIL_CHECKNP SS$_NORMAL		; check for success
	RET				; go back to user mode
20$:
	CALLS	#0,W^ERLBUF_DUMP	; dump any errors that occured
;+
;
; test super mode exit handler declaration
;
;-
	NEXT_TEST
	MOVAL	W^SM,W^MODE		; set the mode
	CHMS	#4			; declare 2 super mode exit handlers
.PAGE
;+
;
; test user mode exit handler declaration
;
;-
	NEXT_TEST
	MOVAL	W^UM,W^MODE		; set the mode
	$DCLEXH_S W^USER1		; declare #1 user mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
	MOVAL	W^USER2,W^DCL1+DCLEXH$_DESBLK ; set exit handler address
	$DCLEXH_G W^DCL1		; declare #2 user mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
	$DCLEXH_S W^USER3		; declare #3 user mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
	MOVAL	W^USER4,W^DCL1+DCLEXH$_DESBLK ; set exit handler address
	$DCLEXH_G W^DCL1		; declare #4 user mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
.PAGE
	.SBTTL CANEXH TESTS
;+
;
; $CANEXH tests
; test for exec mode exit handler deletion
;
;-
	NEXT_TEST
	MOVAL	W^EM,W^MODE		; set the mode
	MOVAL	W^CANEXH,W^SERV_NAME	; set service name
	$CMEXEC_S B^10$			; get to exec mode
	BRB	20$			; skip over the routine
10$:
	.WORD	0			; entry mask
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save a reg snapshot
	$CANEXH_S W^EXEC1		; cancel exec exit handler #1
	FAIL_CHECKNP SS$_NORMAL		; check for success
	MOVAL	W^EXEC3,W^CAN+CANEXH$_DESBLK ; set handler adr
	$CANEXH_G W^CAN			; cancel exec exit handler #3
	FAIL_CHECKNP SS$_NORMAL		; check for success
	RET				; return
20$:
	CALLS #0,W^ERLBUF_DUMP		; dump any errors that occured
;+
;
; test super mode exit handler cancellation
;
;-
	NEXT_TEST
	MOVAL	W^SM,W^MODE		; set the mode
	CHMS	#5			; cancel super exit handlers #1 and #3
.PAGE
;+
;
; test user mode exit handler cancellation
;
;-
	NEXT_TEST
	MOVAL	W^UM,W^MODE		; set the mode
	$CANEXH_S W^USER1		; cancel user exit handler #1
	FAIL_CHECK SS$_NORMAL		; check for success
	MOVAL	W^USER3,W^CAN+CANEXH$_DESBLK ; set handler adr
	$CANEXH_G W^CAN			; cancel user exit handler #3
	FAIL_CHECK SS$_NORMAL		; check for success
.PAGE
	.SBTTL	DCLEXH TESTS #2
;+
;
; $DCLEXH tests
;
; This is the second of two parts of the DCLEXH tests.
; This part tests the servicing of the exit handlers.
; At this time there should be 2 user mode exit handlers declared.
;
; test user mode exit handler #4
;
;-
	NEXT_TEST
	MOVAL	W^DCLEXH,W^SERV_NAME	; set service name
	MOVL	S^#SS$_NORMAL,W^STATUS	; set the expected status return
	$EXIT_S	W^MOD_MSG_CODE		; kick off ALL exit handlers
USERH4:
	.WORD	0
	MOVZBL	S^#4,R2			; set expected handler code
	BRB	HNDLR_COM
;+
;
; test user exit handler #2
;
;-
USERH2:
	.WORD	0
	NEXT_TEST
	MOVZBL	S^#2,R2			; set expected handler code
HNDLR_COM:
	CMPL	@B^4(AP),W^STATUS	; is the status adr field OK?
	BEQL	10$			; br if yes
	PUSHL	4(AP)			; push received code
	PUSHAL	W^STATUS		; push expected code
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
	CALLS	#0,W^MODE_ID		; identify the handler mode
10$:
	CMPL	R2,8(AP)		; is the argument field OK?
	BEQL	20$			; br if yes
	PUSHL	8(AP)			; push received code
	PUSHL	R2			; push expected code
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
	CALLS	#0,W^MODE_ID		; identify the exit handler mode
20$:
	CMPB	S^#2,8(AP)		; is this the last handler?
	BEQL	30$			; br if yes
	RET				; do the next handler
30$:
	PUSHL	#0			; push dummy parameter
	CALLS	#1,W^REG_SAVE		; save the registers
	MOVAL	W^SM,W^MODE		; set the mode
	CHMS	#3			; reset the CHMS handler
	MOVL	W^MOD_MSG_CODE,W^MSGVEC1+4 ; set message code
	MOVL	W^TMN_ADDR,W^MSGVEC1+12	; set up parameters
	MOVL	W^TMD_ADDR,W^MSGVEC1+16
	$PUTMSG_S W^MSGVEC1		; print the message
	INSV	#1,#STS$V_INHIB_MSG,-
		#1,MOD_MSG_CODE		; set inhibit printing on the exit status
	MOVL	W^MOD_MSG_CODE,R0	; save the new code in R0
	RET				; leave for good!

.PAGE
.SBTTL SUPER_MODE
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to handle the CHMS instructions.
;
; CALLING SEQUENCE:
;	CHMS	#N
;
; INPUT PARAMETERS:
;	  SP=>	CHMS parameter
;		PC
;		PSL
;
;	  The CHMS parameter can be one of the following:
;
;		1 = execute a $DCLCHM_G to declate a dummy handler
;		2 = execute a $DCLCMH_G to clear the dummy CHMS handler
;		3 = execute a $DCLCMH_S to reset the CHMS handler
;		4 = declare 2 exit handlers in super mode
;		5 = delete 2 exit handlers in super mode
;
; OUTPUT PARAMETERS:
;	NONE
;--

SUPER_MODE:
	MOVL	(SP)+,R0		; get CHM parameter off the stack
	CASEB	R0,#1,#5		; do the right thing
10$:
	.WORD	20$-10$
	.WORD	30$-10$
	.WORD	40$-10$
	.WORD	50$-10$
	.WORD	60$-10$
20$:
	$DCLCMH_G W^DCL			; declare a dummy CHMS handler
	FAIL_CHECK SS$_NORMAL		; check for success
	BRW	70$			; carry on
30$:
	MOVAL	W^SUPER_MODE,W^DCL+DCLCMH$_ADDRES ; set up to delete dummy handler
	$DCLCMH_G W^DCL			; clear the dummy handler
	FAIL_CHECK SS$_NORMAL		; check for success
	BRW	70$			; carry on
40$:
	MOVAL	W^DCLCMH,W^SERV_NAME	; set service name pointer
	$DCLCMH_S @PRVHND1,,#0		; reset the CHMS handler for DCL
	FAIL_CHECK SS$_NORMAL		; check for success
	BRB	70$			; carry on
50$:
	$DCLEXH_S W^SUPER1		; declare #1 super mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
	MOVAL	W^SUPER3,W^DCL1+DCLEXH$_DESBLK ; set handler adr for #3
	$DCLEXH_G W^DCL1		; declare #3 super mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
	BRB	70$			; carry on
60$:
	$CANEXH_S W^SUPER1		; delete #1 super mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
	MOVAL W^SUPER3,W^CAN+CANEXH$_DESBLK ; set handler adr for #3
	$CANEXH_G W^CAN			; delete #3 super mode exit handler
	FAIL_CHECK SS$_NORMAL		; check for success
70$:
	REI				; go back to user mode
DUMMY:
	BRW	SUPER_MODE		; dummy handler address
	.SBTTL USER_MODE
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to handle the CHMU instruction
;
; CALLING SEQUENCE:
;	CHMU	#5
;
; INPUT PARAMETERS:
;	SP=>	#5
;		PC
;		PSL
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

USER_MODE:
	MOVL	(SP)+,R0		; get CHM parameter off the stack
	CMPL	R0,S^#5			; is it correct?
	BEQL	10$			; br if yes
	PUSHL	R0			; save received
	PUSHL	S^#5			; save expected
	PUSHAL	W^EXP			; save the string variable
	CALLS	#3,W^PRINT_FAIL		; print the error message
10$:
	REI				; return
	.PAGE
	.SBTTL	COMP_MODE
;++
; FUNCTIONAL DESCRIPTION:
;	Compatibility mode exception handler
;
; CALLING SEQUENCE:
;	execute a compatibility mode exception
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--
COMP_MODE:
	TSTB	-4(R0)			; see if we got the correct exception
	BEQL	10$			; br if correct
	PUSHL	-4(R0)			; push received code
	PUSHL	#0			; push expected code
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
10$:
	CMPW	W^TEST,#-1		; were we really in compatibility mode?
	BEQL	20$			; br if yes
	MOVZWL	W^TEST,-(SP)		; push received code
	PUSHL	#^X0000FFFF		; push expected code
	PUSHAL	W^EXP			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the error
20$:
	BRW	RETURN			; carry on
.PAGE
	.SBTTL SETUP_SUPER ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to declare an initial CHMS handler from user mode.
;
; CALLING SEQUENCE:
;	$CMKRNL_S W^SETUP_SUPER,ARGLST
;
;		ARGLST = address of a pointer to a one parameter argument list containing
;			 the address of the entry mask of the CHMS handler
;
; INPUT PARAMETERS:
;	ARGLST
;
; IMPLICIT INPUTS
;	NONE
;
; OUTPUT PARAMETERS:
;	Declares a change mode handler for super mode which must be
;	reset to DCL in the users handler routine when the handler is
;	no longer needed.
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
; ON ENTRY:
;		       ---------	       ---------
;		KSP => !   0   !	USP => !       !
;		       !   0   !	       !  USER !
;		       !   AP  !	       !       !
;		       !   FP  !	       !  CALL !
;		       !   PC  !	       !       !
;		       !   0   !	       ! FRAME !
;		       !   0   !	       !       !
;		       !   AP  !	       ---------
;		       !   FP  !
;		       !SRVEXIT!
;		       !   PC  !
;		       !  PSL  !
;		       ---------
;--
.PAGE
RETURN_PC:
	.LONG	0			; storage for user return PC
HANDLER_PC:
	.LONG	0			; storage for handler PC
;
SETUP_SUPER:
	.WORD	^M<R2,R3>	
	MFPR	#PR$_USP,R3		; get the user call frame address
	MOVL	SF$L_SAVE_PC(R3),B^RETURN_PC ; get the user return PC
	MOVL	4(AP),HANDLER_PC	; save the handler address
	MOVL	SF$L_SAVE_FP(FP),R2	; get saved FP
	ADDL	S^#EXE$C_CMSTKSZ,R2	; back over change mode stack frame
	MOVAB	B^20$,(R2)		; set return address
	INSV	#<<PSL$C_SUPER@PSL$S_CURMOD>+PSL$C_SUPER>,-
		#PSL$V_PRVMOD,-
		#PSL$S_CURMOD*2,4(R2)	; set current and previous mode to super
	MOVL	S^#SS$_NORMAL,R0	; set correct return code
	RET				; enter super mode
20$:
	CLRL	-(SP)			; set up dummy PSL
	CALLG	(SP),B^30$		; create initial call frame
30$:
	.WORD	^M<>			; entry mask
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save the registers
	MOVAL	W^SM,W^MODE		; set the mode
	$DCLCMH_S @HANDLER_PC,W^PRVHND1,#0 ; set real handler
	FAIL_CHECKNP SS$_NORMAL		; check for success
	PUSHL	#<<PSL$C_USER@PSL$V_CURMOD>-
		!<PSL$C_USER@PSL$V_PRVMOD>>; set return to user
	PUSHL	RETURN_PC		; set the return PC
	REI				; return to user mode
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
.PAGE
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)			; set number past R0-R1 and save
	BICL2	#3,R1				; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
.PAGE
	.SBTTL REG_CHECKNP
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution without printing it. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed. This routine collects the error
;	information in buffer ERLB instead of printing it.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages logged in buffer ERLB which are printed
;	using routine ERLBUF_DUMP.
;
;--

FLAG:
	.BYTE 0			; error flags are BIT0 = 0 means no errors in the buffer
				;		  BIT0 = 1 means errors in the buffer
ELBP:
	.ADDRESS ERLB		; error log buffer pointer
ERLB:
	.BLKB	80		; error log buffer
;
REG_CHECKNP:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0	; is this the right fail code
	BEQL	10$		; br if yes
	BISB2	#1,FLAG		; set the error logged flag bit
	MOVL	ELBP,R2		; get the current error log pointer
	MOVB	#3,(R2)+	; save the long word count
	MOVL	R0,(R2)+	; save received status
	MOVL	4(AP),(R2)+	; save expected status
	MOVAL	W^EXP,(R2)+	; save the string variable
	CLRL	(R2)		; set the terminator
	MOVL	R2,ELBP		; reset the buffer pointer
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR ; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE ; set severity code
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA ; check all but R0 and R1
	BEQL	20$		; br if OK
	BISB2	#1,FLAG		; set error logged flag bit
	MOVL	ELBP,R2		; get current error log buf pointer
	MOVB	S^#4,(R2)+	; set longword count
	SUBL3	#REG_SAVE_AREA,-
	R3,R6			; calc reg number
	DIVL2	S^#4,R6		; make it a longword count
	ADDL3	S^#2,R6,(R2)+	; correct for R0-R1 and save
	MOVL	(R1),(R2)+	; save received results
	MOVL	(R3),(R2)+	; save expected results
	MOVAL	W^REG,(R2)+	; save string variable
	CLRL	(R2)		; set the terminator
	MOVL	R2,ELBP		; reset the buffer pointer
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
20$:
	RET			; bail out
.PAGE
	.SBTTL	ERLBUF_DUMP
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check for errors in the error log buffer and
;	report any that are there.
;
; CALLING SEQUENCE:
;	CALLS #0,W^ERLBUF_DUMP
;
; INPUT PARAMETERS:
;	FLAG bit 0 = 0 for no errors logged
;	FLAG bit 0 = 1 for errors logged
;	if errors logged then buffer ERLB must contain legal format errors
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

ERLBUF_DUMP:
	.WORD	^M<R2,R3,R4>
	BLBC	FLAG,30$	; br if no errors to report
	MOVAL	ERLB,R2		; set up buffer pointer
10$:
	TSTL	(R2)		; any more errors?
	BEQL	30$		; br if not
	MOVZBL	(R2)+,R3	; get the longword count
	MOVL	R3,R4		; and save it
20$:
	PUSHL	(R2)+		; push a parameter
	SOBGTR	R3,20$		; and push them all
	CALLS	R4,W^PRINT_FAIL	; print the failure
	BRB	10$		; do the next one
30$:
	MOVAL	ERLB,ELBP	; reset the buffer pointer
	CLRL	W^ERLB		; set fresh terminater
	RET			; bail out
.PAGE
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	20$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
20$:
	
	$PUTMSG_S W^MSGVEC			; print the message
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
USERH1:
USERH3:
	.WORD	0
	MOVAL	W^UM,W^MODE		; set the mode string
	BRB	CEP
SUPERH1:
SUPERH3:
	.WORD	0
	MOVAL	W^SM,W^MODE		; set the mode string
	BRB	CEP
EXECH1:
EXECH3:
	.WORD	0
	MOVAL	W^EM,W^MODE		; set the mode string
CEP:
	$FAO_S	W^CS4,W^MESSAGEL,W^MSGL,MODE,#TEST_MOD_NAME ; format the error string
	$PUTMSG_S W^MSGVEC		; print the message
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR ; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE ; set severity code
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET
.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSS43
