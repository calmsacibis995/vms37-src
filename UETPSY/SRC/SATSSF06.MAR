	.TITLE	SATSSF06 - SATS SYSTEM SERVICE TESTS  (FAILING S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	THE SATSSF06 MODULE TESTS THE EXECUTION OF CERTAIN
; VMS SYSTEM SERVICES, INVOKED IN SUCH A WAY AS TO EXPECT FAILING
; STATUS CODES. THE SYSTEM SERVICES TESTED AND THE STATUS CODES
; EXPECTED ARE SUMMARIZED AS ARGUMENTS TO THE TESTSERV MACROS
; WHICH APPEAR NEAR THE END OF THIS LISTING. SUCCESSFUL STATUS
; CODES ARE TESTED IN OTHER MODULES.
;
;
; ENVIRONMENT:	USER MODE IMAGE; NEEDS CMKRNL PRIVILEGE,
;		DYNAMICALLY ACQUIRES OTHER PRIVILEGES, AS NEEDED.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: MMM, 1978
;	  PAUL D. FAY (DISPSERV & TESTSERV MACROS)
;
; MODIFIED BY:
;
;		VERSION 1.50 : 25-MAY-79
;
; 01  PJT  08/31/79	Changed PHD, PCB, and STS assignments to
;			reference the system definitions.
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PRVDEF				; SYMBOL DEFS FOR PRIVILEGES
	$UETPDEF			; UETP MSG CODE DEFINITIONS
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> 
					; DEFINE UETP$_TEXT
	$DIBDEF				; DEFINE DEVICE INFO BLOCK OFFSETS
	$PHDDEF				; PROCESS HEADER DEFINITION
	$PCBDEF				; PROCESS CONTROL BLOCK DEFINITION
	$STSDEF				; STATUS DEFINITION
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
WARNING		= 0			; WARNING SEVERITY VALUE FOR MSGS
SUCCESS		= 1			; SUCCESS SEVERITY VALUE FOR MSGS
ERROR		= 2			; ERROR SEVERITY VALUE FOR MSGS
INFO		= 3			; INFORMATIONAL SEV VALUE FOR MSGS
SEVERE		= 4			; SEVERE (FATAL) SEV VALUE FOR MSGS
TCG_NO		=  0			; INITIALIZE TEST CASE GROUP NUMBER
GRP_TOTAL	=  0			; INITIALIZE TEST CASE GROUP TOTAL
R0_THRU_SP	= ^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP>
DETFLAG		= 64			; EVENT FLAG NO. FOR DETACHED PROC
PIDADR_FEX10	= 1			; PIDADR ARG FOR FORCEX (LOCATION 1)
DESBLK_DEH10	= 0			; DESBLK ARG FOR DCLEXH (LOCATION 0)
PIDADR_SPR10	= 1			; PIDADR ARG FOR SETPRI (LOCATION 1)
PRVPRI_SPR40	= 1			; PRVPRI ARG FOR SETPRI (LOCATION 1)
;
; OWN STORAGE:
;
	.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
REG_COMP_MASK:	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP> ! ^X8000 -
					; REG COMPARE MASK (HIGH-ORDER ... 
					; ... BIT MUST BE ON
ERR_MSG_FAOCTL:	STRING	I,<!/!AC!1ZB!1ZB: REGISTER !2UW CONTENTS ALTERED>, -
		<;  BEFORE SERVICE CALL: !8XL   AFTER SERVICE CALL: !8XL>
TEST_MOD_NAME:	STRING	C,<SATSSF06>	; TEST MODULE NAME
TEST_MOD_BEG:	STRING	C,<begun>	; DISPOSITION FIELD OF TEST MOD MSG
TEST_MOD_SUCC:	STRING	C,<successful>	; DISPOSITION FIELD OF TEST MOD MSG
TEST_MOD_FAIL:	STRING	C,<failed>	; DISPOSITION FIELD OF TEST MOD MSG
TEST_MOD_NAME_D: STRING	I,<SATSSF06>	; TEST MODULE NAME DESCRIPTOR
TTNAME:     	STRING  I,<TT>		; TERMINAL LOGICAL NAME
INADR:		.LONG	NOACCESS,NOACCESS ; PAGE ADDRESS OF NOACCESS PSECT
PROT:		.LONG	PRT$C_NA	; PROTECTION CODE FOR NOACCESS PSECT
ONES:		.LONG	-1,-1		; A QUADWORD OF 1-BITS
DETIMAGE:	STRING	I,<SYSTST$RES:SATSUT01.EXE>
					; IMAGE NAME FOR DETACHED PROCESS
DETNAME:	STRING	I,<SATSSF06_DET> ; PRCNAM & MBOX NAME FOR DET PROC
PRCNAM_FEX29	= DETNAME		; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_SPN16	= DETNAME		; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPR29	= DETNAME		; PRCNAM ARGUMENT FOR SETPRI
PRCNAM_FEX:	STRING	I,<SATSSF06>	; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_FEX24:	.LONG	1		; PRCNAM ARGUMENT FOR FORCEX
		.ADDRESS NOACCESS	; ......
PRCNAM_FEX26:	STRING	I,<SFFEX26>	; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_FEX27:	.LONG	0		; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_FEX28:	STRING	I,<SIXTEEN CHARS$$$> 
					; PRCNAM ARGUMENT FOR FORCEX
CODE_FEX:	.LONG	5		; CODE ARGUMENT FOR FORCEX
DESBLK_DEH11:				; DESBLK ARGUMENT FOR DCLEXH
		.BLKQ	1		; EXIT CONTROL BLOCK .....
		.LONG	1		; ..... # OF ARGUMENTS
		.ADDRESS EMPTY		; ADDRESS OF FIELD FOR EXIT REASON
PRCNAM_SPN:	STRING	I,<PRCNAM_SPN>	; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPN14:	.LONG	1		; PRCNAM ARGUMENT FOR SETPRN
		.ADDRESS NOACCESS 	; .......
PRCNAM_SPN17:	.LONG	0		; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPN18:	STRING	I,<SIXTEEN CHARS$$$> ; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPR:	STRING	I,<SATSSF06>	; PRCNAM ARGUMENT FOR SETPRI
PRCNAM_SPR24:	.LONG	1		; PRCNAM ARGUMENT FOR SETPRI
		.ADDRESS NOACCESS	; ......
PRCNAM_SPR26:	STRING	I,<SFSPR26>	; PRCNAM ARGUMENT FOR SETPRI
PRCNAM_SPR27:	.LONG	0		; PRCNAM ARGUMENT FOR SETPRI
PRCNAM_SPR28:	STRING	I,<SIXTEEN CHARS$$$> 
					; PRCNAM ARGUMENT FOR SETPRI
PRI_SPR:	.LONG	0		; PRI ARGUMENT FOR SETPRI
PRVPRI_SPR41:	.BLKL	1		; PRVPRI ARGUMENT FOR SETPRI
	.PAGE
	.PSECT	RWDATA,RD,WRT,NOEXE
TPID:		.BLKL	1		; PROCESS ID FOR THIS PROCESS
CURRENT_TC:	.BLKL	1 		; PTR TO CURRENT TEST CASE
REG_SAVE_AREA:	.BLKL	15		; SAVE AREA FOR ALL REGS (SANS PC)
MOD_MSG_CODE:	.LONG	UETP$_SATSMS	; TEST MODULE MSG CODE FOR PUTMSG
CLOB_REG_NO:	.BLKL	1		; CLOBBERED REG NO (FOR FAO ERR MSG)
REG_BEFORE_SS:	.BLKL	1		; REG CONTENTS BEFORE S.S. 
					; ... (FOR FAO ERROR MSG)
REG_AFTER_SS:	.BLKL	1		; REG CONTENTS AFTER S.S. 
					; ... (FOR FAO ERROR MSG)
$$TSTN$$:	STRING	C,<  SF   >	; ASCII PORTION OF TEST CASE NAME
TMN_ADDR:	.ADDRESS TEST_MOD_NAME	; ADDR OF TEST MOD NAME FOR FAO
TMD_ADDR:	.ADDRESS TEST_MOD_BEG	; ADDR OF T.M. DISP FIELD FOR FAO
TS_EP:		.BLKL	1		; ENTRY PNT FOR CURR TESTSERV MACRO
RETADR:		.BLKL	2		; RETURN LONGWORDS FOR SETPRT
PRVPRT:		.BLKB	1		; PROT RETURN BYTE FOR SETPRT
PRIVMASK:	.BLKQ	1		; ADDR OF PRIVILEGE MASK (IN PHD)
CHM_CONT:	.BLKL	1		; CHANGE MODE CONTINUE ADDRESS
REGS:		.BLKL	5		; AREA FOR COND INDEX REGS (R2-R6)
DETUIC:		.BLKL	1		; UIC FOR DETACHED PROCESS
MBXCHAN:	.BLKL	1		; CHAN NO. FOR MBOX FOR CREATED PROC
MBXCHANINFO:	STRING	O,75		; CHANNEL INFO RETURNED BY GETCHN
MBXUNIT:	.BLKL	1		; SAVE AREA FOR MAILBOX UNIT NUMBER
MBXBUFF:	STRING	O,120		; MAILBOX BUFFER FOR CREATED PROC
PIDADR_FEX:	.BLKL	1		; PIDADR ARGUMENT FOR FORCEX
PIDADR_FEX13:	.BLKL	1		; PIDADR ARGUMENT FOR FORCEX
PIDADR_FEX14:	.BLKL	1		; PIDADR ARGUMENT FOR FORCEX
DESBLK_DEH:				; DESBLK ARGUMENT FOR DCLEXH
		.BLKQ	1		; EXIT CONTROL BLOCK .....
		.LONG	1		; ..... # OF ARGUMENTS
		.ADDRESS .		; ADDRESS OF FIELD FOR EXIT REASON
PIDADR_SPR:	.BLKL	1		; PIDADR ARGUMENT FOR SETPRI
PIDADR_SPR13:	.BLKL	1		; PIDADR ARGUMENT FOR SETPRI
PIDADR_SPR14:	.BLKL	1		; PIDADR ARGUMENT FOR SETPRI
PRVPRI_SPR:	.BLKL	1		; PRVPRI ARGUMENT FOR SETPRI
	.PAGE
	.PSECT	SATS_ACCVIO_1,RD,WRT,NOEXE,PAGE
EMPTY:		.BLKB	512	; RESERVE A PAGE OF SPACE
;
; + 
; ******************************************************************
; *                                                                *
; * 	THE ORDER OF STATEMENTS IN THIS PSECT IS CRITICAL.         *
; *	DO NOT RE-ARRANGE THE VARIABLES. CONSULT SATS              *
; *	FUNCTIONAL SPECIFICATION FOR A DESCRIPTION OF THE USE      *
; *	OF THE EMPTY PSECT (AND ITS COMPANION PSECT, NOACCESS).    *
; *                                                                *
; ******************************************************************
; -
;
; TYPE AAAAA_SSSX1 (TYPE AAAAA_SSSX2 IF NOT DESC) GO HERE:
PIDADR_FEX12	= . - 1		; PIDADR ARGUMENT FOR FORCEX (LAST BYTE IN PAGE)
PRCNAM_FEX21	= . - 1		; PRCNAM ARGUMENT FOR FORCEX (LAST BYTE IN PAGE)
DESBLK_DEH12	= . - 1		; DESBLK ARGUMENT FOR DCLEXH (LAST BYTE IN PAGE)
PRCNAM_SPN11	= . - 1		; PRCNAM ARGUMENT FOR SETPRN (LAST BYTE IN PAGE)
PIDADR_SPR12	= . - 1		; PIDADR ARGUMENT FOR SETPRI (LAST BYTE IN PAGE)
PRCNAM_SPR21	= . - 1		; PRCNAM ARGUMENT FOR SETPRI (LAST BYTE IN PAGE)
PRVPRI_SPR42	= . - 1		; PRVPRI ARGUMENT FOR SETPR (LAST BYTE IN PAGE)
		. = . - 13	; ALLOW ROOM FOR STRING DESCRIPTOR
; TYPE AAAAA_SSSX5 GO HERE:
PRCNAM_FEX25:			; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_SPN15:			; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPR25:			; PRCNAM ARGUMENT FOR SETPRI
		.LONG	6	; STRING LENGTH (WILL CROSS PSECT BOUNDARY)
		.ADDRESS .+4	; STRING ADDRESS
; TYPE AAAAA_SSSX3 GO HERE:
PRCNAM_FEX23:			; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_SPN13:			; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPR23:			; PRCNAM ARGUMENT FOR SETPRI
		.BLKB	1	; LOW-ORDER BYTE OF STRING LENGTH
; TYPE AAAAA_SSSX2 GO HERE:
PRCNAM_FEX22:			; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_SPN12:			; PRCNAM ARGUMENT FOR SETPRN
PRCNAM_SPR22:			; PRCNAM ARGUMENT FOR SETPRI
		.BLKL	1	; STRING LENGTH
;
;
;
;
	.PSECT	SATS_ACCVIO_2,RD,WRT,NOEXE,PAGE
NOACCESS:	.BLKB	512	; RESERVE A PAGE OF SPACE
		. = . - 512	; RETURN LOC CTR TO BEGINNING OF PSECT
		.ADDRESS EMPTY	; ADDRESS OF ACCESSIBLE STRING
		.ADDRESS EMPTY/^X100 ; ADDRESS OF ACCESSIBLE STRING
;+
; *** NOTE -- DO NOT CHANGE LOCATION OR SEQUENCE OF ABOVE STATEMENTS!
; ***         THIS PSECT (NOACCESS) MUST APPEAR IN MEMORY IMMEDIATELY
; ***         FOLLOWING THE EMPTY PSECT. PSECT NAMES AND OPTIONS WILL BE 
; ***         CHOSEN TO FORCE THE DESIRED PSECT ORDERING.
;-
;
;
;
;
PIDADR_FEX11:	.LONG	0	; PIDADR ARGUMENT FOR FORCEX
PRCNAM_FEX20:	STRING	I,<SFFEX20> ; PRCNAM ARGUMENT FOR FORCEX
PRCNAM_SPN10:	STRING	I,<SFSPN10> ; PRCNAM ARGUMENT FOR SETPRN
PIDADR_SPR11:	.LONG	0	; PIDADR ARGUMENT FOR SETPRI
PRCNAM_SPR20:	STRING	I,<SFSPR20> ; PRCNAM ARGUMENT FOR SETPRI
	.PSECT	SATSSF06,RD,WRT,EXE,LONG
	.PAGE
	.SBTTL	SATSSF06
;++
; FUNCTIONAL DESCRIPTION:
;
;		AFTER PERFORMING SOME INITIAL HOUSEKEEPING, SUCH AS
; PRINTING THE MODULE BEGIN MESSAGE AND ACQUIRING ALL PRIVILEGES,
; THE SATSSF06 ROUTINE EXECUTES THE TEST_SERV_EXEC MACRO TO RUN
; ALL TEST CASES. WHEN THE MACRO COMPLETES ITS EXECUTION, SATSSF06
; PRINTS A TEST MODULE SUCCESS OR FAIL MESSAGE AND EXITS TO THE
; OPERATING SYSTEM. TEST_SERV_EXEC CALLS THE TC_CONTROL/TESTSERV
; CO-ROUTINE PAIR ONCE PER TEST CASE GROUP TO EXECUTE ALL TEST
; CASES IN THAT GROUP. EACH TEST CASE GROUP IS DEFINED BY BOUNDING
; ITS TEST CASES WITH A TC_GROUP MACRO BEFORE THE FIRST TEST CASE
; AND A TCEND MACRO AFTER THE LAST ONE. THE TEST CASES THEMSELVES
; ARE DEFINED WITHIN THESE BOUNDS BY PRECEDING EACH WITH A
; NEXT_TEST_CASE MACRO. TC_CONTROL/TESTSERV EXECUTES THE CODE 
; FOLLOWING EACH NEXT_TEST_CASE MACRO IMMEDIATELY BEFORE ISSUING
; THE SYSTEM SERVICE AS REQUESTED IN THE TESTSERV MACRO. TC_CONTROL/
; TESTSERV ALSO CHECKS THE RESULTS OF THE SERVICE WITH RESPECT
; TO ITS EXPECTED STATUS CODE AND PRINTS ANY REQUIRED FAILURE
; MESSAGES FOR THE TEST CASE. THE CODE APPEARING AFTER EACH
; NEXT_TEST_CASE MACRO IS MERELY TO SET UP CONDITIONS REQUIRED
; FOR THE SYSTEM SERVICE AND TO CLEAN UP ANY RESOURCES ACQUIRED
; BY THE PREVIOUS TEST CASE.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSF06  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	MESSAGES TO SYS$OUTPUT ARE THE ONLY OUTPUT FROM SATSSF06.
;	THEY ARE OF THE FORM:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSF06 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSF06 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSF06 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	THE SATSSF06 ROUTINE TERMINATES WITH A $EXIT TO THE
;	OPERATING SYSTEM WITH A STATUS CODE DEFINED BY UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	NONE
;
;--



SATSSF06:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
					; ENTRY MASK
	$WAKE_S  TPID			; GET PID OF THIS PROCESS
	$HIBER_S			; UNDO WAKE
	$SETPRN_S TEST_MOD_NAME_D 	; SET PROCESS NAME
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE BEGIN MSG
	MOVAL	TEST_MOD_SUCC,TMD_ADDR	; ASSUME END MSG WILL SHOW SUCCESS
	INSV	#SUCCESS,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR SUCCESS
	MODE	TO,10$,KRNL,NOREGS 	; KERNEL MODE TO ACCESS PHD
	MOVL	@#CTL$GL_PHD,R9		; GET PROCESS HEADER ADDRESS
	MOVAL	PHD$Q_PRIVMSK(R9),PRIVMASK ; GET PRIV MASK ADDRESS
	MODE	FROM,10$		; GET BACK TO USER MODE
	PRIV	ADD,ALL			; GET ALL PRIVILEGES
	$CREMBX_S CHAN=MBXCHAN, LOGNAM=DETNAME, - 
		  MAXMSG=#120, PROMSK=#0, BUFQUO=#240
					; GET MAILBOX FOR PROCESS
	$GETCHN_S CHAN=MBXCHAN, PRIBUF=MBXCHANINFO 
					; GET CHAN INFO (UNIT NUMBER)
	MOVZWL	MBXCHANINFO+8+DIB$W_UNIT,MBXUNIT 
					; SAVE MAILBOX UNIT NUMBER
	MODE	TO,20$,KRNL,NOREGS 	; KERNEL MODE TO ACCESS PCB
	MOVL	@#SCH$GL_CURPCB,R9 	; GET CURRENT PCB ADDRESS
	MOVL	PCB$L_UIC(R9),DETUIC 	; PICK UP UIC FROM PCB
	MODE	FROM,20$		; ... AND GET BACK TO USER MODE
	$CREPRC_S IMAGE=DETIMAGE, PRCNAM=DETNAME, -
		  UIC=DETUIC, MBXUNT=MBXUNIT
					; CREATE DETACHED PROC WITH SAME UIC
	DISPSERV			; SET UP DISPLAY INFO FOR TESTSERV
	$SETPRT_S INADR=INADR, RETADR=RETADR, -
		  PROT=PROT, PRVPRT=PRVPRT
					; SET NOACCESS PSECT ...
					; ... FOR NO USER ACCESS
	BRW	EXECUTE			; GO EXECUTE ALL TEST CASES
	TC_GROUP	FEX,1,TS1
;
	NEXT_TEST_CASE	SFFEX10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX10
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_FEX10
; *
; *  INPUT CONDITIONS:
; *	PIDADR FIELD AT LOCATION 1
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFFEX11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX11
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_FEX11
; *
; *  INPUT CONDITIONS:
; *	PIDADR FIELD IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFFEX12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX12
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_FEX12
; *
; *  INPUT CONDITIONS:
; *	PIDADR FIELD BEGINS IN ACCESSIBLE PSECT, ENDS
; *	  IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFFEX13
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX13
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_FEX13
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS ID
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NONEXPR
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVL	TPID,PIDADR_FEX13 ; GET A VALID PID
	CVTBW	#-1,PIDADR_FEX13  ; MAKE IT INVALID
;
	NEXT_TEST_CASE	SFFEX14
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX14
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_FEX14
; *
; *  INPUT CONDITIONS:
; *	VALID, NON-EXISTENT PROCESS ID
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NONEXPR
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVL	TPID,PIDADR_FEX14 ; GET AN EXISTENT PID
	MOVW	#6000,PIDADR_FEX14+2 ; MAKE IT NON-EXISTENT
;
	NEXT_TEST_CASE	SFFEX20
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX20
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX20
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR LENGTH FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	NEXT_TEST_CASE	SFFEX21
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX21
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX21
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR LENGTH FIELD BEGINS IN
; *	  ACCESSIBLE PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	NEXT_TEST_CASE	SFFEX22
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX22
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX22
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR ADDRESS FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
	MOVZBL	#3,PRCNAM_FEX22	; ESTABLISH PRCNAM STRING LENGTH
;
	NEXT_TEST_CASE	SFFEX23
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX23
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX23
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR ADDRESS FIELD BEGINS IN
; *	  ACCESSIBLE PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
	MOVZBL	#3,PRCNAM_FEX23	; ESTABLISH PRCNAM STRING LENGTH
;
	NEXT_TEST_CASE	SFFEX24
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX24
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX24
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	TCEND
	TC_GROUP	FEX,2,TS2
;
	NEXT_TEST_CASE	SFFEX25
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX25
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX25
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING BEGINS IN ACCESSIBLE PSECT,
; *	  ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	NEXT_TEST_CASE	SFFEX26
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX26
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX26
; *
; *  INPUT CONDITIONS:
; *	NON-EXISTENT PROCESS NAME
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NONEXPR
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	NEXT_TEST_CASE	SFFEX27
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX27
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX27
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS NAME (LENGTH 0)
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVLOGNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	NEXT_TEST_CASE	SFFEX28
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX28
; *
; *  SYSTEM SERVICE:		FORCEX

; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX28
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS NAME (LENGTH 16)
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVLOGNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	NEXT_TEST_CASE	SFFEX29
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFFEX29
; *
; *  SYSTEM SERVICE:		FORCEX
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_FEX29
; *
; *  INPUT CONDITIONS:
; *	FORCEX ISSUED FOR EXISTING PROCESS WHICH IS NOT A
; *	  SUBPROCESS OF THIS PROCESS, AND THIS PROCESS HAS
; *	  NO GROUP OR WORLD PRIVILEGE.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NOPRIV
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	PRIV	REM,GROUP	; REMOVE GROUP PRIVILEGE
	PRIV	REM,WORLD	; REMOVE WORLD PRIVILEGE
	CLRL	PIDADR_FEX	; MAKE SURE PRCNAM IS USED BY FORCEX
;
	TCEND
;
	TC_GROUP	DEH,1,TS3
;
	NEXT_TEST_CASE	SFDEH10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFDEH10
; *
; *  SYSTEM SERVICE:		DCLEXH
; *
; *  ARGUMENT UNDER TEST: 	DESBLK_DEH10
; *
; *  INPUT CONDITIONS:
; *	EXIT CONTROL BLOCK AT LOCATION 0
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NOHANDLER
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	PRIV	ADD,ALL		; GET BACK SOME PRIVS REMOVED BY PRIOR T.C.
;
	NEXT_TEST_CASE	SFDEH11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFDEH11
; *
; *  SYSTEM SERVICE:		DCLEXH
; *
; *  ARGUMENT UNDER TEST: 	DESBLK_DEH11
; *
; *  INPUT CONDITIONS:
; *	EXIT CONTROL BLOCK IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFDEH12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFDEH12
; *
; *  SYSTEM SERVICE:		DCLEXH
; *
; *  ARGUMENT UNDER TEST: 	DESBLK_DEH12
; *
; *  INPUT CONDITIONS:
; *	EXIT CONTROL BLOCK BEGINS IN ACCESSIBLE
; *	  PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	TCEND
;
	TC_GROUP	SPN,1,TS4
;
	NEXT_TEST_CASE	SFSPN10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN10
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN10
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR LENGTH FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPN11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN11
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN11
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR LENGTH FIELD BEGINS IN
; *	  ACCESSIBLE PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPN12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN12
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN12
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR ADDRESS FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVZBL	#3,PRCNAM_SPN12		; ESTABLISH STRING LENGTH
;
	NEXT_TEST_CASE	SFSPN13
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN13
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN13
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR ADDRESS FIELD BEGINS IN
; *	  ACCESSIBLE PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVZBL	#3,PRCNAM_SPN13		; ESTABLISH STRING LENGTH
;
	NEXT_TEST_CASE	SFSPN14
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN14
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN14
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	TCEND
	TC_GROUP	SPN,2,TS5
;
	NEXT_TEST_CASE	SFSPN15
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN15
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN15
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING BEGINS IN ACCESSIBLE PSECT,
; *	  ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPN16
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN16
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN16
; *
; *  INPUT CONDITIONS:
; *	SET PROCESS NAME TO THAT ALREADY IN EXISTENCE
; *	  FOR ANOTHER PROCESS WITHIN THIS GROUP.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	DUPLNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPN17
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN17
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN17
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS NAME (LENGTH 0)
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVLOGNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPN18
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPN18
; *
; *  SYSTEM SERVICE:		SETPRN
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPN18
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS NAME (LENGTH 16)
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVLOGNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	TCEND
	TC_GROUP	SPR,1,TS6
;
	NEXT_TEST_CASE	SFSPR10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR10
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_SPR10
; *
; *  INPUT CONDITIONS:
; *	PIDADR FIELD AT LOCATION 1
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPR11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR11
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_SPR11
; *
; *  INPUT CONDITIONS:
; *	PIDADR FIELD IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPR12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR12
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_SPR12
; *
; *  INPUT CONDITIONS:
; *	PIDADR FIELD BEGINS IN ACCESSIBLE PSECT, ENDS
; *	  IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPR13
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR13
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_SPR13
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS ID
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NONEXPR
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVL	TPID,PIDADR_SPR13 ; GET A VALID PID
	CVTBW	#-1,PIDADR_SPR13  ; MAKE IT INVALID
;
	NEXT_TEST_CASE	SFSPR14
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR14
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PIDADR_SPR14
; *
; *  INPUT CONDITIONS:
; *	VALID, NON-EXISTENT PROCESS ID
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NONEXPR
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVL	TPID,PIDADR_SPR14 ; GET AN EXISTENT PID
	MOVW	#6000,PIDADR_SPR14+2 ; MAKE IT NON-EXISTENT
;
	NEXT_TEST_CASE	SFSPR20
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR20
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR20
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR LENGTH FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR21
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR21
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR21
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR LENGTH FIELD BEGINS IN
; *	  ACCESSIBLE PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR22
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR22
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR22
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR ADDRESS FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
	MOVZBL	#3,PRCNAM_SPR22	; ESTABLISH PRCNAM STRING LENGTH
;
	NEXT_TEST_CASE	SFSPR23
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR23
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR23
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING DESCRIPTOR ADDRESS FIELD BEGINS IN
; *	  ACCESSIBLE PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
	MOVZBL	#3,PRCNAM_SPR23	; ESTABLISH PRCNAM STRING LENGTH
;
	NEXT_TEST_CASE	SFSPR24
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR24
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR24
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR40
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR40
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRVPRI_SPR40
; *
; *  INPUT CONDITIONS:
; *	PREVIOUS PRIORITY FIELD AT LOCATION 1
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	PRIV	ADD,SETPRI	; GET SETPRI PRIVILEGE BACK (FROM PREV T.C.)
;
	NEXT_TEST_CASE	SFSPR41
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR41
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRVPRI_SPR41
; *
; *  INPUT CONDITIONS:
; *	PREVIOUS PRIORITY FIELD IN
; *	  NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSPR42
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR42
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRVPRI_SPR42
; *
; *  INPUT CONDITIONS:
; *	PREVIOUS PRIORITY FIELD BEGINS IN ACCESSIBLE
; *	  PSECT, ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	TCEND
	TC_GROUP	SPR,2,TS7
;
	NEXT_TEST_CASE	SFSPR25
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR25
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR25
; *
; *  INPUT CONDITIONS:
; *	PRCNAM STRING BEGINS IN ACCESSIBLE PSECT,
; *	  ENDS IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO

; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR26
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR26
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR26
; *
; *  INPUT CONDITIONS:
; *	NON-EXISTENT PROCESS NAME
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NONEXPR
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR27
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR27
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR27
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS NAME (LENGTH 0)
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVLOGNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR28
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR28
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR28
; *
; *  INPUT CONDITIONS:
; *	INVALID PROCESS NAME (LENGTH 16)
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVLOGNAM
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	NEXT_TEST_CASE	SFSPR29
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSPR29
; *
; *  SYSTEM SERVICE:		SETPRI
; *
; *  ARGUMENT UNDER TEST: 	PRCNAM_SPR29
; *
; *  INPUT CONDITIONS:
; *	SETPRI ISSUED FOR EXISTING PROCESS WHICH IS NOT A
; *	  SUBPROCESS OF THIS PROCESS, AND THIS PROCESS HAS
; *	  NO GROUP OR WORLD PRIVILEGE.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	NOPRIV
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	PRIV	REM,GROUP	; REMOVE GROUP PRIVILEGE
	PRIV	REM,WORLD	; REMOVE WORLD PRIVILEGE
	CLRL	PIDADR_SPR	; MAKE SURE PRCNAM IS USED BY SETPRI
;
	TCEND
TS1:
	TESTSERV	FORCEX,ERR,SATS,				-
                                          				-
	   <1,PIDADR_FEX,						-
	        	PIDADR_FEX10,ACCVIO,	-  ; SFFEX10
	        	PIDADR_FEX11,ACCVIO,	-  ; SFFEX11
	        	PIDADR_FEX12,ACCVIO,	-  ; SFFEX12
	        	PIDADR_FEX13,NONEXPR,	-  ; SFFEX13
	        	PIDADR_FEX14,NONEXPR,	-  ; SFFEX14
                                                  >,			-
                                          				-
	   <1,PRCNAM_FEX,						-
	        	PRCNAM_FEX20,ACCVIO,	-  ; SFFEX20
	        	PRCNAM_FEX21,ACCVIO,	-  ; SFFEX21
	        	PRCNAM_FEX22,ACCVIO,	-  ; SFFEX22
	        	PRCNAM_FEX23,ACCVIO,	-  ; SFFEX23
	        	PRCNAM_FEX24,ACCVIO,	-  ; SFFEX24
                                                  >,			-
                                          				-
	   <1,CODE_FEX,						-
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS2:
	TESTSERV	FORCEX,ERR,SATS,				-
                                          				-
	   <1,PIDADR_FEX,						-
                                                  >,			-
                                          				-
	   <1,PRCNAM_FEX,						-
	        	PRCNAM_FEX25,ACCVIO,	-  ; SFFEX25
	        	PRCNAM_FEX26,NONEXPR,	-  ; SFFEX26
	        	PRCNAM_FEX27,IVLOGNAM,	-  ; SFFEX27
	        	PRCNAM_FEX28,IVLOGNAM,	-  ; SFFEX28
	        	PRCNAM_FEX29,NOPRIV,	-  ; SFFEX29
                                                  >,			-
                                          				-
	   <1,CODE_FEX,						-
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS3:
	TESTSERV	DCLEXH,ERR,SATS,				-
                                          				-
	   <1,DESBLK_DEH,						-
	        	DESBLK_DEH10,NOHANDLER,	-  ; SFDEH10
	        	DESBLK_DEH11,ACCVIO,	-  ; SFDEH11
	        	DESBLK_DEH12,ACCVIO,	-  ; SFDEH12
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS4:
	TESTSERV	SETPRN,ERR,SATS,				-
                                          				-
	   <1,PRCNAM_SPN,						-
	        	PRCNAM_SPN10,ACCVIO,	-  ; SFSPN10
	        	PRCNAM_SPN11,ACCVIO,	-  ; SFSPN11
	        	PRCNAM_SPN12,ACCVIO,	-  ; SFSPN12
	        	PRCNAM_SPN13,ACCVIO,	-  ; SFSPN13
	        	PRCNAM_SPN14,ACCVIO,	-  ; SFSPN14
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS5:
	TESTSERV	SETPRN,ERR,SATS,				-
                                          				-
	   <1,PRCNAM_SPN,						-
	        	PRCNAM_SPN15,ACCVIO,	-  ; SFSPN15
	        	PRCNAM_SPN16,DUPLNAM,	-  ; SFSPN16
	        	PRCNAM_SPN17,IVLOGNAM,	-  ; SFSPN17
	        	PRCNAM_SPN18,IVLOGNAM,	-  ; SFSPN18
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS6:
	TESTSERV	SETPRI,ERR,SATS,				-
                                          				-
	   <1,PIDADR_SPR,						-
	        	PIDADR_SPR10,ACCVIO,	-  ; SFSPR10
	        	PIDADR_SPR11,ACCVIO,	-  ; SFSPR11
	        	PIDADR_SPR12,ACCVIO,	-  ; SFSPR12
	        	PIDADR_SPR13,NONEXPR,	-  ; SFSPR13
	        	PIDADR_SPR14,NONEXPR,	-  ; SFSPR14
                                                  >,			-
                                          				-
	   <1,PRCNAM_SPR,						-
	        	PRCNAM_SPR20,ACCVIO,	-  ; SFSPR20
	        	PRCNAM_SPR21,ACCVIO,	-  ; SFSPR21
	        	PRCNAM_SPR22,ACCVIO,	-  ; SFSPR22
	        	PRCNAM_SPR23,ACCVIO,	-  ; SFSPR23
	        	PRCNAM_SPR24,ACCVIO,	-  ; SFSPR24
                                                  >,			-
                                          				-
	   <1,PRI_SPR,						-
                                                  >,			-
                                          				-
	   <1,PRVPRI_SPR,						-
	        	PRVPRI_SPR40,ACCVIO,	-  ; SFSPR40
	        	PRVPRI_SPR41,ACCVIO,	-  ; SFSPR41
	        	PRVPRI_SPR42,ACCVIO,	-  ; SFSPR42
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS7:
	TESTSERV	SETPRI,ERR,SATS,				-
                                          				-
	   <1,PIDADR_SPR,						-
                                                  >,			-
                                          				-
	   <1,PRCNAM_SPR,						-
	        	PRCNAM_SPR25,ACCVIO,	-  ; SFSPR25
	        	PRCNAM_SPR26,NONEXPR,	-  ; SFSPR26
	        	PRCNAM_SPR27,IVLOGNAM,	-  ; SFSPR27
	        	PRCNAM_SPR28,IVLOGNAM,	-  ; SFSPR28
	        	PRCNAM_SPR29,NOPRIV,	-  ; SFSPR29
                                                  >,			-
                                          				-
	   <1,PRI_SPR,						-
                                                  >,			-
                                          				-
	   <1,PRVPRI_SPR,						-
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
	.SBTTL	EXECUTE & CLEANUP
EXECUTE:
	TEST_SERV_EXEC			; EXECUTE ALL T. CASES IN ALL GROUPS
CLEANUP:
	PRIV	ADD,ALL			; ENSURE THAT ALL PRIVS ARE PRESENT
	$WAKE_S	PRCNAM=DETNAME		; WAKE DETACHED PROCESS ...
					; ... TO ALLOW HIS EXIT
	$QIOW_S	CHAN=MBXCHAN, FUNC=#IO$_READVBLK, -
		P1=MBXBUFF+8, P2=MBXBUFF
					; ... AND WAIT 4 PROC TO BE DELETED
	$DELMBX_S  MBXCHAN		; DELETE TERMINATION MAILBOX
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE END MSG
	INSV	#1,#STS$V_INHIB_MSG,#1,MOD_MSG_CODE 
					; INHIBIT PRINTING
	$EXIT_S	MOD_MSG_CODE		; EXIT TO OP SYS WITH MSG CODE
	.PAGE
	.SBTTL	TC_CONTROL
;++
; FUNCTIONAL DESCRIPTION:
;
;		THE TC_CONTROL SUBROUTINE IS CALLED BY THE TEST_SERV_EXEC
; MACRO TO EXECUTE A GROUP OF TEST CASES. A GROUP IS DEFINED BY A TC_GROUP
; MACRO. FOR EACH TC_GROUP MACRO, THERE IS A CORRESPONDING TESTSERV MACRO.
; TESTSERV CONTAINS CODE TO EXECUTE SYSTEM SERVICES AND CHECK THE RETURNED
; STATUS CODE VALUES. TESTSERV ARGUMENTS ARE CODED TO SPECIFY ALL THE SYSTEM
; SERVICE ARGUMENT VALUES AND THE EXPECTED STATUS CODE FOR EACH TEST CASE
; DEFINED BY A NEXT_TEST_CASE MACRO WITHIN THE GROUP. TC_CONTROL USES A
; CO-ROUTINE INTERFACE TO ENTER THE CODE OF THE APPROPRIATE TESTSERV MACRO
; IN VARIOUS PLACES. THE FIRST ENTRY OCCURS ONCE PER GROUP TO ALLOW TESTSERV
; TO DO SOME INITIALIZATION. THEN TWO ENTRIES ARE MADE FOR EACH TEST CASE IN
; THE GROUP. THE FIRST ALLOWS TESTSERV TO ISSUE THE SUBJECT SYSTEM SERVICE.
; THE SECOND ENTRY FOR THE TEST CASE CAUSES TESTSERV TO CHECK THE RETURNED
; STATUS CODE, PRINTING A FAILURE MESSAGE IF IT IS NOT THE EXPECTED CODE.
; IF THERE ARE NO MORE TEST CASES IN THE CURRENT GROUP, TESTSERV (NOT TC_CONTROL)
; RETURNS DIRECTLY TO TEST_SERV_EXEC (RSB ACTUALLY ISSUED IN TS_CLEANUP MACRO)
; FROM THIS SECOND ENTRY; OTHERWISE, CONTROL RETURNS TO TC_CONTROL WHICH
; IN TURN ENTERS TESTSERV AGAIN FOR THE NEXT TEST CASE. THE FAILURE OF A
; TEST CASE DOES NOT CAUSE TERMINATION OF THE TEST MODULE.
;
; CALLING SEQUENCE:
;
;	BSBW TC_CONTROL (ISSUED WITHIN THE TEST_SERV_EXEC MACRO)
;			(RSB IS ISSUED WITHIN THE TS_CLEANUP MACRO)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	ARGUMENTS SPECIFIED ON EACH TESTSERV MACRO MAY BE VIEWED AS
;	INPUTS, SINCE TC_CONTROL AND TESTSERV ACT AS CO-ROUTINES.
;
; OUTPUT PARAMETERS:
;
;	SEVERITY CODE FIELD OF MOD_MSG_CODE (BITS 0,1,2) IS SET TO ERROR
;	IF ANY TEST CASE IN THE CURRENT GROUP FAILS; OTHERWISE IT REMAINS
;	SET TO SUCCESSFUL.
;
; IMPLICIT OUTPUTS:
;
;	%UETP-I-TEXT,   ERROR MESSAGES ARE WRITTEN TO SYS$OUTPUT BY
;			THE TESTSERV MACRO (CO-ROUTINE WITH TC_CONTROL)
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



TC_CONTROL:
	PUSHL	TS_EP			; PUSH TESTSERV ENTRY POINT
	JSB	@(SP)+			; ENTER TESTSERV INITIALIZATION
10$:					; PROCESS NEXT TEST CASE
	MOVB	#^A/ /,$$TSTN$$+2 	; MAKE SURE T.C. NAME HAS A BLANK
	BSBW	REG_SAVE		; SAVE REGISTERS
	JSB	@CURRENT_TC		; JUMP TO CURRENT TEST CASE
	BSBW	REG_REST		; RESTORE REGS FOR TESTSERV
	JSB	@(SP)+			; LET TESTSERV ISSUE SYSTEM SERVICE
	BSBW	REG_COMP		; COMPARE REGS TO SEE IF ...
					; ... SYSTEM SERVICE CHANGED ANY
	JSB	@(SP)+			; LET TESTSERV CHEK S.S. STATUS CODE
	CMPB	#^A/*/,$$TSTN$$+2	; HAS TESTSERV INDICATED FAILURE ?
	BNEQU	10$			; NO -- PROCESS NEXT TEST CASE
	MOVAL	TEST_MOD_FAIL,TMD_ADDR	; YES -- INDICATE FAILED IN END MSG
	INSV	#ERROR,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR ERROR
	BRB	10$			; LOOP BAK TO PROCESS NEXT TEST CASE
;
;   TC_CONTROL RETURNS TO TEST_SERV_EXEC VIA TESTSERV (IN TS_CLEANUP MACRO)
;
	.PAGE
	.SBTTL	SUBROUTINES
REG_SAVE:
;
;  *****************************************************************
;  *                                                               *
;  *  SAVES R0 THRU SP IN REG_SAVE_AREA                            *
;  *                                                               *
;  *****************************************************************
;
	PUSHR	#R0_THRU_SP		; SAVE ALL REGS ON STACK
	MOVC3	#60,(SP),REG_SAVE_AREA	; SAVE REGS (BEFORE S.S.)
	POPR	#R0_THRU_SP		; CLEAN UP STACK
	RSB				; .... AND RETURN
;
;
;
;
REG_REST:
;
;
;  *****************************************************************
;  *                                                               *
;  *  RESTORES R0 THRU SP FROM REG_SAVE_AREA                       *
;  *                                                               *
;  *****************************************************************
;
	SUBL2	#60,SP			; MOVE SP TO MAKE ROOM FOR REGS
	MOVC3	#60,REG_SAVE_AREA,(SP)	; MOVE REGS ONTO STACK FOR POP
	POPR	#R0_THRU_SP		; RESTORE ALL REGS FOR TESTSERV
	RSB				; ... AND RETURN
	.PAGE
REG_COMP:
;
;  *****************************************************************
;  *                                                               *
;  *  1) PUSHES ALL REGS ONTO STACK                                *
;  *  2) COMPARES REGISTER IMAGES FROM STACK WITH CORRESPONDING    *
;  *       IMAGES FROM REG_SAVE_AREA FOR ALL REGISTERS SPECIFIED   *
;  *       IN REG_COMP_MASK.                                       *
;  *  3) FOR EACH UNEQUAL COMPARE, AN ERROR MESSAGE IS PRINTED     *
;  *       (USING $FAO AND $OUTPUT SYSTEM SERVICES).               *
;  *  4) POPS ALL REGS OFF OF STACK                                *
;  *                                                               *
;  *****************************************************************
;
	PUSHR	#R0_THRU_SP		; SAVE ALL REGISTERS ON STACK
	MOVAL	REG_SAVE_AREA,R6 	; POINT R6 TO BEG OF ...
					; ... REGS (BEFORE S.S.)
	MOVL	SP,R4			; POINT R4 TO BEG OF
					; ... REGS (AFTER S.S.)
	CVTBL	#-1,R3			; INITIALIZE REG_COMP_MASK INDEX
REG_COMP_NEXT:
	INCL	R3			; POINT TO NEXT BIT IN MASK
	CMPB	#15,R3			; END OF THE MASK ?
	BGTRU	REG_COMP_CONT		; NO -- CONTINUE
	BRW	REG_COMP_RSB		; YES -- GO TO COMMON RETURN
REG_COMP_CONT:
	CMPL	(R6)+,(R4)+		; REG BEFORE = REG AFTER ?
	BEQLU	REG_COMP_NEXT		; YES -- LOOK FOR NEXT REG
	BBC	R3,REG_COMP_MASK,REG_COMP_NEXT
					; NO -- GET NEXT IF BIT NOT SET
	MOVL	R3,CLOB_REG_NO		; NO -- GIVE REG NUMBER TO FAO
	MOVL	-4(R6),REG_BEFORE_SS 	; GIVE "BEFORE" CONTENTS TO FAO
	MOVL	-4(R4),REG_AFTER_SS  	; GIVE "AFTER" CONTENTS TO FAO
	MOVB	#^A/*/,$$TSTN$$+2 	; GIVE FAILURE INDIC'N IN ERROR MSG
;
	$FAO_S	ERR_MSG_FAOCTL,OUTL,OUTD,$$SNAD$$,  -
		$$ASEQ$$,$$PSEQ$$,CLOB_REG_NO,REG_BEFORE_SS,REG_AFTER_SS
;
	MOVW	OUTL,OUTD		; ACTUAL OUTPUT LEN IN STRING DESC'R
	PUTMSG	<#UETP$_TEXT,#1,#OUTD>	; PRINT THE MSG
	MOVW	#OUTE-OUTB,OUTD		; GET MAX LEN BACK INTO DESCRIPTOR
	MOVB	#^A/ /,$$TSTN$$+2 	; REMOVE FAIL INDIC'N FOR NEXT MSG
	MOVAL	TEST_MOD_FAIL,TMD_ADDR	; INDICATE FAILED IN END MSG
	INSV	#ERROR,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR ERROR
	BRW	REG_COMP_NEXT		; GO LOOK FOR NEXT REG TO COMPARE
REG_COMP_RSB:
	POPR	#R0_THRU_SP		; CLEAN UP STACK
	RSB				; RETURN TO CALLER
	.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; **********************************************************
; *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE
; *	MACRO EXPANSION.
; *
; *************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSF06
