	.TITLE	SATSSF01 - SATS SYSTEM SERVICE TESTS  (FAILING S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSF01 module tests the execution of the following
; VMS system services, invoked in such a way as to expect failing
; status codes:
;		$DACEFC
;		$DLCEFC
;		$ASCEFC
;		$SETEXV
;
;
; ENVIRONMENT:	User mode image; needs CMKRNL privilege,
;		dynamically acquires other privileges, as needed.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: AUG, 1978
;	  PAUL D. FAY (DISPSERV & TESTSERV MACROS)
;
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	$PRVDEF				; privilege definitions
	$UETPDEF			; UETP message definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$PHDDEF				; process header definitions
	$PCBDEF				; PCB definitions
	$SSDEF				; SS definitions
	$STSDEF				; STS definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
PRVHND_SXV40	= 1			; page 0 address for SETEXV

.PAGE
	.SBTTL	OWN STORAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSF01/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID	/SATSSF01/		; module name
TEST_MOD_BEGIN:
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
DACEFC:
	.ASCIC	/DACEFC/
DLCEFC:
	.ASCIC	/DLCEFC/
ASCEFC:
	.ASCIC	/ASCEFC/
SETEXV:
	.ASCIC	/SETEXV/
INADR:
	.LONG	NOACCESS,NOACCESS	; page address of noaccess psect
PROT:
	.LONG	PRT$C_NA		; protection code for no access psect
NAME_DLC:
	.ASCID	/SFDLC/			; legal name string
NAME_DLC0:
	.ASCID	//			; zero length string
NAME_DLC15:
	.ASCID	/MORE THAN 15 CHARACTERS/ ; illegal string length test string
VECTOR_SXV:
	.LONG	0			; vector parameter for SETEXV
ACMODE_SXV:
	.LONG	1			; access mode param. for SETEXV
PRVHND_SXV41:
	.LONG	0			; readonly access for SETEXV
CS1:
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
EXP:
	.ASCID	\status\
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
DAC:
	$DACEFC	0			; DACEFC parameter list
DLC:
	$DLCEFC NAME_DLC0			; DLCEFC parameter list
ASC:
	$ASCEFC	0,0,0,1			; ASCEFC parameter list
SET:
	$SETEXV	VECTOR_SXV,0,ACMODE_SXV,PRVHND_SXV40 ; SETEXV parameter list
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	80
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS	BUF
SERV_NAME:
	.LONG	0			; service name pointer
	.PAGE
	.PSECT	SATS_ACCVIO_1,RD,WRT,NOEXE,PAGE
EMPTY:		.BLKB	512	; reserve a page of space
;
; + 
; ******************************************************************
; *                                                                *
; * 	THE ORDER OF STATEMENTS IN THIS PSECT IS CRITICAL.         *
; *	DO NOT RE-ARRANGE THE VARIABLES. CONSULT SATS              *
; *	FUNCTIONAL SPECIFICATION FOR A DESCRIPTION OF THE USE      *
; *	OF THE EMPTY PSECT (AND ITS COMPANION PSECT, NOACCESS).    *
; *                                                                *
; ******************************************************************
; -
;
PRVHND_SXV42	= . - 1		; prvhnd arg for SETEXV (last byte in the page)
		. = . - 13	; allow room for string descriptor
; type AAAAA_SSSX5 go here:
		.LONG	6	; string length (will cross psect boundary)
		.ADDRESS .+4	; string address
; type AAAAA_SSSX3 go here:
		.BLKB	1	; low-order byte of string length
; type AAAAA_SSSX2 go here:
		.BLKL	1	; string length
;
;
;
;
	.PSECT	SATS_ACCVIO_2,RD,WRT,NOEXE,PAGE
NOACCESS:	.BLKB	512	; reserve a page of space
		. = . - 512	; return loc ctr to beginning of psect
		.ADDRESS EMPTY	; address of accessible string
		.ADDRESS EMPTY/^X100 ; address of accessible string
;+
; *** NOTE -- DO NOT CHANGE LOCATION OR SEQUENCE OF ABOVE STATEMENTS!
; ***         THIS PSECT (NOACCESS) MUST APPEAR IN MEMORY IMMEDIATELY
; ***         FOLLOWING THE EMPTY PSECT. PSECT NAMES AND OPTIONS WILL BE 
; ***         CHOSEN TO FORCE THE DESIRED PSECT ORDERING.
;-
;
;
;
;
.PAGE
	.PSECT	SATSSF01,RD,WRT,EXE,LONG
	.SBTTL	SATSSF01
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their failure conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSF01  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSF01.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSF01 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSF01 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSF01 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSF01 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--



	TEST_START SATSSF01		; let the test begin
	$SETPRT_S INADR=W^INADR, RETADR=W^RETADR, -
		  PROT=W^PROT, PRVPRT=W^PRVPRT ; set noaccess psect
					   ; ... for no user access
.SBTTL DACEFC TESTS
;+
;
; $DACEFC tests
; test for an EFN of 0
;
;-
	MOVAL	W^DACEFC,W^SERV_NAME	; set service name
	$DACEFC_G W^DAC
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
	$DACEFC_S #0			; check _S form
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
;+
;
; test for a non-zero but less than 64 EFN
;
;-
	NEXT_TEST
	MOVL	#63,W^DAC+DACEFC$_EFN	; set EFN
	$DACEFC_G W^DAC
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
	$DACEFC_S #63			; check the _S form
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
;+
;
; test for a non-zero but greater than 127
;
;-
	NEXT_TEST
	MOVL	#128,W^DAC+DACEFC$_EFN	; set EFN
	$DACEFC_G W^DAC
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
	$DACEFC_S #128			; check _S form
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
.PAGE
.SBTTL DLCEFC TESTS
;+
;
; $DLCEFC tests
; test for a zero length cluster name
;
;-
	NEXT_TEST
	MOVAL	W^DLCEFC,W^SERV_NAME	; set service name
	$DLCEFC_G W^DLC
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
	$DLCEFC_S W^NAME_DLC0		; check the _S form
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
;+
;
; test for a non-zero but greater than 15 length cluster name
;
;-
	NEXT_TEST
	MOVAL	W^NAME_DLC15,W^DLC+DLCEFC$_NAME ; set name address parameter
	$DLCEFC_G W^DLC
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
	$DLCEFC_S W^NAME_DLC15		; check the _S form
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
;+
;
; a test for the requirement of PRMCEB privilege is not needed
; because a process, with the same UIC as the owner UIC of a
; created common EFC, can delete it without having the PRMCEB
; privilege.
;
;-
.PAGE
.SBTTL ASCEFC TESTS
;+
;
; $ASCEFC tests
; test for zero EFN
;
;-
	NEXT_TEST
	MOVAL	W^ASCEFC,W^SERV_NAME	; set service name
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
	$ASCEFC_S #0,W^NAME_DLC		; check _S form
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
;+
;
; test for non-zero but less than 64 EFN
;
;-
	NEXT_TEST
	MOVL	#63,W^ASC+ASCEFC$_EFN	; set the EFN to 63
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
	$ASCEFC_S #63,W^NAME_DLC	; check _S form
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
;+
;
; test for a non-zero but greater than 127 EFN
;
;-
	NEXT_TEST
	MOVL	#128,W^ASC+ASCEFC$_EFN	; set the EFN to 128
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_ILLEFC		; check for the correct failure
	$ASCEFC_S #128,W^NAME_DLC	; check _S form
	FAIL_CHECK SS$_ILLEFC		; check for correct failure
;+
;
; test for a legal EFN but not addressable name string
;
;-
	NEXT_TEST
	MOVL	#64,W^ASC+ASCEFC$_EFN	; legalize the EFN
	MOVAL	W^NOACCESS,W^ASC+ASCEFC$_NAME ; set illegal address for name
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
	$ASCEFC_S #64,W^NOACCESS	; check _S form
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
;+
;
; test for 0 length cluster name
;
;-
	NEXT_TEST
	MOVAL	W^NAME_DLC0,W^ASC+ASCEFC$_NAME ; set 0 length name
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
	$ASCEFC_S #64,W^NAME_DLC0	; check _S form
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
;+
;
; test for greater than 15 length cluster name
;
;-
	NEXT_TEST
	MOVAL	W^NAME_DLC15,W^ASC+ASCEFC$_NAME ; set 15 length name
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
	$ASCEFC_S #64,W^NAME_DLC15	; check _S form
	FAIL_CHECK SS$_IVLOGNAM		; check for correct failure
;+
;
; test for need to have PRMCEB privilege
;
;-
	NEXT_TEST
	MODE	TO,10$,KRNL,NOREGS	; kernal mode to access PHD
	MOVL	@#CTL$GL_PHD,R9		; get process header address
	MOVAL	PHD$Q_PRIVMSK(R9),W^PRIVMASK ; get priv mask address
	MODE	FROM,10$		; get back to user mode
	PRIV	REM,PRMCEB		; remove PRMCEB priv.
	MOVAL	W^NAME_DLC,W^ASC+ASCEFC$_NAME ; set a legal name
	PUSHL	#0			; push a dummy parameter
	CALLS	#1,W^REG_SAVE		; save the registers
	$ASCEFC_G W^ASC
	FAIL_CHECK SS$_NOPRIV		; check for correct failure
	$ASCEFC_S #64,NAME_DLC,,#1	; check _S form
	FAIL_CHECK SS$_NOPRIV		; check for correct failure
	MODE	TO,20$,KRNL,NOREGS	; kernal mode to access PHD
	MOVL	@#CTL$GL_PHD,R9		; get process header address
	MOVAL	PHD$Q_PRIVMSK(R9),W^PRIVMASK ; get priv mask address
	MODE	FROM,20$		; get back to user mode
	PRIV	ADD,PRMCEB		; return PRMCEB priv.
.PAGE
.SBTTL SETEXV TESTS
;+
;
; $SETEXV TESTS
; test for page 0 access
;
;-
	NEXT_TEST
	MOVAL	W^SETEXV,W^SERV_NAME	; set service name
	$SETEXV_G W^SET
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
	$SETEXV_S W^VECTOR_SXV,0,-
		  W^ACMODE_SXV,W^PRVHND_SXV40 ; check _S form
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
;+
;
; test for read-only psect access
;
;-
	NEXT_TEST
	MOVAL	W^PRVHND_SXV41,W^SET+SETEXV$_PRVHND
	$SETEXV_G W^SET
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
	$SETEXV_S W^VECTOR_SXV,0,-
		  W^ACMODE_SXV,W^PRVHND_SXV41 ; check _S form
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
;+
;
; test for noaccess psect protection
;
;-
	NEXT_TEST
	MOVAL	W^PRVHND_SXV42,W^SET+SETEXV$_PRVHND
	$SETEXV_G W^SET
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
	$SETEXV_S W^VECTOR_SXV,0,-
		  W^ACMODE_SXV,W^PRVHND_SXV42 ; check _S form
	FAIL_CHECK SS$_ACCVIO		; check for correct failure
	TEST_END			; end the test
.PAGE
.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,W^REGNUM		; put it in the string
	BICL2	#3,R1				; backup to register boundry
	BICL2	#3,R3
	PUSHL	W^REGNUM			; push register number
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	PUTMSG	<#UETP$_TEXT,#1,#MESSAGEL>	; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	20$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
20$:
	PUTMSG	<#UETP$_TEXT,#1,#MESSAGEL>	; print the message
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MOD_MSG_PRINT
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<W^MOD_MSG_CODE,#2,W^TMN_ADDR,W^TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
	.SBTTL	CHMRTN
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSF01
