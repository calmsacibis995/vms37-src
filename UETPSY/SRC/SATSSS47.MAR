	.TITLE	SATSSS47 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS47 module tests the execution of the following
;		VMS system services:
;
;		$SETPRV
;
; ENVIRONMENT:	User mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: OCTOBER, 1979
;
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	.LIBRARY /SYS$LIBRARY:STARLET.MLB/
	$JPIDEF				; GETJPI definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$SFDEF				; stack frame definitions
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
;
; MACROS
;
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,PAGE
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS47/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS47/		; module name
TEST_MOD_BEGIN:				; start end and fail messages
	.ASCIC	/begin/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
CS1:					; failure messages
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS5:
	.ASCID	\Mode is !AS.\
EXP:
	.ASCID	\status\
UM:					; mode messages
	.ASCID	\user\
UNEXPRVCHNG:
	.ASCID	\Unexpected privilege change.\
MSGVEC:
	.LONG	3			; PUTMSG message vector
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
SETPRV:
	.ASCIC	\SETPRV\		; SETPRV service name
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,PAGE
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG			; put it on a long word boundry
REG_SAVE_AREA:
	.BLKL	15			; register save area
R0_SAVE:
	.LONG	0			; special case save of R0
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
MODE:
	.LONG	0			; current mode string pointer
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	80
ML:
	.LONG	0			; desc. for BUF_CHECK routine
	.ADDRESS GETBUF+8
GETBUF:
	.LONG	132
	.ADDRESS .+4
	.BLKB	132
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
MSGVEC1:				; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.LONG	0
GET_LIST:
	.WORD	8
	.WORD	JPI$_CURPRIV		; GETJPI item list
	.LONG	PRIV_LIST
	.LONG	0
	.WORD	8
	.WORD	JPI$_PROCPRIV
	.LONG	PRIV_LIST+8
	.LONG	0
	.LONG	0
PRIV_LIST:
	.QUAD	0			; resultant CURPRIV
	.QUAD	0			; resultant PROCPRIV
PRIV_TEST:
	.QUAD	0			; privileges for SETPRV to set
PRIV_SAVE:
	.QUAD	0			; saved initial image privileges
	.QUAD	0			; saved initial process privileges
PRIV_MOD:
	.QUAD	0			; expected current image privileges
	.QUAD	0			; expected current process privileges
SET:
	$SETPRV	0,0,0,PRIV_TEST		; SETPRV parameter list

.PAGE
	.PSECT	SATSSS47,RD,WRT,EXE,PAGE
	.SBTTL	SATSSS47
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS47  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS47.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS47 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS47 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS47 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS47 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--

	TEST_START SATSSS47			; let the test begin
	.SBTTL SETPRV TESTS
;+
;
; $SETPRV tests
;
; test _S form with a complete default parameter list
;
;-
	MOVAL	W^SETPRV,W^SERV_NAME		; set service name
	MOVAL	W^UM,W^MODE			; set the mode
	$GETJPI_S ITMLST=W^GET_LIST		; get fresh copy of privileges
	MOVQ	W^PRIV_LIST,W^PRIV_SAVE		; save current privileges
	MOVQ	W^PRIV_LIST+8,W^PRIV_SAVE+8	; save process privileges
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SETPRV_S				; try total default
	FAIL_CHECK SS$_NORMAL			; check success
	$GETJPI_S ITMLST=W^GET_LIST		; get the current priv.
	CMPC3	#16,W^PRIV_SAVE,W^PRIV_LIST	; check for changes
	BEQL	10$				; br if OK
	PUSHAL	W^UNEXPRVCHNG			; push string variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
10$:
;+
;
; test the PRVPRV parameter _G
;
;-
	NEXT_TEST
	$SETPRV_G W^SET				; try _G with PRVPRV
	FAIL_CHECK SS$_NORMAL			; check for success
	CMPC3	#8,W^PRIV_SAVE,W^PRIV_TEST	; check for changes
	BEQL	20$				; br if OK
	PUSHAL	W^UNEXPRVCHNG			; push string variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
20$:
;+
;
; test temp clr of one priv _G
;
;-
	NEXT_TEST
	MOVQ	W^PRIV_SAVE,W^PRIV_TEST		; get current image priv.
	MOVQ	W^PRIV_SAVE,W^PRIV_MOD		; make a copy of the priv.
	CLRL	W^SET+SETPRV$_ENBFLG		; set for disable
	CLRL	W^SET+SETPRV$_PRVPRV		; disable previous priv
	MOVAL	W^PRIV_TEST,W^SET+SETPRV$_PRVADR ; set priv. address
	FFS	#0,#31,W^PRIV_TEST,R2		; find a priv
	CLRL	W^PRIV_TEST			; clear off a space to work
	INSV	#1,R2,#1,W^PRIV_TEST		; set a bit for the priv to remove
	INSV	#0,R2,#1,W^PRIV_MOD		; set expected results
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$SETPRV_G W^SET				; try _G
	FAIL_CHECK SS$_NORMAL			; check results
	$GETJPI_S ITMLST=W^GET_LIST		; get new priv.
	CMPC3	#8,W^PRIV_MOD,W^PRIV_LIST	; check the results
	BEQL	30$				; br if OK
	PUSHAL	W^UNEXPRVCHNG			; push str var
	CALLS	#1,W^PRINT_FAIL			; print the failure
30$:
;+
;
; test temp adding of one priv _S
;
;-
	NEXT_TEST
	MOVQ	W^PRIV_LIST,W^PRIV_MOD		; save a copy of the privs
	MOVQ	W^PRIV_LIST,W^PRIV_TEST		; 
	FFC	#0,#31,W^PRIV_TEST,R2		; find a missing priv
	CLRQ	W^PRIV_TEST			; clean out the bits
	INSV	#1,R2,#1,W^PRIV_TEST		; enable that priv.
	INSV	#1,R2,#1,W^PRIV_MOD		; make expected results
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SETPRV_S ENBFLG=#1,-
		  PRVADR=W^PRIV_TEST		; try _S
	FAIL_CHECK SS$_NORMAL			; check success
	$GETJPI_S ITMLST=W^GET_LIST		; get current priv
	CMPC3	#8,W^PRIV_MOD,W^PRIV_LIST	; check for the change
	BEQL	40$				; br if OK
	PUSHAL	W^UNEXPRVCHNG			; push str var
	CALLS	#1,W^PRINT_FAIL			; print the failure
40$:
;+
;
; test the perm clearing of one privilege _G
;
;-
	NEXT_TEST
	MOVQ	W^PRIV_SAVE+8,W^PRIV_TEST	; get process priv.
	MOVQ	W^PRIV_SAVE+8,W^PRIV_MOD
	FFS	#0,#31,W^PRIV_TEST,R2		; find a priv
	CLRL	W^PRIV_TEST			; clear off a space to work
	INSV	#1,R2,#1,W^PRIV_TEST		; set a bit for the priv to remove
	INSV	#0,R2,#1,W^PRIV_MOD		; set expected results
	MOVL	#1,W^SET+SETPRV$_PRMFLG		; set the perm flag
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SETPRV_G W^SET				; try _G
	FAIL_CHECK SS$_NORMAL			; check for success
	$GETJPI_S ITMLST=W^GET_LIST		; get current priv.
	CMPC3	#8,W^PRIV_MOD,W^PRIV_LIST+8	; check the priv.'s
	BEQL	60$				; br if OK
	PUSHAL	W^UNEXPRVCHNG			; push string variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
60$:
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SETPRV_S ENBFLG=#1,-
		  PRVADR=W^PRIV_SAVE+8,-
		  PRMFLG=#1			; reset perm priv to original
	FAIL_CHECK SS$_NORMAL			; check for failure
;+
;
; test perm add one priv _S
;
;-
	NEXT_TEST
	MOVQ	W^PRIV_LIST+8,W^PRIV_MOD	; save a copy of the privs
	MOVQ	W^PRIV_LIST+8,W^PRIV_TEST
	FFC	#0,#31,W^PRIV_TEST,R2		; find a missing priv
	CLRL	W^PRIV_TEST			; clean up the bits
	INSV	#1,R2,#1,W^PRIV_TEST		; add the missing priv
	INSV	#1,R2,#1,W^PRIV_MOD		; make expected results
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$SETPRV_S ENBFLG=#1,-
		  PRVADR=W^PRIV_TEST,-
		  PRMFLG=#1			; try _S
	FAIL_CHECK SS$_NORMAL			; check for success
	$GETJPI_S ITMLST=W^GET_LIST		; get the current priv.
	CMPC3	#8,W^PRIV_LIST+8,W^PRIV_MOD	; check for change
	BEQL	50$				; br if OK
	PUSHAL	W^UNEXPRVCHNG			; push the str variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
50$:
	TEST_END

.PAGE
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)			; set number past R0-R1 and save
	BICL2	#3,R1				; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; Mode	#3	PUSHAL STRING_VAR
;		CALLS #1,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	CMPB	(AP),#1				; is this just a message?
	BEQL	20$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	30$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
	BRB	30$				; goto output message
20$:
	MOVL	4(AP),W^MSGVEC1+12		; save string address
	$PUTMSG_S W^MSGVEC1			; print the message
	BRB	40$				; skip the other message
30$:
	$PUTMSG_S W^MSGVEC			; print the message
40$:
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET

.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
TEST_END:
	.END	SATSSS47

