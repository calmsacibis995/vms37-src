	.TITLE	SATSSS80 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS80 module tests the execution of the following
;		VMS system services:
;
;		$PURGWS
;
; ENVIRONMENT:	User mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: JULY, 1979
;
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	.LIBRARY /SYS$LIBRARY:STARLET.MLB/
	$JPIDEF				; GETJPI definitions
	$PHDDEF				; process header definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$SFDEF				; stack frame definitions
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
;
; MACROS
;
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,PAGE
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS80/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS80/		; module name
TEST_MOD_BEGIN:				; start end and fail messages
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
CS1:					; failure messages
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS5:
	.ASCID	\Mode is !AS.\
EXP:
	.ASCID	\status\
UM:					; mode messages
	.ASCID	\user\
MSGVEC:
	.LONG	3			; PUTMSG message vector
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
PURGWS:
	.ASCIC	/PURGWS/		; service name
WS_STR:
	.ASCID	/proc pg cnt/
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,PAGE
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG			; put it on a long word boundry
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
MODE:
	.LONG	0			; current mode string pointer
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	80
ML:
	.LONG	0			; desc. for BUF_CHECK routine
	.ADDRESS GETBUF+8
GETBUF:
	.LONG	132
	.ADDRESS .+4
	.BLKB	132
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
MSGVEC1:				; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.LONG	0
GET_LIST:
	.WORD	4			; GETJPI item list
	.WORD	JPI$_PPGCNT
	.LONG	PPG_CNT
	.LONG	0
	.LONG	0
PPG_CNT:
	.LONG	0			; before WS peak
PPG_CNT1:
	.LONG	0			; after WS peak
PURGE_AREA:
	.ADDRESS TOUCH_PAGE		; PURGWS address block
	.ADDRESS TOUCH_PAGE
LOCK_AREA:
	.ADDRESS TEST_MOD_NAME		; LCKPAG address array
	.ADDRESS TEST_END
PURG:
	$PURGWS PURGE_AREA		; PURGWS parameter list
	.PSECT TOUCH_PAGE,RD,PAGE
	.ALIGN PAGE
TOUCH_PAGE:
	.BLKB	1536			; 3 pages to touch
.PAGE
	.PSECT	SATSSS80,RD,WRT,EXE,PAGE
	.SBTTL	SATSSS80
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS80  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS80.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS80 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS80 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS80 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS80 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--

	TEST_START SATSSS80			; let the test begin
	.SBTTL PURGWS TESTS
;+
;
; $PURGWS tests
;
; test _S form with a dry WS and adr array elements =
;
;-
	MOVAL	W^PURGWS,W^SERV_NAME		; set service name
	MOVAL	W^UM,W^MODE			; set the mode
	MODE	TO,10$,KRNL,NOREGS		; get to kernel mode
	MOVL	@#CTL$GL_PHD,R9			; get the process header adr
	MOVAL	PHD$Q_PRIVMSK(R9),W^PRIVMASK	; get the priv. mask
	MODE	FROM,10$			; return to user mode
	PRIV	ADD,PSWAPM			; allow page locking
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$LCKPAG_S INADR =W^LOCK_AREA		; nail down everything but TOUCH_PAGE
	$PURGWS_S INADR =W^PURGE_AREA		; squeeze the juice out of this process
	FAIL_CHECK SS$_NORMAL			; check for success
	$GETJPI_S ITMLST=W^GET_LIST		; get the process page count in question
;+
;
; test _S  form with adr array elements one page apart
;
;-
	NEXT_TEST
	ADDL2	#511,W^PURGE_AREA+4		; set new adr array element
	MOVAL	W^PPG_CNT1,W^GET_LIST+4		; point to a new storage location
	$PURGWS_S INADR =W^PURGE_AREA		; squeeze blood out of a turnip
	FAIL_CHECK SS$_NORMAL			; check for success
	$GETJPI_S ITMLST=W^GET_LIST		; get the new process page count
	CMPL	W^PPG_CNT,W^PPG_CNT1		; are they the same?
	BEQL	10$				; br if they are
	PUSHL	W^PPG_CNT1			; push received
	PUSHL	W^PPG_CNT			; push expected
	PUSHAL	W^WS_STR			; push string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
10$:
;+
;
; test _G form with one page of juice in the process page count
;
;-
	NEXT_TEST
	MOVAL	W^PPG_CNT,W^GET_LIST+4		; reset the process page pointer
	TSTL	W^TOUCH_PAGE			; suck in a new page
	$GETJPI_S ITMLST=W^GET_LIST		; get page count after touch
	$PURGWS_G W^PURG			; try _G form
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^PPG_CNT1,W^GET_LIST+4		; set new page count pointer
	$GETJPI_S ITMLST=W^GET_LIST		; get the new process page count
	DECL	W^PPG_CNT			; create expected
	CMPL	W^PPG_CNT,W^PPG_CNT1		; did we squeeze a page out?
	BEQL	20$				; br if yes
	PUSHL	W^PPG_CNT1			; push recieved
	PUSHL	W^PPG_CNT			; push expected
	PUSHAL	W^WS_STR			; push string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
20$:
;+
;
; test _S form with more than one page to recover
;
;-
	NEXT_TEST
	ADDL2	#1024,W^PURGE_AREA+4		; make a three page purge area
	MOVAL	W^PPG_CNT1,W^GET_LIST+4		; reset the process page pointer
	MOVAL	W^TOUCH_PAGE,R6			; set a page pointer
	MOVL	#3,R7				; set a page count
30$:
	TSTL	(R6)				; touch a page
	ADDL2	#512,R6				; point to next page
	SOBGTR	R7,30$				; do all pages
	PUSHL	#0				; push a dummy paramter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$GETJPI_S ITMLST=W^GET_LIST		; get the process page count
	$PURGWS_S INADR=W^PURGE_AREA		; clean it up
	FAIL_CHECK SS$_NORMAL			; check for success
	MOVAL	W^PPG_CNT,W^GET_LIST+4		; set new PPG pointer
	$GETJPI_S ITMLST=W^GET_LIST		; get new process page count
	SUBL2	#3,W^PPG_CNT1			; set expected PPGCNT
	CMPL	W^PPG_CNT,W^PPG_CNT1		; did we get at least 3 pages?
	BEQL	40$				; br if OK
	PUSHL	W^PPG_CNT			; push recieved
	PUSHL	W^PPG_CNT1			; push expected
	PUSHAL	W^WS_STR			; push string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
40$:
	TEST_END

.PAGE
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)			; set number past R0-R1 and save
	BICL2	#3,R1				; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; Mode	#3	PUSHAL STRING_VAR
;		CALLS #1,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	CMPB	(AP),#1				; is this just a message?
	BEQL	20$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	30$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
	BRB	30$				; goto output message
20$:
	MOVL	4(AP),W^MSGVEC1+12		; save string address
	$PUTMSG_S W^MSGVEC1			; print the message
	BRB	40$				; skip the other message
30$:
	$PUTMSG_S W^MSGVEC			; print the message
40$:
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET

.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
TEST_END:
	.END	SATSSS80

