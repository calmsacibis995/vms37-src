	.TITLE	SATSSS42 SATS SYSTEM SERVICE TESTS  $FORCEX (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSTST (SATS SYSTEM SERVICE TESTS)
;
; ABSTRACT:
;
;		THIS MODULE CONTAINS SUBROUTINES WHICH, WHEN LINKED
; WITH SUCCOMMON.OBJ, FORM TEST MODULE SATSSS42 TO TEST SUCCESSFUL
; OPERATION OF THE $FORCEX SYSTEM SERVICE. THE SERVICE IS INVOKED
; UNDER VARIOUS INPUT CONDITIONS WITH VARYING INPUT PARAMETERS. ONLY
; SUCCESSFUL STATUS CODES ARE EXPECTED IN THIS TEST MODULE.  CORRECT 
; OPERATION OF THE SERVICE FOR EACH OF ITS ISSUANCES IS VERIFIED BY
; CHECKING FOR AN SS$_NORMAL STATUS CODE, EXPECTED RETURN ARGUMENTS
; AND EXPECTED FUNCTIONALITY PERFORMED.
;
; ENVIRONMENT:	USER MODE IMAGE; NEEDS CMKRNL PRIVILEGE,
;		DYNAMICALLY ACQUIRES OTHER PRIVILEGES, AS NEEDED.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: MAR, 1978
;
; MODIFIED BY:
;
;		VERSION 1.5 : 25-MAY-79
;
; 01  LDJ  10/11/79	Fixed bug caused by DIB$K_LENGTH change ACG052.RNO mem
; 
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PRVDEF				; PRIVILEGE BIT DEFINITIONS
	$PHDDEF				; PROCESS HEADER OFFSETS
	$PQLDEF				; PROCESS QUOTA CODES
	$PCBDEF				; PCB LABELS
	$LOGDEF				; LOGICAL NAME TABLE TYPE SYMBOLS
	$DIBDEF				; DEVICE INFO BLOCK OFFSETS
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
	.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
TEST_MOD_NAME::	STRING	C,<SATSSS42>	; TEST MODULE NAME
TEST_MOD_NAME_D: STRING	I,<SATSSS42>	; TEST MODULE NAME DESCRIPTOR
MSG1_INP_CTL:	STRING	I,<  SSFEX!4ZW: CONDITIONS:>
					; FAO CTL STRING FOR MSG1 IN SUCCOMMON.MAR
MSG3_ERR_CTL::	STRING	I,< *SSFEX!4ZW: !AS> 
					; FAO CTL STRING FOR MSG3 IN SUCCOMMON.MAR
ONE_MIN:	.LONG	-10*1000*1000*60,-1 ; ONE MINUTE (WAKE-UP DELTA)
CREATED_PRN:	STRING	I,<SATSSS42_CRE> ; PROCESS & MBX NAME FOR CREATED PROCESS
IMAGNAM:	STRING	I,<SYSTST$RES:SATSUT13.EXE> ; IMAGE NAME FOR CREATED PROC
LOGNAM_PID:	STRING	I,<SYSTST$PID>	; LOG NAME OF CREATING PID
EQUIV_PID:	.LONG	4		; EQUIV NAME STRING DESCRIPTOR
		.ADDRESS CREATING_PID	; ... OF CREATING PID
QUOTALIST:	$QUOTA	CPULM,0		; INFINITE CPU
		$QUOTA	BYTLM,512	; BYTE LIMIT FOR BUFFERED I/O
		$QUOTA	FILLM,2		; OPEN FILE COUNT LIMIT
		$QUOTA	PGFLQUOTA,10	; PAGING FILE QUOTA
		$QUOTA	PRCLM,2		; SUBPROCESS QUOTA
		$QUOTA	TQELM,3		; TIMER QUEUE ENTRY QUOTA
		$QUOTA	LISTEND		; DEFINES END OF LIST
	.PAGE
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
PRIVMASK:	.BLKQ	1		; ADDR OF PRIVILEGE MASK (IN PHD)
MBXCHAN:	.BLKL	1		; CHAN. NO. FOR MAILBOX FOR CREATED PROCESS
MBXCHANINFO:				; CHANNEL INFO RETURNED BY GETCHN
		.LONG	DIB$K_LENGTH
		.ADDRESS .+4
		.BLKB	DIB$K_LENGTH
MBXUNIT:	.BLKL	1		; SAVE AREA FOR MAILBOX UNIT NUMBER
MBXBUFF:	STRING	O,120		; MAILBOX BUFFER FOR CREATED PROCESS
DEST_PIDADR:	.BLKL	1		; DESTINATION PID ADDR, WRITTEN BY S.S.
ZEROPID:	.BLKL	1		; PID OF ZEROES
CREATING_PID:	.LONG	0		; PID OF CREATING PROCESS
CREATED_PID:	.BLKL	1		; PID OF CREATED PROCESS
EXP_STATUS:	.BLKL	1		; EXPECTED STATUS CODE FROM CREATED PROC
	.PAGE
	.SBTTL	CONDITION TABLES
;
;	***** CONDITION TABLES FOR FORCEX SYSTEM SERVICE *****
;
	COND	1,NOTARG,<PID ADDRESS>,-
		  <NOT SPECIFIED>,-
		  <SPECIFIED, NON-ZERO>,-
		  <SPECIFIED, ZERO>,-
 
		    .ADDRESS	0
		    .ADDRESS	CREATED_PID
		    .ADDRESS	ZEROPID
;
	COND	2,NOTARG,<PROCESS NAME ADDRESS>,-
		  <SPECIFIED>,-
		  <NOT SPECIFIED>,-
 
		    .ADDRESS	CREATED_PRN
		    .ADDRESS	0
;
	COND	3,NOTARG,<CREATED PROCESS TYPE>,-
		  <SUBPROCESS>,-
		  <DETACHED, DIFFERENT GROUP>,-
		  <DETACHED, SAME GROUP, SAME MEMBER>,-
		  <DETACHED, SAME GROUP, DIFFERENT MEMBER>,-
 
		    .LONG	0	   ; PSEUDO-UIC
		    .BLKL	1	   ; UIC
		    .BLKL	1	   ; UIC
		    .BLKL	1	   ; UIC
;
	COND	4,NULL

	COND	5,NULL

	.PSECT	SATSSS42,RD,WRT,EXE
	.PAGE
	.SBTTL	TM_SETUP, TM_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		TM_SETUP AND TM_CLEANUP ARE CALLED TO PERFORM
; REQUIRED HOUSEKEEPING AT THE BEGINNING AND END, RESPECTIVELY, OF
; TEST MODULE EXECUTION.
;
; CALLING SEQUENCE:
;
;	BSBW TM_SETUP   BSBW TM_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	TM_SETUP:  COND TABLE INDEX REGISTERS (R2,3,4,5,6) CLEARED;
;		   ALL PRIVILEGES ACQUIRED.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



TM_SETUP::
	CLRL	R2			; INITIALIZE
	CLRL	R3			; .. CONDITION
	CLRL	R4			; .... TABLE
	CLRL	R5			; ...... INDEX
	CLRL	R6			; ........ REGISTERS
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE BEGIN MSG
	MOVAL	TEST_MOD_SUCC,TMD_ADDR	; ASSUME END MSG WILL SHOW SUCCESS
	INSV	#SUCCESS,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR SUCCESS
	MODE	TO,5$,KRNL		; KERNEL MODE TO ACCESS PHD
	MOVL	@#CTL$GL_PHD,R9		; GET PROCESS HEADER ADDRESS
	MOVAL	PHD$Q_PRIVMSK(R9),PRIVMASK ; GET PRIV MASK ADDRESS
	MODE	FROM,5$	; BACK TO USER MODE
	PRIV	ADD,ALL			; GET ALL PRIVILEGES
	$SETPRN_S TEST_MOD_NAME_D 	; SET PROCESS NAME
	SS_CHECK  NORMAL		; CHECK STATUS CODE RETURNED FROM SETPRN
	$WAKE_S	PIDADR=CREATING_PID 	; GET MY PID
	SS_CHECK NORMAL			; CHECK FOR NORMAL RETURN
	$HIBER_S			; UNDO ABOVE WAKE
	SS_CHECK NORMAL			; CHECK FOR NORMAL RETURN
	$CRELOG_S TBLFLG=#LOG$C_SYSTEM, - ; GET MY PID INTO LOG NAME TABLE
		  LOGNAM=LOGNAM_PID,   - ; ... FOR USE BY CREATED PROCESS
		  EQLNAM=EQUIV_PID
	BLBS	R0,10$			; IF SUCCESSFUL, CONTINUE
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE MODULE
10$:
;
; THE FOLLOWING CODE ESTABLISHES UIC'S IN THE CONDITION 3 TABLE
;
	MODE	TO,20$,KRNL		; KERNEL MODE TO ACCESS PCB
	MOVL	@#SCH$GL_CURPCB,R9 	; GET CURRENT PCB ADDRESS
	MOVL	PCB$L_UIC(R9),R9 	; PICK UP UIC FROM PCB
	MODE	FROM,20$		; ... AND GET BACK TO USER MODE
;
; R9 NOW CONTAINS "MY" UIC
;
	MOVZBL	#1,R10			; GET COND3 TABLE INDEX NUMBER INTO A REG
	ADDL3	#^X10000,R9,COND3_E[R10] ; PUT DIFF GROUP UIC INTO 2ND TABLE ELT
	INCL	R10			; POINT TO 3RD COND3 TABLE ELEMENT
	MOVL	R9,COND3_E[R10]		; PUT MY UIC INTO TABLE
	INCL	R10			; POINT TO 4TH COND3 TABLE ELEMENT
	ADDL3	#1,R9,COND3_E[R10] 	; PUT DIFF MEMBER UIC INTO THE TABLE
	$CREMBX_S CHAN=MBXCHAN, LOGNAM=CREATED_PRN, - ; GET MAILBOX FOR PROCESS
		  MAXMSG=#120, PROMSK=#0, BUFQUO=#240
	SS_CHECK NORMAL			; CHECK NORMAL COMPLETION
	$GETCHN_S CHAN=MBXCHAN, -	; GET CHAN INFO (UNIT NUMBER)
		  PRIBUF=MBXCHANINFO
	SS_CHECK NORMAL			; CHECK NORMAL COMPLETION
	MOVZWL	MBXCHANINFO+8+DIB$W_UNIT,MBXUNIT ; SAVE MAILBOX UNIT NUMBER
	RSB				; RETURN TO MAIN ROUTINE
TM_CLEANUP::
	$DELMBX_S  MBXCHAN		; DELETE TERMINATION MAILBOX
	$DELLOG_S TBLFLG=#LOG$C_SYSTEM, - ; DELETE LOG NAME ACQUIRED ABOVE
		  LOGNAM=LOGNAM_PID
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE END MSG
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	CONDITION SUBROUTINES - SETUP AND CLEANUP 
;++
; FUNCTIONAL DESCRIPTION:
;
;		CONDX AND CONDX_CLEANUP ARE SUBROUTINES WHICH ARE EXECUTED
; BEFORE AND AFTER THE VERIFY SUBROUTINE, RESPECTIVELY, WHENEVER A NEW
; CONDITION X VALUE IS SELECTED (SEE FUNCTIONAL DESCRIPTION OF SUCCOMMON
; ROUTINE IN SUCCOMMON.MAR). ANY SETUP FUNCTION PARTICULAR TO THE 
; CONDITION X TABLE IS INCLUDED IN THE CONDX SUBROUTINE AND CLEANED
; UP, IF NECESSARY, IN THE CONDX_CLEANUP SUBROUTINE. THIS INCLUDES,
; ESPECIALLY, CODE TO DETECT CONFLICTS AMONG CURRENT ENTRIES IN TWO
; OR MORE CONDITION TABLES. IF A CONFLICT IS DETECTED, A NON-ZERO
; VALUE IS STORED INTO CONFLICT, WHICH CAUSES THE CALLING ROUTINE
; (SUCCOMMON) TO SKIP THE CURRENT ENTRY IN THE CONDITION X TABLE.
;
; CALLING SEQUENCE:
;
;	BSBW CONDX   BSBW CONDX_CLEANUP
;	  WHERE X = 1,2,3,4,5
;
; INPUT PARAMETERS:
;
;	CONFLICT = 0
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;
; OUTPUT PARAMETERS:
;
;	CONFLICT SET TO NON-ZERO IF COND TABLE CONFLICT DETECTED.
;
; IMPLICIT OUTPUTS:
;
;	R2,3,4,5,6 PRESERVED
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



COND1::
	RSB				; RETURN TO MAIN ROUTINE
COND1_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND2::
	CMPL	#ZEROPID,COND1_E[R2] 	; PID SPECIFIED AS 0 ??
	BNEQU	COND2X			; NO -- NO CONFLICT
	TSTL	COND2_E[R3]		; YES -- IS THERE A PROCESS NAME ??
	BNEQU	COND2X			; YES -- NO CONFLICT
	MOVB	ONES,CONFLICT		; NO -- INDICATE CONFLICT BECAUSE THIS TYPE
					; ... OF FORCEX WOULD EXIT CREATING IMAGE
COND2X:
	RSB				; RETURN TO MAIN ROUTINE
COND2_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND3::
	CMPL	#CREATED_PID,COND1_E[R2] ; NON-ZERO PID SPECIFIED ?
	BEQLU	COND3X			; YES -- NO CONFLICT
	TSTL	COND2_E[R3]		; IS PROCESS NAME SPECIFIED ?
	BEQL	COND3X			; NO -- NO CONFLICT
;
; NOTE -- AT THIS POINT, PROCESS WILL BE REFERENCED BY PROCESS NAME.
;
	CMPL	R4,#1			; DOES CONDITION 3 SPECIFY DIFFERENT GROUP ?
	BNEQ	COND3X			; NO -- NO CONFLICT
	MOVB	ONES,CONFLICT		; YES -- PROCESS NAME FOR DIFF GROUP IS CONF
COND3X:
	RSB				; RETURN TO MAIN ROUTINE
COND3_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND4::
	RSB				; RETURN TO MAIN ROUTINE
COND4_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND5::
	RSB				; RETURN TO MAIN ROUTINE
COND5_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	FORM_CONDS
;++
; FUNCTIONAL DESCRIPTION:
;
; 		FORM_CONDS FORMATS AND PRINTS INFORMATION ABOUT
;  THE CURRENT ELEMENT IN EACH OF THE CONDITION TABLES.
;
; CALLING SEQUENCE:
;
;	BSBW FORM_CONDS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_T - TITLE TEXT FOR CONDX TABLE
;		CONDX_TAB - ELEMENT TEXT FOR CONDX TABLE
;		CONDX_C - CONTEXT OF THE CONDX TABLE
;		CONDX_E - DATA ELEMENTS OF THE CONDX TABLE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



FORM_CONDS::
	$FAO_S	MSG1_INP_CTL,FAO_LEN,FAO_DESC,TESTNUM
					; FORMAT CONDITIONS HEADER MSG
	BSBW	OUTPUT_MSG		; ... AND PRINT IT
	CMPB	#COND1_C,#NULL		; IS CONDITION 1 NULL ?
	BNEQU	10$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
10$:
	MOVAL	COND1_T,MSG_A		; SAVE ADDRESS OF CONDITION 1 TITLE FOR FAO
	MOVL	COND1_TAB[R2],MSG_B 	; SAVE ADDR OF COND 1 CURR TEXT ELT FOR FAO
	MOVB	#COND1_C,MSG_CTXT 	; SAVE CONDITION 1 CONTEXT FOR FAO
	MOV_VAL	COND1_C,COND1_E[R2],MSG_DATA1 ; GIVE COND 1 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 1 MSG
	CMPB	#COND2_C,#NULL		; IS CONDITION 2 NULL ?
	BNEQU	20$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
20$:
	MOVAL	COND2_T,MSG_A		; SAVE ADDRESS OF CONDITION 2 TITLE FOR FAO
	MOVL	COND2_TAB[R3],MSG_B 	; SAVE ADDR OF COND 2 CURR TEXT ELT FOR FAO
	MOVB	#COND2_C,MSG_CTXT 	; SAVE CONDITION 2 CONTEXT FOR FAO
	MOV_VAL	COND2_C,COND2_E[R3],MSG_DATA1 ; GIVE COND 2 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 2 MSG
	CMPB	#COND3_C,#NULL		; IS CONDITION 3 NULL ?
	BNEQU	30$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
30$:
	MOVAL	COND3_T,MSG_A		; SAVE ADDRESS OF CONDITION 3 TITLE FOR FAO
	MOVL	COND3_TAB[R4],MSG_B 	; SAVE ADDR OF COND 3 CURR TEXT ELT FOR FAO
	MOVB	#COND3_C,MSG_CTXT 	; SAVE CONDITION 3 CONTEXT FOR FAO
	MOV_VAL	COND3_C,COND3_E[R4],MSG_DATA1 ; GIVE COND 3 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 3 MSG
	CMPB	#COND4_C,#NULL		; IS CONDITION 4 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND4_T,MSG_A		; SAVE ADDRESS OF CONDITION 4 TITLE FOR FAO
	MOVL	COND4_TAB[R5],MSG_B 	; SAVE ADDR OF COND 4 CURR TEXT ELT FOR FAO
	MOVB	#COND4_C,MSG_CTXT 	; SAVE CONDITION 4 CONTEXT FOR FAO
	MOV_VAL	COND4_C,COND4_E[R5],MSG_DATA1 ; GIVE COND 4 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 4 MSG
	CMPB	#COND5_C,#NULL		; IS CONDITION 5 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND5_T,MSG_A		; SAVE ADDRESS OF CONDITION 5 TITLE FOR FAO
	MOVL	COND5_TAB[R6],MSG_B 	; SAVE ADDR OF COND 5 CURR TEXT ELT FOR FAO
	MOVB	#COND5_C,MSG_CTXT 	; SAVE CONDITION 5 CONTEXT FOR FAO
	MOV_VAL	COND5_C,COND5_E[R6],MSG_DATA1 ; GIVE COND 5 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 5 MSG
FORM_CONDSX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VERIFY
;++
; FUNCTIONAL DESCRIPTION:
;
;		VERIFY IS CALLED ONCE FOR EACH COMBINATION OF CONDITION
; TABLE VALUES (AS DETERMINED BY THE INDEX REGISTERS R2,3,4,5,6 FOR
; COND TABLES 1,2,3,4,5, RESPECTIVELY). VERIFY ESTABLISHES THE CONDITIONS
; SPECIFIED BY THE COND TABLES AND ISSUES THE SUBJECT SYSTEM SERVICE
; ($FORCEX). THEN, THE SUCCESSFUL OPERATION OF THE SERVICE IS VERIFIED
; BY EXAMINING THE STATUS CODE RETURNED, THE VALUES FOR RETURN ARGUMENTS
; AND THE FUNCTIONALITY PERFORMED. THE EXAMINATIONS TAKE THE FORM OF 
; COMPARISONS AGAINST EXPECTED VALUES. ANY FAILING COMPARISON CAUSES AN
; ERR_EXIT MACRO TO BE EXECUTED (EITHER DIRECTLY, OR INDIRECTLY,
; THROUGH THE SS_CHECK MACRO); ERR_EXIT SETS EFLAG TO NON-ZERO,
; PRINTS ERROR MESSAGES AND CAUSES AN IMMEDIATE RSB TO CALLER.
; WHEN ERR_EXIT IS EXECUTED, FURTHER CALLS TO VERIFY ARE SUPPRESSED,
; AND, AFTER EXECUTING CLEANUP SUBROUTINES, THE IMAGE EXITS.
;
; CALLING SEQUENCE:
;
;	BSBW VERIFY
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	VERIFY HAS NO OUTPUT. SINCE ITS PURPOSE IS TO TEST FOR ERRORS,
;	IT MERELY RETURNS TO CALLER NORMALLY AFTER THE TESTS, PROVIDING
;	ALL WERE SUCCESSFUL; IF AN ERROR IS DISCOVERED, RETURN IS VIA
;	AN ERR_EXIT OR SS_CHECK MACRO, BOTH OF WHICH DOCUMENT DETECTED
;	ERRORS.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VERIFY::
	TSTB	CFLAG			; SHOULD CONDITIONS BE PRINTED ?
	BEQL	5$			; NO -- CONTINUE
	BSBW	FORM_CONDS		; YES -- FMT & PRINT ALL CONDS FOR THIS T.C.
5$:
	CLRL	ZEROPID			; CLEAR ZERO PID
	$CREPRC_S PIDADR=CREATED_PID, PRCNAM=CREATED_PRN, -
		  UIC=COND3_E[R4], IMAGE=IMAGNAM, -
		  MBXUNT=MBXUNIT, QUOTA=QUOTALIST
					; CREATE A PROCESS TO BE FORCEX'D
	SS_CHECK NORMAL			; ... AND MAKE SURE IT CREATED OK
	$SCHDWK_S DAYTIM=ONE_MIN 	; WAKE SELF IN 1 MIN IF CREATED PROC DOESN'T
	SS_CHECK NORMAL			; CHECK FOR NORMAL RETURN
	$HIBER_S			; SLEEP UNTIL CREATED PROC IS FULLY CREATED
	SS_CHECK NORMAL			; EXPECT NORMAL RETURN
	$CANWAK_S 			; GET RID OF SCHEDULED WAKE-UP
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS RETURN
;
; SCHEDULED WAKE-UP WILL ONLY BE EFFECTED IF CREATED PROCESS DOES
; NOT GET FULLY CREATED. IN THIS CASE, THE SUBJECT SYSTEM SERVICE
; BELOW WILL FAIL WITH AN APPROPRIATE ERROR CONDITION.
;
;
; THE FOLLOWING CODE LOOKS FOR THE SPECIAL CASE OF NO PID SPECIFIED
; AND NO PROCESS NAME SPECIFIED IN CONDITION TABLES. IF THIS CASE
; IS PRESENT, FORCEX IS NOT ISSUED HERE, BUT, INSTEAD, A $WAKE IS
; ISSUED FOR THE CREATED PROCESS, WHICH, IN TURN, ISSUES A $FORCEX
; TO FORCE ITS OWN EXIT. FOR ALL OTHER CASES, THE CREATED PROCESS
; IS FORCED TO EXIT BY A $FORCEX ISSUED HERE IN THIS PROCESS.
;
	TSTL	COND1_E[R2]		; IS PIDADR SPECIFIED ??
	BNEQU	10$			; YES -- NO SPECIAL CASE -- CONTINUE
	TSTL	COND2_E[R3]		; NO -- HOW ABOUT PROCESS NAME ??
	BNEQU	10$			; IT EXISTS -- A NORMAL CASE
	$WAKE_S PIDADR=CREATED_PID 	; NO PIDADR OR PIDADR SPECIFIED
					; WAKE CREATED PROCESS TO FORCE ITSELF
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS RETURN
	MOVL	CREATED_PID,EXP_STATUS 	; ... SET UP EXPECTED STATUS CODE
	BRW	20$			; ... AND GO WAIT FOR ITS MAIL
10$:
;
; SET UP TO ISSUE SUBJECT $FORCEX IN THIS PROCESS
;
	MOVL	CREATING_PID,EXP_STATUS ; SET UP EXPECTED STATUS CODE
	MOVL	COND1_E[R2],DEST_PIDADR ; GET PID ADDRESS OUT OF TABLE
	MOVL	COND2_E[R3],R9		; PRCNAM ADDR INTO REG FOR INDIRECT REF'RNCE
;
; ****** SYSTEM SERVICE CALL WHICH IS THE SUBJECT OF THIS TEST CASE ******
;
	$FORCEX_S PIDADR=@DEST_PIDADR, PRCNAM=(R9), -
		  CODE=EXP_STATUS
	CMPL	R0,#SS$_NORMAL		; CODE RECEIVED = CODE EXPECTED ?
	BEQLU	15$			; YES -- CONTINUE
	MOVL	#SS$_NORMAL,EXPV 	; NO -- LOAD UP EXPECTED AND ...
	MOVL	R0,RECV			; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT STATUS CODE RETURNED FROM FORCEX>
15$:
	TSTL	DEST_PIDADR		; PID RETURNED BY FORCEX ?
	BEQL	20$			; NO -- KEEP GOING
	CMPL	CREATED_PID,@DEST_PIDADR ; YES -- IS IT THE CORRECT ONE ?
	BEQL	20$			; YES -- CONTINUE
	MOVL	CREATED_PID,EXPV 	; NO --LOAD UP EXPECTED AND ...
	MOVL	@DEST_PIDADR,RECV 	; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT PID RETURNED BY FORCEX>
20$:
;
; CREATED PROCESS HAS BEEN FORCEX'D (BY THIS PROCESS OR BY ITSELF)
;
	$QIOW_S	CHAN=MBXCHAN, FUNC=#IO$_READVBLK, -
		P1=MBXBUFF+8, P2=MBXBUFF
					; WAIT FOR CREATED PROCESS TO SEND MAIL
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS CODE
	CMPL	MBXBUFF+12,EXP_STATUS 	; CREATED PROC RETURN EXPECTED EXIT STATUS ?
	BEQLU	VERIFYX			; YES -- ALL IS OK
	MOVL	EXP_STATUS,EXPV 	; NO -- LOAD UP EXPECTED AND
	MOVL	MBXBUFF+12,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT EXIT STATUS CODE RETURNED IN MAILBOX>
VERIFYX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VFY_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		VFY_CLEANUP EXECUTES SYSTEM SERVICES TO UNDO THE
; EFFECT OF THOSE ISSUED IN THE VERIFY SUBROUTINE. VFY_CLEANUP MUST
; ASSUME THAT VERIFY MAY NOT HAVE EXECUTED IN ITS ENTIRETY (IF AN
; ERROR IS FOUND). ALSO, VFY_CLEANUP MAY ISSUE SS_CHECK OR ERR_EXIT
; ONLY AFTER PERFORMING ALL OF ITS CLEANUP OPERATIONS; THIS IS REQUIRED
; IN THE EVENT THAT VFY_CLEANUP IS CALLED DURING ERROR PROCESSING,
; WHEN PERFORMING THE REQUIRED CLEANUP IS MORE IMPORTANT THAN
; POSSIBLY DISCOVERING A SECOND ERROR.
;
; CALLING SEQUENCE:
;
;	BSBW VFY_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VFY_CLEANUP::
	$DELPRC_S PRCNAM=CREATED_PRN 	; DELETE CREATED PROCESS (IF STILL HERE)
	RSB				; RETURN TO CALLER
	.END
