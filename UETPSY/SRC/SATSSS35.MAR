	.TITLE	SATSSS35 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS35 module tests the execution of the following
;		VMS system services:
;
;		$CREPRC
;		$GETJPI
;
; ENVIRONMENT:	User mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: JULY, 1979
;
; MODIFIED BY:
;
;	V03-001 RNP0005		Robert N. Perron,	23-Mar-1982
;		Removed EXCVEC and FINALEXC from the JPI_GOOD list.
;
;	V02-006 RNP0004		Robert N. Perron,	09-Dec-1981
;		Removed ASTEN from the JPI_GOOD list.
;
;	V02-005 RNP0003		Robert N. Perron,	02-Oct-1981
;		Removed ASTACT from the JPI_GOOD list.
;
;	V02-004	LDJ0002		Larry D. Jones,		06-Sep-1981
;		Fixed GETJPI P1 reference to CTL$AQ_EXCVEC and CTL$AL_FINALEXC.
;
;	V02-003 RNP0002		Robert N. Perron,	01-Jun-1981
;		To eliminate dependence on the SYSTEST account privileges
;		being a specific list, privileges are now set to a fixed list
;		before the GETJPI tests are started.
;
;	V02-002	RNP0001		Robert N. Perron,	09-Apr-1981
;		Fixed problem of STS field changing due to Swapper activity.
;		Prevent failure when privileges are added to the SYSTEST 
;		account. Cleaned up some format problems.
;
;	V02-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	$ACCDEF				; account record offset definitions
	$DIBDEF				; device info block definitions
	$JPIDEF				; JPI offset definitions
	$PCBDEF				; process control block definitions
	$PHDDEF				; Process header definitions
	$PQLDEF
	$PRVDEF				; privilege definitions
	$SHRDEF				; shared message definitions
	$SFDEF				; stack frame definitions
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
;
	SUCCESS		= 1		; success
	ERROR		= 2		; error
;
; SHR message definitions
;
	UETP = 116@STS$V_FAC_NO		;define the UETP facility code
;
	UETP$_BEGIND = UETP!SHR$_BEGIND	;define the UETP messages
	UETP$_TEXT   = UETP!SHR$_TEXT
	UETP$_ABENDD = UETP!SHR$_ABENDD
	UETP$_ENDEDD = UETP!SHR$_ENDEDD
;
; Mask of bits for the STS field in a $CREPRC system service as they are 
; returned from a $GETJPI system service.
;
	JPI_STS_MASK = <<1@PCB$V_NETWRK>!<1@PCB$V_SSFEXCU>!<1@PCB$V_SSRWAIT>!-
			<1@PCB$V_BATCH> !<1@PCB$V_NOACNT> !<1@PCB$V_HIBER>  !-
			<1@PCB$V_LOGIN>>
;
; The opposite of JPI_STS_MASK
;
	JPI_STS_NMASK = ^CJPI_STS_MASK

;
; Mask of bits for the Privilege field as they are returned from a $GETJPI
;
	JPI_PRV_MASK = <<1@PRV$V_CMEXEC>!<1@PRV$V_CMKRNL>!<1@PRV$V_DETACH>!-
			<1@PRV$V_DIAGNOSE>!<1@PRV$V_GROUP>!<1@PRV$V_GRPNAM>!-
			<1@PRV$V_LOG_IO>!<1@PRV$V_NETMBX>!<1@PRV$V_NOACNT>!-
			<1@PRV$V_PHY_IO>!<1@PRV$V_PRMCEB>!<1@PRV$V_PRMMBX>!-
			<1@PRV$V_PSWAPM>!<1@PRV$V_SETPRI>!<1@PRV$V_SYSNAM>!-
			<1@PRV$V_SYSPRV>!<1@PRV$V_TMPMBX>!<1@PRV$V_VOLPRO>>
;
; The compliment of JPI_PRV_MASK
;
	JPI_PRV_NMASK = ^CJPI_PRV_MASK
;
; MACROS
;
	.MACRO JPI,NAME,SIZE
	.WORD	SIZE
	.WORD	JPI$_'NAME'
	.ADDRESS NAME
	.ADDRESS NAME'L
	.SAVE_PSECT
	.PSECT ITEM_LIST
NAME:
	.BLKB	SIZE
NAME'L:
	.WORD	0
	.RESTORE_PSECT
	.ENDM JPI
.PAGE
	.PSECT	ITEM_LIST,RD,WRT,NOEXE,LONG ; psect to store JPI results in
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS35/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS35/		; module name
TEST_MOD_BEGIN:				; start end and fail messages
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
CS1:					; failure messages
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS5:
	.ASCID	\Mode was !AS.\
EXP:
	.ASCID	\status\
AST_PARAM:
	.ASCID	\AST param.\
BP:
	.ASCID	\base pri.\
PNS:
	.ASCID	\Process name was not set correctly.\
STSFLGS:
	.ASCID	\STSFLG's\
UIC_MSG:
	.ASCID	\UIC\
EFC_NAME:
	.ASCID	\SATSSF06_DET\
PID_STR:
	.ASCID	\PID\
CREPRC:
	.ASCIC	\CREPRC\
GETJPI:
	.ASCIC	\GETJPI\
UM:					; mode messages
	.ASCID	\user\
MBNAM:
	.ASCID	\S35MBX\
PRVMASK:
	.QUAD	JPI_PRV_MASK		; used for setting privileges to
					; known value
NPRVMASK:
	.QUAD	JPI_PRV_NMASK		; used for clearing any extra
					; privileges 
MSGVEC:
	.LONG	3			; PUTMSG message vector
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
QUOTA_LIST:
	.BYTE	PQL$_ASTLM		; minimum quota list
	.LONG	2
	.BYTE	PQL$_BIOLM
	.LONG	2
	.BYTE	PQL$_BYTLM
	.LONG	1024
	.BYTE	PQL$_CPULM
	.LONG	0
	.BYTE	PQL$_DIOLM
	.LONG	2
	.BYTE	PQL$_FILLM
	.LONG	2
	.BYTE	PQL$_PGFLQUOTA
	.LONG	256
	.BYTE	PQL$_PRCLM
	.LONG	0
	.BYTE	PQL$_TQELM
	.LONG	0
	.BYTE	PQL$_WSDEFAULT
	.LONG	100
	.BYTE	PQL$_WSQUOTA
	.LONG	100
	.BYTE	PQL$_LISTEND
.PAGE
GET_LIST:				; GETJPI list of items and results
	JPI ACCOUNT,8
SHORT_LIST:
	JPI CPULIM,4
	JPI CURPRIV,8
	JPI GRP,4
	JPI IMAGPRIV,8
	JPI MEM,4
	JPI PRCLM,4
	JPI TQLM,4
	JPI UIC,4
	JPI USERNAME,12
	JPI_LIST_SIZE=<USERNAME+2>-ACCOUNT
	JPI_LIST_SIZE1=<USERNAME+2>-CPULIM
DIRTY:					; GETJPI entrys which will vary
	JPI APTCNT,4
	JPI ASTACT,4
	JPI ASTEN,4
	JPI ASTCNT,4
	JPI ASTLM,4
	JPI AUTHPRIV,8
	JPI BIOCNT,4
	JPI BIOLM,4
	JPI BUFIO,4
	JPI BYTCNT,4
	JPI BYTLM,4
	JPI CPUTIM,4
	JPI DFPFC,4
	JPI DFWSCNT,4
	JPI DIOCNT,4
	JPI DIOLM,4
	JPI DIRIO,4
	JPI EFCS,4
	JPI EFCU,4
	JPI EFWM,4
	JPI EXCVEC,4
	JPI FINALEXC,4
	JPI FILCNT,4
	JPI FILLM,4
	JPI FREP0VA,4
	JPI FREP1VA,4
	JPI GPGCNT,4
	JPI IMAGNAME,128
	JPI LOGINTIM,4
	JPI OWNER,4
	JPI PAGEFLTS,4
	JPI PGFLQUOTA,4
	JPI PID,4
	JPI PPGCNT,4
	JPI PRCCNT,4
	JPI PRCNAM,15
	JPI PROCPRIV,8
	JPI PRI,4
	JPI PRIB,4
	JPI STATE,4
	JPI STS,4
	JPI TMBU,4
	JPI TQCNT,4
	JPI VOLUMES,4
	JPI VIRTPEAK,4
	JPI WSAUTH,4
	JPI WSQUOTA,4
	JPI WSPEAK,4
	JPI WSSIZE,4
	.LONG	0			; list terminator
.PAGE
JPI_GOOD:				; expected GETJPI results
					; Item name	   buffer offset
	.ASCII	/SYSTEST /		; ACCOUNT		00
	.WORD	8			; ACCOUNTL		08
JPI_GOOD_SHRT:
	.LONG	0			; CPULIM		0A
	.WORD	4			; CPULIML		0E
	.QUAD	JPI_PRV_MASK		; CURPRIV		10
	.WORD	8			; CURPRIVL		18
	.LONG	1			; GRP			1A
	.WORD	2			; GRPL			1E
	.QUAD	0			; IMAGEPRIV		20
	.WORD	8			; IMAGEPRIVL		28
	.LONG	7			; MEM			2A
	.WORD	2			; MEML			2E
	.LONG	8			; PRCLM			30
	.WORD	2			; PRCLML		38
	.LONG	^X14			; TQLM			3A
	.WORD	2			; TQLML			3E
	.LONG	^X10007			; UIC			40
	.WORD	4			; UICL			44
	.ASCII	/SYSTEST     /		; USERNAME		46
	.WORD	^XC			; USERNAMEL		52
IN:
	.ASCID	/SYS$INPUT/
OUT:
	.ASCID	/SYS$OUTPUT/
ERR:
	.ASCID	/SYS$ERROR/
IMAGE_NAME:
	.ASCID	/SATSUT01.EXE/
PROC_NAME:
	.ASCID	/SATSUT35/
	.BLKB	7
PROC_UIC:
	.LONG	^X10007			; process UIC
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG			; put it on a long word boundry
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
MODE:
	.LONG	0			; current mode string pointer
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
CRE:
	$CREPRC	PID1,0,0,0,0,0,QUOTA_LIST,-
		0,0,0,0,0		; CREPRC parameter list
GET:					; GETJPI parameter list's
	$GETJPI EFN=1,PIDADR=PID1,PRCNAM=TEST_MOD_NAME_D,ITMLST=GET_LIST
GET1:
	$GETJPI ITMLST=GET_LIST
ITEM_LIST:
	.BLKL	12
BUF:
	.BLKB	80
ML:
	.LONG	0			; desc. for BUF_CHECK routine
	.ADDRESS GETBUF+8
GETBUF:
	.LONG	132
	.ADDRESS .+4
	.BLKB	132
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
MSGVEC1:				; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.LONG	0
IOSTAT:
	.QUAD	0			; IO status block
PID1:
	.LONG	0			; PID storage location
MBCHAN:
	.WORD	0			; MBX channel location
MBXUN:
	.WORD	0			; MBX unit number
IOSTATUS:
	.BLKL	2			; MBX read IO status block
MBUF:
	.BLKB	100			; MBX read buffer
TEST_PID:
	.LONG	0			; GETJPI parameter
PRIVS:
	.QUAD	0			; privilege mask
.PAGE
	.PSECT	SATSSS35,RD,WRT,EXE,LONG
	.SBTTL	SATSSS35
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS35  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS35.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS35 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS35 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS35 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS35 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--

	TEST_START SATSSS35			; let the test begin
	.SBTTL	CREPRC TESTS
;+
;
; $CREPRC tests
;
; test the minimum quota all defaults subprocess with _S
;
;-
	MOVAL	W^UM,W^MODE			; set the mode
	MOVAL	W^CREPRC,W^SERV_NAME		; set the service name
	$CREMBX_S CHAN=W^MBCHAN,-
		LOGNAM=W^MBNAM			; make something to listen with
	$GETCHN_S CHAN=W^MBCHAN,-
		PRIBUF=W^GETBUF			; get the unit number
	MOVW	W^GETBUF+8+DIB$W_UNIT,W^MBXUN	; and save it
	$CREPRC_S QUOTA=W^QUOTA_LIST,-
		 MBXUNT=W^MBXUN			; create a subprocess with _S
	FAIL_CHECK SS$_NORMAL			; check for success
	MOVL	#RMS$_FNF,R6			; set exit status code
	CLRL	R7				; disable PID checking this time
	CALLS	#0,W^CRE_CHECK			; check the process exit code
;+
;
; test the PIDADR parameter with _G
;
;-
	NEXT_TEST
	MOVW	W^MBXUN,W^CRE+CREPRC$_MBXUNT	; set the MBX unit number
	$CREPRC_G W^CRE				; try _G and PIDADR param.
	FAIL_CHECK SS$_NORMAL			; check for success
	INCL	R7				; enable PID checking
	CALLS	#0,W^CRE_CHECK			; check the process exit code
	MOVL	#SS$_NORMAL,R6			; set expected status return
;+
;
; test the IMAGE param. with _S
;
;-
	NEXT_TEST
	$CREPRC_S QUOTA=W^QUOTA_LIST,-
		  IMAGE=W^IMAGE_NAME,-
		 MBXUNT=W^MBXUN,-
		 PIDADR=W^PID1			; try _S with IMAGE param.
	FAIL_CHECK SS$_NORMAL			; check success
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check the process exit code
;+
;
; test the INPUT param. with _G
;
;-
	NEXT_TEST
	MOVAL	W^IMAGE_NAME,W^CRE+CREPRC$_IMAGE ; set image name
	MOVAL	W^PID1,W^CRE+CREPRC$_PIDADR	; set the PID save address
	MOVAL	W^IN,W^CRE+CREPRC$_INPUT	; set the INPUT param.
	$CREPRC_G W^CRE				; try it
	FAIL_CHECK SS$_NORMAL			; check success
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check the process exit code
;+
;
; test the OUTPUT param. with _S
;
;-
	NEXT_TEST
	$CREPRC_S PIDADR=W^PID1,-
		  IMAGE =W^IMAGE_NAME,-
		  INPUT =W^IN,-
		  OUTPUT=W^OUT,-
		  MBXUNT=W^MBXUN,-
		  QUOTA =W^QUOTA_LIST		; try _S with OUT param.
	FAIL_CHECK SS$_NORMAL			; chec success
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check process exit code
;+
;
; test ERROR param. with _G
;
;-
	NEXT_TEST
	MOVAL	W^OUT,W^CRE+CREPRC$_OUTPUT	; set the output param.
	MOVAL	W^ERR,W^CRE+CREPRC$_ERROR	; set the error output param
	$CREPRC_G W^CRE				; try _G with ERROR param
	FAIL_CHECK SS$_NORMAL			; check for success
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check process exit code
;+
;
; test PRVADR param with _S
;
;-
	NEXT_TEST
	$CREPRC_S PIDADR=W^PID1,-
		  IMAGE =W^IMAGE_NAME,-
		  INPUT =W^IN,-
		  OUTPUT=W^OUT,-
		  ERROR =W^ERR,-
		  PRVADR=W^PRIVS,-
		  MBXUNT=W^MBXUN,-
		  QUOTA =W^QUOTA_LIST		; try _S with PRVADR param
	FAIL_CHECK SS$_NORMAL			; check success
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check image exit status
;+
;
; test PRCNAM param with _G
;
;-
	NEXT_TEST
	MOVAL	W^ERR,W^CRE+CREPRC$_ERROR	; set the ERROR param.
	MOVAL	W^PRIVS,W^CRE+CREPRC$_PRVADR	; set the PRVADR param.
	MOVAL	W^PROC_NAME,W^CRE+CREPRC$_PRCNAM ; set the process name
	$CREPRC_G W^CRE				; try _G with a PRCNAM
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	$GETJPI_S PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; get the process name
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; set service name
	CMPC3	#15,W^PRCNAM,W^PROC_NAME+8	; correct process name?
	BEQL	10$				; br if OK
	PUSHAL	W^PNS				; push string variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
10$:
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check image exit status
;+
;
; test BASPRI with _S and a lower priority
;
;-
	NEXT_TEST
	$CREPRC_S PIDADR = W^PID1,-
		   IMAGE = W^IMAGE_NAME,-
		   INPUT = W^IN,-
		  OUTPUT = W^OUT,-
		   ERROR = W^ERR,-
		  BASPRI = #1,-
		  PRVADR = W^PRIVS,-
		  MBXUNT = W^MBXUN,-
		   QUOTA = W^QUOTA_LIST		; try all that
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	$GETJPI_S PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; get the base priority
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; set service name
	CMPL	#1,W^PRIB			; is it correct?
	BEQL	20$				; br if OK
	PUSHL	W^PRIB				; push received
	PUSHL	#1				; push expected
	PUSHAL	W^BP				; push str variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
20$:
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check image exit status
;+
;
; test BASPRI with _S and a higher priority
;
;-
	NEXT_TEST
	MODE	TO,25$,KRNL,NOREGS		; kernal mode to access PHD
	MOVL	@#CTL$GL_PHD,R9			; get process header address
	MOVAL	PHD$Q_PRIVMSK(R9),W^PRIVMASK	; get priv mask address
	MODE	FROM,25$			; get back to user mode
	PRIV	ADD,SETPRI			; add SETPRI priv
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save the registers
	$CREPRC_S PIDADR = W^PID1,-
		   IMAGE = W^IMAGE_NAME,-
		   INPUT = W^IN,-
		  OUTPUT = W^OUT,-
		   ERROR = W^ERR,-
		  BASPRI = #4,-
		  PRVADR = W^PRIVS,-
		  MBXUNT = W^MBXUN,-
		   QUOTA = W^QUOTA_LIST		; try _S higher priority
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^GETJPI,W^SERV_NAME		; set the service name
	$GETJPI_S PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; get the base priority
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; reset the service name
	CMPL	#4,W^PRIB			; is the priority OK?
	BEQL	30$				; br if OK
	PUSHL	W^PRIB				; push received
	PUSHL	#4				; push expected
	PUSHAL	W^BP				; push the str variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
30$:
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check image exit status
;+
;
; test detached process
;
;-
	NEXT_TEST
	$CREPRC_S PIDADR = W^PID1,-
		   IMAGE = W^IMAGE_NAME,-
		   INPUT = W^IN,-
		  OUTPUT = W^OUT,-
		   ERROR = W^ERR,-
		  BASPRI = #2,-
		  PRVADR = W^PRIVS,-
		  MBXUNT = W^MBXUN,-
		   QUOTA = W^QUOTA_LIST,-
		     UIC = W^PROC_UIC		; try _S and all this
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	$GETJPI_S PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; get the process UIC
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; reset the service name
	CMPL	W^UIC,W^PROC_UIC		; is the UIC correct?
	BEQL	40$				; br if OK
	PUSHL	W^UIC				; push received
	PUSHL	W^PROC_UIC			; push expected
	PUSHAL	W^UIC_MSG			; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
40$:
	$WAKE_S	PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check the process exit status
;+
;
; test the STSFLG's _S with all set
;
;-
	NEXT_TEST
	MODE	TO,45$,KRNL,NOREGS		; kernal mode to access PHD
	MOVL	@#CTL$GL_PHD,R9			; get process header address
	MOVAL	PHD$Q_PRIVMSK(R9),W^PRIVMASK	; get priv mask address
	MODE	FROM,45$			; get back to user mode
	PRIV	ADD,PSWAPM			; add PSWAPM priv
	PRIV	ADD,NOACNT			; add NOACNT priv
	PRIV	ADD,NETMBX			; add NETMBX priv
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snap shot
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	$GETJPI_S ITMLST = W^GET_LIST		; get the current process privs
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; set the service name
	MOVQ	W^CURPRIV,W^PRIVS		; set the detached process privs
	$CREPRC_S PIDADR = W^PID1,-
		   IMAGE = W^IMAGE_NAME,-
		   INPUT = W^IN,-
		  OUTPUT = W^OUT,-
		   ERROR = W^ERR,-
		  BASPRI = #2,-
		  PRVADR = W^PRIVS,-
		  MBXUNT = W^MBXUN,-
		   QUOTA = W^QUOTA_LIST,-
		     UIC = W^PROC_UIC,-
		  STSFLG = #^XFF		; try every thing _S
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	$GETJPI_S PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; get process status flags
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; reset service name
	BICL	#JPI_STS_NMASK,STS		; clear out any extraneous 
						; bits set by the Swapper 
	CMPL	W^STS,#JPI_STS_MASK		; flags OK?
	BEQL	50$				; br if OK
	PUSHL	W^STS				; push received
	PUSHL	#JPI_STS_MASK			; push expected
	PUSHAL	W^STSFLGS			; push str variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
50$:
	$DELPRC_S PIDADR = W^PID1		; needed for bit 5 in STS
	CLRL	R6				; set expected status return
	CALLS	#0,W^CRE_CHECK			; check image exit status
	MOVL	#SS$_NORMAL,R6			; reset the expected status return
;+
;
; test the STSFLG's _G all clear
;
;-
	NEXT_TEST
	MOVAL	W^PRIVS,W^CRE+CREPRC$_PRVADR	; setup PRVADR parameter
	MOVAL	W^PROC_NAME,W^CRE+CREPRC$_PRCNAM ; setup PRCNAM parameter
	MOVL	#2,W^CRE+CREPRC$_BASPRI		; setup BASPRI parameter
	MOVL	W^PROC_UIC,W^CRE+CREPRC$_UIC	; setup UIC parameter
	$CREPRC_G W^CRE				; try it all _G
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	$GETJPI_S PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; get the process status flags
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CREPRC,W^SERV_NAME		; set the service name
	BICL	#JPI_STS_NMASK,STS		; clear out any extraneous 
						; bits set by the Swapper 
	CMPL	W^STS,#^X0			; are they all OK?
	BEQL	60$				; br if OK
	PUSHL	W^STS				; push received
	PUSHL	#^X0				; push expected
	PUSHAL	W^STSFLGS			; push str variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
60$:
	$WAKE_S PIDADR = W^PID1			; cause process termination
	CALLS	#0,W^CRE_CHECK			; check image exit status
.PAGE
.SBTTL GETJPI TESTS
;+
;
; $GETJPI tests
;
; test the default case with all items _S
;
;-
	NEXT_TEST
	MOVAL	W^GETJPI,W^SERV_NAME		; set service name
	MOVAL	W^UM,W^MODE			; set the mode
	PRIV	ADD,SETPRV			; get ready to set privileges
						; to known set for testing
	$SETPRV_S ENBFLG = #1,-			; enable expected privileges
		  PRVADR = PRVMASK
	$SETPRV_S PRVADR = NPRVMASK		; disable any extra privileges
						; set in SYSTEST account
	FAIL_CHECK SS$_NORMAL			; check success
	$GETJPI_S ITMLST = W^GET_LIST		; try _S
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^ACCOUNT,R6			; set questionable data adr
	MOVAL	W^JPI_GOOD,R7			; set good data adr
	MOVL	#JPI_LIST_SIZE,R8		; set the byte count
	CALLS	#0,W^JPI_CHECK			; check the results
;+
;
; test _G default case with all items
;
;-
	NEXT_TEST
	$GETJPI_G W^GET1			; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^JPI_CHECK			; check the results
;+
;
; test local EFN
;
;-
	NEXT_TEST
	MOVAL	W^CREPRC,W^SERV_NAME		; set service name
	$CREPRC_S QUOTA  = W^QUOTA_LIST,-
		  IMAGE  = W^IMAGE_NAME,-
		  PIDADR = W^PID1,-
		  PRCNAM = W^PROC_NAME		; create the target process
	FAIL_CHECK SS$_NORMAL			; check for success
	MOVAL	W^GETJPI,W^SERV_NAME		; reset the service name
	$GETJPI_S EFN    = #1,-
		  ITMLST = W^GET_LIST		; try _S with EFN
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN    = #1			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
	MOVL	#1,W^GET+GETJPI$_EFN		; set the EFN
	MOVAL	W^PID1,W^GET+GETJPI$_PIDADR	; set the target process PID
	$GETJPI_G W^GET				; try _G with target process
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN	 = #1			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
;+
;
; test common EFN with _S
;
;-
	NEXT_TEST
	$ASCEFC_S EFN  = #65,-
		  NAME = W^EFC_NAME		; get a common EF
	$GETJPI_S EFN  = #65,-
		ITMLST = W^GET_LIST		; try _S with CEFN
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN  = #65			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check results
	MOVL	#65,W^GET+GETJPI$_EFN		; set the common EFC
	$GETJPI_G  W^GET			; try _G, CEFC, and target process
	FAIL_CHECK SS$_NORMAL			; check for success
	$WAITFR_S EFN  = #65			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
	$DACEFC_S EFN  = #65			; release the CEFC

;+
;
; test PIDADR
;
;-
	NEXT_TEST
	$GETJPI_S EFN    = #2,-
		  PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; try _S with PID
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN = #2			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
;+
;
; test PRCNAM
;
;-
	NEXT_TEST
	$GETJPI_S EFN    = #3,-
		  PRCNAM = W^PROC_NAME,-
		  ITMLST = W^GET_LIST		; try _S with PRCNAM
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN    = #3			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
	$GETJPI_S EFN    = #16,-
		  PRCNAM = W^TEST_MOD_NAME_D,-
		  ITMLST = W^GET_LIST		; try _S with PRCNAM on self
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN    = #16			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
;+
;
; test IOSB
;
;-
	NEXT_TEST
	$GETJPI_S EFN    = #4,-
		  IOSB   = W^IOSTAT,-
		  PRCNAM = W^IMAGE_NAME,-
		  PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; try all this stuff
	FAIL_CHECK SS$_NORMAL			; check success
	$WAITFR_S EFN = #4			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
;+
;
; test ASTADR and ASTPRM _S
;
;-
	NEXT_TEST
	$SETAST_S ENBFLG = #0			; disable AST's
	$GETJPI_S ASTADR = B^20$,-
		  ASTPRM = #5,-
		  IOSB   = W^IOSTAT,-
		  PRCNAM = W^IMAGE_NAME,-
		  PIDADR = W^PID1,-
		  ITMLST = W^GET_LIST		; try an AST
	FAIL_CHECK SS$_NORMAL			; check success
	$SETAST_S ENBFLG = #1			; let er rip
	$HIBER_S				; wait here for completion
	BRB	40$				; jump over the AST routine
20$:
	.WORD ^M<R2,R3,R4>
	CMPL	#5,4(AP)			; is this the right param
	BEQL	30$				; br if OK
	PUSHL	4(AP)				; push the received
	PUSHL	#5				; push expected
	PUSHAL	W^AST_PARAM			; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
30$:
	CALLS	#0,W^JPI_CHECK			; check the results
	$WAKE_S					; time to wake up
	RET					; return
40$:
;+
;
; test ASTADR and ASTPRM _G to test all offset definitions
;
;-
	NEXT_TEST
	$SETAST_S ENBFLG = #0			; disable AST's
	MOVL	#12,W^GET+GETJPI$_EFN		; setup EFN param
	MOVAL	W^PID1,W^GET+GETJPI$_PIDADR	; setup PIDADR param
	MOVAL	W^IMAGE_NAME,W^GET+GETJPI$_PRCNAM ; setup PRCNAM param
	MOVAL	W^IOSTAT,W^GET+GETJPI$_IOSB	; setup IOSB param
	MOVAL	B^20$,W^GET+GETJPI$_ASTADR	; setup ASTADR param
	MOVL	#-1,W^GET+GETJPI$_ASTPRM	; setup ASTPRM param
	$GETJPI_G W^GET				; try it all _G
	FAIL_CHECK SS$_NORMAL			; check success
	$SETAST_S ENBFLG = #1			; let er rip
	$HIBER_S				; wait here for completion
	BRB	40$				; jump over the AST routine
20$:
	.WORD ^M<R2,R3,R4>
	CMPL	#-1,4(AP)			; is this the right param
	BEQL	30$				; br if OK
	PUSHL	4(AP)				; push the received
	PUSHL	#-1				; push expected
	PUSHAL	W^AST_PARAM			; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
30$:
	CALLS	#0,W^JPI_CHECK			; check the results
40$:
;+
;
; test a shorter list starting with a PCB item followed by a JIB item
;
;-
	NEXT_TEST
	$GETJPI_S EFN   = #17,-
		 PIDADR = W^PID1,-
		 ITMLST = W^SHORT_LIST		; try _S, target process, short list
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^CPULIM,R6			; set questionable data adr
	MOVAL	W^JPI_GOOD_SHRT,R7		; set good data adr
	MOVL	#JPI_LIST_SIZE1,R8		; set the byte count
	CALLS	#0,W^JPI_CHECK			; check the results
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$GETJPI_S EFN   = #18,-
		 PRCNAM = W^TEST_MOD_NAME_D,-
		 ITMLST = W^SHORT_LIST		; try _S, self, short list
	FAIL_CHECK SS$_NORMAL			; check for success
	$WAITFR_S EFN   = #18			; wait for completion
	CALLS	#0,W^JPI_CHECK			; check the results
	$WAKE_S PIDADR = W^PID1			; get rid of the target process
	TEST_END

.SBTTL	ROUTINES
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)			; set number past R0-R1 and save
	BICL2	#3,R1				; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; Mode	#3	PUSHAL STRING_VAR
;		CALLS #1,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	CMPB	(AP),#1				; is this just a message?
	BEQL	20$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	30$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
	BRB	30$				; goto output message
20$:
	MOVL	4(AP),W^MSGVEC1+12		; save string address
	$PUTMSG_S W^MSGVEC1			; print the message
	BRB	40$				; skip the other message
30$:
	$PUTMSG_S W^MSGVEC			; print the message
40$:
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET
	.SBTTL CRE_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check the process exit status of a created process.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^CRE_CHECK	; save R2-R11
;
; INPUT PARAMETERS:
;	R6 = Expected process exit status
;	R7 = PID check flag BIT0 = 1 means check the PID
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

CRE_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	$QIOW_S EFN  = #1,-
		FUNC = #IO$_READVBLK,-
		CHAN = W^MBCHAN,-
		IOSB = W^IOSTATUS,-
		  P1 = W^MBUF,-
		  P2 = #100			; read the mail
	CMPL	W^MBUF+ACC$L_FINALSTS,R6	; is the status as expected?
	BEQL	10$				; br if OK
	PUSHL	W^MBUF+ACC$L_FINALSTS		; push received
	PUSHL	R6				; push expected
	PUSHAL	W^EXP				; push string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
10$:
	BLBC	R7,20$				; should we check the PID?
	CMPL	W^PID1,W^IOSTATUS+4		; check the PID
	BEQL	20$				; br if its good
	PUSHL	W^IOSTATUS+4			; push received
	PUSHL	W^PID1				; push expected
	PUSHAL	W^PID_STR			; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the failure
20$:
	RET
	.SBTTL JPI_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to check the results of a JPI service
;
; CALLING SEQUENCE:
;	CALLS	#0,W^JPI_CHECK	; check the results
;
; INPUT PARAMETERS:
;	R6 = questionable data address
;	R7 = good data address
;	R8 = byte count
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

ARGLST1:
	.BLKL	3
CTRSTR:
	.ASCID	/data error at offset !XW, good data = !XB bad data = !XB./
;
JPI_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPC3	R8,(R6),(R7)			; check the buffer
	BEQL	10$				; br if good
	SUBL3	#ACCOUNT,R1,W^ARGLST1		; get buffer offset
	MOVZBL	(R3),W^ARGLST1+4		; get the good data
	MOVZBL	(R1),W^ARGLST1+8		; get the bad data
	$FAOL_S	W^CTRSTR,W^ML,W^GETBUF,W^ARGLST1 ; make it readable
	PUSHAL	W^ML				; push the desc. address
	CALLS #1,W^PRINT_FAIL			; print the failure
10$:
	RET

.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSS35
