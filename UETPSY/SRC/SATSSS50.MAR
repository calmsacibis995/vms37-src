	.TITLE	SATSSS50 SATS SYSTEM SERVICE TESTS  $ASCEFC (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSTST (SATS SYSTEM SERVICE TESTS)
;
; ABSTRACT:
;
;		THIS MODULE CONTAINS SUBROUTINES WHICH, WHEN LINKED
; WITH SUCCOMMON.OBJ, FORM TEST MODULE SATSSS50 TO TEST SUCCESSFUL
; OPERATION OF THE $ASCEFC SYSTEM SERVICE. THE SERVICE IS INVOKED
; UNDER VARIOUS INPUT CONDITIONS WITH VARYING INPUT PARAMETERS. ONLY
; SUCCESSFUL STATUS CODES ARE EXPECTED IN THIS TEST MODULE.  CORRECT 
; OPERATION OF THE SERVICE FOR EACH OF ITS ISSUANCES IS VERIFIED BY
; CHECKING FOR AN SS$_NORMAL STATUS CODE, EXPECTED RETURN ARGUMENTS
; AND EXPECTED FUNCTIONALITY PERFORMED.
;
; ENVIRONMENT:	USER MODE IMAGE; NEEDS CMKRNL PRIVILEGE,
;		DYNAMICALLY ACQUIRES OTHER PRIVILEGES, AS NEEDED.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: DEC, 1977
;
; MODIFIED BY:
;
;		VERSION 1.5 : 25-MAY-79
;
; 01  LDJ  10/11/79	Fixed bug caused by DIB$K_LENGTH change ACG052.RNO mem
;
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PRVDEF				; PRIVILEGE BIT DEFINITIONS
	$PHDDEF				; PROCESS HEADER OFFSETS
	$PQLDEF				; PROCESS QUOTA CODES
	$DIBDEF				; DEVICE INFO BLOCK OFFSETS
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
;
; BIT NUMBERS FOR FLAGS CONTAINED IN "FLAGS" BYTE:
;
FLG_V_CLAOTHEV	= 0			; ASCEFC ISSUED FOR CLUS A, OTHER E.F. GROUP
FLG_V_CLAPROC	= 1			; ASCEFC ISSUED FOR CLUSTER A, ...
					; ... EVENT FLAG GROUP 2, CREATED PROC
FLG_V_MKFORMED	= 2			; CLUSTER A MASK HAS BEEN ... 
					; ... FORMED FOR THIS TEST CASE
;
; OWN STORAGE:
;
	.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
TEST_MOD_NAME::	STRING	C,<SATSSS50>	; TEST MODULE NAME
TEST_MOD_NAME_D: STRING	I,<SATSSS50>	; TEST MODULE NAME DESCRIPTOR
MSG1_INP_CTL:	STRING	I,<  SSASC!4ZW: CONDITIONS:>
					; FAO CTL STRING FOR MSG1 IN SUCCOMMON.MAR
MSG3_ERR_CTL::	STRING	I,< *SSASC!4ZW: !AS> 
					; FAO CTL STRING FOR MSG3 IN SUCCOMMON.MAR
CREPRN:		STRING	I,<SATSSS50_CRE> ; CREATED PROCESS NAME
CLUS_NAME_A:	STRING	I,<SATSSS50_CLA> ; CLUSTER A NAME
CLUS_NAME_B:	STRING	I,<SATSSS50_CLB> ; CLUSTER B NAME
IMAGNAM:	STRING	I,<SYSTST$RES:SATSUT04.EXE> ; IMAGE NAME FOR CREATED PROC
QUOTALIST:	$QUOTA	CPULM,0		; INFINITE CPU
		$QUOTA	BYTLM,512	; BYTE LIMIT FOR BUFFERED I/O
		$QUOTA	FILLM,2		; OPEN FILE COUNT LIMIT
		$QUOTA	PGFLQUOTA,10	; PAGING FILE QUOTA
		$QUOTA	PRCLM,2		; SUBPROCESS QUOTA
		$QUOTA	TQELM,3		; TIMER QUEUE ENTRY QUOTA
		$QUOTA	LISTEND		; DEFINES END OF LIST
	.PAGE
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
PRIVMASK:	.BLKQ	1		; ADDR OF PRIVILEGE MASK (IN PHD)
MBXCHAN:	.BLKL	1		; CHAN NO. FOR MAILBOX FOR CREATED PROCESS
MBXCHANINFO:				; CHANNEL INFO RETURNED BY GETCHN
		.LONG	DIB$K_LENGTH
		.ADDRESS .+4
		.BLKB	DIB$K_LENGTH
MBXUNIT:	.BLKL	1		; SAVE AREA FOR MAILBOX UNIT NUMBER
MBXBUFF:	STRING	O,120		; MAILBOX BUFFER FOR CREATED PROCESS
ASCTOT:		.BLKB	1		; NO. OF ASCEFC'S (REF COUNT) FOR CLUSTER A
OTHER_EFN:	.BLKL	1		; SAVE AREA FOR "OTHER THAN SUBJECT" EFN
CLUS_MASK:	.BLKL	1		; CLUSTER MASK	; USED TO SET CLUSTER A
CLUS_STATE:	.BLKL	1		; STATE OF CLUSTER A
FLAGS:		.BYTE	0		; GEN. PURP. FLAGS; BIT DEFINITIONS ABOVE
	.PAGE
	.SBTTL	CONDITION TABLES
;
;	***** CONDITION TABLES FOR ASCEFC SYSTEM SERVICE *****
;
	COND	1,LONG,<PERM>,-
		  <PERMANENT>,-
		  <TEMPORARY>,-
 
		    .LONG	1	; PERMANENT CLUSTER
		    .LONG	0	; TEMPORARY CLUSTER
;
	COND	2,NOTARG,<PRE-EXISTING ASSOCIATION>,-
		  <EVENT FLAG GROUP NOT ALREADY ASSOCIATED>,-
		  <EVENT FLAG GROUP ALREADY ASSOCIATED TO SUBJECT CLUSTER>,-
		  <EVENT FLAG GROUP ALREADY ASSOCIATED TO NON-SUBJECT CLUSTER>,-
 
	COND	3,NOTARG,<REFERENCE COUNT FOR SUBJECT CLUSTER>,-
		  <ZERO>,-
		  <ONE>,-
		  <GREATER THAN ONE (TWO)>,-
 
		    .BYTE	0,1,2
;
	COND	4,LONG,<EFN>,-
		  <EVENT FLAGS 64-95 (EV FLAG GROUP 2)>,-
		  <EVENT FLAGS 96-127 (EV FLAG GROUP 3)>,-
 
		    .LONG	64	; EVENT FLAG GROUP 2
		    .LONG	96	; EVENT FLAG GROUP 3
;
	COND	5,NULL
 
	.PSECT	SATSSS50,RD,WRT,EXE
	.PAGE
	.SBTTL	TM_SETUP, TM_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		TM_SETUP AND TM_CLEANUP ARE CALLED TO PERFORM
; REQUIRED HOUSEKEEPING AT THE BEGINNING AND END, RESPECTIVELY, OF
; TEST MODULE EXECUTION.
;
; CALLING SEQUENCE:
;
;	BSBW TM_SETUP   BSBW TM_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	TM_SETUP:  COND TABLE INDEX REGISTERS (R2,3,4,5,6) CLEARED;
;		   ALL PRIVILEGES ACQUIRED.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



TM_SETUP::
	CLRL	R2			; INITIALIZE
	CLRL	R3			; .. CONDITION
	CLRL	R4			; .... TABLE
	CLRL	R5			; ...... INDEX
	CLRL	R6			; ........ REGISTERS
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE BEGIN MSG
	MOVAL	TEST_MOD_SUCC,TMD_ADDR	; ASSUME END MSG WILL SHOW SUCCESS
	INSV	#SUCCESS,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR SUCCESS
	MODE	TO,5$,KRNL		; KERNEL MODE TO ACCESS PHD
	MOVL	@#CTL$GL_PHD,R9		; GET PROCESS HEADER ADDRESS
	MOVAL	PHD$Q_PRIVMSK(R9),PRIVMASK ; GET PRIV MASK ADDRESS
	MODE	FROM,5$	; BACK TO USER MODE
	PRIV	ADD,ALL			; GET ALL PRIVILEGES
	$SETPRN_S TEST_MOD_NAME_D 	; SET PROCESS NAME
	SS_CHECK  NORMAL		; CHECK STATUS CODE RETURNED FROM SETPRN
	$CREMBX_S CHAN=MBXCHAN, LOGNAM=CREPRN, - ; GET MAILBOX FOR PROCESS
		  MAXMSG=#120, PROMSK=#0, BUFQUO=#240
	SS_CHECK NORMAL			; CHECK NORMAL COMPLETION
	$GETCHN_S CHAN=MBXCHAN, -
		  PRIBUF=MBXCHANINFO	; GET CHAN INFO (UNIT NUMBER)
	SS_CHECK NORMAL			; CHECK NORMAL COMPLETION
	MOVZWL	MBXCHANINFO+8+DIB$W_UNIT,MBXUNIT ; SAVE MAILBOX UNIT NUMBER
	RSB				; RETURN TO MAIN ROUTINE
TM_CLEANUP::
	$DELMBX_S  MBXCHAN		; DELETE TERMINATION MAILBOX
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE END MSG
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	CONDITION SUBROUTINES - SETUP AND CLEANUP 
;++
; FUNCTIONAL DESCRIPTION:
;
;		CONDX AND CONDX_CLEANUP ARE SUBROUTINES WHICH ARE EXECUTED
; BEFORE AND AFTER THE VERIFY SUBROUTINE, RESPECTIVELY, WHENEVER A NEW
; CONDITION X VALUE IS SELECTED (SEE FUNCTIONAL DESCRIPTION OF SUCCOMMON
; ROUTINE IN SUCCOMMON.MAR). ANY SETUP FUNCTION PARTICULAR TO THE 
; CONDITION X TABLE IS INCLUDED IN THE CONDX SUBROUTINE AND CLEANED
; UP, IF NECESSARY, IN THE CONDX_CLEANUP SUBROUTINE. THIS INCLUDES,
; ESPECIALLY, CODE TO DETECT CONFLICTS AMONG CURRENT ENTRIES IN TWO
; OR MORE CONDITION TABLES. IF A CONFLICT IS DETECTED, A NON-ZERO
; VALUE IS STORED INTO CONFLICT, WHICH CAUSES THE CALLING ROUTINE
; (SUCCOMMON) TO SKIP THE CURRENT ENTRY IN THE CONDITION X TABLE.
;
; CALLING SEQUENCE:
;
;	BSBW CONDX   BSBW CONDX_CLEANUP
;	  WHERE X = 1,2,3,4,5
;
; INPUT PARAMETERS:
;
;	CONFLICT = 0
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;
; OUTPUT PARAMETERS:
;
;	CONFLICT SET TO NON-ZERO IF COND TABLE CONFLICT DETECTED.
;
; IMPLICIT OUTPUTS:
;
;	R2,3,4,5,6 PRESERVED
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



COND1::
	RSB				; RETURN TO MAIN ROUTINE
COND1_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND2::
	RSB				; RETURN TO MAIN ROUTINE
COND2_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND3::
	TSTB	COND3_E[R4]		; IS REFERENCE COUNT ZERO ?
	BNEQU	COND3X			; NO -- ALL IS OK, JUST EXIT
	CMPB	R3,#1			; YES -- DOES COND 2 SPECIFY SAME CLUSTER ?
	BNEQU	COND3X			; NO -- ALL IS OK, JUST EXIT
	MOVB	ONES,CONFLICT		; YES -- INDICATE CONFLICT
COND3X:
	RSB				; RETURN TO MAIN ROUTINE
COND3_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND4::
	RSB				; RETURN TO MAIN ROUTINE
COND4_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
COND5::
	RSB				; RETURN TO MAIN ROUTINE
COND5_CLEANUP::
	RSB				; RETURN TO MAIN ROUTINE
	.PAGE
	.SBTTL	FORM_CONDS
;++
; FUNCTIONAL DESCRIPTION:
;
; 		FORM_CONDS FORMATS AND PRINTS INFORMATION ABOUT
;  THE CURRENT ELEMENT IN EACH OF THE CONDITION TABLES.
;
; CALLING SEQUENCE:
;
;	BSBW FORM_CONDS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_T - TITLE TEXT FOR CONDX TABLE
;		CONDX_TAB - ELEMENT TEXT FOR CONDX TABLE
;		CONDX_C - CONTEXT OF THE CONDX TABLE
;		CONDX_E - DATA ELEMENTS OF THE CONDX TABLE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



FORM_CONDS::
	$FAO_S	MSG1_INP_CTL,FAO_LEN,FAO_DESC,TESTNUM
					; FORMAT CONDITIONS HEADER MSG
	BSBW	OUTPUT_MSG		; ... AND PRINT IT
	CMPB	#COND1_C,#NULL		; IS CONDITION 1 NULL ?
	BNEQU	10$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
10$:
	MOVAL	COND1_T,MSG_A		; SAVE ADDRESS OF CONDITION 1 TITLE FOR FAO
	MOVL	COND1_TAB[R2],MSG_B 	; SAVE ADDR OF COND 1 CURR TEXT ELT FOR FAO
	MOVB	#COND1_C,MSG_CTXT 	; SAVE CONDITION 1 CONTEXT FOR FAO
	MOV_VAL	COND1_C,COND1_E[R2],MSG_DATA1 ; GIVE COND 1 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 1 MSG
	CMPB	#COND2_C,#NULL		; IS CONDITION 2 NULL ?
	BNEQU	20$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
20$:
	MOVAL	COND2_T,MSG_A		; SAVE ADDRESS OF CONDITION 2 TITLE FOR FAO
	MOVL	COND2_TAB[R3],MSG_B 	; SAVE ADDR OF COND 2 CURR TEXT ELT FOR FAO
	MOVB	#COND2_C,MSG_CTXT 	; SAVE CONDITION 2 CONTEXT FOR FAO
	MOV_VAL	COND2_C,COND2_E[R3],MSG_DATA1 ; GIVE COND 2 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 2 MSG
	CMPB	#COND3_C,#NULL		; IS CONDITION 3 NULL ?
	BNEQU	30$			; NO -- CONTINUE
	BRW	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
30$:
	MOVAL	COND3_T,MSG_A		; SAVE ADDRESS OF CONDITION 3 TITLE FOR FAO
	MOVL	COND3_TAB[R4],MSG_B 	; SAVE ADDR OF COND 3 CURR TEXT ELT FOR FAO
	MOVB	#COND3_C,MSG_CTXT 	; SAVE CONDITION 3 CONTEXT FOR FAO
	MOV_VAL	COND3_C,COND3_E[R4],MSG_DATA1 ; GIVE COND 3 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 3 MSG
	CMPB	#COND4_C,#NULL		; IS CONDITION 4 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND4_T,MSG_A		; SAVE ADDRESS OF CONDITION 4 TITLE FOR FAO
	MOVL	COND4_TAB[R5],MSG_B 	; SAVE ADDR OF COND 4 CURR TEXT ELT FOR FAO
	MOVB	#COND4_C,MSG_CTXT 	; SAVE CONDITION 4 CONTEXT FOR FAO
	MOV_VAL	COND4_C,COND4_E[R5],MSG_DATA1 ; GIVE COND 4 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 4 MSG
	CMPB	#COND5_C,#NULL		; IS CONDITION 5 NULL ?
	BEQLU	FORM_CONDSX		; YES -- SUBROUTINE IS FINISHED
	MOVAL	COND5_T,MSG_A		; SAVE ADDRESS OF CONDITION 5 TITLE FOR FAO
	MOVL	COND5_TAB[R6],MSG_B 	; SAVE ADDR OF COND 5 CURR TEXT ELT FOR FAO
	MOVB	#COND5_C,MSG_CTXT 	; SAVE CONDITION 5 CONTEXT FOR FAO
	MOV_VAL	COND5_C,COND5_E[R6],MSG_DATA1 ; GIVE COND 5 DATA VALUE TO FAO
	BSBW	WRITE_MSG2		; FORMAT AND WRITE CONDITION 5 MSG
FORM_CONDSX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VERIFY
;++
; FUNCTIONAL DESCRIPTION:
;
;		VERIFY IS CALLED ONCE FOR EACH COMBINATION OF CONDITION
; TABLE VALUES (AS DETERMINED BY THE INDEX REGISTERS R2,3,4,5,6 FOR
; COND TABLES 1,2,3,4,5, RESPECTIVELY). VERIFY ESTABLISHES THE CONDITIONS
; SPECIFIED BY THE COND TABLES AND ISSUES THE SUBJECT SYSTEM SERVICE
; ($ASCEFC). THEN, THE SUCCESSFUL OPERATION OF THE SERVICE IS VERIFIED
; BY EXAMINING THE STATUS CODE RETURNED, THE VALUES FOR RETURN ARGUMENTS
; AND THE FUNCTIONALITY PERFORMED. THE EXAMINATIONS TAKE THE FORM OF 
; COMPARISONS AGAINST EXPECTED VALUES. ANY FAILING COMPARISON CAUSES AN
; ERR_EXIT MACRO TO BE EXECUTED (EITHER DIRECTLY, OR INDIRECTLY,
; THROUGH THE SS_CHECK MACRO); ERR_EXIT SETS EFLAG TO NON-ZERO,
; PRINTS ERROR MESSAGES AND CAUSES AN IMMEDIATE RSB TO CALLER.
; WHEN ERR_EXIT IS EXECUTED, FURTHER CALLS TO VERIFY ARE SUPPRESSED,
; AND, AFTER EXECUTING CLEANUP SUBROUTINES, THE IMAGE EXITS.
;
; CALLING SEQUENCE:
;
;	BSBW VERIFY
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	VERIFY HAS NO OUTPUT. SINCE ITS PURPOSE IS TO TEST FOR ERRORS,
;	IT MERELY RETURNS TO CALLER NORMALLY AFTER THE TESTS, PROVIDING
;	ALL WERE SUCCESSFUL; IF AN ERROR IS DISCOVERED, RETURN IS VIA
;	AN ERR_EXIT OR SS_CHECK MACRO, BOTH OF WHICH DOCUMENT DETECTED
;	ERRORS.
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VERIFY::
	TSTB	CFLAG			; SHOULD CONDITIONS BE PRINTED ?
	BEQL	5$			; NO -- CONTINUE
	BSBW	FORM_CONDS		; YES -- FMT & PRINT ALL CONDS FOR THIS T.C.
5$:
	CLRB	FLAGS			; RE-INIT ALL FLAGS FOR NEXT TEST CASE
	CLRB	ASCTOT			; CLEAR REFERENCE CNT FOR (SUBJECT) CLUST A
	TSTL	R3			; EV FLAG GROUP HAVE PRIOR ASSOCIATION ?
	BEQL	11$			; NO -- CONTINUE
	CMPL	#1,R3			; YES -- PRIOR ASSOCIATION WITH CLUSTER A ?
	BNEQ	7$			; NO -- MUST BE CLUSTER B
	INCB	ASCTOT			; YES -- INCR REF COUNT FOR CLUSTER A
	MOVAL	CLUS_NAME_A,R7		; ... AND SET UP CLUSTER NAME FOR ASCEFC
	BRB	9$			; GO ISSUE PRELIMINARY SERVICE
7$:
	MOVAL	CLUS_NAME_B,R7		; SET UP CLUSTER NAME FOR ASCEFC
9$:
	MOVL	EFN[R5],R10		; EFN MUST BE IN R10 FOR LATER CALL
	$ASCEFC_S EFN=R10, NAME=(R7), PERM=PERM[R2]
	SS_CHECK NORMAL			; CHECK SERVICE COMPLETION
	CMPL	#CLUS_NAME_A,R7		; DID WE ASSOCIATE CLUSTER A ?
	BNEQU	11$			; NO -- SKIP BUILDING OF CLUSTER A
	BSBW	BUILD_CLUST		; BUILD CLUSTER A
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	11$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
11$:
	SUBB3	ASCTOT,COND3_E[R4],R7 	; CALC. NO. OF ASCEFC'S TO BE ISSUED
	TSTB	R7			; ANY ASCEFC'S TO ISSUE ?
	BNEQU	14$			; YES -- CONTINUE
	BRW	25$			; NO -- GO ISSUE SUBJECT ASCEFC
14$:
	CLRL	R8			; ASSUME SECOND COND 4 ELEMENT
	TSTL	R5			; FIRST COND 4 ELEMENT ?
	BNEQU	16$			; NO -- IT'S SECOND COND 4 ELEMENT
	INCL	R8			; YES -- USE R8 AS INDEX TO 2ND ELEMENT
16$:
	MOVL	EFN[R8],R10		; GET EFN OF "OTHER" EV FLAG GROUP
	MOVL	R10,OTHER_EFN		; SAVE EFN OF "OTHER" GROUP
	BBSS	#FLG_V_CLAOTHEV,FLAGS,.+1 ; INDICATE A LATER $DACEFC IS NEEDED
	$ASCEFC_S EFN=R10, NAME=CLUS_NAME_A, PERM=PERM[R2]
					; ASSOC. "OTHER" EV FLAG GROUP WITH CLUST A
	SS_CHECK NORMAL			; CHECK FOR NORMAL COMPLETION
	BSBW	BUILD_CLUST		; BUILD CLUSTER A
	TSTB	EFLAG			; IS AN ERROR BEING PROCESSED ?
	BEQL	20$			; NO -- CONTINUE
	BRW	VERIFYX			; YES -- RETURN IMMEDIATELY
20$:
	CMPB	#2,R7			; MUST WE DO ANOTHER ASCEFC ?
	BNEQU	25$			; NO -- GO ISSUE SUBJECT ASCEFC
	BBSS	#FLG_V_CLAPROC,FLAGS,.+1 ; INDICATE A LATER $DACEFC IS NEEDED
	$CREPRC_S PRCNAM=CREPRN, IMAGE=IMAGNAM, -
		  MBXUNT=MBXUNIT, QUOTA=QUOTALIST
					; ISSUE ASCEFC IN A CREATED PROCESS
	SS_CHECK NORMAL			; CHECK COMPLETION OF CREPRC
	$HIBER_S			; SLEEP UNTIL CREATED PROCESS DOES $ASCEFC
25$:
;
; ****** SYSTEM SERVICE CALL WHICH IS THE SUBJECT OF THIS TEST CASE ******
;
	$ASCEFC_S EFN=EFN[R5], -
		  NAME=CLUS_NAME_A, -
		  PERM=PERM[R2]
	CMPL	R0,#SS$_NORMAL		; CODE RECEIVED = CODE EXPECTED ?
	BEQLU	30$			; YES -- CONTINUE
	MOVL	#SS$_NORMAL,EXPV 	; LOAD UP EXPECTED AND ...
	MOVL	R0,RECV			; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT STATUS CODE RETURNED FROM ASCEFC>
30$:
;
;  ENSURE THAT SETEF'S CAN BE PROPERLY ISSUED ON CLUSTER A
;    BY SETTING THE TWO HI-ORDER FLAGS OF THE CLUSTER (I.E.,
;    94-95 OR 126-127).
;
	MOVL	EFN[R5],R7		; GET FIRST EVENT FLAG OF CLUSTER INTO REG
	ADDL2	#30,R7			; COMPUTE 2ND-TO-HIGHEST EV FLAG NO.
	$SETEF_S  EFN=R7		; ATTEMPT TO SET FLAG IN CLUSTER A
	SS_CHECK WASCLR			; FLAG SHOULD HAVE BEEN CLEAR (FROM ASCEFC)
	INCL	R7			; POINT REG 7 TO HIGHEST EV FLAG IN CLUSTER
	$SETEF_S  EFN=R7		; SET ANOTHER FLAG FOR GOOD MEASURE
	SS_CHECK WASCLR			; CHECK FOR PRIOR CLEAR CONDITION
;
;   SET UP REG 7 TO CONTAIN THE MASK OF EXPECTED EVENT FLAG SETTINGS
;
	BBS	#FLG_V_MKFORMED,FLAGS,40$ ; BRANCH IF CLUS_MASK FORMED
	CLRL	R7			; SUBJECT ASCEFC GETS NEW CLUSTER; 0 MASK
	BRB	45$			; GO SET 2 MORE MASK BITS (FOR SETEF'S ABOVE)
40$:
	MOVL	CLUS_MASK,R7		; USE EXISTING CLUS_MASK
45$:
	INSV	#^B11,#30,#2,R7		; TURN ON 2 HI-ORDER MASK BITS FOR SETEF'S
	$READEF_S EFN=EFN[R5], STATE=CLUS_STATE
					; READ CURRENT STATE OF CLUSTER A
	BLBS	R0,50$			; CONTINUE IF NORMAL COMPLETION
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
50$:
	CMPL	CLUS_STATE,R7		; IS CLUSTER A STATE = THAT EXPECTED ?
	BEQLU	55$			; YES -- CONTINUE WITH VERIFICATION
	MOVL	R7,EXPV			; NO -- LOAD EXPECTED AND ...
	MOVL	CLUS_STATE,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<PRE-EXISTING CLUSTER STATE NOT OBTAINED AFTER ASCEFC>
55$:
    ;
    ; TO VERIFY THE ASCEFC REFERENCE COUNT, THE FOLLOWING CODE
    ;   ISSUES A DACEFC FOR EACH ASCEFC ISSUED BY THIS TEST CASE.
    ;
	$DACEFC_S EFN=EFN[R5]		; DISASSOCIATE SUBJECT ASCEFC
	SS_CHECK NORMAL			; MAKE SURE IT COMPLETED OK
60$:
	BBSC	#FLG_V_CLAPROC,FLAGS,62$ 
					; HAVE CREATED PROCESS ISSUE DACEFC IF NEC.
	BBSC	#FLG_V_CLAOTHEV,FLAGS,63$ ; ISSUE ANOTHER DACEFC IF NEC.
	BRB	64$			; ALL FLAGS CLEAR; REF COUNT 0
62$:
	BRW	80$			; NEED A WORD'S WORTH OF BRANCH
63$:
	BRW	85$			; NEED A WORD'S WORTH OF BRANCH
64$:
;
;   AT THIS POINT, ASCEFC REFERENCE COUNT SHOULD BE 0.
;   ISSUE ANOTHER ASCEFC TO CHECK PERM/TEMP SETTING OF CLUSTER A
;
	$ASCEFC_S EFN=EFN[R5], NAME=CLUS_NAME_A ; ONE MORE ASSOCIATE
	SS_CHECK NORMAL			; CHECK IT
	$READEF_S EFN=EFN[R5], STATE=CLUS_STATE ; READ CLUSTER A
	BLBS	R0,65$			; CONTINUE IF NORMAL COMPLETION
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
65$:
	TSTL	PERM[R2]		; IS THIS A PERMANENT CLUSTER ?
	BNEQU	70$			; YES -- KEEP EXPECTED STATE VALUE FRM ABOVE
	CLRL	R7			; NO -- EXPECT A ZERO CLUSTER
70$:
	CMPL	CLUS_STATE,R7		; CLUSTER A STATE = THAT EXPECTED ?
	BEQLU	71$			; YES -- GO FINISH UP
	MOVL	R7,EXPV			; NO -- LOAD EXPECTED AND ...
	MOVL	CLUS_STATE,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<INCORRECT CLUSTER STATE AFTER DACEFC'S>
71$:
	$DLCEFC_S NAME=CLUS_NAME_A 	; CLEAR PERM INDICATOR IF PRESENT
	SS_CHECK NORMAL			; EXPECT NORMAL COMPLETION
	$DACEFC_S EFN=EFN[R5]		; ... AND DISASSOCIATE
	SS_CHECK NORMAL			; ...........
	BRW	VERIFYX			; THIS TEST CASE IS COMPLETE
	.PAGE
80$:
	$WAKE_S PRCNAM=CREPRN		; WAKE CREATED PROCESS TO GET DACEFC ISSUED
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS CODE
	$QIOW_S	CHAN=MBXCHAN, FUNC=#IO$_READVBLK, -
		P1=MBXBUFF+8, P2=MBXBUFF
					; ... AND  WAIT FOR IT TO SEND MAIL
	SS_CHECK NORMAL			; CHECK FOR NORMAL STATUS CODE
	BRW	60$			; GO CHECK FOR MORE DACEFC'S
85$:
	$READEF_S EFN=OTHER_EFN, STATE=CLUS_STATE
					; READ & CHECK CLUSTER BEFORE DACEFC
	BLBS	R0,86$			; CONTINUE IF NORMAL COMPLETION
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
86$:
	CMPL	CLUS_STATE,R7		; CLUSTER A STATE = THAT EXPECTED ?
	BEQLU	87$			; YES -- GO DISASSOCIATE
	MOVL	R7,EXPV			; NO -- LOAD EXPECTED AND ...
	MOVL	CLUS_STATE,RECV		; ... RECEIVED VALUES, THEN EXIT
	ERR_EXIT LONG,<PRE-EXISTING CLUSTER STATE NOT OBTAINED AFTER DACEFC>
87$:
	$DACEFC_S EFN=OTHER_EFN		; DISASSOC "OTHER" EV FLAG GROUP FROM CLUS A
	SS_CHECK NORMAL			; CHECK FOR NORMAL COMPLETION
	BRW	60$			; GO CHECK FOR MORE FLAGS
VERIFYX:
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	VFY_CLEANUP
;++
; FUNCTIONAL DESCRIPTION:
;
;		VFY_CLEANUP EXECUTES SYSTEM SERVICES TO UNDO THE
; EFFECT OF THOSE ISSUED IN THE VERIFY SUBROUTINE. VFY_CLEANUP MUST
; ASSUME THAT VERIFY MAY NOT HAVE EXECUTED IN ITS ENTIRETY (IF AN
; ERROR IS FOUND). ALSO, VFY_CLEANUP MAY ISSUE SS_CHECK OR ERR_EXIT
; ONLY AFTER PERFORMING ALL OF ITS CLEANUP OPERATIONS; THIS IS REQUIRED
; IN THE EVENT THAT VFY_CLEANUP IS CALLED DURING ERROR PROCESSING,
; WHEN PERFORMING THE REQUIRED CLEANUP IS MORE IMPORTANT THAN
; POSSIBLY DISCOVERING A SECOND ERROR.
;
; CALLING SEQUENCE:
;
;	BSBW VFY_CLEANUP
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	R2,3,4,5,6 CONTAIN CURRENT CONDITION TABLE INDEX VALUES
;	  FOR COND TABLES 1,2,3,4,5, RESPECTIVELY.
;	FOR X = 1,2,3,4,5 :
;		CONDX_E - ADDRESS OF TABLE OF DATA VALUES FOR CONDX
;		  TABLE. IF THE CONTEXT OF TABLE X IS A SYSTEM SERVICE
;		  ARGUMENT, THE ARGUMENT NAME MAY BE USED AS A SYNONYM
;		  FOR CONDX_E.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	EFLAG SET TO NON-ZERO IF ERROR ENCOUNTERED.
;
; SIDE EFFECTS:
;
;	SS_CHECK AND ERR_EXIT MACROS CAUSE PREMATURE EXIT 
;	(VIA RSB) IF ERROR ENCOUNTERED.
;
;--



VFY_CLEANUP::
	$DLCEFC_S NAME=CLUS_NAME_A 	; CLEAR PERM INDICATORS IF PRESENT ...
	$DLCEFC_S NAME=CLUS_NAME_B 	; ... FOR BOTH CLUSTERS
	SS_CHECK NORMAL			; CHECK COMPLETION
	RSB				; RETURN TO CALLER
	.PAGE
	.SBTTL	BUILD_CLUST SUBROUTINE
;
; **************************************************************
; *
; *	BUILD_CLUST SUBROUTINE
; *
; *	THIS SUBROUTINE CREATES A 32-BIT CLUSTER MASK BY
; *	  CONCATENATING THE LOW-ORDER BYTES OF REGS R2-R5.
; *	  IT THEN SETS CLUSTER A EQUAL TO THE MASK BY
; *	  ISSUING THE PROPER COMBINATION OF 32 SETEF/CLREF'S.
; *
; *	INPUTS:
; *
; *		R2,R3,R4,R5   -  CONDITION TABLE INDEX VALUES
; *
; *		R10      -       ANY EFN IN CLUSTER A
; *
; *	OUTPUTS:
; *
; *		CLUS_MASK   -    LONGWORD CONTAINING THE CREATED
; *		                   CLUSTER MASK.
; *
; *		CLUSTER A   -    THE SUBJECT EVENT FLAG CLUSTER,
; *		                   UPDATED TO LOOK LIKE CLUS_MASK.
; *
; *		FLG_V_MKFORMED - BIT IN FLAGS BYTE IS SET, IND-
; *		                   ICATING CLUS_MASK IS FORMED.
; *
; *	VOLATILE REGISTERS:
; *
; *		R0, R1, R8, R9
; *
; **************************************************************
;
BUILD_CLUST:
	BBCS	#FLG_V_MKFORMED,FLAGS,10$ ; CONT IF CLUS_MASK NOT YET FORMED
	BRW	BUILD_CLUSTX		; MASK ALREADY FORMED; JUST EXIT
10$:
	MOVB	R5,CLUS_MASK		; BUILD
	MOVB	R4,CLUS_MASK+1		; .. CLUSTER
	MOVB	R3,CLUS_MASK+2		; ...... MASK
	MOVB	R2,CLUS_MASK+3		; ..............
;
; THE FOLLOWING CODE SETS CLUSTER A EQUAL TO CLUS_MASK
;
	MOVL	R10,R8			; ESTABLISH FIRST EFN (EVENT FLAG NO.)
	CLRL	R9			; INIT OFFSET INTO CLUS_MASK
20$:
	BBS	R9,CLUS_MASK,30$ 	; ISSUE $SETEF IF BIT FOR THIS FLAG IS SET
	$CLREF_S EFN=R8			; ... OTHERWISE, ISSUE $CLREF
	BLBS	R0,40$			; IF NORMAL STATUS, PROCESS NEXT EVENT FLAG
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
30$:
	$SETEF_S EFN=R8			; SET CURRENT EVENT FLAG
	BLBS	R0,40$			; IF NORMAL STATUS, PROCESS NEXT EVENT FLAG
	SS_CHECK NORMAL			; USE SS_CHECK TO TERMINATE TEST MODULE
40$:
	INCW	R8			; GET NEXT EFN
	ACBB	#31,#1,R9,20$		; GO DO NEXT EVENT FLAG
BUILD_CLUSTX:
	RSB				; RETURN TO CALLER
	.END
