	.TITLE	SATSSF04 - SATS SYSTEM SERVICE TESTS  (FAILING S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	THE SATSSF04 MODULE TESTS THE EXECUTION OF CERTAIN
; VMS SYSTEM SERVICES, INVOKED IN SUCH A WAY AS TO EXPECT FAILING
; STATUS CODES. THE SYSTEM SERVICES TESTED AND THE STATUS CODES
; EXPECTED ARE SUMMARIZED AS ARGUMENTS TO THE TESTSERV MACROS
; WHICH APPEAR NEAR THE END OF THIS LISTING. SUCCESSFUL STATUS
; CODES ARE TESTED IN OTHER MODULES.
;
;
; ENVIRONMENT:	USER MODE IMAGE; NEEDS CMKRNL PRIVILEGE,
;		DYNAMICALLY ACQUIRES OTHER PRIVILEGES, AS NEEDED.
;
; AUTHOR: THOMAS L. CAFARELLA,		CREATION DATE: MMM, 1978
;	  PAUL D. FAY (DISPSERV & TESTSERV MACROS)
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PRVDEF				; SYMBOL DEFS FOR PRIVILEGES
	$UETPDEF			; UETP MSG CODE DEFINITIONS
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> 
					; DEFINE UETP$_TEXT
					; GET RID OF MACRO DEFINITIONS
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
WARNING		= 0			; WARNING SEVERITY VALUE FOR MSGS
SUCCESS		= 1			; SUCCESS SEVERITY VALUE FOR MSGS
ERROR		= 2			; ERROR SEVERITY VALUE FOR MSGS
INFO		= 3			; INFORMATIONAL SEV VALUE FOR MSGS
SEVERE		= 4			; SEVERE (FATAL) SEV VALUE FOR MSGS
TCG_NO		=  0			; INITIALIZE TEST CASE GROUP NUMBER
GRP_TOTAL	=  0			; INITIALIZE TEST CASE GROUP TOTAL
R0_THRU_SP	= ^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP>
ASTADR_STM	= 0			; ASTADR ARG 4 SETIMR (INDIC NO AST)
DAYTIM_STM20	= 0			; DAYTIM ARG FOR SETIMR (LOCATION 0)
TIMADR_GTT10	= 1			; TIMADR ARG FOR GETTIM (LOCATION 1)
TIMBUF_NMT10	= 1			; TIMBUF ARG FOR NUMTIM (LOCATION 1)
TIMADR_NMT20	= 1			; TIMADR ARG FOR NUMTIM (LOCATION 1)
;
; ****** THE FOLLOWING ASSIGNMENTS (IN PHD, PCB, STS) ARE BEING MADE
; ****** WITHOUT REFERENCE TO $PHDDEF, $PCBDEF, $STSDEF BECAUSE OF
; ****** SYMBOL TABLE OVERFLOW. FIX THIS WHEN MORE TABLE SPACE AVAILABLE.
;
PHD$Q_PRIVMSK	= 0			; PRIV MASK OFFSET INTO PHD
PCB$L_UIC	= ^X20			; UIC OFFSET INTO PCB
STS$V_INHIB_MSG	= ^X1C			; INHIBIT_MSG BIT NUMBER IN MSG CODE
;
; OWN STORAGE:
;
	.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
REG_COMP_MASK:	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP> ! ^X8000 -
					; REG COMPARE MASK (HIGH-ORDER ... 
					; ... BIT MUST BE ON
ERR_MSG_FAOCTL:	STRING	I,<!/!AC!1ZB!1ZB: REGISTER !2UW CONTENTS ALTERED>, -
		<;  BEFORE SERVICE CALL: !8XL   AFTER SERVICE CALL: !8XL>
TEST_MOD_NAME:	STRING	C,<SATSSF04>	; TEST MODULE NAME
TEST_MOD_BEG:	STRING	C,<begun>	; DISPOSITION FIELD OF TEST MOD MSG
TEST_MOD_SUCC:	STRING	C,<successful>	; DISPOSITION FIELD OF TEST MOD MSG
TEST_MOD_FAIL:	STRING	C,<failed>	; DISPOSITION FIELD OF TEST MOD MSG
TEST_MOD_NAME_D: STRING	I,<SATSSF04>	; TEST MODULE NAME DESCRIPTOR
TTNAME:     	STRING  I,<TT>		; TERMINAL LOGICAL NAME
INADR:		.LONG	NOACCESS,NOACCESS ; PAGE ADDRESS OF NOACCESS PSECT
PROT:		.LONG	PRT$C_NA	; PROTECTION CODE FOR NOACCESS PSECT
ONES:		.LONG	-1,-1		; A QUADWORD OF 1-BITS
EFN_STM:	.LONG	43		; EFN ARGUMENT FOR SETIMR
EFN_STM10:	.LONG	^XFFFFFFFF 	; EFN ARGUMENT FOR SETIMR
DAYTIM_STM:	.LONG	0,0		; DAYTIM ARGUMENT FOR SETIMR
REQIDT_STM:	.LONG	0		; REQIDT ARGUMENT FOR SETIMR
TIMADR_GTT11:	.BLKQ	1		; TIMADR ARGUMENT FOR GETTIM
TIMBUF_NMT11:	.BLKW	7		; TIMBUF ARGUMENT FOR NUMTIM
TIMADR_NMT:	.LONG	0,0		; TIMADR ARGUMENT FOR NUMTIM
TIMADR_NMT23:	.LONG	-1,-<60*24*10000>/7
					; TIMADR ARGUMENT FOR NUMTIM
					; (10,000 DAYS IN ...
					; ... 100-NANOSECOND UNITS)
TIMADR_ATM:	.LONG	0,0		; TIMADR ARGUMENT FOR ASCTIM
TIMADR_ATM30:	.LONG	-1,-<60*24*10000>/7
					; TIMADR ARGUMENT FOR ASCTIM
					; (10,000 DAYS IN ...
					; ... 100-NANOSECOND UNITS)
CVTFLG_ATM:	.LONG 1			; CVTFLG ARGUMENT FOR ASCTIM
TIMBUF_BTM:	STRING	I,<25-DEC-1973  21:46:00.00>
					; TIMBUF ARGUMENT FOR BINTIM
TIMBUF_BTM10:	STRING	I,<25-DEC-0001  21:46:00.00>
					; TIMBUF ARGUMENT FOR BINTIM
TIMBUF_BTM11:	STRING	I,<25-DEC-1973  21:61:00.00>
					; TIMBUF ARGUMENT FOR BINTIM
TIMBUF_BTM12:	STRING	I,<29-FEB-1973  09:14:21.33>
					; TIMBUF ARGUMENT FOR BINTIM
TIMBUF_BTM13:	STRING	I,<0347  25:10:20.31>
					; TIMBUF ARGUMENT FOR BINTIM
	.PAGE
	.PSECT	RWDATA,RD,WRT,NOEXE
TPID:		.BLKL	1		; PROCESS ID FOR THIS PROCESS
CURRENT_TC:	.BLKL	1 		; PTR TO CURRENT TEST CASE
REG_SAVE_AREA:	.BLKL	15		; SAVE AREA FOR ALL REGS (SANS PC)
MOD_MSG_CODE:	.LONG	UETP$_SATSMS	; TEST MODULE MSG CODE FOR PUTMSG
CLOB_REG_NO:	.BLKL	1		; CLOBBERED REG NO (FOR FAO ERR MSG)
REG_BEFORE_SS:	.BLKL	1		; REG CONTENTS BEFORE S.S. 
					; ... (FOR FAO ERROR MSG)
REG_AFTER_SS:	.BLKL	1		; REG CONTENTS AFTER S.S. 
					; ... (FOR FAO ERROR MSG)
$$TSTN$$:	STRING	C,<  SF   >	; ASCII PORTION OF TEST CASE NAME
TMN_ADDR:	.ADDRESS TEST_MOD_NAME	; ADDR OF TEST MOD NAME FOR FAO
TMD_ADDR:	.ADDRESS TEST_MOD_BEG	; ADDR OF T.M. DISP FIELD FOR FAO
TS_EP:		.BLKL	1		; ENTRY PNT FOR CURR TESTSERV MACRO
RETADR:		.BLKL	2		; RETURN LONGWORDS FOR SETPRT
PRVPRT:		.BLKB	1		; PROT RETURN BYTE FOR SETPRT
PRIVMASK:	.BLKQ	1		; ADDR OF PRIVILEGE MASK (IN PHD)
CHM_CONT:	.BLKL	1		; CHANGE MODE CONTINUE ADDRESS
REGS:		.BLKL	5		; AREA FOR COND INDEX REGS (R2-R6)
EFN_STM11:	.BLKL 1			; EFN ARGUMENT FOR SETIMR
EFN_STM12:	.BLKL 1			; EFN ARGUMENT FOR SETIMR
EFN_STM13:	.BLKL 1			; EFN ARGUMENT FOR SETIMR
EFN_STM14:	.BLKL 1			; EFN ARGUMENT FOR SETIMR
TIMADR_GTT:	.BLKQ	1		; TIMADR ARGUMENT FOR GETTIM
TIMBUF_NMT:	.BLKW	7		; TIMBUF ARGUMENT FOR NUMTIM
TIMLEN_ATM:	.BLKW	1		; TIMLEN ARGUMENT FOR ASCTIM
TIMBUF_ATM:	STRING	O,24		; TIMBUF ARGUMENT FOR ASCTIM
TIMADR_BTM:	.BLKQ	1		; TIMADR ARGUMENT FOR BINTIM
	.PAGE
	.PSECT	SATS_ACCVIO_1,RD,WRT,NOEXE,PAGE
EMPTY:		.BLKB	512	; RESERVE A PAGE OF SPACE
;
; + 
; ******************************************************************
; *                                                                *
; * 	THE ORDER OF STATEMENTS IN THIS PSECT IS CRITICAL.         *
; *	DO NOT RE-ARRANGE THE VARIABLES. CONSULT SATS              *
; *	FUNCTIONAL SPECIFICATION FOR A DESCRIPTION OF THE USE      *
; *	OF THE EMPTY PSECT (AND ITS COMPANION PSECT, NOACCESS).    *
; *                                                                *
; ******************************************************************
; -
;
DAYTIM_STM22	= . - 1		; DAYTIM ARG FOR SETIMR (LAST BYTE IN PAGE)
TIMADR_GTT12	= . - 1		; TIMADR ARG FOR GETTIM (LAST BYTE IN PAGE)
TIMBUF_NMT12	= . - 1		; TIMBUF ARG FOR NUMTIM (LAST BYTE IN PAGE)
TIMADR_NMT22	= . - 1		; TIMADR ARG FOR NUMTIM (LAST BYTE IN PAGE)
;
;
;
;
	.PSECT	SATS_ACCVIO_2,RD,WRT,NOEXE,PAGE
NOACCESS:	.BLKB	512	; RESERVE A PAGE OF SPACE
		. = . - 512	; RETURN LOC CTR TO BEGINNING OF PSECT
		.ADDRESS EMPTY	; ADDRESS OF ACCESSIBLE STRING
		.ADDRESS EMPTY/^X100 ; ADDRESS OF ACCESSIBLE STRING
;+
; *** NOTE -- DO NOT CHANGE LOCATION OR SEQUENCE OF ABOVE STATEMENTS!
; ***         THIS PSECT (NOACCESS) MUST APPEAR IN MEMORY IMMEDIATELY
; ***         FOLLOWING THE EMPTY PSECT. PSECT NAMES AND OPTIONS WILL BE 
; ***         CHOSEN TO FORCE THE DESIRED PSECT ORDERING.
;-
DAYTIM_STM21:	.BLKQ	1	; DAYTIM ARGUMENT FOR SETIMR
TIMADR_NMT21:	.BLKQ	1	; TIMADR ARGUMENT FOR NUMTIM
;
;
;
;
	.PSECT	SATSSF04,RD,WRT,EXE,LONG
	.PAGE
	.SBTTL	SATSSF04
;++
; FUNCTIONAL DESCRIPTION:
;
;		AFTER PERFORMING SOME INITIAL HOUSEKEEPING, SUCH AS
; PRINTING THE MODULE BEGIN MESSAGE AND ACQUIRING ALL PRIVILEGES,
; THE SATSSF04 ROUTINE EXECUTES THE TEST_SERV_EXEC MACRO TO RUN
; ALL TEST CASES. WHEN THE MACRO COMPLETES ITS EXECUTION, SATSSF04
; PRINTS A TEST MODULE SUCCESS OR FAIL MESSAGE AND EXITS TO THE
; OPERATING SYSTEM. TEST_SERV_EXEC CALLS THE TC_CONTROL/TESTSERV
; CO-ROUTINE PAIR ONCE PER TEST CASE GROUP TO EXECUTE ALL TEST
; CASES IN THAT GROUP. EACH TEST CASE GROUP IS DEFINED BY BOUNDING
; ITS TEST CASES WITH A TC_GROUP MACRO BEFORE THE FIRST TEST CASE
; AND A TCEND MACRO AFTER THE LAST ONE. THE TEST CASES THEMSELVES
; ARE DEFINED WITHIN THESE BOUNDS BY PRECEDING EACH WITH A
; NEXT_TEST_CASE MACRO. TC_CONTROL/TESTSERV EXECUTES THE CODE 
; FOLLOWING EACH NEXT_TEST_CASE MACRO IMMEDIATELY BEFORE ISSUING
; THE SYSTEM SERVICE AS REQUESTED IN THE TESTSERV MACRO. TC_CONTROL/
; TESTSERV ALSO CHECKS THE RESULTS OF THE SERVICE WITH RESPECT
; TO ITS EXPECTED STATUS CODE AND PRINTS ANY REQUIRED FAILURE
; MESSAGES FOR THE TEST CASE. THE CODE APPEARING AFTER EACH
; NEXT_TEST_CASE MACRO IS MERELY TO SET UP CONDITIONS REQUIRED
; FOR THE SYSTEM SERVICE AND TO CLEAN UP ANY RESOURCES ACQUIRED
; BY THE PREVIOUS TEST CASE.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSF04  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	MESSAGES TO SYS$OUTPUT ARE THE ONLY OUTPUT FROM SATSSF04.
;	THEY ARE OF THE FORM:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSF04 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSF04 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSF04 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	THE SATSSF04 ROUTINE TERMINATES WITH A $EXIT TO THE
;	OPERATING SYSTEM WITH A STATUS CODE DEFINED BY UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	NONE
;
;--



SATSSF04:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
					; ENTRY MASK
	$WAKE_S  TPID			; GET PID OF THIS PROCESS
	$HIBER_S			; UNDO WAKE
	$SETPRN_S TEST_MOD_NAME_D 	; SET PROCESS NAME
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE BEGIN MSG
	MOVAL	TEST_MOD_SUCC,TMD_ADDR	; ASSUME END MSG WILL SHOW SUCCESS
	INSV	#SUCCESS,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR SUCCESS
	MODE	TO,10$,KRNL,NOREGS 	; KERNEL MODE TO ACCESS PHD
	MOVL	@#CTL$GL_PHD,R9		; GET PROCESS HEADER ADDRESS
	MOVAL	PHD$Q_PRIVMSK(R9),PRIVMASK ; GET PRIV MASK ADDRESS
	MODE	FROM,10$		; GET BACK TO USER MODE
	PRIV	ADD,ALL			; GET ALL PRIVILEGES
	DISPSERV			; SET UP DISPLAY INFO FOR TESTSERV
	$SETPRT_S INADR=INADR, RETADR=RETADR, -
		  PROT=PROT, PRVPRT=PRVPRT
					; SET NOACCESS PSECT ...
					; ... FOR NO USER ACCESS
	BRW	EXECUTE			; GO EXECUTE ALL TEST CASES
	TC_GROUP	STM,1,TS1
	NEXT_TEST_CASE	SFSTM10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM10
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	EFN_STM10
; *
; *  INPUT CONDITIONS:
; *     ILLEGAL EVENT FLAG NUMBER
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ILLEFC
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFSTM11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM11
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	EFN_STM11
; *
; *  INPUT CONDITIONS:
; *     ILLEGAL EVENT FLAG NUMBER
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ILLEFC
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	CVTBL	#-1,EFN_STM11	; ILLEGAL EVENT FLAG NUMBER
;
	NEXT_TEST_CASE	SFSTM12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM12
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	EFN_STM12
; *
; *  INPUT CONDITIONS:
; *     ILLEGAL EVENT FLAG NUMBER
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ILLEFC
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVZBL	#128,EFN_STM12	; ILLEGAL EVENT FLAG NUMBER
;
	NEXT_TEST_CASE	SFSTM13
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM13
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	EFN_STM13
; *
; *  INPUT CONDITIONS:
; *     ILLEGAL EVENT FLAG NUMBER
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ILLEFC
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVL	#255,EFN_STM13	; ILLEGAL EVENT FLAG NUMBER
;
	NEXT_TEST_CASE	SFSTM14
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM14
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	EFN_STM14
; *
; *  INPUT CONDITIONS:
; *     PROCESS NEVER ASSOCIATED WITH SPECIFIED CLUSTER (3).
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	UNASEFC
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	MOVZBL	#100,EFN_STM14	; EVENT FLAG IN UNASSOCIATED CLUSTER
;
	NEXT_TEST_CASE	SFSTM20
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM20
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	DAYTIM_STM20
; *
; *  INPUT CONDITIONS:
; *     EXPIRATION TIME AT LOCATION 0
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFSTM21
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM21
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	DAYTIM_STM21
; *
; *  INPUT CONDITIONS:
; *     EXPIRATION TIME IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFSTM22
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFSTM22
; *
; *  SYSTEM SERVICE:		SETIMR
; *
; *  ARGUMENT UNDER TEST: 	DAYTIM_STM22
; *
; *  INPUT CONDITIONS:
; *     EXPIRATION TIME FIELD BEGINS IN ACCESSIBLE PSECT, ENDS
; *       IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	TCEND
	TC_GROUP	GTT,1,TS2
	NEXT_TEST_CASE	SFGTT10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFGTT10
; *
; *  SYSTEM SERVICE:		GETTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_GTT10
; *
; *  INPUT CONDITIONS:
; *     TIME OUTPUT FIELD AT LOCATION 1
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFGTT11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFGTT11
; *
; *  SYSTEM SERVICE:		GETTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_GTT11
; *
; *  INPUT CONDITIONS:
; *     TIME OUTPUT FIELD IN READ/ONLY PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFGTT12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFGTT12
; *
; *  SYSTEM SERVICE:		GETTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_GTT12
; *
; *  INPUT CONDITIONS:
; *     TIME OUTPUT FIELD BEGINS IN ACCESSIBLE PSECT, ENDS
; *       IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	TCEND
	TC_GROUP	NMT,1,TS3
	NEXT_TEST_CASE	SFNMT10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT10
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_NMT10
; *
; *  INPUT CONDITIONS:
; *     TIME BUFFER AT LOCATION 1
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFNMT11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT11
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_NMT11
; *
; *  INPUT CONDITIONS:
; *     TIME BUFFER IN READ/ONLY PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFNMT12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT12
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_NMT12
; *
; *  INPUT CONDITIONS:
; *     TIME BUFFER BEGINS IN ACCESSIBLE PSECT, ENDS IN
; *       NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFNMT20
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT20
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_NMT20
; *
; *  INPUT CONDITIONS:
; *     TIME VALUE AT LOCATION 0
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFNMT21
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT21
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_NMT21
; *
; *  INPUT CONDITIONS:
; *     TIME VALUE IN NON-ACCESSIBLE PSECT
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFNMT22
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT22
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_NMT22
; *
; *  INPUT CONDITIONS:
; *     TIME VALUE BEGINS IN ACCESSIBLE PSECT, ENDS
; *       IN NON-ACCESSIBLE PSECT.
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	ACCVIO
; *	2) REGISTERS R2 THROUGH FP UNCHANGED

; *
; ******************************************************
;--
;
	NEXT_TEST_CASE	SFNMT23
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFNMT23
; *
; *  SYSTEM SERVICE:		NUMTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_NMT23
; *
; *  INPUT CONDITIONS:
; *     DELTA TIME VALUE EXCEEDS 9999 DAYS
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVTIME
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
	TCEND
;
	TC_GROUP	ATM,1,TS4
;
	NEXT_TEST_CASE	SFATM30
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFATM30
; *
; *  SYSTEM SERVICE:		ASCTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMADR_ATM30
; *
; *  INPUT CONDITIONS:
; *	DELTA TIME VALUE EXCEEDS 9999 DAYS
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVTIME
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	TCEND
	TC_GROUP	BTM,1,TS5
;
	NEXT_TEST_CASE	SFBTM10
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFBTM10
; *
; *  SYSTEM SERVICE:		BINTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_BTM10
; *
; *  INPUT CONDITIONS:
; *	INVALID ABSOLUTE TIME (YEAR SPECIFIED IS
; *	  EARLIER THAN SYSTEM BASE).
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVTIME
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFBTM11
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFBTM11
; *
; *  SYSTEM SERVICE:		BINTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_BTM11
; *
; *  INPUT CONDITIONS:
; *	INVALID ABSOLUTE TIME (MINUTES FIELD
; *	  OUT OF RANGE).
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVTIME
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFBTM12
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFBTM12
; *
; *  SYSTEM SERVICE:		BINTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_BTM12
; *
; *  INPUT CONDITIONS:
; *	INVALID ABSOLUTE TIME (NON-EXISTENT DATE).
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVTIME
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	NEXT_TEST_CASE	SFBTM13
;
;++
; ******************************************************
; *
; *  TEST CASE NAME:		SFBTM13
; *
; *  SYSTEM SERVICE:		BINTIM
; *
; *  ARGUMENT UNDER TEST: 	TIMBUF_BTM13
; *
; *  INPUT CONDITIONS:
; *	INVALID DELTA TIME (HOURS FIELD
; *	  OUT OF RANGE).
; *
; *  EXPECTED RESULTS:
; *	1) SYSTEM STATUS CODE:	IVTIME
; *	2) REGISTERS R2 THROUGH FP UNCHANGED
; *
; ******************************************************
;--
;
;
	TCEND
TS1:
	TESTSERV	SETIMR,ERR,SATS,				-
                                          				-
	   <1,EFN_STM,						-
	        	EFN_STM10,ILLEFC,	-  ; SFSTM10
	        	EFN_STM11,ILLEFC,	-  ; SFSTM11
	        	EFN_STM12,ILLEFC,	-  ; SFSTM12
	        	EFN_STM13,ILLEFC,	-  ; SFSTM13
	        	EFN_STM14,UNASEFC,	-  ; SFSTM14
                                                  >,			-
                                          				-
	   <1,DAYTIM_STM,						-
	        	DAYTIM_STM20,ACCVIO,	-  ; SFSTM20
	        	DAYTIM_STM21,ACCVIO,	-  ; SFSTM21
	        	DAYTIM_STM22,ACCVIO,	-  ; SFSTM22
                                                  >,			-
                                          				-
	   <1,ASTADR_STM,						-
                                                  >,			-
                                          				-
	   <1,REQIDT_STM,						-
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS2:
	TESTSERV	GETTIM,ERR,SATS,				-
                                          				-
	   <1,TIMADR_GTT,						-
	        	TIMADR_GTT10,ACCVIO,	-  ; SFGTT10
	        	TIMADR_GTT11,ACCVIO,	-  ; SFGTT11
	        	TIMADR_GTT12,ACCVIO,	-  ; SFGTT12
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS3:
	TESTSERV	NUMTIM,ERR,SATS,				-
                                          				-
	   <1,TIMBUF_NMT,						-
	        	TIMBUF_NMT10,ACCVIO,	-  ; SFNMT10
	        	TIMBUF_NMT11,ACCVIO,	-  ; SFNMT11
	        	TIMBUF_NMT12,ACCVIO,	-  ; SFNMT12
                                                  >,			-
                                          				-
	   <1,TIMADR_NMT,						-
	        	TIMADR_NMT20,ACCVIO,	-  ; SFNMT20
	        	TIMADR_NMT21,ACCVIO,	-  ; SFNMT21
	        	TIMADR_NMT22,ACCVIO,	-  ; SFNMT22
	        	TIMADR_NMT23,IVTIME,	-  ; SFNMT23
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS4:
	TESTSERV	ASCTIM,ERR,SATS,				-
                                          				-
	   <1,TIMLEN_ATM,						-
                                                  >,			-
                                          				-
	   <1,TIMBUF_ATM,						-
                                                  >,			-
                                          				-
	   <1,TIMADR_ATM,						-
	        	TIMADR_ATM30,IVTIME,	-  ; SFATM30
                                                  >,			-
                                          				-
	   <1,CVTFLG_ATM,						-
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
TS5:
	TESTSERV	BINTIM,ERR,SATS,				-
                                          				-
	   <1,TIMBUF_BTM,						-
	        	TIMBUF_BTM10,IVTIME,	-  ; SFBTM10
	        	TIMBUF_BTM11,IVTIME,	-  ; SFBTM11
	        	TIMBUF_BTM12,IVTIME,	-  ; SFBTM12
	        	TIMBUF_BTM13,IVTIME,	-  ; SFBTM13
                                                  >,			-
                                          				-
	   <1,TIMADR_BTM,						-
                                                  >,			-
 
	TS_CLEANUP		; CLEAN UP & RETURN TO TEST_SERV_EXEC
	.SBTTL	EXECUTE & CLEANUP
EXECUTE:
	TEST_SERV_EXEC			; EXECUTE ALL T. CASES IN ALL GROUPS
CLEANUP:
	BSBW	MOD_MSG_PRINT		; PRINT TEST MODULE END MSG
	INSV	#1,#STS$V_INHIB_MSG,#1,MOD_MSG_CODE 
					; INHIBIT PRINTING
	$EXIT_S	MOD_MSG_CODE		; EXIT TO OP SYS WITH MSG CODE
	.PAGE
	.SBTTL	TC_CONTROL
;++
; FUNCTIONAL DESCRIPTION:
;
;		THE TC_CONTROL SUBROUTINE IS CALLED BY THE TEST_SERV_EXEC
; MACRO TO EXECUTE A GROUP OF TEST CASES. A GROUP IS DEFINED BY A TC_GROUP
; MACRO. FOR EACH TC_GROUP MACRO, THERE IS A CORRESPONDING TESTSERV MACRO.
; TESTSERV CONTAINS CODE TO EXECUTE SYSTEM SERVICES AND CHECK THE RETURNED
; STATUS CODE VALUES. TESTSERV ARGUMENTS ARE CODED TO SPECIFY ALL THE SYSTEM
; SERVICE ARGUMENT VALUES AND THE EXPECTED STATUS CODE FOR EACH TEST CASE
; DEFINED BY A NEXT_TEST_CASE MACRO WITHIN THE GROUP. TC_CONTROL USES A
; CO-ROUTINE INTERFACE TO ENTER THE CODE OF THE APPROPRIATE TESTSERV MACRO
; IN VARIOUS PLACES. THE FIRST ENTRY OCCURS ONCE PER GROUP TO ALLOW TESTSERV
; TO DO SOME INITIALIZATION. THEN TWO ENTRIES ARE MADE FOR EACH TEST CASE IN
; THE GROUP. THE FIRST ALLOWS TESTSERV TO ISSUE THE SUBJECT SYSTEM SERVICE.
; THE SECOND ENTRY FOR THE TEST CASE CAUSES TESTSERV TO CHECK THE RETURNED
; STATUS CODE, PRINTING A FAILURE MESSAGE IF IT IS NOT THE EXPECTED CODE.
; IF THERE ARE NO MORE TEST CASES IN THE CURRENT GROUP, TESTSERV (NOT TC_CONTROL)
; RETURNS DIRECTLY TO TEST_SERV_EXEC (RSB ACTUALLY ISSUED IN TS_CLEANUP MACRO)
; FROM THIS SECOND ENTRY; OTHERWISE, CONTROL RETURNS TO TC_CONTROL WHICH
; IN TURN ENTERS TESTSERV AGAIN FOR THE NEXT TEST CASE. THE FAILURE OF A
; TEST CASE DOES NOT CAUSE TERMINATION OF THE TEST MODULE.
;
; CALLING SEQUENCE:
;
;	BSBW TC_CONTROL (ISSUED WITHIN THE TEST_SERV_EXEC MACRO)
;			(RSB IS ISSUED WITHIN THE TS_CLEANUP MACRO)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	ARGUMENTS SPECIFIED ON EACH TESTSERV MACRO MAY BE VIEWED AS
;	INPUTS, SINCE TC_CONTROL AND TESTSERV ACT AS CO-ROUTINES.
;
; OUTPUT PARAMETERS:
;
;	SEVERITY CODE FIELD OF MOD_MSG_CODE (BITS 0,1,2) IS SET TO ERROR
;	IF ANY TEST CASE IN THE CURRENT GROUP FAILS; OTHERWISE IT REMAINS
;	SET TO SUCCESSFUL.
;
; IMPLICIT OUTPUTS:
;
;	%UETP-I-TEXT,   ERROR MESSAGES ARE WRITTEN TO SYS$OUTPUT BY
;			THE TESTSERV MACRO (CO-ROUTINE WITH TC_CONTROL)
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--



TC_CONTROL:
	PUSHL	TS_EP			; PUSH TESTSERV ENTRY POINT
	JSB	@(SP)+			; ENTER TESTSERV INITIALIZATION
10$:					; PROCESS NEXT TEST CASE
	MOVB	#^A/ /,$$TSTN$$+2 	; MAKE SURE T.C. NAME HAS A BLANK
	BSBW	REG_SAVE		; SAVE REGISTERS
	JSB	@CURRENT_TC		; JUMP TO CURRENT TEST CASE
	BSBW	REG_REST		; RESTORE REGS FOR TESTSERV
	JSB	@(SP)+			; LET TESTSERV ISSUE SYSTEM SERVICE
	BSBW	REG_COMP		; COMPARE REGS TO SEE IF ...
					; ... SYSTEM SERVICE CHANGED ANY
	JSB	@(SP)+			; LET TESTSERV CHEK S.S. STATUS CODE
	CMPB	#^A/*/,$$TSTN$$+2	; HAS TESTSERV INDICATED FAILURE ?
	BNEQU	10$			; NO -- PROCESS NEXT TEST CASE
	MOVAL	TEST_MOD_FAIL,TMD_ADDR	; YES -- INDICATE FAILED IN END MSG
	INSV	#ERROR,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR ERROR
	BRB	10$			; LOOP BAK TO PROCESS NEXT TEST CASE
;
;   TC_CONTROL RETURNS TO TEST_SERV_EXEC VIA TESTSERV (IN TS_CLEANUP MACRO)
;
	.PAGE
	.SBTTL	SUBROUTINES
REG_SAVE:
;
;  *****************************************************************
;  *                                                               *
;  *  SAVES R0 THRU SP IN REG_SAVE_AREA                            *
;  *                                                               *
;  *****************************************************************
;
	PUSHR	#R0_THRU_SP		; SAVE ALL REGS ON STACK
	MOVC3	#60,(SP),REG_SAVE_AREA	; SAVE REGS (BEFORE S.S.)
	POPR	#R0_THRU_SP		; CLEAN UP STACK
	RSB				; .... AND RETURN
;
;
;
;
REG_REST:
;
;
;  *****************************************************************
;  *                                                               *
;  *  RESTORES R0 THRU SP FROM REG_SAVE_AREA                       *
;  *                                                               *
;  *****************************************************************
;
	SUBL2	#60,SP			; MOVE SP TO MAKE ROOM FOR REGS
	MOVC3	#60,REG_SAVE_AREA,(SP)	; MOVE REGS ONTO STACK FOR POP
	POPR	#R0_THRU_SP		; RESTORE ALL REGS FOR TESTSERV
	RSB				; ... AND RETURN
	.PAGE
REG_COMP:
;
;  *****************************************************************
;  *                                                               *
;  *  1) PUSHES ALL REGS ONTO STACK                                *
;  *  2) COMPARES REGISTER IMAGES FROM STACK WITH CORRESPONDING    *
;  *       IMAGES FROM REG_SAVE_AREA FOR ALL REGISTERS SPECIFIED   *
;  *       IN REG_COMP_MASK.                                       *
;  *  3) FOR EACH UNEQUAL COMPARE, AN ERROR MESSAGE IS PRINTED     *
;  *       (USING $FAO AND $OUTPUT SYSTEM SERVICES).               *
;  *  4) POPS ALL REGS OFF OF STACK                                *
;  *                                                               *
;  *****************************************************************
;
	PUSHR	#R0_THRU_SP		; SAVE ALL REGISTERS ON STACK
	MOVAL	REG_SAVE_AREA,R6 	; POINT R6 TO BEG OF ...
					; ... REGS (BEFORE S.S.)
	MOVL	SP,R4			; POINT R4 TO BEG OF
					; ... REGS (AFTER S.S.)
	CVTBL	#-1,R3			; INITIALIZE REG_COMP_MASK INDEX
REG_COMP_NEXT:
	INCL	R3			; POINT TO NEXT BIT IN MASK
	CMPB	#15,R3			; END OF THE MASK ?
	BGTRU	REG_COMP_CONT		; NO -- CONTINUE
	BRW	REG_COMP_RSB		; YES -- GO TO COMMON RETURN
REG_COMP_CONT:
	CMPL	(R6)+,(R4)+		; REG BEFORE = REG AFTER ?
	BEQLU	REG_COMP_NEXT		; YES -- LOOK FOR NEXT REG
	BBC	R3,REG_COMP_MASK,REG_COMP_NEXT
					; NO -- GET NEXT IF BIT NOT SET
	MOVL	R3,CLOB_REG_NO		; NO -- GIVE REG NUMBER TO FAO
	MOVL	-4(R6),REG_BEFORE_SS 	; GIVE "BEFORE" CONTENTS TO FAO
	MOVL	-4(R4),REG_AFTER_SS  	; GIVE "AFTER" CONTENTS TO FAO
	MOVB	#^A/*/,$$TSTN$$+2 	; GIVE FAILURE INDIC'N IN ERROR MSG
;
	$FAO_S	ERR_MSG_FAOCTL,OUTL,OUTD,$$SNAD$$,  -
		$$ASEQ$$,$$PSEQ$$,CLOB_REG_NO,REG_BEFORE_SS,REG_AFTER_SS
;
	MOVW	OUTL,OUTD		; ACTUAL OUTPUT LEN IN STRING DESC'R
	PUTMSG	<#UETP$_TEXT,#1,#OUTD>	; PRINT THE MSG
	MOVW	#OUTE-OUTB,OUTD		; GET MAX LEN BACK INTO DESCRIPTOR
	MOVB	#^A/ /,$$TSTN$$+2 	; REMOVE FAIL INDIC'N FOR NEXT MSG
	MOVAL	TEST_MOD_FAIL,TMD_ADDR	; INDICATE FAILED IN END MSG
	INSV	#ERROR,#0,#3,MOD_MSG_CODE ; ADJUST STATUS CODE FOR ERROR
	BRW	REG_COMP_NEXT		; GO LOOK FOR NEXT REG TO COMPARE
REG_COMP_RSB:
	POPR	#R0_THRU_SP		; CLEAN UP STACK
	RSB				; RETURN TO CALLER
	.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; **********************************************************
; *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE
; *	MACRO EXPANSION.
; *
; *************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSF04
