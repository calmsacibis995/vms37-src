	.TITLE	READLBN - WRITEBOOT-RTFILREAD I/O interface.
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	Provide an interface to allow RTFILREAD to work in the WRITEBOOT
;	environment.
;
; ENVIRONMENT:
;
;	Called when writing a BOOTBLOCK to an RT-11 device by RTFILREAD.
;
; ABSTRACT:
;
;	This module provides an interface which allows RTFILREAD to
;	perform in the WRITEBOOT environment.  RTFILREAD sometimes
;	runs in a standalone environment in which no VMS system services
;	are available to it.  It calls an entrypoint named "FIL$READ_LBN"
;	to read logical blocks for it from the console TU58.  This module
;	contains two entrypoints; one which is called prior to the invocation
;	of RTFILREAD and which is passed the string descriptor of the device
;	on which we will write the BOOTBLOCK, the second of which is named
;	"FIL$READ_LBN" and which is called by RTFILREAD.
;
;
; AUTHOR:
;
;	Robert Rappaport	13 August 1979
;
;--

	.SBTTL	RTF$TARGET_DEV - Records the name of Target device.

;++
; Functional description:
;
;	This module provides an interface that allows RTF$OPENFILE to
;	be used unchanged in the WRITEBOOT environment.  When WRITEBOOT
;	is called upon to write a BOOTBLOCK on an RT-11 structured device
;	it uses module RTF$OPENFILE to interpret information on the RT-11
;	device.  RTF$OPENFILE was designed to run in a standalone environment
;	in which no VMS system services are available.  RTF$OPENFILE reads
;	blocks from a TU58 by calling a subroutine called FIL$READ_LBN which
;	is passed the LBN of the block to be read and a buffer address.
;
;	In the WRITEBOOT environment we have the full VMS environment.  So
;	to read an LBN from an RT-11 device we need only invoke QIO.  However
;	in order to do this we have to know which device we are talking to
;	so that we can assign it a logical channel.  In the standalone
;	environment the device information is implicit.
;
;	RTF$TARGET_DEV is called from WRITEBOOT prior to the invocation of
;	RTF$FILEOPEN.  The only argument passed is the name of the target
;	RT-11 device upon which we will later write a BOOTBLOCK.  The name
;	of this device is saved in static storage in variable "TARGET_DEV_NAME"
;	so that it will be available later when RTF$OPENFILE calls entrypoint
;	FIL$READ_LBN.  At that point we will use the device name to assign
;	a channel to the device and then issue a QIO to read the block.
;
;
; Inputs:
;
;	DEVICE_DESC(AP)	- string descriptor of target device specification
; Outputs:
;
;		NONE
;--

;
; Offsets to input arguments:
;

	DEVICE_DESC	= 4


; DATA PSECT

	.PSECT	RWDATA,WRT,NOEXE
TARGET_DEV_DESC:			; STRING DESCRIPTOR FOR TARGET DEV.
	.LONG	0,TARGET_DEV_NAME
TARGET_DEV_NAME:			; SPACE FOR TARGET DEVICE NAME.
	.BLKB	20

IOSB:	.QUAD	0
CHAN_WORD:
	.WORD	0			; WORD WHEREIN TO STORE CHANNEL NUMBER.

	.PSECT	READDEV,EXE,NOWRT
	.ENTRY	RTF$TARGET_DEV,-
		^M<R2,R3,R4,R5>

	MOVL	DEVICE_DESC(AP),R0	; R0 => SOURCE DESCRIPTOR.
	MOVW	(R0),TARGET_DEV_DESC	; COPY LENGTH OF TARGET NAME TO
					; LOCAL DESCRIPTOR.

	MOVC3	TARGET_DEV_DESC,@4(R0),TARGET_DEV_NAME
					; COPY DEVICE NAME.

	RET

	.SBTTL	FIL$READ_LBN - Routine to read a logical block.

;
;++
; Functional description:
;
;	This entrypoint is called from RTF$OPENFILE to read a logical
;	block from the device whose name is defined by the TARGET_DEV_DESC.
;	This routine simply assigns a channel to this device, issues a QIOW,
;	and deassigns the channel and returns.
;
; Inputs:
;
;	LBN(AP) - Logical Block Number of block to be read.
;
;	BUFFER(AP) - Address of the area in memory into which to read block.
;
;
; Outputs:
;
;	R0	- status code of first system service to fail or SS$_NORMAL.
;
;--
;
; Offsets to input arguments:

	LBN	= 4
	BUFFER	= 8


	.ENTRY	FIL$READ_LBN,^M<R2>

	$ASSIGN_S	DEVNAM=TARGET_DEV_DESC, -
			CHAN=CHAN_WORD		; CHAN_WORD => ASSIGNED CHANNEL.
	BLBC	R0,READ_LBN_RET			; BRANCH AROUND ON FAILURE.
	MOVZWL	CHAN_WORD,R2			; COPY CHANNEL # TO R2.

	$QIOW_S		CHAN=R2, -
			FUNC=#IO$_READLBLK, -
			IOSB=IOSB, -
			P1=@BUFFER(AP), -
			P2=#512, -
			P3=LBN(AP)		; ISSUE QIO AND WAIT.
	BLBC	R0,READ_LBN_RET			; BRANCH AROUND ON FAILURE.
	MOVQ	IOSB,R0				; COPY IOSB TO REGISTERS.
	BLBC	R0,READ_LBN_RET			; BRANCH AROUND ON FAILURE.

	$DASSGN_S	R2			; DEASSIGN THE CHANNEL.

READ_LBN_RET:
	RET
	.END
