	.TITLE	READDRIV - READ DRIVER INTO MEMORY
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSGEN
;
; ABSTRACT:
;	THIS ROUTINE READS A DRIVER INTO MEMORY BY MAPPING IT ($CRMPSC)
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  21-SEP-1979
;	   (ORIGINAL AUTHOR - LEN KAWELL)
;
; MODIFICATION HISTORY:
;
;	V02-005	JLV0038		Jake VanNoy		13-Jul-1981
;		Add G^ to LIB$ routines. Return default file name
;		to SYS$SYSTEM:.EXE.
;
;	V04	JLV0013		Jake VanNoy		7-May-1981
;		Suppress error messages from unsupported device drivers.
;
;	V03	JLV0002		Jake VanNoy		9-Feb-1981
;		Changed psects to allow paged and non-paged segments
;		is SYSGEN image. Add SHOW/CONFIGURATION and 
;		CONFIGURE.
;
;	V02	LMK0001		LEN KAWELL
;		CHANGE TO READ IMAGE HEADER AS WELL.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	$ACFDEF
	$SECDEF				; DEFINE $CRMPSC FLAGS
;
; OWN STORAGE:
;

	.PSECT	PAGED_DATA	rd,wrt,noexe,quad

IN_FAB:					; INPUT FILE FAB
	$FAB	FOP = UFO,-		; RMS WILL JUST OPEN IT
		NAM = IN_NAM,-		; NAME BLOCK ADDRESS
		DNM = <SYS$SYSTEM:.EXE> ; DEFAULT FILE NAME

IN_NAM:					; INPUT FILE NAME BLOCK
	$NAM	ESA = NAME,-		; EXPANDED STRING BUFFER ADDRESS
		ESS = NAM$C_MAXRSS	; EXPANDED STRING BUFFER SIZE

NAME:					; EXPANDED STRING BUFFER
	.BLKB	NAM$C_MAXRSS

MAP_RANGE:				; MAP RANGE ARRAY
	.LONG	0			; JUST USED TO INDICATE P0 SPACE
	.LONG	0


	.PSECT	PAGED_CODE	rd,nowrt,exe,long

	.SBTTL	READ DRIVER
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine maps a driver into memory by doing a create and
;	map section.
;
; CALLING SEQUENCE:
;
;	BSBW	IOGEN$READDRIV
;
; INPUT PARAMETERS:
;
;	R0	Address of filename counted string
;	R3	Address of location to store channel number
;	R4	Address of two longword array to return address range
;		created by $CRMPSC
;	AP	Address of ACF block
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	Those returned by $OPEN and $CRMPSC
;
; SIDE EFFECTS:
;
;	R0 - R2 are used as scratch registers
;
;--

IOGEN$READDRIV::
	MOVAL	W^IN_FAB,R2		; Get address of input FAB
	MOVB	(R0)+,FAB$B_FNS(R2)	; Store filename size in FAB
	MOVAB	(R0),FAB$L_FNA(R2)	; Store filename address in FAB
;
; Open the image file
;
	$OPEN	(R2)			; Open the file
	BLBS	R0,20$			; Br. if success

	moval	Boo$al_acf,R1		; Set address of acf block (not in AP)
	bbs	#acf$v_noload_db,acf$b_aflag(R1),10$ ; Branch if Load driver call
	bbs	#acf$v_support,acf$b_aflag(R1),10$   ; Branch if NOSUPPORT

	PUSHAB	W^NAME			; Create expanded name string
	MOVZBL	W^NAM$B_ESL+IN_NAM,-(SP); descriptor
	MOVL	SP,R1			; Save address of descriptor
	PUSHL	R1			; Push addr. of file name desc.
	PUSHL	#1			; Push FAO count
	PUSHL	#SHR$_OPENIN!<124@16>	; Push error status
	CALLS	#3,G^LIB$SIGNAL		; Signal the error
	ADDL	#8,SP			; Pop descriptor off stack
10$:	RSB
;
; Map the file
;
20$:	MOVW	FAB$L_STV(R2),(R3)	; Store channel number
	$CRMPSC_S CHAN = (R3),-		; Channel
		INADR = W^MAP_RANGE,-	; Map in P0 space
		FLAGS = #SEC$M_EXPREG,-	; Expand region
		RETADR = (R4),-		; Return address array
		VBN = #1		; Map entire image file

	RSB				; Status in R0


	.END
