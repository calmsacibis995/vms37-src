	.TITLE	LOADDRIV - LOAD A DEVICE DRIVER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	DEVICE DRIVER LOADER
;
; ABSTRACT:	LOAD A DRIVER
;
;
; ENVIRONMENT:	USER MODE PRIVILEGED CODE
;
; AUTHOR:	LEN KAWELL, CREATION DATE:8-JUN-78
;
; MODIFICATION HISTORY:
;
;	V02-013	JLV0173		Jake VanNoy		28-Jan-1982
;		Add filling in of DPT$Q_LINKTIME and DPT$L_ECOLEVEL.
;
;	V02-012	JLV0147		Jake VanNoy		4-Jan-1982
;		Change IOC$RELOC_DDT_FDT to IOC$RELOC_DDT.
;
;	V02-011	JLV0131		Jake VanNoy		31-Dec-1981
;		Change return status to error on driver mismatch.
;		Add $SSDEF.
;
;	V02-010	JLV0109		Jake VanNoy		2-Nov-1981
;		Add driver name to relink message.
;		Add call to SCSLOADER if DPT$V_SCS is set.
;
;	V02-009	JLV0081		Jake VanNoy		31-Aug-1981
;		Fill in UCB$L_DDT field for RELOADED driver in each UCB.
;
;	V02-008	JLV0075		Jake VanNoy		29-Aug-1981
;		Added relocation of DDT and FDT on RELOAD.
;
;	V07	JLV0012		Jake VanNoy		8-May-1981
;	 	Changed order of checking DPT type and SYSTEM version 
;		so invalid DPT's are flagged as such.
;
;	V06	JLV0002		Jake VanNoy		9-Feb-1981
;		Changed psects to allow paged and non-paged segments
;		is SYSGEN image. Add SHOW/CONFIGURATION and 
;		CONFIGURE.
;
;	V05	LMK0002		LEN KAWELL		29-JAN-1980
;		ADD CHECK TO BE SURE THAT DRIVER IS ASSEMBLED AND LINKED 
;		WITH THE CORRECT VERSION OF THE SYSTEM.
;
;	V04	SPR26881	LEN KAWELL		05-NOV-1979
;		FIXED DRIVER RELOADING PROBLEM WHERE MORE THAN ONE UNIT
;		PER CONTROLLER CAUSED DRIVER NOT TO BE DEALLOCATED.
;
;	V03	SRB0001		STEVE BECKHARDT		22-SEP-1979
;		Changed routine IOGEN$LOADDRIV to call a subroutine
;		(IOGEN$READDRIV) to read in the driver.  This was done
;		to allow the use of an alternate subroutine in the
;		standalone version of SYSGEN.  This, incidentally,
;		moved all of the changes in LMK0001 to IOGEN$READDRIV.
;
;	V02	LMK0001		LEN KAWELL	29-DEC-1978
;		ADDED BETTER RMS ERROR HANDLING.
;--
	.PAGE
	.SBTTL	DECLARATIONS


;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
FILE_NAME =	4			;OFFSET TO FILE NAME ARG

	$IHDDEF				;DEFINE IMAGE HEADER OFFSETS
	$IHPDEF				;DEFINE IMAGE HEADER OFFSETS
	$IHIDEF				;DEFINE IMAGE HEADER OFFSETS
	$JPIDEF				;DEFINE SYS$GETJPI VALUES
	$DPTDEF				;DEFINE DRIVER PROLOGUE TABLE
	$DYNDEF				;DEFINE DYNAMIC MEMORY TYPES
	$DDBDEF				;DEFINE DEVICE DATA BLOCK
	$UCBDEF				;DEFINE UNIT CONTROL BLOCK
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$SSDEF				;DEFINE SYSTEM MESSAGES
	$SYSGMSGDEF			;DEFINE SYSGEN MESSAGES

;
; OWN STORAGE:
;
	.PSECT	NONPAGED_DATA	rd,wrt,noexe,quad

RET_ADDR:				;MAP RANGE ARRAY RETURNED BY SYS
	.BLKL	2

CHANNEL:				;LOCATION TO STORE CHANNEL NUMBER
	.BLKW	1

LINK_TIME:
	.BLKL	2			;LINK DATE TEMPORARY
ECO_LEVEL:
	.BLKL	1			;ECO TEMPORARY


	.PAGE
	.SBTTL	LOAD DRIVER

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine will load a device driver into the system pool
;	and if the same name driver was already loaded, it will
;	reinitialize all the control-blocks with info from the new
;	driver and unload the old driver.
;
; CALLING SEQUENCE:
;
;	CALL IOGEN$LOAD(FILE_NAME)
;
; INPUT PARAMETERS:
;
;	FILE_NAME(AP) = address of file name counted string
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IOGEN$GL_DPT = ADDR OF NEW DRIVER PROLOGUE TABLE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0 = STATUS OF LOAD OPERATION
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.PSECT	NONPAGED_CODE	rd,nowrt,exe,long

IOGEN$LOADDRIV::
	.WORD	^M<R2,R3,R4,R5>

	MOVL	FILE_NAME(AP),R0	;GET ADDR OF FILE NAME STRING
	MOVAW	W^CHANNEL,R3		;GET ADDR TO STORE CHANNEL #
	MOVAQ	W^RET_ADDR,R4		;GET ADDR OF RETURN ADDRESS ARRAY
	BSBW	IOGEN$READDRIV		;READ IN DRIVER
	BLBS	R0,3$			;BRANCH IF SUCCESS
	BRW	70$			;BR IF ERROR
;
; CHECK IF DRIVER IS ASSEMBLED AND LINKED WITH CORRECT VERSION OF VMS,
; AFTER VALIDATING DPT
;
3$:	MOVL	(R4),R5			;GET ADDR OF IMAGE HEADER
	MOVZBL	IHD$B_HDRBLKCNT(R5),R0	;GET IMAGE HEADER BLOCK COUNT
	MULL	#512,R0			;COMPUTE HEADER BYTE COUNT
	ADDL	R0,(R4)			;SET ADDRESS OF FIRST IMAGE SECTION (DPT)
	MOVL	(R4),R1			;GET ADDRESS OF DRIVER PROLOGUE TABLE

	CMPB	DPT$B_TYPE(R1),#DYN$C_DPT ;IS IT A VALID DRIVER PROLOGUE
	BEQLU	5$			;BR IF YES
	PUSHL	#SYSG$_INVDPT		;SET INVALID DPT ERROR
	BRB	40$			;BRANCH TO EXIT

5$:	CMPW	#DPT$W_VERSION,DPT$W_INITTAB(R1) ;DOES DPT HAVE A VERSION NUMBER?
	BGEQU	10$			;BR IF NO - DEFINITELY NOT RIGHT
	CMPW	DPT$W_VERSION(R1),#DPT$C_VERSION ;DOES VERSION MATCH OUR VERSION?
	BNEQ	10$			;BR IF NO - NOT ASSEMBLED WITH RIGHT SYS
	CMPW	#IHD$L_SYSVER,IHD$W_ACTIVOFF(R5) ;DOES HEADER HAVE A SYS VERSION?
	BGEQU	10$			;BR IF NO - DEFINITELY NOT RIGHT
	MOVL	IHD$L_SYSVER(R5),R0	;GET SYSTEM VERSION OF IMAGE
	BEQL	30$			;BR IF NONE - NOT LINKED WITH EXEC!?
	CMPL	R0,#SYS$K_VERSION	;DOES IMAGE VERSION MATCH OUR VERSION?
	BEQL	30$			;BR IF YES
10$:	PUSHL	FILE_NAME(AP)
	PUSHL	#1
	PUSHL	#SYSG$_DRIVENAM	
	CLRL	-(SP)
	PUSHL	#SYSG$_SYSVERDIF	;SET FAILURE STATUS
	CALLS	#5,G^LIB$SIGNAL		; SIGNAL
	MNEGL	#2,-(SP)		; SET "ERROR ALREADY SIGNALED"
	BRB	40$			;EXIT
;
; DRIVER IS OK, FILL IN DPT FIELDS
;
30$:
	MOVZWL	IHD$W_IMGIDOFF(R5),R0	; GET IMAGE IHI OFFSET
	ADDL2	R5,R0			; CALCULATE ADDRESS OF IHI
	MOVQ	IHI$Q_LINKTIME(R0), -
		LINK_TIME		; STORE IN TEMPORARY

	CLRL	ECO_LEVEL		; ASSUME NO PATCHES
	MOVZWL	IHD$W_PATCHOFF(R5),R0	; GET IMAGE IHP OFFSET
	BEQL	35$			; BRANCH IF NONE
	ADDL2	R5,R0			; CALCULATE ADDRESS OF IHP
	MOVL	IHP$L_ECO1(R0), -
		ECO_LEVEL		; STORE IN TEMPORARY
;
; CHANGE MODE TO KERNEL TO LOAD
;
35$:
	$CMKRNL_S W^LOADER,(AP)	;
	PUSHL	R0			;SAVE STATUS
;
; DELETE THE INPUT FILE VIRTUAL ADDRESSES, DEASSIGN THE CHANNEL, AND RETURN
;
40$:	MOVL	R5,(R4)			;RESET ADDRESS RANGE TO INCLUDE HEADER
	$DELTVA_S (R4)			;DELETE THE CREATED ADDRESS RANGE
	BLBS	R0,50$			;BR IF SUCCESS
	MOVL	R0,(SP)			;SAVE ERROR STATUS
50$:	$DASSGN_S (R3)			;DEASSIGN THE CHANNEL
	BLBS	R0,60$			;BR IF SUCCESS
	MOVL	R0,(SP)			;SAVE ERROR STATUS
60$:	
;
; CHECK TO SEE IF SCS CODE NEEDS TO BE LOADED AND LOAD IT IF NECESSARY.
;
	CALLS	#0,BOO$SCSLOADER	;CALL TO LOAD
					;(ALWAYS RETURNS SUCCESS)

65$:	POPL	R0			;RESTORE THE STATUS

70$:
	RET

	.PAGE
	.SBTTL	LOADER - LOAD THE DRIVER
;++
;
; LOADER - LOAD THE NEW DRIVER
;
;	Kernel mode routine to actually load the driver, initialize
;	any associated control blocks, and unload a previous driver.
;
; INPUTS:
;
;	RET_ADDR = ADDRESS OF MAPPED DRIVER SECTION
;	LINK_TIME = QUADWORD LINK TIME FROM IMAGE HEADER
;	ECO_LEVEL = LONGWORD ECO LEVEL FROM IMAGE HEADER
;
; OUTPUTS:
;
;	R0 = STATUS OF OPERATION
;	IOGEN$GL_DPT = ADDRESS OF NEW DRIVER PROLOGUE TABLE
;
;--
LOADER:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
;
; MOVE DRIVER TO NON-PAGED POOL
;
	MOVL	W^RET_ADDR,R9		;GET ADDR OF DRIVER PROLOGUE

5$:	MOVZWL	DPT$W_SIZE(R9),R1	;GET SIZE OF DPT
	JSB	G^EXE$ALONONPAGED	;ALLOCATE NON-PAGED MEMORY
	BLBS	R0,10$			;BR IF SUCCESS
	MOVZWL	#SS$_INSFMEM,R0		;SET INSUFFICIENT MEMORY ERROR
	RET				;...EXIT

10$:	PUSHL	#SS$_NORMAL		;ASSUME SUCCESS
	MOVQ	R1,R10			;SAVE SIZE AND ADDR OF BUFFER
	MOVC	DPT$W_SIZE(R9),(R9),(R11) ;MOVE DRIVER TO THE BUFFER
	MOVW	R10,DPT$W_SIZE(R11)	;SET ACTUAL SIZE OF BUFFER
	MOVQ	LINK_TIME, -
		DPT$Q_LINKTIME(R11)	; SET LINK TIME
	MOVL	ECO_LEVEL, -
		DPT$L_ECOLEVEL(R11)	; COPY FIRST LONGWORD OF ECO UPDATES
;
; SCAN DPT LIST TO CHECK IF DRIVER CURRENTLY LOADED
;
	BSBW	IOGEN$LOCK_IODB		;LOCK THE I/O DATABASE
	MOVAB	DPT$T_NAME(R11),R9	;GET ADDR OF DRIVER NAME
	MOVZBL	(R9)+,R8		;GET SIZE OF DRIVER NAME
	MOVAB	G^IOC$GL_DPTLIST,R10	;GET ADDR OF DPT LIST
	MOVL	R10,R4			;SAVE IT
20$:
	MOVL	DPT$L_FLINK(R10),R10	;GET ADDR OF NEXT DPT
	CMPL	R10,R4			;END OF LIST?
	BNEQ	30$			;BR IF NOT
	BRW	LINK_DPT		;ELSE NOT LOADED - JUST ADD TO LIST
30$:	MOVAB	DPT$T_NAME(R10),R1	;GET ADDR OF DRIVER NAME
	MOVZBL	(R1)+,R0		;GET SIZE OF DRIVER NAME
	CMPC5	R0,(R1),#0,R8,(R9)	;COMPARE DRIVER NAMES
	BNEQ	20$			;BR IF NOT EQUAL
	TSTB	DPT$B_REFC(R10)		;ANY DDB'S CONNECTED TO IT?
	BNEQ	BUSY_CHECK		;BR IF YES
	BRW	UNLOAD			;ELSE - JUST UNLOAD IT
;
; SCAN DEVICE DATABASE TO CHECK THAT ANY DEVICES THAT WILL USE
; THE NEW DRIVER ARE NOT BUSY
;
BUSY_CHECK:
	DSBINT				;DISABLE INTERRUPTS
	MOVAL	G^IOC$GL_DEVLIST,R6	;GET ADDRESS OF DEVICE LISTHEAD
10$:	MOVL	DDB$L_LINK(R6),R6	;GET ADDR OF NEXT DDB
	BEQL	UNLOAD_CHK		;BR IF NONE - NONE ARE BUSY
	MOVAB	DDB$T_DRVNAME(R6),R1	;GET ADDR OF DRIVER NAME
	MOVZBL	(R1)+,R0		;GET SIZE OF DRIVER NAME
	CMPC5	R0,(R1),#0,R8,(R9)	;DRIVER NAMES MATCH?
	BNEQ	10$			;BR IF NOT
	MOVL	DDB$L_UCB(R6),R7	;GET ADDR OF FIRST UCB
	BEQL	10$			;BR IF NONE
20$:	BBS	#UCB$V_BSY,UCB$W_STS(R7),30$ ;BR IF DRIVER BUSY
	MOVL	UCB$L_LINK(R7),R7	;GET ADDR OF NEXT UCB
	BEQL	10$			;BR IF NONE
	BRB	20$			;CONTINUE CHECKING UCB'S

30$:	MOVZWL	#SS$_DEVACTIVE,R6	;SET ERROR STATUS
	BRW	ERROR			;...EXIT
;
; CHECK IF CURRENT DRIVER CAN BE UNLOADED
;
UNLOAD_CHK:
	BBS	#DPT$V_NOUNLOAD,DPT$B_FLAGS(R10),10$ ;BR IF NOT TO BE UNLOADED
	MOVW	DPT$W_UNLOAD(R10),R0	;GET ADDR OF UNLOAD ACTION ROUTINE
	BEQL	REINIT			;BR IF NONE
	ADDL	R10,R0			;GET ADDR OF UNLOAD ROUTINE
	PUSHR	#^M<R6,R7,R8,R9,R10,R11,AP> ;SAVE REGISTERS
	JSB	(R0)			;CALL THE UNLOAD ROUTINE
	POPR	#^M<R6,R7,R8,R9,R10,R11,AP> ;RESTORE REGISTERS
	BLBS	R0,REINIT		;BR IF OK TO UNLOAD

10$:	MOVL	#SYSG$_NOUNLOAD,R6	;SET ERROR STATUS
	BRW	ERROR			;...EXIT
;
; RE-SCAN DDB LIST TO FIND DDB'S CONNECTED TO CURRENT DRIVER
; AND RE-INIT THE ASSOCIATED CONTROL BLOCKS
;
REINIT:
	CLRL	SGN$GL_DDB		;CLEAR ADDRESS OF DDB
	MOVAL	G^IOC$GL_DEVLIST,R6	;GET ADDRESS OF DEVICE LIST
10$:	MOVL	DDB$L_LINK(R6),R6	;GET ADDR OF NEXT DDB
	BEQL	UNLOAD_ENBINT		;BR IF NONE
	MOVAB	DDB$T_DRVNAME(R6),R1	;GET ADDR OF DRIVER NAME
	MOVZBL	(R1)+,R0		;GET SIZE OF DRIVER NAME
	CMPC5	R0,(R1),#0,R8,(R9)	;DRIVER NAMES MATCH?
	BNEQ	10$			;BR IF NO

	MOVL	R6,SGN$GL_DDB		;SET ADDRESS OF DDB
	DECB	DPT$B_REFC(R10)		;DEC REF COUNT OF CURRENT DRIVER
	INCB	DPT$B_REFC(R11)		;INC REF COUNT OF NEW DRIVER
	MOVL	R11,R4			;SET ADDR OF DPT
	MOVL	DDB$L_UCB(R6),R5	;SET ADDR OF UCB
20$:	JSB	G^IOC$REINITDRV		;RE-INIT DRIVER DATABASE
	BLBC	R0,30$			;BR IF ERROR
	MOVL	DDB$L_DDT(R6),-
		UCB$L_DDT(R5)		;SET DDT ADDRESS
	MOVL	UCB$L_LINK(R5),R5	;GET ADDR OF NEXT UCB
	BNEQ	20$			;BR IF THERE IS ONE
	BSBW	IOGEN$CNTRL_INI		;RE-INIT THE CONTROLLER
	BRB	10$			;CHECK NEXT DDB

30$:	MOVL	#SYSG$_INVDPTINI,R6	;SET ERROR STATUS
	DECL	R3			;DECREMENT INIT TABLE POINTER
	SUBL3	R11,R3,W^IOGEN$GL_DPT ;SAVE TABLE OFFSET FOR DEBUGGING
	MOVL	R10,R4			;SET ADDR OF CURRENT UCB
	JSB	G^IOC$REINITDRV		;TRY TO UNDO ANY DAMAGE
;
; ERROR LOADING NEW DRIVER - UNLOAD IT
;
ERROR:
	ENBINT				;ENABLE INTERRUPTS
	MOVL	R11,R0			;SET ADDR OF DRIVER
	JSB	G^EXE$DEANONPAGED	;DEALLOCATE ITS STORAGE
	BSBW	IOGEN$UNLK_IODB		;UNLOCK THE I/O DATABASE
	MOVL	R6,R0			;SET ERROR STATUS
	TSTL	(SP)+			;THROW AWAY SUCCESS STATUS
	RET

;
; UNLOAD CURRENTLY LOADED DRIVER
;
UNLOAD_ENBINT:
	ENBINT				;RE-ENABLE INTERRUPTS
;
; See if there is a driver to relocate
;
	TSTL	W^SGN$GL_DDB		;WAS AN ADDRESS SET?
	BEQL	UNLOAD			;BRANCH IF NO
	PUSHL	R11			;SAVE DPT
	MOVL	W^SGN$GL_DDB,R11	;SET ADDRESS OF DDB
	JSB	G^IOC$RELOC_DDT		;RELOCATE DRIVER DDT and FDT
	POPL	R11			;RESTORE DPT
UNLOAD:
	TSTB	DPT$B_REFC(R10)		;ANY REFERENCES LEFT?
	BNEQ	LINK_DPT		;BR IF YES
	REMQUE	(R10),R10		;REMOVE DPT FROM LIST
	MOVAB	G^EXE$INIT,R0		;GET ADDR OF TOP OF EXEC
	CMPL	R10,R0			;DRIVER IN EXEC?
	BLSSU	LINK_DPT		;BR IF YES
	MOVL	R10,R0			;SET ADDR OF DPT
	JSB	G^EXE$DEANONPAGED	;DEALLOCATE BUFFER
;
; LINK NEW DRIVER INTO DPT LIST
;
LINK_DPT:
	INSQUE	(R11),G^IOC$GL_DPTLIST	;INSERT NEW DRIVER INTO DPT LIST
	BSBW	IOGEN$UNLK_IODB		;UNLOCK THE I/O DATABASE
	MOVL	R11,W^IOGEN$GL_DPT	;SAVE ADDR OF PROLOGUE TABLE
	POPL	R0			;SET STATUS
	RET

	.END
