	.TITLE	SCSLOADER - Loader for SCS code
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
; ABSTRACT:
;
;	This module loads SCS code for driver that require it.
;
; ENVIRONMENT:
;
;	VAX/VMS  user and kernel mode, raises IPL.
;
;--
;
; AUTHOR:	Kerbey T. Altmann, CREATION DATE: August, 1981
;
; MODIFIED BY:
;
;	V03-001	JLV0208		Jake VanNoy		 7-APR-1982
;		Change call to RMS to a call to BOO$READDRIV so that
;		this module can be used in STASYSGEN.
;
;	V02-003 JLV0170		Jake VanNoy		25-Jan-1982
;		Remove reference to SCS$GL_MCADR.
;
;	V02-002	JLV0123		Jake VanNoy		19-Nov-1981
;		Replaced SCS$GA_VECTOR with SCS$AL_LOAVEC.
;
;	V02-001	JLV0121		Jake VanNoy		31-Oct-1981
;		Modify slightly for placement into SYSGEN image.
;
;
;**

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DPTDEF
	$SYSGMSGDEF

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	SCSLOADER is called to check for presence of SCS code, if
;	not present, it loads it into non-paged pool.
;
; CALLING SEQUENCE:
;	
;	CALLS	#0,BOO$SCSLOADER
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	
;	SCS$AL_LOAVEC - Address of entry point into SCS code.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	Non-paged pool is allocated.
;
; COMPLETION CODES:
;
;	SS$_NORMAL - All errors are signaled from with this module.
;
; SIDE EFFECTS:
;	NONE
;
;
;--

;
; OWN STORAGE
;
	.PSECT	NONPAGED_DATA,rd,wrt,noexe,quad

SCS_NAME:	.ASCIC	/SCSLOA/	; Input file spec
SCS_CHAN:	.LONG	0		; Channel number
SCS_ADDR:	.BLKB	8		; Return addresses


;
; BEGIN
;

	.PSECT	NONPAGED_CODE,rd,nowrt,exe,long

	.ENTRY	BOO$SCSLOADER,^M<R2,R11>

	$CMKRNL_S W^SCS_CHECK		; See if SCS needs to be loaded
	BLBC	R0,100$			; Branch if not necessary
;
; Set up inputs for reading file in 
; (Can't use RMS directly because of STASYSGEN)
;
	MOVAB	SCS_NAME,R0		; Address of counted string
	MOVAB	SCS_CHAN,R3		; Address of channel
	MOVAB	SCS_ADDR,R4		; Address of quadword region descriptor

	BSBW	IOGEN$READDRIV		; Read in SCS code
	BLBC	R0,99$			; Branch if error!

	ADDL3	#512,(R4),R11		; Set address to load, skip image header

;
; Now execute the remaining code in KERNEL mode.
;

90$:	$CMKRNL_S W^SCSPOOL		; Execute kernel routine
	BLBS	R0,100$			; Branch if OK
	
99$:	PUSHL	R0			; Set error
	CLRL	-(SP)			; zero longword
	PUSHL	#SYSG$_NOSCS		; No SCS code
	CALLS	#3,G^LIB$SIGNAL		; Error

100$:	MOVL	#SS$_NORMAL,R0		; Always return success
	RET				; Return




SCS_CHECK:	.WORD ^M<R2>

;
; Check driver to see if SCS is required
;

	CLRL	R0			; Assume "Don't load"
	MOVL	IOGEN$GL_DPT,R2		; Set address of DPT
	BEQL	10$			; Branch if none
	BBC	#DPT$V_SCS,-
		DPT$B_FLAGS(R2),10$	; Branch if SCS not specified
;
;  Driver says to load SCS, now check to see if it's loaded
;
	CMPL	#EXE$LOAD_ERROR,-
		G^SCS$AL_LOAVEC+2	; See if vector has changed from 
					;  initial value
	BNEQ	10$			; Branch if loaded

	MOVL	#SS$_NORMAL,R0		; Set "Load SCS"
10$:	RET				; Return


SCSPOOL:
	.WORD	^M<R2,R3,R4,R5,R6,R9,R10>

;
; Grab enough non-paged pool for the code
;
	MOVL	(R11), R1		; Size needed for code
	JSB	G^EXE$ALONONPAGED	; Get the space
	BLBS	R0, 10$			; Okay
	MOVZWL	#SS$_INSFMEM, R0
	RET				; Error
10$:	
	MOVQ	R1, R9			; Save size and address
	MOVC3	R9, (R11), (R10)	; Move the code to non-paged pool
;
; Fix up the vectors
;
	SETIPL	#IPL$_SYNCH		; Synchronize
;
;*****
; THE FOLLOWING IS STOLEN FROM INIT.MAR
;
; The loadable SCS code image (SCSLOA.EXE) is now allocated non-paged 
; pool space and read into it by SYSBOOT.  The address of this code
; is passed in BOO$GL_SCSLOA.  Link the resident system vectors at
; SCS$AL_LOAVEC.  The loadable file has self-describing vector and
; offset information within it.
;
SCS_LOADCODE:
	MOVL	R10,R2			; Address of SCSLOA image in pool
	MOVAL	G^SCS$AL_LOAVEC,R3	; Address of resident vectors.
	MOVL	R2,R4			; Save
	BSBW	LINK_VEC		; Connect vectors to loaded routines.
	MOVL	4(R4),R0		; Possible initialization routine
	BEQL	25$			; None, leave
	ADDL	R4,R0			; Absolute address of init
	BSBB	40$			; Call it
;
; After init and releasing itself to pool, return here
;
	BLBC	R0, 30$
25$:	MOVL	#1, R0			; Set success
30$:	SETIPL	#0
	RET

;
; Cute little routine to do an REI to code.
;
40$:	MOVPSL	-(SP)			; Set up PSL
	PUSHL	R0			; Address to start at
	REI				; Flush TB and jump to code

;
; Connect system vectors to loaded data routines and data structures.
; Subroutine LINK_VEC calculates the address of the next loaded routine
; and fills it into the next resident vector.
;
; Type and action are as follows:
;	Type <= 0	Leave
;	Type =  1	Data pointer - adjust offset
;	Type =  2	Aligned JMP - skip JMP, adjust offset, skip align
;	Type =  3	Unaligned JMP - skip JMP, adjust offset
;
; INPUTS:
;	R2/ pointer into list of self-relative offsets into loaded code
;	R3/ address at which calculated address of loaded routines/data
;	    structures should be written
;
LINK_VEC:
	ADDL	#12,R2			; Step past the header
10$:	CVTBL	(R2)+,R0		; Pick up the type byte
	BLEQ	40$			; Leave if <= 0
	DECL	R0			; Check type
	BEQL	30$			; For TYPE 1, no skip, no alignment
	DECL	R0			; Check type
	BGTR	20$			; For TYPE 3, no alignment
	ADDL	#3,R3			; Round up to
	BICL	#3,R3			;  next longword boundary
20$:	TSTW	(R3)+			; Skip the JMP @#
30$:	ADDL3	R2,(R2)+,(R3)+		; Add offset and stuff
	BRB	10$			; Try for more

40$:	RSB

	.END
