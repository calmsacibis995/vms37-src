	.TITLE	BOOTBLOCK
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	Device-independent boot block for VAX
;
; ABSTRACT:
;
;	Reads a file (usually VMB.EXE) off the booting medium into
;	memory and transfers control to the VMB code.
;
; AUTHOR:
;
;	Carol Peters	23 August 1979
;
; REVISION HISTORY:
;
;	Robert Rappaport	13 Sept 1979
;		Simplified references to local data items.
;
;--

	.SBTTL	Declarations

;
; Own storage.
;

FILE_STATS:				; Reserve space to contain
FILE_SIZE:
	.LONG	0			; # blocks in primary boot.
START_LBN:
	.LONG	0			; Swapped words of start LBN.
LOAD_ADDR:
	.LONG	0			; Load address for primary boot.
					; NOTE - the load address here is
					; relative to the base of the 64KB
					; of physical memory in which we are
					; currently running.  As explained
					; below, the UNIBUS (or MASSBUS) map
					; registers numbered 0-127 will be
					; mapped to this same 64KB.  Therefore,
					; this address, as is, can be used by
					; UNIBUS (or MASSBUS) devices to
					; pinpoint where to load the primary
					; bootstrap program.  However, to
					; calculate the physical memory address
					; corresponding to this relative
					; address, we must add in the physical
					; offset of the base of the 64KB.

	.SBTTL	BOO$BLOCK - reads in and starts boot code

;++
; Functional description:
;
;	The boot block code reads the primary bootstrap file into
;	physical memory a block at a time. The code calls the device-
;	dependent ROM subroutine once for each block in the bootstrap
;	file. Then the routine jumps to byte 0 of the loaded code.
;
; Inputs:
;
;	R0	- type of boot device
;	R1	- (UNIBUS) address of the I/O page for the boot device's
;		  	   UNIBUS
;		  (MASSBUS) address of the device's MASSBUS adapter
;	R2	- (UNIBUS) 32-bit physical address of the boot device's
;			   CSR (bits <31:24> must be zero)
;		  (MASSBUS) adapter's controller/formatter number
;	R3	- unit number of the boot device
;	R5	- software boot control flags
;	R6	- physical address of the device-dependent ROM routine
;		  that reads an arbitrary LBN into memory
;
;	SP	- <base_address + ^X200> of 64kb of good memory
;
; Implicit inputs:
;
;	UNIBUS adapter map registers 0-127 are mapped to the 64kb of
;	good memory. MR 0 maps to first page of memory, etc.
;
;	The boot block is loaded into the 1st page of the 64KB of
;	memory, i.e. the page which corresponds to MR 0.
;
;	The first longword (bytes 0-3) of the boot block contains
;	the size of the primary bootstrap.
;
;	The second longword (bytes 4-7) contains the starting LBN of
;	the bootstrap file, expressed as swapped words.
;
;	The third longword (bytes 8-11) contains the relative offset
;	from the base of the 64KB of memory into which we should load
;	the primary bootstrap program.  This must be a positive
;	number less than or equal to 64KB-(size*512) where size is the
;	size of the primary bootstrap.
;
;	The starting LBN format is defined by DSC and cannot be
;	changed. The load address is defined by WRITEBOOT and cannot
;	be changed.
;
; Outputs:
;
;	R0	- type of boot device
;	R1	- (UNIBUS) address of the I/O page for the boot device's
;		  	   UNIBUS
;		  (MASSBUS) address of the device's MASSBUS adapter
;	R2	- (UNIBUS) 18-bit UNIBUS address of the boot device's
;			   CSR
;		  (MASSBUS) adapter's controller/formatter number
;	R3	- unit number of the boot device
;	R5	- software boot control flags
;	R6	- physical address of the device-dependent ROM routine
;		  that reads an arbitrary LBN into memory
;
;	SP	- <base_address + ^X200> of 64kb of good memory
;
; Implicit outputs:
;
;	The routine preserves R0-R1, R3, R4, R5-R6, R8, R10-R11, AP, and SP.
;
;	Transfers control to the 0th byte of the primary bootstrap
;	program.
;
;--

BOO$BLOCK_CODE:				; Start of device independent code.
	PUSHAB	FILE_STATS		; Move physical address of base of
					; 64KB of memory.
	ADDL	LOAD_ADDR,(SP)		; Add in relative load address. Result
					; is physical address of load point.
					; Leave on stack for final JMP inst.

	PUSHR	#^M<R0,R4,R5,R8>	; Save 4 registers for temps.
	MOVL	FILE_SIZE,R4		; Get # of blocks in VMB.
	MOVW	START_LBN,R8		; Get upper word value of LBN.
	MOVW	START_LBN+2,START_LBN	; Move lower word value of LBN into
					; lower word position.
	MOVW	R8,START_LBN+2		; Move upper word value to upper
					; word position.
	MOVL	START_LBN,R8		; Pickup the swapped LBN.
	MOVL	LOAD_ADDR,R5		; Get primary boot relative load addr.
	PUSHL	16(SP)			; Copy physical transfer address to
					; top of stack for those devices such
					; as the TU58 which need physical
					; rather than UNIBUS virtual addresses.

READ_BLOCK:				; VMB read loop.
	JSB	(R6)			; Call ROM read LBN routine.
	BLBS	R0,NEXT_BLOCK		; Branch on successful read.
	HALT				; Halt on failure to read.

NEXT_BLOCK:				; Read next block.
	ADDL	#^X200,R5		; Increment relative address 512 bytes.
	ADDL	#^X200,(SP)		; Increment physical address one page.
	INCL	START_LBN		; Increment LBN number.
	MOVL	START_LBN,R8		; Next LBN is LBN+1.
	SOBGTR	R4,READ_BLOCK		; If more blocks, loop.
	TSTL	(SP)+			; Pop now useless data from stack.

;
; The primary bootstrap program is now in physical memory starting at
; the specified load address. Restore the saved registers, convert the
; CSR address to an 18-bit UNIBUS address, and transfer control to the
; program.
;

	POPR	#^M<R0,R4,R5,R8>	; Restore registers.
	BICL	#^XFFFC0000,R2		; Reduce 32-bit CSR to 18-bit
					; CSR that VMB expects.
	JMP	@(SP)+			; Jump to primary bootstrap program.

	.END
