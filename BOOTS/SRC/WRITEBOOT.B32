MODULE writeboot (	! Writes boot block code and data into LBN 0
			IDENT = 'V03-000',
			MAIN = write_boot
			) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!
!	WRITEBOOT
!
! ABSTRACT:
!
!	The purpose of this utility is to write a BOOTable program into
!	LBN 0 of a system disk or TU58.  This BOOTable program will
!	contain within its first three longwords, the starting LBN and
!	size of a primary VMS bootstrap file located on this same system
!	disk or TU58 and also the relative location in memory where the
!	primary bootstrap should be loaded.  The system disk or TU58 may be
!	a FILES11 (ODS-2) or an RT-11 formatted device.
!
! ENVIRONMENT:  
!
!	VAX/VMS operating system, requires LOG_IO privilege. Assumes
!	bootstrap file is VMB.EXE unless otherwise specified.
!
! AUTHOR:
!
!	Carol Peters	20 June 1979
!
! REVISION HISTORY:
!
!	V02-002	STJ0054		Steven T. Jeffreys,		29-Jun-1981
!		Changed external routine references to use general addressing mode.
!
!	Robert Rappaport 10 Aug 1979
!		Major changes to accomodate RT-11 format devices.
!
!	Steve Jeffreys   12 Nov 1979
!		- Enable WRITEBOOT to accept input from an indirect command file.
!		- Remove verify prompt for target device.
!		- Add prompt for VBN of code in boot file.
!		- Allow boot code to be loaded at an arbitrary address.
!--

!
! Table of contents
!

FORWARD ROUTINE
	write_boot;

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB.L32';			! VMS system definitions.

!
! External declarations
!

EXTERNAL ROUTINE
	ots$cvt_tz_l	: ADDRESSING_MODE (GENERAL),
	lib$index	: ADDRESSING_MODE (GENERAL),
	lib$put_output	: ADDRESSING_MODE (GENERAL),
	lib$sfree1_dd	: ADDRESSING_MODE (GENERAL),
	RTF$TARGET_DEV	: ADDRESSING_MODE (GENERAL),
	RTF$OPENFILE	: ADDRESSING_MODE (GENERAL),
	lib$get_input	: ADDRESSING_MODE (GENERAL);

!
! Macros
!

MACRO
	bbl_l_filesize	= 0,0,32,0%,		! Primary boot file size in blocks.
	bbl_w_hiordlbn	= 4,0,16,0%,		! Hi order word of starting LBN of primary boot
	bbl_w_loordlbn	= 6,0,16,0%,		! Low order word of starting LBN of primary boot
	bbl_l_loadadr	= 8,0,32,0%;		! Address at which to load primary boot file
						! (expressed as offset from sp).

!
! Own storage
!

OWN
	priboo_descrip	: BLOCK [8, BYTE] INITIAL	! Device/file spec descriptor.
				(BYTE
					(REP 3 OF (0),
					dsc$k_class_d,
					REP 4 OF (0))),
	loadadr_descrip	: BLOCK [8, BYTE] INITIAL	! Load address string descriptor.
				(BYTE
					(REP 3 OF (0),
					dsc$k_class_d,
					REP 4 OF (0))),
	prompt_descrip	: BLOCK [8, BYTE] INITIAL	! Prompt string descriptor.
				(BYTE
					(REP 3 OF (0),
					dsc$k_class_s)),

	vbn_descrip	: BLOCK [8, BYTE] INITIAL	! Prompt string for VBN
				(BYTE
					(REP 3 OF (0),
					dsc$k_class_d,
					REP 4 OF (0))),

	priboo_fab	: $FAB_DECL,			! Primary bootstrap file's FAB.
	bootbl_fab	: $FAB_DECL,			! Boot block file's FAB.

	priboo_filnam	: VECTOR [nam$c_maxrss, BYTE],	! Primary bootstrap file name after open.
	priboo_exp_name	: VECTOR [nam$c_maxrss, BYTE],	! Primary bootstrap file name before open.

!	bootbl_filnam	: VECTOR [nam$c_maxrss, BYTE],	! Boot block file name after open.
!	bootbl_exp_name	: VECTOR [nam$c_maxrss, BYTE],	! Boot block file name before open.

!	result_nam_blk	: $NAM (RSA = priboo_filnam),	! Related file NAM block.

!	bootbl_nam_blk	: $NAM (			! Name block for BOOTBLOCK.EXE.
!				RSA = bootbl_filnam,
!				RSS = nam$c_maxrss,
!				ESA = bootbl_exp_name,
!				ESS = nam$c_maxrss,
!				RLF = result_nam_blk),

	priboo_nam_blk	: $NAM (			! Name block for primary bootstrap.
				RSA = priboo_filnam,
				RSS = nam$c_maxrss,
				ESA = priboo_exp_name,
				ESS = nam$c_maxrss),

	priboo_xabfhc	: $XABFHC (),			! Primary bootstrap file header characteristics block.
!	bootbl_xabfhc	: $XABFHC (),			! Boot block file header characteristics block.

	privilege_mask	: BLOCK [8, BYTE],
	getjpi_itemlist	: BLOCK [4, LONG] INITIAL
				(WORD (8, JPI$_PROCPRIV),
				LONG (privilege_mask, 0,0)),
	io_stat_block	: VECTOR [2],

	two_block_buf	: BLOCK [1024, BYTE],

	bootdev_descrip	: BLOCK [8, BYTE],
	bootdev_chan	: WORD,
	load_adr		: LONG,
	devchar_buff	: BLOCK [3, LONG]	! Buffer to receive device characteristics.
			  INITIAL (LONG (REP 3 OF (0))),


	devchar_descrip	: BLOCK [8, BYTE]	! Descriptor for Device characteristics.
			  INITIAL (LONG (12, devchar_buff)),

	filnam_descrip	: BLOCK [8, BYTE]		! Descriptor for just the file name (no device or directory).
			  INITIAL (BYTE (REP 8 OF (0))),
	filspec_descrip	: BLOCK [8, BYTE]		! Descriptor for file spec returned from $PARSE.
			  INITIAL (LONG (0, priboo_exp_name)),

	vbn		: VECTOR [1, LONG],		! VBN of boot file code
	stat_block	: VECTOR [2, LONG];		! Area to hold LBN and size of specified file.

BIND
	block_buffer = two_block_buf : BLOCK [512, BYTE],
	logio_msg = UPLIT BYTE (%ASCII 'You lack LOG_IO privilege.') : VECTOR [, LONG],
	vbn_bnds_msg = UPLIT BYTE (%ASCII 'VBN must be >= 1.') : VECTOR [, LONG],
	remount_msg = UPLIT BYTE (%ASCII 'You lack READ and/or WRITE access to TARGET DEVICE.  DISMOUNT and reMOUNT it.')
				 : VECTOR [, LONG],
	ascii_bracket = UPLIT BYTE (%ASCII ']') : VECTOR [, LONG],
	prompt_buffer = UPLIT BYTE (%ASCII 'Target system device (and boot file if not VMB.EXE): ') : VECTOR [, LONG],
	prompt2_buffer = UPLIT BYTE (%ASCII 'Enter load address of primary bootstrap in HEX (default is 200): ') : VECTOR [, LONG],
	prompt3_buffer = UPLIT BYTE (%ASCII 'Enter VBN of boot file code (default is 1) : ') : VECTOR [, LONG],
	priboo_def_name = UPLIT BYTE (%ASCII '[SYSEXE]VMB.EXE') : VECTOR [, LONG],
	bootbl_def_name = UPLIT BYTE (%ASCII 'SYS$SYSTEM:BOOTBLOCK.EXE') : VECTOR [, LONG];

LITERAL
	dev_offset	= 18,
	logio_length	= 26,
	vbn_bnds_len	= 17,
	remount_length	= 77,
	prompt_length	= 53,			! Length of prompt.
	prompt2_length	= 65,			! Length of prompt2.
	prompt3_length	= 45,			! Length of prompt3.
	bootname_length	= 15,			! Length of VMB.EXE.
	boblname_length	= 24;			! Length of BOOTBLOCK.

OWN
	yes_no_buf	: BLOCK  [1, BYTE] INITIAL (BYTE (0)),
	yes_no_descrip	: BLOCK  [8, BYTE]
				INITIAL (LONG (1, yes_no_buf)),

	logio_descrip	: BLOCK [8, BYTE]
				INITIAL (LONG (logio_length, logio_msg)),
	vbn_bnds_descrip: BLOCK	[8,BYTE]
				INITIAL (LONG (vbn_bnds_len, vbn_bnds_msg)),
	remount_descrip	: BLOCK [8, BYTE]
				INITIAL (LONG (remount_length, remount_msg)),
	bracket_descrip	: BLOCK [8, BYTE]		! Descriptor for constant string consisting of "]".
			  INITIAL (LONG (1, ascii_bracket));


ROUTINE write_boot =	! Writes the boot block.

!
! Functional description:
!
!	1. Prompts for target system device and optional boot file spec.
!
!	2. Determines if target device is Files-11 or FOREIGN.
!
!	3. Determines starting LBN and size of VMB.EXE (or specified file)
!	   on the target system device specified by the user in step #1.
!		In case of Files-11 device this means opening file with
!			an XABFHC specified in the FAB.
!		In case of a FOREIGN device this means calling external
!			routine "RTF$OPENFILE".
!
!	-  Prompt for VBN of boot file code.
!
!	4. Prompts for memory location where primary bootstrap should be
!	   loaded in memory.
!
!	5. Opens SYS$SYSTEM:BOOTBLOCK.EXE on the current system disk.
!
!	6. Reads VBN #0 of SYS$SYSTEM:BOOTBLOCK.EXE into buffer.
!
!	7. Modifies buffer by placing starting LBN, size and memory location
!	   obtained in steps #3 and #4 above, into the buffer at the
!	   appropriate places.
!
!	8. Writes buffer containing modified copy of SYS$SYSTEM:BOOTBLOCK.EXE
!	   into LBN #0 of target system device specified by user in step #1.
!
!	9. Closes files.
!
! Inputs:
!
!	none
!
! Outputs:
!
!	R0 contains a status code.
!
!--

BEGIN

LOCAL
	index,
	status;

! Issue a $GETJPI system service call to discover whether the process
! executing WRITEBOOT has LOG_IO privilege. If not, don't allow process
! to write on the target system disk.
!

IF NOT (status = $getjpi (efn = 3, itmlst = getjpi_itemlist, iosb = io_stat_block))
THEN RETURN .status;
IF NOT .privilege_mask [prv$v_log_io]
THEN BEGIN
	lib$put_output (logio_descrip);
	RETURN SS$_NOPRIV;
     END;

!
! Prompt for the target system device name optionally followed by the
! name of a primary bootstrap file.
!

prompt_descrip [dsc$w_length] = prompt_length;
prompt_descrip [dsc$a_pointer] = prompt_buffer;

IF .priboo_descrip [dsc$w_length] NEQ 0
	THEN lib$sfree1_dd (priboo_descrip);	! deallocate previous string.

WHILE .priboo_descrip [dsc$w_length] EQL 0
DO
    BEGIN
    status = lib$get_input (priboo_descrip, prompt_descrip);
    IF NOT .status
    THEN RETURN .status;
    END;

!
! Translate all lower case alphabetic characters to upper case so that
! an RMS translation will work.
!

INCR count FROM 0 TO (.priboo_descrip [dsc$w_length] - 1)
DO
    BEGIN
    BIND
        file_spec = .priboo_descrip [dsc$a_pointer] : VECTOR [, BYTE];
    IF ((.file_spec [.count] GEQ 'a') AND (.file_spec [.count] LEQ 'z'))
    THEN file_spec [.count] = .file_spec [.count] - %x'20';
    END;

!
! Determine if the target device is Files-11 or FOREIGN.  Do this
! by $PARSEing the given file spec using the default of [SYSEXE]VMB.EXE
! and by specifying a NAM block.  With NAM block we obtain the device
! name in the nam$t_dvi field and we build a string descriptor for this
! string and use system service $GETDEV to get the device characteristics.
!


$FAB_INIT (
		FAB = priboo_fab,
		FAC = <GET>,
		FNA = .priboo_descrip [dsc$a_pointer],
		FNS = .priboo_descrip [dsc$w_length],
		DNA = priboo_def_name,
		DNS = bootname_length,
		FOP = <NAM>,
		NAM = priboo_nam_blk,
		XAB = priboo_xabfhc);
IF NOT (status = $PARSE (FAB = priboo_fab))
   THEN RETURN .status;

bootdev_descrip[dsc$w_length] = .(priboo_nam_blk[nam$t_dvi]) <0,8>;
bootdev_descrip[dsc$a_pointer] = priboo_nam_blk[nam$t_dvi] + 1;


IF NOT (status = $GETDEV (DEVNAM = bootdev_descrip,
			  PRIBUF = devchar_descrip))
   THEN RETURN .status;


!
! At this point we have the target device characteristics.  If the
! device is FOREIGN then we isolate the file name in the expanded
! file spec and build a string descriptor for this substring.
! Next we call RTF$TARGET_DEV to record the name of the target device.
! Then we call RTF$OPENFILE to get the starting LBN and size.  If
! on the other hand the device is Files-11, then we simply open the file.
! The purpose of the open is to load the size and starting LBN of the
! file into the XABFHC block produced by RMS.  In this latter case of a
! Files-11 device we then copy this data out of the XABFHC block into
! the OWN variable stat_block.
!

IF .devchar_buff[dev$v_for]				! i.e. if FOREIGN
   THEN BEGIN
	  filspec_descrip[dsc$w_length] = .priboo_nam_blk[nam$b_esl];
	  index = lib$index (filspec_descrip, bracket_descrip);
	  filnam_descrip[dsc$a_pointer] = .filspec_descrip[dsc$a_pointer] + .index;
	  filnam_descrip[dsc$w_length]  = .filspec_descrip[dsc$w_length]  - .index;

	  RTF$TARGET_DEV (bootdev_descrip);

	  IF NOT (status = RTF$OPENFILE (filnam_descrip,
					 two_block_buf,
					 stat_block))
	     THEN BEGIN
			lib$put_output (remount_descrip);
			RETURN .status;
		 END;
	END
   ELSE BEGIN
	 IF NOT (status = $RMS_OPEN (FAB = priboo_fab))
	    THEN RETURN .status;

	  stat_block[0] = .priboo_xabfhc[xab$l_sbn];
	  IF .priboo_xabfhc[xab$w_ffb] NEQ 0
	     THEN stat_block[1] = .priboo_xabfhc[xab$l_ebk]
	     ELSE stat_block[1] = .priboo_xabfhc[xab$l_ebk] - 1;
	  $RMS_CLOSE (FAB = priboo_fab);
	END;


!
! Prompt the user for the VBN of the boot file code.
!

prompt_descrip[dsc$w_length]  = prompt3_length; ! Set up prompt descriptor
prompt_descrip[dsc$a_pointer] = prompt3_buffer;

status = 0;
WHILE NOT .status
DO
    BEGIN
    IF .vbn_descrip[dsc$w_length] NEQ 0
	THEN lib$sfree1_dd (vbn_descrip);	! Deallocate previous string

    IF NOT (status = lib$get_input (vbn_descrip, prompt_descrip)) ! Prompt for VBN
	THEN RETURN .status;

    IF .vbn_descrip[dsc$w_length] NEQ 0		! Convert string to decimal #
	THEN status = ots$cvt_tz_l (vbn_descrip,vbn)
	ELSE vbn = 1;				! Default VBN

    IF .vbn LSS 1				! Check for VBN < 1
	THEN
	    BEGIN
	    IF NOT (status = lib$put_output (vbn_bnds_descrip))
		THEN RETURN .status;
	    status = 0;
	    END;
    END;					! End of VBN prompt WHILE loop

stat_block[0] = .stat_block[0] + (.vbn - 1);	! Update LBN to point to boot code

!
! Open the bootblock file (called SYS$SYSTEM:BOOTBLOCK.EXE) located on the
! system disk.
!

$FAB_INIT (
		FAB = bootbl_fab,
		FAC = <BIO>,
		FNA = bootbl_def_name,
		FNS = boblname_length,
		FOP = <UFM,UFO>);
IF NOT (status = $RMS_OPEN (FAB = bootbl_fab))
   THEN RETURN .status;

!
!
! Read the first block of BOOTBLOCK.EXE into a page-long buffer in
! memory.
!

IF NOT (status = $qiow (
		CHAN = .bootbl_fab [fab$l_stv],
		FUNC = io$_readvblk,
		P1 = block_buffer,
		P2 = 512,
		P3 = 1))
THEN RETURN .status;

!
! Here we prompt the user for the relative memory location that he wants
! the primary bootstrap loaded into.
!

prompt_descrip[dsc$w_length] = prompt2_length;
prompt_descrip[dsc$a_pointer] = prompt2_buffer;

status = 0;	! Set to false for following loop.

WHILE NOT .status
DO
BEGIN
	IF .loadadr_descrip[dsc$w_length] NEQ 0
		THEN lib$sfree1_dd (loadadr_descrip);

	status = lib$get_input (loadadr_descrip, prompt_descrip);
	IF NOT .status THEN RETURN .status;

	IF .loadadr_descrip[dsc$w_length] NEQ 0
	 THEN status = ots$cvt_tz_l(loadadr_descrip, load_adr)
	 ELSE load_adr = 512;					! Default
END;

!
! Load the starting LBN, size and relative load location into the first
! 3 longwords of the buffer containing the BOOTBLOCK code.
!

block_buffer [bbl_l_filesize] = .stat_block[1];		! Copy filesize.
block_buffer [bbl_w_hiordlbn] = .(stat_block[0])<16,16>;! Swap LBN words for
block_buffer [bbl_w_loordlbn] = .(stat_block[0])<0,16>;	! DSC
block_buffer [bbl_l_loadadr] = .load_adr;		! Copy where to load
						! primary bootstrap


!
! Assign a channel to target device.
!

IF NOT (status = $assign (
		DEVNAM = bootdev_descrip,
		CHAN = bootdev_chan))
THEN RETURN .status;

!
! Copy the page-long buffer into LBN 0 of the target system device.
!

IF NOT (status = $qiow (
		CHAN = .bootdev_chan,
		FUNC = io$_writelblk,
		P1 = block_buffer,
		P2 = 512,
		P3 = 0))
THEN RETURN .status;

!
! Close the open files.
!

$RMS_CLOSE (FAB = bootbl_fab);

!
! Return with success status.
!

RETURN SS$_NORMAL;
END;
END
ELUDOM
