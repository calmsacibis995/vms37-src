	.TITLE	BTMEM780 - Configure and Test 11/780 Memory
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	Linked with VMB.EXE - part of the
;	bootstrap module for VAX 11/780 hardware.
;
; ENVIRONMENT:
;
;	Runs at IPL 31, kernel mode, memory management is OFF, IS=1
;	(running on interrupt stack), and code must be PIC.
;
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine is 11/780 specific and
;	determines how many memory controllers are on the system,
;	where they are, how much memory they control, which pages
;	of that memory are present (and good). Then the routines
;	set bits in the PFN bitmap to represent each present (and
;	good) page of memory.
;
;	As a side effect, the routines store the type of adapter located
;	at each bus slot in the RPB.
;
; INPUTS:
;
;	R5	- address of 1st RPB configuration code field
;	R7	- address of the SCB
;	R11	- address of the RPB
;
; IMPLICIT INPUTS:
;
;	The positions on the 11/780 system bus are called NEXUSes, and
;	are identified by TR numbers 0-15. Although conventions place
;	memory controllers at fixed TR numbers, the software must
;	identify the adapter code in each NEXUS device's configuration
;	register to decide what the adapter or controller is. 
;
;	If a NEXUS has a readable configuration register, the register
;	contains the adapter code in the lower byte. If the
;	configuration register is of a memory controller, the adapter
;	code matches an entry in the table MEMTYP (see table in code
;	below).
;
;	Memory controller registers also contain
;
;		the size of the memory in either 128-page or 2048-page units
;		the starting page number / 128
;		a bit indicating if the memory is externally interleaved or not
;
; OUTPUTS:
;
;	R7, R8, R11, and SP are preserved
;	All others (including AP and FP) are altered
;
; IMPLICIT OUTPUTS:
;
;	The PFN bitmap is modified to describe all of physical memory.
;
;	RPB$L_PFNCNT stores the number of pages of physical memory.
;
;	All single parity errors in memory are cleared.
;
;	RPB$B_CONFREG describes each NEXUS on the system bus with an
;	adapter type code.
;
; AUTHOR:
;
;	C. A. Samuelson, creation date 24-April-1981
;
; REVISION HISTORY:
;
;	V03-001	KDM0078		Kathleen D. Morse	15-Mar-1982
;		Add RPB$V_FINDMEM flag and logic, that allows the
;		11/782 installation to use MA780 memory instead of
;		MS780 memory.
;
;	V02-003	PHL0012		Peter H. Lipman		04-Aug-1981
;		Change PSECT to put this code into an area that VMB
;		can overlay when it reads in the secondary boot.
;
;	V02-002	PHL0011		Peter H. Lipman		8-Jul-1981
;		Use new common test memory loop routine BOO$TEST_MEM.
;
;		Fix test for MS780C controller to use right mask.
;
;		Eliminate use of CPU dependent MAX_PGS parameter.
;
;	V02-001	TCM0001		Trudy C. Matthews	2-Jul-1981
;		Add support for new 11/780 memory controller, MS780E.
;
;
;--

	.SBTTL	Declarations

	.DEFAULT DISPLACEMENT, WORD

;
; Macros to describe VMS data structures
;

	$DMPDEF				; System dump file header definitions
	$IO780DEF			; 11/780 definitions
	$MPMDEF				; Multiport memory register definitions
	$NDTDEF				; Nexus device types
	$PRDEF				; Processor registers
	$RPBDEF				; Restart parameter block

;
; Macros
;

	.MACRO	ERROR,STR		; Outputs an error string to the
	BSBW	ERROUT			; console terminal.
	.ASCIZ	STR
	.ENDM	ERROR

	.PSECT	YBTMEM,LONG

	.SBTTL	CHECKMEM_780, Identify 11/780 memory

;++
;
; CHECKMEM_780, Locate and test memory for 11/780
;
;--

;
; The table below describes the 4 valid types of memory setups on
; the 11/780.
;

MEMTYP:
	.BYTE	NDT$_MEM4NI		; 4K - not interleaved
	.BYTE	NDT$_MEM4I		; 4K - interleaved
	.BYTE	NDT$_MEM16NI		; 16K - not interleaved
	.BYTE	NDT$_MEM16I		; 16K - interleaved
	.BYTE	NDT$_MEM64NIL		; 64K - non-interleaved lower
	.BYTE	NDT$_MEM64EIL		; 64K - externally interleaved
	.BYTE	NDT$_MEM64NIU		; 64K - non-interleaved upper
	.BYTE	NDT$_MEM64EIU		; 64K - externally interleaved
	.BYTE	NDT$_MEM64I		; 64K - internally interleaved

MEMTYPCNT	= .-MEMTYP		; Number of memory types.

SHRMEMTYP:
	.BYTE	NDT$_MPM0		; Multiport memory (port #0)
	.BYTE	NDT$_MPM1		; Multiport memory (port #1)
	.BYTE	NDT$_MPM2		; Multiport memory (port #2)
	.BYTE	NDT$_MPM3		; Multiport memory (port #3)
SHRMEMTYPCNT	= .-SHRMEMTYP

BASE_MA780:				; Base at which MA780's are placed
	.LONG	0			;
TOTAL_MA780:				; Total MA780 memory in bytes
	.LONG	0			;
MEM_CURADR:				; Array of current memory adr ranges
	.BLKB	<8*8>			; Max of 8 memory controllers allowed
MEM_FINALADR:				; Array of desired memory adr ranges
	.BLKB	<8*8>			; Max of 8 memory controllers allowed
MEM_TR_MTYPE:				; Array of memory TRs and corresp type
	.BLKB	<2*8>			; Max of 8 memory controllers allowed

;
; Start testing NEXUSes to find adapters. First, save the stack position
; so it can be restored after a machine check.
;

CHECKMEM_780::

	MOVL	#IO780$AL_NNEX,AP	; Set up NEXUS loop counter.
	MOVL	SP,FP			; Save current top of stack.

;
; Set up the physical address of the 1st NEXUS on the system bus.
;

	ROTL	#29,#1,R4		; 1st NEXUS is at ^X20000000.

;
; Point to first entry in the memory description list in the RPB.
;
	MOVAB	RPB$L_MEMDSC(R11),R10	; Set pointer to memory description list

;
; During this memory locate and test loop, the following registers are
; used:
;
;	R2	- value read from the configuration register
;	R3	- maximum number of pages possible
;		- number of pages in the next controller
;	R4	- address of the configuration register on the current
;		  NEXUS
;	R5	- address of next byte in RPB adapter type table
;	R7	- address of the SCB
;	R9	- starting page number for the next controller
;	R10	- address of the memory description list in RPB (pagcnt & pfn)
;	R11	- address of the RPB
;	AP	- nexus loop counter
;	FP	- saved SP; used to restore stack position after machine check
;
; Set up a machine check fault handler to gain control if the loop
; addresses a non-existent configuration register (an empty NEXUS) or
; gets a serious parity error on a page. Then read the configuration
; register.
;

TRY_NEXUS_780:				; Memory locate and test loop.
	CLRB	(R5)+			; Assume nothing on NEXUS.
	MOVAB	DO_NEXT_780+1,4(R7)	; Set up fault handler (+1
					; forces exception on the
					; interrupt stack).
	MOVL	(R4),R2			; Get CR at current NEXUS.

;
; Execution continues here if the configuration register is present.
; Test to see what kind of adapter or memory controller this is.
;

	MOVB	R2,-1(R5)		; Store adapter code in RPB.
	BBS	#RPB$V_MPM,RPB$L_BOOTR5(R11),-
		CHK_SHRMEM		; Br if multi-proc boot
	LOCC	R2,#MEMTYPCNT,MEMTYP	; Memory controller here?
	BEQL	CHK_SHRMEM		; No.  Go check for shared memory.

;
; Find out whether the memory addresses are within legal bounds. If
; so, compute the starting page number and the number of pages on the
; controller.
;

	MOVL	4(R4),R0		; Get starting address register.
	EXTZV	#15,#13,R0,R9		; Starting page number/128
	ASHL	#7,R9,R9		; Multiply by 128 = page number.
	EXTZV	#9,#6,R2,R3		; Get size in 128 or 2048 page units.
	INCL	R3			; Convert size-1 to size.
	MOVL	#7,R0			; Assume 128 page units (MS780C).
	BITB	#^XE0,R2		; MS780C controller?
	BEQL	30$			; Yes, continue.
	MOVL	#11,R0			; Else use 2048 page units (MS780E).
30$:	ASHL	R0,R3,R3		; Multiply to find # of pages present.
	ASSUME	DMP$V_TR EQ 24
	ASSUME	DMP$S_TR EQ 8
;
; VAX 11/780 Interleaved Memory (controller = MS780C)
;
; When two memories are interleaved, they must be an even-odd pair of
; TR numbers.  Both memories have the same starting physical address.  VMB
; doubles the size of the first memory and checks all the pages as if
; they belonged to the first controller.  When the second controller
; is scanned, VMB realizes that it has already checked the corresponding
; memory pages and skips to the code that finds the next CSR.  In the RPB,
; there is only one memory descriptor initialized.  It contains the even
; numbered TR #, double the memory page count, and the common base PFN.
;
; VAX 11/780 Interleaved Memory (controller = MS780E)
;
; The above paragraph also applies to the MS780E controller, with one
; exception:  the MS780E controller stores the entire size of the interleaved
; memory in the memory size field of the configuration register, not half the
; size.  Also, the MS780E supports two forms of interleaving: external and
; internal.  The internal interleaving requires no special VMS action: the
; code path taken is the same as for non-interleaved memory.  MS780E external
; interleaving shares a code path with MS780C interleaved memories.
;
	BLBC	R2,10$			; Branch if no interleaving.
	BLBS	AP,DO_NEXT_780		; Br if  2nd of interleaved TR# pair.
	BITB	#^XE0,R2		; MS780C controller?
	BNEQ	10$			; No; MS780E already has correct size.
	ADDL	R3,R3			; MS780C requires page count doubled.
10$:	MOVL	R3,(R10)+		; Save # of pages in this memory
	EXTZV	#13,#4,R4,-1(R10)	; Save TR number for this memory
	MOVL	R9,(R10)+		; Save starting PFN for this memory
TEST_780:
	MOVAB	PAGE_MCHECK_780+1,4(R7)	; Set page skipping handler (+1
					; for on interrupt stack).
	MOVAB	TEST_QUAD_780,R2	; Routine to test one page
	BSBW	BOO$TEST_MEM		; Test the specified range of PFN's
	BRB	DO_NEXT_780
CHK_SHRMEM:
	LOCC	R2,#SHRMEMTYPCNT,SHRMEMTYP ; Is this a shared memory?
	BEQL	DO_NEXT_780		; No.  Go look for another NEXUS.

	BISL	#^X00400000,MPM$L_CSR(R4) ; Clear power-up bit
	BISL	#^XFF000000,MPM$L_CR(R4)  ; Clear error bits
	BISL	#^XD000C000,MPM$L_SR(R4)  ; Clear error bits
	BISL	#^X80000000,MPM$L_ERR(R4) ; Clear error bits
	MOVL	MPM$L_INV(R4),R3	; Get Invalidation Control Register
	EXTZV	#MPM$V_INV_STADR,#MPM$S_INV_STADR,R3,R9 ; Starting address
	ASHL	#9,R9,R9		; Convert to starting PFN
	EXTZV	#MPM$V_INV_MEMSZ,#MPM$S_INV_MEMSZ,R3,R3 ; Array size
	INCL	R3			; 0 = one board, so add one to count
	ASHL	#9,R3,R3		; Multiply by 512 to compute # of pages
	MOVL	R3,(R10)+		; Save # of pages in this memory
	ASSUME	DMP$V_TR EQ 24
	ASSUME	DMP$S_TR EQ 8
	EXTZV	#13,#4,R4,-1(R10)	; Save TR number for this memory
	MOVL	R9,(R10)+		; Save starting PFN for this memory
	BITL	#<RPB$M_MPM ! RPB$M_USEMPM>,- ; If multi-proc boot or MA780
		RPB$L_BOOTR5(R11)	; memory used as local memory,
	BNEQ	TEST_780		; then go include it in bitmap.
	BRB	DO_NEXT_780		; Branch around bytes left by .ALIGN

	.ALIGN	LONG			; Longword-aligned handler.

;
; Fault handler for non-existent configuration register, or unreadable
; registers, or a non-memory controller NEXUS device. Restore stack
; pointer, clear all errors, and try for another NEXUS if any remain.
;

DO_NEXT_780:				; Skip to next NEXUS.
	MOVL	FP,SP			; Restore stack pointer.
	MTPR	#0,#PR$_SBIFS		; Clear any faults.
	MOVAB	IO780$AL_PERNEX(R4),R4	; Move to next NEXUS.
	SOBGTR	AP,NEXT_NEXUS_780	; If still a NEXUS, loop.

;

; Check if there is sufficient memory to boot VMS.
;

	BBCC	#RPB$V_FINDMEM,RPB$L_BOOTR5(R11),10$ ; Only check if requested
	EXTZV	#0,#24,RPB$L_MEMDSC(R11),R2 ; Get # pages in first memory
	CMPL	R2,#^X400		; Is there at least 512K?
	BLSSU	FIND_MEM		; Go try to find MA780 memory instead
;
; Reestablish the normal machine check fault handler.
;
10$:
	MOVAL	UNEXP_MCHK+1,4(R7)	; Reset SCB vector.
	CLRL	(R10)+			; Indicate end of RPB memory descr list
	RSB				; Return to main routine.

;
; Extra label and branch here to loop back through the NEXUS testing
; code.
;

NEXT_NEXUS_780:				; Try the next NEXUS.
	BRW	TRY_NEXUS_780		; Branch to top of loop.
	.PAGE
	.SBTTL	FIND_MEM - Locate MA780 memory and use it instead of MS780
;
; This code assumes that VMB will be entirely loaded into one memory
; and not across memory controllers, except for the case of interleaved
; local memory.
;
FIND_MEM:
	MOVAB	MEM_CURADR,R7		; Adr of old phys adr range array
	MOVAB	MEM_FINALADR,R8		; Adr of new phys adr range array
	MOVAB	MEM_TR_MTYPE,R9		; Adr of memory TR #s and corresp type
	MOVAB	RPB$L_MEMDSC(R11),R10	; Adr of mem dsc array (all controllers)
	MOVAB	RPB$B_CONFREG(R11),R5	; Adr of nexus type codes
	CLRQ	R2			; Init total MA memory and local memory
	CLRL	R6			; Init starting MA adr to 0

10$:
	BICL3	#^XFF000000,(R10)+,R4	; Get count of pages in this memory
	BEQL	40$			; Br if no more memories
	MOVZBL	-1(R10),R0		; Get TR # for this memory
	MOVZBW	R0,(R9)+		; Remember TR # and assume local memory
	ASHL	#9,(R10)+,(R7)		; Compute old starting phys byte adr
	ASHL	#9,R4,R4		; Compute count of bytes in this memory
	ADDL3	R4,(R7),4(R7)		; Compute old ending phys byte adr
	DECL	4(R7)			; Make old ending adr exact to byte
	MOVZBL	(R5)[R0],R0		; Get NEXUS type for this memory
	LOCC	R0,#MEMTYPCNT,MEMTYP	; Is this local memory?
	BEQL	20$			; Br on no, assume it is MA780 memory
	MOVL	R2,(R8)			; Set new starting phys byte adr
	ADDL3	R4,(R8),4(R8)		; Compute new ending phys byte adr
	ADDL	R4,R2			; Add mem size to local mem accum
	CMPL	R6,4(R7)		; Does local memory extend beyond 8MB?
	BGTR	30$			; Br on no, local mem < 8MB
	ADDL3	#1,4(R7),R6		; Get next adr after all local memory
	BRB	30$			; Continue in common code
20$:
	MOVB	#1,-1(R9)		; Set MA780 indicator
	MOVL	R3,(R8)			; Set new starting phys byte adr
	ADDL3	R4,(R8),4(R8)		; Compute new ending phys byte adr
	ADDL	R4,R3			; Add mem size to MA780 mem accum
30$:
	DECL	4(R8)			; Make new ending adr exact to byte
	ADDL	#8,R7			; Point to next old range
	ADDL 	#8,R8			; Point to next new range
	BRB	10$			; Loop to do next memory
40$:
	MOVL	R3,TOTAL_MA780		; Remember total bytes of MA780 memory
	CLRQ	(R7)			; End the old range array
	CLRQ	(R8)			; End the new range array
	CLRW	(R9)			; End the TR # and type list
;
; Now check if all MA780 memory is where it should be for an 11/782.
; In other words, it starts at physical address 0 and each controller
; is contiguous to the previous one.  Local memory will be at some
; higher physical address than all MA780 memory.
;
	MOVAB	MEM_CURADR,R7		; Adr of old phys adr range array
	MOVAB	MEM_FINALADR,R8		; Adr of new phys adr range array
	MOVAB	MEM_TR_MTYPE,R9		; Adr of memory TR #s and corresp type
50$:
	TSTB	(R9)			; Any more memories?
	BEQL	70$			; Br if no more memories
	BLBC	1(R9),60$		; Br if this is local memory
	CMPL	(R7),(R8)		; Is current phys adr the desired adr?
	BNEQ	80$			; Br if memory phys adrs are not set up
	CMPL	4(R7),4(R8)		; Is current phys adr the desired adr?
	BNEQ	80$			; Br if memory phys adrs are not set up
60$:
	ADDL	#8,R7			; Point to next old range
	ADDL 	#8,R8			; Point to next new range
	ADDL	#2,R9			; Point to next memory TR and type
	BRB	50$			; Continue with next memory
70$:
	BRW	MA780_AT_0		; MA780 memory adrs already set ok
;
; Now set all the MA780 starting addresses to be contiguous,
; above all local memory.  Use the maximum of 8MB and what is currently
; being used for local memory.
;
80$:
	MOVAB	MEM_FINALADR,R8		; Adr of new phys adr range array
	MOVAB	MEM_TR_MTYPE,R9		; Adr of memory TR #s and corresp type
90$:
	MOVZBL	(R9),R3			; Get TR # for this memory
	BEQL	110$			; Br if no more memories
	BLBC	1(R9),100$		; Br if this is local memory
	ADDL3	R6,(R8),R4		; Get starting adr for this memory
	ASHL	#2,R4,R4		; Compute starting adr bits for MA780
	INCL	R4			; Set enable bit for setting start adr
	ASHL	#13,R3,R3		; Compute TR offset part of contlr adr
	BISL	#^X2000000C,R3		; Get controller register address
	MOVL	R4,(R3)			; Set new starting adr for this memory
100$:
	ADDL	#2,R9			; Point to next memory TR #
	ADDL 	#8,R8			; Point to next new range
	BRB	90$			; Continue for next mem
;
; Now move VMB into the MA780 memory at the lowest starting address.
; Then continue executing VMB in that memory so that the local memory
; starting addresses may be changed.
;
110$:
	MOVL	R6,BASE_MA780		; Remember this base address
	MOVL	#1,CONTINUE_INDEX	; Set continuation code index
	MOVAB	START_BOOT,R0		; Get physical addr of start of VMB
	SUBL	#^X200,R0		; Include the RPB
	MOVC3	#BOOTHIGH+^X200,(R0),(R6) ; Move VMB/RPB into different memory
	ADDL3	#^X200,R6,R8		; Remember base address
	MOVQ	RPB$L_BOOTR0(R11),R0	; Reset register R0-R1 to boot value
	MOVQ	RPB$L_BOOTR2(R11),R2	; Reset register R2-R3 to boot value
	MOVQ	RPB$L_BOOTR4(R11),R4	; Reset register R4-R5 to boot value
	MOVL	RPB$L_HALTCODE(R11),AP	; Reset register AP to boot value
	MOVL	RPB$L_HALTPC(R11),R10	; Reset register R10 to boot value
	MOVL	RPB$L_HALTPSL(R11),R11	; Reset register R11 to boot value
	MOVL	R8,SP			; Reset register SP to point to RPB+200
	JMP	START_BOOT_1(R8)	; Continue executing VMB in other memory

CONT1_PATH::

;
; Now move all local memory into the next 8MB above the MA780 memory.
;
	ADDL3	TOTAL_MA780,BASE_MA780,R6 ; Get base adr for local memory
	MOVAB	MEM_FINALADR,R8		; Adr of new phys adr range array
	MOVAB	MEM_TR_MTYPE,R9		; Adr of memory TR #s and corresp type
10$:
	MOVZBL	(R9),R3			; Get TR # for this memory
	BEQL	40$			; Br if no more memories
	BLBS	1(R9),30$		; Br if this is MA780 memory
	ADDL3	R6,(R8),R4		; Get starting adr for this memory
	ASHL	#-1,R4,R4		; Get right bits to write into register
	ASHL	#13,R3,R3		; Compute TR offset part of contlr adr
	BISL	#^X20000004,R3		; Get controller register address
	BISW	#^X4000,R4		; Set enable write to starting adr bit
	MOVL	R4,(R3)			; Set new starting adr for this memory
	BICB	#4,R3			; Get adr of interleaved bits
	MOVL	(R3),R2			; Branch if this controller is
	BLBC	R2,20$			; not interleaved
	SUBL3	(R8),4(R8),R1		; Get # bytes of interleaved memory
	INCL	R1			; Round up to a page boundary
	ASHL	#-2,R1,R1		; Calculate base adr for second half
	ADDL	R4,R1			; of this memory
	ADDL3	#^X2004,R3,R5		; Get address of second controller
	MOVL	R1,(R5)			; Set new starting adr for this memory
	BICB	#4,R5			; Get adr of interleaved bits
	MOVL	#^X100,(R5)		; Turn off interleaving
20$:
	MOVL	#^X100,(R3)		; Turn off interleaving
30$:
	ADDL	#2,R9			; Point to next memory TR #
	ADDL 	#8,R8			; Point to next new range
	BRB	10$			; Continue for next mem
;
; Now move VMB back into local memory, which is way up high now.
;
40$:
	MOVL	#2,CONTINUE_INDEX	; Set continuation code index
	MOVAB	START_BOOT,R0		; Get physical addr of start of VMB
	SUBL	#^X200,R0		; Include the RPB
	MOVC3	#BOOTHIGH+^X200,(R0),(R6) ; Move VMB/RPB into different memory
	ADDL3	#^X200,R6,R8		; Remember base address
	MOVQ	RPB$L_BOOTR0(R11),R0	; Reset register R0-R1 to boot value
	MOVQ	RPB$L_BOOTR2(R11),R2	; Reset register R2-R3 to boot value
	MOVQ	RPB$L_BOOTR4(R11),R4	; Reset register R4-R5 to boot value
	MOVL	RPB$L_HALTCODE(R11),AP	; Reset register AP to boot value
	MOVL	RPB$L_HALTPC(R11),R10	; Reset register R10 to boot value
	MOVL	RPB$L_HALTPSL(R11),R11	; Reset register R11 to boot value
	MOVL	R8,SP			; Reset register SP to point to RPB+200
	JMP	START_BOOT_1(R8)	; Continue executing VMB in other memory

CONT2_PATH::

;
; Now set MA780 memory to be contiguous, starting at physical address 0.
;
	MOVAB	MEM_FINALADR,R8		; Adr of new phys adr range array
	MOVAB	MEM_TR_MTYPE,R9		; Adr of memory TR #s and corresp type
10$:
	MOVZBL	(R9),R3			; Get TR # for this memory
	BEQL	MA780_AT_0		; Br if no more memories
	BLBC	1(R9),20$		; Br if this is local memory
	MOVL	(R8),R4			; Get starting adr for this memory
	ASHL	#2,R4,R4		; Compute starting adr bits for MA780
	INCL	R4			; Set enable bit for setting start adr
	ASHL	#13,R3,R3		; Compute TR offset part of contlr adr
	BISL	#^X2000000C,R3		; Get controller register address
	MOVL	R4,(R3)			; Set new starting adr for this memory
20$:
	ADDL	#2,R9			; Point to next memory TR #
	ADDL 	#8,R8			; Point to next new range
	BRB	10$			; Continue for next mem
;
; Now move VMB into the MA780 memory starting at physical address 0.
; This should be the correct memory to boot from, so re-execute
; VMB entirely over again now.
;
MA780_AT_0:
	MOVAB	START_BOOT,R0		; Get physical addr of start of VMB
	SUBL	#^X200,R0		; Include the RPB
	MOVC3	#BOOTHIGH+^X200,(R0),@#0 ; Move VMB/RPB into different memory
	MOVQ	RPB$L_BOOTR0(R11),R0	; Reset register R0-R1 to boot value
	MOVQ	RPB$L_BOOTR2(R11),R2	; Reset register R2-R3 to boot value
	MOVQ	RPB$L_BOOTR4(R11),R4	; Reset register R4-R5 to boot value
	BISW	#RPB$M_MPM,R5		; Use MA780 memory only
	MOVL	RPB$L_HALTCODE(R11),AP	; Reset register AP to boot value
	MOVL	RPB$L_HALTPC(R11),R10	; Reset register R10 to boot value
	MOVL	RPB$L_HALTPSL(R11),R11	; Reset register R11 to boot value
	MOVL	#^X200,SP		; Set register SP to adr of RPB+200
	CLRL	@#00			; Set physical adr of RPB in RPB
	JMP	@#START_BOOT+^X200	; Continue executing VMB in other memory
	.PAGE
	.SBTTL	TEST_QUAD_780 - Test a quadword of memory
;++
;
; Functional Description:
;
;	Test a page of 780 memory,
;
; Calling Sequence:
;
;	JSB	TEST_QUAD_780
;
; Inputs:
;
;	R0 = starting address to test
;	R1 = Quad word iteration count (64)
;
; Outputs:
;
;	Returns via RSB if the entire page is OK
;	Error exit via Machine Check code to BOO$PAGE_MCHECK
;
;--

TEST_QUAD_780:				; Test 1 quadword at a time.
	MTPR	R0,#PR$_SBIQC		; Clear a quadword.
	CMPL	(R0)+,(R0)+		; Read both longwords, and
					; advance to next quadword.

;
; If no gross errors occur in the clear to the quadword or in the
; subsequent read instruction, then execution continues below. Otherwise
; execution goes to the fault handler -- PAGE_MCHECK_780.
;

	SOBGTR	R1,TEST_QUAD_780	; Continue clearing unless done.
	RSB				; Return from page test routine

	.ALIGN	LONG			; All handlers longword-aligned.

;
; Handler that gains control when a page has gross memory errors.
;

PAGE_MCHECK_780:			; Skip current page.
	MTPR	#0,#PR$_SBIFS		; Clear error indicator.
	BRW	BOO$PAGE_MCHECK		; Back to common handler
	.END
