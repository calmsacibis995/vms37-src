	.TITLE	BTMEM730 - Configure and Test 11/730 Memory
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	Linked with VMB.EXE - part of the
;	bootstrap module for VAX 11/730 hardware.
;
; ENVIRONMENT:
;
;	Runs at IPL 31, kernel mode, memory management is OFF, IS=1
;	(running on interrupt stack), and code must be PIC.
;
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine is 11/730 specific and
;	locates the memory controller on the system,
;	determines how much memory it controls, which pages of that
;	are present (and good).  Then the routine sets bits
;	in the PFN bitmap to represent each present (and good)
;	page of memory.
;
;	As a side effect, the routines store the type of adapter located
;	at each bus slot in the RPB.
;
; INPUTS:
;
;	R5	- address of 1st RPB configuration code field
;	R7	- address of the SCB
;	R11	- address of the RPB
;
; IMPLICIT INPUTS:
;
;	The positions on the 11/730 system bus are called slots, and are
;	identified by slot numbers 0-16.  The first slot is fixed and
;	is the memory controller.  The remaining 15 slots are floating.
;
;	The 11/730 currently supports 1 memory controller, located at
;	^XF20000.  The 11/730 does not have interleaved memory.
;
;	Memory controller registers also contain the starting page
;	number / 128.  This routine determines where the end of memory
;	on a memory controller is by analyzing the memory present map
;	in the third memory controller register.
;
;
; OUTPUTS:
;
;	R7, R8, R11, and SP are preserved
;	All others (including AP and FP) are altered
;
; IMPLICIT OUTPUTS:
;
;	The PFN bitmap is modified to describe all of physical memory.
;
;	RPB$L_PFNCNT stores the number of pages of physical memory.
;
;	All single parity errors in memory are cleared.
;
;	RPB$B_CONFREG describes each NEXUS on the system bus with an
;	adapter type code.
;
; AUTHOR:
;
;	C. A. Samuelson, creation date 24-April-1981
;
; REVISION HISTORY:
;
;	V03-001	KDM0078		Kathleen D. Morse	15-Mar-1982
;		Clear all MA780-specific boot flags.
;
;	V02-004	TCM0002		Trudy C. Matthews	17-Sep-1981
;		Save R2 (address of fixed nexus type table) before
;		calling BOO$TEST_QUAD routine.
;
;	V02-003	PHL0012		Peter H. Lipman		04-Aug-1981
;		Change PSECT to put this code into an area that VMB
;		can overlay when it reads in the secondary boot.
;
;	V02-002	TCM0001		Trudy C. Matthews	31-Jul-1981
;		Change all "7ZZ"s to "730"s.
;
;	V02-001	PHL0011		Peter H. Lipman		9-Jul-1981
;		Use new common test memory loop routine BOO$TEST_MEM.
;
;		Eliminate use of CPU dependent MAX_PGS parameter.
;
;--

	.SBTTL	Declarations

	.DEFAULT DISPLACEMENT, WORD

;
; Macros to describe VMS data structures
;

	$DMPDEF				; System dump file header definitions
	$IO730DEF			; 11/730 definitions
	$NDTDEF				; Nexus device types
	$PRDEF				; Processor registers
	$RPBDEF				; Restart parameter block

;
; Macros
;

	.MACRO	ERROR,STR		; Outputs an error string to the
	BSBW	ERROUT			; console terminal.
	.ASCIZ	STR
	.ENDM	ERROR

	.PSECT	YBTMEM,LONG

	.SBTTL	CHECKMEM_730, Identify 11/730 memory

;++
;
; CHECKMEM_730, Locate and test memory for 11/730
;
;--

;
; The table that follows identifies the adapter type codes of adapters
; located in fixed and floating 730 slots.
;

ADAP_TYPE_730:				; Adapter type table for 11/730
	.BYTE	NDT$_MEM16NI		; Memory controller 0.
	.BYTE	0 [15]			; Floating slot.


;
; Get address of slot assignment table.
;

CHECKMEM_730::				; Entry for 11/730
	MOVAB	ADAP_TYPE_730,R2	; Get 11/730 fixed slot assignment
					; table
;
; Start testing slot positions to find adapters. First save the stack
; position so it can be restored after a machine check.
;

INIT_SEARCH:				; Start searching for adapters
	MOVZBL	#IO730$AL_NNEX,AP	; Set up nexus loop counter
	MOVL	SP,FP			; Save current top of stack.

;
; Set up the physical address of the 1st slot on the system bus and
; the address of the adapter type table.
;

	MOVAB	@#IO730$AL_IOBASE,R4	; Get address of 1st slot

;
; During this memory locate and test loop, the following registers are
; used:
;
;	R0	- the contents of the slot's configuration register;
;		  the 3rd memory controller register;
;	R1	- bit position within memory present map;
;	R2	- address of the next byte in the 730-specific adapter
;		  type table
;	R3	- the default adapter type for the current slot;
;		  number of last page on a controller
;	R4	- address of the configuration register at the current
;		  slot position
;	R5	- address of next byte in RPB adapter type table
;	R7	- address of the SCB
;	R9	- bit setting in memory present map;
;		  starting PFN on a controller (always 0)
;	R10	- address of the memory description list in RPB (pagcnt & pfn)
;	R11	- address of the RPB
;
; Initialize the RPB slot field to a zero and obtain the default adapter
; type for this slot. Then set up a machine check fault handler to gain
; control if the loop addresses a non-existent configuration register
; (an empty slot). Then read the slot's configuration register.
;
; Initialize R10 (RPB  memory descripter list pointer) for search loop
;
	MOVAB	RPB$L_MEMDSC(R11),R10	; Set pointer to memory description list
	BICL	#<RPB$M_MPM ! RPB$M_USEMPM ! RPB$M_FINDMEM>, -
		RPB$L_BOOTR5(R11)	; Clear all MA780-specific boot flags
 

TRY_NEXUS_730:				; Memory locate and test loop.
	CLRB	(R5)+			; Assume nothing on slot.
	MOVZBL	(R2)+,R3		; Get default adapter type.
	MOVAB	DO_NEXT_730+1,4(R7)	; Set up fault handler (+1 for
					; handler execution on the
					; interrupt stack).
	MOVL	(R4),R0			; Read CR at current slot.

;
; Execution continues here if the configuration register is present.
; Load the adapter type into the RPB field. Then, if the adapter type
; is a memory controller, proceed to test memory. Otherwise, move to
; the next SBI slot.
;

	TSTL	R3			; Is this a floating slot?
	BNEQ	FIXED_SLOT		; Branch if not
	MOVB	R0,-1(R5)		; Save type read from config register
	BRB	CHECK_TYPE		; Check if memory controller

FIXED_SLOT:				; Slot is fixed assignment
	MOVB	R3,-1(R5)		; Save fixed type

CHECK_TYPE:				; Check adapter type for memory

	CMPB	-1(R5),#NDT$_MEM16NI	; Memory controller?
	BNEQ	DO_NEXT_730		; No, advance to next slot.

;
; Memory controller found:
; Find out whether the memory addresses are within legal bounds by
; computing the number of pages on the controller.
; Confirm that the ending page number is less or equal than the maximum
; page number for this machine.
;

	MOVL	8(R4),R0		; Get starting address register.
	CLRL	R3			; Start with zero 128K chunks.
	MOVL	#15,R1			; Start with top bit in map.

10$:					; Bit extraction loop.
	EXTZV	R1,#1,R0,R9		; Extract one bit from map.
	ADDL	R9,R3			; Add it to 128K chunk total.
	SOBGEQ	R1,10$			; Move to next bit until done.
	ASHL	#8,R3,R3		; Convert number of 128K byte
					; chunks to number of pages.
	BBC	#24,R0,20$		; Branch if 16K memory
	ASHL	#2,R3,R3		; Multiply by four for 64K chip memory
20$:	MOVL	R3,(R10)+		; Save # of pages in this memory
	ASSUME	DMP$V_TR EQ 24
	ASSUME	DMP$S_TR EQ 8
	CLRB	-1(R10)			; Store TR # in mem descr (always 0)
	CLRL	(R10)+			; Starting PFN for this memory (always 0)
	CLRL	R9			; Starting address always 0

;
; Before starting memory test, establish a page skipping handler for
; machine checks.
;

	MOVAB	PAGE_MCHECK_730+1,4(R7)	; Set page skipping handler (+1
					; for interrupt stack).
	PUSHL	R2			; Save address of fixed nexus table.
	MOVAB	TEST_QUAD_730,R2	; Routine to test one page
	BSBW	BOO$TEST_MEM		; Test the specified range of PFN's
	POPR	#^M<R2>			; Retrieve fixed nexus table address.
	BRB	ALL_DONE_730		; Only one memory controller

	.ALIGN	LONG			; Longword-aligned handler.

;
; Fault handler for non-existent configuration register, or unreadable
; registers, or a non-memory controller slot device. Restore stack
; pointer, clear all errors, and try for another slot if any remain.
;

DO_NEXT_730:				; Skip to next slot.
	MOVL	FP,SP			; Restore stack pointer.
	MTPR	#-1,#PR$_MCESR		; Clear any faults.
	MOVAB	IO730$AL_PERNEX(R4),R4	; Move to next slot.
	SOBGTR	AP,TRY_NEXUS_730	; If still a slot, loop.

;
; Reestablish the normal machine check fault handler.
;

ALL_DONE_730:
	MOVAL	UNEXP_MCHK+1,4(R7)	; Reset SCB vector.
	CLRL	(R10)+			; Indicate end of RPB memory descr list
	RSB				; Return to main routine.

;++
;
; Functional Description:
;
;	Test a page of 780 memory,
;
; Calling Sequence:
;
;	JSB	TEST_QUAD_730
;
; Inputs:
;
;	R0 = starting address to test
;	R1 = Quad word iteration count (64)
;
; Outputs:
;
;	Returns via RSB if the entire page is OK
;	Error exit via Machine Check code to BOO$PAGE_MCHECK
;
;--

TEST_QUAD_730:				; Test 1 quadword at a time.
	CLRQ	(R0)			; Clear a quadword.
	CMPL	(R0)+,(R0)+		; Read both longwords, and
					; advance to next quadword.

;
; If no gross errors occur in the clear to the quadword or in the
; subsequent read instruction, then execution continues below. Otherwise
; execution goes to the fault handler.
;

	SOBGTR	R1,TEST_QUAD_730	; Continue clearing unless done.
	RSB

	.ALIGN	LONG			; All handlers longword-aligned.

;
; Handler that gains control when a page has gross memory errors.
;

PAGE_MCHECK_730:			; Handle machine check.
	MTPR	#-1,#PR$_MCESR		; Clear error indicator.
	BRW	BOO$PAGE_MCHECK		; Exit to common machine check handler
	.END
