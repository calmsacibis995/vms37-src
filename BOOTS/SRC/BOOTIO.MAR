	.TITLE	BOOTIO - BOOTSTRAP FILEREAD IO MODULE
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	SYSTEM BOOTSTRAPPING
;
; ABSTRACT:
;
;	THIS MODULE PERFORMS LOGICAL BLOCK I/O FOR FILEREAD
;
; ENVIRONMENT:	KERNEL MODE, UNMAPPED, IPL=31
;
; AUTHOR: RICHARD I. HUSTVEDT	, CREATION DATE: 14-APR-78
;
; MODIFIED BY:
;
;	V03-001	KTA0091		Kerbey T. Altmann	30-Mar-1982
;		Redo some entries in the file cache table.  Make the
;		page allocation part of BOO$CACHE_INIT a subroutine.
;		Divide it into two pieces.
;
;	V02-003	PHL0012		Peter H. Lipman		02-Aug-1981
;		Explicitly initialize the FILEREAD cache pointer.
;	Must not allow assembly time initialization since VMB can restart.
;		Fix PSECT so that VMB can overlay most of itself with
;	the secondary boot file.  Remove BOO$GL_RPBBASE.
;
;	V02-002	PHL0011		Peter H. Lipman		31-Jul-1981
;		The page at which the FILEREAD cache is located
;	should be relative to the RPB not absolute.
;
;	V02-001	PHL0007		Peter H. Lipman		14-Mar-1981
;		Extend parmeter list to FIL$RDWRTLBN to make it
;	possible to read more than one block at a time.  This
;	enhancement was made in conjunction with the cacheing
;	feature in FILEREAD.
;		Add new BOO$CACHE_INIT routine for VMB and SYSBOOT to
;	init the FILEREAD cache.  
;		Move other common FILEREAD pieces into this module thus
;	avoiding them being in two places.
;		Add new BOO$IMAGE_ATT routine to fetch certain image
;	attributes from an image header.
;
;--
	.PAGE
;
; INCLUDE FILES:
;
	$IHDDEF				; IMAGE HEADER DEFINITIONS
	$IHSDEF				; IMAGE HEADER SYMBOL TABLE DEFS
	$IHPDEF				; IMAGE HEADER PATCH CONTROL DEFS
	$RPBDEF				; DEFINE RESTART PARAMETER BLOCK
;
; MACROS:
;
; Define Memory Size to File Cache Parameter table entry
;
	.MACRO	MEM_FILE_CACHE MEM_PAGE_CNT,CACHE_PAGE_NUM,CACHE_PAGE_CNT,MAX_PAGE
	.LONG	MEM_PAGE_CNT-<MEM_PAGE_CNT/10>
	.WORD	CACHE_PAGE_NUM
	.WORD	<<CACHE_PAGE_CNT+3>&^C<3>>
	.LONG	MAX_PAGE
	.ENDM	MEM_FILE_CACHE
	.PAGE
	.PSECT	YFILEREAD,BYTE,EXE

	.SBTTL	RDWRTLBN - READ/WRITE LOGICAL BLOCK NUMBER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE READS/WRITES N BYTES FROM/TO THE SPECIFIED 
; LOGICAL BLOCK NUMBER OF THE VOLUME ASSIGNED TO THE SPECIFIED CHANNEL
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,FIL$RDWRITLBN
;
; INPUT PARAMETERS:
;
;	CHAN(AP)	=		;CHANNEL ASSIGNED TO THE VOLUME TO READ
;	LBN(AP)		=		;LOGICAL BLOCK NUMBER TO READ
;	BUFADR(AP)	=		;ADDRESS OF BUFFER TO READ INTO
;	IOFUNC(AP)	=		;I/O FUNCTION CODE
;	BYTCNT(AP)	=		;NUMBER OF BYTES TO TRANSFER
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = SYSTEM STATUS CODE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;    OFFSETS FROM AP
;
	CHAN		=	4	;CHANNEL TO WHICH VOLUME IS ASSIGNED
	LBN		=	8	;LOGICAL BLOCK NUMBER
	BUFADR		=	12	;BUFFER ADDRESS TO READ INTO
	IOFUNC		=	16	;FUNCTION CODE FOR THE QIO
	BYTCNT		=	20	;NUMBER OF BYTES TO TRANSFER
;
;--

FIL$RDWRTLBN::
	.WORD	0
	PUSHL	CHAN(AP)		; ADDRESS OF RPB
	MOVL	(SP),R0			; GET ADDRESS OF RPB
	MOVL	RPB$L_IOVEC(R0),R0	; GET POINTER TO I/O ROUTINE VECTOR
	PUSHL	#0			; SET MODE TO PHYSICAL ADDRESS
	PUSHL	IOFUNC(AP)		; SET FUNCTION
	PUSHL	LBN(AP)			; LOGICAL BLOCK NUMBER
	PUSHL	BYTCNT(AP)		; SET NUMBER OF BYTES
	PUSHAL	@BUFADR(AP)		; SET BUFFER ADDRESS
	CALLS	#6,@(R0)[R0]		; CALL BOOTSTRAP DRIVER
	RET
	.PAGE
	.SBTTL	BOO$CACHE_INIT - INIT FILEREAD CACHE
;++
;
; Functional description:
;
;	This routine establishes a desired FILEREAD cache size and 
;	base address according to the size of memory.  It finds
;	good contiguous pages at or near the desired place and
;	calls the FIL$CACHE_INIT routine to initialize the cache.
;	The routine is further divided into two pieces: one to do
;	cache allocation, and one to do the actual mount and open.
;	This is necessary for VMB needs to allocate the cache long
;	befor it is ready to accept IO to the device.
;
; Calling Sequence:
;
;	BSBW	BOO$CACHE_INIT
;
; Inputs:
;
;	R11			- RPB base address
;	RPB$L_PFNCNT(R11)	- actual number of good pages in memory
;	RPB$Q_PFNMAP+4(R11)	- base address of PFN bitmap
;
; Implicit inputs:
;
;	none
;
; Outputs:
;
;	R0-R4 altered
;	FIL$GQ_CACHE set up with size and address of cache
;
; Implicit outputs:
;
;--
;
; Table of memory sizes to file cache parameters
;
; NOTE: If this table is modified, a corresponding table in VMB around
;	label MEM_TAB should be checked for consitency.
;
MEM_CACHE_TABLE:
	MEM_FILE_CACHE 16384,2048,64,4096	; More than 8 megabyte
	MEM_FILE_CACHE  8192,1024,64,2048	; More than 4 megabyte
	MEM_FILE_CACHE  4096, 640,64,1024	; More than 2 megabyte
	MEM_FILE_CACHE  2048, 512,64, 768	; More than 1 megabyte
	MEM_FILE_CACHE  1024, 256,32, 512	; More than 512k bytes
	MEM_FILE_CACHE   512, 256,16, 256	; More than 256k bytes
	MEM_FILE_CACHE   384, 256, 8, 192	; More than 192k bytes
	MEM_FILE_CACHE   256, 128, 4, 128	; More than 128k bytes
	MEM_FILE_CACHE     0,   0, 0,   0	;
	.PAGE
;
; BOO$CACHE_ALLOC - The piece that does the allocation.
;
; Outputs:
;	FIL$GQ_CACHE filled in with size/address in blocks
;
BOO$CACHE_ALLOC::
	PUSHL	R5			; Save a register
	CLRQ	W^FIL$GQ_CACHE		; Assume no cache available
	MOVAL	B^MEM_CACHE_TABLE,R0	; Adr of memory size to cache params tbl
10$:	MOVQ	(R0)+,R1		; Get the next table entry
	BEQL	20$			; Branch if memory too small for cache
	MOVL	(R0)+,R5		; Max page
	CMPL	RPB$L_PFNCNT(R11),R1	; More memory than this entry?
	BLSS	10$			; Branch if not, get next one
	MOVZWL	R2,R0			; Starting relative bit (page) in PFNMAP
	ASHL	#-16,R2,R1		; Count of bits (pages) to look for
	ASHL	#-1,R1,R4		; Settle for half if can't find all
	BSBB	BOO$ALLOC_PAGES		; Go get the pages
	BLSS	20$			; Failed
	MOVQ	R2,W^FIL$GQ_CACHE	; Success, record the values
20$:	POPL	R5			; Restore a register
	RSB

;
; BOO$CACHE_INIT - Full routine to both allocate and open the cache
;
BOO$CACHE_INIT::
	BSBB	BOO$CACHE_ALLOC		; Allocate the cache
					; Fall thru to finish

;
; BOO$CACHE_OPEN - Actually mount the device and fill the cache
;
BOO$CACHE_OPEN::
	MOVL	W^FIL$GQ_CACHE,R2	; Pick up size
	BEQL	10$			; Zero length implies none
	SUBL	#4,SP			; Location to store channel
	MOVL	SP,R0			; Address to store channel
	SUBL3	#2,R2,-(SP)		; Blocks in directory LBN cache
	PUSHL	S^#<<1024-FIL$C_SIZE>/FIL$C_DIR_SIZE> ; No. of dir cache entries
	ASHL	#9,W^FIL$GQ_CACHE+4,-(SP) ; Byte address from page number
	ASHL	#9,R2,-(SP)		; Size of cache in bytes
	CLRL	-(SP)			; Null device name string descriptor
	PUSHL	R0			; Address to store channel
	CALLS	#6,W^FIL$CACHE_INIT	; Init the FIL$OPENFILE cache
					; descriptor returned in FIL$GQ_CACHE
	ADDL	#4,SP			; Clean off channel
10$:	RSB

;
; BOO$ALLOC_PAGES - Find a run of contiguous, good pages
;
; Inputs:
;	R0 - Page to start at
;	R1 - Number of pages needed
;	R4 - Number willing to settle for
;	R5 - Maximum page
; Outputs:
;	CC - Status (BLSS to an error routine)
;	R2 - Number found
;	R3 - Starting page number
;
BOO$ALLOC_PAGES::
	ROTL	#<32-9>,R11,R2		; PFN of the RPB
	ADDL	R2,R0			; Convert relative PFN to absolute
	MOVL	R0,R3			; Make a copy of starting bit
30$:	CMPL	R5,R0			; Less than max page
	BLSS	50$			; No, failure
	BBS	R0,@RPB$Q_PFNMAP+4(R11),40$ ; Branch if this is a good page
	SUBL3	R3,R0,R2		; Count of bits (pages) found
	CMPL	R2,R4			; Found enough?
	BGEQ	50$			; Branch if yes
	ADDL3	#1,R0,R3		; No, reset starting base
40$:	INCL	R0			; Next bit (page)
	SOBGTR	R1,30$			; Branch if more to check
	SUBL3	R3,R0,R2		; Count of bits (pages) found
	CMPL	R2,R4			; Found enough?
50$:	RSB				; Return (Status in CC)
	.PAGE
	.SBTTL	BOO$IMAGE_ATT - Get image attributes from image header
;++
; Functional Description:
;
;	BOO$IMAGE_ATT returns to the caller some attributes of the image
;
; Calling Sequence:
;
;	BSBW	BOO$IMAGE_ATT
;
; Inputs:
;
;	R2 = Size of file in blocks
;	R3 = Address of image header block (first one only)
;
; Outputs:
;
;	R1 = Number of image header blocks at the front of the image
;	R2 = Size of image in blocks excluding the blocks at the end
;	     containing local symbols, global symbols, or patch text
;
;--

BOO$IMAGE_ATT::
	MOVZWL	IHD$W_SYMDBGOFF(R3),R0	; ANY SYMBOL TABLE INFORMATION?
	BEQL	20$			; BRANCH IF NOT
	MOVAB	IHS$L_DSTVBN(R0)[R3],R1	; ADR OF 1ST VBN IN DEBUG SYMBOL TABLE
	BSBB	40$			; PROCESS IT
	MOVAB	IHS$L_GSTVBN(R0)[R3],R1	; ADR OF 1ST VBN IN GLOBAL SYMBOL TABLE
	BSBB	40$			; PROCESS IT
20$:	MOVZWL	IHD$W_PATCHOFF(R3),R0	; ANY PATCH CONTROL INFORMATION?
	BEQL	30$			; BRANCH IF NOT
	MOVAB	IHP$L_PATCOMTXT(R0)[R3],R1 ; ADR OF 1ST VBN OF PATCH COMMAND TEXT
	BSBB	40$			; PROCESS IT
30$:	MOVZBL	IHD$B_HDRBLKCNT(R3),R1	; GET IMAGE HEADER BLOCK COUNT
	RSB
;
; SEE IF VBN IS NON ZERO AND THEN IF IT IS SMALLER THAN THE CURRENT SMALLEST
;
40$:	SUBL3	#1,(R1),R1		; FETCH VBN - 1
	BLSS	50$			; BRANCH IF NO VBN IS PRESENT
	CMPL	R2,R1			; IS IT SMALLER THAN THE CURRENT ONE
	BLEQ	50$			; BRANCH IF NOT
	MOVL	R1,R2			; YES, USE IT
50$:	RSB
	.PAGE
	.SBTTL	SYS$ASSIGN, Dummy assign device system service

;++
;
; Functional description:
;
;	SYS$ASSIGN is a dummy routine to satisfy the requirements of
;	FIL$OPENFILE.
;
; Inputs:
;
;	CHAN(AP)	- address at which to return channel
;
; Implicit inputs:
;
;	The label BOO$GL_RPBBASE contains the physical address of the RPB.
;
; Outputs:
;
;	R0	- success status code
;
; Implicit outputs:
;
;	The channel returned is not a channel. It is instead the base
;	address of the RPB.
;
;--

CHAN	= 8

SYS$ASSIGN::				; Dummy system service.
	.WORD	0

	MOVL	W^BOO$GL_RPBBASE,@CHAN(AP) ; Store RPB address as channel.
	MOVL	S^#SS$_NORMAL,R0	; Return success status.
	RET				; Return to caller.
	.PAGE
	.SBTTL	Common Globals for VMB and SYSBOOT
;
; The following globals are common to VMB and SYSBOOT and are
; defined here to avoid replicate definitions.
;
FIL$GT_DDSTRING::			; Default directory string.
	.ASCIC	/[SYSEXE]/
FIL$GT_DDDEV::				; Default device name
	.BYTE	0			; Null ASCIC string
 
	.END
