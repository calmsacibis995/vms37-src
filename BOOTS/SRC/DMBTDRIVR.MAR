	.TITLE	DMBTDRIVR - RK06/7 BOOT DRIVER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	BOOTS
;
; ABSTRACT:
;	This module contains the bootstrap device driver for the
;	RK06/7 disks.
;
; ENVIRONMENT:	IPL 31, kernel mode, code must be PIC
;
; AUTHOR:  Steve Beckhardt,	CREATION DATE:  1-Nov-1979
;  (Original author:  Carol Peters)
;
; MODIFIED BY:
;
;	02-02	CAS0001		C.A. Samuelson		30-Apr-1980
;		Change interface to BOOTDRIVR for purge of UBA datapath
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BTDDEF				; Boot device types
	$IODEF				; I/O function codes
	$PRDEF				; Processor registers
	$RPBDEF				; RPB offsets
	$SSDEF				; Status codes
	$UBADEF				; UBA definitions
	$UBIDEF				; 11/750 UBA definitions

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
;
; RK611/RK06 CONTROLLER REGISTER OFFSETS
;
 
	$DEFINI	RK
 
$DEF	RK_CS1		.BLKW	1	;CONTROL STATUS REGISTER 1
	_VIELD	RK_CS1,0,<-		; CONTROL STATUS REGISTER 1 FIELD DEFINITIONS
		<GO,,M>,-		; GO BIT
		<FCODE,4>,-		; FUNCTION CODE
		<DPPE,,M>,-		; DATA PATH PURGE ERROR
		<IE,,M>,-		; INTERRUPT ENABLE
		<RDY,,M>,-		; CONTROLLER READY
		<MEX,2>,-		; MEMORY EXTENSION BITS
		<CDT,,M>,-		; CONTROLLER DRIVE TYPE
		<CTO,,M>,-		; CONTROLLER TIME OUT
		<CFMT,,M>,-		; CONTROLLER FORMAT ERROR
		<SPAR,,M>,-		; SERIAL BUS PARITY ERROR
		<DI,,M>,-		; DRIVE INTERRUPT
		<CERR,,M>-		; CONTROLLER ERROR
	>				;
$DEF	RK_WC		.BLKW	1	;WORD COUNT REGISTER
$DEF	RK_BA		.BLKW	1	;BUFFER ADDRESS REGISTER
$DEF	RK_DA		.BLKW	1	;DESIRED SECTOR/TRACK ADDRESS REGISTER
	_VIELD	RK_DA,0,<-		; DESIRED ADDRESS FIELD DEFINITIONS
		<SA,5>,-		; DESIRED SECTOR ADDRESS
		<,3>,-			; RESERVED BITS
		<TA,3>-			; DESIRED TRACK ADDRESS
	>				;
$DEF	RK_CS2		.BLKW	1	;CONTROL STATUS REGISTER 2
	_VIELD	RK_CS2,0,<-		; CONTROL STATUS REGISTER 2 FIELD DEFINITIONS
		<DS,3>,-		; DRIVE SELECT
		<RLS,,M>,-		; RELEASE DRIVE
		<BAI,,M>,-		; BUFFER ADDRESS INCREMENT INHIBIT
		<SCLR,,M>,-		; SUBSYSTEM CLEAR
		<IR,,M>,-		; INPUT READY
		<OR,,M>,-		; OUTPUT READY
		<UFE,,M>,-		; UNIT FIELD ERROR
		<MDS,,M>,-		; MULTIPLE DRIVE SELECT
		<PGE,,M>,-		; PROGRAMMING ERROR
		<NEM,,M>,-		; NONEXISTENT MEMORY
		<NED,,M>,-		; NONEXISTENT DRIVE
		<UPE,,M>,-		; UNIBUS PARITY ERROR
		<WCE,,M>,-		; WRITE CHECK ERROR
		<DLT,,M>-		; DATA LATE ERROR
	>				;
$DEF	RK_DS		.BLKW	1	;DRIVE STATUS REGISTER
	_VIELD	RK_DS,0,<-		; DRIVE STATUS REGISTER BIT DEFINTIONS
		<DRA,,M>,-		; DRIVE AVAILABLE
		<,1>,-			; RESERVED BIT
		<OFST,,M>,-		; DRIVE OFFSET
		<ACLO,,M>,-		; DRIVE AC LOW
		<DCLO,,M>,-		; DRIVE DC LOW
		<DROT,,M>,-		; DRIVE OFF TRACK
		<VV,,M>,-		; VOLUME VALID
		<DRDY,,M>,-		; DRIVE READY
		<DDT,,M>,-		; DRIVE DRIVE TYPE
		<,2>,-			; RESERVED BITS
		<WRL,,M>,-		; DRIVE WRITE LOCKED
		<,1>,-			; RESERVED BIT
		<PIP,,M>,-		; POSITIONING IN PROGRESS
		<DSC,,M>,-		; DRIVE STATUS CHANGE
		<SVAL,,M>-		; DRIVE STATUS VALID
	>				;
$DEF	RK_ER		.BLKW	1	;ERROR REGISTER
	_VIELD	RK_ER,0,<-		; ERROR REGISTER BIT DEFINITIONS
		<ILF,,M>,-		; ILLEGAL FUNCTION
		<SKI,,M>,-		; SEEK INCOMPLETE
		<NXF,,M>,-		; NONEXECUTABLE FUNCTION
		<DRPAR,,M>,-		; DRIVE PARITY ERROR
		<FMTE,,M>,-		; FORMAT ERROR
		<DTYE,,M>,-		; DRIVE TYPE ERROR
		<ECH,,M>,-		; ECC HARD ERROR
		<BSE,,M>,-		; BAD SECTOR ERROR
		<HVRC,,M>,-		; HEADER VRC ERROR
		<COE,,M>,-		; CYLINDER OVERFLOW ERROR
		<IDAE,,M>,-		; INVALID DISK ADDRESS ERROR
		<WLE,,M>,-		; WRITE LOCK ERROR
		<DTE,,M>,-		; DRIVE TIMING ERROR
		<OPI,,M>,-		; OPERATION INCOMPLETE
		<UNS,,M>,-		; DRIVE UNSAFE
		<DCK,,M>-		; DATA CHECK ERROR
	>				;
$DEF	RK_AS		.BLKW	1	;ATTENTION SUMMARY/OFFSET REGISTER
	_VIELD	RK_AS,0,<-		; ATTENTION SUMMARY/OFFSET REGISTER FIELDS
		<OF,7>,-		; DRIVE OFFSET
		<,1>,-			; RESERVED BIT
		<ATTN,8,M>-		; DRIVE ATTENTION SUMMARY
	>				;
$DEF	RK_DC		.BLKW	1	;DESIRED CYLINDER ADDRESS
$DEF	RK_SPR		.BLKW	1	;UNUSED REGISTER
$DEF	RK_DB		.BLKW	1	;DATA BUFFER REGISTER
$DEF	RK_MR1		.BLKW	1	;MAINTENANCE REGISTER 1
	_VIELD	RK_MR1,0,<<MS,3>>	; MAINTENANCE REGISTER 1 FIELD DEFINITION
$DEF	RK_EC1		.BLKW	1	;ECC POSITION REGISTER
	_VIELD	RK_EC1,0,<<EPS,13>>	; ECC POSITION FIELD
$DEF	RK_EC2		.BLKW	1	;ECC PATTERN REGISTER
	_VIELD	RK_EC2,0,<<EPT,11>>	; ECC PATTERN FIELD
$DEF	RK_MR2		.BLKW	1	;MAINTENANCE REGISTER 2
$DEF	RK_MR3		.BLKW	1	;MAINTENANCE REGISTER 3
 
	$DEFEND	RK
 

;
; OWN STORAGE:
;

;
; Boot driver table entry
;

	$BOOT_DRIVER	DEVTYPE = BTD$K_DM,-	; Device type (DM)
			SIZE = DM_DRVSIZ,-	; Driver size
			ADDR = DM_DRIVER,-	; Driver address
			DRIVRNAME = DMNAME	; Driver name

	.SBTTL	RK06/7 Bootstrap driver code

;++
;
; Inputs:
;
;	R3	- base address of adapter's register space
;	R5	- LBN FOR CURRENT PIECE OF TRANSFER
;	R6	- contains 0
;	R7	- address of the device's CSR
;	R8	- SIZE OF TRANSFER IN BYTES
;	R9	- address of the RPB
;	R10	- starting address of transfer (byte offset in first
;		  page ORed with starting map register number)
;	R11	- LBN at start of transfer
;
;	FUNC(AP)- I/O operation (IO$_READLBLK or IO$_WRITELBLK only)
;	BUF(AP) - Buffer address
;	SIZE(AP)- Size of transfer in bytes
;	MODE(AP)- Address interpretation mode (0 = physical, 1 = virtual)
;
; Implicit inputs:
;
;	RPB$W_UNIT	- RPB field containing boot device unit number
;
; Outputs:
;
;	R0 - status code
;
;		SS$_NORMAL	- successful transfer
;		SS$_NOSUCHDEV	- unsupported device
;		SS$_CTRLERR	- fatal controller error
;
;	R3 - must be preserved
;
;	This routine destroys R1, R2, R4, R5, R6. Within the
;	routine, register usage is as follows:
;
;		R0	- mapping enabled flag
;			  device unit number
;			  status code
;		R1	- device function code
;		R2	- drive type according to device register
;		R4	- used in logical to physical calculation
;		R5	- used in logical to physical calculation
;		R6	- used in logical to physical calculation
;			  transfer word count
;
;--
BUF = 4
SIZE = 8
LBN = 12
FUNC = 16
MODE = 20

DM_DRIVER:				; RK06/7 device driver.

;
; Translate the I/O function code into a device-dependent function
; code for this disk.
;

10$:	MOVL	#17,R1			; ASSUME READ
	CMPL	FUNC(AP),#IO$_WRITELBLK	; CHECK FOR WRITE FUNCTION
	BNEQ	20$			; NO, DO READ
	MOVL	#19,R1			; SET WRITE FUNCTION CODE

;
; Clear controller and drive status. Confirm that the drive exists and
; is ready for a transfer.
;

20$:	MOVZWL	RPB$W_UNIT(R9),R0	; GET UNIT NUMBER
	MOVW	#RK_CS2_M_SCLR,RK_CS2(R7) ; CLEAR CONTROLLER AND ALL DRIVES
	BSBW	READY			; WAIT FOR CONTROLLER READY
	MOVW	R0,RK_CS2(R7)		; SET DRIVE NUMBER

30$:					; Clear drive and find type.
	MOVW	#5,RK_CS1(R7)		; Clear drive.
	BSBW	READY			; Wait for controller ready.
	CLRL	R2			; Assume RK06 drive.
	BITW	#RK_DS_M_DDT,RK_DS(R7)	; Is drive RK07?
	BEQL	33$			; No. Branch.
	MOVZWL	#RK_CS1_M_CDT,R2	; Yes. Set drive code.

33$:					; Check for existence of drive.
	BITW	#RK_CS2_M_NED,RK_CS2(R7); Does drive exist?
	BEQL	35$			; Yes. Branch.
	MOVZWL	#SS$_NOSUCHDEV,R0	; No.  Exit with error
	RSB

35$:					; Clear drive and acknowledge.
	MOVW	#RK_CS1_M_CERR,-	; Clear controller error
		RK_CS1(R7)		; status.
	MOVW	R0,RK_CS2(R7)		; Set unit number code again.
	BISW3	#5,R2,RK_CS1(R7)	; Clear drive.
	BSBW	READY			; Wait for controller ready.
	BITW	#RK_DS_M_DRDY,RK_DS(R7)	; Is the drive ready?
	BEQL	35$			; No. Clear drive again.
	BISW3	#3,R2,RK_CS1(R7)	; Acknowledge pack and set
					; volume valid.
	BSBB	READY			; Wait for controller ready.

;
; Compute the cylinder, track, and sector addresses. Load device
; registers with transfer parameters and start transfer.
;

	CLRL	R6			; Clear register for EDIV.
	EDIV	#22*3,R5,R4,R5		; COMPUTE DESIRED CYLINDER
	MOVW	R4,RK_DC(R7)		; AND SET IN DEVICE
	EDIV	#22,R5,R5,R6		; CALCULATE DESIRED TRACK/SECTOR
	INSV	R5,#8,#8,R6		; MERGE TRACK AND SECTOR
	MOVW	R6,RK_DA(R7)		; SET DESIRED TRACK SECTOR
	MOVW	R10,RK_BA(R7)		; SET STARTING BUFFER ADDRESS
	DIVL3	#2,R8,R6		; COMPUTE WORD COUNT
	MNEGW	R6,RK_WC(R7)		; SET NUMBER OF WORDS TO TRANSFER
	BISW3	R1,R2,RK_CS1(R7)	; Start disk function.
	BSBB	READY			; WAIT FOR CONTROLLER READY

;
; Transfer is complete. See whether the transfer completed without
; error. If not, prepare input registers for the ECC correction routine
; and branch to that routine.
;

	MOVZWL	#SS$_NORMAL,R0		; ASSUME NORMAL COMPLETION
	TSTW	RK_CS1(R7)		; CHECK COMPOSITE ERROR
	BLSS	50$			; CONTINUE IF NO ERROR
	RSB				; 
50$:	MOVW	RK_ER(R7),R0		; GET ERROR STATUS
	CVTWL	RK_WC(R7),R1		; GET NEGATED COUNT REMAINING
	MULL	#2,R1			; CONVERT TO BYTES
	MOVZWL	RK_EC1(R7),R5		; GET POSITION OF ERROR
	MOVW	RK_EC2(R7),R6		; GET PATTERN
	BRW	ECC			; AND ATTEMPT ECC CORRECTION

;
; SUBROUTINE TO WAIT FOR CONTROLLER READY OR ERROR
;
 
READY:					;
	BITW	#^X8080,(R7)		;CONTROLLER READY OR ERROR?
	BEQL	READY			;IF EQL NO
	RSB				;

	.SBTTL	ECC - PERFORM ECC ERROR CORRECTION

;++
;
; Functional description:
;
;	ATTEMPT ECC ERROR CORRECTION
;
; INPUTS:
;
;	R0	- RK_ER/RP_ER1	ERROR STATUS REGISTER
;	R1	- NEGATIVE BYTE COUNT REMAINING
;	R5	- ECC POSITION
;	R6	- ECC PATTERN
;	R8	- BYTE COUNT REMAINING AT START OF LAST TRANSFER
;	R10	- starting address of transfer
;	R11	- BLOCK NUMBER AT START OF TRANSFER
;
; Outputs:
;
;--

ECC:					; ATTEMPT ECC CORRECTION

;
; Don't attempt an ECC correction if any of the following conditions apply:
;
;	the error was not a data check
;	the error was a hard ECC error
;	the transfer mode does not match the map-enabled position, i.e.,
;		transfer is virtual, and mapping is not enabled, or v.v.
;	no bytes have been transferred yet
;

	BBC	#RK_ER_V_DCK,R0,RETRY	; NOT DATA CHECK, RETRY
	BBS	#RK_ER_V_ECH,R0,RETRY	; HARD ECC ERROR, RETRY
	MFPR	#PR$_MAPEN,R0		; GET MAP ENABLE STATE
	CMPL	R0,MODE(AP)		; SAME AS I/O MODE
	BNEQ	RETRY			; NO, CANT DO SIMPLE ECC
	ADDL	R8,R1			; COMPUTE BYTES TRANSFERRED
	BEQL	RETRY			; NONE, RETRY

;
; Appears to be a correctable data check. Attempt the correction.
;

	ASHL	#-9,R1,R0		; CONVERT TO PAGE COUNT
	ADDL	R0,R11			; UPDATE BLOCK NUMBER
	ADDL	R1,R10			; UPDATE BYTE ADDRESS
	SUBL	R1,R8			; DECREASE BYTES REMAINING
	DECL	R5			; MAKE POSITION 1 ORIGIN
	MOVAB	512(R8),R0		; REMAINING BYTES AT START OF BAD SECTOR
	SUBL3	R0,SIZE(AP),R2		; BYTES TRANSFERRED AT START OF ERROR SECTOR
	MULL	#8,R0			; CONVERT BYTE COUNT TO BIT COUNT
	SUBL	R5,R0			; COMPUTE CORRECTION FIELD WIDTH
	BLEQ	20$			; BR IF NO CORRECTION NEEDED
	CMPL	R0,#RK_EC1_S_EPS	; MINIMUM OF 13 AND BUFFER REMAINING
	BLEQ	10$			; KEEP MINIMUM VALUE
	MOVL	#RK_EC1_S_EPS,R0	; LIMIT FIELD TO RK_EC1_S_EPS BITS
10$:	EXTZV	R5,R0,@BUF(AP)[R2],R1	; GET FIELD TO BE CORRECTED
	XORL	R6,R1			; APPLY CORRECTION CODE
	INSV	R1,R5,R0,@BUF(AP)[R2]	; AND STORE IN BUFFER

;
; If the transfer is not complete, branch back to retry it.
;

20$:	TSTL	R8			; CHECK FOR COUNT REMAINING
	BLEQ	30$			; NONE, EXIT
	MOVL	R11,R5			; GET WORKING COPY OF LBN
	BRW	DM_DRIVER		; CONTINUE TRANSFER

;
; Transfer is complete. Return with success status code.
;

30$:	MOVZWL	#SS$_NORMAL,R0		; SET COMPLETION CODE
	RSB				; AND RETURN

;
; No ECC correction was possible.  Return and retry.
;

RETRY:
	MOVZWL	#SS$_CTRLERR,R0		; Set failure status
	RSB				; Return to BOOTDRIVR

DMNAME:	.ASCIC	/DMDRIVER.EXE/		; Driver filename

DM_DRVSIZ=.-DM_DRIVER

	.END
