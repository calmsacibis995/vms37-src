	.TITLE	STASYSGEN - MAIN PROGRAM FOR STANDALONE SYSGEN
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STANDALONE SYSGEN
;
; ABSTRACT:
;	THIS ROUTINE IS THE MAIN PROGRAM AND SUBROUTINES FOR
;	STANDALONE SYSGEN.  STANDALONE SYSGEN IS USED IN STANDALONE
;	BACKUP TO AUTOCONFIGURE ALL DISKS AND TAPES.
;
; ENVIRONMENT:	USER, EXEC, AND KERNEL MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:	18-SEP-1979
;
; MODIFIED BY:
;
;	V03-001	MLJ0086		Martin L. Jack,	5-Apr-1982  10:56
;		Add PU to device select list.
;
;	V02-011	MLJ0065		Martin L. Jack,	23-Dec-1981  3:07
;		Rearrange order of operations so that volume switching occurs
;		before autoconfigure, to support repackaging of most drivers on
;		second volume.
;
;	V02-010	MLJ0034		Martin L. Jack,	27-Aug-1981  16:06
;		Improve wording of volume switch prompt.
;
;	V02-009	MLJ0032		Martin L. Jack,	10-Aug-1981  14:35
;		Change image name to STABACKUP.  Autoconfigure line printers.
;		Issue prompt to switch volumes only if booting from console.
;
;	V02-008	JLV0037		Jake VanNoy		7-Jul-1981
;		Added dummy entry point for LBR$OUTPUT_HELP, the new
;		SYSGEN help routine.
;
;	V02-007	JLV0030		Jake VanNoy 		27-June-1981
;		Added RIO_INPNAM symbol to resolve SYSGEN reference.
;
;	V006	TCM0001		Trudy C. Matthews	18-Jun-1981
;		Added code to disable and deallocate boot file cacheing,
;		so that the DSC.EXE image on the second floppy can be
;		found.
;
;	V005	JLV0011		Jake VanNoy		7-May-1981
;		ADDED BOO$V&M_AUTOLOG OFFSETS TO RESOLVE SYSGEN SYMBOLS.
;
;	V004	JLV0003		JAKE VANNOY		27-FEB-1981
;		ADDED BOO$_ OFFSETS TO RESOLVE SYSGEN SYMBOLS.
;
;	V003	JLV0002		Jake VanNoy		11-Feb-1981
;		Added a BOO$GL_DOT label so stand alone sysgen can
;		link with SYSGEN modules. Connected to a bug fix in
;		the USE <filespec> in SYSGEN.
;
;	V002	LMK0001		LEN KAWELL		09-FEB-1980
;		CHANGE IOGEN$READDRIV TO READ THE IMAGE HEADER.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$RPBDEF				; Define RPB offsets
	$BTDDEF
	$DPTDEF

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

CR=^XD					; ASCII carriage return
LF=^XA					; ASCII line feed

BOO$M_EXCLUDE == 128
BOO$V_EXCLUDE == 7
BOO$M_SELECT  == 64
BOO$V_SELECT  == 6
BOO$V_USER    == 3
BOO$V_AUTOLOG == 8
BOO$M_AUTOLOG == 256

;
; OWN STORAGE:
;

	.PSECT	BOO$SYSGEN,WRT

BOO$GL_CMDOPT::	.LONG 0			; Options longword
BOO$GL_DOT::	.LONG 0			; Dummy label, "." 	
RIO_INPNAM::	.LONG 0			; Dummy label
					; not used in stand alone version

FILHDR:	.BLKB	512			; Buffer for file header

IXFHDR:	.BLKB	512			; Buffer for index file header

STATBLK:				; Statistics block
	.BLKL	1			;  LBN of first block of file
	.BLKL	1			;  Size of file in blocks

IOSTBLK:				; I/O status block
	.BLKL	2

BOOTFLAGS:				; Boot flags
	.BLKL	1
BOOTDEVICE:
	.BLKL	1			; Boot device

FILNAM_DSC:				; File name descriptor
	.LONG	0			;  Size (in bytes)
	.ADDRESS FILNAMBFR		;  Address of file name

FILNAMBFRLF:				; Line feed before file name buffer
	.ASCII	<LF>
FILNAMBFR:				; File name buffer
	.BLKB	16

MSGBFR_DSC:				; Message buffer descriptor
	.LONG	MSGBFRSZ		;  Size
	.ADDRESS MSGBFR			;  Address

FMSGBFR:				; Facility message buffer
	.ASCII	<LF>/SYSGEN/
MSGBFR:	.BLKB	256			; Message buffer
MSGBFRSZ=.-MSGBFR

MSGLEN:	.BLKW	1			; Returned message length

INPBUF:	.BLKL	1			; Dummy input buffer

SWITCHPROMPT:				; Prompt string for switching
					; console media
	.ASCII	<CR><LF>/Please mount second standalone system diskette or /
	.ASCIZ	/cartridge and press return/

IMAGENAME:				; Image name to activate after
	.ASCID	/STABACKUP.EXE/		; SYSGEN is finished

SELECT_LIST:				; Select list for AUTOCONFIGURE ALL
	.ASCIC	/D/			; All disks
	.ASCIC	/M/			; All tapes
	.ASCIC	/LP/			; Line printers
	.ASCIC	/LC/			;
	.ASCIC	/PU/			; UDA port driver
	.BYTE	0			; End of list

	.SBTTL	BOO$SYSGEN - main program
;++
; FUNCTIONAL DESCRIPTION:
;	This is the main program for standalone SYSGEN.  It does the
;	following:
;
;		1)  Locks the entire image into the working set.
;		2)  Executes a $SETIME to save the current SYSGEN parameters
;		    in SYS.EXE.
;		3)  Autoconfigures disks, tapes, and line printers.
;		4)  Optionally does a SHOW/DEVICES.
;		5)  Activates the next image, STABACKUP.
;
; CALLING SEQUENCE:
;
;	Called by the Image activator
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; COMPLETION CODES:
;
;	Various errors
;
;--

	.ENTRY	BOO$SYSGEN,^M<>
	$LKWSET_S -			; Lock entire image in working set
		INADR=BOO$GQ_LIMITS, -	;
		RETADR=BOO$GQ_RETADR	;
	$SETIME_S			; Save the SYSGEN parameters
;
; Get boot flags and boot device type.
;
	$CMKRNL_S  B^30$		; Get boot flags and device type
;
; Request operator to switch to second floppy or cartridge if necessary.
;
10$:	CMPB	BOOTDEVICE,#BTD$K_CONSOLE ; Booting from console?
	BNEQ	20$			; Branch if no
	PUSHAB	INPBUF			; Push address of input buffer
	PUSHL	#2			; Push size of input buffer
	PUSHAB	SWITCHPROMPT		; Push address of message
	CALLS	#3,BOO$READPROMPT	; Prompt and wait for return
;
; Disable file caching so FIL$OPENFILE will be forced to look
; at the new floppy or cartridge.
;
	$CMKRNL_S  B^40$		; Disable and de-allocate file cache
;
; Autoconfigure disks, tapes, and line printers.
;
20$:	MOVAB	SELECT_LIST,BOO$GL_SELECT ; Use builtin select list
	CALLS	#0,BOO$CONFIGALL	; Autoconfigure all adapters
;
; If XDELTA is mapped into the system, do a SHOW/DEVICES.
;
	BBC	#RPB$V_DEBUG,BOOTFLAGS,25$ ; Branch if no XDELTA
	CLRQ	-(SP)			; Set up fake TPARSE parameter block
	CLRQ	-(SP)			;
	CLRQ	-(SP)			;
	CLRQ	-(SP)			;
	CALLS	#8,BOO$SHODEV_ALL	; Show devices
;
; Activate STABACKUP image.
;
25$:	PUSHAQ	IMAGENAME		; Push address of image name descriptor
	CALLS	#1,BOO$ACTIMAGE		; Activate next image
	RET				; Should never return here
;
; Local kernel mode routine to get RPB information.
;
30$:	.WORD	^M<>
	MOVL	MMG$A_SYSPARAM+<EXE$GL_RPB-EXE$A_SYSPARAM>,R0
					; Point to RPB (use SYS.EXE copy)
	MOVL	RPB$L_BOOTR5(R0),BOOTFLAGS  ; Get boot flags
	MOVZBL	RPB$B_DEVTYP(R0),BOOTDEVICE ; Get boot device type
	MOVL	#1,R0			; Return success
	RET				;
;
; Local kernel mode routine to disable and de-allocate FIL$OPENFILE cache.
;
40$:	.WORD	^M<R2,R3>
	MOVQ	G^FIL$GQ_CACHE,R1	; R1=size, R2=address of cache
	BEQL	50$			; Branch if cache not present
	CLRQ	G^FIL$GQ_CACHE		; Disable the cache
	MOVL	R2,R0			; Copy address of cache
	MOVL	G^EXE$GL_NONPAGED+4,R3	; Address of free non-paged pool
	JSB	G^EXE$DEALLOCATE	; Deallocate FIL$OPENFILE cache
50$:	MOVL	#1,R0			; Return success
	RET				;

	.SBTTL	IOGEN$READDRIV - Read in Driver
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine reads the driver into memory by opening it
;	with FIL$OPENFILE and reading it with a QIO.
;
; CALLING SEQUENCE:
;
;	BSBW	IOGEN$READDRIV
;
; INPUT PARAMETERS:
;
;	R0	Address of filename counted string
;	R3	Address of location to store channel number
;	R4	Address of two longword array to return address range
;		created by $EXPREG.
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES
;
;	Those returned by FIL$OPENFILE, $EXPREG, and $QIO
;
; SIDE EFFECTS:
;
;	R0 - R2 are used as scratch registers
;
;--

IOGEN$READDRIV::
	MOVZBL	(R0)+,R1		; Get length of filename
	CMPL	R1,#9			; Longer than 9 characters?
	BLEQ	10$			; No
	MOVZWL	#SS$_BADFILENAME,R0	; Yes, error
	RSB

10$:	ADDL3	#4,R1,FILNAM_DSC	; Store filename size + 4
	PUSHR	#^M<R2,R3,R4,R5>	; Save registers
	MOVC3	R1,(R0),FILNAMBFR	; Copy filename into local buffer
	MOVL	#^A/.EXE/,(R3)		; Append filetype
	POPR	#^M<R2,R3,R4,R5>	; Restore registers

	;
	; Open the file
	;

	MOVAQ	STATBLK,R2		; Get address of statistics block
	PUSHAQ	(R2)			; Push address of statistics block
	PUSHAB	FILHDR			; Push address of file header buffer
	PUSHAB	IXFHDR			; Push address of index file hdr bfr
	PUSHAQ	FILNAM_DSC		; Push address of filename descriptor
	PUSHAW	(R3)			; Push address of loc. to store channel
	CALLS	#5,FIL$OPENFILE		; Open the file
	BLBS	R0,40$			; Success
	BSBW	PUTERROR		; Output error message
	MOVL	FILNAM_DSC,R0		; Get length of filename
	MOVB	#CR,FILNAMBFR[R0]	; Put CR at end of buffer
	CLRB	FILNAMBFR+1[R0]		; Make it ASCIZ
	CLRQ	-(SP)			; No input buffer
	PUSHAB	FILNAMBFRLF		; Push address of filename
	CALLS	#3,BOO$READPROMPT	; Output driver name
	CLRL	R0			; Status
	RSB

40$:	;
	; Expand the program region to create a place to read driver into
	;

	$EXPREG_S	PAGCNT = 4(R2),-; # of pages
			RETADR = (R4)	; Return address array
	BLBC	R0,90$				; Error

	;
	; Read in the driver
	;

	MOVQ	(R2),R0			; R0 = LBN, R1 = # of blocks
	MULL	#512,R1			; Convert blocks to bytes
	$QIOW_S	CHAN = (R3),-		; Channel number
		FUNC = #IO$_READLBLK,-	; Function
		IOSB = IOSTBLK,-	; I/O status block
		P1 = @(R4),-		; Buffer address
		P2 = R1,-		; Byte count
		P3 = R0			; LBN
	BLBC	R0,90$			; Error
	MOVZWL	IOSTBLK,R0		; Final status

90$:	RSB

	.SBTTL	PUTERROR - Output Error Message
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine outputs an error message for the status code
;	in R0.
;
; CALLING SEQUENCE:
;
;	BSBW	PUTERROR
;
; INPUT PARAMETERS:
;
;	R0	Status code
;
; OUTPUT PARAMETERS:
;
;	None
;--

PUTERROR::
	TSTL	R0			; If zero, then return
	BEQL	90$
	$GETMSG_S	MSGID = R0,-	; Get message text
			MSGLEN = MSGLEN,- ; Message text length
			BUFADR = MSGBFR_DSC,-  ; Message buffer descriptor
			FLAGS = #7	; Get everything but facility
	MOVZWL	MSGLEN,R0		; Get returned length
	MOVB	#CR,MSGBFR[R0]		; Put CR at end of buffer
	CLRB	MSGBFR+1[R0]		; Make it ASCIZ
	CLRQ	-(SP)			; No input buffer
	PUSHAB	FMSGBFR			; Push address of facility msg bfr
	CALLS	#3,BOO$READPROMPT	; Output error message
90$:	RSB

	.SBTTL	Dummy entry points

;
; These entry points are need to resolve references to routines
; not linked with the standalone version of SYSGEN.
;

BOO$GT_SYSNAME::
BOO$GQ_FILDESC::

LBR$OUTPUT_HELP::
LBR$INI_CONTROL::
LBR$OPEN::
LBR$GET_HELP::
BOO$SEARCH::
BOO$SETVALUE::
	.WORD	0			; ENTRY MASK
	CLRL	R0
	RET

BOO$MSGOUT::
BOO$FILOPEN::
BOO$FILOPENW::
BOO$READFILE::
BOO$WRITEFILE::
	CLRL	R0
	RSB



	.END	BOO$SYSGEN
