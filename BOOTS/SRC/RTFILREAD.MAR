	.TITLE	RTFILREAD - Lookup facility for RT-11 Files Structure
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	Lookup facility for files located on a RT-11 Files Structure
;
; ENVIRONMENT:
;
;	Runs at IPL 31, kernel mode, memory management is OFF, IS=1
;	(running on interrupt stack), and code must be PIC.
;
; ABSTRACT:
;
;	This module contains code to locate a named file on an RT-11
;	volume.
;
; AUTHOR:
;
;	Carol Peters	22 March 1979
;
; MODIFIED BY:
;
;	V02-002	KTA0039		Kerbey T. Altmann	28-Oct-1981
;		Change PSECT to YFILEREAD to match other boot IO.
;
;--

	.SBTTL	Declarations

;
; Macros
;

	$DSCDEF				; String descriptor definitions
	$IODEF				; I/O function code definitions
	$SSDEF				; Status code definitions

;
; Field definitions for RT-11 directory segments and directory entries.
;

	$DEFINI	RTF

$DEF	RTF_W_NUMSEGS			; Number of directory segments
		.BLKW	1		; available on this volume.
$DEF	RTF_W_NEXTSEG			; Number of the next directory
		.BLKW	1		; segment after this one.
$DEF	RTF_W_HIGHSEG			; Number of highest directory
		.BLKW	1		; segment on this volume.
$DEF	RTF_W_EXTRBYTES			; Number of extra bytes in each
		.BLKW	1		; directory entry.
$DEF	RTF_W_STARTLBN			; LBN of the file described by
		.BLKW	1		; first entry in this segment.
$DEF	RTF_L_ENTRYONE			; First directory entry in
		.BLKL	1		; directory segment.

	.=0				; Reset base address.

$DEF	RTF_W_STATUS			; Directory entry status.
$DEF	RTF_B_EVENSTAT			; Even byte of entry status.
		.BLKB	1
$DEF	RTF_B_ODDSTAT			; Odd byte of entry status.
		.BLKB	1
$DEF	RTF_L_FILENAME			; 6-character RAD50 format file
		.BLKL	1		; name.
$DEF	RTF_W_FILTYPE			; 3 characters of file type in
		.BLKW	1		; RAD50 format.
$DEF	RTF_W_FILLENGTH			; Length of file in blocks.
		.BLKW	1
$DEF	RTF_B_CHAN_NUM			; Number of channel assigned to
		.BLKB	1		; the entry's file.
$DEF	RTF_B_JOBNUM			; Number of job using the
		.BLKB	1		; entry's file.
$DEF	RTF_W_DATE			; Date of the entry's file.
		.BLKW	1
$DEF	RTF_K_ENTLENGTH			; Length of fixed entry.

	$DEFEND	RTF
;
; Equated symbols:
;

	RTF_C_TENTAFILE	= 1		; Tentative (open) file entry.
	RTF_C_EMPTYFILE	= 2		; Empty file entry.
	RTF_C_PERMAFILE	= 4		; Permanent (normal) file.
	RTF_C_ENDOFSEG	= 8		; End of segment entry.

;
; Own storage.
;

	.PSECT	YFILEREAD,LONG

	.SHOW	EXPANSIONS

	.DEFAULT DISPLACEMENT, WORD

	.SBTTL	RTF$OPENFILE - Looks up a file on an RT-11 volume

;++
; Functional description:
;
;	This routine translates an ASCII file name and type to RAD50.
;	Then the routine interprets an RT-11 directory to see whether
;	the named file is in the directory. If the file is present, this
;	routine returns the starting LBN of the file and the file's
;	length in blocks.
;
;	The RT-11 directory structure consists of 1-31 2-block directory
;	segments. The first segment starts at block 6, and subsequent
;	segments follows contiguously; i.e., at blocks 8, 10, etc. Each
;	segment starts with a 5-word header:
;
;		+------------------------------------------+
;		|        number of 2-block segments        |	:0
;		+------------------------------------------+
;		|      segment number of next segment      |	:2
;		+------------------------------------------+
;		|       highest segment currently open     |	:4
;		+------------------------------------------+
;		|   number of extra bytes/directory entry  |	:6
;		+------------------------------------------+
;		| starting LBN of 1st file in this segment |	:8
;		+------------------------------------------+
;
;	The segment number field identifies the next segment to search.
;	The LBN of the first block of a directory segment is
;
;		6 + << segment_number-1 > * 2 >
;
;	Following the directory segment header are the directory entries
;	for this segment. A directory entry is 8+n words long:
;
;		+------------------------------------------+
;		|      status word: tells type of file     |	:0
;		+------------------------------------------+
;		|   1st 3 characters of filename in RAD50  |	:2
;		+------------------------------------------+
;		|   2nd 3 characters of filename in RAD50  |	:4
;		+------------------------------------------+
;		|     3 characters of filetype in RAD50    |	:6
;		+------------------------------------------+
;		|         number of blocks in file         |	:8
;		+------------------------------------------+
;		|     job number      |   channel number   |	:A
;		+------------------------------------------+
;		|                   date                   |	:C
;		+------------------------------------------+
;		|             "n" extra words              |	:E
;		|                    .                     |
;		|                    .                     |
;		+------------------------------------------+
;
;	Bits 8-15 of the status word have the following meanings:
;
;		1	open file
;		2	empty file; length is the other valid field
;		4	normal file
;	       10	end of segment marker
;
;	The algorithm to lookup a file is the following:
;
;		a) Get first segment.
;		b) Compare target filename with each entry in segment.
;		c) If no match, get next segment, if any; goto b).
;		d) If match, compute starting LBN and length of file.
;		e) Return.
;
; Inputs:
;
;	FILE_DESC(AP)	- string descriptor of target file specification
;	DIRSEG_BLKS(AP)	- address of 512-word buffer for the 2 blocks of
;			  a directory segment
;	STAT_BLOCK(AP)	- address of a 2 longword block in which the
;			  following is returned:
;
;				LBN of 1st block of file
;				size of files in blocks
;
; Outputs:
;
;	R0	- status code; can be the following:
;
;		error codes from FIL$CVTFILNAM:
;			SS$_BADFILENAME, file name too long or non 0
;					version #
;		error codes from FIL$READ_LBN:
;			SS$_BADIRECTORY, directory contains tentative
;					(non-closed) directory entries,
;					or entries with an invalid
;					status field value
;			SS$_NOSUCHFILE, file does not exist on volume
;
;--

;
; Offsets to input arguments:
;

	FILE_DESC	= 4
	DIRSEG_BLKS	= 8
	STAT_BLOCK	= 12

	.ENTRY	RTF$OPENFILE,-
		^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; File name and type in RT-11 directories are in RAD50 format. Convert
; ASCII file specification from ASCII to RAD50. Use a 3-longword block
; on the stack to store the RAD50 characters.
;

	CLRQ	-(SP)			; Allocate and zero a 6-word
	CLRL	-(SP)			; temp storage block.
	PUSHL	SP			; Use block address as an
					; argument.
	PUSHL	FILE_DESC(AP)		; Push address of file desc.
	CALLS	#2,FIL$CVTFILNAM	; Convert filename to RAD50.
	BLBS	R0,PACK_FILNAM		; On success, go pack filename.
	RET				; On failure, return with error.

;
; FIL$CVTFILNAM writes the file name into words 0-2, the file type in
; word 3, and the binary file version number in word 4. RT-11 files
; are limited to 6-character file names, 3-character file types, and
; no version numbers. Thus the block looks like this:
;
;	+------------------------------+
;	| file name's 1st 3 characters |	:0
;	+------------------------------+
;	| file name's 2nd 3 characters |	:2
;	+------------------------------+
;	|         must be zero         |	:4
;	+------------------------------+
;	|    3 character file type     |	:6
;	+------------------------------+
;	|     binary version number    |	:8
;	+------------------------------+
;
; Confirm that these requirements are met.
;

PACK_FILNAM:				; Pack filename/type in 3 bytes.
	TSTW	4(SP)			; Name 6 characters only?
	BNEQ	BAD_FILENAME		; No. Name is too long. Branch.
	TSTW	8(SP)			; Version number 0?
	BEQL	MOVE_FILE_TYPE		; Yes. Go pack file type.

BAD_FILENAME:				; File name is bad.
	MOVZWL	#SS$_BADFILENAME,R0	; No. Load error status code.
	RET				; Return to caller.

MOVE_FILE_TYPE:				; Pack RAD50 file type.
	MOVW	6(SP),4(SP)		; Move file type into 3rd word.

;
; Read in the first 2-block directory segment into the buffer supplied
; as an input argument.
;

	MOVL	#6,R5			; Directory segments begin at
					; LBN 6.

READ_SEGMENT:				; Read a directory segment.
	PUSHL	DIRSEG_BLKS(AP)		; Push input buffer address.
	PUSHL	R5			; Send LBN to read.
	PUSHL	#2			; Number of arguments pushed.
	CALLG	(SP),FIL$READ_LBN	; Read one block.
	BLBS	R0,GET_2ND_BLK		; On success, go get 2nd block.
	RET				; On failure, return with error.

GET_2ND_BLK:				; Read 2nd block of segment.
	ADDL	#4,SP			; Take argument count off stack.
	INCL	(SP)			; Increment LBN to read.
	ADDL	#512,4(SP)		; Add a page to buffer address.
	CALLS	#2,FIL$READ_LBN		; Read second block. The RET
					; from FIL$READ_LBN cleans up
					; the stack.
	BLBS	R0,START_DIRSEG		; On success, process segment.
	RET				; On failure, return with error.

;
; If this is the first directory segment, save the number of the highest
; open segment. Then prepare some registers for use during the scan
; of this segment's directory entries:
;
;	R1	- address of directory segment
;	R2	- address of current directory entry
;	R3	- number of bytes per directory entry
;	R4	- starting LBN of the file described by the next
;		  directory entry
;	R5	- starting LBN of the current directory segment
;	R6	- status of a directory entry;
;		  address of the statistics block from the argument list
;		  length of file corresponding to a directory entry
;

START_DIRSEG:				; Start processing segment.
	MOVL	DIRSEG_BLKS(AP),R1	; Get address of segment buffer.
	MOVAB	RTF_L_ENTRYONE(R1),R2	; Address of first entry.
	MOVZWL	RTF_W_EXTRBYTES(R1),R3	; Get extra byte count/entry.
	ADDL	#RTF_K_ENTLENGTH,R3	; Add to normal entry length.
	MOVZWL	RTF_W_STARTLBN(R1),R4	; Get 1st file's LBN.

;
; Now read one directory entry at a time. CASE on the status of the
; entry. Choices are
;
;	open file	(should not find any of these)
;	empty entry	(just add length and go to next entry)
;	normal file	(compare with our file name)
;	end of segment	(move to next segment, if any)
;

LOOK_AT_ENTRY:				; Examine an entry.
	MOVZBL	RTF_B_ODDSTAT(R2),R6	; Get the entry status.
	CMPL	R6,#RTF_C_ENDOFSEG	; If end of segment marker,
	BEQL	END_OF_SEGMENT		; branch to process it.
	CMPL	R6,#RTF_C_TENTAFILE	; If entry describes an open
	BEQL	BAD_DIRECTORY		; tentative file, report error.
	CMPL	R6,#RTF_C_EMPTYFILE	; If entry describes empty
	BEQL	NEXT_ENTRY		; space, add size, go to next.
	CMPL	R6,#RTF_C_PERMAFILE	; If not a normal file, report
	BNEQ	BAD_DIRECTORY		; an error and return.

;
; This directory entry describes a normal permanent file. Compare the
; file name and type. If they match, return the file statistics.
;

	CMPL	RTF_L_FILENAME(R2),-	; If file name doesn't match,
		(SP)			; move to next entry.
	BNEQ	NEXT_ENTRY		; Branch on no match.
	CMPW	RTF_W_FILTYPE(R2),4(SP); If file type doesn't match,
	BNEQ	NEXT_ENTRY		; move to next entry.
	MOVL	STAT_BLOCK(AP),R6	; Get address of statistics
					; block.
	MOVL	R4,(R6)			; Return starting LBN of file.
	MOVZWL	RTF_W_FILLENGTH(R2),-	; Return length of file in
		4(R6)			; blocks.

;
; R0 still contains a success code from the last call to READ_LBN.
;

	RET				; Return with success.

;
; This entry does not match the file specification. Compute the new
; starting LBN of the next file, and move to the next directory entry.
;

NEXT_ENTRY:				; Try another entry.
	MOVZWL	RTF_W_FILLENGTH(R2),R6	; Get length of this file.
	ADDL	R6,R4			; Add to starting LBN.
	ADDL	R3,R2			; Compute address of next entry.
	BRB	LOOK_AT_ENTRY		; Check out next entry.

;
; When an entry is an end-of-segment marker, move to the next segment,
; if any. Compute LBN of the new directory segment. Equation is
;
;	6 + << segment_number - 1 > * 2>
;
; Then loop back to read it into memory.
;

END_OF_SEGMENT:				; Look for another segment.
	MOVZWL	RTF_W_NEXTSEG(R1),R5	; Get link to next segment.
	BEQL	NO_SUCH_FILE		; If null, return with error.
	DECL	R5			; Decrement segment number.
	ASHL	#1,R5,R5		; Convert to segment modulo.
	ADDL	#6,R5			; Add base LBN of segments.
	BRW	READ_SEGMENT		; Read new segment into memory.

;
; The directory was inconsistent. Return with an error code.
;

BAD_DIRECTORY:				; Load error status code.
	MOVZWL	#SS$_BADIRECTORY,R0	; Directory is bad.
	RET

;
; The file does not exist on this volume.
;

NO_SUCH_FILE:				; Load error status code.
	MOVZWL	#SS$_NOSUCHFILE,R0	; The file is not on the volume.
	RET

	.END
