	.TITLE	PABTDRIVR - CI PORT BOOT DRIVER
	.IDENT	'V03-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1982 BY						    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	BOOTS
;
; ABSTRACT:
;	This module contains the bootstrap device driver for the
;	CI port and disks accessed over it.
;
; ENVIRONMENT:	IPL 31, kernel mode, code must be PIC
;
; AUTHOR:  Kerbey T. Altmann,	CREATION DATE:  20-Nov-1981
;
; MODIFIED BY:
;
;	V03-002	KTA0094		Kerbey T. Altmann	05-Apr-1982
;		Add lots of comments.  Change all HALTs to error exits.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BQODEF				; Boot qio offsets
	$BTDDEF				; Boot device types
	$CIBDDEF			; CI BDT entry def
	$CIBHANDEF			; CI Buffer handle
	$IODEF				; I/O function codes
	$MSCPDEF			; MSCP definitions
	$NDTDEF				; Adapter codes
	$PAREGDEF			; CI port registers
	$PPDDEF				; PPD layer definitions
	$PRDEF				; Processor registers
	$PTEDEF				; Page table entries
	$RPBDEF				; RPB offsets
	$SCSDEF				; SCS layer definitions
	$SSDEF				; Status codes
	$VADEF				; Virtual addresses
	$VMBARGDEF			; VMB argument list offsets

;
; EQUATED SYMBOLS:
;

	TIME  =		400
	DG_SIZ	=	96
	MS_SIZ	=	96

	$DEFINI	PQB

$DEF	PQB_Q_CMDQ0	.BLKQ
$DEF	PQB_Q_CMDQ1	.BLKQ
$DEF	PQB_Q_CMDQ2	.BLKQ
$DEF	PQB_Q_CMDQ3	.BLKQ
$DEF	PQB_Q_RESPQ	.BLKQ
$DEF	PQB_L_DFRQ_HDR	.BLKL
$DEF	PQB_L_MFRQ_HDR	.BLKL
$DEF	PQB_L_DQE_LEN	.BLKL
$DEF	PQB_L_MQE_LEN	.BLKL
$DEF	PQB_L_VPQB_BASE	.BLKL
$DEF	PQB_L_BDT_BASE	.BLKL
$DEF	PQB_L_BDT_LEN	.BLKL
$DEF	PQB_L_SPT_BASE	.BLKL
$DEF	PQB_L_SPT_LEN	.BLKL
$DEF	PQB_L_GPT_BASE	.BLKL
$DEF	PQB_L_GPT_LEN	.BLKL
			.BLKL
$DEF	TAB_Q_DFRQ 	.BLKQ
$DEF	TAB_Q_MFRQ 	.BLKQ
$DEF	TAB_L_STATE 	.BLKL
$DEF	TAB_L_TIMER	.BLKL
$DEF	TAB_L_RSTAID 	.BLKL
$DEF	TAB_L_PAGETBL	.BLKL
$DEF	TAB_B_BDT 	.BLKB	16
$DEF	TAB_L_RCONID	.BLKL
$DEF	TAB_L_LCONID	.BLKL
$DEF	TAB_PKT 	.BLKB	MS_SIZ
$DEF	TAB_PKT2 	.BLKB	MS_SIZ
$DEF	TAB_DG0		.BLKB	DG_SIZ
$DEF	TAB_DG1		.BLKB	DG_SIZ
$DEF	TAB_DG2		.BLKB	DG_SIZ
TAB_LEN = .-PQB_Q_CMDQ0

	$DEFEND

;
; LOCAL MACROS
;
	.MACRO	$QRETRY	OPCODE,OPER1,OPER2,ERROR,?LOOP,?OK

	 CLRL	R0
LOOP:	 OPCODE	OPER1,OPER2
	 BCC	OK
	 AOBLSS	#63,R0,LOOP
	 BRW	ERROR
OK:
	.ENDM	$QRETRY

;
; OWN STORAGE:
;

;
; Boot driver table entry
;

	$BOOT_DRIVER	DEVTYPE = BTD$K_HSCCI,-	; Device type (MSCP/CI)
			SIZE = PA_DRVSIZ,-	; Driver size
			ADDR = START_DRV,-	; Driver starting address
			ENTRY = PA_DRIVER,-	; Driver entry point
			UNIT_INIT = PA_INIT,-	; Driver unit init entry
			DRIVRNAME = DSKDRVNAME,-; Driver disk name
			AUXDRNAME = PRTDRVNAME	; Driver port name

START_DRV:
DSKDRVNAME:
	.ASCIC	/DUDRIVER.EXE/		; Disk class driver filename
PRTDRVNAME:
	.ASCIC	/PADRIVER.EXE/		; Port driver filename
TEMPL_MSG:
	.WORD	SCS$C_CON_REQL		; SCS$W_LENGTH
	.WORD	PPD$C_SCS_MSG		; PPD$W_MTYPE
	.WORD	SCS$C_CON_REQ		; SCS$W_MTYPE
	.WORD	2			; Credit
	.LONG	0
	.LONG	^X10001			; Conid
	.LONG	0			; Min send/Status
	.ASCII	/MSCP$DISK       /
	.ASCII	/VMS$DISK_CL_DRVR/
TEMPL_MSG_LEN=.-TEMPL_MSG
	.PAGE
	.SBTTL	ACTION ROUTINES
;
; Routines
;

ROUT_TABLE:				; Start of the routines
COPY_SYSID:
	BBC	#VA$V_SYSTEM,R10,10$	; If we are in physical mode...
	MOVQ	PPD$B_SYSTEMID(R2),-	;  (i.e. called from bootdriver)
		 VMB$B_SYSTEMID(AP)	;  then return the remote system id
10$:	RSB				; Leave

START_TIMER:
	MFPR	#PR$_TODR,R0		; Pick up current time
	MOVAL	TIME(R0),TAB_L_TIMER(R7); Add in the wait period
	RSB

STOP_TIMER:
	MNEGL	#1,TAB_L_TIMER(R7)	; Set for infinite wait
	RSB

	.ENABLE LSB
ALLOC_DG:
	$QRETRY	REMQHI,TAB_Q_DFRQ(R7),R2,400$ ; Yank an entry from free queue
	BVC	500$			; None, trouble!
400$:	TSTL	(SP)+			; Get rid of first level return
	BRW	ERROR			; Return an error status

500$:	RSB				; Success

DISCARD:
	MOVZBL	PPD$W_SIZE(R2),R4	; Get software flag
	MOVAQ	TAB_Q_DFRQ(R7)[R4],R1	; Get que head
	$QRETRY	INSQTI,(R2),(R1),400$	; Put it back
	MOVAL	PA_DFQ(R3)[R4],R1	; Get correct register
	MOVL	#PA_DFQ_M_DFQC,(R1)	; Tell the port its there
	RSB

SEND_ACK:
	MOVL	#<PPD$C_ACK@16+PPD$C_ACK_LEN>,-
		 PPD$W_LENGTH(R2)
	BRB	20$			; Send it out	

SEND_START:
	MOVAB	PPD$W_LENGTH(R2),R0	; Set pointer
	MOVL	#<PPD$C_START@16+PPD$C_START_LEN>,(R0)+
	BRB	10$

	ASSUME	<.-ROUT_TABLE> LT 128
SEND_STACK:
	MOVAB	PPD$W_LENGTH(R2),R0	; Set pointer
	MOVL	#<PPD$C_STACK@16+PPD$C_STACK_LEN>,(R0)+
10$:	MFPR	#PR$_SID,(R0)+		; Set fake system id
	CLRL	(R0)+			; Clear hi order
	MOVL	#<MS_SIZ@16!DG_SIZ>,(R0)+
	MOVL	#^A/VMSB/,(R0)+		; Opsys = VMS/VMB
	MOVL	#^A/BOOT/,(R0)+		; Version
	CLRQ	(R0)+			; Boot time
	CLRL	(R0)+
	MFPR	#PR$_SID,(R0)		; Processor id
20$:	BRW	SEND_DG
	.DISABLE LSB

	.PAGE
	.SBTTL	STATE/ACTION TABLES
;
; STATE TABLE
;
	CLOSED	= 0
	ST_SENT = 1
	ST_RECV = 2
	OPEN	= 3
	TIMEOUT = 3

	.MACRO	ACTION,ROUT
	.BYTE	ROUT-ROUT_TABLE
	.ENDM

	.MACRO	SET_ST,STATE,FINISH
	.IF B FINISH
	.BYTE	128!STATE
	.IFF
	.BYTE	128!64!STATE
	.ENDC
	.ENDM

;
; Action table
;
ACTION_TABLE:
X:
ACT1A:	ACTION	ALLOC_DG
ACT1:	ACTION	COPY_SYSID
	ACTION	SEND_STACK
	ACTION	START_TIMER
	SET_ST	ST_RECV

ACT2:	ACTION	COPY_SYSID
	ACTION	SEND_ACK
	ACTION	START_TIMER
	SET_ST	OPEN

ACT3A:	ACTION	ALLOC_DG
ACT3:	ACTION	SEND_START
	ACTION	START_TIMER
	SET_ST	ST_SENT

ACT4:	ACTION	DISCARD
	ACTION	START_TIMER
	SET_ST	OPEN

ACT5:	ACTION	STOP_TIMER
	SET_ST	OPEN,FINISH

ACT6:	ACTION	SEND_ACK
	SET_ST	OPEN

ACT7:	ACTION	DISCARD
	SET_ST	OPEN

ACT8:	ACTION	DISCARD
	SET_ST	CLOSED

;
; State table
;
STATE_TABLE:
;		CLOSED	ST_SENT	ST_RECV	OPEN
;		------	-------	-------	----
	.BYTE	ACT8-X,	ACT1-X,	ACT1-X,	ACT8-X	; START received
	.BYTE	ACT8-X,	ACT2-X,	ACT2-X,	ACT6-X	; STACK received
	.BYTE	ACT8-X,	ACT8-X,	ACT4-X,	ACT7-X	; ACK received
	.BYTE	ACT3-X,	ACT3A-X,ACT1-X,	ACT5-X	; Timeout

	.SBTTL	CI port bootstrap device initialization

;++
;
; Inputs:
;
;	R9 -->	RPB
;	AP -->	VMB argument list
;
; Outputs:
;
;	R0 - status code
;
;--
	.ENABLE LSB

PA_INIT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R10>

	PUSHL	#3			; Try this three times
10$:	BSBB	30$			; Do the complete initialization
	BLBS	R0,20$			; Return with success
	SOBGTR	(SP),10$		; Failed, try again
20$:	RET
;
; Initialize the tables needed
;
30$:	MOVAB	W^TABLE,R7		; Cover the area
	MOVAB	511(R7),R7		; Set to round up
	BICW	#511,R7			;  to next page
	MOVC5	#0,(SP),#0,#TAB_LEN,(R7); Zero it all out
	MFPR	#PR$_MAPEN,R0		; Get the mapping status
	ASSUME	RPB$L_ADPVIR EQ RPB$L_ADPPHY+4
	MOVL	RPB$L_ADPPHY(R9)[R0],R3	; Get correct pointer to port registers
	BLBS	R0,50$			; If virtual, skip some set up
;
; Mapping is physical
;
	MOVL	R7,R8			; PQB PA=VA
	ROTL	#VA$V_SYSTEM,#1,R10	; Set the system VA bit
	ADDL3	VMB$Q_UCODE(AP),-	; Start the page table in pre-allocated
		 VMB$Q_UCODE+4(AP),R6	;  memory just beyond the ucode
	MOVL	R6,R5			; Save the PA of page table
	MOVL	RPB$L_PFNCNT(R9),R4	; Get the number of page table entries
	MOVL	R4,R1			; Save
	ROTL	#28,S^#<<PTE$C_KW!PTE$M_VALID>@-28>&^XF,R2 ; Set up fake a SPT
40$:	MOVL	R2,(R6)+		; Put it in
	INCL	R2			; Step to next page
	SOBGTR	R4,40$			; Loop until done
	BRB	60$			; Join common
;
; Mapping is virtual
;
50$:	EXTZV	#VA$V_VPN,#VA$S_VPN,R7,R8 ; Get virtual page number
	MOVAL	@RPB$L_SVASPT(R9)[R8],R8  ; Find page table entry
	ASHL	#9,(R8),R8		; Turn into physical address
	CLRL	R10			; Initialize
	MOVL	RPB$L_SLR(R9),R1	; Size of page table
	MOVL	RPB$L_SBR(R9),R5	; Address
;
; Set up the PQB
;
60$:	MOVAQ	TAB_Q_DFRQ(R7),R6	; Point to start
	MOVAL	PQB_L_DFRQ_HDR(R7),R2	; Ditto
	MOVAQ	(R6)+,(R2)		; Datagram free que header
	BISL	R10,(R2)+		; Set sys VA bit
	ASSUME	TAB_Q_MFRQ EQ TAB_Q_DFRQ+8
	ASSUME	PQB_L_MFRQ_HDR EQ PQB_L_DFRQ_HDR+4
	MOVAQ	(R6)+,(R2)		; Message free que header
	BISL	R10,(R2)+		; Set sys VA bit
	ASSUME	PQB_L_DQE_LEN EQ PQB_L_MFRQ_HDR+4
	MOVZWL	#DG_SIZ,(R2)+		; Datagram size
	ASSUME	PQB_L_MQE_LEN EQ PQB_L_DQE_LEN+4
	MOVZWL	#MS_SIZ,(R2)+		; Message size
	CLRQ	(R6)+			; STATE and timer
	MOVL	RPB$L_BOOTR2(R9),(R6)+	; Transfer remote port
	BISL3	R10,R5,(R6)+		; Store the psuedo page table
	ASSUME	PQB_L_VPQB_BASE EQ PQB_L_MQE_LEN+4
	BISL3	R10,R7,(R2)+		; Set virtual address of self
	ASSUME	PQB_L_BDT_BASE EQ PQB_L_VPQB_BASE+4
	BISL3	R10,R6,(R2)+		; Address of BDT
	ROTL	#16,#1,(R6)		; Set the valid bit
	ASSUME	PQB_L_BDT_LEN EQ PQB_L_BDT_BASE+4
	INCL	(R2)+			; Num of entries in BDT
	ASSUME	PQB_L_SPT_BASE EQ PQB_L_BDT_LEN+4
	MOVL	R5,(R2)+		; Set phys addr of page table
	ASSUME	PQB_L_SPT_LEN EQ PQB_L_SPT_BASE+4
	MOVL	R1,(R2)+		; And length

;
; Now go thru the complicated startup sequence.
;

	MOVL	PA_CNF(R3),PA_CNF(R3)	; Clear any SBI errors
	MOVL	#PA_PMC_M_MIN,PA_PMC(R3); Do maint init
	MOVL	RPB$L_IOVEC(R9),R4	; Pick up address of IOVECTOR
	MOVL	BQO$L_UCODE(R4),R4	; Get address of ucode
	CLRL	R2			; Set control store address
70$:	MOVL	R2,PA_MADR(R3)		; Give CS to CI
	MOVL	(R4)+,PA_MDATR(R3)	; Write 4 bytes of ucode
	BISL3	#^X1000,R2,PA_MADR(R3)	; Set CS addr of h.o. word
	MOVZWL	(R4)+,PA_MDATR(R3)	; Write 2 bytes h.o.
	AOBLSS	#PA_C_WCSSIZ,R2,70$	; Loop until loaded
	BISL	#PA_PMC_M_PSA,PA_PMC(R3); Set program start addr
	MOVL	#PA_C_UCODEST,PA_MADR(R3); Set it
	MOVL	#PA_PIC_M_PIC,PA_PIC(R3); Start port
;
; Wait a while for port to do its thing.
;
	BSBW	START_TIMER		; Set up timer cell
80$:	BITL	#PA_PMC_M_MIF,PA_PMC(R3); Check the status register
	BNEQ	100$			; All done
	MFPR	#PR$_TODR, R1		; No, pick up time
	CMPL	R1,TAB_L_TIMER(R7)	; Are we past due time?
	BLSSU	80$			; No
90$:	BRW	ERROR			; *** ERROR ***

100$:	CMPL	#PA_PS_M_PIC,PA_PS(R3)	; Check we are done
	BNEQ	90$			; *** ERROR ***
	MOVL	R8,PA_PQBBR(R3)		; Set the physical addr of PQB
	BISL	#PA_PMC_M_MTD,PA_PMC(R3); Disable MST
	MOVL	#PA_PEC_M_PEC,PA_PEC(R3); Enable the port
	MOVL	#PA_PSR_M_PSC,PA_PSR(R3); Release the status register	
;
; Initialization complete. Shutdown all circuits except that of our
; remote port. Now send out a REQID to remote port.
;
	DECL	TAB_L_TIMER(R7)		; Init timer value
	MOVAL	TAB_PKT(R7),R2		; Set to cover DG ** TEMP **
	MOVL	#15,R5			; Set for max port
110$:	CMPB	R5,TAB_L_RSTAID(R7)	; Our remote port?
	BEQL	120$			; Yes, skip this
	MOVW	R5,PPD$B_PORT(R2)	; Set port number
	MOVW	#<PPD$M_RSP@8-
		 !PPD$C_SETCKT>,-
		  PPD$B_OPC(R2)		; Set to get it back
	MOVZWL	#PPD$M_DQI,-
		 PPD$W_MASK(R2)		; Inhibit receipt of datagram
	MOVL	PPD$W_MASK(R2),-
		 PPD$W_M_VAL(R2)	; Copy mask to value
	BSBW	SENDX			; Set the circuit
	BRB	LOOP			;  and wait for response

SETCKT:
120$:	SOBGEQ	R5,110$			; Loop thru them all
;
; Now give 4 of the 5 datagrams to the port to put on the free queue.
; By giving it 5 we can be assured that 2 should always be on the actual
; queue and not hidden away in internal caches.
;
	MOVL	#4,R5			; Keep one in reserve
130$:	BSBW	DISCARD			; Put it on free queue
	MOVAB	DG_SIZ(R2),R2		; Step to next one
	SOBGTR	R5,130$
;
; Now send out a REQID to the remote node to get the handshake started.
; This will also confirm that the other side is there
;
	MOVW	#PPD$C_REQID,-
		 PPD$B_OPC(R2)		; Request ID from target
	CLRQ	PPD$Q_XCT_ID(R2)
	BSBW	SEND			; Send it out and wait
;
;******************************************************************************
;
;		Wait loop and pseudo-interrupt handler
;	
;******************************************************************************
;
LOOP:
	BITL	#PA_PMC_M_MIF,PA_PMC(R3); Check the status register
	BNEQ	140$			; Okay, it sets
	MFPR	#PR$_TODR,R0		; Get curret time
	CMPL	R0,TAB_L_TIMER(R7)	; Check against time out value
	BGTRU	TIMOUT			; Past expiration
	BRB	LOOP			; Not yet, try some more

140$:	CMPL	PA_CNF(R3),#NDT$_CI	; Any config reg bits set except type?
	BEQL	150$			; No, okay
	MOVL	#<PA_CNF_M_CRD-
		 !PA_CNF_M_MXTFLT-
		 !PA_CNF_M_PARFLT-
		 !PA_CNF_M_URDFLT-
		 !PA_CNF_M_WSQFLT-
		 !PA_CNF_M_XMTFLT>,-
		 PA_CNF(R3)		; Clear 'don't care' bits
	CMPL	PA_CNF(R3),#NDT$_CI	; Try again
	BNEQ	160$			; *** ERROR ***
150$:	MOVL	PA_PS(R3),R1
	BITL	#^C<PA_PS_M_RQA!PA_PS_M_PIC>,R1	; Any bits but RQA or PIC?
	BEQL	170$			; No, okay
160$:	BRW	ERROR			; *** ERROR ***
;
; Remove the entry from the response queue.
;
170$:	MOVL	#PA_PSR_M_PSC,PA_PSR(R3); Release status register to port
	$QRETRY	REMQHI,PQB_Q_RESPQ(R7),-
		 R2,ERROR		; Get next response, addr in R2
	BVS	LOOP			; None

	BLBC	PPD$B_STATUS(R2),180$	; Check the status
	CMPB	PPD$B_STATUS(R2),#^XE1	; Packet lenght violation?
	BNEQ	160$			; No, something else
;
; Dispatch on opcode type.  The skip chain used here is very ugly but it
; is shorter than any other way to pick 5 items out of a list of 40.
;
180$:	CMPB	PPD$B_OPC(R2),-
		#PPD$C_SETCKT		; Is it a sent SETCKT?
	BNEQ	200$			; No, skip on
	TSTB	TAB_L_STATE(R7)		; Are we closed?
	BEQL	190$			; Yes, dispatch back
	BRW	310$			; No, dispatch forward
190$:	BRW	SETCKT

200$:	CMPB	PPD$B_PORT(R2),-	; Is this from our friend?
		 TAB_L_RSTAID(R7)
	BEQL	220$			; Yes accept it

210$:	BSBW	DISCARD			; No, get rid of it
	BRB	LOOP

220$:	CMPB	PPD$B_OPC(R2),-
		#PPD$C_SNDMSG		; Is it a sent message?
	BNEQ	230$
	BRW	MSG_SNT			; Yes, go deal with it
230$:	CMPB	PPD$B_OPC(R2),-
		#PPD$C_DGREC		; Is it a received datagram?
	BEQL	250$			; Yes
	BLSSU	210$			; Not anywhere close
	CMPB	PPD$B_OPC(R2),-
		#PPD$C_IDREC		; Is it a received ID
	BNEQ	240$			; Yes, fake a time out to start up
TIMOUT:	MOVL	#TIMEOUT,R0		; Timed out, set code
	BRB	260$			; Go figure out what to do

240$:	CMPB	PPD$B_OPC(R2),-
		#PPD$C_MSGREC		; Is it a received msg?
	BGTRU	210$			; No, ignore it
	BRW	SCS_MSG			; Yes, go process it

250$:	MOVZBL	PPD$W_MTYPE(R2),R0	; Pick up type
	CMPB	R0,#ST_RECV		; Is it a handshake DG?
	BGTR	210$			; No, ignore it
;
; Use the incoming DG type (or timeout) and the current state to index
; into the state table and determine next action to take.
;
260$:	MOVAL	@TAB_L_STATE(R7)[R0],R0	; Set up to index into
	MOVZBL	STATE_TABLE[R0],R0	;  the state table to get action offset
	MOVAB	ACTION_TABLE[R0],R5	; Point to start in action table
270$:	CVTBL	(R5)+,R0		; Pick up offset to routine
	BLSS	280$			; State change
	JSB	ROUT_TABLE[R0]		; Do the routine
	BRB	270$			; Try for more

280$:	BICB3	#192,R0,TAB_L_STATE(R7)	; Set new state
	BBS	#6,R0,290$		; We are finished
L:	BRW	LOOP			; Else go wait for new arrival
;
;******************************************************************************
;
;		End of wait loop and dispatcher
;
;******************************************************************************

SEND_MSG:
	MOVW	#PPD$C_SNDMSG,-
		 PPD$B_OPC(R2)		; Set opcode to send message
	BRB	SEND	

SEND_DG:MOVW	#PPD$C_SNDDG,-
		 PPD$B_OPC(R2)		; Set opcode to send datagram
SEND:	MOVW	TAB_L_RSTAID(R7),-
		 PPD$B_PORT(R2)		; Set in remote port/station id
SENDX:	$QRETRY	INSQTI,(R2),PQB_Q_CMDQ0(R7),ERROR
	MOVL	#PA_CQ0_M_CQC,PA_CQ0(R3); Tell port its there
	RSB
;
; Now the virtual circuit is establised.  Get a DG and open virtual circuit.
;
290$:	BSBW	ALLOC_DG		; Grab a spare DG
	MOVW	#<PPD$M_RSP@8!PPD$C_SETCKT>,-
		 PPD$B_OPC(R2)		; Set to get it back
	MOVZWL	#<PPD$M_CST!PPD$M_NR-
		 !PPD$M_NS!PPD$M_DQI>,-
		  PPD$W_MASK(R2)	; Open the virtual circuit
	MOVZWL	#PPD$M_CST,-
		 PPD$W_M_VAL(R2)	; Clear all but the circuit status
300$:	BSBB	SEND			; Set the circuit
	BRB	L			; Wait for response

310$:	MOVL	#1,PPD$W_SIZE(R2)	; Set software flag to be message
	BSBW	DISCARD			; Stick on message free queue
	BSBW	ALLOC_DG		; Grab another DG
	MOVQ	R2,-(SP)		; Save some registers
	MOVC3	#TEMPL_MSG_LEN,TEMPL_MSG,-
		 SCS$W_LENGTH(R2)	; Set up the CONNECT message
	MOVQ	(SP)+,R2		; Restore some registers
	MOVL	#1,PPD$W_SIZE(R2)	; Set software flag
320$:	BSBB	SEND_MSG		; Send the CONNECT and wait
	BRB	L

;
; Received a SCS message
;
SCS_MSG:CMPW	SCS$W_MTYPE(R2),-
		 #SCS$C_CON_RSP		; Is it a CONNECT response?
	BNEQ	330$			; No
	BSBW	DISCARD			; Get rid of it to free queue
	BRB	L			; Go wait for ACCEPT request

330$:	CMPW	SCS$W_MTYPE(R2),-
		 #SCS$C_ACCP_REQ	; Is it an ACCEPT request?
	BNEQ	340$			; No
	INCW	SCS$W_MTYPE(R2)		; Change to ACP_RSP
	MOVW	#SCS$C_ACCP_RSPL,-
		 SCS$W_LENGTH(R2)	; Set new length
	MOVW	#<PPD$M_RSP@8-
		 !PPD$C_SNDMSG>,-
		  PPD$B_OPC(R2)		; Set to get it back
	MOVW	#1,SCS$W_STATUS(R2)	; Set a success status
	MOVL	SCS$L_DST_CONID(R2),R0	; Reverse the SRC/DST connection ids
	MOVL	SCS$L_SRC_CONID(R2),-
		SCS$L_DST_CONID(R2)
	MOVL	R0,SCS$L_SRC_CONID(R2)
	MOVQ	SCS$L_DST_CONID(R2),-
		 TAB_L_RCONID(R7)	; Store them both for later use
	BRB	300$			; Send it out and wait

340$:	CMPW	SCS$W_MTYPE(R2),-
		 #SCS$C_APPL_MSG	; Is it an application message?
	BNEQ	ERROR			; No, ERROR
350$:	MOVL	R2,B^NXT_MSG		; Hold for later
	MOVL	R7,B^PQB_PTR
	TSTW	SCS$C_APPL_BASE+-
		 MSCP$W_STATUS(R2)	; Any drive errors?
	BNEQ	ERROR			; Yes
;
; Transfer is complete. Return with success status code.
;
	MOVZWL	#SS$_NORMAL,R0		; Set completion code
	RSB				; And return
;
; Error occured during transfer.  Return and retry.
;
ERROR:	MOVZWL	#SS$_CTRLERR,R0		; Set failure status
	RSB				; Return to BOOTDRIVR

;
; Now bring the device on-line
;
MSG_SNT: 
	MOVAL	SCS$C_APPL_BASE(R2),R5	; Set R5 to cover packet
	MOVL	#1,(R5)+		; Set command ref number
	MOVZBL	RPB$W_UNIT(R9),(R5)+	; Put unit number in cmd packet field
	MOVZBL	#MSCP$K_OP_ONLIN,(R5)+	; Set opcode to bring drive online
	CLRQ	(R5)+			; Clear byte count, buff desc
	CLRQ	(R5)			;  buff desc and LBN
	MOVW	#PPD$C_SCS_MSG,-	; Set PPD type to application
		 PPD$W_MTYPE(R2)	;  message
	MOVW	#SCS$C_APPL_MSG,-	; Set SCS type to application
		 SCS$W_MTYPE(R2)	;  message
	MOVW	#<SCS$C_APPL_BASE-PPD$C_LENGTH>+MSCP$K_LEN,-
		 SCS$W_LENGTH(R2)	; Set the message length
Q:	MOVW	#1,SCS$W_CREDIT(R2)	; Always give back one credit
	BRW	320$			; Send it out and wait
	.DISABLE LSB
PQB_PTR:.LONG	0
NXT_MSG:.LONG	0
	.page
	.SBTTL	CI port bootstrap driver QIO

;++
;
; Inputs:
;
;	R3	- base address of adapter's register space
;	R5	- lbn for current piece of transfer
;	R6	- contains 0
;	R8	- size of transfer in bytes
;	R9	- address of the RPB
;	R10	- starting address of transfer (byte offset in first
;		  page ORed with starting map register number)
;
;	FUNC(AP)- I/O operation (IO$_READLBLK or IO$_WRITELBLK only)
;	MODE(AP)- Address interpretation mode (0 = physical, 1 = virtual)
;
; Outputs:
;
;	R0 - status code
;		SS$_NORMAL	- successful transfer
;		SS$_CTRLERR	- fatal controller error
;
;	R3 - must be preserved
;
; NOTE:
;	This routine can be called with four combinations of mapping:
;
;	1) MODE(AP) = physical and PR$_MAPEN = physical.  This is the case
;		when being called from BOOTDRIVR.  We use the made up page
;		table that maps VA = PA for both the port and BDT page tables.
;
;	2) MODE(AP) = virtual and PR$_MAPEN = physical.  This is the case
;		when being called from SYSBOOT to read in SYS.EXE using
;		the real system page table.  We contiue to use the made up
;		page table for the port, but use the real system page table
;		for the BDT.
;
;	3) MODE(AP) = virtual and PR$_MAPEN = virtual.  This is the case
;		when being called from BUGCHECK to read in the non-resident
;		portion of the bugcheck code.  We use the real system page
;		table for both the port and the BDT.
;
;	4) MODE(AP) = physical and PR$_MAPEN = virtual.  This is the case
;		when being called from BUGCHECK to write out all of physical
;		memory from the descriptors in the RPB.  We use the real
;		system page table for the port, but make up a new pagetable
;		for the BDT.  This table is only a page long since the max
;		IOSIZE is 127 pages.  This table is created on the fly with
;		the first entry being the first PFN to be written out.
;--

FUNC = 16
MODE = 20

PA_DRIVER:				; UDA50 device driver.

;
; Translate the I/O function code into a device-dependent function
; code for this disk.
;

	MOVL	PQB_PTR,R7			; Cover the PQB etc
	MOVL	#4,TAB_L_STATE(R7)		; Show we are in message
	MOVL	NXT_MSG,R2			; Pick up message buffer
	MOVAL	SCS$C_APPL_BASE+MSCP$B_OPCODE(R2),R6	; Point into message
	MOVZBL	#MSCP$K_OP_READ,(R6)+		; Assume read
	CMPL	FUNC(AP),#IO$_WRITELBLK		; Check for write function
	BNEQ	10$				; No, do read
	MOVB	#MSCP$K_OP_WRITE,-4(R6)		; Set write function code
	ASSUME	MSCP$L_BYTE_CNT EQ MSCP$B_OPCODE+4
10$:	BICW3	#^C<VA$M_BYTE>,R10,R4		; Get the byte offset
	BISW3	#^X8000,R4,-
		 TAB_B_BDT+CIBD$W_FLAGS(R7) 	; Set the boff and valid
	MOVL	R8,TAB_B_BDT+CIBD$L_BLEN(R7)	; Set the byte count
	MOVL	R8,(R6)+			; Set the byte count
	EXTZV	#VA$V_VPN,#VA$S_VPN,R10,R4	; Pick up page table offset
	BISL3	#VA$M_SYSTEM,RPB$L_SVASPT(R9),R1; Virtual
	BLBS	MODE(AP),30$			; Pick correct page table
	MOVL	TAB_L_PAGETBL(R7),R1		; Physical
	MFPR	#PR$_MAPEN,R0			; Check the current addr mode
	BLBC	R0,30$				; Normal, skip out
	MOVAL	B^PPAGTBL,R1			; New page table
	ASHL	#-9,R8,R8			; Number of pages
	MOVL	R1,R0				; Copy start of table
20$:	BISL3	#<PTE$C_KW!PTE$M_VALID>,R4,(R0)+; Fake up a page table entry
	INCL	R4				; Next PFN
	SOBGTR	R8,20$				; Loop until done
	CLRL	R4				; Use start of fake table
30$:	MOVAL	(R1)[R4],-
		 TAB_B_BDT+CIBD$L_SVAPTE(R7)	; Set it in *** TEMP ***
	CLRL	(R6)+				; Set no offset in buffer
	ROTL	#16,#1,(R6)+			; BUffer name
	MOVL	TAB_L_RCONID(R7),(R6)+		; RCONID
	MOVL	R5,(R6)				; Set the logical block number
	MOVW	#<SCS$C_APPL_BASE-PPD$C_LENGTH>+MSCP$L_LBN+4,-
		 SCS$W_LENGTH(R2)		; Set the message length
	MOVQ	TAB_L_RCONID(R7),-
		 SCS$L_DST_CONID(R2)		; Set correct xct_id
	BRW	Q				; Send and wait
;
; Data area
;
	.=<.+3>&-4				; .ALIGN LONG
PPAGTBL:.BLKB	512
TABLE:	.BLKB	TAB_LEN+512

PA_DRVSIZ=.-START_DRV

	.END
