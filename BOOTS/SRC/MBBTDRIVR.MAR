	.TITLE	MBBTDRIVR - MASSBUS DISK BOOT DRIVER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	BOOTS
;
; ABSTRACT:
;	This module contains the bootstrap device driver for
;	MASSBUS disks.  It supports the RP04/5/6 and RM03/5/80.
;
; ENVIRONMENT:	IPL 31, kernel mode, code must be PIC
;
; AUTHOR:  Steve Beckhardt,	CREATION DATE:  31-Oct-1979
;	(Original authors:  Carol Peters and Charlie Franks)
;
; MODIFIED BY:
;
;	V02-004	KTA0041		Kerbey T. Altmann	10-Nov-1981
;		Recode drive test routine to loop on Medium-On-Line
;		bit thus allowing VMB to stall while drive spins up.
;
;	02-03	CAS0002		C.A. Samuelson		08-May-1980
;		Fix driver size calculation so entire driver is copied
;		into non-paged pool
;
;	02-02	CAS0001		C.A. Samuelson		30-Apr-1980
;		Change interface to BOOTDRIVR for UBA purge datapath
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BTDDEF				; Define boot device types
	$IODEF				; Define I/O function codes
	$MBADEF				; Define MASSBUS adapter registers
	$PRDEF				; Define processor registers
	$RPBDEF				; Define RPB offsets
	$SSDEF				; Define system status codes

;
; MACROS:
;

	.MACRO	MBADEV,TYPE,SPC,SPT	 
	.BYTE	TYPE			; MASSBUS DEVICE CODE
	.WORD	SPC			; SECTORS PER CYLINDER
	.BYTE	SPT			; SECTORS PER TRACK
	.ENDM	MBADEV			;

;
; EQUATED SYMBOLS:
;

;
; RP04/05/06 MASSBUS REGISTER OFFSETS
;
 
	$DEFINI	RP
 
$DEF	RP_CS1		.BLKL	1	;DRIVE CONTROL REGISTER
	_VIELD	RP_CS1,0,<-		; DRIVE CONTROL REGISTER BIT DEFINITIONS
		<GO,,M>,-		; GO BIT
		<FCODE,5>-		; FUNCTION CODE
	>				;
$DEF	RP_DS		.BLKL	1	;DRIVE STATUS REGISTER
	_VIELD	RP_DS,6,<-		; DRIVE STATUS REGISTER BIT DEFINITIONS
		<VV,,M>,-		; VOLUME VALID
		<DRY,,M>,-		; DRIVE READY
		<DPR,,M>,-		; DRIVE PRESENT
		<PGM,,M>,-		; PROGRAMMABLE
		<LST,,M>,-		; LAST SECTOR TRANSFERRED
		<WRL,,M>,-		; DRIVE WRITE LOCKED
		<MOL,,M>,-		; MEDIUM ONLINE
		<PIP,,M>,-		; POSITIONING IN PROGRESS
		<ERR,,M>,-		; COMPOSITE ERROR
		<ATA,,M>-		; ATTENTION ACTIVE
	>				;
$DEF	RP_ER1		.BLKL	1	;ERROR REGISTER 1
	_VIELD	RP_ER1,0,<-		; ERROR REGISTER 1 BIT DEFINITIONS
		<ILF,,M>,-		; ILLEGAL FUNCTION
		<ILR,,M>,-		; ILLEGAL REGISTER
		<RMR,,M>,-		; REGISTER MODIFY REFUSED
		<PAR,,M>,-		; PARITY ERROR
		<FER,,M>,-		; FORMAT ERROR
		<WCF,,M>,-		; WRITE CLOCK FAIL
		<ECH,,M>,-		; ECC HARD ERROR
		<HCE,,M>,-		; HEADER COMPARE ERROR
		<HCRC,,M>,-		; HEADER CRC ERROR
		<AOE,,M>,-		; ADDRESS OVERFLOW ERROR
		<IAE,,M>,-		; ILLEGAL ADDRESS ERROR
		<WLE,,M>,-		; WRITE LOCK ERROR
		<DTE,,M>,-		; DRIVE TIMING ERROR
		<OPI,,M>,-		; OPERATION INCOMPLETE
		<UNS,,M>,-		; DRIVE UNSAFE
		<DCK,,M>-		; DATA CHECK ERROR
	>				;
$DEF	RP_MR		.BLKL	1	;MAINTENANCE REGISTER
$DEF	RP_AS		.BLKL	1	;ATTENTION SUMMARY REGISTER
$DEF	RP_DA		.BLKL	1	;DESIRED SECTOR/TRACK ADDRESS REGISTER
	_VIELD	RP_DA,0,<-		; DESIRED ADDRESS FIELD DEFINITIONS
		<SA,5>,-		; DESIRED SECTOR ADDRESS
		<,3>,-			; RESERVED BITS
		<TA,5>-			; DESIRED TRACK ADDRESS
	>				;
$DEF	RP_DT		.BLKL	1	;DRIVE TYPE REGISTER
	_VIELD	RP_DT,0,<-		; DRIVE TYPE REGISTER FIELD DEFINITIONS
		<DTN,9>,-		; DRIVE TYPE NUMBER
		<,2>,-			; RESERVED BITS
		<DRQ,,M>-		; DRIVE REQUEST REQUIRED
	>				;
$DEF	RP_LA		.BLKL	1	;LOOKAHEAD REGISTER
$DEF	RP_ER2		.BLKL	1	;ERROR REGISTER 2
$DEF	RP_OF		.BLKL	1	;OFFSET REGISTER
	_VIELD	RP_OF,0,<-		; OFFSET REGISTER BIT DEFINITIONS
		<OFF,8>,-		; OFFSET VALUE
		<DCK,,M>,-		; DATA CHECK IN PROGRESS (SOFTWARE)
		<,1>,-			; RESERVED BIT
		<HCI,,M>,-		; HEADER COMPARE INHIBIT
		<ECI,,M>,-		; ECC INHIBIT
		<FMT,,M>-		; 16-BIT FORMAT
	>				;
$DEF	RP_DC		.BLKL	1	;DESIRED CYLINDER ADDRESS
$DEF	RP_CC		.BLKL	1	;CURRENT CYLINDER ADDRESS
$DEF	RP_SN		.BLKL	1	;DRIVE SERIAL NUMBER
$DEF	RP_ER3		.BLKL	1	;ERROR REGISTER 3
	_VIELD	RP_ER3,14,<-		; ERROR REGISTER 3 BIT DEFINITIONS
		<SKI,,M>-		; SEEK INCOMPLETE
	>				;
$DEF	RP_EC1		.BLKL	1	;ECC POSITION REGISTER
	_VIELD	RP_EC1,0,<<POS,13>>	; ECC POSITION FIELD
$DEF	RP_EC2		.BLKL	1	;ECC PATTERN REGISTER
	_VIELD	RP_EC2,0,<<PAT,11>>	; ECC PATTERN FIELD
 
	$DEFEND	RP

; 
; RM80 ADDITIONAL MASSBUS REGISTER BIT DEFINITIONS
; 

RM_OF_M_SSEI	= ^X200			; SKIP SECTOR ERROR INHIBIT (RP_ER3)
RM_ER2_M_SSE	= ^X20			; SKIP SECTOR ERROR (RP_OF)
RM_ER2_V_SSE	= 5			; ...

;
; OWN STORAGE:
;

;
; BOOT DRIVER TABLE ENTRY
;

	$BOOT_DRIVER	DEVTYPE = BTD$K_MB,-	; Device type (MASSBUS)
			SIZE = MBA_DRVSIZ,-	; Driver size
			ADDR = DRIVERNAME,-	; Driver address
			ENTRY = MBA_DISK_DRIVER,- ; Entry point
			DRIVRNAME = DRIVERNAME	; Driver name


DRIVERNAME:				; Boot device driver name
	.ASCIC	/DRDRIVER.EXE/		; Assume DRDRIVER


;
;	GEOMETRY TABLE FOR MASSBUS DISKS
;

	.SHOW	BINARY			; Show MACRO expansions.

MBAGEOM:				;
	MBADEV	<^X10>,<22*19>,22	; RP04
	MBADEV	<^X11>,<22*19>,22	; RP05
	MBADEV	<^X12>,<22*19>,22	; RP06
	MBADEV	<^X14>,<5*32>,32	; RM03
	MBADEV	<^X16>,<14*31>,31	; RM80
	MBADEV	<^X17>,<19*32>,32	; RM05
	MBADEV	<^X22>,<50*32>,50	; RP07 (W/O HEAD PER TRACK)
	MBADEV	<^X21>,<50*32>,50	; RP07 (WITH HEAD PER TRACK OPTION)
	.BYTE	0			; TERMINATE LIST

	.SBTTL	RM03/5/80, RP04/5/6/7 Bootstrap driver code

;++
;
; Inputs:
;
;	R3	- base address of adapter's register space
;	R5	- LBN for current piece of transfer
;	R6	- contains 0
;	R8	- size of transfer in bytes
;	R9	- address of the RPB
;	R10	- starting address of transfer (byte offset in first
;		  page ORed with starting map register number)
;	R11	- Block number at start of transfer
;
;	FUNC(AP)- I/O operation (IO$_READLBLK or IO$_WRITELBLK only)
;	MODE(AP)- Address interpretation mode (0 = physical, 1 = virtual)
;	SIZE(AP)- Size of buffer in bytes
;	BUF(AP) - Address of buffer
;
; Implicit inputs:
;
;	RPB$W_UNIT	- RPB field containing boot device unit number
;
;	MBAGEOM		- a table describe the geometries of the
;			  MASSBUS disks
;
; Outputs:
;
;	R0 - status code
;
;		SS$_NORMAL	- successful transfer
;		SS$_NOSUCHDEV	- unsupported device
;		SS$_CTRLERR	- fatal controller error on transfer
;
;	This routine destroys R1, R5, R6, and R7. Within the routine,
;	register usage is as follows:
;
;		R0	- drive type from the geometry table
;			  MASSBUS device function code
;			  status code
;		R1	- address of an entry in the MBA geometry table
;		R5	- used in logical to physical calculation
;		R6	- drive type according to device register
;			  used in logical to physical calculation
;		R7	- address of the 1st MBA external register for
;			  this unit on the MBA
;
;--

BUF = 4
SIZE = 8
LBN = 12
FUNC = 16
MODE = 20

MBA_DISK_DRIVER:			; RM03/5/80, RP04/5/6/7 Boot driver.
	MOVZWL	RPB$W_UNIT(R9),R7	; GET UNIT NUMBER OF BOOT DEVICE
	ASHL	#7,R7,R7		; ALIGN TO UNIT NUMBER FIELD
	MOVAB	MBA$L_ERB(R3)[R7],R7	; FORM ADDRESS OF DRIVE REGISTERS
;
; NOTE: The following test works because the MBA OR's the upper 16 bits of
;	the MBA register SR and the lower 16 bits of the driver status
;	register to make up the 32 bits sensed on a longword access.
;
	BITL	#MBA$M_SR_NED,RP_DS(R7) ; DOES DRIVE EXIST?
	BEQL	10$			; YES, CONTINUE
	BRW	NOSUCHDEV		; NO, ERROR

;
; Check to see that Medium-On-Line is set. If not, spin until it is.
;

10$:	BITL	#RP_DS_M_MOL,RP_DS(R7)	; IS MEDIUM ON LINE?
	BEQL	10$			; NO, SPIN UNTIL IT IS
	MOVL	#<9*2>+1,RP_CS1(R7)	; SET VOLUME VALID
15$:	MOVL	RP_DT(R7),R6		; GET DRIVE TYPE
	CMPB	R6,#^X12		; IS IT RP04/5/6?
	BGTRU	17$			; NO
	MOVW	#^A/DB/,DRIVERNAME+1	; YES, CHANGE DRIVERNAME
17$:	MOVAB	MBAGEOM-3,R1		; POINT TO START OF GEOMETRY TABLE
20$:	ADDL	#3,R1			; ADVANCE TO NEXT TYPE CODE
	MOVB	(R1)+,R0		; GET TYPE CODE
	BNEQ	30$			; IF NEQ, LEGAL TYPE FOUND - CONTINUE
	BRW	NOSUCHDEV		; TYPE NOT FOUND, UNSUPPORTED DEVICE
30$:	CMPB	R6,R0			; CHECK FOR MATCH
	BNEQ	20$			; NO, TRY ANOTHER
	MOVZWL	#RP_OF_M_FMT,RP_OF(R7)	; SELECT 16 BIT FORMAT

; 
; Convert LBN to physical device address. Start the transfer.
; 

	CLRL	R6			; CLEAR HIGH ORDER BITS OF DISK ADDRESS
	MOVZWL	(R1)+,R0		; GET SECTORS PER CYLINDER
	EDIV	R0,R5,RP_DC(R7),R5	; CALCULATE AND SET CYLINDER ADDRESS
	MOVZBL	(R1)+,R0		; GET SECTORS PER TRACK
	EDIV	R0,R5,R5,R6		; CALCULATE SECTOR AND TRACK ADDRESS
MBCOMMON:				;
	INSV	R5,#8,#8,R6		; MERGE SECTOR AND TRACK ADDRESS
	MOVL	R6,RP_DA(R7)		; SET DESIRED SECTOR AND TRACK ADDRESS
	MNEGL	R8,MBA$L_BCR(R3)	; SET TRANSFER BYTE COUNT
	MOVL	R10,MBA$L_VAR(R3)	; AND SET AS VIRTUAL STARTING ADDRESS
	MOVL	#<28*2>+1,R0		; ASSUME READ
	CMPL	FUNC(AP),#IO$_WRITELBLK	; IS FUNCTION WRITE?
	BNEQ	10$			; NO, THEN READ
	MOVL	#<24*2>+1,R0		; SET WRITE FUNCTION
10$:	MOVL	R0,RP_CS1(R7)		; START TRANSFER

; 
; Loop until the transfer completes.
; 

20$:	TSTL	MBA$L_SR(R3)		; DATA TRANSFER BUSY?
	BLSS	20$			; IF LSS YES

; 
; If the boot device is an RM80, check for a skip sector error.
; 

	MOVL	RP_DT(R7),R6		; GET DEVICE TYPE
	CMPB	#^X16,R6		; IS BOOT DEVICE = RM80?
	BNEQ	30$			; IF NEQ, NO
	BITL	#RM_ER2_M_SSE,RP_ER3(R7)  ; SKIP SECTOR ERROR?
	BEQL	30$			; IF EQL, NO
	BRW	SSERROR			; SKIP SECTOR ERROR

; 
; See if the transfer was a success.
; 

30$:	MOVL	#SS$_NORMAL,R0		; ASSUME NORMAL
	BITL	#MBA$M_ERROR,MBA$L_SR(R3) ;ANY CONTROLLER ERRORS?
	BEQL	RETURN			; IF EQL NO

;
; An error occurred in the transfer. Prepare 4 input registers and call
; the ECC correction routine.
;

	MOVL	RP_ER1(R7),R0		; GET ERROR STATUS
	MOVL	MBA$L_BCR(R3),R1	; AND BYTE COUNT REMAINING
	CVTWL	R1,R1			; EXTEND SIGN
	MOVL	RP_EC1(R7),R5		; GET ECC POSITION
	MOVL	RP_EC2(R7),R6		; AND PATTERN
	BRW	ECC			; ATTEMPT ECC CORRECTION

;
; The specified boot device unit does not exist, or it is of an
; unsupported drive type.
;

NOSUCHDEV:				; UNSUPPORTED DEVICE
	MOVZWL	#SS$_NOSUCHDEV,R0	; SET ERROR CODE

RETURN:
	RSB				; AND RETURN

	.SBTTL	ECC - PERFORM ECC ERROR CORRECTION

;++
;
; Functional description:
;
;	ATTEMPT ECC ERROR CORRECTION
;
; INPUTS:
;
;	R0	- RP_ER1	ERROR STATUS REGISTER
;	R1	- NEGATIVE BYTE COUNT REMAINING
;	R5	- ECC POSITION
;	R6	- ECC PATTERN
;	R8	- BYTE COUNT REMAINING AT START OF LAST TRANSFER
;	R10	- starting address of transfer
;	R11	- BLOCK NUMBER AT START OF TRANSFER
;
; Outputs:
;
;--

ECC:					; ATTEMPT ECC CORRECTION

;
; Don't attempt an ECC correction if any of the following conditions apply:
;
;	the error was not a data check
;	the error was a hard ECC error
;	the transfer mode does not match the map-enabled position, i.e.,
;		transfer is virtual, and mapping is not enabled, or v.v.
;	no bytes have been transferred yet
;

	BBC	#RP_ER1_V_DCK,R0,RETRY	; NOT DATA CHECK, RETRY
	BBS	#RP_ER1_V_ECH,R0,RETRY	; HARD ECC ERROR, RETRY
	MFPR	#PR$_MAPEN,R0		; GET MAP ENABLE STATE
	CMPL	R0,MODE(AP)		; SAME AS I/O MODE
	BNEQ	RETRY			; NO, CANT DO SIMPLE ECC
	ADDL	R8,R1			; COMPUTE BYTES TRANSFERRED
	BEQL	RETRY			; NONE, RETRY

;
; Appears to be a correctable data check. Attempt the correction.
;

	ASHL	#-9,R1,R0		; CONVERT TO PAGE COUNT
	ADDL	R0,R11			; UPDATE BLOCK NUMBER
	ADDL	R1,R10			; UPDATE BYTE ADDRESS
	SUBL	R1,R8			; DECREASE BYTES REMAINING
	DECL	R5			; MAKE POSITION 1 ORIGIN
	MOVAB	512(R8),R0		; REMAINING BYTES AT START OF BAD SECTOR
	SUBL3	R0,SIZE(AP),R2		; BYTES TRANSFERRED AT START OF ERROR SECTOR
	MULL	#8,R0			; CONVERT BYTE COUNT TO BIT COUNT
	SUBL	R5,R0			; COMPUTE CORRECTION FIELD WIDTH
	BLEQ	20$			; BR IF NO CORRECTION NEEDED
	CMPL	R0,#RP_EC1_S_POS 	; MINIMUM OF 13 AND BUFFER REMAINING
	BLEQ	10$			; KEEP MINIMUM VALUE
	MOVL	#RP_EC1_S_POS,R0	; LIMIT FIELD TO RP_EC1_S_POS BITS
10$:	EXTZV	R5,R0,@BUF(AP)[R2],R1	; GET FIELD TO BE CORRECTED
	XORL	R6,R1			; APPLY CORRECTION CODE
	INSV	R1,R5,R0,@BUF(AP)[R2]	; AND STORE IN BUFFER

;
; If the transfer is not complete, branch back to retry it.
;

20$:	TSTL	R8			; CHECK FOR COUNT REMAINING
	BLEQ	30$			; NONE, EXIT
	MOVL	R11,R5			; GET WORKING COPY OF LBN
	BRW	MBA_DISK_DRIVER		; CONTINUE TRANSFER

;
; Transfer is complete. Return with success status code.
;

30$:	MOVZWL	#SS$_NORMAL,R0		; SET COMPLETION CODE
	RSB				; AND RETURN

;
; No ECC correction was possible.  Return and retry.
;

RETRY:
	MOVZWL	#SS$_CTRLERR,R0		; SET FAILURE
	RSB				; RETURN

	.SBTTL	SSERROR - RM80 SKIP SECTOR ERROR ROUTINE

;++
; FUNCTIONAL DESCRIPTION:
; 
; 	SSERROR is entered if an RM80 boot device encounters a skip
; 	sector error (SSE).  SSE's are inhibited for the remainder of
; 	the current track, transfer parameters are updated to the last
; 	successful sector, and the sector address is incremented to skip
; 	the error sector.  The transfer is the allowed to continue.
; 
; 	Note:	The first bad spot on each track of an RM80 is marked at
; 		manufacturing time as a "skipped sector", and causes an
; 		SSE.  Data for the remaining sectors on that track are
; 		incremented by one physical sector, the last (31st) sector
; 		mapping into a 32nd sector reserved for this use.
; 
; INPUTS:
; 
; 	R3	- base address of the adapter's register space
; 	R7	- address of the first external MBA register for this unit
; 	R8	- byte count remaining at start of last transfer
; 	R10	- starting address of transfer
; 	R11	- updated block number (LBN)
; 
; OUTPUTS:
; 
; 	Skip sector error is cleared in the error register (RP_ER3).
; 	Skip sector error inhibit is set in the offset register (RP_OF).
; 	R5	- current track address
; 	R6	- sector address incremented past skipped sector
; 	R8	- updated byte count remaining to transfer
; 	R10	- updated starting address
; 	R11	- updated block number (LBN)
; 
;--

SSERROR:				; RM80 SKIP SECTOR ERROR ROUTINE
	BISL	#RM_OF_M_SSEI,RP_OF(R7)	; Set skip sector error inhibit
	MOVL	#<4*2>+1,RP_CS1(R7)	; Clear drive errors

; 
; Update transfer parameters
; 

	MOVL	MBA$L_BCR(R3),R1	; Get negative bytes remaining
	CVTWL	R1,R1			; Extend sign
	BNEQ	10$			; If NEQ, partial transfer
	MOVL	#-1,R1			; Force a partial transfer
10$:	ADDL	R8,R1			; Calculate bytes transferred
	BICW	#^X1FF,R1		; Truncate start of sector
	ASHL	#-9,R1,R0		; Convert to page count
	ADDL	R0,R11			; Update LBN
	ADDL	R1,R10			; Update starting address
	SUBL	R1,R8			; Decrease bytes remaining

; 
; Convert updated LBN to physical device address.
; Increment past skipped sector and re-start.
; 

	MOVL	R11,R5			; Get working copy of LBN
	CLRL	R6			; Clear high order bits of disk address
	MOVZWL	#<14*31>,R0		; Get sectors per cylinder
	EDIV	R0,R5,RP_DC(R7),R5	; Calculate and set cylinder address
	MOVZBL	#31,R0			; Get sectors per track
	EDIV	R0,R5,R5,R6		; Calculate R5=track R6=sector
	INCB	R6			; Increment sector address

	BRW	MBCOMMON		; Restart the function

MBA_DRVSIZ=.-DRIVERNAME

	.END
