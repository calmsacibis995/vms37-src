	.TITLE	CONIO - CONSOLE INPUT OUTPUT ROUTINES
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Facility:  System Bootstrapping
;
; Abstract: CONIO provides basic console read,readprompt and write facilities.
;
; Environment: Mode=Kernel
;
; Author:  RICHARD I. HUSTVEDT, Creation date:  27-APR-1978
;
; Modified by:
;
;	V02-004	TCM0002		Trudy C. Matthews	10-Aug-1981
;		Remember to strip parity bit when checking for XON/XOFF.
;
;	V02-003	PHL0011		Peter H. Lipman		19-Jun-1981
;		Change PSECT to place this code before the drivers.
;		This allows the read of the secondary boot to start
;		at the end of the bootdriver, overwriting all sorts
;		of now useless VMB code, but preserving the ability
;		to report an I/O error.
;
;	V02-002	TCM0001		Trudy C. Matthews	14-May-1981
;		Add XON/XOFF recognition during terminal output.
;
;--

;
; Include files:
;
	$PRDEF				; Define processor registers
	$SSDEF				; Define status code values

;
; MACROS:
;

;
; Equated Symbols:
;
;
	CR     = 13			; Character code for carriage return
	LF     = 10			; Character code for line feed
	CONTROL_U = 21			; Character code for control-U
	CONTROL_S = 19
	CONTROL_Q = 17
	RUBOUT = 127			; Character code for rubout
	V_RUB  = 0			; Rubout sequence in progress
 
;
; Own Storage:
;
	.PSECT	$CONIO,BYTE		;
	.PAGE
	.SBTTL	BOO$READPROMPT - Prompt and read input string
;++
; Functional Description:
;	BOO$READPROMPT outputs the specified ASCIZ prompt string on the
;	console terminal then checks the count of characters to be read.
;	If zero it exits, otherwise it reads the console terminal until
;	either a carriage return is encountered or the character count
;	is satisfied.  The specified buffer is filled with an ASCIC
;	string containing the characters read but not including the
;	terminating carriage return.
;
; Calling Sequence:
;	CALLG	ARGLIST,BOO$READPROMPT
;
; Input Parameters:
;	PROMPT(AP)  -  Address of ASCIZ prompt string
	PROMPT	=  4
;
;	SIZE(AP)    -  Maximum length of input string
	SIZE	=  8
;			Note: if size is zero, then nothing is read
;			      and only the prompt string is written.
;
;	BUF(AP)     -  Address of input buffer
	BUF	=  12
;
; Output Parameters:
;	R0 - Completion status code (always SS$_NORMAL)
;
;	Buffer located by BUF(AP) will be filled with the string
;	read as an ASCIC string.
;
;--
	.LIST	MEB			; Show macro expansions
BOO$READPROMPT::			;
	.WORD	^M<R2,R4,R7,R8,R9>	;
5$:	MOVL	PROMPT(AP),R8		; Point to prompt string
	BSBW	OUTZSTR			; And send it to the console
	MOVL	SIZE(AP),R2		; Maximum number of characters to read
	BEQL	70$			; Done if nothing to read
	CLRL	R4			; Clear flags
	MOVL	BUF(AP),R9		; Set address of input buffer
	CLRB	(R9)+			; Initialize string count
	MOVAB	(R9),R7			; Remember start of buffer
	SOBGTR	R2,10$			; Decrement and test character count
	MOVZBL	#CR,R0			; Set to send CR/LF
	BSBB	OUTCHAR			; Send CR
	BRB	60$			; End of read
10$:	MFPR	#PR$_RXCS,R0		; Get console status
	BBC	#7,R0,10$		; Wait for ready
	MFPR	#PR$_RXDB,R8		; Get console character
	BICB	#^X80,R8		; Strip parity
	CMPB	R8,#RUBOUT		; Check for rubout
	BNEQ	40$			; No
	BBSS	#V_RUB,R4,20$		; Set start of rubout sequence
	BSBB	OUTBSLSH		; Output back slash
20$:	MOVZBL	-(R9),R8		; Get rubbed out character
	BNEQ	30$			; Skip increment
	INCL	R9			; Point at start of buffer
	MOVL	SIZE(AP),R2		; Restore size limit
	BRB	10$			; And get another character
30$:	BSBB	OUTR8			; Output rubbed out character
	DECL	R2			; One less character
	BRB	10$			; And get another
	BBCC	#V_RUB,R4,40$		; Terminate rubout sequence
	BSBB	OUTBSLSH		; Output backslash
40$:	CMPB	#CONTROL_U,R8		; Check for line cancel (control-U)
	BEQL	5$			; Branch if so
	BBC	#6,R8,50$		; Branch if not alpha
	BICB	#32,R8			; Set to upper case
50$:					;
	BSBB	OUTR8			; Echo character
	MOVB	R8,(R9)+		; Buffer new character
	CMPB	#CR,R8			; Is character a carriage return?
	BNEQ	10$			; No,
60$:	MOVZBL	#LF,R0			; Yes send line feed also
	BSBB	OUTCHAR			; Output character in R0
	SUBL	R7,R9			; Compute character count
	DECL	R9			; Remove carriage return
	MOVB	R9,-(R7)		; and form counted string
70$:	MOVZWL	#SS$_NORMAL,R0		; Return normal completion status
	RET				;
OUTBSLSH:				; Output back slash
	MOVZBL	#^A%\%,R0		; Set character code
	BRB	OUTCHAR			; And output it
OUTR8:	MOVZBL	R8,R0			; Get character to output
OUTCHAR:				; Output character in R0
	MFPR	#PR$_RXCS,R1		; Have any characters been input?
	BBS	#7,R1,TEST_INPUT	; Branch if input character received.
OUT:
	MFPR	#PR$_TXCS,R1		; Get console transmitter status
	BBC	#7,R1,OUTCHAR		; Wait for ready
	MTPR	R0,#PR$_TXDB		; Send character to console
OUTEX:	RSB				; Return
;
; Received an input character while output was taking place.  Check to see
; if it was an XOFF (Control-S) character.
;
TEST_INPUT:
	MFPR	#PR$_RXDB,R1		; Get the character.
	CMPZV	#0,#7,R1,#CONTROL_S	; Is it a Control-S?
	BNEQ	OUT			; If not, branch to output.
;
; Received an XOFF (Control-S) character.  Wait until receiving an XON
; before continuing.  Throw away any input characters that arrive before
; the XON (Control-Q).
;
10$:
	MFPR	#PR$_RXCS,R1		; Have we received a character?
	BBC	#7,R1,10$		; No, wait until we have.
	MFPR	#PR$_RXDB,R1		; Get the input character.
	CMPZV	#0,#7,R1,#CONTROL_Q	; Is it a Control-Q?
	BNEQ	10$			; No, wait for another character.
	BRB	OUT			; Got it!  Now continue output.
OUTZSTR:				; Output ASCIZ string
	MOVZBL	(R8)+,R0		; Get next character to output
	BEQL	OUTEX			; Branch if at end of string
	BSBB	OUTCHAR			; Send character
	BRB	OUTZSTR			; Continue for all characters

	.END				;
