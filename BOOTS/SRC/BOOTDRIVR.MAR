	.TITLE	BOOTDRIVR DISPATCHER FOR BOOTSTRAP I/O DRIVERS
	.IDENT	'V03-022'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
;  FACILITY:
;
;	Minimal bootstrap driver for all VMS system disks.
;
; ENVIRONMENT:
;
;	Runs at IPL 31, kernel mode, memory management may be on or off,
;	IS=1 (running on interrupt stack), code must be PIC.
;
; ABSTRACT:
;
;	This module contains a routine called BOO$QIO that handles I/O
;	transfers to and from the VMS system disks.
;
; AUTHOR:
;
;	The VMS group
;
; REVISION HISTORY:
;
;	V03-022	KTA0092		Kerbey T. Altmann	02-Apr-1982
;		Bump the version number because of KTA0090.
;
;	V02-021	KTA0090		Kerbey T. Altmann	26-Mar-1982
;		Add new cell to IOVEC to contain address of microcode
;		required by a booting device.
;
;	V02-020	KTA0049		Kerbey T. Altmann	21-Nov-1981
;		Add support for disabled UNIBUS map registers.  Also make
;		the use of Buff Data Path optional (UDA needs this).
;		Remove local definition of CPUDISP macro.
;
;	V02-019	KTA0036		Kerbey T. Altmann	06-Oct-1981
;		Removed the moving of the bootdriver from BOO$SELECT and
;		put it in a new routine: BOO$MOVE; also added a new
;		entry point: UNIT_INIT and a new pointer to an auxiliary
;		port driver name for drivers. Incr VMB VERSION.
;
;	0218	TCM0001		Trudy C. Matthews	8-May-1981
;		Increment VMB version number to indicate that VMB now
;		passes the nexus-device type of the boot adapter in
;		RPB$B_BOOTNDT field in the RPB.
;
;	0217	PHL0007		Peter H. Lipman		20-Mar-1981
;		Increment VMB version number to reflect FILEREAD
;		cacheing and passing an argument list in AP
;
;	0216	CAS0001		C.A. Samuelson		30-Apr-1980
;		Add Purge of Buffered Datapath for UBA boot drivers
;
;	0215	TMH0001		Tim Halvorsen		10-Mar-1980
;		Mask off upper bits of PTE when constructing map register.
;
;	0214	KDM0092		Kathleen D. Morse	23-Jan-1980	16:40
;		Change VMB version number from 2 to 3.
;
;	00213	SRB0005		Steve Beckhardt		27-Nov-1979	16:10
;		Added code to support passing driver name from
;		boot driver to SYSBOOT.  Also added version # vector.
;	0212	SRB0004		Steve Beckhardt		31-Oct-1979	10:45
;		Moved all drivers into separate modules.  Added code
;		for connecting only the necessary driver.
;	0211	SRB0003		Steve Beckhardt		25-Oct-1979	16:40
;		Added console TU58 driver.
; 	0210	CHF0001		Charlie Franks		23-Sep-1979	15:50
; 		Added code and definitions to support RM80 bootable
; 		system, includes: SSE and SSEI bit definitions, additions
; 		to the MBAGEOM table and the MBA_DISK_DRUVER routine, and
; 		the SSERROR skip sector routine.
; 		Corrected byte count remaining update after encountering
; 		a transfer error in MBA_DISK_DRIVER (convert MBA$L_BCR from
; 		word to longword).  
; 	0209	SRB0002		Steve Beckhardt		13-Sep-1979	16:50
; 		Added symbol EXE$GB_CPUTYPE (removed from module VMB)
; 		so that it gets loaded into non-paged pool with the
; 		boot driver.
;	0208	SRB0001		Steve Beckhardt		27-Aug-1979	10:30
;		Added boot device definitions ($BTDDEF).  Fixed CPUDISP
;		macro.  Added support for booting from console block
;		storage device.  Added 11/780 console floppy driver.
;		Changed boot value of R0 when booting from RL01/2 from
;		0 to 2.
;	0207	CHP0006		C. Peters		23-Jul-1979	16:16
;		Correct calculation of number of map registers needed.
;		Always invalidate one past the number required.
;	0206	CHP0005		C. Peters		20-Jul-1979	12:14
;		Add geometry of RM05 to MBAGEOM table.
;	0205	CHP0004		C. Peters		06-Jul-1979	14:06
;		Recode RK06/7 drive initialization code to correct bug
;		in RK07 handling.
;	0204	CHP0003		C. Peters		24-May-1979	14:24
;		Only invalidate the last UBA map register if the
;		transfer was page-aligned. Remove all code relating
;		to COMET-specific UBA map register format. All UBA
;		map registers are now alike. Delete definition of
;		storage for CPU_TYPE. Use instead a global symbol
;		EXE$GB_CPUTYPE initialized by VMB to hold the CPU
;		identification code.
;	0203	CHP0002		C. Peters		11-May-1979	13:20
;		Add code to invalidate the last UBA map register to stop
;		a wild transfer. This code is CPU-specific.
;	0202	CHP0001		C. Peters		23-Mar-1979	8:48
;		Fill out module header. Add CPUDISP macro. Add local
;		symbol CPU_TYPE for CPUDISP's use. Add many comments.
;		Extract processor type from PR$_SID and store in local
;		CPU_TYPE. Find adapter type from CONFREG, and store in
;		general register. Initialize map registers in a CPU-
;		and adapter-dependent way. Determine which driver to
;		use based on adapter and device type. Add routine
;		header comments to MBA and RK06/7 driver code. Derive
;		device CSR address in RK06/7 driver from PR$_MAPEN
;		value used as index into RPB. Add routine header
;		comments to ECC routine. Replace .PAGEs with form feeds.
;		Add code and definitions to support RL02 bootable
;		system: includes $RLDEF, a test for the RL02 device
;		type, and the minimal RL02 driver code (written by C.
;		Franks).
;
;--

	.SBTTL	Declarations

;
; MACRO LIBRARY CALLS
;
 
	$BQODEF				; Define boot qio offsets
	$BTDDEF				; Define boot device types
	$IODEF				; DEFINE I/O FUNCTION CODES
	$MBADEF				; DEFINE MASSBUS ADAPTER REGISTERS
	$NDTDEF				; NEXUS device types
	$PRDEF				; DEFINE PROCESSOR REGISTERS
	$PTEDEF				; DEFINE PAGE TABLE ENTRY FIELDS
	$RPBDEF				; DEFINE RESTART PARAMETER BLOCK
	$SSDEF				; DEFINE STATUS CODES
	$UBADEF				; UNIBUS ADAPTER REGISTER DEFINITIONS
	$UBIDEF				; 11/750 UNIBUS adapter regs.
	$VADEF				; DEFINE VIRTUAL ADDRESS FIELDS
 
;
; MACROS
;

;
; LOCAL SYMBOLS
;

	$DEFINI	BDT			; Define Boot Driver Table offsets

$DEF	BDT$L_CPUTYPE	.BLKW	1	;  CPU type
$DEF	BDT$L_DEVTYPE	.BLKW	1	;  Boot R0 device type
$DEF	BDT$L_ACTION	.BLKL	1	;  Action routine
$DEF	BDT$L_SIZE	.BLKL	1	;  Driver size
$DEF	BDT$L_ADDR	.BLKL	1	;  Driver address (offset)
$DEF	BDT$L_ENTRY	.BLKL	1	;  Driver entry (offset from address)
$DEF	BDT$L_DRIVRNAME	.BLKL	1	;  Driver name (offset from address)
$DEF	BDT$L_AUXDRNAME	.BLKL	1	;  Auxiliary driver name (offset)
$DEF	BDT$L_UNIT_INIT	.BLKL	1	;  Driver unit init (offset from address)

BDT$K_LENGTH=.				;  Length of entry

	$DEFEND	BDT			; End of Boot Driver Table definitions

	.SBTTL	DRIVER FIXED DATA AREA

;
;	FIXED DATA CELLS FOR BOOTSTRAP DRIVER
;

	.PSECT	BOOTDRIVR_1,LONG	; CERTAIN DRIVERS REQUIRE ALIGNMENT!

BOO$AL_VECTOR::				; VECTOR TO BOOT DRIVER ENTRY POINTS
	.LONG	BOO$QIO-BOO$AL_VECTOR	; OFFSET TO BOOTSTRAP QIO ROUTINE
	.LONG	BOO$MAP-BOO$AL_VECTOR	; OFFSET TO MAPPING ROUTINE
	.LONG	BOO$SELECT-BOO$AL_VECTOR; OFFSET TO BOOTSTRAP I/O DRIVER
					; INITIALLY SET TO ROUTINE WHICH
					; SELECTS DRIVER
	.LONG	0			; OFFSET TO SYSTEM DISK DRIVER NAME
					; (ASCIC STRING). SET UP BY BOOT DRIVER.
;
; The next two words are the version number and the version number check fields.
; (The second word is the ones complement of the first word.)  The version
; number should be incremented whenever the interface between VMB and the
; rest of the system changes.  Release 1.0 VMB did not contain these fields.
;
;	Version 2 - Boot driver passes system disk driver name to SYSBOOT
;	Version 3 - VMB build memory description vector into RPB
;	Version 4 - VMB BOOTDRIVR purges UBA buffered datapath, all drivers
;		    return to BOOTDRIVR with success/failure status
;	Version 5 - VMB passes an argument list to the secondary boot
;		    in AP.  FILEREAD cacheing is present.
;	Version 6 - VMB passes nexus device type of boot adapter in
;		    RPB$B_BOOTNDT.
;	Version 7 - BOO$AL_VECTOR now has new entry points for RESELECTing
;		    a driver and UNIT_INIT for a driver.  Also new info
;		    passed in the argument list.
;	Version 8 - BOO$AL_VECTOR now has a new cell: BQO$L_UCODE.
;
	ASSUME	<.-BOO$AL_VECTOR> EQ BQO$W_VERSION
	.WORD	8,^C<8>			; VERSION # AND VERSION # CHECK FIELD.
	.LONG	BOO$RESELECT-BOO$AL_VECTOR ; Offset to set new driver
	.LONG	BOO$MOVE-BOO$AL_VECTOR	; Offset to routine to select and move
	ASSUME	<.-BOO$AL_VECTOR> EQ BQO$L_UNIT_INIT
	.LONG	0			; Offset to UNIT_INIT
	ASSUME	<.-BOO$AL_VECTOR> EQ BQO$L_AUXDRNAME
	.LONG	0			; Offset to auxiliary driver name
					;  second driver
	ASSUME	<.-BOO$AL_VECTOR> EQ BQO$L_UMR_DIS
BOO$GL_UMR_DIS::			; Number of map registers disabled
	.LONG	0
	ASSUME	<.-BOO$AL_VECTOR> EQ BQO$L_UCODE
BOO$GL_UCODE::				; Address of microcode in memory
	.LONG	0
BOO$GL_UMR_TMPL::			; UNIBUS map register template
	.LONG	UBA$M_MAP_VALID		;  Default is valid, no buff data path
BOO$GB_UMR_DP::				; UNIBUS map register data path
	.BYTE	1			;  Default is Buffered #1
EXE$GB_CPUTYPE::			; Location to hold processor
	.BYTE	1			; identification code

	.SBTTL	BOO$QIO - BOOTSTRAP QIO ROUTINE

;++
; FUNCTIONAL DESCRIPTION:
;
;	BOO$QIO PROVIDES THE DEVICE INDEPENDENT I/O INTERFACE FOR BOTH
;	READING AND WRITING THE BOOTSTRAP DEVICE.
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,BOO$QIO
;
; INPUT PARAMETERS:
;
;	BUF(AP)  - BUFFER ADDRESS
;	SIZE(AP) - SIZE OF BUFFER IN BYTES
;	LBN(AP)  - LOGICAL BLOCK NUMBER
;	FUNC(AP) - FUNCTION CODE
;			ACCEPTS IO$_READLBLK AND IO$_WRITELBLK
;	MODE(AP) - ADDRESS INTERPRETATION MODE
;			0 => PHYSICAL, 1 => VIRTUAL
;	RPB(AP)	- ADDRESS OF RESTART PARAMETER BLOCK
;
; OUTPUT PARAMETERS:
;
;	R0 - COMPLETION STATUS CODE
;	R1 - TOTAL BYTES TRANSFERRED
;
;--

;
; Offsets from AP to input arguments:
;

	BUF	= 4
	SIZE	= 8
	LBN	= 12
	FUNC	= 16
	MODE	= 20
	RPB	= 24

BOO$QIO::
	.WORD	^M<R2,R3,R4,R5,R6,R7,-	; PRESERVE REGISTERS
		R8,R9,R10,R11>

;
; If mapping is enabled, the processor register RP$_MAPEN contains a 1.
; Otherwise, the register contains a 0. Use this value as an index to
; choose the appropriate address of the adapter's register space.
;

	MOVL	RPB(AP),R9		; GET BASE ADDRESS OF RESTART PARAMETER BLK
	MFPR	#PR$_MAPEN,R1		; CHECK FOR MAPPING ENABLED
	ASSUME	RPB$L_ADPVIR EQ RPB$L_ADPPHY+4
	MOVL	RPB$L_ADPPHY(R9)[R1],R3	; GET CORRECT POINTER TO CONFIG REG

;
; Using the argument list as input, calculate the transfer size, number
; of map registers, starting LBN, starting VPN, and base of a page table
; to use in mapping.
;

	MOVL	BUF(AP),R10		; Get buffer address
	MOVZWL	SIZE(AP),R8		; GET TRANSFER SIZE IN BYTES
	BNEQ	10$			; CONTINUE IF LEGAL SIZE
	ROTL	#16,#1,R8		; ELSE FORCE TO 64K SIZE
10$:	EXTZV	#VA$V_BYTE,#VA$S_BYTE,R10,R7	; Get byte offset into page
	MOVAB	^X3FF(R8)[R7],R7	; Calculate highest address plus
					; an overflow page.
	ASHL	#-9,R7,R7		; Reduce to number of pages
					; (= number of map registers).
	MOVL	LBN(AP),R11		; AND BLOCK NUMBER FOR RETRY
	MOVL	RPB$L_SVASPT(R9),R1	; ASSUME SYSTEM SPACE
	BBS	#VA$V_SYSTEM,R10,20$	; Branch if system address
	MFPR	#PR$_P0BR,R1		; OTHERWISE GET P0 PT BASE
20$:	EXTZV	#VA$V_VPN,#VA$S_VPN,R10,R2	; Get base VPN for transfer
	CMPB	RPB$B_DEVTYP(R9),-	; If booting from console block
		#BTD$K_HSCCI		; storage device or CI, 
	BGEQ	PUSH_RETRY		; don't load map registers

;
; Register usage right now is as follows:
;
;	R1	- address of page table for virtual-->physical mapping
;	R2	- base VPN for the transfer
;	R3	- address of the adapter's configuration register
;	R7	- number of map registers needed (plus one extra)
;	R8	- transfer size in bytes
;	R9	- address of the RPB
;	R10	- buffer address
;	R11	- starting LBN of the transfer
;
; In an adapter-dependent fashion, initialize the required number of
; adapter map registers. First calculate the address of the starting map
; register number. Right now, map registers for all UNIBUS and MASSBUS
; adapters for all processors start at the same offset from the base of
; the adapter's register space.
;
; During map register initialization, the following registers change
; for each page mapped:
;
;	R2	- address of the next VPN to map
;	R4	- address of the next map register to load
;	R5	- PFN of the page being mapped
;

INIT_MAPREGS:				; Initialize the map registers.
	ASSUME	MBA$L_MAP EQ UBA$L_MAP
	ASSUME	MBA$L_MAP EQ UBI$L_MAP
	MOVL	W^BOO$GL_UMR_DIS,R4	; Pick up number of disable UMR's
	MOVAL	MBA$L_MAP(R3)[R4],R4	; Point to first useable map register

COMPUTE_PFN:				; Loop once per page.
	MOVAB	(R2)+,R5		; Get a virtual page number.
	BLBC	MODE(AP),10$		; If physical page #, branch.
	MOVL	(R1)[R5],R5		; Get page table entry
	BICL	#^C<PTE$M_PFN>,R5	; and extract PFN from entry

;
; Derive the boot device adapter's type (UNIBUS adapter or MASSBUS
; adapter) from the RPB, and save a flag indicating the adapter type
; in a register.  The seemingly complicated fooling around with both
; a UMR_DP and UMR_TMPL is to allow flexibility in what devices desire
; in the way of data paths: Only UNIBUS devices will ever even pick up
; the UMR_DP bit.  Thus all non-UNIBUS boot devices will never purge
; a data path.  UNIBUS devices have a choice: by clearing UMR_DP in
; their UNIT_INIT routines, the boot drivers can elect to not use
; the buffered data path.
;

10$:	CLRL	R0			; Assume not UNIBUS
	MOVZBL	RPB$B_BOOTNDT(R9),R6	; Pick up nexus type of boot adapter
	BICL	#3,R6			; Make canonical adapter type
	CMPB	R6, #NDT$_UB0		; If boot adapter is a UNIBUS,
	BNEQ	20$			;  then
	INCL	R0			;   Set a flag for later user
	INSV	BOO$GB_UMR_DP,-		;   Pick up the data path
		#UBA$V_MAP_DPD,#2,-
		BOO$GL_UMR_TMPL		;   and put it in the template
	
;
; This is a UNIBUS adapter.
;
; Map registers for the UNIBUS adapter look like the following:
;
;	+--------------------------------------------+
;	| V |   | BO | DP # |  |  page frame number  |
;	+--------------------------------------------+
;
; The code sets the byte offset bit if relevant, sets the valid bit,
; sets the low bit in the 4-bit data path field to indicate that the
; first buffered data path is to be used (if selected), and loads the
; page frame number into the low bits.
;

	INSV	BUF(AP),#UBA$V_MAP_BO,-	; Set UBA byte offset bit if
		#1,R5			; necessary.
;
; ****** NOTE *****  For most devices, always uses Datapath #1,
;			 IOC$PURDPR depends on this!!
;
20$:	BISL3	R5,BOO$GL_UMR_TMPL,(R4)+; Set PFN and byte offset, valid bit,
					;  and buffered DP number into map.
;
; This is a MASSBUS adapter.
;
; MASSBUS adapter's map registers look like the following:
;
;	+----------------------------------------+
;	| V |                | page frame number |
;	+----------------------------------------+
;
;
;*****
;	BISL3	R5,#MBA$M_MAP_VALID,-	; Set the PFN and the valid bit
;		(R4)+			; in the map register.
;*****
;
					; Is there another page to do?
	DECL	R7			; Decrement # of map registers.
	BGTR	COMPUTE_PFN		; Loop to fill next map register
					; if byte count not exhausted.

;
; All map registers are set up. Set up 2 more inputs to driver code.
; Since the loaded MBA map registers are registers #0-n, the starting
; address of the transfer to be loaded into a device register by the
; device driver, is now simply the offset into the first page of the
; transfer buffer.  However, for the UBA, there may be some disabled
; map registers as a result of UNIBUS memory on the UBA.  Therefor,
; the starting address of the transfer must include the lowest enabled
; UMR in bits 9-17.
;

	EXTZV	#VA$V_BYTE,#VA$S_BYTE,-	; Get byte offset into page
		R10,R10			; in R10

;
; Invalidate the last UBA map register so that a wild transfer will stop
; at the end of the last valid block. Get the proper UMR to start with.
;

	BLBC	R0,30$			; Skip invalidation for MBA.
	BICL	#UBA$M_MAP_VALID,-(R4)	; Invalidate last map register.
	ROTL	#9,W^BOO$GL_UMR_DIS,R0	; Form UNIBUS address of UMR
	BISL	R0,R10			; Set into address register.

;
; If it is a UNIBUS boot device, derive the address of the device's CSR.
;

	ASSUME	RPB$L_CSRVIR  EQ  RPB$L_CSRPHY+4

30$:	MFPR	#PR$_MAPEN,R0		; Check for mapping enabled
	MOVL	RPB$L_CSRPHY(R9)[R0],R7	; Get address of device's CSR

PUSH_RETRY:
	PUSHL	#10			; Push retry count on stack

10$:	MOVL	R11,R5			; Get a working copy of the block number
	MOVL	RPB$L_IOVEC(R9),R0	; Get address of boot vectors
	JSB	@BQO$L_SELECT(R0)[R0]	; Call driver thru self-relative vector
	BBC	#UBA$V_MAP_DPD,-	; Branch if not using the Buffered
		BOO$GL_UMR_TMPL,100$	;  data path
	PUSHL	R0			; Save driver status
	BSBW	BOO$PURDPR		; Purge Buffered Datapath for UBA
	BLBS	R0,80$			; Branch if success
	ADDL	#4,SP			; Clear previous status from stack
	BRB	150$			; Retry
80$:	POPL	R0			; Get driver status back
100$:	BLBS	R0,200$			; Branch if success
150$:	SOBGTR	(SP),10$		; Retry if count > 0
200$:	RET				; Return with final status in R0

	.SBTTL	BOO$MAP - ROUTINE TO MAP DATA FOR BOO$QIO

;++
; FUNCTIONAL DESCRIPTION:
;	BOO$MAP IS CALLED TO INITIALIZE THE DATA BASE FOR BOO$QIO TO PERMIT
;	IT TO FUNCTION WITH MEMORY MANAGEMENT ENABLED.  AN AREA OF SYSTEM
;	PAGE TABLE MUST BE PROVIDED SO THAT THE CONFIGURATION REGISTERS AND
;	UNIBUS I/O PAGE CAN BE MAPPED.
;
; CALLING SEQUENCE:
;	CALLG	ARGLIST,BOO$MAP
;
; INPUT PARAMETERS:
;	SVASPT(AP) - SYSTEM VIRTUAL ADDRESS OF THE SYSTEM PAGE TABLE
	SVASPT	=    4
;	VABASE(AP) - BASE VIRTUAL ADDRESS OF A 24 PAGE WINDOW TO MAP
;		     THE ADAPTER CONFIGURATION REGISTERS AND UNIBUS 
	VABASE  =    8
;		     I/O PAGE.
;	RPB(AP)	-    ADDRESS OF RESTART PARAMETER BLOCK (RPB) CONTAINING
;		     BOOTSTRAP DEVICE DESCRIPTION.
	RPB	=    12
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

BOO$MAP::	.WORD	^M<R2,R3,R4,R5,R6,R7>	;
	MOVL	RPB(AP),R7		; GET BASE ADDRESS FOR RPB
	MOVL	SVASPT(AP),R2		; GET BASE OF SPT
	MOVL	R2,RPB$L_SVASPT(R7)	; AND SAVE IN DATA BASE
	MOVL	VABASE(AP),R3		; GET VIRTUAL ADDRESS OF WINDOW
	MOVL	R3,RPB$L_ADPVIR(R7)	; SET AS ADAPTER VIRTUAL ADDRESS
	EXTZV	#VA$V_VPN,#VA$S_VPN,RPB$L_ADPPHY(R7),R4	; GET BASE PFN
	MOVL	#8,R5			; SET TO MAP 8 PAGES
	EXTZV	#VA$V_VPN,#VA$S_VPN,R3,R0	; GET BASE VIRTUAL PAGE
	MOVAL	(R2)[R0],R1		; COMPUTE WORKING SPT POINTER
	BSBB	FILLSPT			; FILL SPT TO MAP CONFIGURATION REGS
	MOVL	#16,R5			; SET FOR 16 PAGES
	BICL3	#^X1FFF,RPB$L_CSRPHY(R7),R4	; GET PHY ADDR OF I/O PAGE BASE
	ROTL	#<32-9>,R4,R4		; AND CONVERT TO PAGE NUMBER
	BSBB	FILLSPT			; STORE PTES INTO SPT
	MOVZWL	RPB$L_CSRPHY(R7),R0	; GET I/O PAGE OFFSET
	MOVAB	<^X1000-^XE000>(R0)[R3],RPB$L_CSRVIR(R7) ; SET VIRTUAL CSR ADDR
	RET				; 

;++
; FILLSPT
;
; INPUTS:
;	R1 - POINTER TO CURRENT SPT ENTRY (UPDATED)
;	R4 - PFN (UPDATED)
;	R5 - COUNT OF PAGES TO FILL (UPDATED)
;
FILLSPT:				;
	BISL3	#<PTE$M_VALID!PTE$C_KW>,R4,(R1)+ ; STORE A PTE
	INCL	R4			; ADVANCE TO NEXT PFN
	SOBGTR	R5,FILLSPT		; STORE THEM ALL
	RSB

	.SBTTL	BOO$PURDPR - Purge UBA Buffered Datapath

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called by BOOTDRIVR at the end of each boot device
;	transfer if the boot device is on the Unibus.  It purges the buffered
;	datapath and/or performs other Unibus adapter specific end-action.
;
;   NOTE: This routine contains processor specific code.
;
; CALLING SEQUENCE:
;
;	JSB	BOO$PURDPR
;
; INPUT PARAMETERS:
;
;	R3 - Address of UBA adapter configuration register
;	EXE$GB_CPUTYPE - Index specifying what CPU we are executing on
;	** Assumes all drivers use DATAPATH 1 **
;
; OUTPUT PARAMETERS:
;
;	R0 - LBS -> Success
;	     LBC -> Failure
;
;	R1,R2,R4 - Destroyed
;	All other registers preserved
;
;--

BOO$PURDPR:

	MOVZWL	#SS$_NORMAL,R0		; Assume success
	CPUDISP	<100$,200$,300$>	; Dispatch on EXE$GB_CPUTYPE

100$:	MOVAL	UBA$L_DPR+4(R3),R2	; CPU type 11/780, Datapth Register
	ASHL	#UBA$V_DPR_BNE,#1,(R2)	; Purge datapath
	MOVL	(R2),R1			; Get Datapth register contents
	BBC	#UBA$V_DPR_XMTER,R1,170$ ; Branch if no error
	ASHL	#UBA$V_DPR_XMTER,#1,(R2) ; Clear error in datapath
150$:	MOVZWL	#SS$_PARITY,R0		; Set failure status
170$:	RSB				; Return to caller

200$:	MOVAL	UBI$L_DPR+4(R3),R2	; CPU type 11/750, Datapath Register
	ASHL	#UBI$V_DPR_PUR,#1,(R2)	; Purge Datapath
	MOVL	#UBI$C_PURCNT,R4	; Get max # of tries for
					; purge done test
230$:	MOVL	(R2),R1			; Get datapath register contents
	BBC	#UBI$V_DPR_PUR,R1,250$	; Branch if purge done
	SOBGTR	R4,230$			; Branch if more tries allowed
	BRB	270$			; Return failure status
250$:	BBC	#UBI$V_DPR_ERROR,R1,170$ ; Branch if no purge error
270$:	MCOML	#0,(R2)			; Clear datapath error(s)
	BRB	150$			; Return with failure status

300$:	MOVL	UBI$L_SR(R3),R1		; Get Unibus Error Summary Register
					; Nebula
	BITL	#<UBI$M_SR_UWE!-	; Any UB errors? (write error,
		UBI$M_SR_MRPE!-		; 	map parity error,
		UBI$M_SR_NXM!-		;	non-existent memory,
		UBI$M_SR_UCE>,R1	; or uncorrected read error.)
	BEQL	170$			; Branch if no errors
; ****** QUESTION - Is there anything to do to clear the error status?
	BRB	150$			; Return failure status


	.ALIGN	LONG			; Alignment needed by some drivers!!!
BOO$QIOSIZ=.-BOO$AL_VECTOR		; Size of boot QIO routine

BOO$DRIVER==.				; Start of boot driver (after
					; it's been moved)
					; NOTE:  Boot drivers must be in
					; psect BOOTDRIVR_2

	.PSECT	BOOTDRIVR_3

BOO$DRIVER_TBL=.			; Boot driver table

	.PSECT	BOOTDRIVR_5

	.LONG	0			; End of boot driver table

	.PSECT	BOOTDRIVR_6

	.SBTTL	BOO$SELECT - Select boot driver

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called the first time BOO$QIO calls a driver.
;	It searches the boot driver table to locate the proper driver.
;	The correct linkage is made in BOO$AL_VECTOR.  
;	RPB$L_IOVECSZ is also stored with the size of BOO$QIO plus
;	the size of the driver.  The driver is then jumped to.
;
; CALLING SEQUENCE:
;
;	JSB	BOO$SELECT	(Actually called through self-relative
;				 vector in BOO$AL_VECTOR+BQO$L_SELECT)
;
; INPUT PARAMETERS:
;
;	R9	Address of the RPB
;
; OUTPUT PARAMETERS:
;
;	None
;
;--

BOO$SELECT:
	PUSHR	#^M<R1,R2,R3,R4,R5,R6>
	BSBB	BOO$RESELECT			; Select the correct driver
	POPR	#^M<R1,R2,R3,R4,R5,R6>
;
; Set up driver vector and jump to driver.
;
	MOVL	RPB$L_IOVEC(R9),R0		; Get address of vectors
	JMP	@BQO$L_SELECT(R0)[R0]		; Jump to driver

	.SBTTL	BOO$MOVE - Select and move boot driver

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called after VMB is finished with a driver.
;	It searches the boot driver table to locate the proper driver.
;	The correct linkage is made in BOO$AL_VECTOR and driver moved.
;
; CALLING SEQUENCE:
;
;	JSB	BOO$MOVE	(Actually called through self-relative
;				 vector in BOO$AL_VECTOR+BQO$L_MOVE)
;
; INPUT PARAMETERS:
;
;	R9	Address of the RPB
;
; OUTPUT PARAMETERS:
;
;	None
;
;--

BOO$MOVE:
	PUSHR	#^M<R1,R2,R3,R4,R5,R6,R7> ; Save registers
	BSBB	BOO$RESELECT		; Select the correct driver
	MOVAB	@BDT$L_ADDR(R5)[R5],R6	; Address of current position
	MOVAB	W^BOO$DRIVER,R4		; Address of new position
	SUBL3	R4,R6,R7		; Offset
	BEQL	20$			; None, so don't move
	MOVC3	BDT$L_SIZE(R5),(R6),(R4); Move driver
	MOVAB	W^BOO$AL_VECTOR,R4
	SUBL2	R7,BQO$L_SELECT(R4)	; Adjust offset
	SUBL2	R7,BQO$L_DRIVRNAME(R4)
	TSTL	BQO$L_AUXDRNAME(R4)	; Is there one?
	BEQL	10$			; No, don;t mess
	SUBL2	R7,BQO$L_AUXDRNAME(R4)
10$:	TSTL	BQO$L_UNIT_INIT(R4)	; Is there one?
	BEQL	20$			; No, don;t mess
	SUBL2	R7,BQO$L_UNIT_INIT(R4)
20$:	POPR	#^M<R1,R2,R3,R4,R5,R6,R7>
	RSB

BOO$RESELECT:
	MOVAL	W^BOO$DRIVER_TBL,R5	; Get address of boot driver table
	MOVZBL	RPB$B_DEVTYP(R9),R3	; Get value of boot device type
	MOVZBL	W^EXE$GB_CPUTYPE,R4	; Get cpu type
	MOVZWL	#<BOO$DRIVER-BOO$AL_VECTOR>,R6 ; Compute offset to driver table
;
; Determine if next driver in table is the correct one.
;
10$:	CVTWL	BDT$L_CPUTYPE(R5),R0	; Get cpu type from table
	BEQL	80$			; End of table
	BLSS	20$			; Driver doesn't care about cpu type
	CMPL	R0,R4			; Cpu types match?
	BNEQ	40$			; No, try next driver

20$:	CVTWL	BDT$L_DEVTYPE(R5),R0	; Get boot device type from table
	BLSS	30$			; Driver doesn't care about device type
	CMPL	R0,R3			; Device types match?
	BNEQ	40$			; No, try next driver

30$:	MOVL	BDT$L_ACTION(R5),R0	; Get action routine offset from table
	BEQL	60$			; No action routine, this is the driver
	JSB	(R5)[R0]		; Call action routine
	BLBS	R0,60$			; Branch if this is the driver
40$:	ADDL	BDT$L_SIZE(R5),R6	; Account for this driver's size
	ADDL	#BDT$K_LENGTH,R5	; Point to next driver entry
	BRB	10$			; Try next driver
;
; Have the right driver.  R5 points to driver table entry. R6 contains
; accumulated offset from IOVEC to the start of the driver.  Update
; pertainent entries in the IOVEC.
;
60$:	MOVAL	W^BOO$AL_VECTOR,R4	; Cover the vector
	ADDL3	#BOO$QIOSIZ,-		; Add boot QIO size to
		BDT$L_SIZE(R5),-	;  driver size
		RPB$L_IOVECSZ(R9)	;  and store in RPB
	ADDL3	R6,BDT$L_ENTRY(R5),-	; Calc offset to driver
		BQO$L_SELECT(R4)	;  entry point and store in vector
	ADDL3	R6,BDT$L_DRIVRNAME(R5),-; Calc offset to driver
		BQO$L_DRIVRNAME(R4)	;  name and store in vector
	CLRL	BQO$L_UNIT_INIT(R4)	; Assume none
	MOVL	BDT$L_UNIT_INIT(R5),R1	; Pick up possible UNIT_INIT entry
	BEQL	70$			; None specified, default to a RET
	ADDL3	R6,R1,BQO$L_UNIT_INIT(R4) ;Calc offset to driver
				 	;  UNIT_INIT point and store in vector
70$:	CLRL	BQO$L_AUXDRNAME(R4)	; Assume none
	MOVL	BDT$L_AUXDRNAME(R5),R1	; Pick up possible driver name
	BEQL	75$			; None specified, default to a zero
	ADDL3	R6,R1,BQO$L_AUXDRNAME(R4) ; Calc offset to driver
				 	;  auxiliary name and store in vector
75$:	RSB

;
; No driver in the driver table accepted this QIO
;
80$:	HALT

	.END
