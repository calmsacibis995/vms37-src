	.TITLE	ACTIMAGE - ACTIVATE NEXT IMAGE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STANDALONE SYSGEN
;
; ABSTRACT:
;	This module allows an image to activate another image in its
;	place.  The running image is run down and the specified
;	image is activated.
;
; ENVIRONMENT:	User and Exec modes, P0 and P1 space
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  26-Sep-1979
;
; MODIFIED BY:
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;


	.PSECT	BOO$ACTIMAGE,RD,NOWRT,EXE

	.SBTTL	BOO$ACTIMAGE
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine runs down the current image and activates the
;	specified image.  It does this by copying code into the
;	image header buffer in the control region and jumping to it.
;	This code sets up the image name in the image header buffer
;	and then jumps into PROCSTRT to activate the image.
;
; CALLING SEQUENCE:
;
;	CALLS	BOO$ACTIMAGE
;
; INPUT PARAMETERS:
;
;	4(AP)		Address of image name descriptor
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

BOO$ACTIMAGE::
	.WORD	0

	$CMEXEC_S	B^10$,(AP)	; Change to exec mode
	RET				; Should never return here

10$:	.WORD	^M<R2,R3,R4,R5,R6>

	MOVL	#1,R0			; Exec mode
	MOVL	@#CTL$AL_STACK[R0],SP	; Reset exec stack
	MOVAB	@#MMG$IMGACTBUF,R6	; Get address of image activator
					; scratch area
	MOVC3	S^#CDSIZE,B^20$,(R6)	; Move code
	MOVL	4(AP),R5		; Get address of image name descriptor
	JMP	(R6)			; Jump to moved code

20$:	;
	; This code doesn't get executed here.  Rather, it is moved
	; into the image activator scratch area in the control region 
	; and executed there.

	MOVAL	@#MMG$IMGHDRBUF,AP	; Make AP point to image hdr buffer
	MOVL	(R5),(AP)		; Move size of image name
	MOVAL	8(AP),4(AP)		; Set up pointer to image name
	MOVC3	(AP),@4(R5),8(AP)	; Move image name
	PUSHL	#3			; Access mode to run down (user)
	CALLS	#1,G^SYS$RUNDWN		; Run down user mode
	JMP	G^EXE$PROCIMGACT	; Activate image

CDSIZE = .-20$				; Size of code to move



	.END
