	.TITLE	DDBTDRIVR - CONSOLE TU58 BOOT DRIVER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	BOOTS
;
; ABSTRACT:
;	This module contains the bootstrap device driver for the
;	console TU58.
;
; ENVIRONMENT:	IPL 31, kernel mode, code must be PIC
;
; AUTHOR:  Steve Beckhardt,	Creation Date:  1-Nov-1979
;
; MODIFIED BY:
;
;	V02-007	KTA0037		Kerbey T. Altmann	26-Oct-1981
;		Fix start and size to encompass the entire driver.
;
;	02-006	STJ0125		Steven T. Jeffreys	30-Jul-1981
;		Added support of MRSP protocol.  For an explantion of the
;		TU58's operation, including RSP and MRSP protocol, please
;		see the "TU58 Engineering Specification", document number
;		TU58-0-0.
;
;	02-005	TCM0002		Trudy C. Matthews	29-Jul-1981
;		Changed all "7ZZ"s to "730"s.
;
;	02-004	TCM0001		Trudy C. Matthews	12-Jun-1981
;		Altered XMIT_TWO_CHARS routine to work on 11/730 processor,
;		which requires that the high 3 bytes of the value moved to
;		PR$_CSTD be zero.  Corrected bug in DO_MAPPING routine.
;		Added CONSDD_START label to mark start of driver.
;
;	02-003	SRB0001		Steve Beckhardt		10-Jul-1980
;		Fixed bugs in change CAS0001
;
;	02-02	CAS0001		C.A. Samuelson		30-Apr-1980
;		Change interface to BOOTDRIVR for UBA pruge of buffered
;		datapath
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BTDDEF				; Boot device types
	$IODEF				; I/O function codes
	$PRDEF				; Processor registers
	$PTEDEF				; PTE definitions
	$RPBDEF				; RPB offsets
	$SSDEF				; Status codes
	$VADEF				; Virtual address fields

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; CONSOLE TU58 REGISTER DEFINITIONS
;

	$DEFINI	DD			;START OF REGISTER DEFINITIONS

	_VIELD	CSRS,0,<-		;START OF PROC. REG. CSRS DEFS.
		<,6>,-			; UNUSED
		<IE,,M>,-		; INTERRUPT ENABLE
		<DONE,,M>,-		; DONE
	>

	_VIELD	CSRD,0,<-		;START OF PROC. REG. CSRD DEFS.
		<DATA,8>,-		; DATA
		<,7>,-			; UNUSED
		<ERROR,,M>,-		; ERROR
	>

	_VIELD	CSTS,0,<-		;START OF PROC. REG. CSTS DEFS.
		<BREAK,,M>,-		; BREAK
		<,5>,-			; UNUSED
		<IE,,M>,-		; INTERRUPT ENABLE
		<READY,,M>,-		; READY
	>

	_VIELD	CSTD,0,<-		;START OF PROC. REG. CSTD DEFS.
		<DATA,8>,-		; DATA
	>

	; 
	; PROTOCOL FLAGS
	;

DD_DATA = 1
DD_CNTRL = 2
DD_INIT = 4
DD_CONTINUE = 16

	;
	; FUNCTION CODES
	;

DD_READ = 2
DD_WRITE = 3
DD_ENDPKT = 64

	;
	; SWITCH BITS
	;

MRSP_SWITCH = 3

	$DEFEND	DD

;
; Boot driver table entry
;

	$BOOT_DRIVER	DEVTYPE = BTD$K_CONSOLE,-  ; Device type (console)
			ACTION = DD_SELECT,-	   ; Action routine
			SIZE = CONSDD_DRVSIZ,-	   ; Driver size
			ADDR = CONSDD_START,-	  ; Driver start
			ENTRY = CONSDD_DRIVER,-	   ; Driver entry
			DRIVRNAME = DDNAME	   ; Driver file name


	.SBTTL	DD_SELECT - Select correct CPUs for this driver

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is an action routine called by the boot driver
;	select code to determine if this is a cpu that has a TU58
;	for a console.
;
; CALLING SEQUENCE:
;
;	JSB	DD_SELECT
;
; INPUT PARAMETERS:
;
;	EXE$GB_CPUTYPE		Global variable containing cpu type
;
; OUTPUT PARAMETERS:
;
;	R0	0 = Do not use this driver
;		1 = Use this driver
;
;	MRSP	1 if this CPU has a TU58 that speaks MRSP, 0 if not.
;
;		It is assumed that certain CPUs must have MRSP TU58s.
;		Currently, only the 11/730 must have an MRSP TU58.
;		The 11/780 and 11/730 may have MRSP TU58s, but it is
;		not essential that MRSP be used.
;
;--

CONSDD_START:				; Label to mark start of driver

DD_SELECT:
	CLRB	G^MRSP			; Assume TU58 does not speak MRSP
	CLRL	R0			; Initialize R0
	CPUDISP	<CPU_780,-		; 11/780
		 CPU_750,-		; 11/750
		 CPU_730,-		; 11/730
		>
CPU_780:
	RSB				; Do not use this driver

CPU_730:
	INCL	G^MRSP			; Use MRSP (and fall through to common code)

CPU_750:
	INCL	R0			; Use this driver
	RSB

	.SBTTL	Console TU58 Driver

;++
;
; Inputs:
;
;	R1	Address of page table for virtual -> physical mapping
;	R2	Base VPN of transfer (Bits 29:9 of R10)
;	R5	LBN for current piece of transfer
;	R8	Size of transfer in bytes
;	R9	Address of the RPB
;	R10	Starting address of transfer
;
;	FUNC(AP)  I/O operation (IO$_READLBLK or IO$_WRITELBLK only)
;	MODE(AP)  Address interpretation mode:
;		     0 -> Physical,  1 -> Virtual
;
; Outputs:
;
;	R0	Status code:
;
;		SS$_NORMAL	Successful transfer
;		SS$_BUFBYTALI	Odd byte count
;		SS$_CTRLERR	Fatal controller error
;--
FUNC = 16
MODE = 20


;
; OWN STORAGE:
;

STKPTR:	.LONG	0			; Saved stack pointer
INIT:	.BYTE	0			; TU58 initialized flag
MRSP:	.BYTE	0			; MRSP protocol flag
DDNAME:	.ASCIC	/DDDRIVER.EXE/		; Driver file name

CONSDD_DRIVER:
	PUSHR	#^M<R1,R2,R8,R10,R11>	; Save input registers
	BLBC	R8,5$			; Branch if even byte count
	MOVZWL	#SS$_BUFBYTALI,R0	; Error - odd byte count
	POPR	#^M<R1,R2,R8,R10,R11>	; Restore registers
	RSB
5$:	MOVL	SP,STKPTR		; Save stack pointer

;
; There are 4 possibilities concerning mapping:  the I/O can be 
; done virtual or physical (MODE(AP)) and we can be executing virtual
; or physical (contents of processor register PR$_MAPEN).  If both
; modes match, then we can just copy data to/from the user buffer.
; If the I/O is to be done virtual and we are executing physical
; then the buffer address has to be translated using the page table
; pointed to by R1.  If the I/O is to be done physical and we are
; executing virtual then we have to double map the buffer using a spare
; PTE.  At this point, we just compute a mapping switch in R11 as follows:
;
;	0	Both modes match, just copy the data
;	1	Do virtual -> physical translation using page table
;	-1	Do physical -> virtual mapping using a spare PTE
;
	MFPR	#PR$_MAPEN,R11		; Get mapping enabled switch
	MNEGL	R11,R11			; Negate it
	ADDL	MODE(AP),R11		; Add I/O mode switch

	MOVQ	R1,R6			; R6 = Addr. pf page tbl, R7 = Base VPN
	BSBW	DO_MAPPING		; Initialize mapping if required
	TSTB	INIT			; Is it necessary to initialize TU58?
	BNEQ	10$			; No

	;
	; Initialize TU58.  This code is executed the first time the
	; driver is called and the next time the driver is called
	; after exiting with an error.
	;

	MTPR	#CSTS_M_BREAK,#PR$_CSTS	; Set BREAK bit in trans. csr
	CLRL	R2			; R2 contains null characters
	BSBW	XMIT_TWO_CHARS		; Send two nulls
	MTPR	#0,#PR$_CSTS		; Clear BREAK bit
	MFPR	#PR$_CSRD,R0		; Clear receive buffer
	MOVZWL	#DD_INIT@8+DD_INIT,R2	; R2 contains two INIT characters
	BSBW	XMIT_TWO_CHARS		; Send two INIT characters
	BSBW	RECV_ONE_CHAR		; Receive a character
	CMPB	R2,#DD_CONTINUE		; Is it continue?
	BNEQ	32$			; No, error
	INCB	INIT			; So that we don't execute this code again

;
; Perform the I/O transfer.  Register usage is:
;
;	R0		Scratch
;	R1		Loop counter
;	R2		Character to/from TU58
;	R3		Character received from TU58
;	R4		Checksum
;	R5		Logical block number
;	R6		Address of page table
;	R7		Virtual page number of buffer
;	R8		Size of remaining buffer (in bytes)
;	R9		Address of RPB
;	R10		Address of current spot in buffer
;	R11		Mapping switch
;
;
	ASSUME  DD_WRITE  EQ  DD_READ+1
	ASSUME  DD_DATA  EQ  1

10$:	CLRL	R4			; Clear checksum
	MOVZWL	#10@8+DD_CNTRL,R2	; Command packet and byte count
	BSBW	XMIT_TWO_UPDSUM		; Send them
	MOVZBL	#DD_READ,R2		; Assume read command
	CMPL	FUNC(AP),#IO$_READLBLK	; Is it a read?
	BEQL	20$			; Yes
	INCL	R2			; No, convert to write command
20$:	BSBW	XMIT_TWO_UPDSUM		; Send command and modifier (0)
;
;	The unit number of the console boot device is always zero.
;	This is a result of the 11/750 console implementation, where
;	logical device CSA1: is actually physical device DDA0:.
;
	CLRL	R2			; Set Unit # and Switch fields
	TSTB	MRSP			; Does this TU58 speak MRSP?
	BEQL	25$			; Branch if not
	BBSS	#<MRSP_SWITCH+8>,R2,25$	; Set MRSP switch
25$:	BSBW	XMIT_TWO_UPDSUM		; Send unit # and switches (0)
	CLRL	R2			; Set sequence number (unused field)
	BSBW	XMIT_TWO_UPDSUM		; Send sequence number (0)
	MOVZWL	R8,R2			; Byte count
	BSBW	XMIT_TWO_UPDSUM		; Send it
	MOVZWL	R5,R2			; Block number
	BSBW	XMIT_TWO_UPDSUM		; Send it
	MOVZWL	R4,R2			; Checksum
	BSBW	XMIT_TWO_CHARS		; Send it
	CMPL	FUNC(AP),#IO$_READLBLK	; Is it a read command?
	BEQL	50$

;
; Do a write to the TU58
;
30$:	BSBW	RECV_ONE_CHAR		; Receive one character
	CMPB	R2,#DD_CONTINUE		; Is it CONTINUE?
32$:	BNEQ	52$			; No, error
	CLRL	R4			; Clear checksum
	MOVZBL	#128,R1			; Number of bytes to send
	CMPL	R1,R8			; Is it less than remaining byte count?
	BLSSU	35$			; Yes
	MOVL	R8,R1			; No, use remaining byte count instead
35$:	ASHL	#8,R1,R2		; Put byte count in second byte
	INCL	R2			; Flag byte = DD_DATA
	BSBW	XMIT_TWO_UPDSUM		; Send flag byte and byte count
	DIVL	#2,R1			; Convert byte count to word count
40$:	BSBW	GETBYTE			; Get a byte from memory in R3
	MOVL	R3,R2			; Save byte in R2
	BSBW	GETBYTE			; Get another byte from memory in R3
	INSV	R3,#8,#8,R2		; Put it in second byte of R2
	BSBB	XMIT_TWO_UPDSUM		; Send two bytes
	SOBGTR	R1,40$			; Repeat until byte count is 0
	MOVZWL	R4,R2			; Get checksum
	BSBB	XMIT_TWO_CHARS		; Send it
	TSTL	R8			; Any more data to send?
	BNEQ	30$			; Yes, send another packet
	BRB	END_OF_DATA		; No, get End packet

;
; Do a read from TU58
;
50$:	CLRL	R4			; Clear checksum
	BSBW	RECV_TWO_UPDSUM		; Get flag byte in R3, byte count in R2
	CMPB	R3,#DD_DATA		; Is this a data packet?
52$:	BNEQ	DD_ERROR		; No, error
	DIVL3	#2,R2,R1		; Convert byte count to word count in R1
55$:	BSBB	RECV_TWO_UPDSUM		; Receive next two data bytes in R3, R2
	BSBW	PUTBYTE			; Store first byte in memory
	MOVZBL	R2,R3			; Move second byte to R3
	BSBW	PUTBYTE			; Store second byte in memory
	SOBGTR	R1,55$			; Repeat until byte count is 0
	BSBB	RECV_TWO_CHARS		; Get checksum in R3, R2
	INSV	R2,#8,#8,R3		; Assemble checksum into one word
	CMPW	R3,R4			; Is checksum correct?
	BNEQ	DD_ERROR		; No, error
	TSTL	R8			; Anymore data to receive?
	BNEQ	50$			; Yes, receive next data packet

;
; We've sent or received all the data.  Make sure we receive an end
; packet with a success code.
;
END_OF_DATA:
	CLRL	R4			; Clear checksum
	BSBB	RECV_TWO_UPDSUM		; Get flag byte and byte count
	CMPB	R3,#DD_CNTRL		; Is it a command packet?
	BNEQ	DD_ERROR		; No, error
	BSBB	RECV_TWO_UPDSUM		; Get opcode and success/failure byte
	CMPB	R3,#DD_ENDPKT		; Is it an end packet?
	BNEQ	DD_ERROR		; No, error
	TSTL	R2			; Is it success?
	BLSS	DD_ERROR		; No, error
	MOVL	#4,R1			; Read remainder of packet 
10$:	BSBB	RECV_TWO_UPDSUM		;
	SOBGTR	R1,10$			;
	BSBB	RECV_TWO_CHARS		; Read checksum in R3, R2
	INSV	R2,#8,#8,R3		; Form checksum in R3
	CMPW	R3,R4			; Is checksum correct?
	BNEQ	DD_ERROR		; No, error
	MOVZWL	#SS$_NORMAL,R0		; Return success
	POPR	#^M<R1,R2,R8,R10,R11>	; Restore registers
	RSB

DD_ERROR:
	CLRB	INIT			; Initialize TU58 on next entry
	MOVL	STKPTR,SP		; Restore stack pointer
	POPR	#^M<R1,R2,R8,R10,R11>	; Restore registers
	MOVZWL	#SS$_CTRLERR,R0		; Set failure status
	RSB				; Return and retry


;++
; XMIT_TWO_UPDSUM - Transmit two characters and update checksum
; XMIT_TWO_CHARS - Transmit two characters
; XMIT_ONE_CHAR - Transmit one character 
;
; Inputs:
;	R2	Contains one or two characters in low bytes
;	R4	Checksum so far
;
; Outputs:
;	R4	Updated checksum
;--

XMIT_TWO_UPDSUM:
	ADDW	R2,R4			; Add two characters to checksum
	ADWC	#0,R4			; Add carry

XMIT_TWO_CHARS:
	PUSHL	R2			; Save input on stack.
	MOVZBL	R2,R2			; Zero high bytes of data.
	BSBB	XMIT_ONE_CHAR		; Transmit one character
	ASHL	#-8,(SP)+,R2		; Retrieve second character
					; and fall through to transmit it

XMIT_ONE_CHAR:
	MFPR	#PR$_CSTS,R0		; Get transmit status
	BBC	#CSTS_V_READY,R0,XMIT_ONE_CHAR	; Loop until ready
	MTPR	R2,#PR$_CSTD		; Transmit character
	RSB


;++
; RECV_TWO_UPDSUM - Receive two characters and update checksum
; RECV_TWO_CHARS - Receive two characters
; RECV_ONE_CHAR - Receive one character
;
; Inputs:
;	R4	Checksum so far
;
; Outputs:
;	R2	Most recently received character
;	R3	Previous character in low byte
;--

RECV_TWO_UPDSUM:
	BSBB	RECV_TWO_CHARS		; Receive two characters in R3,  R2
	INSV	R2,#8,#8,R3		; Put second character into R3
	ADDW	R3,R4			; Add two characters to checksum
	ADWC	#0,R4			; Add carry to checksum
	RSB

RECV_TWO_CHARS:
	BSBB	RECV_ONE_CHAR		; Get one character in R2
	MOVZBL	R2,R3			; Save first character in R3 and
					; fall through to get second character

RECV_ONE_CHAR:
	MFPR	#PR$_CSRS,R0		; Get receive status
	BBC	#CSRS_V_DONE,R0,RECV_ONE_CHAR	; Loop until done
	MFPR	#PR$_CSRD,R2			; Get next character
	TSTB	MRSP				; Does this TU58 speak MRSP?
	BEQL	10$				; Branch if not
	MTPR	#DD_CONTINUE,#PR$_CSTD		; Send CONTINUE character
10$:	BBS	#CSRD_V_ERROR,R2,DD_ERROR	; Branch if data overrun
	RSB


;++
; GETBYTE - Subroutine to get a byte from memory
; PUTBYTE - Subroutine to store a byte in memory
;
;	These two subroutines do two things special:
;
;		1)  Since the floppy always reads or writes 128 bytes
;		    these routines simply return if the byte count is zero.
;		2)  These routines take care of page boundaries if
;		    mapping is required.
;
; Inputs:
;	R3	Byte to store (PUTBYTE)
;	R6	Address of page table
;	R7	Virtual page number of buffer
;	R8	Size of remaining buffer (in bytes)
;	R10	Address of current spot in buffer
;	R11	Mapping switch:
;			-1   Do physical -> virtual map
;			0    No mapping required
;			1    Do virtual -> physical translation
;
; Outputs:
;	R3	Byte fetched from memory (GETBYTE)
;--

	.ENABL	LSB

GETBYTE:
	CLRL	R3			; Return 0 if byte count = 0
	TSTL	R8			; Is byte count 0?
	BEQL	90$			; Yes
	MOVZBL	(R10)+,R3		; Get byte
	BRB	10$			; Branch to common code


PUTBYTE:
	TSTL	R8			; Is byte count 0?
	BEQL	90$			; Yes
	MOVB	R3,(R10)+		; Store byte


10$:	DECL	R8			; Decr. byte count
	BEQL	90$			; Reached zero
	BITW	#VA$M_BYTE,R10		; Did address overflow onto new page?
	BNEQ	90$			; No
	INCL	R7			; Yes, increment page number

;
; Fall through to ...
;


;++
; DO_MAPPING - Subroutine to perform necessary mapping
;
; Inputs:
;	R6	Address of page table
;	R7	Page number of buffer
;	R10	Address to map
;	R11	Mapping switch:
;			-1	Do physical -> virtual map
;			0	No mapping required
;			1	Do virtual -> physical translation
;
; Outputs:
;	R10	Address to use
;--

DO_MAPPING:
	TSTL	R11			; Any mapping required?
	BEQL	90$			; No
	BLSS	100$			; Yes, map physical to virtual
	BICL	#^C<VA$M_BYTE>,R10	; Yes, translate virtual to physical
					; Clear everything but byte offset
	MOVL	(R6)[R7],R0		; Get PFN in R0
	INSV	R0,#VA$V_VPN,#PTE$S_PFN,R10   ; Insert PFN after byte offset 
90$:	RSB


; 
; Map physical to virtual
;
100$:	HALT				; Not implemented yet

	.DSABL	LSB

CONSDD_DRVSIZ=.-CONSDD_START

	.END
