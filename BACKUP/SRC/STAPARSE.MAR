	.TITLE	STAPARSE	Standalone $PARSE subroutines
	.IDENT	'V03-001'
;---
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;	Backup/Restore
;
; ABSTRACT:
;	This module contains the external subroutines and data required for
;	RMS PARSE and XPFN to operate.
;
; ENVIRONMENT:
;	VAX/VMS user mode.
;
;
;--
;
; AUTHOR: M. Jack, CREATION DATE: 27-Dec-1980
;
;
; MODIFIED BY:
;
;	V03-001	MLJ0082		Martin L. Jack,	15-Mar-1982  15:48
;		Set DEV$V_FOR and DEV$V_MNT to correct problem with mounting of
;		continuation tapes.  Initialize FWA$T_SHRFILDEV in RM$ASSIGN to
;		track RMS change.
;
;	V02-003	MLJ0079		Martin L. Jack,	17-Feb-1982  13:51
;		Set up R11 in RM$FABCHK to point to a dummy image I/O impure
;		page.  This is now used by $PARSE.
;
;	V02-002	MLJ0063		Martin L. Jack,	23-Dec-1981  1:58
;		Correct RM$ALDBUF to accept size in R5.
;
;	V02-001	MLJ0054		Martin L. Jack,	22-Nov-1981  22:51
;		Integrate GET_VM and FREE_VM jacket routines.
;
;**



	.PSECT	CODE,EXE,NOWRT
	$BDBDEF
	$CCBDEF
	$DCDEF
	$DEVDEF
	$DIBDEF
	$FABDEF
	$FWADEF
	$IFBDEF
	$IODEF
	$PSLDEF
	$UCBDEF

	.ENTRY	SYS$PARSE,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	JMP	G^RMS$$PARSE+2

NT$NWA_INIT::
	MOVL	#RMS$_SYN,R0		; set error code
	RSB				; return

RM$ASSIGN::
	MOVAB	@FWA$Q_XLTBUF1+4(R10),R2	; get buffer address
	MOVL	R2,R3			; save addr of prim. buff descriptor
	MOVZBL	#112,(R2)+		; build prim buff desc. (len)
	MOVAB	16(R3),(R2)+		; build primary buffer desc (adr)
	MOVL	R2,R4			; save addr of secondary buff dsc
	MOVL	#8,(R2)+		; buffer len
	MOVAB	IFB$L_AS_DEV(R9),(R2)+	; buffer addr
	$GETDEV_S	DEVNAM=FWA$Q_DEVICE(R10),-
			PRILEN=(R3),PRIBUF=(R3),-
			SCDLEN=(R4),SCDBUF=(R4)
	BLBS	R0,10$			; branch if ok
5$:	PUSHL	R8			; save register
	MOVL	IFB$L_LAST_FAB(R9),R8	; get FAB address
	MOVL	R0,FAB$L_STV(R8)	; set STV value
	RMSERR	CHN,R0			; set R0
	POPL	R8			; restore register
	RSB				; exit
10$:	PUSHR	#^M<R0,R1,R3>		; save work registers
	MOVAB	FWA$T_SHRFILDEV(R10),R1	; point to buffer
	MOVZWL	DIB$W_DEVNAMOFF(R2),R3	; point to device name string
	ADDL2	R2,R3			;
	MOVZBL	(R3)+,R0		; get device name string count
	CMPL	R0,#13			; does it fit?
	BGTRU	15$			; br if no
	ADDB3	#2,R0,(R1)+		; add two byte unit number and store
11$:	MOVB	(R3)+,(R1)+		; copy device name string
	SOBGTR	R0,11$			; loop until done
	MOVW	DIB$W_UNIT(R2),(R1)	; copy unit number
15$:	POPR	#^M<R0,R1,R3>		; restore work registers
	BBS	S^#EXE$V_INIT,EXE$GL_FLAGS,30$	; br if running online
	CMPB	DIB$B_DEVCLASS(R2),#DC$_DISK	; disk device?
	BEQL	20$			; br if disk
	CMPB	DIB$B_DEVCLASS(R2),#DC$_TAPE	; tape device?
	BNEQ	30$			; br if not tape
20$:	SSB	#DEV$V_FOR,IFB$L_AS_DEV(R9) ; simulate mount/foreign
	$ASSIGN_S	DEVNAM=FWA$Q_DEVICE(R10),-
			CHAN=IFB$W_CHNL(R9)
	BLBC	R0,5$			; br if assign failed
	$CMKRNL_S	40$		; set volume valid
	BLBC	R0,5$			; br if verifychan failed
	$QIOW_S		FUNC=#IO$_PACKACK,-
			CHAN=IFB$W_CHNL(R9)
	$DASSGN_S	CHAN=IFB$W_CHNL(R9)
	CLRW	IFB$W_CHNL(R9)		; clear channel number
30$:	MOVL	DIB$L_DEVCHAR(R2),IFB$L_PRIM_DEV(R9); characteristics bits
	MOVW	DIB$W_DEVBUFSIZ(R2),IFB$W_DEVBUFSIZ(R9); buffer size
	RSB				; exit

40$:	.WORD	^M<R2,R3,R4,R5>		; kernel mode routine to set valid
	MOVZWL	IFB$W_CHNL(R9),R0	; load channel number
	JSB	@#IOC$VERIFYCHAN	; get CCB address for channel
	BLBC	R0,41$			; br if failed
	MOVL	CCB$L_UCB(R1),R1	; get UCB address from CCB
	BISW2	#UCB$M_VALID,UCB$W_STS(R1)	; set software valid bit
	BISL2	#DEV$M_MNT!DEV$M_FOR,UCB$L_DEVCHAR(R1)
					; set mounted foreign bits
	MOVL	#1,R0			; indicate success
41$:	RET				; return

RM$CLEANUP::
	RSB

RM$CLSCU::
	PUSHL	R0			; save error code
	BSBB	RM$CLEANUP		; cleanup ifab and stuff
	POPL	R0
	BRB	RM$EX_NOSTR		; and do structureless exit

RM$EXSUC::
	MOVL	#1,R0			; set success
RM$EX_NOSTR::
	BBSS	#16,R0,10$		; add rms facility code
10$:	MOVL	R0,FAB$L_STS(R8)	; and store in fab/rab
	RET				; exit rms

RM$FABCHK::
	MOVL	#PSL$C_USER,R7		; set previous mode user
	MOVAB	PIO$GW_IIOIMPA,R11	; point to fake image i/o impure area
	MOVL	4(AP),R8		; get fab address
	CLRQ	FAB$L_STS(R8)		; clear sts and stv
	MOVZWL	FAB$W_IFI(R8),R9	; set r9 = ifi value
	RSB				; return

RM$FSETI::
	BSBW	RM$FABCHK		; valid fab?
	MOVZBL	#IFB$C_BLN_SEQ,R2	; block size for ifab
	BSBW	RM$GETSPC		; get ifab space
	MOVL	R1,R9			; save ifab address
	MOVB	#IFB$C_BID,IFB$B_BID(R9)	; block type for ifab
	MOVB	#IFB$C_BLN_SEQ,IFB$B_BLN(R9)	; block size for ifab
	MOVAB	IFB$L_BDB_FLNK(R9),R0	; set up bdb link pointers
	MOVL	R0,(R0)			;
	MOVL	R0,4(R0)		;
	MOVL	R9,IFAB_ADDRESS		; save ifab address
	MOVW	#1,FAB$W_IFI(R8)	; store ifi value
	MOVB	R7,IFB$B_MODE(R9)	; save caller's mode
	MOVL	AP,IFB$L_ARGLST(R9)	; save pointer to arglist
	MOVL	R9,R10			; copy ifab addr
	MOVL	R8,IFB$L_LAST_FAB(R9)	; save addr this fab
	RSB

RM$GETSPC1::
	MOVL	R9,R1
RM$GETSPC:
	PUSHL	R2			; length desired
	CALLS	#1,G^GET_ZERO_VM	; allocate and clear memory	
	MOVL	R0,R1			; get address of memory
	MOVL	#1,R0			; set success return
	RSB

RM$GETPAG::
	PUSHL	R2			; save input length
	BSBB	RM$GETSPC		; get the space
	MOVL	R1,R3			; return page address in r3
	MOVL	(SP)+,R2		; return length obtained
	RSB

RM$ALDBUF::
	PUSHL	R5			; save length to allocate
	MOVL	R5,R2			; copy to correct register
	BSBB	RM$GETSPC		; get the space
	MOVL	R1,R3			; return page buffer in r3
	MOVL	#BDB$C_BLN,R2		; length of BDB
	BSBB	RM$GETSPC		; get the space
	MOVL	R1,R4			; return bdb buffer in r4
	INSQUE	(R1),@IFB$L_BDB_BLNK(R10) ; insert into bdb queue at tail
	MOVL	R3,BDB$L_ADDR(R4)	; set address of buffer
	MOVL	(SP)+,R2		; restore length to allocate
	RSB

RM$RETSPC1::
	PUSHL	R4			; address to free
	PUSHL	R2			; length to free
	CALLS	#2,G^FREE_VM		; free memory	
	MOVL	#1,R0			; set success return
	RSB				; return

RM$GTIADR::
	MOVL	IFAB_ADDRESS,R9		; get ifab address
	RSB

RM$INIT_SWB:: 
RM$NEXTDIR::
	MOVL	#1,R0
	RSB

PIO$GT_DDSTRING::
	.ASCIC	"[SYSEXE]"		; default directory

	.PSECT	DATA,WRT,NOEXE
PIO$GW_IIOIMPA:
	.BLKB	512			; dummy image I/O impure area
PIO$GL_FMLH::
	.BLKL				; used by $TSTPT macro
IFAB_ADDRESS:
	.BLKL				; saves address of IFAB

TPT$L_PARSE==		-512		; force all $TSTPT's to
TPT$L_NTXLATLOG==	-512		; use the single longword
TPT$L_PARSES==		-512		; at PIO$GL_FMLH
TPT$L_XLATLOG==		-512
TPT$L_XPFN==		-512

	.END
