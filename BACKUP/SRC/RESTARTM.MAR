	.TITLE	RESTARTM	Reel checkpoint and restart
	.IDENT	'V03-000'
;---
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;	Backup/Restore
;
; ABSTRACT:
;	This module contains routines to save and restore the low-level machine
;	state for reel checkpoint and restart.
;
; ENVIRONMENT:
;	VAX/VMS user mode.
;
;
;--
;
; AUTHOR: M. Jack, CREATION DATE: 30-May-1981
;
;
; MODIFIED BY:
;
;	V02-001	MLJ0054		Martin L. Jack,	22-Nov-1981  22:24
;		Integrate GET_VM and FREE_VM jacket routines.
;
;
;**


	.PSECT	CODE,EXE,NOWRT

	.SBTTL	CHECKPOINT_M		Checkpoint machine state

;++
;
; Functional Description:
;	This routine checkpoints the low-level machine state so that we can
;	later restart at the same point.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = CHKPT_HIGH_SP
;	08(AP) = Address of CHKPT_STACK
;	12(AP) = Address of CHKPT_LOW_SP
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	GET_VM
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	CHECKPOINT_M,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
;
;	The entry mask specifies all registers so that when the RET in
;	RESTART_M executes, all registers are restored.
;
;	Save the frame pointer in the global variable CHKPT_LOW_SP.
;
	MOVL	FP,@12(AP)		; Save stack base pointer
;
;	Compute the difference between the saved frame pointer in the global
;	variable CHKPT_HIGH_SP and CHKPT_LOW_SP.  This value is the length
;	of the section of stack that will be saved.  It includes the stack
;	frame for this routine.
;
	MOVQ	4(AP),R6		; R6 = CHKPT_HIGH_SP
					; R7 = Address of CHKPT_STACK
	SUBL3	FP,R6,-(SP)		; Compute size of stack to save
;
;	Allocate the dynamic memory, placing the address of the allocated
;	space in the global variable CHKPT_STACK.
;
	CALLS	#1,G^GET_VM		; Allocate space to hold saved stack
	MOVL	R0,(R7)			; Store address in CHKPT_STACK
;
;	Copy the stack area to the dynamic memory, and return.
;
	MOVC3	(SP),(FP),@(R7)		; Save the stack area
	RET

	.SBTTL	RESTART_M		Restart given saved machine state

;++
;
; Functional Description:
;	This routine restarts using the low-level machine state that was saved
;	by CHECKPOINT_M.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = CHKPT_LOW_SP
;	08(AP) = CHKPT_HIGH_SP
;	12(AP) = Address of CHKPT_STACK
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	none
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	RESTART_M,^M<>		; Register save irrelevant
;
;	Compute the difference between the saved frame pointer in the global
;	variable CHKPT_HIGH_SP and CHKPT_LOW_SP.  This value is the length
;	of the section of stack that will be restored from the saved copy.
;
	MOVQ	8(AP),R6		; R6 = CHKPT_HIGH_SP
					; R7 = Address of CHKPT_STACK
	SUBL2	4(AP),R6		; Compute length of saved area
;
;	Now restore the FP and SP registers to the values they had on entry to
;	routine CHECKPOINT_M.  Then, copy the saved section of stack to the
;	stack.  This restores the stack to the exact state that it was
;	in on entry to routine CHECKPOINT_M.  It is important not to cause
;	any signals or other stack activity during these three instructions.
;
	MOVL	4(AP),FP		; Restore stack pointers
	MOVL	FP,SP			;
	MOVC3	R6,@(R7),(FP)		; Restore stack
;
;	The following RET instruction executes in the context of routine
;	CHECKPOINT_M, because the stack has been restored, and returns to
;	the caller of routine CHECKPOINT_M.  The previous execution flow has
;	been entirely lost.
;
	RET				; Return to caller of CHECKPOINT_M

	.END

