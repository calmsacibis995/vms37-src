MODULE UTILITY	(%TITLE	'Utility routines'
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains general utility routines.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 03-Sep-1980
!
! MODIFIED BY:
!
!	V03-001	ACG0280		Andrew C. Goldstein,	2-Apr-1982  16:45
!		Include dot on save set name with null type
!
!	V02-010	MLJ0081		Martin L. Jack,	26-Feb-1982  15:21
!		Add RETAINMIN and RETAINMAX attributes to support new home
!		block fields.
!
!	V02-009	MLJ0075		Martin L. Jack,	28-Jan-1982  20:08
!		Add DIR_VERLIM and VERLIMIT attributes to support version limit
!		handling.
!
!	V02-008	MLJ0062		Martin L. Jack,	3-Dec-1981  12:17
!		Add DIR_STATUS attribute to support /INCREMENTAL.
!
!	V02-007	MLJ0054		Martin L. Jack,	22-Nov-1981  21:32
!		Integrate GET_VM and FREE_VM jacket routines.
!
!	V02-006	MLJ0047		Martin L. Jack,	25-Sep-1981  15:28
!		Remove INVATTTYP message to allow restores
!		with earlier versions.
!
!	V02-005	MLJ0036		Martin L. Jack,	28-Aug-1981  18:04
!		Implement parent directory attributes.  Make use of new NAM
!		block descriptors.
!
!	V02-004	MLJ0023		Martin L. Jack,	23-Apr-1981  11:42
!		Implement placement attribute.
!
!	V02-003	MLJ0014		Martin L. Jack,	6-Apr-1981  23:19
!		Correct and clarify VBN sequence-error messages
!
!	V02-002	MLJ0010		Martin L. Jack,	25-Mar-1981  15:50
!		Reorganize global storage.  Add new attributes for image
!		restore.  Convert to bitmap for attribute code checking.
!		Add DEBLOCK parameter to inhibit freeing of buffer.
!
!	V02-001	MLJ0006		Martin L. Jack,	26-Feb-1981  17:37
!		Append filetype in EXTRACT_FILENAME unless it is null
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:BACKDEF';


LINKAGE
	L_P$=		CALL: GLOBAL(P$=11);


MACRO
	L_DECL=		EXTERNAL REGISTER P$ = 11 %;


FORWARD ROUTINE
	GET_VM,				! Allocate virtual memory
	GET_ZERO_VM,			! Allocate and zero virtual memory
	FREE_VM:	NOVALUE,	! Free virtual memory
	DEBLOCK:	L_P$ NOVALUE,	! Deblock a save set buffer
	DEBLOCK_ATTR:	L_P$ NOVALUE,	! Deblock an attribute record
	FILE_ERROR:	NOVALUE,	! Signal a file-related error
	FIND_BADBLOCK,			! Search the bad block table
	EXTRACT_FILENAME:
			NOVALUE,	! Extract file name (and type, if not
					! null) from string
	EXTRACT_DIR_FILENAME:
			NOVALUE,	! Extract directory, name, type,
					! version from string
	GET_ONE_ATTRIBUTE:
			NOVALUE,	! Store one attribute value
	GET_SUMMARY_ATTRIBUTES:
			NOVALUE,	! Get BACKUP summary attributes
	GET_VOLUME_ATTRIBUTES:
			NOVALUE,	! Get volume summary attributes
	GET_FILE_ATTRIBUTES:
			NOVALUE,	! Get file attributes
	GET_PHYSVOL_ATTRIBUTES:
			NOVALUE;	! Get physical volume attributes


EXTERNAL ROUTINE
	FREE_BUFFER:	NOVALUE,	! Free an I/O buffer
	LIB$FREE_VM:	ADDRESSING_MODE(GENERAL),
					! Free virtual memory
	LIB$GET_VM:	ADDRESSING_MODE(GENERAL),
					! Allocate virtual memory
	LIB$SIGNAL:	ADDRESSING_MODE(GENERAL);
					! Signal a condition


G$DEFINE();		! Define global common area


EXTERNAL LITERAL
	BACKUP$_VBNERROR,
	BACKUP$_VBNMISSING,
	BACKUP$_VBNPASTEOF,
	BACKUP$_READBLOCK,
	BACKUP$_WRITEBLOCK,
	BACKUP$_VERIFYERR,
	BACKUP$_BADDATA,
	BACKUP$_SOFTRERRS,
	BACKUP$_SOFTWERRS,
	BACKUP$_XORERRS,
	BACKUP$_PHYSET,
	BACKUP$_NONPHYSET,
	BACKUP$_INVATTSTR,
	BACKUP$_INVATTSIZ,
	BACKUP$_INVRECTYP,
	BACKUP$_INVRECSIZ,
	BACKUP$_ALLOCMEM,
	BACKUP$_FREEMEM;

! Define bitvectors of valid attribute codes for each attribute record type.
!
MACRO
	DEFINE_BITVECTOR_1[A]=
	    [%NAME('BSA$K_', A)] = TRUE %,


	DEFINE_BITVECTOR(A)=
	    OWN A:
		BITVECTOR[BSA$K_NUM_ATRS]
		PSECT(CODE)
		PRESET(DEFINE_BITVECTOR_1(%REMAINING)) %;


DEFINE_BITVECTOR(MASK_BSR,
	SSNAME,		COMMAND,	COMMENT,	USERNAME,
	USERUIC,	DATE,		OPSYS,		SYSVER,
	NODENAME,	SIR,		DRIVEID,	BACKVER,
	BLOCKSIZE,	XORSIZE,	BUFFERS,	VOLSETNAM,
	NVOLS,		BACKSIZE,	BACKFILES);


DEFINE_BITVECTOR(MASK_VSR,
	VOLSTRUCT,	VOLNAME,	OWNERNAME,	FORMAT,
	RVN,		VOLOWNER,	PROTECT,	FILEPROT,
	RECPROT,	VOLCHAR,	VOLDATE,	WINDOW,
	LRU_LIM,	EXTEND,		CLUSTER,	RESFILES,
	VOLSIZE,	TOTSIZE,	TOTFILES,	MAXFILES,
	MAXFILNUM,	SERIALNUM,	INDEXLBN,	BOOTBLOCK,
	RETAINMIN,	RETAINMAX);


DEFINE_BITVECTOR(MASK_FAR,
	FILENAME,	STRUCLEV,	FID,		BACKLINK,
	FILESIZE,	UIC,		FPRO,		RPRO,
	ACLEVEL,	UCHAR,		RECATTR,	REVISION,
	CREDATE,	REVDATE,	EXPDATE,	BAKDATE,
	BOOTVBN,	PLACEMENT,	DIR_UIC,	DIR_FPRO,
	DIR_STATUS,	DIR_VERLIM,	VERLIMIT);


DEFINE_BITVECTOR(MASK_PVA,
	SECTORS,	TRACKS,		CYLINDERS,	MAXBLOCK,
	DEVTYP,		SERIAL,		DEVNAM,		LABEL,
	BADBLOCK);

GLOBAL ROUTINE GET_VM(SIZE)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine interfaces to LIB$GET_VM to allocate a block of virtual
!	memory.
!
! INPUT PARAMETERS:
!	SIZE		- Size in bytes of area.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Address of allocated area.
!
! SIDE EFFECTS:
!	If allocation fails, a fatal error is signalled.
!
!--

BEGIN
LOCAL
	STATUS,					! General status variable
	AREA;					! Pointer to allocated area


STATUS = LIB$GET_VM(SIZE, AREA);
IF NOT .STATUS THEN SIGNAL(BACKUP$_ALLOCMEM, 0, .STATUS);
.AREA
END;

GLOBAL ROUTINE GET_ZERO_VM(SIZE)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine interfaces to LIB$GET_VM to allocate a block of virtual
!	memory and clears the allocated area.
!
! INPUT PARAMETERS:
!	SIZE		- Size in bytes of area.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Address of allocated area.
!
! SIDE EFFECTS:
!	If allocation fails, a fatal error is signalled.
!
!--

BEGIN
LOCAL
	STATUS,					! General status variable
	AREA;					! Pointer to allocated area


STATUS = LIB$GET_VM(SIZE, AREA);
IF NOT .STATUS THEN SIGNAL(BACKUP$_ALLOCMEM, 0, .STATUS);
CH$FILL(0, .SIZE, .AREA);
.AREA
END;

GLOBAL ROUTINE FREE_VM(SIZE,AREA): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine interfaces to LIB$FREE_VM to free a block of virtual
!	memory.
!
! INPUT PARAMETERS:
!	SIZE		- Size of allocated area.
!	AREA		- Address of allocated area.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	If deallocation fails, a fatal error is signalled.
!
!--

BEGIN
LOCAL
	STATUS;					! General status variable


STATUS = LIB$FREE_VM(SIZE, AREA);
IF NOT .STATUS THEN SIGNAL(BACKUP$_FREEMEM, 0, .STATUS);
END;

GLOBAL ROUTINE DEBLOCK(BCB,ROUT,NOFREE): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine deblocks a buffer, and then frees the buffer unless
!	inhibited.  Validity checking of the size and type values is done.
!
! INPUT PARAMETERS:
!	BCB		- Pointer to buffer control block.
!	ROUT		- Routine to be called with each record.
!	NOFREE		- True if buffer not to be freed (optional).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The buffer may be released.
!
!--

BEGIN
MAP
 	BCB:		REF BBLOCK;	! Pointer to buffer control block
LOCAL
	REC:		REF BBLOCK,	! Pointer to record
	BUF:		REF BBLOCK,	! Pointer to buffer header
	LIMIT;				! Limit address of buffer
BUILTIN
	ACTUALCOUNT;
L_DECL;


! Initialize.
!
BUF = .BCB[BCB_BUFFER];
LIMIT = .BUF + .BCB[BCB_SIZE];
REC = .BUF + BBH$C_LENGTH;


! Loop over all records in the buffer.
!
WHILE .REC LEQA .LIMIT - BRH$C_LENGTH DO
    BEGIN
    LOCAL
	RLIMIT;				! Limit address of this record


    ! Compute address of following byte and check that it is within the buffer.
    !
    RLIMIT = .REC + .REC[BRH$W_RSIZE] + BRH$C_LENGTH;
    IF .RLIMIT GTRA .LIMIT
    THEN
	BEGIN
	SIGNAL(BACKUP$_INVRECSIZ);
	EXITLOOP;
	END;


    ! Check record type.  Ensure that it is a valid type, and if it is, ensure
    ! that it is valid for the type of operation (physical or non-physical)
    ! that is in progress.
    !
    IF .REC[BRH$W_RTYPE] GTRU BRH$K_FID
    THEN
	SIGNAL(BACKUP$_INVRECTYP)
    ELSE
	BEGIN
	IF NOT .COM_VALID_TYPES[.REC[BRH$W_RTYPE]]
	THEN
	    IF .QUAL[QUAL_PHYS]
		THEN SIGNAL(BACKUP$_NONPHYSET)
		ELSE SIGNAL(BACKUP$_PHYSET);


	! Check record size.  If a data record, the size must be a multiple of
	! 512 bytes.  Otherwise, it must be a multiple of 16 bytes.  If all
	! tests are passed, call the action routine to process the record.
	!
	IF
	    BEGIN
	    IF
		(.REC[BRH$W_RTYPE] EQL BRH$K_VBN OR
		 .REC[BRH$W_RTYPE] EQL BRH$K_LBN)
	    THEN
		.(REC[BRH$W_RSIZE])<0,9> NEQ 0
	    ELSE
		.(REC[BRH$W_RSIZE])<0,4> NEQ 0
	    END
	THEN
	    SIGNAL(BACKUP$_INVRECSIZ)
	ELSE
	    (.ROUT)(.REC, .BCB);
	END;


    ! Advance to next record.
    !
    REC = .RLIMIT;
    END;


! If warranted, free the buffer.
!
IF
    .BCB[BCB_STATE] NEQ BCB_S_WRITE AND
    NOT (IF ACTUALCOUNT() LSSU 3 THEN FALSE ELSE .NOFREE)
THEN
    FREE_BUFFER(.BCB);
END;

GLOBAL ROUTINE DEBLOCK_ATTR(REC,MASK,ROUT): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine deblocks an attribute record.  Validity checking of the
!	size and type values is done.
!
! INPUT PARAMETERS:
!	REC		- Pointer to attribute record.
!	MASK		- Pointer to bitvector of valid attribute codes,
!			  or zero to consider all defined codes valid.
!	ROUT		- Routine to be called with each attribute.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	REC:		REF BBLOCK,	! Pointer to record
	MASK:		REF BITVECTOR;	! Pointer to bit mask
LOCAL
	ATT:		REF BBLOCK,	! Pointer to attribute
	LIMIT;				! Limit address of record
L_DECL;


! Initialize.
!
ATT = .REC + BRH$C_LENGTH;
LIMIT = .ATT + .REC[BRH$W_RSIZE];


! Check the structure level.
!
IF .ATT[BSA$W_STRUCLEV] NEQ BBH$K_LEVEL1 THEN SIGNAL(BACKUP$_INVATTSTR);
ATT = .ATT + 2;


! Loop over all attribute entries within the record.
!
WHILE .ATT LEQA .LIMIT - BSA$C_LENGTH DO
    BEGIN
    LOCAL
	ALIMIT;				! Limit address of this attribute


    ! Compute address of following byte and check that it is within the record.
    !
    ALIMIT = .ATT + .ATT[BSA$W_SIZE] + BSA$C_LENGTH;
    IF .ALIMIT GTRA .LIMIT
    THEN
	BEGIN
	SIGNAL(BACKUP$_INVATTSIZ);
	EXITLOOP;
	END;


    ! If the type code is zero, exit the loop.
    !
    IF .ATT[BSA$W_TYPE] EQL 0
    THEN
	EXITLOOP;


    ! Ensure that the attribute code is a valid code.  If it is, ensure that it
    ! is valid for this type of attribute record.  If all tests are passed,
    ! call the action routine to process the attribute.
    !
    IF
	BEGIN
	IF .ATT[BSA$W_TYPE] GEQU BSA$K_NUM_ATRS
	THEN
	    FALSE
	ELSE
	    IF .MASK EQL 0
	    THEN
		TRUE
	    ELSE
		.MASK[.ATT[BSA$W_TYPE]]
	END
    THEN
	(.ROUT)(.ATT);


    ! Advance to next attribute entry.
    !
    ATT = .ALIMIT;
    END;
END;

GLOBAL ROUTINE FILE_ERROR(MESSAGE,FAB,EXTRA1,EXTRA2): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine signals a file-related message.
!
! INPUT PARAMETERS:
!	MESSAGE		- Message code for first message
!	FAB		- Pointer to file context area, from which file name
!			  will be obtained
!	Up to two additional input parameters are additional messages --
!	except that if the message is one of the special cases, they are
!	additional FAO arguments.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The messages are signalled.
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK;	! Pointer to FAB
LOCAL
	NAM:		REF BBLOCK,	! Pointer to NAM block
	DESC:		VECTOR[2],	! Descriptor for file name
	PARAM:		VECTOR[6];	! Signal parameter list
BUILTIN
	ACTUALCOUNT,
	CALLG;


! Establish the file name to be printed.  The resultant string, expanded
! string, and filename string are examined in that order, and the first
! one that is not null is used.
!
NAM = .FAB[FAB$L_NAM];
IF .NAM[NAM$B_RSL] NEQ 0
THEN
    BEGIN
    DESC[0] = .NAM[NAM$B_RSL];
    DESC[1] = .NAM[NAM$L_RSA];
    END
ELSE IF .NAM[NAM$B_ESL] NEQ 0
THEN
    BEGIN
    DESC[0] = .NAM[NAM$B_ESL];
    DESC[1] = .NAM[NAM$L_ESA];
    END
ELSE
    BEGIN
    DESC[0] = .FAB[FAB$B_FNS];
    DESC[1] = .FAB[FAB$L_FNA];
    END;


! Initialize the signal parameter list.
!
PARAM[0] = 3;				! Parameter count
PARAM[1] = .MESSAGE;			! First message code
PARAM[2] = 1;				! FAO argument count
PARAM[3] = DESC;			! Filename descriptor
IF ACTUALCOUNT() GEQ 3
THEN
    BEGIN
    PARAM[0] = .PARAM[0] + 1;		! Increment parameter count
    PARAM[4] = .EXTRA1;			! Next message code
    END;
IF ACTUALCOUNT() GEQ 4
THEN
    BEGIN
    PARAM[0] = .PARAM[0] + 1;		! Increment parameter count
    PARAM[5] = .EXTRA2;			! Next message code
    END;


! For these messages, the additional parameters are FAO arguments.
!
IF
    .MESSAGE EQL BACKUP$_VBNMISSING OR
    .MESSAGE EQL BACKUP$_VBNERROR OR
    .MESSAGE EQL BACKUP$_VBNPASTEOF
THEN
    PARAM[2] = 3;


! For these messages, EXTRA1 is an additional FAO argument that appears before
! the file name.  EXTRA2, if present, continues to be a message code.
!
IF
    .MESSAGE EQL BACKUP$_READBLOCK OR
    .MESSAGE EQL BACKUP$_WRITEBLOCK OR
    .MESSAGE EQL BACKUP$_VERIFYERR OR
    .MESSAGE EQL BACKUP$_BADDATA OR
    .MESSAGE EQL BACKUP$_SOFTRERRS OR
    .MESSAGE EQL BACKUP$_SOFTWERRS OR
    .MESSAGE EQL BACKUP$_XORERRS
THEN
    BEGIN
    PARAM[2] = 2;
    PARAM[3] = .EXTRA1;
    PARAM[4] = DESC;
    END;


! Finally, signal the messages.
!
CALLG(PARAM, LIB$SIGNAL);
END;

GLOBAL ROUTINE FIND_BADBLOCK(TABLE,LBN)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine searches a specified bad block table for a specified LBN.
!
! INPUT PARAMETERS:
!	TABLE		- Pointer to bad block table.
!	LBN		- LBN to search for.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if the LBN is found, false otherwise.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	TABLE:		REF BBLOCK;	! Pointer to bad block table
LOCAL
	DESC:		REF BBLOCK;	! Pointer to bad block descriptor


! If there is no table, assume not found.
!
IF .TABLE EQL 0 THEN RETURN FALSE;


! Loop over all entries of the table.
!
DESC = TABLE[BAD_DESC];
INCR I FROM 0 TO .TABLE[BAD_NUMDESC]-1 DO
    BEGIN

    ! If the LBN is in the range described by this entry, return found.
    !
    IF
	.LBN GEQU .DESC[BAD_LBN] AND
	.LBN LEQU .DESC[BAD_LBN] + .DESC[BAD_COUNT] - 1
    THEN
	RETURN TRUE;


    ! Advance to next entry.
    !
    DESC = .DESC + BAD_S_DESC;
    END;


! All entries examined, return not found.
!
FALSE
END;

GLOBAL ROUTINE EXTRACT_FILENAME(FAB,DESC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine extracts the filename, and filetype if it is not null,
!	from the resultant string associated with FAB and returns a
!	descriptor in DESC.
!
! INPUT PARAMETERS:
!	FAB		- Pointer to the FAB
!	DESC		- Pointer to the output descriptor
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK,		! Pointer to FAB
	DESC:		REF BBLOCK;		! Pointer to descriptor


! Construct a descriptor for the file name and file type, concatenated.
!
DESC[DSC$W_LENGTH] = .BBLOCK[FAB[FC_NAM], NAM$B_NAME]
		   + .BBLOCK[FAB[FC_NAM], NAM$B_TYPE];
DESC[DSC$A_POINTER] = .BBLOCK[FAB[FC_NAM], NAM$L_NAME];

END;

GLOBAL ROUTINE EXTRACT_DIR_FILENAME(FAB,DESC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine extracts the directory, name, type, and version from the
!	resultant string associated with FAB and returns a descriptor in DESC.
!
! INPUT PARAMETERS:
!	FAB		- Pointer to the FAB
!	DESC		- Pointer to the output descriptor
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK,		! Pointer to FAB
	DESC:		REF BBLOCK;		! Pointer to descriptor


! Construct a descriptor for the portion of the resultant string beginning
! with the directory name.
!
DESC[DSC$W_LENGTH] =
    .BBLOCK[FAB[FC_NAM], NAM$L_RSA] +
    .BBLOCK[FAB[FC_NAM], NAM$B_RSL] -
    .BBLOCK[FAB[FC_NAM], NAM$L_DIR];
DESC[DSC$A_POINTER] = .BBLOCK[FAB[FC_NAM], NAM$L_DIR];
END;

ROUTINE GET_ONE_ATTRIBUTE(ATT): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine saves the value of one attribute.
!
! INPUT PARAMETERS:
!	ATT		- Pointer to attribute entry from save set record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	OUTPUT_ATTBUF	- Contains the attribute value.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	ATT:		REF BBLOCK;	! Pointer to attribute entry
LOCAL
	DLEN,				! Length of attribute storage
	DST:		REF BBLOCK;	! Pointer to attribute storage


! Initially, dispatch on the attribute code to establish where in OUTPUT_ATTBUF
! the value of the attribute is stored.  Also, establish whether a descriptor
! for, or the value of, the attribute will be stored.  If the value, establish
! the length of the attribute storage.
!
IF
    BEGIN
    CASE .ATT[BSA$W_TYPE] FROM BSA$K_SSNAME TO BSA$K_RETAINMAX OF
	SET

	[BSA$K_SSNAME]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_SSNAME];
	    TRUE
	    END;

	[BSA$K_COMMAND]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_COMMAND];
	    TRUE
	    END;

	[BSA$K_COMMENT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_COMMENT];
	    TRUE
	    END;

	[BSA$K_USERNAME]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_USERNAME];
	    TRUE
	    END;

	[BSA$K_USERUIC]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_USERUIC];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_DATE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_DATE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_OPSYS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_OPSYS];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_SYSVER]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_SYSVER];
	    TRUE
	    END;

	[BSA$K_NODENAME]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_NODENAME];
	    TRUE
	    END;

	[BSA$K_SIR]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_SIR];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_DRIVEID]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_DRIVEID];
	    TRUE
	    END;

	[BSA$K_BACKVER]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_BACKVER];
	    TRUE
	    END;

	[BSA$K_BLOCKSIZE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_BLOCKSIZE];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_XORSIZE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_XORSIZE];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_BUFFERS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_BUFFERS];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VOLSETNAM]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_VOLSETNAM];
	    TRUE
	    END;

	[BSA$K_NVOLS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_NVOLS];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_BACKSIZE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_BACKSIZE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_BACKFILES]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[BSR_BACKFILES];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_VOLSTRUCT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_VOLSTRUCT];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VOLNAME]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_VOLNAME];
	    TRUE
	    END;

	[BSA$K_OWNERNAME]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_OWNERNAME];
	    TRUE
	    END;

	[BSA$K_FORMAT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_FORMAT];
	    TRUE
	    END;

	[BSA$K_RVN]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_RVN];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VOLOWNER]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_VOLOWNER];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_PROTECT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_PROTECT];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_FILEPROT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_FILEPROT];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_RECPROT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_RECPROT];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VOLCHAR]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_VOLCHAR];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VOLDATE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_VOLDATE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_WINDOW]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_WINDOW];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_LRU_LIM]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_LRU_LIM];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_EXTEND]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_EXTEND];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_CLUSTER]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_CLUSTER];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_RESFILES]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_RESFILES];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VOLSIZE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_VOLSIZE];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_TOTSIZE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_TOTSIZE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_TOTFILES]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_TOTFILES];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_MAXFILES]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_MAXFILES];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_MAXFILNUM]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_MAXFILNUM];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_SERIALNUM]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_SERIALNUM];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_FILENAME]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_FILENAME];
	    TRUE
	    END;

	[BSA$K_STRUCLEV]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_STRUCLEV];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_FID]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_FID];
	    DLEN = 6;
	    FALSE
	    END;

	[BSA$K_BACKLINK]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_BACKLINK];
	    DLEN = 6;
	    FALSE
	    END;

	[BSA$K_FILESIZE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_FILESIZE];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_UIC]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_UIC];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_FPRO]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_FPRO];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_RPRO]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_RPRO];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_ACLEVEL]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_ACLEVEL];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_UCHAR]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_UCHAR];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_RECATTR]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_RECATTR];
	    DLEN = 32;
	    FALSE
	    END;

	[BSA$K_REVISION]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_REVISION];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_CREDATE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_CREDATE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_REVDATE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_REVDATE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_EXPDATE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_EXPDATE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_BAKDATE]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_BAKDATE];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_SECTORS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_SECTORS];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_TRACKS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_TRACKS];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_CYLINDERS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_CYLINDERS];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_MAXBLOCK]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_MAXBLOCK];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_DEVTYP]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_DEVTYP];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_SERIAL]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_SERIAL];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_DEVNAM]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_DEVNAM];
	    TRUE
	    END;

	[BSA$K_LABEL]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_LABEL];
	    TRUE
	    END;

	[BSA$K_BADBLOCK]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[PVA_BADBLOCK];
	    TRUE
	    END;

	[BSA$K_INDEXLBN]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_INDEXLBN];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_BOOTBLOCK]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_BOOTBLOCK];
	    TRUE
	    END;

	[BSA$K_BOOTVBN]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_BOOTVBN];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_PLACEMENT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_PLACEMENT];
	    TRUE
	    END;

	[BSA$K_DIR_UIC]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_DIR_UIC];
	    DLEN = 4;
	    FALSE
	    END;

	[BSA$K_DIR_FPRO]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_DIR_FPRO];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_DIR_STATUS]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_DIR_STATUS];
	    DLEN = 1;
	    FALSE
	    END;

	[BSA$K_DIR_VERLIM]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_DIR_VERLIM];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_VERLIMIT]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[FAR_VERLIMIT];
	    DLEN = 2;
	    FALSE
	    END;

	[BSA$K_RETAINMIN]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_RETAINMIN];
	    DLEN = 8;
	    FALSE
	    END;

	[BSA$K_RETAINMAX]:
	    BEGIN
	    DST = OUTPUT_ATTBUF[VSR_RETAINMAX];
	    DLEN = 8;
	    FALSE
	    END;

	[OUTRANGE]:
	    RETURN;

	TES
    END
THEN
    BEGIN
    !
    ! Descriptor-valued attribute.  Put a descriptor at location DST.
    !
    DST[DSC$W_LENGTH] = .ATT[BSA$W_SIZE];
    DST[DSC$A_POINTER] = ATT[BSA$C_LENGTH,0,0,0];
    END
ELSE
    BEGIN
    !
    ! Not a descriptor.  Zero-extend to length DLEN at location DST.
    ! For some special cases, copy the attribute value to a global variable
    ! for the READSAVE routines.
    !
    CH$COPY(.ATT[BSA$W_SIZE], ATT[BSA$C_LENGTH,0,0,0], 0, .DLEN, .DST);
    IF .ATT[BSA$W_TYPE] EQL BSA$K_BUFFERS
	THEN RWSV_LOOKAHEAD = .OUTPUT_ATTBUF[BSR_BUFFERS];
    IF .ATT[BSA$W_TYPE] EQL BSA$K_XORSIZE
	THEN RWSV_XORSIZE = .OUTPUT_ATTBUF[BSR_XORSIZE];
    END;
END;

GLOBAL ROUTINE GET_SUMMARY_ATTRIBUTES(REC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes a BACKUP summary attribute record, expanding
!	the attributes it contains into the OUTPUT_ATTBUF area.
!
! INPUT PARAMETERS:
!	REC		- Pointer to attribute record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	OUTPUT_ATTBUF	- Contains the attribute values.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
GLOBAL REGISTER P$ = 11;
CH$FILL(0, BSR_LENGTH, OUTPUT_ATTBUF);
DEBLOCK_ATTR(.REC, MASK_BSR, GET_ONE_ATTRIBUTE);
END;

GLOBAL ROUTINE GET_VOLUME_ATTRIBUTES(REC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes a volume summary record, expanding
!	the attributes it contains into the OUTPUT_ATTBUF area.
!
! INPUT PARAMETERS:
!	REC		- Pointer to attribute record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	OUTPUT_ATTBUF	- Contains the attribute values.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
GLOBAL REGISTER P$ = 11;
CH$FILL(0, VSR_LENGTH, OUTPUT_ATTBUF);
DEBLOCK_ATTR(.REC, MASK_VSR, GET_ONE_ATTRIBUTE);
END;

GLOBAL ROUTINE GET_FILE_ATTRIBUTES(REC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes a file attribute record, expanding
!	the attributes it contains into the OUTPUT_ATTBUF area.
!
! INPUT PARAMETERS:
!	REC		- Pointer to attribute record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	OUTPUT_ATTBUF	- Contains the attribute values.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
GLOBAL REGISTER P$ = 11;
CH$FILL(0, FAR_LENGTH, OUTPUT_ATTBUF);
DEBLOCK_ATTR(.REC, MASK_FAR, GET_ONE_ATTRIBUTE);
END;

GLOBAL ROUTINE GET_PHYSVOL_ATTRIBUTES(REC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes a physical volume attribute record, expanding
!	the attributes it contains into the OUTPUT_ATTBUF area.
!
! INPUT PARAMETERS:
!	REC		- Pointer to attribute record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	OUTPUT_ATTBUF	- Contains the attribute values.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
GLOBAL REGISTER P$ = 11;
CH$FILL(0, PVA_LENGTH, OUTPUT_ATTBUF);
DEBLOCK_ATTR(.REC, MASK_PVA, GET_ONE_ATTRIBUTE);
END;

END
ELUDOM
