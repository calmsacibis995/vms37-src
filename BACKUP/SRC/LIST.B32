MODULE LIST	(%TITLE	'List a save set'
		IDENT = 'V03-002'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that list a save set.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 03-Sep-1980
!
! MODIFIED BY:
!
!	V03-002	MLJ0084		Martin L. Jack,	26-Mar-1982  3:07
!		Use FAT$W_MAXREC rather than FAT$W_RSIZE to report maximum
!		record size.  This corrects a discrepancy with DIRECTORY/FULL.
!		Add new device types to track $DCDEF.
!
!	V03-001	MLJ0083		Martin L. Jack,	22-Mar-1982  13:37
!		Track change to DIRECTORY/FULL.
!
!	V02-005	MLJ0081		Martin L. Jack,	26-Feb-1982  16:19
!		Implement RETAINMIN and RETAINMAX attributes to support new
!		home block fields.
!
!	V02-004	MLJ0043		Martin L. Jack,	3-Sep-1981  21:34
!		Add stream record types to /FULL listing.
!
!	V02-003	MLJ0036		Martin L. Jack,	28-Aug-1981  17:44
!		Implement reel restart.  Track new device type codes.  Add
!		backup date to track DIRECTORY/FULL.  Print command line on
!		multiple lines if necessary to avoid truncation.
!
!	V02-002	MLJ0020		Martin L. Jack,	20-Apr-1981  22:09
!		Implement /JOURNAL qualifier.
!
!	V02-001	MLJ0010		Martin L. Jack,	25-Mar-1981  16:02
!		Reorganize global storage.  Replace OWN storage by LOCAL.
!		Add capability for listing concurrently with other operations.
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:BACKDEF';


LINKAGE
	L_P$ =		CALL: GLOBAL(P$=11);


MACRO
	L_DECL=		EXTERNAL REGISTER P$ = 11: REF VECTOR %;


FORWARD ROUTINE
	LIST_FAO:	L_P$ NOVALUE,	! Format information to line buffer
	LIST_EOL:	L_P$ NOVALUE,	! Write line buffer to listing file
	LIST_PROTECTION:L_P$ NOVALUE,	! List protection code
	FULL_LISTING:	L_P$ NOVALUE,	! Produce /FULL listing
	LIST_ONE_RECORD:L_P$ NOVALUE,	! List one save set record
	INIT_LIST:	NOVALUE,	! Initialize listing
	FIN_LIST:	NOVALUE,	! Finish listing
	CONCURRENT_LIST:NOVALUE,	! List one buffer concurrently with
					! another operation
	LIST:		NOVALUE;	! Driver for list-only execution


EXTERNAL ROUTINE
	DEBLOCK:	L_P$ NOVALUE,	! Deblock a save set buffer
	FILE_ERROR:	NOVALUE,	! Signal file-related error
	FIN_IN_SAVE:	NOVALUE,	! Finish input save set processing
	GET_SUMMARY_ATTRIBUTES:
			NOVALUE,	! Get BACKUP summary attributes
	GET_VOLUME_ATTRIBUTES:
			NOVALUE,	! Get volume summary attributes
	GET_FILE_ATTRIBUTES:
			NOVALUE,	! Get file attributes
	GET_PHYSVOL_ATTRIBUTES:
			NOVALUE,	! Get physical volume attributes
	INIT_IN_SAVE:	NOVALUE,	! Initialize input save set processing
	READ_BUFFER,			! Get one buffer from save set
	RESTORE_HANDLER;		! Handler for RESTORE, LIST, ANALYZE


EXTERNAL LITERAL
	BACKUP$_OPENOUT,
	BACKUP$_WRITEERR,
	BACKUP$_CLOSEOUT;


G$DEFINE();		! Define global common area


BIND
	OUTPUT_FILENAME=OUTPUT_ATTBUF[FAR_FILENAME]: BBLOCK,
	OUTPUT_RECATTR= OUTPUT_ATTBUF[FAR_RECATTR]: BBLOCK,
	OUTPUT_FILECHAR=OUTPUT_ATTBUF[FAR_UCHAR]: BBLOCK;


MACRO
	FAO_(A)=
	    LIST_FAO(
		UPLIT BYTE (%ASCIC A)
		%IF NOT %NULL(%REMAINING) %THEN , %FI %REMAINING) %,


	EOL_(A)=
	    LIST_EOL() %;


BUILTIN
	ROT;


MACRO
	_LIST_DESC=	P$[0] %,		! Descriptor for buffer
	_LIST_BUFFER=	P$[2] %,		! Listing buffer
	LIST_DESC(N)=		VECTOR[_LIST_DESC,N] %;


LITERAL
	P$SIZE=		2 + CH$ALLOCATION(LIST_SIZE);

GLOBAL ROUTINE LIST_FAO(CTRL,PARAM): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine interfaces to FAO to format information into the line.
!
! INPUT PARAMETERS:
!	CTRL		- ASCIC control string
!	PARAM...	- Parameters required by the control string (if any)
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Information formatted into the line buffer.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	CTRL:		REF VECTOR[,BYTE];	! Pointer to ASCIC string
LOCAL
	OUTLEN:		WORD,			! Length of FAO result
	DESC:		VECTOR[2];		! Descriptor for control string
L_DECL;


! Build a descriptor for the control string.
!
DESC[0] = .CTRL[0];
DESC[1] = CTRL[1];


! Use FAO to edit the information.
!
$FAOL(CTRSTR=DESC, OUTLEN=OUTLEN, OUTBUF=_LIST_DESC, PRMLST=PARAM);


! Adjust the line buffer descriptor to account for the information
! added to the line.
!
LIST_DESC[0] = .LIST_DESC[0] - .OUTLEN;
LIST_DESC[1] = .LIST_DESC[1] + .OUTLEN;
END;

GLOBAL ROUTINE LIST_EOL: L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the listing buffer to the listing file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!
!--

BEGIN
LOCAL
	LIST_FAB:	REF BBLOCK;	! FAB for listing file
L_DECL;


! Compute the length of the line.
!
LIST_FAB = .QUAL[QUAL_LIST_FC];
BBLOCK[LIST_FAB[FC_RAB], RAB$W_RSZ] = LIST_SIZE - .LIST_DESC[0];
BBLOCK[LIST_FAB[FC_RAB], RAB$L_RBF] = _LIST_BUFFER;


! Write the line.
!
IF NOT $PUT(RAB=LIST_FAB[FC_RAB])
THEN
    FILE_ERROR(
	BACKUP$_WRITEERR + STS$K_SEVERE,
	.LIST_FAB,
	.BBLOCK[LIST_FAB[FC_RAB], RAB$L_STS],
	.BBLOCK[LIST_FAB[FC_RAB], RAB$L_STV]);


! Reinitialize the line buffer descriptor to describe the entire line.
!
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;
END;

GLOBAL ROUTINE LIST_PROTECTION(PROT,CODES): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats a protection value.
!
! INPUT PARAMETERS:
!	PROT		- A protection value.
!	CODES		- The four letter codes, e.g. 'RWED'.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!
!--

BEGIN
MAP
	PROT:		BITVECTOR[16],	! Protection value
	CODES:		VECTOR[,BYTE];	! Letter codes
BIND
	WHO = UPLIT (
	    UPLIT BYTE (%ASCIC 'System:'),
	    UPLIT BYTE (%ASCIC ', Owner:'),
	    UPLIT BYTE (%ASCIC ', Group:'),
	    UPLIT BYTE (%ASCIC ', World:'))
	: VECTOR;
L_DECL;


INCR I FROM 0 TO 3 DO
    BEGIN
    FAO_('!AC', .WHO[.I]);
    INCR J FROM 0 TO 3 DO
	BEGIN
	IF NOT .PROT[.I*4+.J] THEN FAO_('!AD', 1, CODES[.J]);
	END;
    END;
END;

ROUTINE FULL_LISTING: L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats the /FULL listing.  The code in this routine is
!	intended to track the DIRECTORY/FULL listing.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!
!--

BEGIN
LOCAL
	BLOCKS,				! Used blocks
	DIGITS;				! Number of digits needed for file size
L_DECL;


! Compute file size.
!
BLOCKS = ROT(.OUTPUT_RECATTR[FAT$L_EFBLK], 16);
IF .OUTPUT_RECATTR[FAT$W_FFBYTE] EQL 0 AND .BLOCKS NEQ 0
    THEN BLOCKS = .BLOCKS - 1;


! Compute digits to display file size.
!
IF
    .BLOCKS GTR 99999 OR		! If larger than 5 digits
    .OUTPUT_ATTBUF[FAR_FILESIZE] GTR 99999
THEN
    DIGITS = 10				! then make output totally variable
ELSE
    DIGITS = 5;				! else use fixed field size


! Format first line.
!
IF .OUTPUT_FILENAME[DSC$W_LENGTH] GTRU 21	! If long file name,
THEN
    BEGIN
    FAO_('!AS', OUTPUT_FILENAME);	! Display name on first line
    EOL_();
    FAO_('!22* ');
    END
ELSE
    FAO_('!21AS ', OUTPUT_FILENAME);


FAO_('Size:   !#UL/!#<!UL!>     Created: !17%D',
    .DIGITS, .BLOCKS,
    .DIGITS, .OUTPUT_ATTBUF[FAR_FILESIZE],
    OUTPUT_ATTBUF[FAR_CREDATE]);
EOL_();


! Format second line.
!
FAO_('!22* Owner:    [!3OW,!3OW]     Revised: ',
    .OUTPUT_ATTBUF[FAR_UICGROUP],
    .OUTPUT_ATTBUF[FAR_UICMEMBER]);

IF .(OUTPUT_ATTBUF[FAR_REVDATE]) EQL 0
THEN
    FAO_('<None specified>')
ELSE
    FAO_('!17%D (!UL)',
	OUTPUT_ATTBUF[FAR_REVDATE],
	.OUTPUT_ATTBUF[FAR_REVISION]);
EOL_();


! Format third line.
!
FAO_('!22* File ID: !14<(!UL,!UL,!UL)!> Expires: ',
    .OUTPUT_ATTBUF[FAR_FID_NUM] + .OUTPUT_ATTBUF[FAR_FID_NMX] ^ 16,
    .OUTPUT_ATTBUF[FAR_FID_SEQ],
    .OUTPUT_ATTBUF[FAR_FID_RVN]);

IF .(OUTPUT_ATTBUF[FAR_EXPDATE]) EQL 0
THEN
    FAO_('<None specified>')
ELSE
    FAO_('!17%D',
	OUTPUT_ATTBUF[FAR_EXPDATE]);
EOL_();


! Format fourth line.
!
FAO_('!46* Backup:  ',
    .OUTPUT_ATTBUF[FAR_FID_NUM] + .OUTPUT_ATTBUF[FAR_FID_NMX] ^ 16,
    .OUTPUT_ATTBUF[FAR_FID_SEQ],
    .OUTPUT_ATTBUF[FAR_FID_RVN]);

IF .(OUTPUT_ATTBUF[FAR_BAKDATE]) EQL 0
THEN
    FAO_('<No backup done>')
ELSE
    FAO_('!17%D',
	OUTPUT_ATTBUF[FAR_BAKDATE]);
EOL_();


! Format fifth line.
!
FAO_('  File protection:    ');
LIST_PROTECTION(.OUTPUT_ATTBUF[FAR_FPRO], 'RWED');
EOL_();


! Format sixth line.
!
FAO_('  File organization:  ');
SELECTONEU .OUTPUT_RECATTR[FAT$V_FILEORG] OF
    SET
    [FAT$C_SEQUENTIAL]:	FAO_('Sequential');
    [FAT$C_RELATIVE]:	FAO_('Relative, maximum record number = !UL',
			.OUTPUT_RECATTR[FAT$W_MAXREC]);
    [FAT$C_INDEXED]:	FAO_('Indexed');
    [OTHERWISE]:	FAO_('Unknown type = !UL',
			.OUTPUT_RECATTR[FAT$V_FILEORG]);
    TES;
EOL_();


! Format seventh line.
!
FAO_('  File attributes:    Allocation = !UL, Extend = !UL',
	.OUTPUT_ATTBUF[FAR_FILESIZE],
	.OUTPUT_RECATTR[FAT$W_DEFEXT]);
IF .OUTPUT_RECATTR[FAT$B_BKTSIZE] NEQ 0	! If non-zero bucket size,
THEN
    BEGIN
    FAO_(', ');
    IF .OUTPUT_RECATTR[FAT$V_FILEORG] EQL FAT$C_INDEXED THEN FAO_('maximum ');
    FAO_('bucket size = !UL', .OUTPUT_RECATTR[FAT$B_BKTSIZE]);
    END;
EOL_();


! Format eighth line.
!
FAO_('!22* Global Buffer Count = !UL',
	.OUTPUT_RECATTR[FAT$W_GBC]);
IF .OUTPUT_FILECHAR[FCH$V_CONTIGB]	! If contiguous best try,
THEN
    FAO_(', Contiguous-best-try')
ELSE IF .OUTPUT_FILECHAR[FCH$V_CONTIG]	! If file is contiguous,
THEN
    FAO_(', Contiguous');
IF .OUTPUT_FILECHAR[FCH$V_LOCKED]	! If file is access locked,
THEN
    FAO_(', Locked');
EOL_();


! Format ninth line.
!
FAO_('  Record format:      ');
SELECTONEU .OUTPUT_RECATTR[FAT$V_RTYPE] OF
    SET
    [FAT$C_FIXED]:	FAO_('Fixed length !UL byte records',
			.OUTPUT_RECATTR[FAT$W_RSIZE]);
    [FAT$C_VARIABLE]:	FAO_('Variable length');
    [FAT$C_VFC]:	FAO_('VFC, !UL byte header',
			.OUTPUT_RECATTR[FAT$B_VFCSIZE]);
    [FAT$C_STREAM]:	FAO_('Stream');
    [FAT$C_STREAMLF]:	FAO_('Stream_LF');
    [FAT$C_STREAMCR]:	FAO_('Stream_CR');
    [0]:		FAO_('Undefined');
    [OTHERWISE]:	FAO_('Unknown type = !UL',
			.OUTPUT_RECATTR[FAT$V_RTYPE]);
    TES;
IF
    .OUTPUT_RECATTR[FAT$V_RTYPE] NEQ FAT$C_FIXED AND	! If not fixed length,
    .OUTPUT_RECATTR[FAT$W_MAXREC] NEQ 0
THEN
    FAO_(', maximum !UL byte!%S', .OUTPUT_RECATTR[FAT$W_MAXREC]);
EOL_();


! Format tenth line.
!
FAO_('  Record attributes:  ');
IF .OUTPUT_RECATTR[FAT$V_IMPLIEDCC]
THEN
    FAO_('Carriage return')
ELSE IF .OUTPUT_RECATTR[FAT$V_FORTRANCC]
THEN
    FAO_('Fortran carriage control')
ELSE IF .OUTPUT_RECATTR[FAT$V_PRINTCC]
THEN
    FAO_('Print file format');


IF .OUTPUT_RECATTR[FAT$B_RATTRIB] EQL FAT$M_NOSPAN
THEN
    FAO_('Non-spanned')
ELSE
    IF .OUTPUT_RECATTR[FAT$V_NOSPAN]
    THEN
	FAO_(', Non-spanned');


IF .OUTPUT_RECATTR[FAT$B_RATTRIB] EQL 0
THEN
    FAO_('None');


EOL_();
EOL_();
END;

ROUTINE LIST_ONE_RECORD(REC,BCB): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine lists the contents of one save set record.
!
! INPUT PARAMETERS:
!	REC		- Pointer to save set record.
!	BCB		- Pointer to BCB for buffer.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!
!--

BEGIN
MAP
	REC:		REF BBLOCK,	! Pointer to save set record
	BCB:		REF BBLOCK;	! Pointer to buffer control block
L_DECL;


CASE .REC[BRH$W_RTYPE] FROM BRH$K_SUMMARY TO BRH$K_FID OF
    SET


    [BRH$K_VBN, BRH$K_LBN, BRH$K_FID, OUTRANGE]:
	0;


    [BRH$K_SUMMARY]:
	BEGIN
	GET_SUMMARY_ATTRIBUTES(.REC);
	IF .BBLOCK[.BCB[BCB_BUFFER], BBH$W_VOLNUM] GTRU 1 THEN EOL_();

	IF .BBLOCK[OUTPUT_ATTBUF[BSR_SSNAME], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Save set:          !AD',
		.BBLOCK[OUTPUT_ATTBUF[BSR_SSNAME], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[BSR_SSNAME], DSC$A_POINTER]);
	    IF .BBLOCK[.BCB[BCB_BUFFER], BBH$W_VOLNUM] GTRU 1
	    THEN
		FAO_(', volume !UL', .BBLOCK[.BCB[BCB_BUFFER], BBH$W_VOLNUM]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[BSR_USERNAME], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Written by:        !AD',
		.BBLOCK[OUTPUT_ATTBUF[BSR_USERNAME], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[BSR_USERNAME], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[BSR_USERUIC] NEQ 0
	THEN
	    BEGIN
	    FAO_('UIC:               [!OB,!OB]',
		.(OUTPUT_ATTBUF[BSR_USERUIC])<16,16>,
		.(OUTPUT_ATTBUF[BSR_USERUIC])<0,16>);
	    EOL_();
	    END;

	IF .(OUTPUT_ATTBUF[BSR_DATE]) NEQ 0
	THEN
	    BEGIN
	    FAO_('Date:              !%D',
		OUTPUT_ATTBUF[BSR_DATE]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[BSR_COMMAND], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    LOCAL
		LENGTH,
		ADDRESS;
	    LITERAL
		CHUNK_SIZE = LIST_SIZE - 19;

	    LENGTH = .BBLOCK[OUTPUT_ATTBUF[BSR_COMMAND], DSC$W_LENGTH];
	    ADDRESS = .BBLOCK[OUTPUT_ATTBUF[BSR_COMMAND], DSC$A_POINTER];
	    WHILE .LENGTH GTR 0 DO
		BEGIN
	        IF .LENGTH EQL .BBLOCK[OUTPUT_ATTBUF[BSR_COMMAND], DSC$W_LENGTH]
		    THEN FAO_('Command:           ')
		    ELSE FAO_('!19* ');
		FAO_('!AD',
		    .LENGTH,
		    .ADDRESS);
		EOL_();
		LENGTH = .LENGTH - CHUNK_SIZE;
		ADDRESS = .ADDRESS + CHUNK_SIZE;
		END;
	    END;

	IF .OUTPUT_ATTBUF[BSR_OPSYS] EQL BACKUP$K_OPSYS
	THEN
	    BEGIN
	    FAO_('Operating system:  VAX/VMS');
	    IF .BBLOCK[OUTPUT_ATTBUF[BSR_SYSVER], DSC$W_LENGTH] NEQ 0
	    THEN
		FAO_(' version !AD',
		    .BBLOCK[OUTPUT_ATTBUF[BSR_SYSVER], DSC$W_LENGTH],
		    .BBLOCK[OUTPUT_ATTBUF[BSR_SYSVER], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[BSR_BACKVER], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('BACKUP version:    !AD',
		.BBLOCK[OUTPUT_ATTBUF[BSR_BACKVER], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[BSR_BACKVER], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[BSR_SIR] NEQ 0
	THEN
	    BEGIN
	    FAO_('CPU ID register:   !XL',
		.OUTPUT_ATTBUF[BSR_SIR]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[BSR_NODENAME], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Node name:         !AD',
		.BBLOCK[OUTPUT_ATTBUF[BSR_NODENAME], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[BSR_NODENAME], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[BSR_DRIVEID], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Written on:        !AD',
		.BBLOCK[OUTPUT_ATTBUF[BSR_DRIVEID], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[BSR_DRIVEID], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[BSR_BLOCKSIZE] NEQ 0
	THEN
	    BEGIN
	    FAO_('Block size:        !UL',
		.OUTPUT_ATTBUF[BSR_BLOCKSIZE]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[BSR_XORSIZE] NEQ 0
	THEN
	    BEGIN
	    FAO_('Group size:        !UL',
		.OUTPUT_ATTBUF[BSR_XORSIZE]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[BSR_BUFFERS] NEQ 0
	THEN
	    BEGIN
	    FAO_('Buffer count:      !UL',
		.OUTPUT_ATTBUF[BSR_BUFFERS]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[BSR_NVOLS] NEQ 0
	THEN
	    BEGIN
	    EOL_();
	    FAO_('Image save of volume set');
	    EOL_();

	    IF .BBLOCK[OUTPUT_ATTBUF[BSR_VOLSETNAM], DSC$W_LENGTH] NEQ 0
	    THEN IF .(.BBLOCK[OUTPUT_ATTBUF[BSR_VOLSETNAM], DSC$A_POINTER])<0,8> GTRU %C' '
	    THEN
		BEGIN
		FAO_('Volume set name:   !AD',
		    .BBLOCK[OUTPUT_ATTBUF[BSR_VOLSETNAM], DSC$W_LENGTH],
		    .BBLOCK[OUTPUT_ATTBUF[BSR_VOLSETNAM], DSC$A_POINTER]);
		EOL_();
		END;

	    FAO_('Number of volumes: !UL',
		.OUTPUT_ATTBUF[BSR_NVOLS]);
	    EOL_();
	    END;

	EOL_();
	END;


    [BRH$K_VOLUME]:
	BEGIN
	GET_VOLUME_ATTRIBUTES(.REC);


	FAO_('Volume attributes');
	IF .OUTPUT_ATTBUF[VSR_RVN] NEQ 0
	THEN
	    FAO_(' for relative volume !UL', .OUTPUT_ATTBUF[VSR_RVN]);
	EOL_();

	IF .OUTPUT_ATTBUF[VSR_VOLSTRUCT] NEQ 0
	THEN
	    BEGIN
	    FAO_('Structure level:   !UL',
		.(OUTPUT_ATTBUF[VSR_VOLSTRUCT])<8,8>);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[VSR_VOLNAME], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Label:             !AD',
		.BBLOCK[OUTPUT_ATTBUF[VSR_VOLNAME], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[VSR_VOLNAME], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[VSR_OWNERNAME], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Owner:             !AD',
		.BBLOCK[OUTPUT_ATTBUF[VSR_OWNERNAME], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[VSR_OWNERNAME], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[VSR_VOLOWNER] NEQ 0
	THEN
	    BEGIN
	    FAO_('Owner UIC:         [!OB,!OB]',
		.(OUTPUT_ATTBUF[VSR_VOLOWNER])<16,16>,
		.(OUTPUT_ATTBUF[VSR_VOLOWNER])<0,16>);
	    EOL_();
	    END;

	IF .(OUTPUT_ATTBUF[VSR_VOLDATE]) NEQ 0
	THEN
	    BEGIN
	    FAO_('Creation date:     !%D',
		OUTPUT_ATTBUF[VSR_VOLDATE]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[VSR_SERIALNUM] NEQ 0
	THEN
	    BEGIN
	    FAO_('Serial number:     !OL',
		.OUTPUT_ATTBUF[VSR_SERIALNUM]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[VSR_VOLSIZE] NEQ 0
	THEN
	    BEGIN
	    FAO_('Total blocks:      !UL',
		.OUTPUT_ATTBUF[VSR_VOLSIZE]);
	    EOL_();
	    END;

	FAO_('Access count:      !UL',
	    .OUTPUT_ATTBUF[VSR_LRU_LIM]);
	EOL_();

	FAO_('Cluster size:      !UL',
	    .OUTPUT_ATTBUF[VSR_CLUSTER]);
	EOL_();

	FAO_('Data check:        ');
	IF (.OUTPUT_ATTBUF[VSR_VOLCHAR] AND HM2$M_READCHECK) EQL 0
	    THEN FAO_('No ');
	FAO_('Read, ');
	IF (.OUTPUT_ATTBUF[VSR_VOLCHAR] AND HM2$M_WRITCHECK) EQL 0
	    THEN FAO_('No ');
	FAO_('Write');
	EOL_();

	FAO_('Extension size:    !UL',
	    .OUTPUT_ATTBUF[VSR_EXTEND]);
	EOL_();

	FAO_('File protection:   ');
	LIST_PROTECTION(.OUTPUT_ATTBUF[VSR_FILEPROT], 'RWED');
	EOL_();

	FAO_('Maximum files:     !UL',
	    .OUTPUT_ATTBUF[VSR_MAXFILES]);
	EOL_();

	FAO_('Volume protection: ');
	LIST_PROTECTION(.OUTPUT_ATTBUF[VSR_PROTECT], 'RWCD');
	EOL_();

	FAO_('Windows:           !UL',
	    .OUTPUT_ATTBUF[VSR_WINDOW]);
	EOL_();

	IF .(OUTPUT_ATTBUF[VSR_RETAINMIN]) NEQ 0
	THEN
	    BEGIN
	    FAO_('Minimum retention: !%D',
		OUTPUT_ATTBUF[VSR_RETAINMIN]);
	    EOL_();
	    END;

	IF .(OUTPUT_ATTBUF[VSR_RETAINMAX]) NEQ 0
	THEN
	    BEGIN
	    FAO_('Maximum retention: !%D',
		OUTPUT_ATTBUF[VSR_RETAINMAX]);
	    EOL_();
	    END;

	EOL_();
	END;


    [BRH$K_PHYSVOL]:
	BEGIN
	GET_PHYSVOL_ATTRIBUTES(.REC);


	FAO_('Physical save of volume');
	EOL_();

	IF .BBLOCK[OUTPUT_ATTBUF[PVA_DEVNAM], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Device:            !AD',
		.BBLOCK[OUTPUT_ATTBUF[PVA_DEVNAM], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[PVA_DEVNAM], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[PVA_DEVTYP] LEQU DT$_RZF01
	THEN
	    BEGIN
	    BIND
		DEVTYPES = UPLIT (
		    UPLIT BYTE (%ASCIC ''),		! 0
		    UPLIT BYTE (%ASCIC 'RK06'),		! 1
		    UPLIT BYTE (%ASCIC 'RK07'),		! 2
		    UPLIT BYTE (%ASCIC 'RP04'),		! 3
		    UPLIT BYTE (%ASCIC 'RP05'),		! 4
		    UPLIT BYTE (%ASCIC 'RP06'),		! 5
		    UPLIT BYTE (%ASCIC 'RM03'),		! 6
		    UPLIT BYTE (%ASCIC 'RP07'),		! 7
		    UPLIT BYTE (%ASCIC 'RP07HT'),	! 8
		    UPLIT BYTE (%ASCIC 'RL01'),		! 9
		    UPLIT BYTE (%ASCIC 'RL02'),		! 10
		    UPLIT BYTE (%ASCIC 'RX02'),		! 11
		    UPLIT BYTE (%ASCIC 'RX04'),		! 12
		    UPLIT BYTE (%ASCIC 'RM80'),		! 13
		    UPLIT BYTE (%ASCIC 'TU58'),		! 14
		    UPLIT BYTE (%ASCIC 'RM05'),		! 15
		    UPLIT BYTE (%ASCIC 'RX01'),		! 16
		    UPLIT BYTE (%ASCIC 'ML11'),		! 17
		    UPLIT BYTE (%ASCIC 'RB02'),		! 18
		    UPLIT BYTE (%ASCIC 'RB80'),		! 19
		    UPLIT BYTE (%ASCIC 'RA80'),		! 20
		    UPLIT BYTE (%ASCIC 'RA81'),		! 21
		    UPLIT BYTE (%ASCIC 'RA60'),		! 22
		    UPLIT BYTE (%ASCIC 'RZ01'),		! 23
		    UPLIT BYTE (%ASCIC 'RZF01'))	! 24
		: VECTOR;

	    FAO_('Device type:       !AC',
		.DEVTYPES[.OUTPUT_ATTBUF[PVA_DEVTYP]]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[PVA_SERIAL] NEQ 0
	THEN
	    BEGIN
	    FAO_('Serial number:     !OL',
		.OUTPUT_ATTBUF[PVA_SERIAL]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[PVA_LABEL], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    FAO_('Label:             !AD',
		.BBLOCK[OUTPUT_ATTBUF[PVA_LABEL], DSC$W_LENGTH],
		.BBLOCK[OUTPUT_ATTBUF[PVA_LABEL], DSC$A_POINTER]);
	    EOL_();
	    END;

	IF .OUTPUT_ATTBUF[PVA_MAXBLOCK] NEQ 0
	THEN
	    BEGIN
	    FAO_('Total blocks:      !UL',
		.OUTPUT_ATTBUF[PVA_MAXBLOCK]);
	    EOL_();
	    END;

	IF .BBLOCK[OUTPUT_ATTBUF[PVA_BADBLOCK], DSC$W_LENGTH] NEQ 0
	THEN
	    BEGIN
	    LOCAL P: REF VECTOR;
	    P = .BBLOCK[OUTPUT_ATTBUF[PVA_BADBLOCK], DSC$A_POINTER];
	    WHILE .P LSSA
		.BBLOCK[OUTPUT_ATTBUF[PVA_BADBLOCK], DSC$A_POINTER] +
		.BBLOCK[OUTPUT_ATTBUF[PVA_BADBLOCK], DSC$W_LENGTH]
	    DO
		BEGIN
		IF .P EQL .BBLOCK[OUTPUT_ATTBUF[PVA_BADBLOCK], DSC$A_POINTER]
		    THEN FAO_('Bad block numbers: ')
		    ELSE FAO_('!19* ');
		FAO_('!UL', .P[0]);
		IF .P[1] NEQ 1 THEN FAO_(' to !UL', .P[0] + .P[1] - 1);
		EOL_();
		P = .P + 8;
		END;
	    END;

	EOL_();
	END;


    [BRH$K_FILE]:
	BEGIN
	LOCAL
	    BLOCKS;		! File size


	GET_FILE_ATTRIBUTES(.REC);


	BLOCKS = ROT(.OUTPUT_RECATTR[FAT$L_EFBLK], 16);
	IF .OUTPUT_RECATTR[FAT$W_FFBYTE] EQL 0 AND .BLOCKS NEQ 0
	    THEN BLOCKS = .BLOCKS - 1;


	LIST_TOTFILES = .LIST_TOTFILES + 1;
	LIST_TOTSIZE = .LIST_TOTSIZE + .BLOCKS;


	IF .QUAL[QUAL_FULL]
	THEN
	    FULL_LISTING()
	ELSE
	    BEGIN
	    IF .OUTPUT_FILENAME[DSC$W_LENGTH] GTR 52
	    THEN
		BEGIN
		FAO_('!AS', OUTPUT_FILENAME);
		EOL_();
		FAO_('!52* ');
		END
	    ELSE
		FAO_('!52AS', OUTPUT_FILENAME);

	    FAO_('!9SL  !17%D', .BLOCKS, OUTPUT_ATTBUF[FAR_CREDATE]);
	    EOL_();
	    END;
	END;


    TES;
END;

GLOBAL ROUTINE INIT_LIST: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine initializes a listing.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	LIST_FAB:	REF BBLOCK,	! FAB for listing file
	P$AREA:		VECTOR[P$SIZE];	! Impure area
GLOBAL REGISTER
	P$ = 11:	REF VECTOR;	! Impure area base register


! Initialize impure area.
!
P$ = P$AREA;
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;


! Open the listing file.
!
LIST_FAB = .QUAL[QUAL_LIST_FC];
LIST_FAB[FAB$B_DNS] = %CHARCOUNT('BACKUP.LIS');
LIST_FAB[FAB$L_DNA] = UPLIT BYTE('BACKUP.LIS');
LIST_FAB[FAB$V_PUT] = TRUE;
IF .LIST_FAB[FAB$B_FNS] EQL 0
THEN
    BEGIN
    LIST_FAB[FAB$B_FNS] = %CHARCOUNT('SYS$OUTPUT:');
    LIST_FAB[FAB$L_FNA] = UPLIT BYTE('SYS$OUTPUT:');
    END;
LIST_FAB[FAB$V_SQO] = TRUE;
LIST_FAB[FAB$V_CR] = TRUE;
LIST_FAB[FAB$B_RFM] = FAB$C_VAR;
BBLOCK[LIST_FAB[FC_RAB], RAB$V_WBH] = TRUE;


IF NOT $CREATE(FAB=.LIST_FAB)
THEN
    FILE_ERROR(
	BACKUP$_OPENOUT + STS$K_SEVERE,
	.LIST_FAB,
	.LIST_FAB[FAB$L_STS],
	.LIST_FAB[FAB$L_STV]);


IF NOT $CONNECT(RAB=LIST_FAB[FC_RAB])
THEN
    FILE_ERROR(
	BACKUP$_OPENOUT + STS$K_SEVERE,
	.LIST_FAB,
	.BBLOCK[LIST_FAB[FC_RAB], RAB$L_STS],
	.BBLOCK[LIST_FAB[FC_RAB], RAB$L_STV]);


! Put a header on the listing.
!
FAO_('Listing of ');
IF .QUAL[QUAL_INPU_LIST] NEQ 0
THEN
    BEGIN
    FAO_('save set');
    EOL_();
    END
ELSE
    FAO_('BACKUP journal');
EOL_();
END;

GLOBAL ROUTINE FIN_LIST: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine terminates a listing.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	LIST_FAB:	REF BBLOCK,	! FAB for listing file
	P$AREA:		VECTOR[P$SIZE];	! Impure area
GLOBAL REGISTER
	P$ = 11:	REF VECTOR;	! Impure area base register


! Initialize impure area.
!
P$ = P$AREA;
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;


! Finish up the listing.
!
EOL_();
IF .LIST_TOTFILES NEQ 0
THEN
    BEGIN
    FAO_('Total of !UL file!%S, !UL block!%S', .LIST_TOTFILES, .LIST_TOTSIZE);
    EOL_();
    END;
FAO_('End of ');
IF .QUAL[QUAL_INPU_LIST] NEQ 0
    THEN FAO_('save set')
    ELSE FAO_('BACKUP journal');
EOL_();


! Close the listing file.
!
LIST_FAB = .QUAL[QUAL_LIST_FC];
IF NOT $CLOSE(FAB=.LIST_FAB)
THEN
    FILE_ERROR(
	BACKUP$_CLOSEOUT + STS$K_SEVERE,
	.LIST_FAB,
	.LIST_FAB[FAB$L_STS],
	.LIST_FAB[FAB$L_STV]);
END;

GLOBAL ROUTINE CONCURRENT_LIST(BCB): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine generates a concurrent listing -- that is, a listing
!	during a save, restore, compare, or copy operation.
!
! INPUT PARAMETERS:
!	BCB		- Pointer to BCB for buffer to list.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Listing is produced.
!
!--

BEGIN
LOCAL
	SAVE_ATTBUF:	BBLOCK[ATTBUF_LENGTH],	! Save for OUTPUT_ATTBUF
	P$AREA:		VECTOR[P$SIZE];		! Impure area
GLOBAL REGISTER
	P$ = 11:	REF VECTOR;		! Impure area base register


! Initialize impure area.
!
P$ = P$AREA;
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;


! Save attribute area so that attribute processing during the listing
! will be transparent to the caller.
!
CH$MOVE(ATTBUF_LENGTH, OUTPUT_ATTBUF, SAVE_ATTBUF);


! Do the listing.  The third parameter to DEBLOCK prevents the buffer
! from being released.
!
DEBLOCK(.BCB, LIST_ONE_RECORD, TRUE);


! Restore saved area.
!
CH$MOVE(ATTBUF_LENGTH, SAVE_ATTBUF, OUTPUT_ATTBUF);
END;

GLOBAL ROUTINE LIST: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the driver for listing-only generation.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	BCB,				! Pointer to buffer control block
	P$AREA:		VECTOR[P$SIZE];	! Impure area
GLOBAL REGISTER
	P$ = 11:	REF VECTOR;	! Impure area base register
BUILTIN
	FP;


! Establish the handler.
!
.FP = RESTORE_HANDLER;


! Initialize impure area.
!
P$ = P$AREA;
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;


! Do the listing.
!
INIT_IN_SAVE(FALSE);
WHILE (BCB = READ_BUFFER()) NEQ 0 DO DEBLOCK(.BCB, LIST_ONE_RECORD);
FIN_IN_SAVE(FALSE);
END;

END
ELUDOM
