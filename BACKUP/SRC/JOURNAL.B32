MODULE JOURNAL	(%TITLE	'Journal file manager'
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that manage the journal file.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 8-Apr-1981
!
! MODIFIED BY:
!
!	V02-003	MLJ0054		Martin L. Jack,	22-Nov-1981  22:11
!		Integrate GET_VM and FREE_VM jacket routines.
!
!	V02-002	MLJ0036		Martin L. Jack,	28-Aug-1981  17:53
!		Replace OWN storage with common variables.  Remove explicit
!		routine parameters.
!
!	V02-001	MLJ0025		Martin L. Jack,	8-May-1981  11:48
!		Reorganize OWN storage.  Dynamically allocate directory string
!		buffer.  Don't bother to free dynamic memory.
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:BACKDEF';


FORWARD ROUTINE
	OPEN_JOURNAL:	NOVALUE,	! Open or create journal file
	CLOSE_JOURNAL:	NOVALUE,	! Close journal file
	WRITE_BLOCK:	NOVALUE,	! Write block to journal file
	WRITE_BYTE:	NOVALUE,	! Write byte to journal file
	WRITE_RECORD:	NOVALUE,	! Write record to journal file
	WRITE_JOUR_SSNAME:
			NOVALUE,	! Write SSNAME record
	WRITE_JOUR_VOLUME:
			NOVALUE,	! Write VOLUME record
	WRITE_JOUR_FILE:NOVALUE,	! Write DIRECTORY and FILE record
	WRITE_JOUR_DIRECTORY:
			NOVALUE;	! Write final DIRECTORY record


EXTERNAL ROUTINE
	GET_VM,				! Allocate virtual memory
	GET_ZERO_VM,			! Allocate and clear virtual memory
	FILE_ERROR:	NOVALUE;	! Signal file-related error


EXTERNAL LITERAL
	BACKUP$_OPENIN,
	BACKUP$_OPENOUT,
	BACKUP$_READERR,
	BACKUP$_WRITEERR,
	BACKUP$_READATTR,
	BACKUP$_WRITEATTR,
	BACKUP$_NOTJOURNAL,
	BACKUP$_JOURNAL,
	BACKUP$_INVBJLTYP,
	BACKUP$_INVBJLSIZ,
	BACKUP$_INVBJLSTR,
	BACKUP$_INVBJLEOF;


G$DEFINE();			! Define global common area


BUILTIN
	ROT;


BIND
	STRUC_RECORD = UPLIT BYTE (
	    WORD(BJL$K_LEVEL1));

GLOBAL ROUTINE OPEN_JOURNAL(OUTPUT,REVERSE): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine opens (or creates) the journal file.
!
! INPUT PARAMETERS:
!	OUTPUT		- True if the journal file is being written, false if
!			  being read.
!	REVERSE		- True if the journal file is being read backward,
!			  false if being read forward.  Required only if
!			  OUTPUT is false.
!
! IMPLICIT INPUTS:
!	QUAL[QUAL_JOUR_FC] - Pointer to FAB for journal file.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	FAB:		REF BBLOCK,	! Pointer to FAB
	STATUS,				! Status variable
	IOSB:		VECTOR[4,WORD],	! I/O status block
	ATR_DESC:	BBLOCK[20],	! ACP attributes list
	RECATTR:	BBLOCK[FAT$C_LENGTH],	! Record attributes area
	STATBLK:	BBLOCK[8];	! Statistics block


! Initialize the FAB.
!
FAB = .QUAL[QUAL_JOUR_FC];
FAB[FAB$L_DNA] = UPLIT BYTE('.BJL');
FAB[FAB$B_DNS] = %CHARCOUNT('.BJL');
IF .FAB[FAB$B_FNS] EQL 0
THEN
    BEGIN
    FAB[FAB$L_FNA] = UPLIT BYTE('_BACKUP');
    FAB[FAB$B_FNS] = %CHARCOUNT('_BACKUP');
    END;
FAB[FAB$V_UFO] = TRUE;
FAB[FAB$B_RFM] = FAB$C_FIX;
FAB[FAB$W_MRS] = 1;


! Issue the OPEN or CREATE service as appropriate.
!
IF .OUTPUT
THEN
    BEGIN
    FAB[FAB$V_CIF] = TRUE;
    IF NOT $CREATE(FAB=.FAB)
    THEN
	FILE_ERROR(
	    BACKUP$_OPENOUT + STS$K_SEVERE,
	    .FAB,
	    .FAB[FAB$L_STS], .FAB[FAB$L_STV]);
    END
ELSE
    BEGIN
    IF NOT $OPEN(FAB=.FAB)
    THEN
	FILE_ERROR(
	    BACKUP$_OPENIN + STS$K_SEVERE,
	    .FAB,
	    .FAB[FAB$L_STS], .FAB[FAB$L_STV]);
    END;


! Get the record attributes and the file size.
!
ATR_DESC[0,0,16,0] = ATR$S_RECATTR;
ATR_DESC[2,0,16,0] = ATR$C_RECATTR;
ATR_DESC[4,0,32,0] = RECATTR;
ATR_DESC[8,0,16,0] = 8;		! only need 8 bytes of statistics block
ATR_DESC[10,0,16,0] = ATR$C_STATBLK;
ATR_DESC[12,0,32,0] = STATBLK;
ATR_DESC[16,0,32,0] = 0;
STATUS = $QIOW(
    FUNC=IO$_ACCESS,
    CHAN=.FAB[FAB$L_STV],
    IOSB=IOSB,
    P5=ATR_DESC);
IF .STATUS THEN STATUS = .IOSB[0];
IF NOT .STATUS
THEN
    FILE_ERROR(
	BACKUP$_READATTR,
	.FAB,
	.STATUS);


! Check the record attributes to ensure that this is, in fact, a BACKUP
! journal file.  If the file is zero length, allow any attributes and then
! force them correct.  For example, this allows the CREATE command to be
! used to generate a fresh journal.
!
IF .STATBLK[SBK$L_FILESIZE] NEQ 0
THEN
    IF
	.RECATTR[FAT$B_RTYPE] NEQ FAT$C_FIXED OR
	.RECATTR[FAT$B_RATTRIB] NEQ 0 OR
	.RECATTR[FAT$W_RSIZE] NEQ 1
    THEN
	FILE_ERROR(
	    BACKUP$_NOTJOURNAL,
	    .FAB);


! Save the critical attributes for further processing.
!
JOUR_HIBLK = ROT(.STATBLK[SBK$L_FILESIZE], 16);
JOUR_EFBLK = ROT(.RECATTR[FAT$L_EFBLK], 16);
JOUR_FFBYTE = .RECATTR[FAT$W_FFBYTE];


! Initialize other context.
!
JOUR_COUNT = 0;
JOUR_BUFFER = GET_VM(512);
JOUR_DIR = GET_ZERO_VM(BJL$C_DIR_LEN+1);


! Initialize for input or output processing, as appropriate.
!
IF .OUTPUT
THEN
    BEGIN

    ! Read back last block if it exists and is not full.
    !
    IF .JOUR_EFBLK LEQU .JOUR_HIBLK AND .JOUR_FFBYTE NEQ 512
    THEN
	BEGIN
	STATUS = $QIOW(
	    FUNC=IO$_READVBLK,
	    CHAN=.FAB[FAB$L_STV],
	    IOSB=IOSB,
	    P1=.JOUR_BUFFER,
	    P2=512,
	    P3=.JOUR_EFBLK);
	IF .STATUS THEN STATUS = .IOSB[0];
	IF NOT .STATUS
	THEN
	    FILE_ERROR(
		BACKUP$_READERR + STS$K_SEVERE,
		.FAB,
		.STATUS);
	END
    ELSE
	CH$FILL(0, 512, .JOUR_BUFFER);


    ! Log the file name if requested.
    !
    IF .QUAL[QUAL_LOG]
    THEN
	FILE_ERROR(BACKUP$_JOURNAL, .FAB);


    ! Write structure-level record.
    !
    JOUR_COUNT = 0;			! Initialize XOR byte count
    WRITE_RECORD(
	BJL$K_STRUCLEV,
	BJL$C_STRUC_LEN,
	STRUC_RECORD);
    END
ELSE
    BEGIN

    ! Establish pointer to current input byte.  The pointer always points to
    ! the byte that would have been returned on a previous call to READ_BYTE
    ! in the established reading direction.
    !
    JOUR_REVERSE = .REVERSE;
    IF .REVERSE
    THEN
	BEGIN
	JOUR_INBLK = .JOUR_EFBLK;
	JOUR_INBYTE = .JOUR_FFBYTE;
	END
    ELSE
	BEGIN
	JOUR_INBLK = 0;
	JOUR_INBYTE = 511;
	END;


    ! Read first block if it exists.
    !
    IF .JOUR_INBLK NEQ 0 AND .JOUR_INBLK LEQU .JOUR_HIBLK
    THEN
	BEGIN
	STATUS = $QIOW(
	    FUNC=IO$_READVBLK,
	    CHAN=.FAB[FAB$L_STV],
	    IOSB=IOSB,
	    P1=.JOUR_BUFFER,
	    P2=512,
	    P3=.JOUR_INBLK);
	IF .STATUS THEN STATUS = .IOSB[0];
	IF NOT .STATUS
	THEN
	    FILE_ERROR(
		BACKUP$_READERR + STS$K_SEVERE,
		.FAB,
		.STATUS);
	END;
    END;
END;

GLOBAL ROUTINE CLOSE_JOURNAL(OUTPUT): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine closes the journal file.
!
! INPUT PARAMETERS:
!	OUTPUT		- True if the journal file is being written, false if
!			  being read.
!
! IMPLICIT INPUTS:
!	QUAL[QUAL_JOUR_FC] - Pointer to FAB for journal file.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	FAB:		REF BBLOCK,	! Pointer to FAB for journal file
	STATUS,				! Status variable
	IOSB:		VECTOR[4,WORD],	! I/O status block
	ATR_DESC:	BBLOCK[20],	! ACP attributes list
	RECATTR:	BBLOCK[FAT$C_LENGTH];	! Record attributes area


FAB = .QUAL[QUAL_JOUR_FC];


! Write the last buffer if required.
!
IF .OUTPUT
THEN
    BEGIN
    
    ! Write structure-level record.
    !
    WRITE_RECORD(
	BJL$K_STRUCLEV,
	BJL$C_STRUC_LEN,
	STRUC_RECORD);
    WRITE_BYTE(.JOUR_COUNT);			! Final byte count


    ! Write last buffer.
    !
    WRITE_BLOCK();


    ! Generate record attributes.
    !
    CH$FILL(0, FAT$C_LENGTH, RECATTR);
    RECATTR[FAT$B_RTYPE] = FAT$C_FIXED;
    RECATTR[FAT$W_RSIZE] = 1;
    RECATTR[FAT$L_HIBLK] = ROT(.JOUR_HIBLK, 16);
    RECATTR[FAT$L_EFBLK] = ROT(.JOUR_EFBLK, 16);
    RECATTR[FAT$W_FFBYTE] = .JOUR_FFBYTE;


    ! Write record attributes.
    !
    ATR_DESC[0,0,16,0] = ATR$S_RECATTR;
    ATR_DESC[2,0,16,0] = ATR$C_RECATTR;
    ATR_DESC[4,0,32,0] = RECATTR;
    ATR_DESC[8,0,32,0] = 0;
    STATUS = $QIOW(
	FUNC=IO$_DEACCESS,
	CHAN=.FAB[FAB$L_STV],
	IOSB=IOSB,
	P5=ATR_DESC);
    IF .STATUS THEN STATUS = .IOSB[0];
    IF NOT .STATUS
    THEN
	FILE_ERROR(
	    BACKUP$_WRITEATTR,
	    .FAB,
	    .STATUS);
    END;


! Deassign the channel.
!
$DASSGN(CHAN=.FAB[FAB$L_STV]);
END;

ROUTINE WRITE_BLOCK: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes a block to the journal file, extending it if
!	necessary.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	FAB:		REF BBLOCK,	! Pointer to FAB for journal file
	STATUS,				! Status variable
	IOSB:		VECTOR[4,WORD],	! I/O status block
	FIB:		BBLOCK[FIB$C_LENGTH],	! FIB
	FIB_DESC:	VECTOR[2];	! Descriptor for FIB


! Find the FAB.
!
FAB = .QUAL[QUAL_JOUR_FC];


! If there is insufficient space in the file, extend it before writing.
!
IF .JOUR_HIBLK LSSU .JOUR_EFBLK
THEN
    BEGIN
    FIB_DESC[0] = FIB$C_LENGTH;
    FIB_DESC[1] = FIB;
    CH$FILL(0, FIB$C_LENGTH, FIB);
    FIB[FIB$V_EXTEND] = TRUE;
    FIB[FIB$L_EXSZ] = 1;
    STATUS = $QIOW(
	FUNC=IO$_MODIFY,
	CHAN=.FAB[FAB$L_STV],
	IOSB=IOSB,
	P1=FIB_DESC);
    IF .STATUS THEN STATUS = .IOSB[0];
    IF NOT .STATUS
    THEN
	FILE_ERROR(
	    BACKUP$_WRITEERR + STS$K_SEVERE,
	    .FAB,
	    .STATUS);
    JOUR_HIBLK = .JOUR_HIBLK + .FIB[FIB$L_EXSZ];
    END;


! Write the block.
!
STATUS = $QIOW(
    FUNC=IO$_WRITEVBLK,
    CHAN=.FAB[FAB$L_STV],
    IOSB=IOSB,
    P1=.JOUR_BUFFER,
    P2=512,
    P3=.JOUR_EFBLK);
IF .STATUS THEN STATUS = .IOSB[0];
IF NOT .STATUS
THEN
    FILE_ERROR(
	BACKUP$_WRITEERR + STS$K_SEVERE,
	.FAB,
	.STATUS);
END;

ROUTINE WRITE_BYTE(VALUE): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes one byte to the journal file.
!
! INPUT PARAMETERS:
!	VALUE		- Value to be written.
!
! IMPLICIT INPUTS:
!	QUAL[QUAL_JOUR_FC] - Pointer to FAB for journal file.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

! If there is insufficient space in the current buffer, write it and initialize
! another.
!
IF .JOUR_FFBYTE GEQU 512
THEN
    BEGIN
    WRITE_BLOCK();
    CH$FILL(0, 512, .JOUR_BUFFER);
    JOUR_EFBLK = .JOUR_EFBLK + 1;
    JOUR_FFBYTE = 0;
    END;


! Write the byte into the buffer.
!
JOUR_BUFFER[.JOUR_FFBYTE] = .VALUE;
JOUR_FFBYTE = .JOUR_FFBYTE + 1;
END;

ROUTINE WRITE_RECORD(TYPE,LENGTH,ADDRESS): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes a record in the journal file.
!
! INPUT PARAMETERS:
!	TYPE		- Record type.
!	LENGTH		- Length of data portion.
!	ADDRESS		- Address of data portion.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	ADDRESS:	REF VECTOR[,BYTE];	! Pointer to record


WRITE_BYTE(.JOUR_COUNT XOR (.LENGTH + 1));	! XOR byte count
WRITE_BYTE(.TYPE);				! Type code
INCR I FROM 0 TO .LENGTH-1 DO WRITE_BYTE(.ADDRESS[.I]);
JOUR_COUNT = .LENGTH + 1;
END;

GLOBAL ROUTINE WRITE_JOUR_SSNAME: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the save set name record in the journal file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	JPI_DATE	- Current date
!	COM_SSNAME	- Save set name
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	BUFFER:		BBLOCK[BJL$C_SSNAME_LEN];	! Area to build record


! Assemble the record.
!
(BUFFER[BJL$Q_CREDATE]) = .JPI_DATE[0];
(BUFFER[BJL$Q_CREDATE]+4) = .JPI_DATE[1];
CH$MOVE(
    .COM_SSNAME[DSC$W_LENGTH],
    .COM_SSNAME[DSC$A_POINTER],
    BUFFER[BJL$T_SSNAME]);


! Write the record.
!
WRITE_RECORD(
    BJL$K_SSNAME,
    $BYTEOFFSET(BJL$T_SSNAME) + .COM_SSNAME[DSC$W_LENGTH],
    BUFFER);
END;

GLOBAL ROUTINE WRITE_JOUR_VOLUME: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the volume identification record
!	in the journal file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	RWSV_VOLUME_ID	- Current volume label
!	RWSV_VOL_NUMBER	- Current volume number
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	BUFFER:		BBLOCK[BJL$C_VOLUME_LEN];	! Area to build record


! Assemble the record.
!
CH$COPY(
    %ALLOCATION(RWSV_VOLUME_ID), RWSV_VOLUME_ID,
    %C' ',
    BJL$S_VOLNAME, BUFFER[BJL$T_VOLNAME]);
BUFFER[BJL$W_VOLNUMBER] = .RWSV_VOL_NUMBER;


! Write the record.
!
WRITE_RECORD(
    BJL$K_VOLUME,
    BJL$C_VOLUME_LEN,
    BUFFER);
END;

GLOBAL ROUTINE WRITE_JOUR_FILE: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the file name record (and directory name record,
!	if required) in the journal file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	INPUT_NAM	- File specification in resultant string
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

! Write the directory record if necessary.
!
IF CH$NEQ(
    .INPUT_NAM[NAM$B_DIR]-2, .INPUT_NAM[NAM$L_DIR]+1,
    BJL$C_DIR_LEN, JOUR_DIR[1],
    0)
THEN
    BEGIN
    LOCAL
	P,				! Temp
	REC_LENGTH;			! Length of directory record


    ! Establish the XOR of the new and old directory strings.
    !
    INCR I FROM 0 TO .INPUT_NAM[NAM$B_DIR]-2-1 DO
	JOUR_DIR[.I+1] = .JOUR_DIR[.I+1] XOR
	    .VECTOR[.INPUT_NAM[NAM$L_DIR]+1, .I ;,BYTE];


    ! Strip leading nulls from the XOR.
    !
    P = CH$FIND_NOT_CH(BJL$C_DIR_LEN, JOUR_DIR[1], 0);	! Find non-null
    IF .P EQL 0 THEN P = JOUR_DIR[1];		! Entire string is null	
    P = .P - 1;					! Point to previous byte
    (.P)<0,8> = .P - JOUR_DIR[0];		! Set count of leading nulls


    ! Strip trailing nulls from the XOR.
    !
    REC_LENGTH = 1;
    DECRA Q FROM JOUR_DIR[BJL$C_DIR_LEN] TO .P+1 DO
	BEGIN
	IF .(.Q)<0,8> NEQ 0
	THEN
	    BEGIN
	    REC_LENGTH = .Q - .P + 1;
	    EXITLOOP;
	    END;
	END;


    ! Write the directory record.
    !
    WRITE_RECORD(
	BJL$K_DIRECTORY,
	.REC_LENGTH,
	.P);


    ! Save the new directory string.
    !
    CH$COPY(
	.INPUT_NAM[NAM$B_DIR]-2, .INPUT_NAM[NAM$L_DIR]+1,
	0,
	BJL$C_DIR_LEN, JOUR_DIR[1]);
    END;


! Write the file record.
!
WRITE_RECORD(
    BJL$K_FILE,
    .INPUT_NAM[NAM$L_RSA] + .INPUT_NAM[NAM$B_RSL] - .INPUT_NAM[NAM$L_NAME],
    .INPUT_NAM[NAM$L_NAME]);
END;

GLOBAL ROUTINE WRITE_JOUR_DIRECTORY: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the final directory name record
!	in the journal file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	P,				! Temp
	REC_LENGTH;			! Length of directory record


! Note that there are no leading nulls in the directory string.
! Strip trailing nulls from the directory string.  Since the directory string
! is printable ASCII, there can be no embedded nulls.
!
JOUR_DIR[0] = 0;				! Zero leading nulls
REC_LENGTH = BJL$C_DIR_LEN + 1;			! Assume no null found
P = CH$FIND_CH(BJL$C_DIR_LEN, JOUR_DIR[1], 0);	! Find first null
IF .P NEQ 0 THEN REC_LENGTH = .P - JOUR_DIR[0];	! Establish count


! Write the directory record.
!
WRITE_RECORD(
    BJL$K_DIRECTORY,
    .REC_LENGTH,
    JOUR_DIR[0]);
END;

ROUTINE READ_BYTE(BUFFER)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine reads one byte from the journal file, reading a new
!	block if necessary.
!
! INPUT PARAMETERS:
!	BUFFER		- Pointer to where byte will be returned.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Byte successfully returned.
!	SS$_ENDOFFILE	- End (beginning) of file, no byte returned.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	ORIG_INBLK;		! Original block


! Establish the new file position and test for end of file.
!
ORIG_INBLK = .JOUR_INBLK;		! Save position to check for change
IF .JOUR_REVERSE			! Reading in reverse?
THEN
    BEGIN
    IF .JOUR_INBYTE EQL 0		! Any more bytes in this block?
    THEN
	BEGIN				! No more bytes in current block
	JOUR_INBLK = .JOUR_INBLK - 1;	! Decrease block number
	IF .JOUR_INBLK EQL 0		! If block number has reached 0
	    THEN RETURN SS$_ENDOFFILE;	! then return end of file
	JOUR_INBYTE = 512;		! Reset to byte following end of block
	END;
    JOUR_INBYTE = .JOUR_INBYTE - 1;	! Decrease byte number
    END
ELSE
    BEGIN
    JOUR_INBYTE = .JOUR_INBYTE + 1;	! Increase byte number
    IF .JOUR_INBYTE GEQU 512		! Any more bytes in this block?
    THEN
	BEGIN				! No more bytes in current block
	JOUR_INBLK = .JOUR_INBLK + 1;	! Increase block number
	JOUR_INBYTE = 0;		! Reset to first byte of block
	END;
    IF .JOUR_INBLK GEQU .JOUR_EFBLK AND .JOUR_INBYTE GEQU .JOUR_FFBYTE
	THEN RETURN SS$_ENDOFFILE;	! Check for end of file
    END;


! Read next block if necessary.
!
IF .ORIG_INBLK NEQ .JOUR_INBLK
THEN
    BEGIN
    LOCAL
	STATUS,				! Status variable
	IOSB:		VECTOR[4,WORD],	! I/O status block
	FAB:		REF BBLOCK;	! Pointer to FAB for journal file

    FAB = .QUAL[QUAL_JOUR_FC];
    STATUS = $QIOW(
	FUNC=IO$_READVBLK,
	CHAN=.FAB[FAB$L_STV],
	IOSB=IOSB,
	P1=.JOUR_BUFFER,
	P2=512,
	P3=.JOUR_INBLK);
    IF .STATUS THEN STATUS = .IOSB[0];
    IF NOT .STATUS
    THEN
	FILE_ERROR(
	    BACKUP$_READERR + STS$K_SEVERE,
	    .FAB,
	    .STATUS);
    END;


! Return the required byte, and success.
!
(.BUFFER)<0,8> = .JOUR_BUFFER[.JOUR_INBYTE];
SS$_NORMAL
END;

GLOBAL ROUTINE READ_JOURNAL(BUFFER)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine reads a record from the journal file and validity checks
!	various fields.
!
! INPUT PARAMETERS:
!	BUFFER		- Pointer to input buffer, where record is returned in
!			  ASCIC format.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Record successfully returned.
!	SS$_ENDOFFILE	- End (beginning) of file, no record returned.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	BUFFER:		REF BBLOCK;


! Read byte count and convert to true byte count using XOR context.  If the
! byte count is zero, in a well-formed journal file, it means that we have
! reached the end of the data for a save set, and the next byte, if it
! exists, is the initial byte count for the next save set.
!
DO
    BEGIN
    IF NOT READ_BYTE(BUFFER[BJL$B_SIZE]) THEN RETURN SS$_ENDOFFILE;
    JOUR_COUNT = .JOUR_COUNT XOR .BUFFER[BJL$B_SIZE];
    END
WHILE .JOUR_COUNT EQL 0;
BUFFER[BJL$B_SIZE] = .JOUR_COUNT;


! Read remainder of record.
!
IF .JOUR_REVERSE
THEN
    DECR I FROM .JOUR_COUNT TO 1 DO
	BEGIN
	IF NOT READ_BYTE(BUFFER[.I,0,8,0]) THEN SIGNAL(BACKUP$_INVBJLEOF);
	END
ELSE
    INCR I FROM 1 TO .JOUR_COUNT DO
	BEGIN
	IF NOT READ_BYTE(BUFFER[.I,0,8,0]) THEN SIGNAL(BACKUP$_INVBJLEOF);
	END;


! Do type-specific checking of the record.
!
CASE .BUFFER[BJL$B_TYPE] FROM BJL$K_STRUCLEV TO BJL$K_FILE OF
    SET


    [BJL$K_STRUCLEV]:
	BEGIN

	! The record length must be exactly correct, and the structure level
	! must be correct.
	!
	IF .BUFFER[BJL$B_SIZE] NEQ BJL$C_STRUC_LEN+1
	    THEN SIGNAL(BACKUP$_INVBJLSIZ);
	IF .BBLOCK[BUFFER[BJL$B_DATA], BJL$W_STRUCLEV] NEQ BJL$K_LEVEL1
	    THEN SIGNAL(BACKUP$_INVBJLSTR);
	END;


    [BJL$K_SSNAME]:
	BEGIN

	! The record must be long enough to cover the creation
	! date, but not more than the maximum size.
	!
	IF .BUFFER[BJL$B_SIZE] LSSU $BYTEOFFSET(BJL$T_SSNAME)+1
	OR .BUFFER[BJL$B_SIZE] GTRU BJL$C_SSNAME_LEN+1
	    THEN SIGNAL(BACKUP$_INVBJLSIZ);
	END;


    [BJL$K_VOLUME]:
	BEGIN

	! The record must be exactly the correct size.
	!
	IF .BUFFER[BJL$B_SIZE] NEQ BJL$C_VOLUME_LEN+1
	    THEN SIGNAL(BACKUP$_INVBJLSIZ);
	END;


    [BJL$K_DIRECTORY]:
	BEGIN
	LOCAL
	    P,				! Temp
	    LEADING_NULLS;		! Count of leading nulls in XOR


	! The record must be long enough to cover the leading-null count,
	! but not longer than the maximum.  The count of real data plus the
	! count of leading nulls must not exceed the maximum.
	!
	IF .BUFFER[BJL$B_SIZE] LSSU 2
	OR .BUFFER[BJL$B_SIZE] GTRU BJL$C_DIR_LEN+1
	OR .BUFFER[BJL$B_SIZE]+.BUFFER[BJL$B_DATA] GTRU BJL$C_DIR_LEN+2
	    THEN SIGNAL(BACKUP$_INVBJLSIZ);


	! Pick up count of implicit leading nulls.
	!
	LEADING_NULLS = .BUFFER[BJL$B_DATA];


	! Compute XOR of bytes in record and bytes of context to develop
	! true value.
	!
	INCR I FROM $BYTEOFFSET(BJL$B_DATA)+1 TO .JOUR_COUNT DO
	    BEGIN
	    BUFFER[.I,0,8,0] = .BUFFER[.I,0,8,0] XOR
		.JOUR_DIR[.I + .LEADING_NULLS - $BYTEOFFSET(BJL$B_DATA)];
	    END;


	! Move non-null data in record to appropriate offset.
	!
	IF .LEADING_NULLS NEQ 1
	THEN
	    CH$MOVE(
		.JOUR_COUNT-2,
		BUFFER[BJL$B_DATA]+1,
		BUFFER[BJL$B_DATA]+.LEADING_NULLS);


	! Establish leading portion of directory string from context value.
	!
	IF .LEADING_NULLS NEQ 0
	THEN
	    CH$MOVE(
		.LEADING_NULLS,
		JOUR_DIR[1],
		BUFFER[BJL$B_DATA]);


	! Establish trailing portion of directory string
	! from context value.
	!
	CH$MOVE(
	    BJL$C_DIR_LEN - (.LEADING_NULLS + .JOUR_COUNT - 2),
	    JOUR_DIR[.LEADING_NULLS + .JOUR_COUNT - 1],
	    BUFFER[BJL$B_DATA] + .LEADING_NULLS + .JOUR_COUNT - 2);


	! Save true value for next directory record.
	!
	CH$MOVE(BJL$C_DIR_LEN, BUFFER[BJL$B_DATA], JOUR_DIR[1]);


	! Strip trailing zero bytes from true value to develop actual
	! record.  The value is printable ASCII and thus can contain
	! no embedded nulls.
	!
	BUFFER[BJL$B_SIZE] = BJL$C_DIR_LEN + 1;		! Assume no non-null
	P = CH$FIND_CH(BJL$C_DIR_LEN, BUFFER[BJL$B_DATA], 0);
	IF .P NEQ 0 THEN BUFFER[BJL$B_SIZE] = .P - BUFFER[BJL$B_TYPE];
	END;


    [BJL$K_FILE]:
	BEGIN

	! The record must not exceed the maximum length.
	!
	IF .BUFFER[BJL$B_SIZE] GTRU BJL$C_FILE_LEN+1
	    THEN SIGNAL(BACKUP$_INVBJLSIZ);
	END;


    [OUTRANGE]:
	SIGNAL(BACKUP$_INVBJLTYP);	! Undefined type code


    TES;


! Indicate success.
!
SS$_NORMAL
END;

END
ELUDOM
