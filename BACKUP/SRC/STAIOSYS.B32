MODULE STAIOSYS	(%TITLE	'Standalone I/O system'
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the replacements for I/O routines in the
!	stand-alone environment.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 27-Dec-1980
!
! MODIFIED BY:
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';


FORWARD ROUTINE
	ASSIGN_CHANNEL,			! Execute $ASSIGN service
	LIB$GET_COMMAND,		! LIB$GET_COMMAND
	LIB$PUT_OUTPUT,			! LIB$PUT_OUTPUT
	SYS$QIO,			! QIO service
	SYS$QIOW,			! QIOW service
	SYS$CLOSE,			! CLOSE service
	SYS$CREATE,			! CREATE service
	SYS$OPEN,			! OPEN service
	SYS$CONNECT,			! CONNECT service
	SYS$PUT,			! PUT service
	DUMMY;				! Dummy service


EXTERNAL ROUTINE
	STA_QIO;			! Standalone ACP QIO processor


OWN
	STA_TT_CHAN;			! Channel assigned to SYS$INPUT/OUTPUT

ROUTINE ASSIGN_CHANNEL(DEVICE,CHANNEL)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine executes the $ASSIGN service.
!
! INPUT PARAMETERS:
!	DEVICE		- Descriptor for device name
!	CHANNEL		- Pointer to where channel number will be stored
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	DEVICE:		REF BBLOCK;	! Pointer to descriptor for device
LOCAL
	IN_DESC:	VECTOR[2],	! Descriptor for input device name
	OUT_DESC:	VECTOR[2],	! Descriptor for BUFFER
	BUFFER:		VECTOR[64,BYTE],! Buffer for result of $TRNLOG
	P,				! Temporary pointer
	STATUS;				! Status variable


! Strip elements following colon from string if required.
!
IN_DESC[0] = .DEVICE[DSC$W_LENGTH];
IF (P = CH$FIND_CH(.DEVICE[DSC$W_LENGTH], .DEVICE[DSC$A_POINTER], %C':')) NEQ 0
    THEN IN_DESC[0] = .P - .DEVICE[DSC$A_POINTER];
IN_DESC[1] = .DEVICE[DSC$A_POINTER];


! Execute $TRNLOG service to handle process-permanent file.
!
OUT_DESC[0] = 64;
OUT_DESC[1] = BUFFER;
BUFFER[0] = 0;
$TRNLOG(LOGNAM=IN_DESC, RSLLEN=OUT_DESC, RSLBUF=OUT_DESC);


! Handle process-permanent file.
!
IF .BUFFER[0] EQL %O'033'
THEN
    BEGIN
    IN_DESC[0] = .OUT_DESC[0] - 4;
    IN_DESC[1] = .OUT_DESC[1] + 4;
    END;


! Execute $ASSIGN service, returning its result as value.
!
$ASSIGN(DEVNAM=IN_DESC, CHAN=.CHANNEL)
END;

GLOBAL ROUTINE LIB$GET_COMMAND(GET_STR,PROMPT_STR,OUT_LEN)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for LIB$GET_COMMAND in the
!	stand-alone environment.  Note that it need only handle static
!	output strings.
!
! INPUT PARAMETERS:
!	GET_STR		- Pointer to static descriptor to receive the string.
!	PROMPT_STR	- Pointer to descriptor for prompt string.
!	OUT_LEN		- (Optional) Pointer to word to receive length.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	GET_STR:	REF BBLOCK,		! Pointer to static descriptor
	PROMPT_STR:	REF BBLOCK;		! Pointer to descriptor
LOCAL
	STATUS,					! Status variable
	IOSB:		VECTOR[4,WORD],		! I/O status block
	BUFFER:		VECTOR[132,BYTE];	! Input buffer
BUILTIN
	ACTUALCOUNT;


! Assign the channel if required.
!
IF .STA_TT_CHAN EQL 0
THEN
    BEGIN
    STATUS = ASSIGN_CHANNEL($DESCRIPTOR('SYS$INPUT'), STA_TT_CHAN);
    IF NOT .STATUS THEN RETURN .STATUS;
    END;


! Execute the QIO.
!
STATUS = $QIOW(
    FUNC=IO$_READPROMPT,
    CHAN=.STA_TT_CHAN,
    IOSB=IOSB,
    P1=BUFFER,
    P2=132,
    P5=.PROMPT_STR[DSC$A_POINTER],
    P6=.PROMPT_STR[DSC$W_LENGTH]);
IF .STATUS THEN STATUS = .IOSB[0];
IF NOT .STATUS THEN RETURN .STATUS;


! Return the length if requested.
!
IF ACTUALCOUNT() GEQU 3
THEN
    (.OUT_LEN)<0,16> = MINU(.IOSB[1], .GET_STR[DSC$W_LENGTH]);


! Copy the string to the output buffer and return.
!
CH$COPY(.IOSB[1], BUFFER, %C' ', .GET_STR[DSC$W_LENGTH], .GET_STR[DSC$A_POINTER]);
SS$_NORMAL
END;

GLOBAL ROUTINE LIB$PUT_OUTPUT(PUT_STR)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for LIB$PUT_OUTPUT in the
!	stand-alone environment.
!
! INPUT PARAMETERS:
!	PUT_STR		- Pointer to descriptor for string.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	PUT_STR:	REF BBLOCK;	! Pointer to descriptor
LOCAL
	STATUS,				! Status variable
	IOSB:		VECTOR[4,WORD];	! I/O status block


! Assign the channel if required.
!
IF .STA_TT_CHAN EQL 0
THEN
    BEGIN
    STATUS = ASSIGN_CHANNEL($DESCRIPTOR('SYS$INPUT'), STA_TT_CHAN);
    IF NOT .STATUS THEN RETURN .STATUS;
    END;


! Execute the QIO.
!
STATUS = $QIOW(
    FUNC=IO$_WRITELBLK,
    CHAN=.STA_TT_CHAN,
    IOSB=IOSB,
    P1=.PUT_STR[DSC$A_POINTER],
    P2=.PUT_STR[DSC$W_LENGTH],
    P4=%C' ');
IF .STATUS THEN STATUS = .IOSB[0];
.STATUS
END;

GLOBAL ROUTINE SYS$QIO(EFN,CHAN,FUNC,IOSB,ASTADR,ASTPRM,P1,P2,P3,P4,P5,P6)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the QIO service in the
!	stand-alone environment.
!
! INPUT PARAMETERS:
!	As for SYS$QIO.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	FUNC:		BBLOCK;		! I/O function code
BIND ROUTINE
	QIO_VECTOR=	%X'800001C8';	! Vector location for SYS$QIO
BUILTIN
	CALLG,
	AP;


IF
    .FUNC[IO$V_FCODE] LEQU IO$_LOGICAL OR
    .FUNC[IO$V_FCODE] EQL IO$_READPROMPT
THEN
    BEGIN
    !
    ! Pass physical and logical I/O functions, and READPROMPT function,
    ! directly to the driver.
    !
    CALLG(.AP, QIO_VECTOR)
    END
ELSE
    BEGIN
    !
    ! Read/write virtual and ACP I/O functions come here.
    !
    CALLG(.AP, STA_QIO)
    END
END;

GLOBAL ROUTINE SYS$QIOW(EFN,CHAN,FUNC,IOSB,ASTADR,ASTPRM,P1,P2,P3,P4,P5,P6)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the QIOW service in the
!	stand-alone environment.
!
! INPUT PARAMETERS:
!	As for SYS$QIOW.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
EXTERNAL ROUTINE
	SYS$WAITFR:	ADDRESSING_MODE(GENERAL);	! Wait for event flag
REGISTER
	R0=0;
BUILTIN
	CALLG,
	AP;


R0 = CALLG(.AP, SYS$QIO);	! Execute $QIO part
IF NOT .R0 THEN RETURN .R0;	! If failed, return status
CALLG(.AP, SYS$WAITFR)		! Execute $WAITFR part
END;

GLOBAL ROUTINE SYS$CLOSE(FAB)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the CLOSE service in the
!	stand-alone environment.
!
! INPUT PARAMETERS:
!	FAB		- Pointer to the FAB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK;	! Pointer to FAB


! This service deassigns the channel that was assigned by $CREATE or $OPEN.
!
$DASSGN(CHAN=.FAB[FAB$L_CTX]);
FAB[FAB$W_IFI] = 0;
FAB[FAB$L_CTX] = 0;
FAB[FAB$L_STS] = RMS$_NORMAL;
FAB[FAB$L_STV] = 0;
RMS$_NORMAL
END;

GLOBAL ROUTINE SYS$CREATE(FAB)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the CREATE service in the
!	stand-alone environment.  It is limited to operation on terminals,
!	line printers, and magnetic tape.
!
! INPUT PARAMETERS:
!	FAB		- Pointer to the FAB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK;	! Pointer to FAB
LOCAL
	NAM:		REF BBLOCK,	! Pointer to NAM block
	DESC:		VECTOR[2],	! Descriptor for expanded string
	STATUS;				! Status variable


! Parse the file specification if necessary.
!
IF NOT $PARSE(FAB=.FAB) THEN RETURN .FAB[FAB$L_STS];


! Check the device type.
!
IF
    NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_CCL] AND
    NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD] AND
    .FAB[FAB$L_DEV] NEQ 0 ! Process-permanent file hack
THEN
    BEGIN
    FAB[FAB$L_STS] = RMS$_DEV;
    FAB[FAB$L_STV] = 0;
    RETURN RMS$_DEV
    END;


! Create the resultant string.
!
NAM = .FAB[FAB$L_NAM];
NAM[NAM$B_RSL] = .NAM[NAM$B_ESL];
CH$MOVE(.NAM[NAM$B_ESL], .NAM[NAM$L_ESA], .NAM[NAM$L_RSA]);


! Assign the channel.
!
DESC[0] = .NAM[NAM$B_ESL];
DESC[1] = .NAM[NAM$L_ESA];
STATUS = ASSIGN_CHANNEL(DESC, FAB[FAB$L_CTX]);
IF NOT .STATUS
THEN
    BEGIN
    FAB[FAB$L_STS] = .STATUS;
    FAB[FAB$L_STV] = 0;
    RETURN .STATUS;
    END;


! Indicate success.
!
FAB[FAB$L_STS] = RMS$_NORMAL;
FAB[FAB$L_STV] = .FAB[FAB$L_CTX];
RMS$_NORMAL
END;

GLOBAL ROUTINE SYS$OPEN(FAB)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the OPEN service in the
!	stand-alone environment.  It is limited to operation on terminals,
!	line printers, and magnetic tape.
!
! INPUT PARAMETERS:
!	FAB		- Pointer to the FAB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK;	! Pointer to FAB
LOCAL
	NAM:		REF BBLOCK,	! Pointer to NAM block
	DESC:		VECTOR[2],	! Descriptor for expanded string
	STATUS;				! Status variable


! Parse the file specification if necessary.
!
IF NOT $PARSE(FAB=.FAB) THEN RETURN .FAB[FAB$L_STS];


! Check the device type.
!
IF
    NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_CCL] AND
    NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD] AND
    .FAB[FAB$L_DEV] NEQ 0 ! Process-permanent file hack
THEN
    BEGIN
    FAB[FAB$L_STS] = RMS$_DEV;
    FAB[FAB$L_STV] = 0;
    RETURN RMS$_DEV
    END;


! Create the resultant string.
!
NAM = .FAB[FAB$L_NAM];
NAM[NAM$B_RSL] = .NAM[NAM$B_ESL];
CH$MOVE(.NAM[NAM$B_ESL], .NAM[NAM$L_ESA], .NAM[NAM$L_RSA]);


! Assign the channel.
!
DESC[0] = .NAM[NAM$B_ESL];
DESC[1] = .NAM[NAM$L_ESA];
STATUS = ASSIGN_CHANNEL(DESC, FAB[FAB$L_CTX]);
IF NOT .STATUS
THEN
    BEGIN
    FAB[FAB$L_STS] = .STATUS;
    FAB[FAB$L_STV] = 0;
    RETURN .STATUS;
    END;


! Indicate success.
!
FAB[FAB$L_STS] = RMS$_NORMAL;
FAB[FAB$L_STV] = .FAB[FAB$L_CTX];
RMS$_NORMAL
END;

GLOBAL ROUTINE SYS$CONNECT(RAB)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the CONNECT service in the
!	stand-alone environment.
!
! INPUT PARAMETERS:
!	RAB		- Pointer to the RAB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	RAB:		REF BBLOCK;	! Pointer to RAB


! This service is a no-operation.
!
RAB[RAB$L_STS] = RMS$_NORMAL;
RAB[RAB$L_STV] = 0;
RMS$_NORMAL
END;

GLOBAL ROUTINE SYS$PUT(RAB)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a replacement for the PUT service in the
!	stand-alone environment.  This service is provided to allow
!	/LIST to operate.  It is restricted to terminals and line printers.
!
! INPUT PARAMETERS:
!	RAB		- Pointer to the RAB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	RAB:		REF BBLOCK;	! Pointer to RAB
LOCAL
	FAB:		REF BBLOCK,	! Pointer to FAB
	STATUS,				! Status variable
	IOSB:		VECTOR[4,WORD];	! I/O status block


! Point to FAB.
!
FAB = .RAB[RAB$L_FAB];


! Make sure a channel has been assigned.
!
IF .FAB[FAB$L_CTX] EQL 0
THEN
    BEGIN
    RAB[RAB$L_STS] = RMS$_DEV;
    RAB[RAB$L_STV] = 0;
    RETURN RMS$_DEV
    END;


! Execute the I/O.
!
STATUS = $QIOW(
    FUNC=IO$_WRITELBLK,
    CHAN=.FAB[FAB$L_CTX],
    IOSB=IOSB,
    P1=.RAB[RAB$L_RBF],
    P2=.RAB[RAB$W_RSZ],
    P4=%C' ');
IF .STATUS THEN STATUS = .IOSB[0];
RAB[RAB$L_STS] = .STATUS;
RAB[RAB$L_STV] = 0;
.STATUS
END;

ROUTINE DUMMY(RAB)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine serves as a stub for services that are referenced but are
!	never called in the stand-alone environment, namely SYS$FIND, SYS$GET,
!	and SYS$REWIND.  These services are used to handle save set files in
!	the on-line version.
!
! INPUT PARAMETERS:
!	RAB		- Pointer to the RAB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status (RMS$_IOP, invalid operation).
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	RAB:		REF BBLOCK;	! Pointer to RAB


RAB[RAB$L_STS] = RMS$_IOP;
RAB[RAB$L_STV] = 0;
RMS$_IOP
END;

GLOBAL BIND ROUTINE
	SYS$FIND	= DUMMY,
	SYS$GET		= DUMMY,
	SYS$REWIND	= DUMMY;


END
ELUDOM
