MODULE STAINIT	(%TITLE	'Standalone BACKUP initialization'
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that initialize the standalone
!	BACKUP.
!
! ENVIRONMENT:
!	VAX/VMS user, executive, kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 06-Jan-1981
!
! MODIFIED BY:
!
!	V03-001	MLJ0085		Martin L. Jack,	30-Mar-1982  12:59
!		Copy a small routine over EXE$BUG_CHECK that types out a
!		console message "Bugcheck" if a bugcheck occurs.  Since the
!		console media containing the executive is not resident, the
!		bugcheck code cannot be loaded.
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';


LINKAGE
	JSB=		JSB: NOPRESERVE(2,3,4,5,6,7,8,9,10,11);


FORWARD ROUTINE
	STA_INIT:	NOVALUE,	! Driver for initialization
	STA_BUGCHECK:	JSB NOVALUE,	! Routine copied over EXE$BUG_CHECK
	STA_BUG_INSTALL,		! Install bugcheck code
	STA_HANDLER,			! Last-chance handler
	PUTMSG_ACTRTN,			! $PUTMSG action routine for handler
	STA_RESTART:	NOVALUE;	! Restart standalone version


EXTERNAL ROUTINE
	BOO$ACTIMAGE,			! Reactivate image
	CLI$DCL_PARSE:	ADDRESSING_MODE(GENERAL),
					! Stand-alone command parser
	LIB$GET_COMMAND:ADDRESSING_MODE(GENERAL);
					! Stand-alone get from SYS$COMMAND


EXTERNAL
	EXE$GL_FLAGS:	BITVECTOR	ADDRESSING_MODE(GENERAL),
					! Executive flags longword
	BACKUPCMD;			! Stand-alone command tables


EXTERNAL LITERAL
	EXE$V_INIT:	UNSIGNED(6);	! True if RMS and ACP are active


G$DEFINE();			! Define global area

GLOBAL ROUTINE STA_INIT: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the driver for initialization of the stand-alone
!	BACKUP.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	BUFFER:		VECTOR[132,BYTE],	! Command buffer
	DESC:		BBLOCK[8];		! Local descriptor
BUILTIN
	FP;
MAP
	FP:		REF BBLOCK;


! Establish the general handler.  Since this routine is called by the main
! routine, this code will establish it as a stack handler in that routine.
!
.FP[SF$L_SAVE_FP] = STA_HANDLER;


! If we are really running standalone, copy our own routine over the exec's
! bugcheck code.
!
IF NOT .EXE$GL_FLAGS[EXE$V_INIT]
THEN
    $CMKRNL(ROUTIN=STA_BUG_INSTALL);


! Get the command.
!
COM_FLAGS[COM_STANDALONE] = TRUE;
DO
    BEGIN
    DESC[DSC$W_LENGTH] = 132;
    DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    DESC[DSC$A_POINTER] = BUFFER;
    LIB$GET_COMMAND(DESC, $DESCRIPTOR(%CHAR(%O'012'), '$ '), DESC);
    END
UNTIL
    BEGIN
    IF .DESC[DSC$W_LENGTH] EQL 0
	THEN FALSE
	ELSE CLI$DCL_PARSE(DESC, BACKUPCMD)
    END;
END;

OWN STA_BUGCHECK_BEGIN: PSECT(CODE) VECTOR[0];
FORWARD STA_BUGCHECK_MESSAGE: VECTOR[14,BYTE];
ROUTINE STA_BUGCHECK: JSB NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is copied over EXE$BUG_CHECK by the initialization logic
!	in order to trap bugchecks that might occur during execution of
!	standalone BACKUP.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
BUILTIN
	HALT,
	MFPR,
	MTPR;
LOCAL
	P:		REF VECTOR[,BYTE],
	S;


MTPR(%REF(IPL$_POWER), PR$_IPL);
P = STA_BUGCHECK_MESSAGE;
DECR L FROM 14 TO 1 DO
    BEGIN
    DO MFPR(PR$_TXCS, S) UNTIL .S<7,1>;
    S = .P[0];  P = .P + 1;
    MTPR(S, PR$_TXDB);
    END;
HALT();
END;
OWN STA_BUGCHECK_MESSAGE: PSECT(CODE) VECTOR[14,BYTE]
INITIAL(BYTE
    (%CHAR(%O'015', %O'012', 0, 0), 'Bugcheck', %CHAR(%O'015', %O'012')));
OWN STA_BUGCHECK_END: PSECT(CODE) VECTOR[0];

ROUTINE STA_BUG_INSTALL=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is called in kernel mode to install the bugcheck routine
!	over EXE$BUG_CHECK.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	Code between STA_BUGCHECK_BEGIN and STA_BUGCHECK_END.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Code between STA_BUGCHECK_BEGIN and STA_BUGCHECK_END moved to
!	EXE$BUG_CHECK.
!
! ROUTINE VALUE:
!	SS$_NORMAL
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LINKAGE
	INI=			JSB:	PRESERVE(0,1,2,3,4,5,6,7,8,9,10,11);
EXTERNAL ROUTINE
	INI$WRITABLE:		INI NOVALUE ADDRESSING_MODE(GENERAL),
	INI$RDONLY:		INI NOVALUE ADDRESSING_MODE(GENERAL);
EXTERNAL
	EXE$BUG_CHECK:		ADDRESSING_MODE(GENERAL);


INI$WRITABLE();		! Make system writable
CH$MOVE(STA_BUGCHECK_END-STA_BUGCHECK_BEGIN, STA_BUGCHECK_BEGIN, EXE$BUG_CHECK);
INI$RDONLY();		! Make system read-only
SS$_NORMAL
END;

ROUTINE STA_HANDLER(SIGNAL,MECHANISM)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is established as a stack condition handler in the main
!	routine for the standalone version.  It calls $PUTMSG to output a
!	signalled message.  Then, if the message is fatal, it calls STA_RESTART
!	to start the image over (or exit).
!
! INPUT PARAMETERS:
!	SIGNAL		- Standard VMS condition handler
!	MECHANISM	-     parameters
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_CONTINUE
!
! SIDE EFFECTS:
!	If the message is of fatal severity, image is re-activated (or exits).
!
!--

BEGIN
MAP
	SIGNAL:		REF BBLOCK,	! Signal parameters
	MECHANISM:	REF BBLOCK;	! Mechanism parameters


IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_UNWIND
THEN
    BEGIN

    ! Call $PUTMSG to issue the message, after stripping the PC and PSL from
    ! the signal arguments.
    !
    SIGNAL[CHF$L_SIG_ARGS] = .SIGNAL[CHF$L_SIG_ARGS] - 2;
    $PUTMSG(MSGVEC=.SIGNAL, ACTRTN=PUTMSG_ACTRTN);


    ! If the message was fatal, restart the image (or exit).
    !
    IF .BBLOCK[SIGNAL[CHF$L_SIG_NAME], STS$V_SEVERITY] EQL STS$K_SEVERE
    THEN
	STA_RESTART();
    END;


SS$_CONTINUE
END;

GLOBAL ROUTINE PUTMSG_ACTRTN(DESC)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the $PUTMSG action routine for the general
!	handler.  It uses the stand-alone LIB$PUT_OUTPUT to write each
!	message line on the terminal.
!
! INPUT PARAMETERS:
!	DESC		- Descriptor for message line.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	False, to prevent $PUTMSG from writing the line.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
EXTERNAL ROUTINE
	LIB$PUT_OUTPUT;


LIB$PUT_OUTPUT(.DESC);
FALSE
END;

GLOBAL ROUTINE STA_RESTART: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is called when image execution should terminate.  If
!	running online, it exits.  If running standalone, it restarts by
!	calling BOO$ACTIMAGE to re-activate the image.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	EXE$GL_FLAGS[EXE$V_INIT] - True if running online.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Image is re-activated (or exits).  Thus, control should not return.
!
!--

BEGIN

! If running standalone, re-activate the image.
!
IF NOT .EXE$GL_FLAGS[EXE$V_INIT]
THEN
    BOO$ACTIMAGE($DESCRIPTOR('STABACKUP.EXE'));


! Re-activate failed or not executed.
!
$EXIT();
END;

END
ELUDOM
