MODULE BADBLOCK (%TITLE 'Scan bad block information'
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that do the bad block processing.
!	The code in this module is derived from and should track module INIBAD
!	in the INIT facility.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
!
! AUTHOR:  M. Jack, CREATION DATE: 23-Sep-1980
!
! MODIFIED BY:
!
!	V03-001	ACG0283		Andrew C. Goldstein,	8-Apr-1982  10:33
!		Disable bad block processing on MSCP disks
!
!	V02-003	MLJ0054		Martin L. Jack,	22-Nov-1981  21:40
!		Integrate GET_VM and FREE_VM jacket routines.
!
!	V02-002	MLJ0011		Martin L. Jack,	26-Mar-1981  14:20
!		Remove extra indirection in BADBLOCK_LBN and BADBLOCK_CNT definitions
!
!	V02-001	MLJ0010		Martin L. Jack,	25-Mar-1981  15:05
!		Add capability to round to cluster boundaries for standalone
!		volume initialize.  Replace OWN storage with LOCAL.
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';


LINKAGE
	L_P$ =		CALL: GLOBAL(P$=11);


MACRO
	L_DECL=		EXTERNAL REGISTER P$ = 11: REF VECTOR %;


FORWARD ROUTINE
	GET_BADBLOCKS,			! Main level bad block processing
	GET_FACTBAD:	L_P$,		! Process factory bad block data
	GET_SOFTBAD:	L_P$ NOVALUE,	! Process bad block scan program data
	MARK_BAD:	L_P$ NOVALUE;	! Enter bad block in allocation table


EXTERNAL ROUTINE
	CHECKSUM2,			! Compute block checksum
	FILE_ERROR:	NOVALUE,	! Issue file-related error
	GET_VM;				! Allocate virtual memory


EXTERNAL LITERAL
	BACKUP$_READBAD,
	BACKUP$_DIAGPACK,
	BACKUP$_NOBADDATA,
	BACKUP$_FACTBAD,
	BACKUP$_MAXBAD;

LITERAL
	BADBLOCK_MAX=	128;		! Length of bad block table


MACRO
	_BADBLOCK_FAB=	P$[0] %,		! FAB for device
	BADBLOCK_CHAN=	P$[1] %,		! Channel number
	_DEVICE_CHAR=	P$[2] %,		! Device characteristics
	CLUSTER=	P$[3] %,		! Cluster factor
	CLUST_PRESENT=	P$[4] %,		! Cluster factor present
	SERIAL_NUMBER=	P$[5] %,		! Pack serial number
	BADBLOCK_TOTAL=	P$[6] %,		! Count of bad areas so far
	_BADBLOCK_LBN=	P$[7] %,		! Bad block LBN table
	_BADBLOCK_CNT=	P$[7+BADBLOCK_MAX] %,	! Bad block count table
	BADBLOCK_FAB(O,P,S,E)=	BBLOCK[._BADBLOCK_FAB,O,P,S,E] %,
	DEVICE_CHAR(O,P,S,E)=	BBLOCK[._DEVICE_CHAR,O,P,S,E] %,
	BADBLOCK_LBN(N)=	VECTOR[_BADBLOCK_LBN,N] %,
	BADBLOCK_CNT(N)=	VECTOR[_BADBLOCK_CNT,N] %;


LITERAL
	P$_SIZE=	7 + BADBLOCK_MAX + BADBLOCK_MAX;

GLOBAL ROUTINE GET_BADBLOCKS(FAB,CHAN,DEVCHAR,CLUST)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the main bad block processing routine. It calls the factory
!	data and software data bad block routines as appropriate.
!
! INPUT PARAMETERS:
!	FAB		- Pointer to FAB.
!	CHAN		- Channel assigned to the device.
!	DEVCHAR		- Pointer to device characteristics for the device.
!	CLUST		- Cluster factor (optional).
!			  If present, bad areas are rounded to cluster
!			  boundaries, and the last track is marked bad.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Pointer to a bad block descriptor, allocated by LIB$GET_VM.
!
! SIDE EFFECTS:
!	Disk bad block data read
!
!--

BEGIN
LOCAL
	P$AREA:		VECTOR[P$_SIZE],	! Impure area
	AREA:		REF BBLOCK,		! Pointer to gotten area
	DESC:		REF BBLOCK;		! Pointer to descriptor
GLOBAL REGISTER
	P$ = 11:	REF VECTOR;		! Impure storage base
BUILTIN
	ACTUALCOUNT;


! Initialize the impure storage so the inner routines can access it.
!
P$ = P$AREA;
_BADBLOCK_FAB = .FAB;
BADBLOCK_CHAN = .CHAN;
_DEVICE_CHAR = .DEVCHAR;
CLUST_PRESENT = FALSE;
CLUSTER = 1;
IF ACTUALCOUNT() GEQ 4
THEN
    BEGIN
    CLUST_PRESENT = TRUE;
    CLUSTER = .CLUST;
    END;
BADBLOCK_TOTAL = 0;
SERIAL_NUMBER = 0;


! Establish whether the volume has factory bad block data or not and
! call the appropriate routine.
!
IF .DEVICE_CHAR[DIB$L_MAXBLOCK] GTRU SMALL_DISK
AND NOT .DEVICE_CHAR[DEV$V_RCT]
THEN
    BEGIN
    IF NOT GET_FACTBAD() THEN GET_SOFTBAD();
    END
ELSE
    BEGIN
    IF .CLUST_PRESENT
    AND .DEVICE_CHAR[DIB$L_MAXBLOCK] LSSU
	((.DEVICE_CHAR[DIB$L_MAXBLOCK] + .CLUSTER - 1) / .CLUSTER) * .CLUSTER
    THEN MARK_BAD (1, .DEVICE_CHAR[DIB$L_MAXBLOCK]);
    END;


! Get the descriptor from heap storage and initialize.
!
AREA = GET_VM(BAD_S_HEADER + .BADBLOCK_TOTAL*BAD_S_DESC);
AREA[BAD_NUMDESC] = .BADBLOCK_TOTAL;
AREA[BAD_SERIAL] = .SERIAL_NUMBER;
DESC = AREA[BAD_DESC];
INCR I FROM 0 TO .BADBLOCK_TOTAL-1 DO
    BEGIN
    DESC[BAD_LBN] = .BADBLOCK_LBN[.I];
    DESC[BAD_COUNT] = .BADBLOCK_CNT[.I];
    DESC = .DESC + BAD_S_DESC;
    END;


! Return a pointer to the bad block descriptor.
!
.AREA
END;

ROUTINE GET_FACTBAD: L_P$=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes the factory bad block data found on the last
!	track of the disk.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	Impure area.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Impure area.
!
! ROUTINE VALUE:
!	True if factory data found, false if not found.
!
! SIDE EFFECTS:
!	Disk blocks read
!
!--

BEGIN
MACRO					! format of physical block number
	PBN_SECTOR	= 0, 0, 8, 0%,	! sector number
	PBN_TRACK	= 1, 0, 8, 0%,	! track number
	PBN_CYLINDER	= 2, 0, 16, 0%;	! cylinder number

LABEL
	SEARCH_TRACK;			! main loop to search last track of disk

LOCAL
	LBN,				! LBN to mark bad
	BLOCKFACT,			! blocking factor of disk
	FIRST_TIME,			! first time through flag
	FIRST_BUFFER,			! first buffer flag
	NOGOOD,				! no blocks read without errors
	IOSB		: VECTOR[4,WORD], ! I/O status block
	STATUS,				! return status
	P		: REF BBLOCK,	! pointer into bad block descriptors
	PHYS_BLOCK	: BBLOCK [4],	! current physical block number
	BUFFER		: BBLOCK [512],	! I/O buffer
	BUFFER2		: BBLOCK [512];	! buffer for second copy of data
L_DECL;


! Compute the blocking factor.
!
BLOCKFACT = (.DEVICE_CHAR[DIB$B_SECTORS]
	   * .DEVICE_CHAR[DIB$B_TRACKS]
	   * .DEVICE_CHAR[DIB$W_CYLINDERS])
	   / .DEVICE_CHAR[DIB$L_MAXBLOCK];


! If the cluster factor parameter is present, mark the entire last track of
! the disk bad to prevent its use.
!
IF .CLUST_PRESENT
THEN
    MARK_BAD(
	.DEVICE_CHAR[DIB$B_SECTORS] / .BLOCKFACT,
	.DEVICE_CHAR[DIB$L_MAXBLOCK] - .DEVICE_CHAR[DIB$B_SECTORS] / .BLOCKFACT);


! Now, if automatic bad block processing is not inhibited, find a good
! block on the last track and process the bad block list in it. Do this
! twice, once on the first good block and once on the first good block
! after sector 10 (if not redundant) to get both factory and software
! detected bad block data.
!
FIRST_TIME = TRUE;
NOGOOD = TRUE;
PHYS_BLOCK[PBN_CYLINDER] = .DEVICE_CHAR[DIB$W_CYLINDERS] - 1;
PHYS_BLOCK[PBN_TRACK] = .DEVICE_CHAR[DIB$B_TRACKS] - 1;
PHYS_BLOCK[PBN_SECTOR] = 0;


SEARCH_TRACK: BEGIN
WHILE TRUE DO
    BEGIN

    FIRST_BUFFER = TRUE;
    WHILE TRUE DO
	BEGIN
	LBN = ((.PHYS_BLOCK[PBN_CYLINDER] * .DEVICE_CHAR[DIB$B_TRACKS]
	      + .PHYS_BLOCK[PBN_TRACK]) * .DEVICE_CHAR[DIB$B_SECTORS]
	      + .PHYS_BLOCK[PBN_SECTOR]) / .BLOCKFACT;
	STATUS = $QIOW (
	    CHAN = .BADBLOCK_CHAN,
	    FUNC = IO$_READLBLK,
	    IOSB = IOSB[0],
	    P1   = (IF .FIRST_BUFFER THEN BUFFER ELSE BUFFER2),
	    P2   = 512,
	    P3   = .LBN
	    );
	IF .STATUS THEN STATUS = .IOSB[0];


	IF .STATUS
	THEN
	    BEGIN
	    NOGOOD = FALSE;
	    IF .FIRST_BUFFER
	    THEN
		BEGIN
		IF .BUFFER[BBD$L_LASTWORD] EQL -1
		THEN FIRST_BUFFER = FALSE;
		END
	    ELSE
		BEGIN
		IF CH$EQL (512, BUFFER, 512, BUFFER2, 0)
		THEN EXITLOOP;
		END;
	    END
	ELSE IF .STATUS NEQ SS$_PARITY
	THEN
	    FILE_ERROR(
		BACKUP$_READBAD, ._BADBLOCK_FAB, .STATUS);

	PHYS_BLOCK[PBN_SECTOR] = .PHYS_BLOCK[PBN_SECTOR]
				+ 2*.BLOCKFACT;
	IF .PHYS_BLOCK[PBN_SECTOR] GEQ .DEVICE_CHAR[DIB$B_SECTORS]
	THEN LEAVE SEARCH_TRACK;
	END;				! end of block search loop


    ! We have a good bad block list. Process its entries.
    !
    IF .FIRST_TIME
    THEN SERIAL_NUMBER = .BUFFER[BBD$L_SERIAL];

    IF .BUFFER[BBD$W_FLAGS] EQL 65535
    THEN FILE_ERROR(BACKUP$_DIAGPACK, ._BADBLOCK_FAB);

    P = BUFFER + BBD$C_DESCRIPT;
    DO
	BEGIN
	IF .P[BBD$V_CYLINDER] EQL 32767
	THEN EXITLOOP;
	LBN = ((.P[BBD$V_CYLINDER] * .DEVICE_CHAR[DIB$B_TRACKS]
	      + .P[BBD$V_TRACK]) * .DEVICE_CHAR[DIB$B_SECTORS]
	      + .P[BBD$V_SECTOR]) / .BLOCKFACT;
	MARK_BAD (1, .LBN);
	P = .P + BBD$C_ENTRY;
	END
    UNTIL .P GEQA BUFFER+512;


    ! If we are not yet into the user data, position to it and try again.
    !
    FIRST_TIME = FALSE;
    IF .PHYS_BLOCK[PBN_SECTOR] GEQ 10 THEN EXITLOOP;
    PHYS_BLOCK[PBN_SECTOR] = 10;
    END;				! end of outer loop
END;					! end of block SEARCH_TRACK


! If we found no good data at all, complain.
!
IF .NOGOOD
THEN FILE_ERROR(BACKUP$_FACTBAD, ._BADBLOCK_FAB);


RETURN NOT .FIRST_TIME;
END;					! end of routine GET_FACTBAD

ROUTINE GET_SOFTBAD: L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes the data left by the bad block scan program
!	somewhere near the end of the disk.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	Impure area.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Impure area.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Disk blocks read
!
!--

BEGIN
LOCAL
	LBN,				! LBN to mark bad
	IO_STATUS	: VECTOR[4,WORD], ! I/O status block
	STATUS,				! return status
	P		: REF BBLOCK,	! pointer into bad block map
	BUFFER		: BBLOCK[512];	! I/O buffer
L_DECL;


! Scan from the end of the volume forward to find the bad block data.
! If none is found, output a warning and proceed.
!
LBN = .DEVICE_CHAR[DIB$L_MAXBLOCK];
IF
BEGIN
DECR J FROM 32 TO 1 DO
    BEGIN
    LBN = .LBN - 1;
    STATUS = $QIOW (
	CHAN = .BADBLOCK_CHAN,
	FUNC = IO$_READLBLK,
	IOSB = IO_STATUS[0],
	P1   = BUFFER,
	P2   = 512,
	P3   = .LBN
	);
    IF .STATUS THEN STATUS = .IO_STATUS[0];

    IF .STATUS
    THEN
	BEGIN
	IF  CHECKSUM2 (BUFFER, $BYTEOFFSET (BBM$W_CHECKSUM))
	AND .BUFFER[BBM$B_COUNTSIZE] EQL 1
	AND .BUFFER[BBM$B_LBNSIZE] EQL 3
	AND .BUFFER[BBM$B_INUSE] LEQ (512 - BBM$C_POINTERS - 2) / 2
	THEN EXITLOOP FALSE;
	END
    ELSE IF .STATUS NEQ SS$_PARITY
    THEN
	FILE_ERROR(
	    BACKUP$_READBAD, ._BADBLOCK_FAB, .STATUS);
    END
END
THEN
    BEGIN
    FILE_ERROR(BACKUP$_NOBADDATA, ._BADBLOCK_FAB);
    RETURN;
    END;


! Found a good bad block descriptor.  If the cluster factor parameter was
! present, enter it in the bad block map.  Then, process its contents.
!
IF .CLUST_PRESENT
THEN
    MARK_BAD(.DEVICE_CHAR[DIB$L_MAXBLOCK] - .LBN, .LBN);


P = BUFFER + BBM$C_POINTERS;
DECR J FROM .BUFFER[BBM$B_INUSE]/2 TO 1 DO
    BEGIN
    LBN = .P[BBM$W_LOWLBN];
    LBN<16,8> = .P[BBM$B_HIGHLBN];
    MARK_BAD (.P[BBM$B_COUNT]+1, .LBN);
    P = .P + 4;
    END;
END;					! end of routine GET_SOFTBAD

ROUTINE MARK_BAD(BLOCK_COUNT,START_LBN): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine enters the indicated block(s) into the bad block part
!	of the allocation table. The table is maintained in reverse order
!	by LBN, and adjacent or overlapping areas are merged.
!
! INPUT PARAMETERS:
!	BLOCK_COUNT	- Count of blocks to mark bad
!	START_LBN	- Start LBN of blocks
!
! IMPLICIT INPUTS:
!	Impure area.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Impure area.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	LBN,				! start LBN of new bad cluster
	COUNT,				! block count of new bad cluster
	J,				! index into bad block allocation table
	C;				! merge loop counter
L_DECL;


! Check for table overflow.
!
IF .BADBLOCK_TOTAL GEQ BADBLOCK_MAX
THEN
    BEGIN
    FILE_ERROR(BACKUP$_MAXBAD, ._BADBLOCK_FAB);
    RETURN;
    END;


! Round the specified LBN and count to the cluster boundaries.
!
LBN = .START_LBN / .CLUSTER * .CLUSTER;
COUNT = (.START_LBN + .BLOCK_COUNT + .CLUSTER - 1) / .CLUSTER * .CLUSTER - .LBN;


! Search the allocation table until an entry is found with a start LBN lower
! than the new LBN. Shuffle the table down at this point and insert the
! new entry.
!
J = 0;
UNTIL .J GEQ .BADBLOCK_TOTAL DO
    BEGIN
    IF .BADBLOCK_LBN[.J] LSSU .LBN THEN EXITLOOP;
    J = .J + 1;
    END;


CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_LBN[.J], BADBLOCK_LBN[.J+1]);
CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_CNT[.J], BADBLOCK_CNT[.J+1]);
BADBLOCK_TOTAL = .BADBLOCK_TOTAL + 1;
BADBLOCK_CNT[.J] = .COUNT;
BADBLOCK_LBN[.J] = .LBN;


! Now check for adjacencies and merge if they exist. Start with the previous
! table entry and compare pairs.
!
IF .J NEQ 0 THEN J = .J - 1;
C = 0;

UNTIL .J + 1 GEQ .BADBLOCK_TOTAL DO
    BEGIN
    IF .BADBLOCK_LBN[.J] LEQ .BADBLOCK_LBN[.J+1] + .BADBLOCK_CNT[.J+1]
    THEN
	BEGIN
	BADBLOCK_CNT[.J+1] = MAXU (.BADBLOCK_LBN[.J] + .BADBLOCK_CNT[.J],
				   .BADBLOCK_LBN[.J+1] + .BADBLOCK_CNT[.J+1])
			   - .BADBLOCK_LBN[.J+1];
	BADBLOCK_TOTAL = .BADBLOCK_TOTAL - 1;
	CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_LBN[.J+1], BADBLOCK_LBN[.J]);
	CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_CNT[.J+1], BADBLOCK_CNT[.J]);
	BADBLOCK_CNT[.BADBLOCK_TOTAL] = 0;
	END
    ELSE
	BEGIN
	J = .J + 1;
	C = .C + 1;
	IF .C GEQ 2 THEN EXITLOOP;
	END;
    END;				! end of merge loop
END;					! end of routine MARK_BAD

END
ELUDOM
