	.TITLE	MATCH			File specification matching
	.IDENT	'V03-001'
;---
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;	Backup/Restore
;
; ABSTRACT:
;	This module contains file specification matching routines.
;
; ENVIRONMENT:
;	VAX/VMS user mode.
;
;
;--
;
; AUTHOR: M. Jack, CREATION DATE: 19-Sep-1980
; With acknowledgment to Goldstein and Halvorsen for the pieces.
;
;
; MODIFIED BY:
;
;	V03-001	MLJ0085		Martin L. Jack,	30-Mar-1982  13:40
;		Modify MATCH to avoid setting a wild directory bit past the
;		number of directory levels that actually exist in the
;		related file specification.
;
;	V02-007	MLJ0077		Martin L. Jack,	8-Feb-1982  15:11
;		Implement negative version numbers.
;
;	V02-006	MLJ0063		Martin L. Jack,	11-Dec-1981  14:41
;		Support output UIC wildcarding by inserting a comma in the
;		related filename string if the selection file specification
;		is in UIC format.  Modify version number selection so that
;		negative pattern versions are accepted and always match.
;		Have INIT_NAMEBLOCK use expanded string if resultant is null.
;
;	V02-005	MLJ0054		Martin L. Jack,	6-Nov-1981  16:24
;		Correct problem with leading [000000] in candidate directory.
;		Modify calling sequence for MATCH_DIRECTORY to allow long
;		filenames.
;
;	V02-004	MLJ0036		Martin L. Jack,	28-Aug-1981  16:58
;		Extensive rewriting for reel restart and early scan termination.
;
;	V02-003	MLJ0025		Martin L. Jack,	8-May-1981  13:42
;		Implement latest version selection.
;
;	V02-002	MLJ0022		Martin L. Jack,	21-Apr-1981  13:54
;		Convert directory wildcarding to use RMS.
;
;	V02-001	MLJ0010		Martin L. Jack,	25-Mar-1981  14:04
;		Add routines FAST_MATCH and PARSE_FAST_DIR.  Correct problems
;		with [000000...] and the like as selection filespec.
;
;**


	$NAMDEF
	.PSECT	CODE,EXE,NOWRT

	.SBTTL	INIT_NAMEBLOCK, initialize extended name block fields

;++
;
; Functional Description:
;	This routine initializes the name block descriptors for device,
;	directory, etc. after BACKUP has constructed a resultant or expanded
;	string in a name block.  The technique used is to scan the string for
;	terminators since BACKUP constructs the strings in a known format.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Pointer to name block.
;
; Implicit Inputs:
;	Resultant string descriptor in name block, if present, otherwise
;	expanded string descriptor.
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	Device, directory, etc. descriptors in name block.
;
; Routines Called:
;	none
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	INIT_NAMEBLOCK,^M<R2,R3,R4>
	MOVL	4(AP),R4		; Get pointer to name block
	MOVL	NAM$L_RSA(R4),R3	; Get resultant string descriptor
	MOVZBL	NAM$B_RSL(R4),R2	;
	BNEQ	5$			; Branch if resultant present
	MOVL	NAM$L_ESA(R4),R3	; Get expanded string descriptor
	MOVZBL	NAM$B_ESL(R4),R2	;
5$:	MOVL	R3,NAM$L_NODE(R4)	; Set node address
	CLRB	NAM$B_NODE(R4)		; Set node length
	LOCC	#^A'[',R2,(R3)		; Scan for device terminator
	BNEQ	10$			; Branch if found
	LOCC	#^A'<',R2,(R3)		; Scan for alternate terminator
10$:	MOVL	R3,NAM$L_DEV(R4)	; Set device address
	SUBB3	R0,R2,NAM$B_DEV(R4)	; Set device length
	MOVQ	R0,R2			; Prune device from string
	LOCC	#^A']',R2,(R3)		; Scan for directory terminator
	BNEQ	20$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Scan for alternate terminator
20$:	DECL	R0			; Adjust to include terminator
	INCL	R1			;
	MOVL	R3,NAM$L_DIR(R4)	; Set directory address
	SUBB3	R0,R2,NAM$B_DIR(R4)	; Set directory length
	MOVQ	R0,R2			; Prune directory from string
	LOCC	#^A'.',R2,(R3)		; Scan for file name terminator
	MOVL	R3,NAM$L_NAME(R4)	; Set file name address
	SUBB3	R0,R2,NAM$B_NAME(R4)	; Set file name length
	MOVQ	R0,R2			; Prune file name from string
	LOCC	#^A';',R2,(R3)		; Scan for file type terminator
	MOVL	R3,NAM$L_TYPE(R4)	; Set file type address
	SUBB3	R0,R2,NAM$B_TYPE(R4)	; Set file type length
	MOVL	R1,NAM$L_VER(R4)	; Set file version address
	MOVB	R0,NAM$B_VER(R4)	; Set file version length
	RET				; Return

	.SBTTL	WILD_DIRECTORY, wildcard output directory processing

;++
;
; Functional Description:
;	This routine sets up the necessary status bits in the name block for
;	RMS wildcard output directory processing.  If necessary, it also adds
;	a comma to the resultant filename string.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Address of descriptor for selection file specification.
;	08(AP) = Address of name block.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	NAM$L_FNB contains the wildcard directory bit corresponding to the
;	leftmost wild directory in the selection file specification, if any.
;	If the selection file specification is in UIC format, a comma is
;	inserted in the resultant filename string.
;
; Routines Called:
;	PARSE_DIRECTORY
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	WILD_DIRECTORY,^M<R2,R3,R4,R5,R6,R7>
;
; Parse the resultant file specification to obtain the number of directories.
;
	MOVAB	-132(SP),SP		; Make result space on stack
	MOVL	8(AP),R6		; Point to name block
	MOVZBL	NAM$B_RSL(R6),R2	; Get resultant string descriptor
	MOVL	NAM$L_RSA(R6),R3	;
	LOCC	#^A'[',R2,(R3)		; Scan for start of directory
	BNEQ	5$			; Branch if found
	LOCC	#^A'<',R2,(R3)		; Scan for alternate syntax
5$:	MOVAB	-(R0),R2		; Prune beginning of string
	MOVAB	1(R1),R3		;
	LOCC	#^A']',R2,(R3)		; Scan for end of directory
	BNEQ	7$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Scan for alternate syntax
7$:	SUBL2	R0,R2			; Prune end of string
	MOVL	SP,R4			; Point to it
	BSBW	PARSE_DIRECTORY		; Parse the directory specification
	MOVZWL	(SP),R7			; Get number of levels
;
; Parse the selection file specification.
;
	MOVQ	@4(AP),R2		; Get selection string descriptor
	LOCC	#^A'[',R2,(R3)		; Scan for start of directory
	BNEQ	10$			; Branch if found
	LOCC	#^A'<',R2,(R3)		; Scan for alternate syntax
10$:	MOVAB	-(R0),R2		; Prune beginning of string
	MOVAB	1(R1),R3		;
	LOCC	#^A']',R2,(R3)		; Scan for end of directory
	BNEQ	20$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Scan for alternate syntax
20$:	SUBL2	R0,R2			; Prune end of string
	MOVL	SP,R4			; Point to it
	BSBW	PARSE_DIRECTORY		; Parse the directory specification
;
; Initialize for loop.
;
	ADDL3	#NAM$L_FNB,8(AP),R6	; Point to NAM$L_FNB
	CLRL	(R6)			; Clear FNB
	BBS	#16,(SP),60$		; Branch if UIC-format directory
	MOVL	(SP)+,R4		; Get count of directories
	MOVL	#NAM$V_WILD_UFD,R5	; Get first bit number
;
; Loop over all directories searching for the leftmost one that
; contains a wildcard.
;
30$:	DECL	R7			; Count resultant directory levels
	BLSS	50$			; Br if none left to avoid setting bit
	MOVQ	(SP)+,R2		; Get next directory descriptor
	CMPB	(R3),#^A'.'		; Was it ellipsis?
	BEQL	40$			; Branch if yes
	LOCC	#^A'*',R2,(R3)		; Contains asterisk?
	BNEQ	40$			; Branch if yes
	LOCC	#^A'%',R2,(R3)		; Contains percent?
	BNEQ	40$			; Branch if yes
	INCL	R5			; Increment bit number
	SOBGTR	R4,30$			; Loop for all directories
	RET				; Return
;
; Here if a wildcard level is found to set the corresponding bit.
;
40$:	BBSS	R5,(R6),50$		; Set wildcard bit
50$:	RET				; Return
;
; Here if a UIC-format directory.  PARSE_DIRECTORY has transformed a '*' in
; the group or member portion into '%%%', so here we just test for a
; leading '%' in the appropriate position.
;
60$:	BBSS	#NAM$V_GRP_MBR,(R6),70$	; Set UIC-format bit
70$:	MOVL	8(SP),R0		; Point to directory string
	CMPB	(R0),#^A'%'		; Group part wild?
	BNEQ	80$			; Branch if no
	BBSS	#NAM$V_WILD_GRP,(R6),80$; Set wild group bit
80$:	CMPB	3(R0),#^A'%'		; Member part wild?
	BNEQ	90$			; Branch if no
	BBSS	#NAM$V_WILD_MBR,(R6),90$; Set wild member bit
;
; Insert a comma between the group and member numbers in the related filename
; string to compensate for the fact that directory specifications are stored in
; the save set without a comma.  RMS requires the comma for proper operation of
; output UIC wildcarding.
;
90$:	INCB	NAM$B_RSL-NAM$L_FNB(R6)	; Increase length of related filename
	MOVZBL	NAM$B_RSL-NAM$L_FNB(R6),R0 ; Get length
	SUBL2	#5,R0			; Allow for '[nnn' and INCB
	MOVL	NAM$L_RSA-NAM$L_FNB(R6),R6 ; Point to related filename string
	MOVC3	R0,4(R6),5(R6)		; Slide related filename string over
	MOVB	#^A',',4(R6)		; Insert a comma
	RET

	.SBTTL	INIT_SEL_INFO, initialize selection information

;++
;
; Functional Description:
;	This routine generates necessary information concerning a selection
;	file specification.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Address of descriptor for selection file specification.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	08(AP) = Address of a quadword that receives a descriptor for the
;		 directory portion of the file specification.
;	12(AP) = Address of a quadword that receives a descriptor for the
;		 name, type, and version portion of the file specification.
;	16(AP) = Address of a longword that receives the zero or negative
;		 version number if the file specification selects a latest
;		 version and a positive number otherwise.
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	LIB$CVT_DTB
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	INIT_SEL_INFO,^M<R2,R3>
;
; Parse the string into a directory string and a
; name, type, and version string.
;
	MOVQ	@4(AP),R2		; Get string descriptor
	LOCC	#^A'[',R2,(R3)		; Scan for start of directory
	BNEQ	10$			; Branch if found
	LOCC	#^A'<',R2,(R3)		; Scan for alternate syntax
10$:	MOVAB	-(R0),R2		; Prune beginning of string
	MOVAB	1(R1),R3		;
	LOCC	#^A']',R2,(R3)		; Scan for end of directory
	BNEQ	20$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Scan for alternate syntax
;
; Construct and return the two descriptors.
;
20$:	SUBL2	R0,R2			; R2-R3: directory descriptor
	MOVQ	R2,@8(AP)		; Set directory descriptor
	DECL	R0			; R0-R1: name, type, version descriptor
	INCL	R1			;
	MOVQ	R0,@12(AP)		; Set name, type, version descriptor
;
; Compute the latest-version flag.
;
	MOVL	#1,@16(AP)		; Assume not latest version
	LOCC	#^A';',R0,(R1)		; Scan for ';'
	BEQL	30$			; Branch if not found
	PUSHAL	-(SP)			; Push address of result location
	PUSHAB	1(R1)			; Push descriptor for version number
	PUSHAB	-(R0)			;
	CALLS	#3,G^LIB$CVT_DTB	; Convert pattern version number
	BLBC	R0,30$			; Branch if conversion failed
	MOVL	(SP)+,@16(AP)		; Get pattern version number
30$:	RET				; Return

	.SBTTL	MATCH, match complete file specification

;++
;
; Functional Description:
;	This routine executes a wild card match on a candidate and pattern
;	file specification.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Address of descriptor for candidate file specification.
;	08(AP) = Address of descriptor for pattern file specification.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	MATCH_DIRECTORY
;	MATCH_FILENAME
;
; Routine Value:
;	True if the strings match.
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	MATCH,^M<R2,R3>
;
; Parse the candidate string into a directory string and a
; name, type, and version string.
;
	MOVQ	@4(AP),R2		; Get candidate string descriptor
	LOCC	#^A'[',R2,(R3)		; Scan for start of directory
	BNEQ	10$			; Branch if found
	LOCC	#^A'<',R2,(R3)		; Scan for alternate syntax
10$:	MOVAB	-(R0),R2		; Prune beginning of string
	MOVAB	1(R1),R3		;
	LOCC	#^A']',R2,(R3)		; Scan for end of directory
	BNEQ	20$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Scan for alternate syntax
20$:	PUSHL	R3			; Make directory descriptor
	SUBL3	R0,R2,-(SP)		;
	PUSHAB	1(R1)			; Make name, type, version descriptor
	PUSHAB	-(R0)			;
;
; Parse the pattern string into a directory string and a
; name, type, and version string.
;
	MOVQ	@8(AP),R2		; Get pattern string descriptor
	LOCC	#^A'[',R2,(R3)		; Scan for start of directory
	BNEQ	30$			; Branch if found
	LOCC	#^A'<',R2,(R3)		; Scan for alternate syntax
30$:	MOVAB	-(R0),R2		; Prune beginning of string
	MOVAB	1(R1),R3		;
	LOCC	#^A']',R2,(R3)		; Scan for end of directory
	BNEQ	40$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Scan for alternate syntax
40$:	PUSHL	R3			; Make directory descriptor
	SUBL3	R0,R2,-(SP)		;
	PUSHAB	1(R1)			; Make name, type, version descriptor
	PUSHAB	-(R0)			;
;
; Match the name, type, and version strings.
;
	PUSHL	SP			; Push pattern descriptor
	PUSHAB	20(SP)			; Push candidate descriptor
	CALLS	#2,B^MATCH_FILENAME	; Match filenames
	BLBC	R0,50$			; Branch if failed
;
; Match the directory strings.
;
	PUSHAB	8(SP)			; Push pattern descriptor
	PUSHAB	28(SP)			; Push candidate descriptor
	CALLS	#2,W^MATCH_DIRECTORY	; Match directories
50$:	RET				; Return

	.SBTTL	MATCH_FILENAME, match file name, type, version

;++
;
; Functional Description:
;	This routine executes a wild card match on the name, type, and version
;	of a candidate and pattern file specification.  If the pattern selects
;	latest version, this routine assumes that the candidate file is the
;	latest version, and therefore that the version matches.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Address of descriptor for candidate file name, type, version.
;	08(AP) = Address of descriptor for pattern file name, type, version.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	FMG$MATCH_NAME
;	LIB$CVT_DTB
;
; Routine Value:
;	True if the strings match.
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	MATCH_FILENAME,^M<R2,R3,R4,R5,R6,R7,R8,R9>
;
; Parse the candidate string into a name and type string and a version string.
;
	MOVQ	@4(AP),R2		; Get candidate string descriptor
	MOVZWL	R2,R2			; Truncate length to a word
	LOCC	#^A';',R2,(R3)		; Scan for version number
	BEQL	20$			; Branch if not found
	SUBL2	R0,R2			; R2-R3: candidate name and type
	MOVAB	1(R1),R7		; R6-R7: candidate version
	MOVAB	-(R0),R6		;
;
; Parse the pattern string into a name and type string and a version string.
;
	MOVQ	@8(AP),R4		; Get pattern string descriptor
	MOVZWL	R4,R4			; Truncate length to a word
	LOCC	#^A';',R4,(R5)		; Scan for version number
	BEQL	20$			; Branch if not found
	SUBL2	R0,R4			; R4-R5: pattern name and type
	MOVAB	1(R1),R9		; R8-R9: pattern version
	MOVAB	-(R0),R8		;
;
; Match the file name and type.
;
	JSB	G^FMG$MATCH_NAME	; Match name and type
	BLBC	R0,20$			; Branch if failed
;
; The match succeeded.  Now the version numbers must be matched.
;
	TSTL	R8			; Pattern version null?
	BEQL	10$			; Branch if yes
	CMPB	(R9),#^A'*'		; Wildcard pattern version?
	BEQL	10$			; Branch if yes
	PUSHAL	-(SP)			; Push address of result location
	MOVQ	R8,-(SP)		; Push descriptor
	CALLS	#3,G^LIB$CVT_DTB	; Convert pattern version number
	BLBC	R0,20$			; Branch if conversion failed
	MOVL	(SP)+,R8		; Get pattern version number
	BLEQ	10$			; Branch if explicit zero or negative
	PUSHAL	-(SP)			; Push address of result location
	MOVQ	R6,-(SP)		; Push descriptor
	CALLS	#3,G^LIB$CVT_DTB	; Convert candidate version number
	BLBC	R0,20$			; Branch if conversion failed
	CLRL	R0			; Assume failure return
	CMPL	(SP)+,R8		; Compare versions
	BEQL	10$			; Branch if versions equal
	RET				; Return failure
10$:	MOVL	#1,R0			; Set success status
20$:	RET				; Return

	.SBTTL	MATCH_DIRECTORY, match directories

;++
;
; Functional Description:
;	This routine executes a wild card match on the directory
;	of a candidate and pattern file specification.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Address of descriptor for candidate directory.
;	08(AP) = Address of descriptor for pattern directory.
;	20(AP) = Optional address of descriptor for pattern
;		 name, type, and version.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	12(AP) = Optional address of descriptor to receive terminator file
;		 name and type.
;	16(AP) = Optional address of word to receive terminator file version
;		 number.
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	FMG$MATCH_NAME
;	LIB$CVT_DTB
;	PARSE_DIRECTORY
;
; Routine Value:
;	Bit 0:	Set if the directory strings match.
;	Bit 1:  Set if the directory must be scanned.
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	MATCH_DIRECTORY,^M<R2,R3,R4,R5,R6,R7,R8,R9>
	MOVAB	-200(SP),SP		; Make directory parse space on stack
;
; Parse the candidate directory string.
;
	MOVQ	@4(AP),R2		; Get candidate string descriptor
	MOVZWL	R2,R2			; Truncate length to a word
	MOVL	SP,R4			; Point to result area
	BSBW	PARSE_DIRECTORY		; Parse the specification
;
; Parse the pattern directory string.
;
	MOVQ	@8(AP),R2		; Get pattern string descriptor
	MOVZWL	R2,R2			; Truncate length to a word
	MOVAB	68(SP),R4		; Point to result area
	BSBW	PARSE_DIRECTORY		; Parse the specification
;
; Set up for matching directories.
;
	MOVZWL	(SP),R2			; Get candidate descriptor count
	MOVAB	4(SP),R3		; Point to candidate string results
	MOVZWL	68(SP),R4		; Get pattern descriptor count
	MOVAB	72(SP),R5		; Point to first pattern descriptor
	CLRQ	R6			; Clear saved directory count, pointer
;
; A special matching rule applies if the pattern string directory is in
; UIC format.  Such a directory matches only if the target string
; directory contains six octal digits.
;
	BLBC	70(SP),20$		; Branch if pattern not UIC format
	CMPL	R2,#1			; Exactly one directory in target?
	BNEQ	50$			; Branch if no
	MOVQ	(R3),R0			; Get target directory descriptor
	CMPL	R0,#6			; Six characters?
	BNEQ	50$			; Branch if no
10$:	SUBB3	#^A'0',(R1)+,R9		; Bias character by ASCII 0
	CMPB	R9,#7			; Make sure in range
	BGTRU	50$			; Branch if no
	SOBGTR	R0,10$			; Loop until all examined
;
; Handle MFD in pattern and candidate strings.
;
20$:	CMPL	(R5),#6			; First pattern directory length 6?
	BNEQ	40$			; Branch if no
	SKPC	#^A'0',#6,@4(R5)	; First pattern directory '000000'?
	BNEQ	40$			; Branch if no
	CMPL	(R3),#6			; First candidate directory length 6?
	BNEQ	30$			; Branch if no
	SKPC	#^A'0',#6,@4(R3)	; First candidate directory '000000'?
	BEQL	60$			; Branch if yes
30$:	DECL	R4			; Prune '000000' from pattern
	ADDL2	#8,R5			;
	BRB	60$			; Go to do full match
40$:	CMPL	(R3),#6			; First candidate directory length 6?
	BNEQ	60$			; Branch if no
	SKPC	#^A'0',#6,@4(R3)	; Candidate directory is '000000'?
	BNEQ	60$			; Branch if no
	MOVQ	(R5),R0			; Get descriptor for first pattern
	BRW	140$			; Branch to fail with scan
50$:	BRW	130$			; Branch to fail
;
; Now execute the full-scale match.
;
60$:	DECL	R4			; Pattern exhausted?
	BLSS	80$			; Branch if yes
	MOVQ	(R5)+,R0		; Get next directory in pattern
	CMPB	(R1),#^A'.'		; Check for ellipsis
	BEQL	110$			; Branch if yes
	DECL	R2			; Candidate exhausted?
	BLSS	140$			; Branch if yes
	PUSHR	#^M<R2,R3,R4,R5>	; Save registers around MATCH_NAME
	MOVQ	R0,R4			; Load pattern descriptor to R4-R5
	MOVQ	(R3),R2			; Load candidate descriptor to R2-R3
	JSB	G^FMG$MATCH_NAME	; Check candidate against pattern
	POPR	#^M<R2,R3,R4,R5>	; Restore registers
	ADDL2	#8,R3			; Advance past descriptor
	BLBS	R0,60$			; Branch if match
;
; We have detected a mismatch, or we are out of pattern string while there
; is input left. Back up to the last ellipsis, advance a directory of the
; input, and try again.
;
70$:	DECL	R6			; Count a directory from saved input
	BLSS	120$			; Branch if no saved input
	ADDL2	#8,R7			; Set to try next input directory
	MOVQ	R6,R2			; Restore pointers to backup point
	MOVQ	R8,R4			;     to retry matching
	BRB	60$			; Continue testing
;
; Here when pattern string is exhausted.
;
80$:	TSTL	R2			; Input exhausted?
	BNEQ	70$			; Branch if no
;
; Establish the pattern file name, type, and version specified by
; the fourth parameter as the terminator and return success.
;
90$:	CMPB	(AP),#5			; Parameters present?
	BLSSU	100$			; Branch if no
	MOVL	12(AP),R9		; Point to result area descriptor
	CLRW	(R9)			; Set no terminator
	TSTL	R7			; Ellipsis found in string?
	BNEQ	100$			; Branch if yes
	MOVQ	@20(AP),R2		; Get descriptor for specification
	MOVZWL	R2,R2			; Truncate length to a word
	LOCC	#^A';',R2,(R3)		; Scan for version number
	BEQL	100$			; Branch if not found
	SUBL2	R0,R2			; R2-R3: name and type
	PUSHL	#0			; Create and clear result location
	PUSHL	SP			; Push address of result location
	PUSHAB	1(R1)			; Push address of version number
	PUSHAB	-(R0)			; Push length of version number
	CALLS	#3,G^LIB$CVT_DTB	; Convert version number
	CVTLW	(SP)+,@16(AP)		; Set terminator file version
	MOVW	R2,(R9)			; Set byte count of name and type
	MOVC3	R2,(R3),@4(R9)		; Set terminator file name and type
100$:	MOVL	#3,R0			; Set success status
	RET				; Return
;
; We have encountered an ellipsis in the pattern string.  Save the string
; pointers for backup and retry.
;
110$:	MOVQ	R2,R6			; Save current string pointers
	MOVQ	R4,R8			;     of both strings
	TSTL	R4			; Pattern string null after ellipsis?
	BEQL	90$			; Ellipsis at end matches all
	BRW	60$			; Continue testing
;
; Here when match fails.
;
120$:	TSTL	R7			; Ellipsis found in string?
	BNEQ	140$			; Branch if yes
130$:	CLRL	R0			; Set failure
	RET
;
; Here to establish the directory specified by R0-R1 as the terminator.
;
140$:	CMPB	(AP),#4			; Parameters present?
	BLSSU	150$			; Branch if no
	MOVL	12(AP),R9		; Point to result area descriptor
	CLRW	(R9)			; Set no terminator
	TSTL	R7			; Ellipsis found in string?
	BNEQ	150$			; Branch if yes
	ADDW3	#4,R0,(R9)		; Set byte count of name and type
	MOVC3	R0,(R1),@4(R9)		; Set terminator file name
	MOVL	#^A'.DIR',(R3)		; Set terminator file type
	MOVW	#1,@16(AP)		; Set terminator file version
150$:	MOVL	#2,R0			; Set no match, scan directory
	RET				; Return

	.SBTTL	TERMINATE_SCAN, test for scan termination

;++
;
; Functional Description:
;	This routine executes a greater-than match on the name, type, and
;	version of a candidate and terminator file specification.
;
; Calling Sequence:
;	CALLS/CALLG
;
; Input Parameters:
;	04(AP) = Length of candidate name and type string.
;	08(AP) = Address of candidate name and type string.
;	12(AP) = Candidate version number.
;	16(AP) = Length of terminator name and type string.
;	20(AP) = Address of terminator name and type string.
;	24(AP) = Terminator version number.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	none
;
; Routine Value:
;	True if the candidate file specification is known to follow the
;	terminator file specification in an ODS-2 directory.
;
; Signals:
;	none
;
; Side Effects:
;	none
;
;--

	.ENTRY	TERMINATE_SCAN,^M<R2,R3,R4,R5>
;
; Initialize for the loop.
;
	CLRL	R0			; Assume failure return
	MOVQ	4(AP),R2		; Get candidate string descriptor
	MOVQ	16(AP),R4		; Get terminator string descriptor
;
; Main scanning loop.
;
10$:	DECL	R4			; Terminator exhausted?
	BLSS	40$			; Branch if yes
	MOVZBL	(R5)+,R1		; Get next character in terminator
	CMPB	R1,#^A'*'		; Terminator specifies wild string?
	BEQL	30$			; Branch if yes
	CMPB	R1,#^A'%'		; Terminator specifies wild character?
	BEQL	30$			; Branch if yes
	DECL	R2			; Candidate exhausted?
	BLSS	30$			; Branch if yes
	CMPB	R1,(R3)+		; Compare terminator to candidate
	BEQL	10$			; Branch if terminator equals candidate
	BGTRU	30$			; Branch if terminator greater
20$:	MOVL	#1,R0			; Set success return
30$:	RET				; Return
;
; Here when terminator is exhausted.
;
40$:	TSTL	R2			; Candidate exhausted?
	BNEQ	20$			; Branch if no
;
; The match succeeded.  Now the version numbers must be matched.
;
	CMPL	12(AP),24(AP)		; Compare candidate to terminator
	BLSS	20$			; Branch if candidate smaller
	RET				; Return failure

	.SBTTL	PARSE_DIRECTORY, parse directory into components

;++
;
; Functional Description:
;	This routine parses the directory portion of a file specification.
;
; Calling Sequence:
;	JSB
;
; Input Parameters:
;	R2 = Length of directory string.
;	R3 = Address of directory string.
;	R4 = Pointer to result area.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	Result area contains a count of descriptors followed by one descriptor
;	for each component of the directory specification.  An ellipsis is
;	represented by a one-byte string '.'.  If the directory is in UIC
;	format, bit 16 of the descriptor count longword is set.
;
; Routines Called:
;	none
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	R0-R5 destroyed.
;
;--

PARSE_DIRECTORY:
	MOVAL	(R4)+,R5		; Keep pointer to result area and bump
	CLRL	(R5)			; Clear component count
;
; Main scanning loop.
;
10$:	LOCC	#^A'.',R2,(R3)		; Scan for delimiter
	BEQL	20$			; Branch if none found
	SUBL3	R0,R2,(R4)+		; Set length of this component
	MOVL	R3,(R4)+		; Set address of this component
	INCL	(R5)			; Count this component
	MOVAB	-(R0),R2		; Prune this component from string
	MOVAB	1(R1),R3		;
	CMPL	R2,#2			; At least 2 characters left?
	BLSS	10$			; Branch if no
	CMPW	(R3),#^A'..'		; Ellipsis present?
	BNEQ	10$			; Branch if no
	SUBL2	#2,R2			; Adjust count
	MOVL	#1,(R4)+		; Set length of this component
	MOVAW	(R3)+,(R4)+		; Set address of '.'
	INCL	(R5)			; Count this component
	BRB	10$			; Branch to get next component
;
; Here when no '.' found in string.
;
20$:	TSTL	R2			; At end of string?
	BEQL	30$			; Branch if no
	MOVQ	R2,(R4)+		; Set descriptor for last component
	INCL	(R5)			; Count last component
30$:	CMPL	(R5),#1			; One component?
	BNEQ	70$			; Branch if no
	MOVQ	4(R5),R2		; Get descriptor for first component
	LOCC	#^A',',R2,(R3)		; In UIC format?
	BEQL	70$			; Branch if no
;
; Special processing for UIC-format directory.
;
	BISB2	#1,2(R5)		; Set UIC format bit
	MOVAB	12(R5),R4		; Point to UIC storage
	MOVL	#6,4(R5)		; Reset component descriptor
	MOVL	R4,8(R5)		;
	MOVL	#^A'0000',(R4)+		; Initialize to 000000
	MOVW	#^A'00',(R4)+		;
	ADDL2	R2,R3			; Point past member number
	SUBL2	R0,R2			; Get length of group number
	DECL	R0			; Get length of member number
	CMPB	-1(R3),#^A'*'		; Is member number '*'?
	BNEQ	40$			; Branch if no
	MOVW	#^A'%%',-(R4)		; Make it '%%%' in output
	MOVB	#^A'%',-(R4)		;
	BRB	50$			; Done
40$:	MOVB	-(R3),-(R4)		; Copy one digit
	SOBGTR	R0,40$			; Loop until done
50$:	MOVAB	15(R5),R4		; Point past group number
	CMPB	-1(R1),#^A'*'		; Is group number '*'?
	BNEQ	60$			; Branch if no
	MOVW	#^A'%%',-(R4)		; Make it '%%%' in output
	MOVB	#^A'%',-(R4)		;
	RSB				; Done
60$:	MOVB	-(R1),-(R4)		; Copy one digit
	SOBGTR	R2,60$			; Loop till done
70$:	RSB				; Done

	.END
