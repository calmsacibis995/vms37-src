MODULE COMMAND	(%TITLE	'Command parser'
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that perform command parsing and
!	analysis.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 26-Aug-1980
!
! MODIFIED BY:
!
!	V03-001	MLJ0084		Martin L. Jack,	27-Mar-1982  17:00
!		Allow a save set to be written to a mailbox (including NL:).
!
!	V02-015	MLJ0081		Martin L. Jack,	26-Feb-1982  14:35
!		Correct setting of COM_INTERACTIVE for standalone and
!		STARTUP.COM environments.
!
!	V02-014	MLJ0073		Martin L. Jack,	19-Jan-1982  18:19
!		Implement /PROTECTION qualifier for save set protection.
!		Extend /LABEL qualifier to accept a list.
!
!	V02-013	MLJ0062		Martin L. Jack,	7-Dec-1981  13:57
!		Implement /INCREMENTAL.  Allow input volume of a /PHYSICAL
!		operation to be mounted foreign or to be mounted Files-11 if
!		the process has LOG_IO privilege.
!
!	V02-012	MLJ0054		Martin L. Jack,	15-Oct-1981  17:08
!		Allow save sets to be network files.  Implement /VOLUME
!		qualifier.  Implement /DELETE qualifier.  Integrate GET_VM
!		and FREE_VM jacket routines.  Delete JPI_STS, add COM_INTERACT
!		flag.
!
!	V02-011	MLJ0052		Martin L. Jack,	1-Oct-1981  13:16
!		Implement /INTERCHANGE qualifier.
!
!	V02-010	MLJ0049		Martin L. Jack,	28-Sep-1981  22:06
!		Correct test for /IMAGE in standalone environment.
!
!	V02-009	MLJ0043		Martin L. Jack,	8-Sep-1981  16:56
!		Account for RMS logical device name change.  Install $GETSYI.
!		Correct /SELECT and /EXCLUDE operation on [000000].
!
!	V02-008	MLJ0036		Martin L. Jack,	29-Aug-1981  16:00
!		Additional error detection.
!
!	V02-007	MLJ0025		Martin L. Jack,	8-May-1981  10:55
!		Reorganize qualifier database.  Remove /SEARCH qualifier.
!		Use PL/I varying strings rather than dynamic strings.
!
!	V02-006	MLJ0022		Martin L. Jack,	21-Apr-1981  13:53
!		Convert directory wildcarding to use RMS.
!
!	V02-005	MLJ0021		Martin L. Jack,	20-Apr-1981  21:50
!		Implement /TRUNCATE qualifier.
!
!	V02-004	MLJ0015		Martin L. Jack,	6-Apr-1981  23:22
!		Explicitly check for SS$_NOTRAN in translation of SYS$NODE.
!		Remove unnecessary code to clear QUAL area.
!
!	V02-003	MLJ0010		Martin L. Jack,	25-Mar-1981  16:20
!		Reorganize global storage.  Rename /OWNER to /OWNER_UIC.
!		Remove unnecessary parts of qualifier database.  Add capability
!		for listing concurrently with another operation.  Add checking
!		for properly mounted volumes.  Replace /SEQUENTIAL by /SAVE_SET
!		specified on a foreign volume.  Reparse to get save set name in
!		all elements of a list.  Changes for standalone operation.
!
!	V02-002	MLJ0008		Martin L. Jack,	10-Mar-1981  11:44
!		Rename /FILE to /SAVE_SET
!
!	V02-001	MLJ0005		Martin L. Jack,	26-Feb-1981  17:08
!		Allow null input save set filename
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:BACKDEF';
LIBRARY 'SYS$LIBRARY:TPAMAC';


FORWARD ROUTINE
	CALL_TPARSE,			! Execute call to LIB$TPARSE
	PRESERVE_STRING:NOVALUE,	! Preserve string value
	GET_FC,				! Get a file context area
	PARSE_EXC_SEL:	NOVALUE,	! Parse /EXCLUDE and /SELECT
	CHECK:		NOVALUE,	! Check input and output specifications
	COMMAND:	NOVALUE;	! Parse BACKUP command


EXTERNAL ROUTINE
	CLI$END_PARSE:	ADDRESSING_MODE(GENERAL),
					! Declare end of parsing
	CLI$GET_VALUE:	ADDRESSING_MODE(GENERAL),
					! Get a parameter or qualifier value
	CLI$PRESENT:	ADDRESSING_MODE(GENERAL),
					! Determine if entity is present
	LIB$CVT_DTB:	ADDRESSING_MODE(GENERAL),
					! Convert decimal string to binary
	LIB$CVT_TIME:	ADDRESSING_MODE(GENERAL),
					! Convert absolute time to binary
	LIB$TPARSE:	ADDRESSING_MODE(GENERAL),
					! Table-driven parser
	SYS$SETDFPROT:	ADDRESSING_MODE(GENERAL),
					! Read/set default file protection
	FILE_ERROR:	NOVALUE,	! Signal file-related error
	GET_VM,				! Allocate virtual memory
	GET_ZERO_VM;			! Allocate and clear virtual memory


EXTERNAL LITERAL
	BACKUP$_INVQUAVAL,
	BACKUP$_INVDEVTYP,
	BACKUP$_PARSE,
	BACKUP$_INCDEVLIS,
	BACKUP$_ONEF11OUT,
	BACKUP$_CMPOUTF11,
	BACKUP$_SAVSETNAM,
	BACKUP$_ONEIMGDEV,
	BACKUP$_ONEF11DEV,
	BACKUP$_ONEPHYDEV,
	BACKUP$_PHYFILSPE,
	BACKUP$_IMGFILSPE,
	BACKUP$_INCFILSPE,
	BACKUP$_LISINPSAV,
	BACKUP$_MOUNTF11,
	BACKUP$_MOUNTFOR,
	BACKUP$_CONFQUAL,
	CLI$_PRESENT,		! Explicit /QUAL
	CLI$_NEGATED;		! Explicit /NOQUAL


G$DEFINE();			! Define global area


FORWARD

	! TPARSE tables, which are defined at the end of this module.
	!
	UIC_STATES:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	UIC_KEYS:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	OWN_STATES:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	OWN_KEYS:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	IGN_STATES:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	IGN_KEYS:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	BAK_STATES:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	BAK_KEYS:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	PRO_STATES:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE),
	PRO_KEYS:	VECTOR[0] ADDRESSING_MODE(LONG_RELATIVE);


BIND

	! TPARSE parse-output variables.  To save space, these are defined
	! to overlay OUTPUT_ATTBUF.
	!
	TPA_GROUP=	OUTPUT_ATTBUF,				! Group number
	TPA_MEMBER=	OUTPUT_ATTBUF+4,			! Member number
	TPA_FLAGS=	OUTPUT_ATTBUF+8:	BLOCK[1],	! Various flags
	TPA_PROTECTION=	OUTPUT_ATTBUF:		VECTOR[,WORD],	! Protection
	DEVCLASS=	OUTPUT_ATTBUF;				! For $GETDVI


MACRO

	! Definitions of TPA_FLAGS.
	!
	TPA_WGROUP=	0,0,1,0 %,	! Wild group number
	TPA_WMEMBER=	0,1,1,0 %,	! Wild member number
	TPA_DEFAULT=	0,2,1,0 %,	! DEFAULT specified
	TPA_ORIGINAL=	0,3,1,0 %,	! ORIGINAL specified
	TPA_PARENT=	0,4,1,0 %,	! PARENT specified
	TPA_UIC=	0,5,1,0 %,	! UIC specified
	TPA_NOBACKUP=	0,6,1,0 %,	! NOBACKUP specified
	TPA_INTERLOCK=	0,7,1,0 %;	! INTERLOCK specified


LITERAL
	TPA_M_WGROUP=	$FIELDMASK(TPA_WGROUP),
	TPA_M_WMEMBER=	$FIELDMASK(TPA_WMEMBER),
	TPA_M_DEFAULT=	$FIELDMASK(TPA_DEFAULT),
	TPA_M_ORIGINAL=	$FIELDMASK(TPA_ORIGINAL),
	TPA_M_PARENT=	$FIELDMASK(TPA_PARENT),
	TPA_M_UIC=	$FIELDMASK(TPA_UIC),
	TPA_M_NOBACKUP=	$FIELDMASK(TPA_NOBACKUP),
	TPA_M_INTERLOCK=$FIELDMASK(TPA_INTERLOCK);


MACRO
	VAR_LENGTH=	0,0,16,0 %,	! Length of varying string
	VAR_BODY=	2,0,0,0 %;	! Body of varying string

ROUTINE CALL_TPARSE(SRC,STATES,KEYS)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine executes a call to LIB$TPARSE.
!
! INPUT PARAMETERS:
!	SRC		- Pointer to the string to be parsed (PL/I varying).
!	STATES		- State table parameter for TPARSE.
!	KEYS		- Keyword table parameter for TPARSE.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	As returned by LIB$TPARSE.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SRC:		REF BBLOCK;		! Pointer to varying string
LOCAL
	TPA_PARAM:	BBLOCK[TPA$K_LENGTH0];	! TPARSE parameter block


CH$FILL(0, TPA$K_LENGTH0, TPA_PARAM);
TPA_PARAM[TPA$L_COUNT] = TPA$K_COUNT0;
TPA_PARAM[TPA$L_OPTIONS] = TPA$M_ABBREV;
TPA_PARAM[TPA$L_STRINGCNT] = .SRC[VAR_LENGTH];
TPA_PARAM[TPA$L_STRINGPTR] = SRC[VAR_BODY];
LIB$TPARSE(TPA_PARAM, .STATES, .KEYS)
END;

ROUTINE PRESERVE_STRING(SRC,DST): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine saves the contents of the string buffer in dynamically
!	allocated memory.
!
! INPUT PARAMETERS:
!	SRC		- Pointer to input string (PL/I varying).
!	DST		- Pointer to descriptor that is initialized to
!			  describe the copy.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Dynamic memory is allocated.
!
!--

BEGIN
MAP
	SRC:		REF BBLOCK,	! Pointer to PL/I varying string
	DST:		REF BBLOCK;	! Pointer to descriptor


! Initialize output descriptor.
!
DST[DSC$W_LENGTH] = .SRC[VAR_LENGTH];
DST[DSC$B_DTYPE] = DSC$K_DTYPE_T;
DST[DSC$B_CLASS] = DSC$K_CLASS_S;


IF .SRC[VAR_LENGTH] NEQ 0
THEN
    BEGIN

    ! Allocate memory to hold string.
    !
    DST[DSC$A_POINTER] = GET_VM(.SRC[VAR_LENGTH]);


    ! Copy string to allocated memory.
    !
    CH$MOVE(.SRC[VAR_LENGTH], SRC[VAR_BODY], .DST[DSC$A_POINTER]);
    END;
END;

ROUTINE GET_FC(SRC)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine gets a file context area, initializing it.
!
! INPUT PARAMETERS:
!	SRC		- Pointer to filename string (PL/I varying).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Address of the allocated memory.
!
! SIDE EFFECTS:
!	LIB$GET_VM errors may be signalled.
!
!--

BEGIN
MAP
	SRC:		REF BBLOCK;	! Pointer to PL/I varying string
LOCAL
	DESC:		BBLOCK[8],	! Descriptor for preserved string
	AREA:		REF BBLOCK;	! Pointer to allocated area


PRESERVE_STRING(.SRC, DESC);		! Get dynamic copy of string
AREA = GET_ZERO_VM(FC_S_AREA);
$FAB_INIT(
    FAB=AREA[FC_FAB],
    FNA=.DESC[DSC$A_POINTER],
    FNS=.DESC[DSC$W_LENGTH],
    NAM=AREA[FC_NAM]);
$RAB_INIT(
    RAB=AREA[FC_RAB],
    FAB=AREA[FC_FAB]);
$NAM_INIT(
    NAM=AREA[FC_NAM],
    RLF=AREA[FC_RLF],
    ESA=AREA[FC_ESA],
    ESS=NAM$C_MAXRSS,
    RSA=AREA[FC_RSA],
    RSS=NAM$C_MAXRSS);
$NAM_INIT(
    NAM=AREA[FC_RLF]);
.AREA
END;

ROUTINE PARSE_EXC_SEL(SRC,QUAL_DESC,ESL_DESC): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine parses and checks the value of an EXCLUDE or SELECT
!	qualifier.
!
! INPUT PARAMETERS:
!	SRC		- Pointer to the string to be parsed (PL/I varying).
!	QUAL_DESC	- Descriptor for the qualifier name.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ESL_DESC	- Rewritten with the expanded string resulting
!			  from the $PARSE operation.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SRC:		REF BBLOCK,	! Pointer to PL/I varying string
	ESL_DESC:	REF BBLOCK;	! Pointer to descriptor
LOCAL
	FAB:		BBLOCK[FAB$C_BLN],	! Local FAB
	NAM:		BBLOCK[NAM$C_BLN],	! Local NAM block
	ESA:		BBLOCK[NAM$C_MAXRSS];	! Local expanded string


! Initialize the local RMS structures we use to do this $PARSE.
!
$FAB_INIT(FAB=FAB,
    DNA=UPLIT BYTE('[000000...]*.*;*'),
    DNS=%CHARCOUNT('[000000...]*.*;*'),
    FNA=SRC[VAR_BODY],
    FNS=.SRC[VAR_LENGTH],
    NAM=NAM);
$NAM_INIT(NAM=NAM,
    ESA=ESA,
    ESS=NAM$C_MAXRSS);


! Execute the $PARSE.
!
$PARSE(FAB=FAB);


! If an error we are not willing to accept occurs, signal it.
!
IF
    .NAM[NAM$B_ESL] EQL 0 OR
    (.NAM[NAM$L_FNB] AND
	(NAM$M_EXP_DEV OR
	 NAM$M_NODE OR
	 NAM$M_QUOTED)) NEQ 0
THEN
    SIGNAL(BACKUP$_INVQUAVAL, 3, .SRC[VAR_LENGTH], SRC[VAR_BODY], .QUAL_DESC);


! Initialize output descriptor.
!
ESL_DESC[DSC$W_LENGTH] = .NAM[NAM$B_ESL];
ESL_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
ESL_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;


! Allocate memory to hold string.
!
ESL_DESC[DSC$A_POINTER] = GET_VM(.NAM[NAM$B_ESL]);


! Copy the expanded string to ESL_DESC.
!
CH$MOVE(
    .NAM[NAM$B_ESL],
    ESA,
    .ESL_DESC[DSC$A_POINTER]);


! Do another $PARSE on the null string.  This will delete the internal RMS
! context, if any.
!
FAB[FAB$B_FNS] = 0;
FAB[FAB$B_DNS] = 0;
$PARSE(FAB=FAB);
END;

ROUTINE CHECK(ROOT,OUTPUT_SIDE): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine validity-checks the input and output lists.
!
! INPUT PARAMETERS:
!	ROOT		- Root of the input or output list.
!	OUTPUT_SIDE	- True if output, false if input.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Messages may be signalled if errors are detected.
!
!--

BEGIN
MAP
	ROOT:		REF BBLOCK;	! Root of list
LOCAL
	P:		REF BBLOCK,	! Cursor for list
	NAM:		REF BBLOCK,	! Name block pointer
	F:		BBLOCK[4];	! Flags
MACRO
	F_COUNT=	0,0,8,0 %,	! Count of items in list
	F_F11=		1,0,1,0 %,	! True if Files-11 seen
	F_SAV=		1,1,1,0 %,	! True if save set seen
	F_SAVE_SET=	1,2,1,0 %;	! True if /SAVE_SET


P = .ROOT;
F = 0;
NAM = 0;

WHILE .P NEQ 0 DO
    BEGIN
    LOCAL
	FAB:	REF BBLOCK;


    F[F_COUNT] = .F[F_COUNT] + 1;
    FAB = .P[QUAL_PARA_FC];
    IF .OUTPUT_SIDE
	THEN F[F_SAVE_SET] = .QUAL[QUAL_O_SAVE]
	ELSE F[F_SAVE_SET] = .QUAL[QUAL_I_SAVE];
    IF .NAM NEQ 0
    THEN
	BEGIN
	BBLOCK[FAB[FC_RLF], NAM$B_RSL] = .NAM[NAM$B_ESL];
	BBLOCK[FAB[FC_RLF], NAM$L_RSA] = .NAM[NAM$L_ESA];
	END;
    NAM = FAB[FC_NAM];


    IF NOT $PARSE(FAB=.FAB)
    THEN
	IF .FAB[FAB$L_STS] EQL RMS$_DNF
	THEN
	    FAB[FAB$L_DEV] = DEV$M_FOD OR DEV$M_MNT
	ELSE
	    FILE_ERROR(BACKUP$_PARSE, .FAB, .FAB[FAB$L_STS], .FAB[FAB$L_STV]);


    IF
	NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_FOD] AND
	NOT ((.BBLOCK[FAB[FAB$L_DEV], DEV$V_NET] OR
	    .BBLOCK[FAB[FAB$L_DEV], DEV$V_MBX]) AND .F[F_SAVE_SET])
    THEN
	FILE_ERROR(BACKUP$_INVDEVTYP, .FAB);


    IF
	.BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD] OR
	.F[F_SAVE_SET]
    THEN
	BEGIN
	F[F_SAV] = TRUE;
	IF .BBLOCK[FAB[FAB$L_DEV], DEV$V_FOR]
	THEN
	    BEGIN
	    IF .F[F_COUNT] EQL 1
	    THEN
		BEGIN
		FAB[FAB$B_DNS] = %CHARCOUNT('[000000]');
		FAB[FAB$L_DNA] = UPLIT BYTE('[000000]');
		$PARSE(FAB=.FAB);
		END;
	    END
	ELSE
	    QUAL[QUAL_SS_FILE] = TRUE;


	IF
	    BEGIN
	    IF .NAM[NAM$V_WILDCARD]
	    THEN
		TRUE				! no wildcard in save set spec
	    ELSE IF
		(.NAM[NAM$L_FNB] AND
		    (NAM$M_NODE OR NAM$M_QUOTED OR
		    NAM$M_EXP_DIR OR NAM$M_EXP_NAME OR
		    NAM$M_EXP_TYPE OR NAM$M_EXP_VER)) NEQ 0
	    THEN
		.F[F_COUNT] NEQ 1		! non-null must be first
	    ELSE
		.F[F_COUNT] EQL 1 AND .OUTPUT_SIDE
						! null must not be first output
	    END
	THEN
	    SIGNAL(BACKUP$_SAVSETNAM); ! save set name must be in first spec


	IF .F[F_F11]
	    THEN SIGNAL(BACKUP$_INCDEVLIS); ! inconsistent devices in list


	IF .OUTPUT_SIDE
	THEN
	    BEGIN
	    IF .QUAL[QUAL_ISAV]
		THEN SIGNAL(BACKUP$_ONEF11DEV); ! one F11 device
	    IF .QUAL[QUAL_COMP]
		THEN SIGNAL(BACKUP$_CMPOUTF11); ! /COMPARE requires F11 output
	    END;
	END
    ELSE
	BEGIN
	F[F_F11] = TRUE;


	IF .QUAL[QUAL_PHYS]
	THEN
	    BEGIN
	    IF .F[F_COUNT] GTR 1
		THEN SIGNAL(BACKUP$_ONEPHYDEV); ! one /PHYSICAL device
	    IF (.NAM[NAM$L_FNB] AND
		(NAM$M_EXP_DIR OR NAM$M_EXP_NAME OR
		 NAM$M_EXP_TYPE OR NAM$M_EXP_VER)) NEQ 0
		THEN SIGNAL(BACKUP$_PHYFILSPE); ! bad /PHYSICAL spec
	    END
	ELSE IF .QUAL[QUAL_IMAG] OR .COM_FLAGS[COM_STANDALONE]
	THEN
	    BEGIN
	    IF .F[F_COUNT] GTR 1 AND NOT .OUTPUT_SIDE AND NOT .COM_FLAGS[COM_STANDALONE]
		THEN SIGNAL(BACKUP$_ONEIMGDEV); ! one /IMAGE device
	    IF (.NAM[NAM$L_FNB] AND
		(NAM$M_EXP_DIR OR NAM$M_EXP_NAME OR
		 NAM$M_EXP_TYPE OR NAM$M_EXP_VER)) NEQ 0
		THEN SIGNAL(BACKUP$_IMGFILSPE); ! bad /IMAGE spec
	    END
	ELSE IF .QUAL[QUAL_INCR]
	THEN
	    BEGIN
	    IF (.NAM[NAM$L_FNB] AND
		(NAM$M_EXP_DIR OR NAM$M_EXP_NAME OR
		 NAM$M_EXP_TYPE OR NAM$M_EXP_VER)) NEQ 0
		THEN SIGNAL(BACKUP$_INCFILSPE); ! bad /INCREMENTAL spec
	    END;


	IF .F[F_SAV]
	    THEN SIGNAL(BACKUP$_INCDEVLIS); ! inconsistent devices in list


	IF .OUTPUT_SIDE
	THEN
	    BEGIN
	    IF
		.F[F_COUNT] GTR 1 AND
		NOT .QUAL[QUAL_IMAG] AND
		NOT .COM_FLAGS[COM_STANDALONE]
	    THEN
		SIGNAL(BACKUP$_ONEF11OUT); ! too many outputs
	    END
	ELSE
	    BEGIN
	    IF .QUAL[QUAL_LIST] AND .QUAL[QUAL_OUTP_LIST] EQL 0
		THEN SIGNAL(BACKUP$_LISINPSAV); ! LIST input must be saveset
	    END;


	IF .F[F_COUNT] EQL 1
	THEN
	    BEGIN
	    FAB[FAB$B_DNS] = %CHARCOUNT('*.*;*');
	    FAB[FAB$L_DNA] = UPLIT BYTE('*.*;*');
	    $PARSE(FAB=.FAB);
	    END;
	END;


    IF NOT .COM_FLAGS[COM_STANDALONE]
    THEN
	IF  (
	    .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD]
	OR
	    NOT .F[F_SAVE_SET] AND
	    (.QUAL[QUAL_PHYS] OR
	     .QUAL[QUAL_IMAG] AND .OUTPUT_SIDE AND NOT .QUAL[QUAL_COMP])
	    )
	THEN
	    BEGIN
	    !
	    ! Tape save set, physical volume, or image output.
	    ! Must be mounted foreign.
	    !
	    IF
		NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_FOR] AND
		NOT (.QUAL[QUAL_PHYS] AND NOT .OUTPUT_SIDE AND
		    .JPI_CURPRIV[PRV$V_LOG_IO])
	    THEN
		FILE_ERROR(BACKUP$_MOUNTFOR, .FAB);
	    END
	ELSE IF NOT .F[F_SAVE_SET]
	THEN
	    BEGIN
	    !
	    ! Files.
	    ! Must be mounted Files-11.
	    !
	    IF .BBLOCK[FAB[FAB$L_DEV], DEV$V_FOR]
	    THEN
		FILE_ERROR(BACKUP$_MOUNTF11, .FAB);
	    END;


    ! Set up expanded-string descriptors.
    !
    BBLOCK[P[QUAL_EXP_DESC], DSC$W_LENGTH] = .NAM[NAM$B_ESL];
    BBLOCK[P[QUAL_EXP_DESC], DSC$A_POINTER] = .NAM[NAM$L_ESA];
    BBLOCK[P[QUAL_DEV_DESC], DSC$W_LENGTH] = .NAM[NAM$B_DEV];
    BBLOCK[P[QUAL_DEV_DESC], DSC$A_POINTER] = .NAM[NAM$L_DEV];
    BBLOCK[P[QUAL_DVI_DESC], DSC$W_LENGTH] = .(NAM[NAM$T_DVI])<0,8>;
    BBLOCK[P[QUAL_DVI_DESC], DSC$A_POINTER] = NAM[NAM$T_DVI] + 1;
    P = .P[QUAL_NEXT];
    END;


IF .OUTPUT_SIDE
THEN
    BEGIN
    QUAL[QUAL_OF11] = .F[F_F11];
    QUAL[QUAL_OSAV] = .F[F_SAV];
    END
ELSE
    BEGIN
    QUAL[QUAL_IF11] = .F[F_F11];
    QUAL[QUAL_ISAV] = .F[F_SAV];
    END;
END;

GLOBAL ROUTINE COMMAND: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the command parser.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MACRO

	! Generate static string descriptors.
	!
	SD[A]=
	    BIND %NAME('SD_', A) = $DESCRIPTOR(A) %;


	! Generate the static descriptors.
	!
	SD(
	    '$LINE',
	    'ANALYZE',
	    'BACKUP',
	    'BEFORE',
	    'BLOCK_SIZE',
	    'BRIEF',
	    'BUFFER_COUNT',
	    'COMMENT',
	    'COMPARE',
	    'CONFIRM',
	    'CRC',
	    'CREATED',
	    'DELETE',
	    'DENSITY',
	    'EXCLUDE',
	    'EXPIRED',
	    'FAST',
	    'FULL',
	    'GROUP_SIZE',
	    'IGNORE',
	    'IMAGE',
	    'INCREMENTAL',
	    'INITIALIZE',
	    'INPUTS',
	    'INTERCHANGE',
	    'JOURNAL',
	    'LABEL',
	    'LIST',
	    'LOG',
	    'MODIFIED',
	    'NEW_VERSION',
	    'OUTPUTS',
	    'OVERLAY',
	    'OWNER_UIC',
	    'PHYSICAL',
	    'PROTECTION',
	    'RECORD',
	    'REPLACE',
	    'REWIND',
	    'SAVE_SET',
	    'SELECT',
	    'SINCE',
	    'TRUNCATE',
	    'VERIFY',
	    'VOLUME');
LITERAL
	MAX_STRING=	1024;		! Maximum string value
LOCAL
	BUFFER:		BBLOCK[MAX_STRING+2],	! Buffer for string value
	STATUS,				! Status variable
	VALUE,				! Buffer for converted numerics
	DESC:		BBLOCK[8],	! Local descriptor
	DESC2:		BBLOCK[8],	! Second local descriptor
	LAST:		REF BBLOCK;	! Pointer to last value block


! Execute services to get information needed by the utility.
!
IF
    BEGIN
    IF $GETDVI(
	DEVNAM=$DESCRIPTOR('SYS$COMMAND'),
	ITMLST=
	    UPLIT(
		WORD(4, DVI$_DEVCLASS OR DVI$C_SECONDARY), DEVCLASS, 0,
		0))
    THEN
	BEGIN
	$WAITFR(EFN=0);
	.DEVCLASS EQL DC$_TERM
	END
    ELSE
	TRUE
    END
THEN
    COM_FLAGS[COM_INTERACT] = TRUE;


$GETJPI(ITMLST=
    UPLIT(
	WORD(4, JPI$_UIC), JPI_UIC, 0,
	WORD(12, JPI$_USERNAME), JPI_USERNAME, 0,
	WORD(8, JPI$_CURPRIV), JPI_CURPRIV, 0,
	0));
$GETSYI(ITMLST=
    UPLIT(
	WORD(4, SYI$_VERSION), SYI_VERSION, 0,
	WORD(4, SYI$_SID), SYI_SID, 0,
	0));
$GETTIM(TIMADR=JPI_DATE);
DESC[DSC$W_LENGTH] = MAX_STRING;
DESC[DSC$B_DTYPE] = 0;
DESC[DSC$B_CLASS] = 0;
DESC[DSC$A_POINTER] = BUFFER[VAR_BODY];
STATUS = $TRNLOG(
    LOGNAM=$DESCRIPTOR('SYS$NODE'),
    RSLLEN=BUFFER[VAR_LENGTH],
    RSLBUF=DESC);
IF .STATUS AND .STATUS NEQ SS$_NOTRAN
    THEN PRESERVE_STRING(BUFFER, JPI_NODE_DESC);


! Initialize descriptor to describe the string buffer as a PL/I varying string.
! Initialize second descriptor to describe the body portion -- the length will
! be filled in as necessary.
!
DESC[DSC$W_MAXSTRLEN] = MAX_STRING;
DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
DESC[DSC$B_CLASS] = DSC$K_CLASS_VS;
DESC[DSC$A_POINTER] = BUFFER;
DESC2[DSC$W_LENGTH] = 0;
DESC2[DSC$B_DTYPE] = DSC$K_DTYPE_T;
DESC2[DSC$B_CLASS] = DSC$K_CLASS_S;
DESC2[DSC$A_POINTER] = BUFFER[VAR_BODY];


! Get the command.
!
CLI$GET_VALUE(SD_$LINE, DESC);
PRESERVE_STRING(BUFFER, QUAL[QUAL_CMD_DESC]);


! Get the /ANALYZE qualifier.
!
QUAL[QUAL_ANAL] = CLI$PRESENT(SD_ANALYZE);


! Get the /BACKUP qualifier.
!
QUAL[QUAL_BACK] = CLI$PRESENT(SD_BACKUP);


! Get the /BEFORE qualifier.
!
IF CLI$GET_VALUE(SD_BEFORE, DESC)
THEN
    BEGIN
    QUAL[QUAL_BEFO] = TRUE;
    IF CALL_TPARSE(BUFFER, BAK_STATES, BAK_KEYS)
    THEN
	QUAL[QUAL_BEFO_BACK] = TRUE
    ELSE
	BEGIN
	DESC2[DSC$W_LENGTH] = .BUFFER[VAR_LENGTH];
	IF NOT LIB$CVT_TIME(DESC2, QUAL[QUAL_BEFO_VALUE])
	    THEN SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_BEFORE);
	END;
    END;


! Get the /BLOCK_SIZE qualifier.
!
IF CLI$GET_VALUE(SD_BLOCK_SIZE, DESC)
THEN
    BEGIN
    IF
	BEGIN
	IF NOT LIB$CVT_DTB(.BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], VALUE)
	THEN
	    TRUE
	ELSE
	    .VALUE - 2048 GTRU 65535 - 2048 ! 2048 <= N <= 65535
	END
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_BLOCK_SIZE);
    QUAL[QUAL_BLOC] = TRUE;
    QUAL[QUAL_BLOC_VALUE] = .VALUE;
    END;


! Get the /BRIEF qualifier.
!
CLI$PRESENT(SD_BRIEF);


! Get the /BUFFER_COUNT qualifier.
!
IF CLI$GET_VALUE(SD_BUFFER_COUNT, DESC)
THEN
    BEGIN
    IF
	BEGIN
	IF NOT LIB$CVT_DTB(.BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], VALUE)
	THEN
	    TRUE
	ELSE
	    .VALUE - 2 GTRU 5 - 2 ! 2 <= N <= 5
	END
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_BUFFER_COUNT);
    QUAL[QUAL_BUFF] = TRUE;
    QUAL[QUAL_BUFF_VALUE] = .VALUE;
    END;


! Get the /COMMENT qualifier.
!
QUAL[QUAL_COMM] = CLI$GET_VALUE(SD_COMMENT, DESC);
PRESERVE_STRING(BUFFER, QUAL[QUAL_COMM_DESC]);


! Get the /COMPARE qualifier.
!
QUAL[QUAL_COMP] = CLI$PRESENT(SD_COMPARE);


! Get the /CONFIRM qualifier.
!
QUAL[QUAL_CONF] = CLI$PRESENT(SD_CONFIRM);


! Get the /CRC qualifier.
!
QUAL[QUAL_CRC] = CLI$PRESENT(SD_CRC);


! Get the /CREATED qualifier.
!
QUAL[QUAL_CREA] = CLI$PRESENT(SD_CREATED);


! Get the /DELETE qualifier.
!
QUAL[QUAL_DELE] = CLI$PRESENT(SD_DELETE);


! Get the /DENSITY qualifier.
!
IF CLI$GET_VALUE(SD_DENSITY, DESC)
THEN
    BEGIN
    IF
	BEGIN
	IF NOT LIB$CVT_DTB(.BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], VALUE)
	THEN
	    TRUE
	ELSE
	    SELECTONE .VALUE OF
		SET
		[ 800]: (QUAL[QUAL_DENS_VALUE] = MT$K_NRZI_800; FALSE);
		[1600]: (QUAL[QUAL_DENS_VALUE] = MT$K_PE_1600;  FALSE);
		[6250]: (QUAL[QUAL_DENS_VALUE] = MT$K_GCR_6250; FALSE);
		[OTHERWISE]: TRUE;
		TES
	END
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_DENSITY);
    QUAL[QUAL_DENS] = TRUE;
    END;


! Get the /EXCLUDE qualifier.
!
LAST = 0;
WHILE CLI$GET_VALUE(SD_EXCLUDE, DESC) DO
    BEGIN
    LOCAL
	EXCL:	REF BBLOCK;

    QUAL[QUAL_EXCL] = TRUE;
    EXCL = GET_ZERO_VM(QUAL_S_EXCL);
    IF .LAST EQL 0
	THEN QUAL[QUAL_EXCL_LIST] = .EXCL
	ELSE LAST[QUAL_NEXT] = .EXCL;
    LAST = .EXCL;
    PARSE_EXC_SEL(BUFFER, SD_EXCLUDE, EXCL[QUAL_EXCL_DESC]);
    END;


! Get the /EXPIRED qualifier.
!
QUAL[QUAL_EXPI] = CLI$PRESENT(SD_EXPIRED);


! Get the /FAST qualifier.
!
QUAL[QUAL_FAST] = CLI$PRESENT(SD_FAST);


! Get the /FULL qualifier.
!
QUAL[QUAL_FULL] = CLI$PRESENT(SD_FULL);


! Get the /GROUP_SIZE qualifier.
!
IF CLI$GET_VALUE(SD_GROUP_SIZE, DESC)
THEN
    BEGIN
    IF
	BEGIN
	IF NOT LIB$CVT_DTB(.BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], VALUE)
	THEN
	    TRUE
	ELSE
	    .VALUE GTRU 100
	END
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_GROUP_SIZE);
    QUAL[QUAL_GROU] = TRUE;
    QUAL[QUAL_GROU_VALUE] = .VALUE;
    END;


! Get the /IGNORE qualifier.
!
WHILE CLI$GET_VALUE(SD_IGNORE, DESC) DO
    BEGIN
    TPA_FLAGS = 0;
    IF NOT CALL_TPARSE(BUFFER, IGN_STATES, IGN_KEYS)
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_IGNORE);
    IF .TPA_FLAGS[TPA_NOBACKUP] THEN QUAL[QUAL_IGNO_NOBA] = TRUE;
    IF .TPA_FLAGS[TPA_INTERLOCK] THEN QUAL[QUAL_IGNO_INTE] = TRUE;
    END;


! Get the /IMAGE qualifier.
!
QUAL[QUAL_IMAG] = CLI$PRESENT(SD_IMAGE);


! Get the /INCREMENTAL qualifier.
!
QUAL[QUAL_INCR] = CLI$PRESENT(SD_INCREMENTAL);


! Get the /INITIALIZE qualifier.
!
QUAL[QUAL_INIT] = CLI$PRESENT(SD_INITIALIZE);


! Get the /INTERCHANGE qualifier.
!
QUAL[QUAL_INTE] = CLI$PRESENT(SD_INTERCHANGE);


! Get the /JOURNAL qualifier.
!
IF CLI$PRESENT(SD_JOURNAL)
THEN
    BEGIN
    QUAL[QUAL_JOUR] = TRUE;
    CLI$GET_VALUE(SD_JOURNAL, DESC);
    QUAL[QUAL_JOUR_FC] = GET_FC(BUFFER);
    END;


! Get the /LABEL qualifier.
!
LAST = 0;
WHILE CLI$GET_VALUE(SD_LABEL, DESC) DO
    BEGIN
    LOCAL
	LABE:	REF BBLOCK;

    IF .BUFFER[VAR_LENGTH] GTRU 12
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_LABEL);
    QUAL[QUAL_LABE] = TRUE;
    LABE = GET_ZERO_VM(QUAL_S_LABE);
    IF .LAST EQL 0
	THEN QUAL[QUAL_LABE_LIST] = .LABE
	ELSE LAST[QUAL_NEXT] = .LABE;
    LAST = .LABE;
    CH$COPY(
	.BUFFER[VAR_LENGTH], BUFFER[VAR_BODY],
	%C' ',
	12, LABE[QUAL_LABE_VALUE]);
    END;


! Get the /LIST qualifier.
!
IF CLI$PRESENT(SD_LIST)
THEN
    BEGIN
    QUAL[QUAL_LIST] = TRUE;
    CLI$GET_VALUE(SD_LIST, DESC);
    QUAL[QUAL_LIST_FC] = GET_FC(BUFFER);
    END;


! Get the /LOG qualifier.
!
QUAL[QUAL_LOG] = CLI$PRESENT(SD_LOG);


! Get the /MODIFIED qualifier.
!
QUAL[QUAL_MODI] = CLI$PRESENT(SD_MODIFIED);


! Get the /NEW_VERSION qualifier.
!
QUAL[QUAL_NEWV] = CLI$PRESENT(SD_NEW_VERSION);


! Get the /OVERLAY qualifier.
!
QUAL[QUAL_OVER] = CLI$PRESENT(SD_OVERLAY);


! Get the /PHYSICAL qualifier.
!
QUAL[QUAL_PHYS] = CLI$PRESENT(SD_PHYSICAL);


! Get the /RECORD qualifier.
!
QUAL[QUAL_RECO] = CLI$PRESENT(SD_RECORD);


! Get the /REPLACE qualifier.
!
QUAL[QUAL_REPL] = CLI$PRESENT(SD_REPLACE);


! Get the /REWIND qualifier.
!
QUAL[QUAL_REWI] = CLI$PRESENT(SD_REWIND);


! Get the /SELECT qualifier.
!
LAST = 0;
WHILE CLI$GET_VALUE(SD_SELECT, DESC) DO
    BEGIN
    LOCAL
	SELE:	REF BBLOCK;

    QUAL[QUAL_SELE] = TRUE;
    SELE = GET_ZERO_VM(QUAL_S_SELE);
    IF .LAST EQL 0
	THEN QUAL[QUAL_SELE_LIST] = .SELE
	ELSE LAST[QUAL_NEXT] = .SELE;
    LAST = .SELE;
    PARSE_EXC_SEL(BUFFER, SD_SELECT, SELE[QUAL_SELE_DESC]);
    END;


! Get the /SINCE qualifier.
!
IF CLI$GET_VALUE(SD_SINCE, DESC)
THEN
    BEGIN
    QUAL[QUAL_SINC] = TRUE;
    IF CALL_TPARSE(BUFFER, BAK_STATES, BAK_KEYS)
    THEN
	QUAL[QUAL_SINC_BACK] = TRUE
    ELSE
	BEGIN
	DESC2[DSC$W_LENGTH] = .BUFFER[VAR_LENGTH];
	IF NOT LIB$CVT_TIME(DESC2, QUAL[QUAL_SINC_VALUE])
	    THEN SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_SINCE);
	END;
    END;


! Get the /TRUNCATE qualifier.
!
QUAL[QUAL_TRUN] = CLI$PRESENT(SD_TRUNCATE);


! Get the /VERIFY qualifier.
!
QUAL[QUAL_VERI] = CLI$PRESENT(SD_VERIFY);


! Get the /VOLUME qualifier.
!
IF CLI$GET_VALUE(SD_VOLUME, DESC)
THEN
    BEGIN
    IF
	BEGIN
	IF NOT LIB$CVT_DTB(.BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], VALUE)
	THEN
	    TRUE
	ELSE
	    .VALUE - 1 GTRU 255 - 1 ! 1 <= N <= 255
	END
    THEN
	SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_VOLUME);
    QUAL[QUAL_VOLU] = TRUE;
    QUAL[QUAL_VOLU_VALUE] = .VALUE;
    END;


! Get the input parameter, and its local qualifiers.
!
LAST = 0;
WHILE CLI$GET_VALUE(SD_INPUTS, DESC) DO
    BEGIN
    LOCAL
	INPU:	REF BBLOCK;


    INPU = GET_ZERO_VM(QUAL_S_INPU);
    IF .LAST EQL 0
	THEN QUAL[QUAL_INPU_LIST] = .INPU
	ELSE LAST[QUAL_NEXT] = .INPU;
    LAST = .INPU;


    INPU[QUAL_PARA_FC] = GET_FC(BUFFER);


    ! Get the /OWNER_UIC qualifier.
    !
    IF CLI$PRESENT(SD_OWNER_UIC)
    THEN
	BEGIN
	QUAL[QUAL_I_OWNE] = TRUE;
	IF NOT CLI$GET_VALUE(SD_OWNER_UIC, DESC)
	THEN
	    BEGIN
	    QUAL[QUAL_I_OWN_VALU] = .JPI_UIC;
	    QUAL[QUAL_I_OWN_WGRP] = FALSE;
	    QUAL[QUAL_I_OWN_WMEM] = FALSE;
	    END
	ELSE
	    BEGIN
	    TPA_GROUP = TPA_MEMBER = TPA_FLAGS = 0;
	    IF
		BEGIN
		IF NOT CALL_TPARSE(BUFFER, UIC_STATES, UIC_KEYS)
		THEN
		    TRUE
		ELSE
		    .TPA_GROUP<16,16> NEQ 0 OR .TPA_MEMBER<16,16> NEQ 0
		END
	    THEN
	        SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_OWNER_UIC);
	    QUAL[QUAL_I_OWN_GRP] = .TPA_GROUP;
	    QUAL[QUAL_I_OWN_MEM] = .TPA_MEMBER;
	    QUAL[QUAL_I_OWN_WGRP] = .TPA_FLAGS[TPA_WGROUP];
	    QUAL[QUAL_I_OWN_WMEM] = .TPA_FLAGS[TPA_WMEMBER];
	    END;
	END;


    ! Get the /SAVE_SET qualifier.  The rightmost explicit specification
    ! applies.
    !
    STATUS = CLI$PRESENT(SD_SAVE_SET);
    IF .STATUS EQL CLI$_PRESENT OR .STATUS EQL CLI$_NEGATED
	THEN QUAL[QUAL_I_SAVE] = .STATUS;
    END;


! Get the output parameter, and its local qualifiers.
!
LAST = 0;
WHILE CLI$GET_VALUE(SD_OUTPUTS, DESC) DO
    BEGIN
    LOCAL
	OUTP:	REF BBLOCK;


    OUTP = GET_ZERO_VM(QUAL_S_OUTP);
    IF .LAST EQL 0
	THEN QUAL[QUAL_OUTP_LIST] = .OUTP
	ELSE LAST[QUAL_NEXT] = .OUTP;
    LAST = .OUTP;


    OUTP[QUAL_PARA_FC] = GET_FC(BUFFER);


    ! Get the /OWNER_UIC qualifier.
    !
    IF CLI$PRESENT(SD_OWNER_UIC)
    THEN
	BEGIN
	IF NOT CLI$GET_VALUE(SD_OWNER_UIC, DESC)
	THEN
	    BEGIN
	    QUAL[QUAL_O_OWN_VALU] = 0;
	    QUAL[QUAL_O_OWN_DEFA] = FALSE;
	    QUAL[QUAL_O_OWN_ORIG] = TRUE;
	    QUAL[QUAL_O_OWN_PARE] = FALSE;
	    QUAL[QUAL_O_OWN_UIC] = FALSE;
	    END
	ELSE
	    BEGIN
	    TPA_GROUP = TPA_MEMBER = TPA_FLAGS = 0;
	    IF
		BEGIN
		IF NOT CALL_TPARSE(BUFFER, OWN_STATES, OWN_KEYS)
		THEN
		    TRUE
		ELSE
		    .TPA_GROUP<16,16> NEQ 0 OR .TPA_MEMBER<16,16> NEQ 0
		END
	    THEN
		SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_OWNER_UIC);
	    QUAL[QUAL_O_OWN_GRP] = .TPA_GROUP;
	    QUAL[QUAL_O_OWN_MEM] = .TPA_MEMBER;
	    QUAL[QUAL_O_OWN_DEFA] = .TPA_FLAGS[TPA_DEFAULT];
	    QUAL[QUAL_O_OWN_ORIG] = .TPA_FLAGS[TPA_ORIGINAL];
	    QUAL[QUAL_O_OWN_PARE] = .TPA_FLAGS[TPA_PARENT];
	    QUAL[QUAL_O_OWN_UIC] = .TPA_FLAGS[TPA_UIC];
	    END;
	END;


    ! Get the /PROTECTION qualifier.
    !
    IF CLI$PRESENT(SD_PROTECTION)
    THEN
	BEGIN
	LOCAL
	    DEFAULT_PROT;

	QUAL[QUAL_PROT] = TRUE;
	TPA_PROTECTION = 0;
	WHILE CLI$GET_VALUE(SD_PROTECTION, DESC) DO
	    BEGIN
	    IF NOT CALL_TPARSE(BUFFER, PRO_STATES, PRO_KEYS)
	    THEN
		SIGNAL(BACKUP$_INVQUAVAL, 3, .BUFFER[VAR_LENGTH], BUFFER[VAR_BODY], SD_PROTECTION);
	    END;


	DEFAULT_PROT = %X'FF00';	! S:RWED,O:RWED,G,W
	IF NOT .COM_FLAGS[COM_STANDALONE] THEN SYS$SETDFPROT(0, DEFAULT_PROT);
	QUAL[QUAL_PROT_VALUE] =
	    (.DEFAULT_PROT AND NOT .TPA_PROTECTION[1]) OR
	    (.TPA_PROTECTION[1] AND NOT .TPA_PROTECTION[0]);
	END;


    ! Get the /SAVE_SET qualifier.  The rightmost explicit specification
    ! applies.
    !
    STATUS = CLI$PRESENT(SD_SAVE_SET);
    IF .STATUS EQL CLI$_PRESENT OR .STATUS EQL CLI$_NEGATED
	THEN QUAL[QUAL_O_SAVE] = .STATUS;
    END;


! Indicate completion of parsing.
!
CLI$END_PARSE();


! Check the input and output lists.
!
IF .QUAL[QUAL_INPU_LIST] EQL 0 AND NOT .QUAL[QUAL_JOUR]
    THEN SIGNAL(BACKUP$_LISINPSAV);
CHECK(.QUAL[QUAL_INPU_LIST], FALSE);
CHECK(.QUAL[QUAL_OUTP_LIST], TRUE);


! Get a verification file context area if required.
!
IF .QUAL[QUAL_VERI] AND (.QUAL[QUAL_OSAV] OR .QUAL[QUAL_ISAV])
    THEN VERIFY_FAB = GET_FC(UPLIT WORD(0));


! Postprocess the command qualifiers.
!
IF .COM_FLAGS[COM_STANDALONE]
THEN
    BEGIN
    QUAL[QUAL_IMAG] = TRUE;
    QUAL[QUAL_JOUR] = FALSE;
    END;
IF .QUAL[QUAL_PHYS]
THEN
    BEGIN
    QUAL[QUAL_DELE] = FALSE;
    QUAL[QUAL_IMAG] = FALSE;
    QUAL[QUAL_INCR] = FALSE;
    QUAL[QUAL_JOUR] = FALSE;
    QUAL[QUAL_RECO] = FALSE;
    END;
IF .QUAL[QUAL_IMAG]
THEN
    BEGIN
    QUAL[QUAL_FAST] = TRUE;
    QUAL[QUAL_INCR] = FALSE;
    END
ELSE
    QUAL[QUAL_VOLU] = FALSE;
IF .QUAL[QUAL_COMP] THEN QUAL[QUAL_VERI] = FALSE;
IF .QUAL[QUAL_OF11] AND .QUAL[QUAL_VOLU] AND NOT .QUAL[QUAL_INIT]
THEN
    SIGNAL(BACKUP$_CONFQUAL);
IF NOT .QUAL[QUAL_BUFF] THEN QUAL[QUAL_BUFF_VALUE] = 3;
IF NOT .QUAL[QUAL_GROU] THEN QUAL[QUAL_GROU_VALUE] = 10;
IF .QUAL[QUAL_OSAV]
THEN
    BEGIN
    LOCAL
	FAB:		REF BBLOCK,	! Pointer to first output FAB
	BLOC_VALUE;			! Temporary to compute actual blocksize

    FAB = .BBLOCK[.QUAL[QUAL_OUTP_LIST], QUAL_PARA_FC];
    BLOC_VALUE = .QUAL[QUAL_BLOC_VALUE];
    IF NOT .QUAL[QUAL_BLOC]
    THEN
	BEGIN
	IF .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD]
	    THEN BLOC_VALUE = 8192 + BBH$K_LENGTH + BRH$K_LENGTH
	    ELSE BLOC_VALUE = 512*63;
	END;
    IF .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD]
	THEN BLOC_VALUE = .BLOC_VALUE - BBH$K_LENGTH - BRH$K_LENGTH;
    BLOC_VALUE = .BLOC_VALUE + 511 AND NOT 511;
    IF .QUAL[QUAL_SS_FILE]
    OR NOT .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD]
    THEN
	BEGIN
	IF .BLOC_VALUE GTRU 63*512 THEN BLOC_VALUE = 63*512;
	END
    ELSE
	BEGIN
	IF .BLOC_VALUE GTRU 127*512 THEN BLOC_VALUE = 127*512;
	END;
    IF .BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD]
	THEN BLOC_VALUE = .BLOC_VALUE + BBH$K_LENGTH + BRH$K_LENGTH;

    IF
	.QUAL[QUAL_INTE] AND
	.BBLOCK[FAB[FAB$L_DEV], DEV$V_SQD] AND
	.BLOC_VALUE GTRU 7952
    THEN
	BLOC_VALUE = 7952;

    QUAL[QUAL_BLOC_VALUE] = .BLOC_VALUE;
    END;
END;

PSECT
	GLOBAL=	_LIB$KEY0$(NOWRITE,SHARE,PIC,EXECUTE,ALIGN(1),
		ADDRESSING_MODE(LONG_RELATIVE)),
	GLOBAL=	_LIB$STATE$(NOWRITE,SHARE,PIC,EXECUTE,ALIGN(0),
		ADDRESSING_MODE(LONG_RELATIVE));
SWITCHES
	ADDRESSING_MODE(NONEXTERNAL=LONG_RELATIVE);


$INIT_STATE(UIC_STATES, UIC_KEYS);
$STATE( ,
    ('[')
    );
$STATE( ,
    (TPA$_OCTAL,,,,TPA_GROUP),
    ('*',,,TPA_M_WGROUP,TPA_FLAGS)
    );
$STATE( ,
    (',')
    );
$STATE( ,
    (TPA$_OCTAL,,,,TPA_MEMBER),
    ('*',,,TPA_M_WMEMBER,TPA_FLAGS)
    );
$STATE( ,
    (']')
    );
$STATE( ,
    (TPA$_EOS, TPA$_EXIT)
    );


$INIT_STATE(OWN_STATES, OWN_KEYS);
$STATE( ,
    ('DEFAULT',OWN_END,,TPA_M_DEFAULT,TPA_FLAGS),
    ('ORIGINAL',OWN_END,,TPA_M_ORIGINAL,TPA_FLAGS),
    ('PARENT',OWN_END,,TPA_M_PARENT,TPA_FLAGS),
    ('[',,,TPA_M_UIC,TPA_FLAGS)
    );
$STATE( ,
    (TPA$_OCTAL,,,,TPA_GROUP)
    );
$STATE( ,
    (',')
    );
$STATE( ,
    (TPA$_OCTAL,,,,TPA_MEMBER)
    );
$STATE( ,
    (']')
    );
$STATE(OWN_END,
    (TPA$_EOS, TPA$_EXIT)
    );


$INIT_STATE(IGN_STATES, IGN_KEYS);
$STATE( ,
    ('NOBACKUP',,,TPA_M_NOBACKUP,TPA_FLAGS),
    ('INTERLOCK',,,TPA_M_INTERLOCK,TPA_FLAGS)
    );
$STATE( ,
    (TPA$_EOS, TPA$_EXIT)
    );


$INIT_STATE(BAK_STATES, BAK_KEYS);
$STATE( ,
    ('BACKUP',TPA$_EXIT)
    );
$STATE( ,
    (TPA$_EOS, TPA$_EXIT)
    );


$INIT_STATE(PRO_STATES, PRO_KEYS);
$STATE(NEXTPRO,
    ('SYSTEM',SYPR,,%X'000F0000',TPA_PROTECTION),
    ('OWNER', OWPR,,%X'00F00000',TPA_PROTECTION),
    ('GROUP', GRPR,,%X'0F000000',TPA_PROTECTION),
    ('WORLD', WOPR,,%X'F0000000',TPA_PROTECTION)
    );
$STATE(SYPR,
    (':'),
    ('='),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(SYPR0,
    ('R',SYPR0,,%X'0001',TPA_PROTECTION),
    ('W',SYPR0,,%X'0002',TPA_PROTECTION),
    ('E',SYPR0,,%X'0004',TPA_PROTECTION),
    ('D',SYPR0,,%X'0008',TPA_PROTECTION),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(OWPR,
    (':'),
    ('='),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(OWPR0,
    ('R',OWPR0,,%X'0010',TPA_PROTECTION),
    ('W',OWPR0,,%X'0020',TPA_PROTECTION),
    ('E',OWPR0,,%X'0040',TPA_PROTECTION),
    ('D',OWPR0,,%X'0080',TPA_PROTECTION),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(GRPR,
    (':'),
    ('='),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(GRPR0,
    ('R',GRPR0,,%X'0100',TPA_PROTECTION),
    ('W',GRPR0,,%X'0200',TPA_PROTECTION),
    ('E',GRPR0,,%X'0400',TPA_PROTECTION),
    ('D',GRPR0,,%X'0800',TPA_PROTECTION),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(WOPR,
    (':'),
    ('='),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(WOPR0,
    ('R',WOPR0,,%X'1000',TPA_PROTECTION),
    ('W',WOPR0,,%X'2000',TPA_PROTECTION),
    ('E',WOPR0,,%X'4000',TPA_PROTECTION),
    ('D',WOPR0,,%X'8000',TPA_PROTECTION),
    (TPA$_LAMBDA,ENDPRO)
    );
$STATE(ENDPRO,
    (',',NEXTPRO),
    (TPA$_EOS,TPA$_EXIT)
    );


END
ELUDOM
