	.TITLE	DISKQ	Display Sizes of Disk I/O Queues
	.IDENT	'V03-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; AUTHOR:
;
;	Len Kawell
;
; MODIFIED BY:
;
; V02-002	BLS0098		Benn Schreiber			 4-Nov-1981
;		Correct references to SCR$ routines to use general addressing
;		mode.
;
; V02-001	STJ0052		Steven T. Jeffreys,		30-Jun-1981
;		Change CREATE_LIST to run in kernel mode, and to lock and
;		unlock the I/I data base before and after traversing it.
;		Also changed CREATE_LIST to use R5 to contain the device
;		UCB address.  This is necessary dur to a change in the
;		IOC$CVT_DEVNAM interface.
;---

	.SBTTL	DEFINITIONS
;
; PUT_SCREEN - MACRO TO FORMAT AND PUT A MESSAGE TO THE TERMINAL SCREEN
;
	.MACRO	PUT_SCREEN TEXT,LINE=#1,COL=#1,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,ARG7,ARG8
	.SAVE	LSB
	.PSECT	PURE
$$DESC=.
	.ASCID	TEXT
	.RESTORE

	.IF NB ARG1			; IF FORMATTING NEEDED
	MOVAB	-128(SP),SP		; ALLOCATE FORMAT BUFFER
	PUSHL	SP			; CREATE BUFFER DESCRIPTOR
	PUSHL	#128			; ...
	MOVL	SP,R0			; GET ADDR OF DESCRIPTOR
	$FAO_S	$$DESC,(R0),(R0),-	; FORMAT THE OUTPUT
		ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,ARG7,ARG8
	PUSHL	COL			; PUSH COLUMN NUMBER
	PUSHL	LINE			; PUSH LINE NUMBER
	PUSHAB	8(SP)			; SET ADDR OF BUFFER DESC
	CALLS	#3,G^SCR$PUT_SCREEN	; OUTPUT THE FORMATTED TEXT
	MOVAB	128+8(SP),SP		; DEALLOCATE BUFFER AND DESC
	
	.IFF
	PUSHL	COL			; PUSH COLUMN NUMBER
	PUSHL	LINE			; PUSH LINE NUMBER
	PUSHAQ	$$DESC			; SET ADDR OF TEXT DESC
	CALLS	#3,G^SCR$PUT_SCREEN	; OUTPUT THE TEXT
	.ENDC

	.ENDM	PUT_SCREEN

;
; Equated Symbols
;
	$AQBDEF					; ACP queue block definitions
	$DDBDEF					; Device data block definitions
	$IRPDEF					; I/O request packet definitions
	$UCBDEF					; Unit control block definition
	$VCBDEF					; Volume control block definitiions

MAX_DISKS	= 16				; Maximum number of disks
NAME_SIZ	= 16				; Size of disk name buffer

	.SBTTL	OWN STORAGE
;
; Own Storage
;
NAME_LIST:					; Disk device names
	.BLKB	MAX_DISKS*NAME_SIZ
UCB_LIST:					; Disk UCB addresses
	.BLKL	MAX_DISKS
DISK_COUNT:					; Number of disks
	.BLKL	1

WAIT_TIME:					; Wait time between scans
	.LONG	-1000*1000,-1			; (.1 seconds)
HEADER:						; Display header
	.ASCID	"	I/O Requests	Average I/O	ACP Requests"<10><13>-
		"	  Pending	   Size		  Pending"<10><13>

;
; These arrays hold the numbers currently shown in the display
;

DSP_IO_REQ:	.BLKL	MAX_DISKS		; Number of disk I/O requests
DSP_ACP_REQ:	.BLKL	MAX_DISKS		; Number of ACP requests

;
; These arrays hold the counts from the latest sample
;
IO_REQ:		.BLKL	MAX_DISKS		; Number of disk I/O requests
ACP_REQ:	.BLKL	MAX_DISKS		; Number of ACP requests
IO_REQ_SIZ:	.BLKL	MAX_DISKS		; Size of the I/O requests
IO_REQ_TOT:	.BLKL	MAX_DISKS		; Total number of disk requests


	.DEFAULT DISPLACEMENT,WORD


	.SBTTL	Main routine

START:	.WORD	0
	$CMKRNL_S CREATE_LIST			; Create list of UCB's
	BLBC	R0,EXIT				;
;
; Display disk names
;
	PUSHL	#1				; Set cursor to 1,1
	PUSHL	#1				; and
	CALLS	#2,G^SCR$ERASE_PAGE		; erase the screen
	PUSHAQ	HEADER				; Set address of header desc
	CALLS	#1,G^SCR$PUT_SCREEN		; Display it
	CLRL	R3				; Init disk count
10$:	MULL3	#NAME_SIZ,R3,R0			; Compute name list index
	PUSHAB	NAME_LIST+1[R0]			; Set address of name string
	MOVZBL	NAME_LIST[R0],-(SP)		; Set size of name string
	PUSHL	#1				; Set column number
	ADDL3	#4,R3,-(SP)			; Set line number
	PUSHAB	8(SP)				; Set addr of descriptor
	CALLS	#3,G^SCR$PUT_SCREEN		; Display the disk name
	MNEGL	#1,DSP_IO_REQ[R3]		; Indicate nothing on screen
	MNEGL	#1,DSP_ACP_REQ[R3]
	AOBLSS	DISK_COUNT,R3,10$		; Increment count and loop
;
; Scan queues, wait a while, and do it again
;
MAIN_LOOP:
	$CMEXEC_S SCAN_QUEUES			; Scan the queues
	BLBC	R0,EXIT
	CALLS	#0,DISPLAY_QUEUES		; Display the data
	$SETIMR_S DAYTIM=WAIT_TIME,EFN=#3	; Set a timer
	$WAITFR_S EFN=#3			; Wait a while
	BRB	MAIN_LOOP			; Do it again
EXIT:
	RET					;


	.SBTTL	Create list of mounted disks

CREATE_LIST:
	.WORD	^M<R2,R3,R4,R5>
	MOVL	G^SCH$GL_CURPCB,R4		; Get current PCB address
	JSB	G^SCH$IOLOCKR			; Lock the I/O database for read access
	CLRL	R3				; Init device count
	MOVAL	G^IOC$GL_DEVLIST,R4		; Get address of DDB list
10$:	MOVL	(R4),R4				; Get address of next DDB
	BEQL	40$				; If EQL, done
	MOVL	DDB$L_UCB(R4),R5		; Get address of first UCB
	CMPB	UCB$B_DEVCLASS(R5),#DC$_DISK	; Is device a disk?
	BNEQ	10$				; If NEQ no
20$:	BBC	#DEV$V_MNT,UCB$L_DEVCHAR(R5),30$ ; Branch if not mounted
	BBS	#DEV$V_FOR,UCB$L_DEVCHAR(R5),30$ ; Branch if mounted foreign
	MOVL	R5,UCB_LIST[R3]			; Save the UCB address
	MULL3	#NAME_SIZ,R3,R0			; Compute name index
	PUSHAB	NAME_LIST[R0]			; Compute name buffer address
	MOVL	#NAME_SIZ-1,R0			; Set buffer size
	ADDL3	#1,(SP),R1			; Set buffer address
	JSB	G^IOC$CVT_DEVNAM		; Get the device name
	MOVB	R1,@(SP)+			; Save name size
	INCL	R3				; Increment number found
30$:	MOVL	UCB$L_LINK(R5),R5		; Get address of next UCB
	BNEQ	20$				; If NEQ there is one
	BRB	10$				; Else, try next device
40$:	MOVL	R3,DISK_COUNT			; Save count of disks found
	MOVL	G^SCH$GL_CURPCB,R4		; Get current PCB address
	JSB	G^SCH$IOUNLOCK			; Unlock I/O data base
	MOVL	#1,R0				; Set success
	RET					;


	.SBTTL	Scan the disk queues
SCAN_QUEUES:
	.WORD	^M<R2,R3,R4,R5,R6,R7>
	CLRL	R3				; Init device count
10$:	MOVL	UCB_LIST[R3],R5			; Get UCB address
;
; Total-up number of I/O requests queued to driver
;
	CLRL	IO_REQ[R3]			; Init I/O request count
	BBC	#UCB$V_BSY,UCB$W_STS(R5),20$	; If clear device not busy
	INCL	IO_REQ[R3]			; Count one for current I/O
	MOVL	UCB$L_IRP(R5),R0		; Get addr of current I/O req
	MOVZWL	IRP$W_BCNT(R0),R0		; Get transfer size
	ADDL	R0,IO_REQ_SIZ[R3]		; Add to size total
20$:	MOVAL	UCB$L_IOQFL(R5),R6		; Get addr of request listhead
	MOVL	R6,R7				; Save a copy of it
30$:	MOVL	(R6),R6				; Get addr of next request
	CMPL	R6,R7				; End of list?
	BEQL	40$				; If EQL yes - no more requests
	CMPL	IO_REQ[R3],#20			; Probably stuck? ////temp////
	BGEQU	40$				; If GEQU yes ////temp///
	INCL	IO_REQ[R3]			; Increment request count
	MOVZWL	IRP$W_BCNT(R6),R0		; Get transfer size
	ADDL	R0,IO_REQ_SIZ[R3]		; Add to size total
	BRB	30$				; Try next one
;
; Total-up requests queued to ACP
;
40$:	MOVL	UCB$L_VCB(R5),R6		; Get address of VCB
	BEQL	60$				; If EQL none - dismounted
	MOVL	VCB$L_AQB(R6),R6		; Get address of request queue
	CLRL	ACP_REQ[R3]			; Init ACP request count
	MOVL	R6,R7				; Get address of listhead
50$:	MOVL	(R7),R7				; Get address of next request
	CMPL	R7,R6				; End of list?
	BEQL	60$				; If EQL yes - no more
	CMPL	ACP_REQ[R3],#20			; Probably stuck? ////temp////
	BGEQU	60$				; If GEQU yes /////temp/////
	INCL	ACP_REQ[R3]			; Increment ACP request count
	BRB	50$				; Get next one

60$:	ADDL	IO_REQ[R3],IO_REQ_TOT[R3]	; Add I/O requests to total
	AOBLSS	DISK_COUNT,R3,70$		; Increment disk count and loop
	MOVL	#1,R0				; Set success
	RET

70$:	BRW	10$				;

	.SBTTL	Display the disk queue data

DISPLAY_QUEUES:
	.WORD	^M<R2,R3,R4,R5>

	SUBL	#512,SP
	PUSHL	SP
	PUSHL	#512
	PUSHL	SP
	CALLS	#1,G^SCR$SET_BUFFER
	CLRL	R3				; Init disk counter
;
; Update number of I/O requests for this device, if changed
;
10$:	ADDL3	#4,R3,R5			; Compute line number on screen
	CMPL	IO_REQ[R3],DSP_IO_REQ[R3]	; Anything changed since last time?
	BEQL	30$				; If not, don't bother updating
	PUT_SCREEN <"!2UL">,R5,#12,IO_REQ[R3]	; Write number of I/O's pending
	MOVL	IO_REQ_SIZ[R3],R4		; Get I/O transfer size total
	TSTL	IO_REQ_TOT[R3]			; Any I/O's?
	BEQL	20$				; If EQL, no
	DIVL	IO_REQ_TOT[R3],R4		; Compute average I/O size
20$:	PUT_SCREEN <"!5UL">,R5,#26,R4		; Write average I/O size
;
; Update number of ACP requests for this device, if changed
;
30$:	CMPL	ACP_REQ[R3],DSP_ACP_REQ[R3]
	BEQL	40$
	PUT_SCREEN <"!3UL">,R5,#45,ACP_REQ[R3]	; Write number of ACP requests
;
; All done with this device, go on to the next one
;
40$:	MOVL	IO_REQ[R3],DSP_IO_REQ[R3]	; Remember what's on screen
	MOVL	ACP_REQ[R3],DSP_ACP_REQ[R3]
	AOBLSS	DISK_COUNT,R3,39$		; Increment count and loop
	PUSHL	#0
	CALLS	#1,G^SCR$PUT_BUFFER
	MOVL	#1,R0				; Set success
	RET

39$:	BRW	10$			; Branch helper

	.END	START
