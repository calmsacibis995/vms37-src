MODULE RTB	(%TITLE	'Write RT-11 bootstrap'
		MAIN = RTB,
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	System build.
!
! ABSTRACT:
!	This is a program to write RT-11 bootstrap blocks that is required to
!	build console media.
!
! ENVIRONMENT:
!	VAX/VMS user mode.  Sufficient privilege to execute write logical block
!	is required for the output volume.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 06-Sep-1981
!
! MODIFIED BY:
!
!**


LIBRARY 'SYS$LIBRARY:STARLET';
PSECT PLIT = $CODE$;

ROUTINE RTB=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the main routine for the RTB utility.
!
! INPUT PARAMETERS:
!	Standard VMS activation parameters (not used).
!
! IMPLICIT INPUTS:
!	Logical names RTB$INPUT and RTB$OUTPUT for the input file and output
!	volume to be processed.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Standard VMS completion code.
!
! SIDE EFFECTS:
!	Five blocks of the input file are copied to the output volume.
!
!--

BEGIN
LOCAL
	BUFFER:		VECTOR[512*5,BYTE], ! I/O buffer
	INPUT_FAB:	$FAB_DECL,	! FAB used for input file lookup
	INPUT_CHAN:	WORD,		! Channel assigned to input file
	OUTPUT_CHAN:	WORD,		! Channel assigned to output volume
	STATUS,				! General status variable
	IOSB:		VECTOR[4,WORD];	! I/O status block


! Open the file referenced by the logical name RTB$INPUT, which must be
! equated to CONSOL.SYS in the appropriate directory.
!
$FAB_INIT(FAB=INPUT_FAB,
    FNA=UPLIT BYTE('RTB$INPUT:'),
    FNS=%CHARCOUNT('RTB$INPUT:'),
    FOP=UFO);
STATUS = $OPEN(FAB=INPUT_FAB);
IF NOT .STATUS THEN RETURN .STATUS;
INPUT_CHAN = .INPUT_FAB[FAB$L_STV];


! Assign a channel to the volume referenced by the logical name RTB$OUTPUT,
! which is the console medium being built.
!
STATUS = $ASSIGN(DEVNAM=$DESCRIPTOR('RTB$OUTPUT:'), CHAN=OUTPUT_CHAN);
IF NOT .STATUS THEN RETURN .STATUS;


! Read the first five blocks of the input file.
!
STATUS = $QIOW(
    FUNC=IO$_READVBLK,
    CHAN=.INPUT_CHAN,
    IOSB=IOSB,
    P1=BUFFER,
    P2=512*5,
    P3=1);
IF .STATUS THEN STATUS = .IOSB[0];
IF NOT .STATUS THEN RETURN .STATUS;


! Write virtual block 1 of the input file into logical block 0 of the output
! volume, and write virtual blocks 2 through 5 into logical blocks 2 through 5.
!
STATUS = $QIOW(
    FUNC=IO$_WRITELBLK,
    CHAN=.OUTPUT_CHAN,
    IOSB=IOSB,
    P1=BUFFER,
    P2=512,
    P3=0);
IF .STATUS THEN STATUS = .IOSB[0];
IF NOT .STATUS THEN RETURN .STATUS;
STATUS = $QIOW(
    FUNC=IO$_WRITELBLK,
    CHAN=.OUTPUT_CHAN,
    IOSB=IOSB,
    P1=BUFFER+512,
    P2=512*4,
    P3=2);
IF .STATUS THEN STATUS = .IOSB[0];
IF NOT .STATUS THEN RETURN .STATUS;


! Return success.
!
SS$_NORMAL
END;

END
ELUDOM
