MODULE checksum_image (
			IDENT='V03-000',
			MAIN=checksum$main
			%TITLE	'Checksum the contents of an executable image file'
			) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  Checksum VAX/VMS image file
!
! ABSTRACT:
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  17-Feb-1981
!
! MODIFIED BY:
!
!	V03-002		Benn Schreiber		12-Mar-1981
!		Correct longword count in disk block
!--

LIBRARY
	'SYS$LIBRARY:LIB.L32';		!System macro definitions

!
! Define VMS block structures (BLOCK[,BYTE])
!
STRUCTURE
    BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK + O) <P, S, E>;
MACRO
!
! Macro to describe a string
!
    stringdesc (string) = %CHARCOUNT (string), UPLIT (%ASCII string)%,
!
! Macro to generate a quadword string descriptor
!
    descriptor (string) = BBLOCK [dsc$c_s_bln] INITIAL (stringdesc (string))%,
!
! Macro to generate a pointer to an ascic string
!
    cstring (string) = UPLIT(%ASCIC string)%,
!
! Macro to generate a pointer to a string descriptor
!
    p_descriptor (string) = UPLIT (stringdesc (string))%,
!
! Macro to fao and output a string
!
    write (string) =
	cksm_output (fao_buffer (cstring(string)
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI))%;


!
! $SHR_MESSAGES - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MESSAGES ( name, code, (msg,severity), ... )
!
!	where:
!	    "name" is the name of the facility (e.g., LIBRAR)
!	    "code" is the corresponding facility code (e.g., 134)
!	    "msg" is the name of the shared message (e.g., BEGIN)
!	    "severity" is the desired message severity (either STS$K_severity
!					or severity)
!

MACRO
    $SHR_MESSAGES ( FACILITY_NAME, FACILITY_CODE ) =
	LITERAL
	SHR$MSG_IDS ( FACILITY_NAME, FACILITY_CODE, %REMAINING ); %,

    SHR$MSG_IDS ( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	SHR$MSG_CALC ( FACILITY_NAME, FACILITY_CODE, %REMOVE (VALUE) ) %,

    SHR$MSG_CALC ( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME (FACILITY_NAME,'$_',MSG_ID) = %NAME ('SHR$_',MSG_ID) + 
			FACILITY_CODE*65536 +
	    		%IF %DECLARED (%NAME ('STS$K_',SEVERITY))
				%THEN %NAME ('STS$K_',SEVERITY)
				%ELSE SEVERITY %FI %;

!
! Message codes from shared message definitions
!

$SHR_MESSAGES (cksm, 194,		!Facility code = 194
		(openin, error),	! error opening "x" as input
		(openout, severe),	! error opening "x" as output
		(closein, warning),	! error closing "x" as input
		(closeout, warning),	! error closing "x" as output
		(readerr, error),	! error reading "x"
		(writeerr, error),	! error writing "x" 
		(parsefail, warning));	! error parsing "x"

FORWARD ROUTINE
    read_header,				!Read and process image header
    checksum_section,				!Checksum an image section
    cksm_foreign,				!Checksum non-image file
    cksm_header,				!Checksum image header data
    read_blocks,				!Read next block of header
    fao_buffer,					!Call fao and return descriptor
    cksm_output,				!Output line to output file
    getfilename;				!Get string descriptor for file

EXTERNAL ROUTINE
    cli$get_value : ADDRESSING_MODE(GENERAL),	!Get qualifier value
    cli$present : ADDRESSING_MODE(GENERAL),	!Test if qualifier present
    cli$end_parse : ADDRESSING_MODE(GENERAL),	!Terminate parse/error check
    lib$get_vm : ADDRESSING_MODE(GENERAL),	!Allocate virtual memory
    lib$free_vm : ADDRESSING_MODE(GENERAL),	!Free virtual memory
    lib$find_file : ADDRESSING_MODE(GENERAL),	!Search for wild card files
    str$copy_dx : ADDRESSING_MODE(GENERAL),	!Copy a string
    str$upcase : ADDRESSING_MODE(GENERAL);	!Uppercase a string

EXTERNAL LITERAL
    cksm$_allischk,				!Checksum of all image sections
    cksm$_badimghdr,				!Bad image header format
    cksm$_file,					!Print the filename
    cksm$_ihdchksum,				!Image header checksum
    cksm$_isectchk,				!Checksum of one image section
    cksm$_nonimgchk;				!Non-image file checksum

OWN
    irab : $RAB(),				!RAB for input
    orab : $RAB(),				! and output
    ixabfhc : $XABFHC(),			!XAB to get file header characteristics to get file size
    outfiledesc : BBLOCK[dsc$c_s_bln],		!Output file descriptor
    find_result : BBLOCK[dsc$c_s_bln],		!Current input file
    headerbuffer : REF BBLOCK,			!Pointer to user record buffer
    databuffer : REF VECTOR[,LONG],		!and data buffer
    exitstatus : BBLOCK[4] INITIAL(ss$_normal);	!Most severe error status

LITERAL
    ihd$k_activoff = ihd$k_length,		!Offset to activation area
    ihd$k_symdbgoff = ihd$k_activoff + iha$k_length,
    ihd$k_imgidoff = ihd$k_symdbgoff + ihs$k_length,
    ihd$k_patchoff = ihd$k_imgidoff + ihi$k_length,
    ihd$k_maxlength = ihd$k_patchoff,
    false = 0,					!Logical 0
    true = 1;					! and 1

GLOBAL
    cksm$gl_ihdcksm,				!Image header checksum
    cksm$gl_chksum,				!Isect checksum
    cksm$gl_acucksm,				!Accumulated checksum
    cksm$gl_maxbyt : INITIAL(10*512);		!Maximum record to read

ROUTINE checksum$main =
BEGIN
!
! This is the main program.  It gathers all the command inputs.
!
ROUTINE signal_handler (sigargs, mechargs) =
BEGIN
!
! This routine is a condition handler called when ever a
! SIGNAL is done by cksm.  It merely remembers the
! most severe error for an exit status.
!
MAP
    sigargs : REF BBLOCK,
    mechargs : REF BBLOCK;

BIND
    signame = sigargs [chf$l_sig_name] : BBLOCK;	!Name of signal

IF NOT .signame						!If its an error signal
    AND ((.signame [sts$v_severity]			! and severity is worse than it was
	GEQU .exitstatus [sts$v_severity])
	OR .exitstatus [sts$v_severity])		! or we haven't had any errors
    THEN exitstatus = .signame;				! then remember it for exiting

RETURN ss$_resignal;					!Resignal to get the error printed
END;							!Of signal_handler
!
! Main body of checksum$main
!
LOCAL
    find_context : REF BBLOCK,			!Context for lib$find_file
    find_related : BBLOCK[dsc$c_s_bln],		!Related file for find_file
    status,
    ofab : BBLOCK[fab$c_bln],
    onam : BBLOCK[nam$c_bln],
    orss : BBLOCK[nam$c_maxrss],
    oess : BBLOCK[nam$c_maxrss],
    indesc : BBLOCK [dsc$c_s_bln];		!User's input file spec

ENABLE signal_handler;				!Enable the condition handler

CH$FILL(0,dsc$c_s_bln,indesc);
indesc[dsc$b_class] = dsc$k_class_d;		!Make descriptor dynamic
CH$MOVE(dsc$c_s_bln,indesc,outfiledesc);
CH$MOVE(dsc$c_s_bln,indesc,find_result);
CH$MOVE(dsc$c_s_bln,indesc,find_related);

IF NOT (status = lib$get_vm(cksm$gl_maxbyt,	!Allocate input buffer needed
				databuffer))
    THEN SIGNAL_STOP(.status);			! and quit if can't get it

cli$get_value(p_descriptor('INPUT'),indesc);	!Get input file spec.
cli$get_value(p_descriptor('OUTPUT'),outfiledesc);!Get user output file spec
!
! Create the output file
!
$FAB_INIT(fab=ofab,				!Initialize output fab
	nam=onam,
	fns=.outfiledesc[dsc$w_length],
	fna=.outfiledesc[dsc$a_pointer],
	rat=(cr),				!With carriage control
	fop=(ofp),				!Output file parse
	fac=(put));				!Will do put's to file

CH$FILL(0,nam$c_maxrss,orss);			!Zero resultant name string
CH$FILL(0,nam$c_maxrss,oess);			! and expanded name string
$NAM_INIT(nam=onam,				!Initialize output file nam block
	rss=nam$c_maxrss,
	rsa=orss,
	ess=nam$c_maxrss,
	esa=oess);

$RAB_INIT(rab=orab,				!Initialize output file rab
	fab=ofab);

status = $CREATE(fab=ofab);
CH$MOVE(dsc$c_s_bln,getfilename(ofab),		!Get the resulting filename
				outfiledesc);
IF NOT .status					!If error opening output file
    THEN SIGNAL_STOP(cksm$_openout,1,outfiledesc, ! then give up now
			.status,.ofab[fab$l_stv]);

IF NOT (status=$CONNECT(rab=orab))		!Connect the record stream
    THEN SIGNAL_STOP(cksm$_openout,1,outfiledesc,
			.status,.orab[rab$l_stv]);
!
! Loop, calling lib$find_file to get files matching the output spec
!
find_context = 0;					!Initial context is 0

WHILE (status = lib$find_file(indesc,find_result,find_context,
				p_descriptor('.EXE'),find_related)) NEQ rms$_nmf
DO IF NOT .status					!Report error if find_file failure
	THEN SIGNAL(cksm$_parsefail,1,find_result,
			.find_context[fab$l_sts],.find_context[fab$l_stv])
ELSE BEGIN
    find_context[fab$v_get] = true;			!Initialize for GET's
    find_context[fab$v_bio] = true;			! and block i/o
    find_context[fab$l_xab] = ixabfhc;			!Set XAB address

    $RAB_INIT(rab=irab,					!Initialize input rab
		fab=.find_context);

    IF NOT (status = $open(fab=.find_context))		!Open the input file
        THEN SIGNAL(cksm$_openin, 1, 
				find_result, .status,
				.find_context[fab$l_stv])

	ELSE IF NOT (status=$connect(rab=irab))		!Connect record stream
	THEN SIGNAL(cksm$_openin, 1,
				find_result, .status,
				.irab[rab$l_stv])
	ELSE read_header();				!Process the file

	IF NOT (status=$DISCONNECT(rab=irab))		!Disconnect and close output file
	    THEN SIGNAL(cksm$_closein, 1, 
			find_result, .status,
			.irab[rab$l_stv]);

	IF NOT (status=$CLOSE(fab=.find_context))
	    THEN SIGNAL(cksm$_closein, 1, 
			find_result, .status,
			.find_context[fab$l_stv]);

    str$copy_dx(find_related,find_result);		!Make last file new related file

    END;						!Of loop calling lib$find_file
! 
! Close the output file
!
IF NOT (status=$DISCONNECT(rab=orab))
    THEN SIGNAL(cksm$_closeout, 1, 
			outfiledesc, .status,
			.orab[rab$l_stv]);

IF NOT (status=$CLOSE(fab=ofab))
    THEN SIGNAL(cksm$_closeout, 1, 
			outfiledesc, .status,
			.ofab[fab$l_stv]);

RETURN (status = .exitstatus OR sts$m_inhib_msg); 	!Exit with no message
END;

ROUTINE catch_signals (sigargs,mechargs) =
BEGIN
!
! This condition handler is enabled when the image is being
! processed.  It catches info messages, and diverts them to
! the output file.  Any other errors are resignaled.
!
MAP
    sigargs : REF BBLOCK,
    mechargs : REF BBLOCK;

BIND
    signame = sigargs[chf$l_sig_name] : BBLOCK;

LOCAL
    status,
    outadr : BLOCK[4,BYTE],
    outbufdesc : BBLOCK[dsc$c_s_bln],
    msgbufdesc : BBLOCK[dsc$c_s_bln],
    msgbuf : BBLOCK[256],
    outbuf : BBLOCK[512];

IF NOT .signame							!If this is not an informational message
    THEN RETURN ss$_resignal;					! then we don't want it to go to output file
msgbufdesc[dsc$w_length] = 256;					!Initialize the descriptors
msgbufdesc[dsc$a_pointer] = msgbuf;
outbufdesc[dsc$w_length] = 512;
outbufdesc[dsc$a_pointer] = outbuf;
!
! Get the message and format the string
!
IF NOT (status = $GETMSG(msgid=.signame,msglen=msgbufdesc[dsc$w_length],
			bufadr=msgbufdesc,flags=1,outadr=outadr))
    THEN RETURN ss$_resignal						!Not found, so resignal
ELSE IF NOT (status =$faol(ctrstr=msgbufdesc,outlen=outbufdesc,		!Format the string
		outbuf=outbufdesc,prmlst=sigargs[chf$l_sig_arg1]+4))	! (skip the signal count longword)
    THEN RETURN ss$_resignal						!FAO error, so resignal
    ELSE cksm_output(outbufdesc);					!All is well, write string to output file

signame[sts$v_inhib_msg] = true;					!Inhibit further message printing
mechargs[chf$l_mch_savr0] = .signame[sts$v_inhib_msg];

RETURN ss$_continue

END;

ROUTINE read_header =
BEGIN
!
! Read the image header, and checksum the image sections
!
LOCAL	nxtisdoff,						!offset to next isd
	blockoffset,						!offset in file to first header block
	headerblock,						!current header block number
	hdrblkcnt,						!count of blocks in header
	isdnum,							!isd number
	gstvbn,							!vbn of global symbol table
	maxisdvbn,
	gstrecs,						!number of records in symbol table
	header : BBLOCK[512],					!Buffer to read header blocks into
	curhdrisd : REF BBLOCK,					!pointer to current isd in header
	curisd : REF BBLOCK,					!pointer to current isd being built
	newhdrisd : REF BBLOCK;					!pointer to header part of current isd being built

ENABLE catch_signals;							!We want output to go to output file also
cksm$gl_ihdcksm = 0;							!Zero image header checksum
irab[rab$l_ubf] = header;						!point to buffer
headerblock = 0;							!and set for first block read
isdnum = 0;								!first isect is 1
hdrblkcnt = 1;								!must be at least one block
nxtisdoff = -1;								!next isd is on next block
maxisdvbn = 0;								!reset last block of image
cksm$gl_acucksm = 0;							!Zero accumulated checksum
SIGNAL(cksm$_file,1,find_result);					!Print the filename

WHILE .nxtisdoff EQL -1							!while there are more
DO BEGIN								!header blocks
    headerblock = .headerblock + 1;					!Set to read next block
    IF .hdrblkcnt LEQ 0
	THEN BEGIN
	    SIGNAL(cksm$_badimghdr,1,find_result);
	    cksm_foreign();						!Checksum non-image file
	    RETURN true
	    END;
    IF NOT read_blocks(1,.headerblock)					!get the next one
	THEN BEGIN
	    SIGNAL(cksm$_badimghdr,1,find_result);			!and if unsuccessful, fatal image
	    cksm_foreign();						!Checksum non-image file
	    RETURN true
	    END;
    hdrblkcnt = .hdrblkcnt - 1;
    IF .headerblock EQL 1						!if the first
    THEN BEGIN								!have some validation to do
	IF .header[ihd$w_majorid] NEQ ihd$k_majorid			!major header id must match
	    OR (.(header[ihd$w_minorid])<0,8,0> EQL (ihd$k_minorid and %x'ff')
		AND .(header[ihd$w_minorid])<8,8,0> GTRU (ihd$k_minorid and %x'ff00')/256)
	    OR .header[ihd$w_size] GTRU MAXU((.header[ihd$w_patchoff] 	!the header fixed part
				+ ihp$k_length),ihd$k_maxlength)	!must be less than a block and must
	    OR (hdrblkcnt = .header[ihd$b_hdrblkcnt] - 1) LSS 0		!contain patch area. 0 to
	    OR (header + .header[ihd$w_symdbgoff])			!127 more blocks. get the
				GEQU (header + .header[ihd$w_size])	!gst descriptor which must be contained
	    THEN BEGIN
		SIGNAL(cksm$_badimghdr,1,find_result);			!any above not true, fatal image header error
		cksm_foreign();						!Checksum non-image file
		RETURN true
		END;
	cksm_header(header);						!Checksum the fixed part of the image header
	curhdrisd = header + .header[ihd$w_size];			!point to first isd in header
	END								!all done with first block
    ELSE curhdrisd = header;						!other blocks are all isd
    WHILE (nxtisdoff = .(curhdrisd[isd$w_size])<0,16,1>) GTR 0		!while more isd's on this block
    DO BEGIN
	isdnum = .isdnum + 1;
	checksum_section(.curhdrisd);					!compute isect checksum
	IF .curhdrisd[isd$l_vbn] NEQ 0					!If section has disk file space
	    AND NOT .curhdrisd[isd$v_dzro]				! and is not demand zero
	THEN BEGIN
	    SIGNAL(cksm$_isectchk,2,.isdnum,.cksm$gl_chksum);		!Print isect checksum
	    cksm$gl_acucksm = .cksm$gl_acucksm XOR .cksm$gl_chksum;	!Accumulate new improved checksum
	    END;
	IF (curhdrisd = .curhdrisd + .nxtisdoff) GTRU 			!check it was completely
				(header + 510)				!contained by the current block
	    THEN BEGIN
		SIGNAL(cksm$_badimghdr,1,find_result);			!if not true, fatal image header error
		cksm_foreign();						!Checksum non-image file
		RETURN true
		END;
	END;								!end of isection loop
    END;								!end of block loop

!
! Print checksum of image header and total checksum
!
SIGNAL(cksm$_ihdchksum,1,.cksm$gl_ihdcksm);
SIGNAL(cksm$_allischk,1,.cksm$gl_acucksm);

RETURN true
END;

ROUTINE cksm_header (imageheader) =
BEGIN
!
! Checksums the non-variable contents of the image header
!
! INPUTS:
!
!	Imageheader	points to the first block of image header in memory
!
! NOTE:
!
!	This routine expects the fixed part of the image header to be contained
!	in the first block of the image.
!
MAP
    imageheader : REF BBLOCK;

BIND
    cksm = cksm$gl_ihdcksm,
    iha = .imageheader + .imageheader[ihd$w_activoff] : VECTOR[,LONG],
    ihs = .imageheader + .imageheader[ihd$w_symdbgoff] : VECTOR[,LONG],
    ihi = .imageheader + .imageheader[ihd$w_imgidoff] : BBLOCK,
    ihp = .imageheader + .imageheader[ihd$w_patchoff] : VECTOR[,LONG];

cksm = .cksm XOR .imageheader[ihd$l_lnkflags];			!Include the link flags
!
! Checksum the activation data
!
INCRU i FROM 0 TO 2
DO IF .iha[.i] EQL 0
    THEN EXITLOOP
    ELSE cksm = .cksm XOR .iha[.i];
!
! Checksum the symbol table and debug data
!
IF .imageheader[ihd$w_symdbgoff] NEQ 0
THEN INCRU i FROM 0 TO ihs$c_length/4
    DO cksm = .cksm XOR .ihs[.i];
!
! Checksum the image header ident section data
!
! Not done, since it's all variable data
!

!
! Checksum the patch data
!
IF .imageheader[ihd$w_patchoff] NEQ 0
THEN INCRU i FROM 0 to (ihp$c_length-1)/4
    DO cksm = .cksm XOR .ihp[.i];

RETURN true

END;

ROUTINE read_blocks (nblocks,first_block) =
BEGIN

LOCAL
	readerror;

irab[rab$l_bkt] = .first_block;					!Set starting vbn
irab[rab$w_usz] = .nblocks*512;					!And set the byte count
IF NOT (readerror = $READ(RAB = irab))				!Attempt to read file
    THEN SIGNAL(cksm$_readerr,1,find_result,
			.readerror,.irab[rab$l_stv]);

RETURN .readerror
END;

ROUTINE checksum_section (isd) =
BEGIN
!
! Checksums the contents of an image section
!
! INPUTS:
!
!	isd	pointer to the image section descriptor for
!		an image section.
!
MAP
    isd : REF BBLOCK;

BIND
    isdvecbyt = .isd : VECTOR[,LONG];

LOCAL
    saveubf,
    maxblocks,
    tblocks,
    blockoff,
    iblocks;

!
! Add isd into image header checksum
!
INCRU i FROM 0 TO .isd[isd$w_size]-1
    DO cksm$gl_ihdcksm = .cksm$gl_ihdcksm XOR isdvecbyt[.i];

IF .isd[isd$v_dzro]				!Skip section if demand zero
    OR .isd[isd$l_vbn] EQL 0			! or no disk address assigned
    OR .isd[isd$w_pagcnt] EQL 0			! or no pages (should never happen)
THEN RETURN true;

cksm$gl_chksum = 0;				!Zero checksum for section
saveubf = .irab[rab$l_ubf];
irab[rab$l_ubf] = .databuffer;
maxblocks = .cksm$gl_maxbyt/512;		!Figure max number of pages
iblocks = .isd[isd$w_pagcnt];			!Get size of image section
blockoff = 0;
WHILE .iblocks GTRU 0				!Do all blocks in the image section
DO BEGIN
    tblocks = MINU(.iblocks,.maxblocks);	!Compute size of this read
    IF read_blocks(.tblocks,.isd[isd$l_vbn]+.blockoff)
    THEN
	!
	! Checksum what we have read
	!
	INCRU i FROM 0 TO .tblocks*127
	    DO cksm$gl_chksum = .cksm$gl_chksum XOR .databuffer[.i];
    blockoff = .blockoff + .tblocks;		!Update block offset
    iblocks = .iblocks - .tblocks;		! and blocks to go
    END;

irab[rab$l_ubf] = .saveubf;
RETURN true
END;

ROUTINE cksm_foreign =
BEGIN
!
! Do a checksum of a non-image file
!
LOCAL
    isectdesc : BBLOCK[isd$k_lenpriv];

CH$FILL(0,isd$k_lenpriv,isectdesc);
isectdesc[isd$w_size] = isd$k_lenpriv;		!Make it look like an isd
isectdesc[isd$l_vbn] = 1;			!File starts with first block
isectdesc[isd$w_pagcnt] = .ixabfhc[xab$l_ebk] +	!Set length of file
			1*(.ixabfhc[xab$w_ffb] NEQ 0);
checksum_section(isectdesc);			!Checksum it
SIGNAL(cksm$_nonimgchk,1,.cksm$gl_chksum);

RETURN true
END;

ROUTINE fao_buffer (ctrstr,args) =
BEGIN
!
! Call FAOL
!
OWN
    desc :	BBLOCK [dsc$c_s_bln],	!Result descriptor
    buf :	VECTOR [132, BYTE];	!Output buffer

MAP
    ctrstr :	REF VECTOR [,BYTE],
    args :	VECTOR [4];

LOCAL
    faodesc : BBLOCK [dsc$c_s_bln];

faodesc [dsc$w_length] = .ctrstr [0];		!Set up descriptor for fao control string
faodesc [dsc$a_pointer] = ctrstr [1];
desc [dsc$w_length] = 132;			!Set up result descriptor
desc [dsc$a_pointer] = buf;
$faol (ctrstr=faodesc,outlen=desc,		!Format the string
		outbuf=desc,prmlst=args);

RETURN desc;					!Return value is address of resulting descriptor
END;

ROUTINE cksm_output (desc) =
BEGIN
!
! Write record to output file
!
MAP
    desc : REF BBLOCK;

LOCAL
    status;

orab[rab$w_rsz] = .desc[dsc$w_length];		!Set length of line
orab[rab$l_rbf] = .desc[dsc$a_pointer];		! and it's address
status = $PUT(RAB=orab);			!Write the line
IF NOT .status					!Report any error
    THEN SIGNAL(cksm$_writeerr,1,outfiledesc,
		.status,.orab[rab$l_stv]);

RETURN .status
END;

GLOBAL ROUTINE getfilename (fab) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a string descriptor for a file.
!
! Inputs:
!
!	fab		Address of the fab
!
! Outputs:
!
!	Routine value is address of string descriptor for file name
!
!--

MAP
    fab : REF BBLOCK;

BIND
    nam = .fab [fab$l_nam] : BBLOCK;

OWN
    filedesc : BBLOCK[dsc$c_s_bln];

IF (filedesc [dsc$w_length] = .nam [nam$b_rsl]) NEQ 0	!If resultant name present
THEN filedesc [dsc$a_pointer] = .nam [nam$l_rsa]
ELSE IF (filedesc [dsc$w_length] = .nam [nam$b_esl]) NEQ 0 !If expanded name present
    THEN filedesc [dsc$a_pointer] = .nam [nam$l_esa]
    ELSE BEGIN
	filedesc [dsc$w_length] = .fab [fab$b_fns];	!Use filename string
	filedesc [dsc$a_pointer] = .fab [fab$l_fna];	! if all else fails
	END;

RETURN filedesc
END;							!Of getfilename

END
ELUDOM
