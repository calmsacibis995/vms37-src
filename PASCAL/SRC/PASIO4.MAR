;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.TITLE	PAS$IO_COMP		; PASCAL RMS linkage
	.IDENT	'V03-000'
;
;*********************************************************************
;*********************************************************************
;**								    **
;**             PASCAL RMS LINKAGE FOR VAX-11/780                   **
;**             =================================                   **
;**								    **
;**								    **
;**               VERSION V1.2 -- JANUARY 1981			    **
;**								    **
;**   DEVELOPED BY:  COMPUTER SCIENCE DEPARTMENT                    **
;**                  UNIVERSITY OF WASHINGTON                       **
;**                  SEATTLE, WA 98195                              **
;**								    **
;**   AUTHORS:       MARK BAILEY, JOHN CHAN, HELLMUT GOLDE          **
;**								    **
;*********************************************************************
;*********************************************************************
;
; Modified: 16Oct80 Change the value of PRN_CRLF so that a line on the
;		      terminal is printed as <LF> <text> <CR> Susan Azibert
;
;	    13Jan81 Change all tests of status from RMS to BLBC R0,label
;		    and BLBS R0,label from CMPL R0,#RMS$_NORMAL;BNEQ label,etc.
;
;	3. Fix PAS$CONCAT to request read-only access instead of read-write access
;
;	1-005 11-Aug-81	Paul Hohensee	Changed to general addressing of external routines
;
;****************************************************************
;****************************************************************
;**                                                            **
;**                                                            **
;**                   SECTION 4                                **
;**                                                            **
;**              SPECIAL COMPILER PROCEDURES                   **
;**                                                            **
;**                                                            **
;****************************************************************
;****************************************************************
	.PAGE
;For any file variable the following storage is assumed:
;
;		 ------------------
;	 FSB:   |      POINTER     |
;		 ------------------
;		|   STATUS WORD    |
;		 ------------------
;               |       LAST       |
;		 ------------------
;               |     LINELIMIT    |
;                ------------------
;               |     LINECOUNT    |
;                ------------------
;		|  RECORD NUMBER   |
;                ------------------
;	RAB:    |                  |
;		  44(HEX) BYTES  
;		|        .         |
;		         .
;		|        .         |
;		 ------------------
;	FAB:	|                  |
;		   50(HEX) BYTES    
;		|        .         |
;			 .
;		|        .         |
;		 ------------------
;       NAM:    |		   |    NOTE: The NAM block is allocated 
;		   38(HEX) BYTES        for the PASCAL logical files
;		|        .         |    'INPUT' and 'OUTPUT' only.
;                         .
;               |                  |
;                ------------------
;
; Macro options
;
	.DSABL	GBL			; no undefined references
	.ENABL	FPT			; rounded arithmetic
;
; External references
;
	.EXTRN	PAS$IOERROR
	.EXTRN	PAS$WRITELN
	.EXTRN	PAS$OPEN
	.EXTRN	PAS$CLOSE
	.EXTRN PAS$CLOSEINOUT
	.EXTRN	PAS$RESET
;
	.EXTRN	SYS$PUTMSG		; messages to terminal
	.EXTRN	SYS$TRNLOG
	.EXTRN	LIB$GET_VM
;
; Provide definitions of system values
;
	$FABDEF
	$NAMDEF
	$RABDEF
	$RMSDEF				; for status code checking
	$SSDEF				; system definitions
;
; PASCAL compiler constants
;
; NOTE: The constants below with the names 'PAS$C_XXXXX' are 
; used in the PASCAL compiler with the names 'XXXXX'. If the 
; values in the compiler are altered then the values below
; must be altered accordingly.
;
	PAS$C_DFLTRECSI = 257;		; default buffer size
;	PAS$C_NIL = 0			; NIL pointer
;	PAS$C_TRUE = 1			; TRUE
;	PAS$C_FALSE = 0			; FALSE
	PAS$C_NOCARR = 0		; no carriage control
;	PAS$C_CARRIAGE = 1		; FORTRAN carriage control
;	PAS$C_LIST = 2			; LIST carriage control
;	PAS$C_PRN = 3			; PRN carriage control
;
; PRN carriage control constants
;
;	PRN_CRLF = ^X8D01		; PRN carriage control constant
					; for <LF> <text> <CR>
;	PRN_NULL = ^X0000		; PRN carriage control constant
					; for no carriage control
;
; File status block constants
;
	FSB$C_BLN = ^X18		; FSB block length
;	FSB$V_OPEN = 5
;	FSB$V_EOF = 1
;	FSB$V_EOLN = 2
;	FSB$V_GET = 3
; 	FSB$V_TXT = 4			; textfile flag
;	FSB$V_RDLN = 0			; last access READLN
;	FSB$V_DIR = 6			; direct access flag
;	FSB$V_PUT = 7
;	FSB$V_INT = 8			; internal flag
;	FSB$V_PRMT = 9			; prompt flag
;	FSB$V_OUTPUT = 10 		; OUTPUT file flag
;	FSB$V_ACTIN = 11		; actual input flag
;	FSB$V_DELZ = 30			; delete file if empty
	FSB$V_INC = 31			; included file flag
;	FSB$B_CC = 6			; carriage control byte offset
;	FSB$M_OPEN = ^X0020
	FSB$M_EOF = ^X0002
;	FSB$M_EOLN = ^X0004
;	FSB$M_GET = ^X0008
;	FSB$M_PRMT = ^X0200
;	FSB$M_PUT = ^X00000080
	FSB$M_TXT = ^X0010
	FSB$M_RDLN = ^X0001
;	FSB$M_DIR = ^X00000040
;	FSB$M_INT = ^X00000100
;	FSB$M_OUTPUT = ^X0400
;	FSB$M_ACTIN = ^X0800
	FSB$M_DELZ = ^X40000000
	FSB$M_INC = ^X80000000
;	FSB$L_CNT = 16			; line count (textfiles)
	FSB$L_INC = 20			; %INCLUDE block address
;	FSB$L_LIM = 12			; LINELIMIT
;	FSB$L_LST = 8			; LAST WORD OFFSET
;	FSB$L_PFSB = 20			; Related file FSB for prompting
					; for INPUT, has address of OUTPUT FSB
					; for OUTPUT, has address of INPUT FSB
					; (shares storage with include address
					; and direct access record
					; buffer address)
;	FSB$L_REC = 20			; record buffer address for
					; direct access (shares storage
					; with include address and related
					; file FSB)
	FSB$L_STA = 4			; status word offset
;
; Character constants
;
;	TAB = ^X09
	SPACE = ^X20
;	DOLLAR = ^X24
;	FORMFEED = ^XC
;	STAR = ^X2A
;	PLUS = ^X2B
;	MINUS = ^X2D
;	POINT = ^X2E
;	ZERO = ^X30
;	ONE = ^X31
;	NINE = ^X39
;	AA = ^X41
;	DD = ^X44
;	EE = ^X45
;       ZZ = ^X5A
;	UNDERSCORE = ^X5F
;	AA_SMALL = ^X61
;	ZZ_SMALL = ^X7A
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;       ********************
;       *                  *
;       *   PAS$COMPINIT   *
;       *                  *
;       ********************
;
; Initializes the file control blocks for certain files used by the
; compiler.  Specifically, it
;
;	(1) clears the RDLN flag for the input file so that PAS$EOF and
;	    PAS$EOLN will never retrieve the next record
;
;	(2) sets a flag to delete the output file if it is empty
;
;	(3) clears the textfile flag for the object file
;
; In addition, determines if the listing is going to the terminal.  If
; the listing is going to the terminal, the fourth (return) argument is
; set to 1, otherwise it is set to 0.
;
; Argument offsets
;
;	AP				; number of arguments (4)
 	INP_DISP = 04			; input file FSB
	OUT_DISP = 08			; output file FSB
	OBJ_DISP = 12			; object file FSB
	TRM_DISP = 16			; list_to_terminal flag (by reference)
;
; Other constants
;
PASOUT:
	.ASCII	/PAS$OUTPUT/		; listing file logical name
SYSOUT:
	.WORD	20$-10$			; length of string
10$:	.ASCII	/SYS$OUTPUT/		; standard output logical name
20$:
SYSERR:
	.WORD	40$-30$			; length of string
30$:	.ASCII	/SYS$ERROR/		; error output logical name
40$:
	.ENTRY	PAS$COMPINIT,^M<R2,R3,R4,R5,R6,R7>
	SUBL2	#136,SP			; make room for translated names
	MOVL	INP_DISP(AP),R6
	BICL2	#FSB$M_RDLN,FSB$L_STA(R6); clear input RDLN flag
	MOVL	OBJ_DISP(AP),R6
	BICL2	#FSB$M_TXT,FSB$L_STA(R6) ; clear textfile flag
	MOVL	OUT_DISP(AP),R6
	BISL2	#FSB$M_DELZ,FSB$L_STA(R6); set to delete if empty
;
; Now determine if listing is going to terminal.
;
	MOVC3	#10,PASOUT,-68(FP)	; move listing logical name
	MOVL	#10,-4(FP)		; set length of logical name
	PUSHL	#0			; arg3 (process-permanent flag)
					; is set to false
	PUSHAL	-4(FP)			; arg2 (address of length)
	PUSHAL	-68(FP)			; arg1 (address of string)
	CALLS	#3,PAS$TRANS		; translate logical name
;
;  Loop through names SYS$OUTPUT and SYS$ERROR, translating them and
;  comparing the result to the translation of PAS$OUTPUT.  If either
;  is equal, return TRUE; otherwise return FALSE.
;
	MOVL	#2,R6			; loop index
	MOVAL	SYSOUT,R7		; address of logical name string
COMPLOOP:				; compare translated names
	MOVC3	(R7),2(R7),-136(FP)	; move logical name
	MOVZWL	(R7),-72(FP)		; set length of logical name
	PUSHL	#1			; arg3 (process-permanent flag)
					; is set to TRUE
	PUSHAL	-72(FP)			; arg2 (address of length)
	PUSHAL	-136(FP)		; arg1 (address of string)
	CALLS	#3,G^PAS$TRANS		; translate logical name
	CMPL	-4(FP),-72(FP)		; are lengths equal?
	BNEQ	TRYNXT			; no--try next logical name
	CMPC3	-4(FP),-68(FP),-136(FP)	; else, are strings equal?
	BNEQ	TRYNXT			; no--try next logical name
	MOVL	#1,@TRM_DISP(AP)	; yes--set return value TRUE
	RET				; return TRUE to caller
TRYNXT:					; try next logical name
	MOVAL	SYSERR,R7		; address of next logical name
	SOBGTR	R6,COMPLOOP		; loop through all logical names
	CLRL	@TRM_DISP(AP)		; set return value FALSE
	RET				; return FALSE to caller
;
;  Routine to translate logical names, used by PAS$COMPINIT above.
;
PAS$TRANS:				; routine to translate names
	.WORD	^M<R8,R9,R10>
	SUBL2	#16,SP			; make room for $TRNLOG args
	MOVL	4(AP),-4(FP)		; address of string
	MOVL	@8(AP),-8(FP)		; length of logical name
	MOVL	4(AP),-12(FP)		; address of result
	MOVZBL	#80,-16(FP)		; length of result
	CLRL	R8			; clear colon flag
TRANS:	$TRNLOG_S LOGNAM=-8(FP),-	; translate the name
		RSLLEN=@8(AP),-
		RSLBUF=-16(FP)
	BLBC	R8,CHKCOL		; branch if not trying without colon
	CMPL	R0,#SS$_NOTRAN		; was translation successful?
	BNEQ	10$			; yes--continue
	MOVL	@8(AP),R9		; else put colon back and quit
	MOVB	#^A/:/,@4(AP)[R9]	; put colon back
	ADDL3	#1,R9,@8(AP)		; set return length
10$:	CLRL	R8			; not trying without colon any more
	BRB	CHKHDR			; go check for 4-byte header
CHKCOL:					; check if translate failed due to colon
	BLBS	12(AP),CHKHDR		; if process-perm name, continue
	CMPL	R0,#SS$_NOTRAN		; translation successful?
	BNEQ	CHKHDR			; yes--continue
	MOVL	@8(AP),R9		; translated length
	DECL	R9			; index of last character
	CMPB	@4(AP)[R9],#^A/:/	; last character a colon?
	BNEQ	CHKHDR			; no--continue
	DECL	@8(AP)			; else remove colon and try again
	MOVL	#1,R8			; set flag to show trying again
	MOVL	#1,R0			; set status to continue
CHKHDR:					; check for 4-byte header
	CMPB	@4(AP),#^X1B		; translated name begins with esc?
	BNEQ	CHKPRM			; no--make sure not process-perm
	MOVL	#4,R9			; initialize number of bytes to remove
	CMPB	@4(AP)[R9],#^A/_/	; translated name begins with '_'?
	BNEQ	10$			; no--remove just first 4 bytes
	INCL	R9			; else remove 5 bytes
10$:	SUBL3	R9,@8(AP),R10		; r10 <- new string length
	MOVC3	R10,@4(AP)[R9],@4(AP)	; move remaining chars to front
	DECL	R10			; r10 <- index of last character
	CMPB	@4(AP)[R10],#^A/:/	; name ends with colon?
	BEQL	20$			; yes--continue
	INCL	R10			; else add colon at end
	MOVB	#^A/:/,@4(AP)[R10]
20$:	ADDL3	#1,R10,@8(AP)		; update length
	RET				; return
CHKPRM:					; check if process permanent name
	BLBS	12(AP),RET		; return if process permanent name
	CMPL	R0,#SS$_NOTRAN		; translation was successful?
	BEQL	RET			; no--return
	MOVL	@8(AP),-8(FP)		; update length of $TRNLOG arg
	BRW	TRANS			; translate recursively
RET:	RET				; return to caller
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;       *  PAS$READINPUT   *
;	*                  *
;	********************
;
; Reads the next record into the user supplieed buffer returning the
; length read. The end-of-file flag is altered as need be.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	BUF_DISP = 08			; buffer address
	LEN_DISP = 12			; length of buffer (by reference)
        SOS_DISP = 16   		; SOS line buffer (by reference)
	incl_eof_disp = 20		; eof on INCLUDE'd file flag
					; (byte by ref)
					;    0 = no eof
					;    1 = eof hit
;
	.ENTRY	PAS$READINPUT,^M<R2,R3,R4,R5>
	clrb	@incl_eof_disp(ap)	; assume no eof
	MOVL	FSB_DISP(AP),R4		; R4 = address of FSB
	ADDL3	R4,#FSB$C_BLN,R2	; R2 = address of RAB
        ADDL3	R2,#RAB$C_BLN,R5        ; R5 = address of FAB
	MOVL	RAB$L_UBF(R2),R3	; save buffer address
	MOVL	BUF_DISP(AP),RAB$L_UBF(R2); set new buffer address
	CMPB	FAB$B_FSZ(R5),#2	; check for SOS line numbers
	BNEQ	120$
	MOVL	SOS_DISP(AP),RAB$L_RHB(R2)
	BRB	130$
  120$:
	CLRL	RAB$L_RHB(R2)
  130$:
	$GET	RAB=R2
	CMPL	R0,#RMS$_EOF
	BNEQ	110$
	BBC	#FSB$V_INC,FSB$L_STA(R4),100$
	CALLG	(AP),PAS$EXCLUDE
	movb	#1,@incl_eof_disp(ap)	; set eof flag
	BRB	111$
  100$:
	BISL	#FSB$M_EOF,FSB$L_STA(R4); set EOF flag
	BRB	111$
  110$:
	BLBC	R0,910$			; branch if error
  111$:
	CVTWL	RAB$W_RSZ(R2),@LEN_DISP(AP); store length
	MOVL	R3,RAB$L_UBF(R2)	; restore buffer address
	RET
;
; Input error
;
  910$:
	PUSHL	R0
	MOVZBL	<RAB$C_BLN+FAB$B_FNS>(R4),-(SP)
	PUSHL	<RAB$C_BLN+FAB$L_FNA>(R4)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	* PAS$WRITEOUTPUT  *
;	* PAS$WRITEOBJ     *
;	*                  *
;	********************
;
; Writes the string to the designated file. The buffer is NOT checked
; for overflow.
;
; Argument list
;
;	AP				; number of arguments (3)
	FSB_DISP = 04			; FSB address
	BUF_DISP = 08			; buffer address
	LEN_DISP = 12			; buffer length (by reference)
 PAS$WRITEOBJ::
	.ENTRY	PAS$WRITEOUTPUT,^M<R2,R3,R4,R5,R6>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	MOVC3	@LEN_DISP(AP),@BUF_DISP(AP),@(R6); move string
	MOVL	R3,(R6)			; set pointer
	PUSHL	R6
	CALLS	#1,G^PAS$WRITELN
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$PUTMSG     *
;	*                  *
;	********************
;
; Writes a string to the terminal using the SYS$PUTMSG system service.
; A Pascal file (FSB) is passed as argument, and the string is stolen
; from its buffer.  If the fourth argument is true the buffer is cleared,
; otherwise it is left alone.  As for PAS$WRITEOUTPUT, buffer overflow
; is NOT checked.
;
; Argument list
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	BUF_DISP = 08			; buffer address
	LEN_DISP = 12			; buffer length (by reference)
	RST_DISP = 16			; reset flag (by value)
					; 0: do not reset line to be empty
					; 1: reset line after sending to terminal
;
	.ENTRY	PAS$PUTMSG,^M<R2,R3,R4,R5,R6>
	SUBL2	#24,SP			; room for message vector
					; and descriptor
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	MOVC3	@LEN_DISP(AP),@BUF_DISP(AP),@(R6); move string
	MOVL	R3,(R6)			; set pointer
	MOVL	#^X10003,-24(FP)	; vector length and flags
	MOVL	#^X801134,-20(FP)	; message identification
	MOVL	#1,-16(FP)		; number of fao arguments
	MOVAL	-8(FP),-12(FP)		; address of descriptor
	SUBL3	<FSB$C_BLN+RAB$L_RBF>(R6),-; compute and store length
		 R3,-8(FP)		; in descriptor
	DECL	-8(FP)			; skip carriage control byte
	MOVL	<FSB$C_BLN+RAB$L_RBF>(R6),-; move address to descriptor
		 -4(FP)
	INCL	-4(FP)			; skip carriage control byte
	CLRQ	-(SP)			; arg2 and arg3 are NULL
	PUSHAL	-24(FP)			; arg1: address of message vector
	CALLS	#3,G^SYS$PUTMSG		; send message to terminal
	BLBC	RST_DISP(AP),10$	; done if not to reset
	MOVL	<FSB$C_BLN+RAB$L_RBF>(R6),-; reset line to be empty
		 (R6)
10$:	RET				; all done
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*     PAS$TAB      *
;	*                  *
;	********************
;
; Advances the pointer to a new position blank filling the spaces 
; skipped. If the tab position is either less than the current position
; or greater than the end-of-line position the tab is ignored.
;
; Argument offsets
;
;	AP				; number of arguments (2)
	FSB_DISP = 04			; FSB address
	TAB_DISP = 08			; TAB position
;
	.ENTRY	PAS$TAB,^M<R2,R3,R4,R5,R6>
	MOVL	FSB_DISP(AP),R6		; address of next byte
   	ADDL3	R6,#FSB$C_BLN,R3	; address of RAB to R3
	SUBL3	RAB$L_RBF(R3),(R6),R0	; old position to R0
	MOVL	TAB_DISP(AP),R1		; new position
	SUBL3	R0,R1,R0		; amount to move pointer
	BLEQ	$420			; done if negative
	CMPL	R1,#PAS$C_DFLTRECSI	; check if too far to go
	BGTR	$420			; ignore request
	MOVC5	#0,(R6),#SPACE,R0,@(R6)	; move blanks
	MOVL	R3,(R6)			; update pointer
$420:	
	RET				; done
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$INCLUDE    *
;	*                  *
;	********************
;
; Saves the necessary information about the current file so that it may
; be restored, closes the current file, and opens/resets the included
; file. The included block has the following storage allocation:
;
;	 3322222222221111111111
;	 10987654321098765432109876543210
;	 --------------------------------
;	|   next include block address   |
;	 --------------------------------
;	|   current position in buffer   |
;	 --------------------------------
;	|       record file address      |
;	 ----------------
;	|                |               |
;	 -               ----------------
;	|      directory identification  |
;	 --------------------------------
;       |                                |
;	 -                              -
;	|            device              |
;	 -                              -
;	|         identification         |
;	 -                              -
;	|                                |
;	 --------------------------------
;	|     file identification        |
;	 ----------------               -
;	                |                |
;	                 ----------------
;
	INC$C_BLN = 42
	INC$L_NXT = 00
	INC$L_POS = 04
	INC$T_RFA = 08
	INC$T_DID = 14
	INC$X_DVI = 20
	INC$T_FID = 36
;
; Argument offsets
;
;	AP				; number of arguments (7)
	FSB_DISP = 04			; FSB address
	BUF_DISP = 08			; character buffer address
	POS_DISP = 12			; current buffer position (by value)
	LST_DISP = 16			; last buffer position (by reference)
	spec_disp = 20			; include specification string length
					;	(by value)
	LEN_DISP = 24			; file name string length (by value)
        INC_DISP = 28   		; recursive include flag
					;    0 => ok
					;    1 => recursive
;
; Constants
;
INCLBLN: .LONG	INC$C_BLN
;
	.ENTRY	PAS$INCLUDE,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	ADDL3	R6,#FSB$C_BLN,R7	; R7 = address of RAB
	ADDL3	R7,#RAB$C_BLN,R8	; R8 = address of FAB
	ADDL3	R8,#FAB$C_BLN,R9	; R9 = address of NAM
;
; Allocate memory for include block
;
	SUBL2	#4,SP
	MOVL	SP,R10			; R10 = address of memory address
	PUSHL	R10
	PUSHAL	INCLBLN
	CALLS	#2,G^LIB$GET_VM
	BLBS	R0,101$
	BRW	910$
;
; Save include information
;
  101$:
	MOVL	(R10),R10		; R10 = address of include block
	MOVL	FSB$L_INC(R6),INC$L_NXT(R10)
	MOVL	POS_DISP(AP),INC$L_POS(R10)
	MOVC3	#06,RAB$W_RFA(R7),INC$T_RFA(R10)
	MOVC3	#06,NAM$W_DID(R9),INC$T_DID(R10)
	MOVC3	#16,NAM$T_DVI(R9),INC$X_DVI(R10)
	MOVC3	#06,NAM$W_FID(R9),INC$T_FID(R10)
;
; Blank out remaining part of line
;
	SUBL3	#1,POS_DISP(AP),R1	; R1 = substring offset
	SUBL3	POS_DISP(AP),@LST_DISP(AP),R0
	INCL	R0			; R0 = substring length
	MOVC5	#0,(R6),#SPACE,R0,@BUF_DISP(AP)[R1]; blank out substring
;
; Fix FSB
;
	MOVL	R10,FSB$L_INC(R6)
	BISL2	#FSB$M_INC,FSB$L_STA(R6); set include flag
;
; Close current file and open included file
;
	PUSHL	R6
	CALLS	#1,G^PAS$CLOSEINOUT
;
	PUSHL	#PAS$C_NOCARR		; carriage control -- not used
	PUSHL	#-PAS$C_DFLTRECSI	; no buffer allocated
	CLRD	-(SP)			; variable length, sequential access
	PUSHL	LEN_DISP(AP)		; file name string length
	DECL	POS_DISP(AP)
	SUBL3	spec_DISP(AP),POS_DISP(AP),R0
	DECL	R0
	PUSHAB	@BUF_DISP(AP)[R0]	; file name string address
	PUSHL	R6			; fsb address
	CALLS	#7,G^PAS$OPEN
;
; Check for recursive includes
;
	PUSHL	FSB$L_INC(R6)		; head of include list
	PUSHL	R9			; address of NAM block
	CALLS	#2,PAS$INCHECK
	MOVb	R0,@INC_DISP(AP)	; return recursive flag
;
; Reset input file
;
	PUSHL	R6
	CALLS	#1,G^PAS$RESET
	BICL2	#FSB$M_RDLN,FSB$L_STA(R6); clear RDLN flag 
	RET
;
; Heap overflow on include
;
  910$:
	PUSHL	R0
	MOVZWL	#^X8324,-(SP)
	MOVZBL	FAB$B_FNS(R8),-(SP)
	PUSHL	FAB$L_FNA(R8)
	CALLS	#4,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$INCHECK    *
;	*                  *
;	********************
;
; Checks for recursive included files by traversing the linked list
; of included files.
;
; Argument offsets
;	AP				; number of arguments (2)
	NAM_DISP = 04			; current input file name block
	LNK_DISP = 08			; head of included file list
;
	.ENTRY	PAS$INCHECK,^M<R6,R7>
	MOVL	NAM_DISP(AP),R6		; R6 = address of NAM block
	MOVL	LNK_DISP(AP),R7		; R7 = address of first include block
	BRB	130$
  120$:
	MOVL	INC$L_NXT(R7),R7	; get next include block
  130$:
	CLRL	R0			; set R0 to FALSE
	TSTL	R7			; any more?
	BEQL	899$
	CMPC	#16,NAM$T_DVI(R6),INC$X_DVI(R7); check device
	BNEQ	120$
	CMPC	#06,NAM$W_DID(R6),INC$T_DID(R7); check directory
	BNEQ	120$
	CMPC	#06,NAM$W_FID(R6),INC$T_FID(R7); check file id
	BNEQ	120$
	MOVL	#1,R0			; set R0 to TRUE
  899$:
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$EXCLUDE    *
;	*                  *
;	********************
;
; Called when an end-of-file is encountered on an included file. The
; current file is closed and the previous file is opened and set to
; the last record access on the previous file.
;
; Argument offsets
;
;	AP				; number of arguments (3)
	FSB_DISP = 04			; FSB address
	BUF_DISP = 08			; character buffer
	LST_DISP = 12			; last buffer character
;
	.ENTRY	PAS$EXCLUDE,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	FSB_DISP(AP),R6
	ADDL3	R6,#FSB$C_BLN,R7	; R7 = address of RAB
	ADDL3	R7,#RAB$C_BLN,R8	; R8 = address of FAB
	ADDL3	R8,#FAB$C_BLN,R9	; R9 = address of NAM
;
; Close current file
;
	PUSHL	R6
	CALLS	#1,G^PAS$CLOSEINOUT
;
; Restore NAM block and open previous file by NAM block
;
	MOVL	FSB$L_INC(R6),R10	; R10 = address of include block
	MOVL	INC$L_NXT(R10),FSB$L_INC(R6); restore next pointer
	MOVC3	#6,INC$T_DID(R10),NAM$W_DID(R9); directory id
	MOVC3	#16,INC$X_DVI(R10),NAM$T_DVI(R9); device id
	MOVC3	#06,INC$T_FID(R10),NAM$W_FID(R9); file id
	BISL2	#FAB$M_NAM,FAB$L_FOP(R8); open via NAM block
	PUSHL	#PAS$C_NOCARR		; carriage control -- not used
	PUSHL	#-PAS$C_DFLTRECSI	; no buffer allocated
	CLRD	-(SP)
	CLRD	-(SP)
	PUSHL	R6
	CALLS	#7,G^PAS$OPEN
	BICL2	#FAB$M_NAM,FAB$L_FOP(R8); cancel NAM block access
;
; Test if still an included file
;
	TSTL	FSB$L_INC(R6)
	BNEQ	120$
	BICL2	#FSB$M_INC,FSB$L_STA(R6); not included, clear flag
  120$:
;
; Restore last record read via random access by RFA
;
	MOVB	#RAB$C_RFA,RAB$B_RAC(R7)
	MOVC3	#06,INC$T_RFA(R10),RAB$W_RFA(R7); record file address
	$GET	RAB=R7
	BLBC	R0,910$			; branch if error
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R7); restore sequential access
;
; Blank out first part of record already read
;
	SUBL3	#1,INC$L_POS(R10),R0	; R0 = length to blank
	MOVC5	#0,@BUF_DISP(AP),#SPACE,R0,@BUF_DISP(AP)

	RET
;
; Read error
;
  910$:
	PUSHL	R0
	MOVZBL	FAB$B_FNS(R8),-(SP)
	PUSHL	FAB$L_FNA(R8)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	*********************
;	*		    *
;	*     PAS$CONCAT    *
;	*		    *
;	*********************
;
; Called when concatenated input files existed
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FAB address
	BUF_DISP = 08			; character buffer
	POS_DISP = 12			; last character position
	LEN_DISP = 16			; length of name
;
	.ENTRY	PAS$CONCAT,^M<R2,R3,R4,R5,R6,R7>
;
	MOVL	FSB_DISP(AP),R6
;
; Close current file
;
	PUSHL	R6
	CALLS	#1,G^PAS$CLOSEINOUT
;
; Open concatenated file
;
	BISL2	#FSB$M_INC,FSB$L_STA(R6); Fake INCLUDE'd file to get
					; read-only access
	PUSHL	#PAS$C_NOCARR		; carriage control -- not used
	PUSHL	#-PAS$C_DFLTRECSI
	CLRD	-(SP)
	PUSHL	LEN_DISP(AP)
	DECL 	POS_DISP(AP)
	SUBL3	LEN_DISP(AP),POS_DISP(AP),R2
	DECL	R2
	PUSHAB	@BUF_DISP(AP)[R2]
	PUSHL	R6
	CALLS	#7,G^PAS$OPEN
	BICL2	#FSB$M_INC,FSB$L_STA(R6); Unfake INCLUDE'd file
;
; Reset file
;
	PUSHL	R6
	CALLS	#1,G^PAS$RESET
	BICL2	#FSB$M_RDLN,FSB$L_STA(R6)
;
	RET
;
;
;
	.END
