;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;*                                                                         *
;*                             PAS$RT_CHK                                  *
;*           RUNTIME SUPPORT MODULE FOR PASCAL -- SECTION 3                *
;*                                                                         *
;*                    VERSION V1.0-1 - OCTOBER 1979                        *
;*                                                                         *
;*   This module defines the following routines:                           *
;*                                                                         *
;*      pas$okset:   routine to do runtime set size checking               *
;*      pas$asserr:  routine to report a subrange assignment error         *
;*      pas$seterr:  routine to report a set assignment error              *
;*      pas$diverr:  routine to report a divide-by-zero error              *
;*      pas$dynerr:  routine to report a dynamic array assignment error    *
;*      pas$caserr:  routine to report case range error                    *
;*                                                                         *
;*   Written by: Jeff Scofield 10-Dec-78                                   *
;*               Hellmut Golde 15-Feb-79                                   *
;*               Jan Sanislo   22-Feb-79                                   *
;*                                                                         *
;*   edit history: 01-002 26feb80 paul hohensee. inhibit message print
;*                 when signalling error.
;*
;*		   01-003 12may80 susan azibert.  Change the output of
;*		   run-time error messages so that they are signalled
;*		   and printed by calling lib$stop.
;
;		01-004 Paul Hohensee 11-Aug-81. Change to general addressing of external routines
;*
;***************************************************************************
	.title	pas$rt_chk
	.ident  'V03-000'
	.psect _pas$code,pic,shr,exe,nowrt

	.extrn  pas$_subasgbou  ; message 8120
	.extrn  pas$_setasgbou  ; message 8130
	.extrn  pas$_invasginc  ; message 8150
	.extrn  pas$_casselbou  ; message 8140

	$stsdef			; status code macros
;
;   ROUTINE TO IMPLEMENT RUNTIME SET SIZE CHECKING
;
	.entry	pas$okset,^m<r2>
	pushl	4(ap)
	pushl	12(ap)	
	calls	#2,G^pas$card	; check low end of set
	tstl	r0
	bneq	10$		; out of bounds if not zero
	pushl	4(ap)
	pushl	16(ap)
	calls	#2,G^pas$card	; check total range
	movl	r0,r2		; save result
	pushl 	4(ap)
	pushl	8(ap)
	calls	#2,G^pas$card	; check total range except high end
	subl2	r0,r2		; find cardinality of upper end
	bneq	10$		; out of bounds if not zero
	ret
10$:	calls	#0,pas$seterr	; call set error routine
	ret
;
;   ROUTINE TO IMPLEMENT THE PROCEDURE PAS$ASSERR
;
	.entry	pas$asserr,^m<>
	subl3	#7,16(fp),-(sp)			; third FAO argument (PC of call)
	pushl	#0				; second FAO argument (null)
	pushl	#0				; first FAO argument (null)
	pushl	#3				; number of FAO arguments preceding
	addl3   #4,#pas$_subasgbou,-(sp)	; push error message #8120
	calls	#5,G^lib$stop			; signal error and stop execution
	ret
;
;   ROUTINE TO IMPLEMENT THE PROCEDURE PAS$SETERR
;
	.entry	pas$seterr,^m<>
	subl3	#7,16(fp),-(sp)			; third FAO argument (PC of call)
	pushl	#0				; second FAO argument (null)
	pushl	#0				; first FAO argument (null)
	pushl	#3				; count of FAO arguments preceding
	addl3	#4,#pas$_setasgbou,-(sp)	; push error message #8130
	calls	#5,G^lib$stop			; signal error and stop execution
	ret
;
;   ROUTINE TO IMPLEMENT THE PROCEDURE PAS$DIVERR
;
	$ssdef
;
	.entry	pas$diverr,^m<>
	pushl	#ss$_intdiv
	calls	#1,G^lib$stop
	ret
;
;   ROUTINE TO IMPLEMENT THE PROCEDURE PAS$DYNERR
;
	.entry	pas$dynerr,^m<>
	subl3	#7,16(fp),-(sp)			; third FAO argument (PC of call)
	pushl	#0				; second FAO argument (null)
	pushl   #0				; first FAO argument (null)
	pushl	#3				; number of FAO arguments preceding
	addl3	#4,#pas$_invasginc,-(sp)   	; push error message #8150
	calls	#5,G^lib$stop			; signal error and stop execution
	ret
;
;   ROUTINE TO IMPLEMENT THE PROCEDURE PAS$CASERR
;
	.entry	pas$caserr,^m<>
	subl3	#7,16(fp),-(sp)			; third FAO argument (PC of call)
	pushl	#0				; second FAO argument (null)
	pushl	#0				; first FAO argument (null)
	pushl	#3				; count of FAO arguments preceding
	addl3	#4,#pas$_casselbou,-(sp)	; push error message #8140
	calls	#5,G^lib$stop			; signal error and stop execution
	ret
	.END
