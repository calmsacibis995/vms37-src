;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;*                                                                         *
;*                          PAS$RT_UTIL                                    *
;*           RUNTIME SUPPORT MODULE FOR PASCAL -- SECTION 1                *
;*                                                                         *
;*                   VERSION V1.0-1 -- OCTOBER 1979                        *
;*                                                                         *
;*   This module defines the following routines:                           *
;*                                                                         *
;*      pas$entry:   JSB routine to expand stack on procedure entry        *
;*      pas$unwind:  routine to unwind stack for nonlocal goto             *
;*      pas$clock:   routine to implement the Pascal function clock        *
;*      pas$card:    routine to implement the Pascal function card         *
;*      pas$getargs: routine to get compiler options settings              *
;*      pas$extract,                                                       *
;*      pas$insert:  routines for compile time variable field handling     *
;*                                                                         *
;*   Written by: Jeff Scofield 10-Dec-78                                   *
;*               Hellmut Golde 15-Feb-79                                   *
;*               Jan Sanislo   22-Feb-79                                   *
;*                                                                         *
;*   Edit History:
;*      01-002: Eliminate body of pas$entry for VMS V2.0.  Leave the entry
;*              point available for compatibility with older versions of
;*              of the compiler.
;*                                       Paul Hohensee   21FEB80
;*
;	01-003: Multiply result of PAS$CLOCK by 10.
;					Paul Hohensee	20-Jul-81
;
;***************************************************************************
	.title	pas$rt_util
	.IDENT	'V03-000'
	.psect _pas$code,pic,shr,exe,nowrt
;
;   ROUTINE TO EXPAND STACK WHEN NECESSARY UPON PROCEDURE ENTRY
;
pas$entry::
	rsb       	; leave entry point for compatibility
;	
;
;   ROUTINE TO IMPLEMENT THE PROCEDURE PAS$UNWIND
;
;   Modified 5/22/79 - Restore correct SP in case of pathological goto
;                      Jan Sanislo
;
	.entry	pas$unwind,^m<>
loop:	cmpl	r0,12(fp)
	beql	lastret
	moval	loop,16(fp)
	ret
lastret:
	movab	fixsp,16(fp)
	ret
;
fixsp:	movl	-12(fp),sp
	jmp	(r1)
;
;   ROUTINE TO IMPLEMENT THE PASCAL FUNCTION CLOCK
;
	$jpidef
	.entry	pas$clock,^m<>
	pushl	#0			; make room for returned cpu time
;
;   Create request list on stack at -20(fp)
;
	clrq	-(sp)			; two zero longwords
	pushal	-4(fp)			; address of spot to get cpu time
	pushl	#<jpi$_cputim@16>!4	; size and request words
;
;   Push arguments and call sys$getjpi
;
	clrq	-(sp)			; arg6,arg7--null arguments
	pushl	#0			; arg5--null argument
	pushal	-20(fp)			; arg4--address of request list
	clrq	-(sp)			; arg2,arg3--null arguments
	pushl	#0			; arg1--null argument
	calls	#7,G^sys$getjpi		; get cpu time from system
	MULL3	-4(FP),#10,R0		; multiply by 10 to get milliseconds
	ret
;
;   ROUTINE TO IMPLEMENT THE PASCAL FUNCTION CARD
;
	.entry	pas$card,^m<r2,r3,r4,r5>
	clrl	r0			; clear return count
	clrl	r1			; clear starting position
	clrl    r5 			; clear size comparison reg.
	movl	4(ap),r2		; get length of set
	movl    r2,r3			; into 3 registers
10$:	movl	r2,r4			;
	cmpl	r4,#32			; check size field
	bleq	20$			; is ok.
	movl	#32,r4			; otherwise set size to 32
	subl2	#32,r2			;
20$:	addl2	r4,r5			; increment size comparison
30$:	ffs	r1,r4,@8(ap),r1		; find next "1" bit
	beql	40$			; done if Z-bit = 1
	incl	r0			; increment count
	incl	r1			; increment starting position
	subl3	r1,r5,r4		; compute new length
	brb	30$			; loop until done
40$:	cmpl 	r3,r1			; check if done
	bgtr	10$			;
	ret				; return to caller
;
;   ROUTINE TO GET OPTION SETTINGS FROM COMMAND LINE
;
;   This routine gets the option settings from the command line, which
;   were passed as arguments to the main program level.  These argu-       
;   ments are not available within Pascal, which is why this routine is
;   required.  This routine must be called directly from the main
;   program, as it assumes that the main program's saved AP is on the
;   stack at 8(FP).
;
	.entry	pas$getargs,^m<r8>
	movl	8(fp),r8		; r8 <-- saved ap of main program
	movw	@4(r8),@4(ap)		; set first return parameter
	movw	@8(r8),@8(ap)		; set second return parameter
	movl	12(r8),@12(ap)		; set third return parameter
	movc3	#11,@16(r8),@16(ap)	; set fourth return parameter
	movc3	#11,@20(r8),@20(ap)	; set fifth return parameter
	movc3	#128,@24(r8),@24(ap)	; set sixth return parameter
	movl	28(r8),@28(ap)		; set seventh return parameter.
	ret				; return to caller
;
;   ROUTINES FOR VARIABLE FIELD INSERTION AND EXTRACTION BY COMPILER
;
        .entry  pas$insert,^m<>
        insv    @8(ap),12(ap),16(ap),@4(ap)
        ret
;
        .entry  pas$extract,^m<>
        extzv   12(ap),16(ap),@4(ap),@8(ap)
        ret
	.end
