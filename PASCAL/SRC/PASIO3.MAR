;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.TITLE	PAS$IO_OUTPUT			; PASCAL RMS linkage
        .ident  'V03-000'
;
;*********************************************************************
;*********************************************************************
;**								    **
;**             PASCAL RMS LINKAGE FOR VAX-11/780                   **
;**             =================================                   **
;**								    **
;**								    **
;**               VERSION V1.2 -- JANUARY 1981			    **
;**								    **
;**   DEVELOPED BY:  COMPUTER SCIENCE DEPARTMENT                    **
;**                  UNIVERSITY OF WASHINGTON                       **
;**                  SEATTLE, WA 98195                              **
;**								    **
;**   AUTHORS:       MARK BAILEY, JOHN CHAN, HELLMUT GOLDE          **
;**								    **
;*********************************************************************
;*********************************************************************
;
; Modified 08Jan80: 1) Allow output of 31 character scalar values in 
;                   PAS$WRITESCAL.
;                   2) Bugfix in PAS$PUTBIN. Compiler was calling PAS$WRITEOK
;                   twice under some circumstances.
;                                 Paul Hohensee
;          05May80: Fix PAS$WRITESCAL to force output even if specified
;                   field width <= 0.
;                                 Paul Hohensee
;
;	   16Oct80: Change PRN_CRLF so that lines are printed:
;		    <LF> <text> <CR>
;				  Susan Azibert
;
;	   13Jan81: Change all tests of status returns from RMS to
;		    BLBC R0,label and BLBS R0,label from CMPL R0,#RMS$NORMAL;
;		    BNEQ label, etc.
;				  Paul Hohensee
;
;	   13Jan81: Change scalar output so element name is right truncated
;		    for short field width, right justified and blank filled
;		    for long field width.

;	   28Aug81: Use General addressing mode.  Steve Lionel.
;
;****************************************************************
;****************************************************************
;**                                                            **
;**                                                            **
;**                   SECTION 3                                **
;**                                                            **
;**                OUTPUT PROCEDURES                           **
;**                                                            **
;**                                                            **
;****************************************************************
;****************************************************************
;
;
; For any file variable the following storage is assumed:
;
;		 ------------------
;	 FSB:   |      POINTER     |
;		 ------------------
;		|   STATUS WORD    |
;		 ------------------
;               |       LAST       |
;		 ------------------
;               |     LINELIMIT    |
;                ------------------
;               |     LINECOUNT    |
;                ------------------
;		|  RECORD NUMBER   |
;                ------------------
;	RAB:    |                  |
;		  44(HEX) BYTES  
;		|        .         |
;		         .
;		|        .         |
;		 ------------------
;	FAB:	|                  |
;		   50(HEX) BYTES    
;		|        .         |
;			 .
;		|        .         |
;		 ------------------
;       NAM:    |		   |    NOTE: The NAM block is allocated 
;		   38(HEX) BYTES        for the PASCAL logical files
;		|        .         |    'INPUT' and 'OUTPUT' only.
;                         .
;               |                  |
;                ------------------
;
; Macro options
;
	.DSABL	GBL			; no undefined references
	.ENABL	FPT			; rounded arithmetic
;
; External references
;
	.EXTRN	PAS$IOERROR
	.EXTRN	PAS$WRITEOK
	.EXTRN	PAS$BUFFEROVER
	.EXTRN	PAS$WRITELN
;

	.EXTRN	FOR$CNV_OUT_D
	.EXTRN	FOR$CNV_OUT_E
	.EXTRN	FOR$CNV_OUT_F
	.EXTRN	FOR$CNV_OUT_I
	.EXTRN	FOR$CNV_OUT_O
	.EXTRN	FOR$CNV_OUT_Z
;
; Provide definitions of system values
;
	$DSCDEF				; string descriptor definitions
	$FABDEF
	$RABDEF
	$RMSDEF				; for status code checking
;
; PASCAL compiler constants
;
; Note: The constants below with the names 'PAS$C_XXXXX' are 
;	used in the PASCAL compiler with the names 'XXXXX'. If the 
;	values in the compiler are altered then the values below
;	must be altered accordingly.
;
;	PAS$C_DFLTRECSI = 257;		; default buffer size
;	PAS$C_NIL = 0			; NIL pointer
;	PAS$C_TRUE = 1			; TRUE
;	PAS$C_FALSE = 0			; FALSE
;	PAS$C_NOCARR = 0		; no carriage control
;	PAS$C_CARRIAGE = 1		; FORTRAN carriage control
;	PAS$C_LIST = 2			; LIST carriage control
;	PAS$C_PRN = 3			; PRN carriage control
;
; PRN carriage control constants
;
;	PRN_CRLF = ^X8D01		; PRN carriage control constant
					; for <LF> <text> <CR>
;	PRN_NULL = ^X0000		; PRN carriage control constant
					;    for no carriage control
;
; File status block constants
;
	FSB$C_BLN = ^X18		; FSB block length
;	FSB$V_OPEN = 5
;	FSB$V_EOF = 1
;	FSB$V_EOLN = 2
;	FSB$V_GET = 3
; 	FSB$V_TXT = 4			; textfile flag
;	FSB$V_RDLN = 0			; last access READLN
;	FSB$V_DIR = 6			; direct access flag
;	FSB$V_PUT = 7
;	FSB$V_INT = 8			; internal flag
;	FSB$V_PRMT = 9			; prompt flag
;	FSB$V_OUTPUT = 10 		; OUTPUT file flag
;	FSB$V_ACTIN = 11		; actual input flag
;	FSB$V_DELZ = 30			; delete file if empty
;	FSB$V_INC = 31			; included file flag
;	FSB$B_CC = 6			; carriage control byte offset
;	FSB$M_OPEN = ^X0020
;	FSB$M_EOF = ^X0002
;	FSB$M_EOLN = ^X0004
;	FSB$M_GET = ^X0008
;	FSB$M_PRMT = ^X0200
;	FSB$M_PUT = ^X00000080
;	FSB$M_TXT = ^X0010
;	FSB$M_RDLN = ^X0001
;	FSB$M_DIR = ^X00000040
;	FSB$M_INT = ^X00000100
;	FSB$M_OUTPUT = ^X0400
;	FSB$M_ACTIN = ^X0800
;	FSB$M_DELZ = ^X40000000
;	FSB$M_INC = ^X80000000
;	FSB$L_CNT = 16			; line count (textfiles)
;	FSB$L_INC = 20			; %INCLUDE block address
	FSB$L_LIM = 12			; linelimit
	FSB$L_LST = 8			; last word offset
;	FSB$L_PFSB = 20			; related file FSB for prompting
					; for INPUT, has address of OUTPUT FSB
					; for OUTPUT, has address of INPUT FSB
					; (shares storage with include address
					; and direct access record
                       			; buffer address)
;	FSB$L_REC = 20			; record buffer address for
					; direct access (shares storage
					; with include address and related
					; file FSB)
;	FSB$L_STA = 4			; status word offset
;
; Character constants
;
;	TAB = ^X09
	SPACE = ^X20
;	DOLLAR = ^X24
	FORMFEED = ^XC
	STAR = ^X2A
;	PLUS = ^X2B
;	MINUS = ^X2D
;	POINT = ^X2E
	ZERO = ^X30
	ONE = ^X31
;	NINE = ^X39
;	AA = ^X41
;	DD = ^X44
;	EE = ^X45
;       ZZ = ^X5A
;	UNDERSCORE = ^X5F
;	AA_SMALL = ^X61
;	ZZ_SMALL = ^X7A
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*    PAS$PUTBIN    *
;       *  pas$putbinary   *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP			; number of arguments (1)
	FSB_DISP = 04			; FSB address
;
	.ENTRY	PAS$PUTBIN,^M<R6,R7>
        CALLG   (AP),G^PAS$WRITEOK
        brb     newent
        .entry  pas$putbinary,^m<r6,r7>
newent:
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	ADDL3	R6,#FSB$C_BLN,R7	; R7 = address of RAB
	$PUT	RAB=R7
	BICL2	#RAB$M_TPT,RAB$L_ROP(R7); clear TPT bit
	BLBC	R0,910$			; branch if error
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R7); make sure sequential
	RET
;
; Write error
;
910$:
	PUSHL	R0
	MOVZBL	<RAB$C_BLN+FAB$B_FNS>(R7),-(SP)
	PUSHL	<RAB$C_BLN+FAB$L_FNA>(R7)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*    PAS$PUTTXT    *
;	*                  *
;	********************
;
; Increments the file pointer. If the pointer is positioned at the last
; position at entry time then the buffer has overflowed.
;
; Argument offsets
;
;	AP				 ; number of arguments (1)
	FSB_DISP = 04			; FSB address
;
	.ENTRY PAS$PUTTXT,^M<R2,R3>
	CALLG	(AP),G^PAS$WRITEOK
	MOVL	FSB_DISP(AP),R2		; R2 = address of FSB
	ADDL3	R2,#FSB$C_BLN,R3	; R3 = address of RAB
	CMPL	(R2),FSB$L_LST(R2)
	BLSS	190$			; branch if ok
	CALLG	(AP),G^PAS$BUFFEROVER	; buffer overflow
  190$:
	INCL	(R2)
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$WRITECHAR  *
;	*                  *
;	********************
;
; Writes a character to the file buffer. If the field width is less
; than or equal to zero then zero field width is used (ie. no output).
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	CHR_DISP = 08			; character value (low order byte)
	FLD_DISP = 12			; field width (by value)
	NOT_DISP = 16			; (not used)
;
	.ENTRY	PAS$WRITECHAR,^M<R2,R3,R4,R5,R6>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$WRITEOK
	TSTL	FLD_DISP(AP)		; check field width
	BLEQ	199$			; exit if zero field width
;
; Check if enough room
;
	SUBL3	(R6),FSB$L_LST(R6),R0	; R0 = number of bytes left 
	CMPL	FLD_DISP(AP),R0
	BLEQ	110$
	PUSHL	R6
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  110$:
	DECL	FLD_DISP(AP)
	MOVC5	#0,@(R6),#SPACE,FLD_DISP(AP),@(R6); blank fill
	MOVC3	#1,CHR_DISP(AP),(R3)	; put character
	MOVL	R3,(R6)			; update file pointer
  199$:
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$WRITESTR   *
;	*                  *
;	********************
;
; Writes a string rigth justified with blank fill on the designated
; file. If the field width is smaller than the string length the string
; is truncated on the right.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	STR_DISP = 08			; string address
	FLD_DISP = 12			; field width (by value)
	LEN_DISP = 16			; string length (by value)
;
	.ENTRY PAS$WRITESTR,^M<R2,R3,R4,R5,R7>
	MOVL	FSB_DISP(AP),R2		; R2 = address of FSB
	PUSHL	R2
	CALLS	#1,G^PAS$WRITEOK
	TSTL	FLD_DISP(AP)
	BLEQ	199$			; exit if field width <= 0
;
; Check if passing string value or address
;
	CMPL	LEN_DISP(AP),#4
	BLEQ	100$
	MOVL	STR_DISP(AP),R7		; R7 = address of string
	BRB	101$
  100$:
	MOVAL	STR_DISP(AP),R7		; R7 = address of string
  101$:
	SUBL3	(R2),FSB$L_LST(R2),R0
	CMPL	FLD_DISP(AP),R0
	BLEQ	105$
	PUSHL	R2
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  105$:
	SUBL3	LEN_DISP(AP),FLD_DISP(AP),R4; R4 = number of bytes to pad
	BGTRU	110$			; branch if padding required
	MOVC3	FLD_DISP(AP),(R7),@(R2)	; write width characters
	BRB	111$
  110$:					; need to blank fill R4 bytes
	MOVC5	#0,@(R2),#SPACE,R4,@(R2); blank fill
	MOVC3	LEN_DISP(AP),(R7),(R3)	; write string
  111$:					; update pointers
	MOVL	R3,@FSB_DISP(AP)
  199$:
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$WRITESCAL  *
;	*                  *
;	********************
;
; Write out a scalar value on the designated text file. If the field
; width is less than that required for the value, the value is left truncated
; If the field width is greater than that required for the value, the
; value is right justified with blank fill.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	SCA_DISP = 08			; scalar value (by value)
	FLD_DISP = 12			; field width (by value)
	NAM_DISP = 16			; namelist address
        MAX_DISP = 20			; maximal ordinal value of
					; scalar (by value)
;
; Constants
;
        namelen = 32                    ; length in bytes of one entry in
                                        ; name list.
;
	.ENTRY	PAS$WRITESCAL,^M<R2,R3,R4,R5,R6,R7>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$WRITEOK
	MULL3	SCA_DISP(AP),#namelen,R7
	ADDL2	NAM_DISP(AP),R7		; R7 = scalar name address
;
; Calculate scalar name length and check for bounds
;
	TSTL	SCA_DISP(AP)
	BLSS	900$
	CMPL	SCA_DISP(AP),MAX_DISP(AP)
	BGTR	900$
	LOCC	#SPACE,#namelen,(R7)
	SUBL3	R0,#namelen,R1
;
; Call PAS$WRITESTR to actually write the value to the buffer
;
	PUSHL	R1			; pass name length
	PUSHL	FLD_DISP(AP) 		; pass field width
	CMPL	R1,#4			; pass by value or reference
	BLEQ	110$
	PUSHL	R7			; by reference
	BRB	111$
110$:
	PUSHL	(R7)			; by value
111$:
	PUSHL	FSB_DISP(AP)
	CALLS	#4,PAS$WRITESTR
	RET
;
900$:
	MOVZWL	#^X83A4,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R6),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R6)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$WRITEINT   *
;	*                  *
;	********************
;
; Writes an integer right justified in the designated field width.
; If the field width is less than the minimum the minimum field width is
; used. If the integer won't fit in the designated field width then the
; amount needed is used. If the field width used will overflow the buffer
; a runtime error occurs.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	INT_DISP = 08			; integer value
	FLD_DISP = 12			; field width (by value)
	NOT_DISP = 16			; (not used)
;
; Other constants
;
	IMINP = 1			; minimum field width for
					; positive integers
	IMINN = 2			; minimum field width for
					; negative integers
	IMAX = 20			; maximum field width needed 
					; for integers
;
	.ENTRY	PAS$WRITEINT,^M<R2,R3,R4,R5,R6,R7,R8,R9>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$WRITEOK
;
; Make room for descriptor on stack
;
	SUBL2	#DSC$C_S_BLN,SP
	MOVL	SP,R8			; R8 = address of descriptor
;
; Check for minimum field width (1 for positive, 2 for negative)
;
	MOVL	FLD_DISP(AP),R3		; R3 = field width
	TSTL	INT_DISP(AP)		; test sign of value
	BLSS	110$
					; positive value
	CMPL	#IMINP,R3		; use at least minimum
	BLEQ	120$
	MOVL	#IMINP,R3		
	BRB	120$
  110$:					; negative value
	CMPL	#IMINN,R3		; use at least minimum
	BLEQ	120$
	MOVL	#IMINN,R3
  120$:					; R3 = field width
;
; Convert number to character string
;
	SUBL3	(R6),FSB$L_LST(R6),R7	; R7 = number of bytes left in line
	CMPL	R3,R7
	BLEQ	125$
	PUSHL	R6
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  125$:
	MOVW	R3,DSC$W_LENGTH(R8)	; pass field width
	MOVL	(R6),DSC$A_POINTER(R8)	; pass buffer address
	PUSHL	R8			; pass descriptor address
	PUSHL	INT_DISP(AP)
	CALLS	#2,G^FOR$CNV_OUT_I
    	BLBC	R0,130$
	ADDL2	R3,(R6)			; update file pointer
	BRB	199$			; exit, conversion succeeded
;
; Bad conversion; use a larger buffer and try again
;
  130$:
	MOVW	#IMAX,DSC$W_LENGTH(R8)	; pass buffer length
	SUBL2	#IMAX,SP		; make room for buffer on stack
	MOVL	SP,R9
	MOVL	R9,DSC$A_POINTER(R8)	; pass buffer address
	PUSHL	R8			; pass descriptor address
	PUSHL	INT_DISP(AP)
	CALLS	#2,G^FOR$CNV_OUT_I
	BLBC	R0,910$
	SKPC	#SPACE,#IMAX,(R9)	; skip leading spaces
					; R0 = number of remaining
					; characters
					; R1 = address of remaining
					; characters
	CMPL	R0,R7			; check if enough room
	BLEQ	140$
	PUSHL	R6
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  140$:
	MOVC3	R0,(R1),@(R6)		; move string to output buffer
	MOVL	R3,(R6)			; update file pointer
  199$:
	RET
;
; Output conversion error
;
  910$:
	MOVZWL	#^X83A4,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R6),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R6)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*  PAS$WRITEDOUBE  *
;	*                  *
;	********************
;
; Write out a double precision number in 'E' format. A minimum
; field width of FMIN is used.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	DOB_DISP = 08			; double number (by reference)
	FLD_DISP = 12			; field width (by value)
;
; Other constants
;
	FMIN = 8			; mimimum field width
;
	.ENTRY	PAS$WRITEDOUBE,^M<R2,R3,R4,R5>
;
; Make room for descriptor and double precission value on stack
;
	SUBL2	#<DSC$C_S_BLN+8>,SP
	MOVL	SP,R1			; R1 = descriptor address
	MOVD	@DOB_DISP(AP),DSC$C_S_BLN(R1); put value on stack
        MOVL    #1,R5                   ; set flag
	BRW	PAS$WREALE		; jump to common code
;
;	********************
;	*                  *
;	*  PAS$WRITEREALE  *
;	*                  *
;	********************
;
; Write a real number in 'E' format. A minimum field width of EMIN is
; used.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	REL_DISP = 08			; real number (by value)
	FLD_DISP = 12			; field width (by value)
	NOT_DISP = 16			; (not used)
;
; Other constants
;
	EMIN = 08			; minimum field width
;
	.ENTRY	PAS$WRITEREALE,^M<R2,R3,R4,R5>
;
; Make room for descriptor and double precision value on stack
;
	SUBL2	#<DSC$C_S_BLN + 8>,SP
	MOVL	SP,R1
	CVTFD	REL_DISP(AP),DSC$C_S_BLN(R1); put value on stack
        MOVL    #0,R5                   ; set flag
;
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;
; The code below is common to both PAS$WRITEREALE and PAS$WRITEDOUBE.
; After the double precision value is placed on the stack there is no
; difference in the ways the values are converted.
;
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;
  PAS$WREALE:
	MOVL	FSB_DISP(AP),R2		; R2 = address of FSB
	PUSHL	R2
	CALLS	#1,G^PAS$WRITEOK
;
; Check field width and adjust if necessary
;
	MOVL	FLD_DISP(AP),R3		; R3 = field width
	SUBL3	#EMIN-1,R3,R4		; R4 = number of digits to right
	BGTR	110$			; branch if large enough field width
	MOVL	#EMIN,R3		; else set to minimum value
	MOVL	#1,R4			; and one digit to the right
;
; Check for buffer overflow and output the value
;
  110$:
	SUBL3	(R2),FSB$L_LST(R2),R0
	CMPL	R3,R0
	BLEQ	120$
	PUSHL	R2
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  120$:
	MOVW	R3,DSC$W_LENGTH(R1)	; store string length
	MOVL	(R2),DSC$A_POINTER(R1)	; store string address
	PUSHL	#1			; scale factor
	PUSHL	R4			; digits in fraction
	PUSHL	R1
	PUSHAL	DSC$C_S_BLN(R1)		; descriptor address
	CMPL    #0,R5                   ; check for single or double
	BNEQ    125$
	CALLS	#4,G^FOR$CNV_OUT_E
128$:
	BLBC	R0,910$
	ADDL2	R3,(R2)
	RET
;
125$:
        CALLS   #4,G^FOR$CNV_OUT_D
        BRB     128$
;
; Output conversion error
;
  910$:
	MOVZWL	#^X83A4,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R2),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R2)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*  PAS$WRITEDOUBF  *
;	*                  *
;	********************
;
; Writes out a double number in fixed format.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	DOB_DISP = 08			; double value (by reference)
	FLD_DISP = 12			; field width (by value)
	DIG_DISP = 16			; digits to right of decimal
					; point (by value)
;
; Other constants
;
	FMIN = 3			; minimum field width
	FMAX = 42			; maximum field width
;
	.ENTRY	PAS$WRITEDOUBF,^M<R2,R3,R4,R5,R6>
;
; Make room for descriptor and double precision value on stack
;
	SUBL2	#<DSC$C_S_BLN+8>,SP
	MOVL	SP,R1			; R1 = address of descriptor
	MOVD	@DOB_DISP(AP),DSC$C_S_BLN(R1); put value on stack
	BRW	PAS$WREALF		; jump to common code
;
;	********************
;	*                  *
;	*  PAS$WRITEREALF  *
;	*                  *
;	********************
;
; Writes out a real number in fixed format.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 4			; FSB address
	REL_DISP = 08			; real number (by value)
	FLD_DISP = 12			; field width
	DIG_DISP = 16			; digits to right of decimal
					; point (by value)
;
; Other constants
;
	FMIN = 3			; minimum field width
        FMAX = 42       		; maximum field width
					; (sign + point + 40)
;
	.ENTRY	PAS$WRITEREALF,^M<R2,R3,R4,R5,R6>
;
; Make room for descriptor and double precision value on stack
;
	SUBL2	#<DSC$C_S_BLN + 8>,SP
	MOVL	SP,R1			; R1 = address of descriptor
	CVTFD	REL_DISP(AP),DSC$C_S_BLN(R1); store value on stack
;
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;
; The code below is common to both PAS$WRITEREALF and PAS$WRITEDOUBF.
; After the double precision value is placed on the stack there is no
; difference in the way the values are converted.
;
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;
; Check field widths and adjust if necessary
;
  PAS$WREALF:
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$WRITEOK
	MOVL	FLD_DISP(AP),R3		; R3 = field width (p)
	TSTD	DSC$C_S_BLN(R1)		; check if positive
	BLSS	105$
	MOVL	#SPACE,@(R6)		; if positive force blank
	PUSHL	FSB_DISP(AP)
	CALLS	#1,PAS$PUTTXT		; write out blank
        DECL    R3			; adjust field width by 1
  105$:
	MOVL	DIG_DISP(AP),R4		; R4 = digits to right (q)
	TSTL	R4			; q > 0?
	BGEQ	110$
	CLRL	R4			; q := 0
  110$:
	SUBL3	R4,R3,R0
	CMPL	R0,#2			; p > q+2?
	BGEQ	120$
	ADDL3	R4,#2,R3		; p := q+2
;
; Set up descriptor and call conversion routine
;
  120$:
	SUBL3	(R6),FSB$L_LST(R6),R5	; R5 = number of bytes left in line
	CMPL	R3,R5
	BLEQ	125$
	PUSHL	R6
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  125$:
	MOVW	R3,DSC$W_LENGTH(R1)
	MOVL	(R6),DSC$A_POINTER(R1)
	PUSHL	#0			; scale factor
	PUSHL	R4			; digits in fraction
	PUSHL	R1			; string descriptor
	PUSHAL	DSC$C_S_BLN(R1)		; value
	CALLS	#4,G^FOR$CNV_OUT_F
	BLBC	R0,130$
	ADDL2	R3,(R6)			; update the file pointer
	BRB	199$
;
; Bad conversion; use a buffer of subfield+overflowsize and try again
;
  130$:
	MOVL	SP,R1			; R1 = descriptor address
	ADDL3	#FMAX,R4,R3		; R3 = new buffer size
	SUBL2	R3,SP			; make room on stack
	MOVW	R3,DSC$W_LENGTH(R1)
	MOVL	SP,DSC$A_POINTER(R1)	; buffer address
	PUSHL	#0
	PUSHL	R4			; digits in fraction
	PUSHL	R1			; descriptor address
	PUSHAL	DSC$C_S_BLN(R1)		; value address
	CALLS	#4,G^FOR$CNV_OUT_F
	BLBC	R0,910$
	SKPC	#SPACE,R3,(SP)		; skip leading blanks
	CMPL	R0,R5
	BLEQ	140$
	PUSHL	R6
	CALLS	#1,G^PAS$BUFFEROVER	; buffer overflow
  140$:
	MOVC3	R0,(R1),@(R6)		; store string
	MOVL	R3,(R6)			; update file pointer
  199$:
	RET
;
; Output conversion error
;
  910$:
	MOVZWL	#^X83A4,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R6),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R6)
	CALLS	#3,G^PAS$IOERROR
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$WRITEHEX   *
;	*                  *
;	********************
;
; Writes out a longword in hexadecimal form. Leading zeros are printed
; up to eight places.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	VAL_DISP = 08			; value to be printed
	FLD_DISP = 12			; field width (by value)
	NOT_DISP = 16			; (not used)
;
; Other constants
;
	HMAX = 8			; maximum zero fill field width
	OVERFLOWSIZE = 16		; maximum overflow buffer size
;
	.ENTRY	PAS$WRITEHEX,^M<R2,R3,R4,R5,R6,R7>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$WRITEOK
	TSTL	FLD_DISP(AP)
	BLEQ	$40			; exit if field width <= 0
;
; Make room for descriptor on stack
;
	SUBL2	#DSC$C_S_BLN,SP
	MOVL	SP,R2			; R2 = address of descriptor
	MOVW	FLD_DISP(AP),DSC$W_LENGTH(R2); store length
	MOVL	(R6),DSC$A_POINTER(R2)	; store buffer address
	PUSHL	R2
	PUSHL	VAL_DISP(AP)
	CALLS	#2,G^FOR$CNV_OUT_Z
	ADDL2	FLD_DISP(AP),(R6)
	CMPB 	#STAR,@DSC$A_POINTER(R2); test overflow
	BEQL	$25
	BRW	$35
$25:
	SUBL2	FLD_DISP(AP),(R6)	; restore pointer
	MOVW	#OVERFLOWSIZE,DSC$W_LENGTH(R2)
	SUBL2	#OVERFLOWSIZE,SP
	MOVL	SP,R7
	MOVL	R7,DSC$A_POINTER(R2)
	PUSHL	R2
	PUSHL	VAL_DISP(AP)
	CALLS	#2,G^FOR$CNV_OUT_Z
	SKPC	#SPACE,#OVERFLOWSIZE,(R7); skip blanks
	SUBL3	FLD_DISP(AP),R0,R4
	ADDL2	R4,R1
	MOVC3	FLD_DISP(AP),(R1),@(R6) ; deposit string
	ADDL2	FLD_DISP(AP),(R6)	; fix up pointer
	BRB	$40
$35:
	MNEGL	#HMAX,R4
	JSB	ZERO_FILL_R3
$40:	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*  PAS$WRITEHEXD   *
;	*                  *
;	********************
;
; Write out a double precision value (quadword) in hexadecimal form.
; Leading zeros up to 16 places are printed
;
; Argument offsets
;
;	AP 				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	VAR_DISP = 08			; value address
	FLD_DISP = 12			; field width by value
	NOT_DISP = 16			; (not used)
;
; Other constants
;
	HMAX = 8			; maximum field for leading zeros
	.ENTRY	PAS$WRITEHEXD,^M<>
	SUBL3	#HMAX,FLD_DISP(AP),R0	; R0 = field width low bytes
	BGTR	110$
	MOVL	FLD_DISP(AP),R0
	BRB	111$
;
; Print low order longword
;
  110$:
	PUSHL	#0
	PUSHL	R0
	ADDL3	VAR_DISP(AP),#4,R0
	PUSHL	(R0)			; low order longword
	PUSHL	FSB_DISP(AP)
	CALLS	#4,PAS$WRITEHEX
	MOVL	#HMAX,R0		; field width high bytes
;
; Print R0 digits of high order longword
;
  111$:
	PUSHL	#0
	PUSHL	R0
	PUSHL	@VAR_DISP(AP)
	PUSHL	FSB_DISP(AP)
	CALLS	#4,PAS$WRITEHEX
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$WRITEOCT   *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	VAL_DISP = 08			; value to be printed
	FLD_DISP = 12			; field width
	NOT_DISP = 16			; (not used)
;
; Other constants
;
	OMAX = 11			; maximum field for leading zeros
	OVERFLOWSIZE = 20		; overflow buffer size
;
	.ENTRY	PAS$WRITEOCT,^M<R2,R3,R4,R5,R6,R7>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$WRITEOK
	TSTL	FLD_DISP(AP)
	BLEQ	$43			; exit if field width <= 0
;
; Make room for descriptor on stack
;
	SUBL2	#DSC$C_S_BLN,SP
	MOVL	SP,R2
	MOVW	FLD_DISP(AP),DSC$W_LENGTH(R2); store length
	MOVL	(R6),DSC$A_POINTER(R2)	; store buffer address
	PUSHL	R2
	PUSHL	VAL_DISP(AP)
	CALLS	#2,G^FOR$CNV_OUT_O
	ADDL2	FLD_DISP(AP),(R6)
	CMPB 	#STAR,@DSC$A_POINTER(R2); test overflow
	BEQL	$55
	BRW	$65
$55:
	SUBL2	FLD_DISP(AP),(R6)	; restore pointer
	MOVW	#OVERFLOWSIZE,DSC$W_LENGTH(R2)
	SUBL2	#OVERFLOWSIZE,SP
	MOVL	SP,R7
	MOVL	R7,DSC$A_POINTER(R2)
	PUSHL	R2
	PUSHL	VAL_DISP(AP)
	CALLS	#2,G^FOR$CNV_OUT_O
	SKPC	#SPACE,#OVERFLOWSIZE,(R7); skip blanks
	SUBL3	FLD_DISP(AP),R0,R4
	ADDL2	R4,R1
	MOVC3	FLD_DISP(AP),(R1),@(R6) ; deposit string
	ADDL2	FLD_DISP(AP),(R6)	; fix up pointer
	BRB	$43
$65:
	MNEGL	#OMAX,R4
        JSB	ZERO_FILL_R3
$43:	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*  PAS$WRITEOCTD   *
;	*                  *
;	********************
;
; Write out a double precision value (quadword) in octal format.
; Leading zeros up to twenty-two places are printed.
;
; Argument offsets
;
;	AP 				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	VAR_DISP = 08			; value address
	FLD_DISP = 12			; field width by value
	NOT_DISP = 16			; (not used)
;
; Other constants
;
	OMAX = 11			; maximum field for leading zeros
;
	.ENTRY	PAS$WRITEOCTD,^M<>
	SUBL3	#OMAX,FLD_DISP(AP),R0	; R0 = field width low bytes
	BGTR	110$
	MOVL	FLD_DISP(AP),R0
	BRB	111$
;
; Print low order longword
;
  110$:
	PUSHL	#0
	PUSHL	R0
	ADDL3	VAR_DISP(AP),#4,R0
	PUSHL	(R0)			; low order longword
	PUSHL	FSB_DISP(AP)
	CALLS	#4,PAS$WRITEOCT
	MOVL	#OMAX,R0		; field width high bytes
;
; Print R0 digits of high order longword
;
  111$:
	PUSHL	#0
	PUSHL	R0
	PUSHL	@VAR_DISP(AP)
	PUSHL	FSB_DISP(AP)
	CALLS	#4,PAS$WRITEOCT
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;       *  ZERO_FILL_R3    *
;	*                  *
;	********************
;
; JSB routine to zero-fill octal and hex output
;
;
ZERO_FILL_R3:				; entry point
        MNEGL   FLD_DISP(AP),R2	        ; get length
        CMPL    R2,R4
        BGEQ    $30
        MOVL	R4,R2
$30:    MOVL    @FSB_DISP(AP),R3	; move address to R3
$10:	CMPB	#SPACE,(R3)[R2]		; check next byte for blank
	BNEQ	$20			; done if not blank
	MOVB	#ZERO,(R3)[R2]		; put in zero
        AOBLSS	#-1,R2,$10
$20:	RSB				; return
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;       *  PAS$LINELIMIT   *
;	*                  *
;	********************
;
; Sets the linelimit for a given file.
;
; Argument offsets
;
;	AP				; number of arguments (2)
	FSB_DISP = 04			; FSB address
	VAL_DISP = 08			; linelimit value
;
	.ENTRY	PAS$LINELIMIT,^M<R2>
	MOVL	8(AP),R2
	MOVL	4(AP),FSB$L_LIM(R2)
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;       ********************
;       *                  *
;       *    PAS$PAGE      *
;       *                  *
;       ********************
;
; Writes a page eject character (1H1 or FORMFEED) to the designated file.
;
; Arguments offsets
;
;	AP				; number of arguments (1)
	FSB_DISP = 04			; FSB address
;
	.ENTRY	PAS$PAGE,^M<R2,R3,R4>
	MOVL	FSB_DISP(AP),R2		; R2 = FSB address
	ADDL3	R2,#<FSB$C_BLN+RAB$C_BLN>,R3; R3 = FAB address
	ADDL3	R2,#FSB$C_BLN,R4	; R4 = RAB address
	CMPL	RAB$L_RBF(R4),(R2)
	BEQL	10$
	PUSHL	R2
	CALLS	#1,PAS$WRITELN		; terminate current line
 10$:
	PUSHL	#0			; fill
	PUSHL	#1			; field width
	BBS	#FAB$V_FTN,FAB$B_RAT(R3),20$; check for carriage control
	PUSHL	#FORMFEED		; not FORTRAN
	BRB	30$
 20$:
	PUSHL	#ONE			; FORTRAN
 30$:
	PUSHL	R2			; FSB address
	CALLS	#4,PAS$WRITECHAR
	PUSHL	R2
	CALLS	#1,PAS$WRITELN		; terminate line
	RET				; return
;
;
;
	.END
