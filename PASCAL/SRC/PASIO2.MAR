;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.TITLE	PAS$IO_INPUT		; PASCAL RMS linkage
        .ident  'V03-000'
;
;*********************************************************************
;*********************************************************************
;**								    **
;**             PASCAL RMS LINKAGE FOR VAX-11/780                   **
;**             =================================                   **
;**								    **
;**								    **
;**               VERSION V1.0-1 -- OCTOBER 1979                    **
;**								    **
;**   DEVELOPED BY:  COMPUTER SCIENCE DEPARTMENT                    **
;**                  UNIVERSITY OF WASHINGTON                       **
;**                  SEATTLE, WA 98195                              **
;**								    **
;**   AUTHORS:       MARK BAILEY, JOHN CHAN, HELLMUT GOLDE          **
;**								    **
;*********************************************************************
;*********************************************************************
;
; Modified to allow input of 31 character scalar values.
;               Paul Hohensee  24Jan80
;
; Modified to check for overflow of integers during a READ
;		Susan Azibert 22May80
;
; Modified to check for overflow of real and double precision numbers
;	during a READ
;		Susan Azibert 22May80
;
; Modified to change the setting for PRN_CRLF to <LF> <text> <CR>
;		Susan Azibert 16Oct80
;
; Modified to force a READLN on read of a string if EOLN is true.
; Old behavior was to force a READLN only if both EOLN was true
; and last read was a string read. If the last read was not a string
; read, a null string (all blanks) was read and the file left
; positioned at EOLN.
;		Paul Hohensee 19Jan81
;
; Correct PAS$READSCAL so it accepts capital Z.
;		Paul Hohensee 20Feb81
;
; 7. Change PAS$CNV_IN_DEFG to an integer-valued function
;
; 8. 11-Aug-81 Paul Hohensee Change to general addressing of external routines
;
;****************************************************************
;****************************************************************
;**                                                            **
;**                                                            **
;**                        SECTION 2                           **
;**                                                            **
;**                     INPUT PROCEDURES                       **
;**                                                            **
;**                                                            **
;****************************************************************
;****************************************************************
	.PAGE
; For any file variable the following storage is assumed:
;
;		 ------------------
;        FSB:   |      POINTER     |
;		 ------------------
;		|   STATUS WORD    |
;		 ------------------
;               |       LAST       |
;		 ------------------
;               |     LINELIMIT    |
;                ------------------
;               |     LINECOUNT    |
;                ------------------
;		|  RECORD NUMBER   |
;                ------------------
;	RAB:    |                  |
;		  44(HEX) BYTES  
;		|        .         |
;		         .
;		|        .         |
;		 ------------------
;	FAB:	|                  |
;		   50(HEX) BYTES    
;		|        .         |
;			 .
;		|        .         |
;		 ------------------
;       NAM:    |		   |    NOTE: The NAM block is allocated 
;		   38(HEX) BYTES        for the PASCAL logical files
;		|        .         |    'INPUT' and 'OUTPUT' only.
;                         .
;               |                  |
;                ------------------
;
;	MACRO OPTIONS
;
	.DSABL	GBL			; No undefined references
	.ENABL	FPT			; Rounded arithmetic
;
; External references
;
	.EXTRN	PAS$READOK
	.EXTRN	PAS$ACTUALGET
	.EXTRN	PAS$STATUSUPDAT
	.EXTRN	PAS$BLANK_R3
	.EXTRN	PAS$IOERROR
;
	.EXTRN	FOR$CNV_IN_DEFG
	.EXTRN	OTS$CVT_TI_L
;
; Provide definitions of system values
;
	$DSCDEF				; String descriptor definitions
	$FABDEF
	$RABDEF
;
; PASCAL compiler constants
;
; NOTE: The constants below with the names 'PAS$C_XXXXX' are 
;	used in the PASCAL compiler with the names 'XXXXX'. If the 
;	values in the compiler are altered then the values below
;	must be altered accordingly.
;
;	PAS$C_DFLTRECSI = 257;		; default buffer size
;	PAS$C_NIL = 0			; NIL pointer
;	PAS$C_TRUE = 1			; TRUE
;	PAS$C_FALSE = 0			; FALSE
;	PAS$C_NOCARR = 0		; no carriage control
;	PAS$C_CARRIAGE = 1		; FORTRAN carriage control
;	PAS$C_LIST = 2			; LIST carriage control
;	PAS$C_PRN = 3			; PRN carriage control
;
; PRN carriage control constants
;
;	PRN_CRLF = ^X8D01		; PRN carriage control constant
					; for <LF> <text> <CR>
;	PRN_NULL = ^X0000		; PRN carriage control constant
					; for no carriage control
;
; File status block constants
;
	FSB$C_BLN = ^X18		; FSB block length
;	FSB$V_OPEN = 5
;	FSB$V_EOF = 1
	FSB$V_EOLN = 2
;	FSB$V_GET = 3
; 	FSB$V_TXT = 4			; textfile flag
;	FSB$V_RDLN = 0			; last access READLN
;	FSB$V_DIR = 6			; direct access flag
;	FSB$V_PUT = 7
;	FSB$V_INT = 8			; internal flag
;	FSB$V_PRMT = 9			; prompt flag
;	FSB$V_OUTPUT = 10 		; OUTPUT file flag
	FSB$V_ACTIN = 11		; actual input flag
;	FSB$V_DELZ = 30			; delete file if empty
;	FSB$V_INC = 31			; included file flag
;	FSB$B_CC = 6			; carriage control byte offset
;	FSB$M_OPEN = ^X0020
;	FSB$M_EOF = ^X0002
;	FSB$M_EOLN = ^X0004
;	FSB$M_GET = ^X0008
;	FSB$M_PRMT = ^X0200
;	FSB$M_PUT = ^X00000080
;	FSB$M_TXT = ^X0010
;	FSB$M_RDLN = ^X0001
;	FSB$M_DIR = ^X00000040
;	FSB$M_INT = ^X00000100
;	FSB$M_OUTPUT = ^X0400
;	FSB$M_ACTIN = ^X0800
;	FSB$M_DELZ = ^X40000000
;	FSB$M_INC = ^X80000000
;	FSB$L_CNT = 16			; line count (textfiles)
;	FSB$L_INC = 20			; %INCLUDE block address
;	FSB$L_LIM = 12			; linelimit
	FSB$L_LST = 8			; last word offset
;	FSB$L_PFSB = 20			; related file FSB for prompting
					; for INPUT, has address of OUTPUT FSB
					; for OUTPUT, has address of INPUT FSB
					; (shares storage with include address
					; and direct access record
					; buffer address
;	FSB$L_REC = 20			; record buffer address for
					; direct access (shares storage
					; with include address and related
					; file FSB)
	FSB$L_STA = 4			; status word offset
;
; Character constants
;
;	TAB = ^X09
	SPACE = ^X20
	DOLLAR = ^X24
;	FORMFEED = ^XC
;	STAR = ^X2A
	PLUS = ^X2B
	MINUS = ^X2D
	POINT = ^X2E
	ZERO = ^X30
;	ONE = ^X31
	EIGHT = ^X38
	NINE = ^X39
	AA = ^X41
	DD = ^X44
	EE = ^X45
        ZZ = ^X5A
	UNDERSCORE = ^X5F
	AA_SMALL = ^X61
	ZZ_SMALL = ^X7A
;
	MAX10 = 214748364
	MAXNEG = ^X80000000
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*    PAS$GETBIN    *
;	*                  *
;	********************
;
; Gets the next record from a (binary) file
;
; Argument offsets
;
;	AP				; number of arguments (1)
	FSB_DISP = 04			; FSB address
;
	.ENTRY	PAS$GETBIN,^M<R7>
	ADDL3	FSB_DISP(AP),#FSB$C_BLN,R7 ; R7 = address of RAB
	CALLG	(AP),G^PAS$READOK
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R7); make sure sequential
	CALLG	(AP),G^PAS$ACTUALGET	; get for call to GET
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*    PAS$GETTXT    *
;	*                  *
;	********************
;
; Advances the file pointer and sets the status word as required
; for textfiles.
;
; Argument offsets
;
;	AP				; number of arguments (1)
	FSB_DISP = 04			; FSB address
;
	.ENTRY	PAS$GETTXT,^M<R6>
	CALLG	(AP),G^PAS$READOK
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	INCL	(R6)
	CALLG	(AP),G^PAS$STATUSUPDAT	; update status word
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*    PAS$READLN    *
;	*                  *
;	********************
;
; Positions the pointer to the last character of the line, clears
; the EOLN flag, and sets the RDLN flag.
;
; Argument offsets
;
;	AP				; number of arguments (1)
	FSB_DISP = 04			; FSB address
;
	.ENTRY	PAS$READLN,^M<R6>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	CALLG	(AP),G^PAS$READOK
	MOVL	FSB$L_LST(R6),(R6)	
	INCL	(R6)			; set pointer to LAST + 1
	CALLG	(AP),G^PAS$STATUSUPDAT
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*  PAS$READCHAR    *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP				; number of arguments (1)
	FSB_DISP = 04			; FSB address
	VAR_DISP = 08			; variable address
;
	.ENTRY	PAS$READCHAR,^M<R6>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	PUSHL	R6
	CALLS	#1,G^PAS$READOK
;
; Store the character and increment pointer
;
	MOVB	@(R6),@VAR_DISP(AP)
	INCL	(R6)
	PUSHL	R6
	CALLS	#1,G^PAS$STATUSUPDAT
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$READSTR    *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP				; number of arguments (3)
	FSB_DISP = 04			; FSB address
	STR_DISP = 08			; string address
	LEN_DISP = 12			; string length (by value)
;
	.ENTRY	PAS$READSTR,^M<R2,R3,R4,R5,R6>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	BBC	#FSB$V_EOLN,FSB$L_STA(R6),100$; if EOLN = TRUE,
	PUSHL	R6			; go to next line
	CALLS	#1,G^PAS$READLN
 100$:
	PUSHL	R6
	CALLS	#1,G^PAS$READOK
	SUBL3	(R6),FSB$L_LST(R6),R0	; R0 = remaining length
	MOVC5	R0,@(R6),#SPACE,LEN_DISP(AP),@STR_DISP(AP)
	MOVL	R1,(R6)			; store new pointer
	PUSHL	R6
	CALLS	#1,G^PAS$STATUSUPDAT
	RET
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$READSCAL   *
;	*                  *
;	********************
;
; Reads a scalar value from the character file. Lower case letters are
; tranlated into upper case letters. If the name can not be found a
; runtime error occurs.
;
; Argument offsets
;
;	AP				; number of arguments (4)
	FSB_DISP = 04			; FSB address
	SCA_DISP = 08			; scalar address
	NAM_DISP = 12	 		; name list address
	MAX_DISP = 16			; maximum scalar value.
					; The name list is 'NAMELEN' times
					; the maximum scalar value bytes long
;
; Constants
;
	MAXNAM = 31			; maximum scalar name size (in bytes).
;                                         this definition must match 'alfaleng'
;                                         in the compiler.
        NAMELEN = MAXNAM + 1            ; size in bytes of entry in name list
;
; The scalar translation table
;
SCALTRANSTABLE:
	.BYTE	0[^X23 - ^X0 + ^X1]
	.BYTE	DOLLAR
	.BYTE	0[^X2F - ^X25 + ^X1]
	.BYTE	^X30, ^X31, ^X32, ^X33, ^X34, ^X35, -
		^X36, ^X37, ^X38, ^X39
	.BYTE	0[^X40 - ^X3A + ^X1]
	.BYTE	^X41, ^X42, ^X43, ^X44, ^X45, -
		^X46, ^X47, ^X48, ^X49, ^X4A, -
		^X4B, ^X4C, ^X4D, ^X4E, ^X4F, -
		^X50, ^X51, ^X52, ^X53, ^X54, -
		^X55, ^X56, ^X57, ^X58, ^X59, -
		^X5A
	.BYTE	0,0,0,0,UNDERSCORE,0
	.BYTE	^X41, ^X42, ^X43, ^X44, ^X45, -
		^X46, ^X47, ^X48, ^X49, ^X4A, -
		^X4B, ^X4C, ^X4D, ^X4E, ^X4F, -
		^X50, ^X51, ^X52, ^X53, ^X54, -
		^X55, ^X56, ^X57, ^X58, ^X59, -
		^X5A
	.BYTE	0[^X7F - ^X7B + ^X1]
	.BYTE	0[^X7F]

	.ENTRY	PAS$READSCAL,^M<R2,R3,R4,R5,R6,R7,R8>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	MOVL	R6,R2			; for PAS$BLANK_R3
	JSB	G^PAS$BLANK_R3		; skip leading blanks
					; returns next address in R1
;
; Check if first character is a letter
;
	CMPB	(R1),#AA
	BLSS	900$			; error
	CMPB	(R1),#ZZ
	BLEQ	110$			; ok
	CMPB	(R1),#ZZ_SMALL
	BGTR	900$			; error
	CMPB	(R1),#AA_SMALL
	BLSS	900$			; error
;
; Ok, lets read and translate the string
;
  110$:
	SUBL3	R1,FSB$L_LST(R6),R0
	INCL	R0			; R0 = # of characters left in line
	SUBL2	R0,SP			; make room for translated string
					; on stack
	MOVTUC	R0,(R1),#0,SCALTRANSTABLE,R0,(SP)
;
; Update the FSB
;
	MOVL	R1,(R6)			; update pointer
	PUSHL	R6
	CALLS	#1,G^PAS$STATUSUPDAT
;
; Try to find a match and store the value
;
	SUBL2	SP,R5			; R5 = # of characters translated
	CMPL	R5,#MAXNAM		; compare only first maxnam bytes
	BLEQ	115$
	MOVL	#MAXNAM,R5
  115$:
	MULL3	#NAMELEN,MAX_DISP(AP),R4; R4 = table offset of current string
	CLRL	R8			; R8 will equal 1 if unique inital substring
  120$:
	CMPC5	#NAMELEN,@NAM_DISP(AP)[R4],#SPACE,R5,(SP)
	BEQL	199$			; exit, found an exact  match, search no further
	TSTW	R2			; did we match full input string?
	BNEQ	125$
	INCL	R8			; R8 := 1 if first initial substring match
	MOVL	R4,R7			; preserve offset
  125$:
	SUBL2	#NAMELEN,R4		; R4 = offset of next string to try
	BGEQ	120$
	DECL	R8			; no exact match, was there a unique initial substring match?
	BNEQ	900$			;   NEQ: no, error
	MOVL	R7,R4			; yes, set up table offset
;
; Store value and exit
;
  199$:
	DIVL2	#NAMELEN,R4		; convert offset to index
	CMPL	MAX_DISP(AP),#256	; store byte or word?
	BGTR	201$
	MOVB	R4,@SCA_DISP(AP)	; store byte
	BRB	202$
  201$:
	MOVW	R4,@SCA_DISP(AP)	; store word
  202$:
	RET
;
; No match found, input conversion error
;
  900$:
	MOVZWL	#^X8394,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R6),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R6)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;       *   PAS$READINT    *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP				; number of arguments
	FSB_DISP = 04			; FSB address
	VAR_DISP = 08			; variable address
; Descriptor offsets
	RESULT = -12			; offset of result
	LENGTH = -8			; offset of length
	CLASS = -6			; offset of class and type
	ADDR = -4			; offset of address
;
	.ENTRY	PAS$READINT,^M<R2,R3,R4,R6>
	MOVL	FSB_DISP(AP),R6		; R6 = address of FSB
	MOVL	R6,R2			; R2 needed for PAS$BLANK_R3
	JSB	G^PAS$BLANK_R3		; skip leading blanks
					; returns R1 as address of byte 
	CLRL	R0			; set counter
	CLRL	R2			; set sum register
        CLRL	R4			; clear extract register
	MOVL	#1,R3			; set sign flag
	PUSHL	R1			; store address of string in descriptor
	CMPB	(R1),#PLUS		; plus?
	BNEQU	100$
	INCL    R0
	INCL	R1
	BRB	110$
 100$:					; minus?
	CMPB	(R1),#MINUS
	BNEQU	110$
	MOVL	#-1,R3			; set sign flag
	INCL	R0
	INCL	R1
 110$:					; process integer
	SUBB3	#ZERO,(R1),R4		; R4 = integer value of digit
	BLSS	120$
	CMPB	(R1),#NINE
	BGTR	120$			; branch if not digit
	CMPL	R2,#MAX10		; check for out of range
	BLSS	111$
	BGTR	900$
	CMPB	(R1),#EIGHT
	BGTR	900$
	BLSS	111$
	TSTL	R3			; check for largest negative
	BGEQ	900$
	MOVL	#MAXNEG,R2
	BRB	112$
111$:
	MULL2	#10,R2
	ADDL2	R4,R2			; R2 = new sum
112$:
	INCL	R0			; increment counter
	INCL	R1			; increment address
	BRB	110$			; loop if more digits
120$:					; read until not digit
	TSTL	R0			; test for no digits read
	BEQL	900$			; conversion error
	CMPL	R0,#10			; check for excess digits
	BGTR	900$
	PUSHL 	R0			; store length of descriptor
	CLRL	-(SP)			; clear a longword for the result
	PUSHL	SP			; pass the address to store the result
	PUSHAB	LENGTH(FP)		; pass the address of the descriptor
	CALLS	#2,G^OTS$CVT_TI_L	; call conversion routine
	BLBC	R0,900$			; if error, output message
	MOVL	(SP)+,@VAR_DISP(AP)	; store integer
	MOVL	R1,(R6)			; restore pointer address
	PUSHL	R6
	CALLS	#1,G^PAS$STATUSUPDAT	; update status block
	RET
;
; No match found, input conversion error
;
  900$:
	MOVZWL	#^X8394,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R6),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R6)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$READREAL   *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP				; number of arguments (2)
	FSB_DISP = 04			; FSB address
	VAR_DISP = 08			; variable address
;
	.ENTRY	PAS$READREAL,^M<R2,R3,R4>
	MOVL	FSB_DISP(AP),R2		; R2 = address of FSB
	JSB	G^PAS$BLANK_R3		; skip leading blanks
					; returns located byte in R1
	MOVL	R1,R0			; save starting address
					; check for plus
	CMPB	(R1),#PLUS
	BNEQ	210$
	INCL	R1
	BRB	220$
  210$:					; check for minus if not plus
	CMPB	(R1),#MINUS
	BNEQ	220$
	INCL	R1
  220$:					; count integer part
	CMPB	(R1),#ZERO
	BLSS	230$
	CMPB	(R1),#NINE
	BGTR	230$
	INCL	R1
	BRB	220$			; loop
  230$:					; count decimal point
	CMPB	(R1),#POINT
	BNEQ	250$
	INCL	R1
  240$:					; count decimal part
	CMPB	(R1),#ZERO
	BLSS	250$
	CMPB	(R1),#NINE
	BGTR	250$
	INCL	R1
	BRB	240$			; loop
  250$:					; check for 'E' 
	CMPB	(R1),#EE
	beql	251$
	cmpb	(r1),#^a'e'
	BNEQ	280$			; done if no exponent
  251$:					; found exponent
	INCL	R1
  					; check sign
	CMPB	(R1),#PLUS
	BNEQ	260$
	INCL	R1
	BRB	270$
  260$:					; check minus if not plus
	CMPB	(R1),#MINUS
	BNEQ	270$
	INCL	R1
  270$:					; two digit exponent
	CMPB	(R1),#ZERO
	BLSS	280$
	CMPB	(R1),#NINE
	BGTR	280$
	INCL	R1
	CMPB	(R1),#ZERO
	BLSS	280$
	CMPB	(R1),#NINE
	BGTR	280$
	INCL	R1
  280$:					; finished with number
	SUBL3	R0,R1,R3		; R3 = length
	MOVL	R1,@FSB_DISP(AP)	; update file pointer
	TSTL	R3
	BEQL	900$			; branch if conversion error
;
; Make room for value on stack and convert input
;
	SUBL2	#8,SP
	MOVL	SP,R4			; R4 = address of double result
	PUSHL	R3			; length
	PUSHL	R4			; value address
	PUSHL	R0			; string address
	CALLS	#3,G^PAS$CNV_IN_DEFG
	BLBC	R0,900$			; branch if error
	CVTDF	(R4),@VAR_DISP(AP)	; store read number
	PUSHL	FSB_DISP(AP)
	CALLS	#1,G^PAS$STATUSUPDAT	; update status block
	RET
;
; Input conversion error
;
  900$:
	MOVZWL	#^X8394,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R2),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R2)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*   PAS$READDOUB   *
;	*                  *
;	********************
;
; Argument offsets
;
;	AP				; number of arguments (2)
	FSB_DISP = 04			; FSB address
	VAR_DISP = 08			; variable address
;
	.ENTRY	PAS$READDOUB,^M<R2,R3>
	MOVL	FSB_DISP(AP),R2		; R2 = address of FSB
	JSB	G^PAS$BLANK_R3		; skip leading blanks
					; R1 = located address
	MOVL	R1,R0			; save starting address
;
; Check for plus
;
	CMPB	(R1),#PLUS
	BNEQ	210$
	INCL	R1
	BRB	220$
  210$:					; check for minus if not plus
	CMPB	(R1),#MINUS
	BNEQ	220$
	INCL	R1
  220$:					; count integer part
	CMPB	(R1),#ZERO
	BLSS	230$
	CMPB	(R1),#NINE
	BGTR	230$
	INCL	R1
	BRB	220$			; loop
  230$:					; count decimal point
	CMPB	(R1),#POINT
	BNEQ	250$
	INCL	R1
  240$:					; count decimal part
	CMPB	(R1),#ZERO
	BLSS	250$
	CMPB	(R1),#NINE
	BGTR	250$
	INCL	R1
	BRB	240$			; loop
  250$:					; check for 'D' or 'E'
	CMPB	(R1),#DD
	BEQL	251$
	cmpb	(r1),#^a'd'
	beql	251$
	CMPB	(R1),#EE
	beql	251$
	cmpb	(r1),#^a'e'
	BNEQ	280$			; done if no exponent
  251$:					; found exponent
	INCL	R1
  					; check sign
	CMPB	(R1),#PLUS
	BNEQ	260$
	INCL	R1
	BRB	270$
  260$:					; check minus if not plus
	CMPB	(R1),#MINUS
	BNEQ	270$
	INCL	R1
  270$:					; two digit exponent
	CMPB	(R1),#ZERO
	BLSS	280$
	CMPB	(R1),#NINE
	BGTR	280$
	INCL	R1
	CMPB	(R1),#ZERO
	BLSS	280$
	CMPB	(R1),#NINE
	BGTR	280$
	INCL	R1
  280$:					; finished with number
	SUBL3	R0,R1,R3		; R3 = length
	MOVL	R1,@FSB_DISP(AP)	; update file pointer
	TSTL	R3
	BEQL	900$			; branch if conversion error
;
; Convert input
;
	PUSHL	R3			; length
	PUSHL	VAR_DISP(AP)		; variable address
	PUSHL	R0			; string address
	CALLS	#3,G^PAS$CNV_IN_DEFG
	BLBC	R0,900$			; branch if error
	PUSHL	FSB_DISP(AP)
	CALLS	#1,G^PAS$STATUSUPDAT	; update status block
	RET
;
; Input conversion error
;
  900$:
	MOVZWL	#^X8394,-(SP)
	MOVZBL	<FSB$C_BLN+RAB$C_BLN+FAB$B_FNS>(R2),-(SP)
	PUSHL	<FSB$C_BLN+RAB$C_BLN+FAB$L_FNA>(R2)
	CALLS	#3,G^PAS$IOERROR
;
;
	.PSECT	_PAS$CODE,		PIC,EXE,SHR,NOWRT
;
;	********************
;	*                  *
;	*  PAS$CNV_IN_DEFG *
;       *                  *
;	********************
;
; Converts a character string representing a real or double precission
; value into a double precission value
;
; Argument offsets
;
;	AP				; number of arguments (3)
	BUF_DISP = 04			; buffer address
	VAR_DISP = 08			; variable address (of quadword)
	LEN_DISP = 12			; string length (by value)
;
	.ENTRY	PAS$CNV_IN_DEFG,^M<>
;
; Make room for descriptor on stack
;
	SUBL2	#DSC$C_S_BLN,SP
	MOVL	SP,R1			; R1 = address of descriptor
	MOVL	BUF_DISP(AP),DSC$A_POINTER(R1); string address
	MOVW	LEN_DISP(AP),DSC$W_LENGTH(R1); string length
;
; Convert the value
;
	PUSHL	#0			; zero digits in fraction
	PUSHL	VAR_DISP(AP)		; variable address
	PUSHL	R1			; descriptor address
	CALLS	#3,G^FOR$CNV_IN_DEFG
	RET
;
;
;
	.END
