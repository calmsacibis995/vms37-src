 ;
 ;	Command language interpreter command table structures
 ;
 ; IDENT	V03-015
 ;

 ;
 ;****************************************************************************
 ;*									    *
 ;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
 ;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
 ;*  ALL RIGHTS RESERVED.						    *
 ;* 									    *
 ;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
 ;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
 ;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
 ;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
 ;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
 ;*  TRANSFERRED.							    *
 ;* 									    *
 ;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
 ;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
 ;*  CORPORATION.							    *
 ;* 									    *
 ;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
 ;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
 ;* 									    *
 ;*									    *
 ;****************************************************************************
 ;

 ;++
 ; FACILITY:  DCL & MCR Command language interpreters
 ;
 ; ABSTRACT:
 ;
 ;	These are the command table structure definitions
 ;	which describe the generic command table format used
 ;	by the DCL and MCR command interpreters.
 ;
 ; ENVIRONMENT:
 ;
 ;	VAX/VMS operating system. supervisor mode.
 ;
 ; AUTHOR:  Tim Halvorsen, Feb 1980
 ;
 ; Modified by:
 ;
 ;	V015	DWT0029		David Thiel	09-Feb-1982
 ;		Add MCRIGNORE bit to CHG block for MCR.
 ;
 ;	V014	DWT0024		David Thiel	29-Jan-1982
 ;		Add MCRIGNORE and MCROPTDLM bits to
 ;		ENT block for MCR.
 ;
 ;	V013	PCG0002		Peter George	19-Jan-1982
 ;		Increment table level to 5.
 ;
 ;	V012	TMH0012		Tim Halvorsen	17-Nov-1981
 ;		Remove DCL specific structures to new DCLDEF.MDL file.
 ;
 ;	V011	TMH0011		Tim Halvorsen	08-Nov-1981
 ;		Add bit indicating if terminal is detached or not.
 ;		Add bit indicating that implied automatic logout should
 ;		occur when we next attempt to read a command line from
 ;		the input stream (for SPAWN command).
 ;		Add word to contain channel to re-attach mailbox.
 ;		Remove obsolete USRDET and GOEOF flags from PRC area.
 ;		Add SPWN and CTX structures for SPAWN/ATTACH commands.
 ;
 ;	V010	PCG0001		Peter George	29-Oct-1981
 ;		Add DCL and MCR data structures.
 ;
 ;	V009	BLS0089		Benn Schreiber	15-Oct-1981
 ;		Add cli field and spares to vec.  tables level is now 4
 ;		Add mcrparse flag to cmd flags
 ;
 ;	V008	TMH0008		Tim Halvorsen	31-Aug-1981
 ;		Add cells for SPAWN and ATTACH commands.
 ;
 ;	V007	TMH0007		Tim Halvorsen	25-Aug-1981
 ;		Add ENT$C_RESTOFLINE as value type which indicates that
 ;		the rest of the line should be gobbled as the value.
 ;		Add cell to hold the qualifier number which caused the
 ;		first command syntax transition.  This is for the GETOPT
 ;		callback used by the SET and SHOW commands for compatibility.
 ;		Re-number the value type codes to start at 1, rather than 0,
 ;		so that zero can be used as the default (STRING).
 ;
 ;	V006	TMH0006		Tim Halvorsen	13-Jun-1981
 ;		Document format of symbol table values
 ;
 ;	V005	TMH0005		Tim Halvorsen	27-Apr-1981
 ;		Add PRC_L_INDCLOCK, and change meaning of PRC_L_INDEPTH.
 ;		Remove obsolete QUA and PRM structures.
 ;		Remove PRC_L_CLIWRK0-3, and add PRC_L_PPFLIST.
 ;		Increase size of NAM block to account for new extensions.
 ;
 ;	V004	TMH0004		Tim Halvorsen	26-Mar-1981
 ;		Add PRD_T_OUTDVI field for batch job login initialization.
 ;
 ;	V003	TMH0003		Tim Halvorsen	11-Feb-1981
 ;		Add flag to mark that we are within the comment
 ;		string during symbol substitution, to avoid issuing
 ;		error messages during substitution in comments.
 ;		Add 3 cells to WRK to support caller callback entry
 ;		points during parsing.  Add pointer into expansion
 ;		buffer (rather than R9).  Add pointer into expansion
 ;		buffer which points to the current token being parsed
 ;		for error reporting (rather than R6).
 ;		Remove unused cells CMDOUT, IOSB and flag IMCHNG.
 ;		Rename SYM_B_NESTLEVEL to SYM_B_UNIQUEPT
 ;		Add UIC to list of value types.
 ;
 ;	V002	TMH0002		Tim Halvorsen	03-Feb-1981
 ;		Add flag to mark input record substitution pass
 ;		and flag to prevent upcasing during GETCHAR.
 ;
 ;	V001	TMH0001		Tim Halvorsen	14-Nov-1980
 ;		Add symbol for length of tables vector area.
 ;--
 
 ;
 ;	Note that the term "SRO" stands for self-relative offset.
 ;	The actual address is computed by adding the signed contents
 ;	of the field to the address of the structure.
 ;
 ;	If the offset is zero, then there is no associated data.
 ;
 

 ;
 ;	DEFINE VECTOR AT FRONT OF COMMAND TABLES DESCRIBING
 ;	OFFSETS INTO THE SECTION FOR VARIOUS TABLES.
 ;

 	.MACRO	VECDEF,$GBL

 	$DEFINI	VEC,$GBL

 $DEF	VEC_L_IMAGETBL	.BLKL		; OFFSET TO IMAGE TABLE
 $DEF	VEC_L_PROMPTBL	.BLKL		; OFFSET TO PROMPT TABLE
 $DEF	VEC_L_QUALTBL	.BLKL		; OFFSET TO QUALIFIER TABLE
 $DEF	VEC_L_VERBTBL	.BLKL		; OFFSET TO BUILT-IN VERB TABLE
 $DEF	VEC_L_VERBEND	.BLKL		; OFFSET TO END OF VERBTBL
 $DEF	VEC_L_USRCMD	.BLKL		; OFFSET TO USER VERB TABLE
 $DEF	VEC_L_USREND	.BLKL		; OFFSET TO END OF USER VERB TABLE
 $DEF	VEC_L_COMDPTR	.BLKL		; OFFSET TO BUILT-IN POINTER TABLE
 $DEF	VEC_L_USERPTR	.BLKL		; OFFSET TO USER POINTER TABLE
 $DEF	VEC_L_FREE	.BLKL		; OFFSET TO NEXT FREE BYTE
 $EQU	VEC_C_STRLVL	5		; CURRENT STRUCTURE LEVEL
 $DEF	VEC_B_STRLVL	.BLKB		; TABLE STRUCTURE LEVEL
 $DEF	VEC_B_PROMPTMAX	.BLKB		; MAXIMUM SIZE OF ANY PROMPT STRING
 $DEF	VEC_C_LENGTH3
 $DEF	VEC_K_LENGTH3			; LENGTH OF STR LEVEL 3 AND BEFORE VEC
 $EQU	VEC_C_DCL	0		; TABLES ARE FOR DCL
 $EQU	VEC_C_MCR	1		; TABLES ARE FOR MCR
 $DEF	VEC_B_CLI	.BLKB		; CLI TYPE
 				 			; SPARE BYTE
 			.BLKB	1
 $DEF	VEC_W_SIZE	.BLKW		; SIZE IN BYTES OF VECTOR AREA
 				 			; SPARE
 			.BLKW	1
 				 			; SPARES
 			.BLKL	3
 $DEF	VEC_C_LENGTH

 $DEF	VEC_K_LENGTH			; LENGTH OF VECTOR AREA
 	$DEFEND	VEC,$GBL,DEF

 	.ENDM	VECDEF
 
 ;
 ;	DEFINE COMMAND DESCRIPTOR BLOCK
 ;

 	.MACRO	CMDDEF,$GBL

 	$DEFINI	CMD,$GBL

 $DEF	CMD_B_SIZE	.BLKB		; SIZE OF COMMAND DESCRIPTOR BLOCK
 $DEF	CMD_B_VERBTYP	.BLKB		; VERB GENERIC TYPE
 $EQU	CMD_V_MINPARM	0		; MINIMUM NUMBER OF PARAMETERS REQUIRED
 $EQU	CMD_S_MINPARM	4
 $EQU	CMD_V_MAXPARM	4		; MAXIMUM NUMBER OF PARAMETERS ALLOWED
 $EQU	CMD_S_MAXPARM	4
 $DEF	CMD_B_PARMCNT	.BLKB		; MIN/MAX PARAMETER COUNTS
 $EQU	CMD_V_ABREV	0		; COMMAND MAY BE ABBREVIATED NON-UNIQUELY
 $EQU	CMD_M_ABREV	1
					; TO A SINGLE CHARACTER
 $EQU	CMD_V_NOSTAT	1		; COMMAND DOES NOT RETURN VALID STATUS
 $EQU	CMD_M_NOSTAT	2
 $EQU	CMD_V_FOREIGN	2		; FOREIGN COMMAND - NO PARSING IS DONE
 $EQU	CMD_M_FOREIGN	4
 $EQU	CMD_V_IMMED	3		; COMMAND IS IMMEDIATELY DISPATCHED W/O PARSING
 $EQU	CMD_M_IMMED	8
 $EQU	CMD_V_MCRPARSE	4		; COMMAND IS MCR STYLE COMMAND (OUT=IN)
 $EQU	CMD_M_MCRPARSE	16
					; (THIS FLAG ONLY EXAMINED BY MCR CLI)
 $DEF	CMD_B_FLAGS	.BLKB		; COMMAND FLAGS
 $DEF	CMD_W_IMAGE	.BLKW		; SRO TO ASCIC IMAGE NAME
 $DEF	CMD_W_QUALS	.BLKW		; SRO TO FIRST NONPOSITIONAL ENTITY
 $DEF	CMD_W_PARMS	.BLKW		; SRO TO FIRST POSITIONAL ENTITY
 $DEF	CMD_W_OUTPUTS	.BLKW		; SRO TO LIST OF "OUTPUT" ENTITIES
 $DEF	CMD_W_MUTEXSET	.BLKW		; SRO TO MUTUAL EXCLUSION SET
 $DEF	CMD_W_IMPSET	.BLKW		; SRO TO IMPLICATION SET
 $DEF	CMD_C_LENGTH
 ;
 ; OUTPUT LIST FORMAT:
 ;
 ; FIRST BYTE CONTAINS COUNT OF ENTRIES IN LIST EACH ENTRY IS ONE BYTE,
 ; SIGNED, DESCRIBING THAT "OUTPUT NUMBER".  NEGATIVE VALUES INDICATE THE
 ; OUTPUT IS A PARAMETER AND THE ABS(VALUE) IS THE PARAMETER NUMBER.
 ; POSITIVE VALUES INDICATE THE OUTPUT IS A QUALIFIER AND THE VALUE IS A
 ; QUALIFIER NUMBER.
 ;
 ; QUAL IS (0:MAXQUALS-1),PARM IS (MAXQUALS:255)
 ;
 $EQU	CMD_C_MAXPARMS	8		; MAXIMUM POSSIBLE PARAMETERS
 $EQU	CMD_C_MAXQUALS	248		; MAXIMUM POSSIBLE QUALIFIERS (256-8)

 $DEF	CMD_K_LENGTH			; LENGTH OF FIXED PORTION
 	$DEFEND	CMD,$GBL,DEF

 	.ENDM	CMDDEF
 
 ;
 ;	DEFINE ENTITY DESCRIPTOR BLOCK
 ;

 	.MACRO	ENTDEF,$GBL

 	$DEFINI	ENT,$GBL

 $DEF	ENT_B_NEXT	.BLKB		; OFFSET TO NEXT BLOCK IN CHAIN
 $DEF	ENT_B_SIZE	.BLKB		; SIZE OF THIS BLOCK IN BYTES
 $EQU	ENT_C_PARAMETER	0		; POSITIONAL VALUE DELIMITED BY SPACE
 $EQU	ENT_C_QUALIFIER	1		; NONPOSITIONAL KEYWORD DELIMITED BY SLASH
 $DEF	ENT_B_TYPE	.BLKB
					; (STARTING AT #1)
 $EQU	ENT_C_INFILE	1		; INPUT FILE SPECIFICATION
 $EQU	ENT_C_OUTFILE	2		; OUTPUT FILE SPECIFICATION
 $EQU	ENT_C_NUMBER	3		; DECIMAL INTEGER NUMBER
 $EQU	ENT_C_PRIVILEGE	4		; PRIVILEGE KEYWORD
 $EQU	ENT_C_DATETIME	5		; DATE/TIME SPECIFICATION
 $EQU	ENT_C_PROTECTION	6		; PROTECTION SPECIFICATION
 $EQU	ENT_C_PROCESS	7		; PROCESS NAME
 $EQU	ENT_C_INLOG	8		; INPUT LOGICAL NAME
 $EQU	ENT_C_OUTLOG	9		; OUTPUT LOGICAL NAME
 $EQU	ENT_C_INSYM	10		; INPUT SYMBOL NAME
 $EQU	ENT_C_OUTSYM	11		; OUTPUT SYMBOL NAME
 $EQU	ENT_C_NODE	12		; NODE NAME
 $EQU	ENT_C_DEVICE	13		; NODE/DEVICE NAME
 $EQU	ENT_C_DIR	14		; NODE/DEVICE/DIRECTORY NAME
 $EQU	ENT_C_UIC	15		; UIC SPECIFICATION
 $EQU	ENT_C_RESTOFLINE	16		; GOBBLE REST OF COMMAND STRING AS VALUE
 		
 $DEF	ENT_B_VALTYPE	.BLKB		; TYPE OF VALUE
 $DEF	ENT_W_NAME			; SRO TO ASCIC ENTITY NAME (USER SPELLING)
 $DEF	ENT_W_NUMBER	.BLKW		; OR, PARAMETER NUMBER (POSITIONAL)
 $DEF	ENT_W_LABEL	.BLKW		; SRO TO ASCIC ENTITY LABEL (FOR PGM USE)
 $DEF	ENT_W_DEFVAL	.BLKW		; SRO TO ASCIC DEFAULT VALUE
 $DEF	ENT_W_SYNTAX	.BLKW		; SRO TO SYNTAX LIST
 				; IF ZERO, ALL VALUES ARE LEGAL
 $DEF	ENT_W_KEYWORDS	.BLKW		; SRO TO VALUE KEYWORD LIST
 $DEF	ENT_W_PROMPT	.BLKW		; SRO TO VALUE PROMPT
 $EQU	ENT_V_FILE	0		; VALUE IS FILE SPECIFICATION
 $EQU	ENT_M_FILE	1
 $EQU	ENT_V_VAL	1		; CAN HAVE A VALUE
 $EQU	ENT_M_VAL	2
 $EQU	ENT_V_NEG	2		; VALUE CAN BE NEGATED
 $EQU	ENT_M_NEG	4
 $EQU	ENT_V_DEFTRUE	3		; TRUE BY DEFAULT
 $EQU	ENT_M_DEFTRUE	8
 $EQU	ENT_V_BATDEF	4		; PRESENT BY DEFAULT IF BATCH JOB
 $EQU	ENT_M_BATDEF	16
 $EQU	ENT_V_VALREQ	5		; VALUE IS REQUIRED
 $EQU	ENT_M_VALREQ	32
 $EQU	ENT_V_LIST	6		; COMMA-SEPARATED LIST OF VALUES ALLOWED
 $EQU	ENT_M_LIST	64
 $EQU	ENT_V_CONCAT	7		; CONCATENATED VALUES ALLOWED
 $EQU	ENT_M_CONCAT	128
 $EQU	ENT_V_IMPCAT	8		; VALUES ARE IMPLICITLY CONCATENATED
 $EQU	ENT_M_IMPCAT	256
 $EQU	ENT_V_VERB	9		; QUALIFIER CAN APPEAR ON COMMAND VERB
 $EQU	ENT_M_VERB	<^X200>
 $EQU	ENT_V_PARM	10		; QUALIFIER CAN APPEAR ON PARAMETER
 $EQU	ENT_M_PARM	<^X400>
 $EQU	ENT_V_MCROPTDLM	11		; VALUE DELIMITER IS OPTIONAL (MCR)
 $EQU	ENT_M_MCROPTDLM	<^X800>
 $EQU	ENT_V_MCRIGNORE	12		; IGNORE THIS ENTITY BLOCK (MCR)
 $EQU	ENT_M_MCRIGNORE	<^X1000>
 $DEF	ENT_L_FLAGS	.BLKL		; ENTITY FLAGS
 $DEF	ENT_C_LENGTH

 $DEF	ENT_K_LENGTH			; LENGTH OF FIXED LENGTH PORTION
 	$DEFEND	ENT,$GBL,DEF

 	.ENDM	ENTDEF
 
 ;
 ;	DEFINE CHANGE LIST STRUCTURE
 ;

 	.MACRO	CHGDEF,$GBL

 	$DEFINI	CHG,$GBL

 $DEF	CHG_B_SIZE	.BLKB		; SIZE OF CHANGE LIST BLOCK
 $EQU	CHG_V_IMAGE	0		; IMAGE CHANGE
 $EQU	CHG_M_IMAGE	1
 $EQU	CHG_V_PARMS	1		; PARAMETER(S) CHANGE
 $EQU	CHG_M_PARMS	2
 $EQU	CHG_V_QUALS	2		; QUALIFIER(S) CHANGE
 $EQU	CHG_M_QUALS	4
 $EQU	CHG_V_MCRIGNORE	3		; IGNORE IF CLI IS MCR
 $EQU	CHG_M_MCRIGNORE	8
 $DEF	CHG_B_FLAGS	.BLKB		; FLAGS
 $DEF	CHG_W_IMAGE	.BLKW		; SRO TO NEW IMAGE
 $EQU	CHG_V_MINPARM	0		; MINIMUM NUMBER OF PARAMETERS REQUIRED
 $EQU	CHG_S_MINPARM	4
 $EQU	CHG_V_MAXPARM	4		; MAXIMUM NUMBER OF PARAMETERS ALLOWED
 $EQU	CHG_S_MAXPARM	4
 $DEF	CHG_B_PARMCNT	.BLKB		; MIN/MAX PARAMETER COUNTS
 $DEF	CHG_W_PARMS	.BLKW		; SRO TO FIRST PARAMETER DESCRIPTOR
 $DEF	CHG_W_QUALS	.BLKW		; SRO TO FIRST QUALIFIER DESCRIPTOR
 $DEF	CHG_C_LENGTH

 $DEF	CHG_K_LENGTH
 	$DEFEND	CHG,$GBL,DEF

 	.ENDM	CHGDEF
