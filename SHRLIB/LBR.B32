 !	LBR 
 !	Version 'V03-000' 
 ! 
 !**************************************************************************** 
 !*									    * 
 !*  COPYRIGHT (c) 1978, 1980, 1982 BY					    * 
 !*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    * 
 !*  ALL RIGHTS RESERVED.						    * 
 !* 									    * 
 !*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   * 
 !*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   * 
 !*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   * 
 !*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   * 
 !*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   * 
 !*  TRANSFERRED.							    * 
 !* 									    * 
 !*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   * 
 !*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   * 
 !*  CORPORATION.							    * 
 !* 									    * 
 !*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   * 
 !*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    * 
 !* 									    * 
 !*									    * 
 !**************************************************************************** 
 ! 
 ! MODIFIED BY: 
 ! 
 !	V02-017		PCG0005		Peter George	07-Jan-1982 
 !		Add flag bit CTX$V_OUTPUTHLP. 
 !		Update major and minor ids. 
 ! 
 !	V02-016		PCG0004		Peter George	10-Dec-1981 
 !		Correct length calculations. 
 ! 
 !	V02-015		PCG0003		Peter George	10-Dec-1981 
 !		Add HPD$L_LENARRAY. 
 ! 
 !	V02-014		RPG0014		Bob Grosso	02-Dec-1981 
 !		Support adjacent allocation of cache header blocks. 
 ! 
 !	V02-013		RPG0013		Bob Grosso	14-Aug-1981 
 !		Support lower case keywords 
 ! 
 !	V02-012		PCG0002		Peter George	10-Aug-1981 
 !		Correct the value of the HLP$C_FACILITY constant. 
 ! 
 !	V02-011		RPG0041		Bob Grosso	30-Jul-1981 
 !		Add sanity code for V3 libs. 
 ! 
 !	V02-010		RPG0038		Bob Grosso	17-Jul-1981 
 !		Add padding in library header. 
 ! 
 !	V02-009		RPG0037		Bob Grosso	18-Jun-1981 
 !		Change lhd$l_*luhrec to lhd$w_*luhrec. 
 ! 
 !	V02-008		RPG0036		Bob Grosso	12-Jun-1981 
 !		Bump minorid for /HIST changes 
 ! 
 !	V02-007		PCG0001		Peter George	08-May-1981 
 !		Add LBR$OUTPUT_HELP definitions. 
 ! 
 !	V02-006		RPG0035		Bob Grosso	20-Apr-1981 
 !		Replace lhd$l_updhis with lhd$w_closerror and lhd$w_spareword. 
 !		Remove luh$c_op_*. 
 ! 
 !	V02-005		RPG0032		Bob Grosso	10-Apr-1981 
 !		More definitions for LUH. 
 ! 
 !	V02-004		RPG0027		Bob Grosso	26-Mar-1981 
 !		Add library update history definition. 
 ! 
 !	V02-003		RPG0017		Bob Grosso	26-Feb-1981 
 !		Add idx$c_rfaplsbyt, the length in an index entry of the 
 !		rfa plus the keyname length byte. 
 !		Add idd$v_varlenidx to flag variable length keyname storage. 
 ! 
 !	V02-002		RPG0011		Bob Grosso	19-Jan-1981 
 !		Add hivbn to context block to record the highest VBN in 
 !		the cache. 
 ! 
 !	V02.01	HJ0003		Herb Jacobs	19-Aug-1980 
 !		Fix syntax of V(field) definition of help flags 
 ! 
 ! Librarian internal context control block 
 ! 
  
 !...$CTXDEF	
  
 MACRO		CTX$W_ISI	= 0,0,16,0%; 			! ISI for library when open 
 MACRO		CTX$W_IFI	= 2,0,16,0%; 			! IFI for library when open 
 MACRO		CTX$L_CTLFLG	= 4,0,32,0%; 		! Control flags 
 			 
 MACRO		CTX$V_LIBOPN	= 4,0,1,0%; 			! Library is open 
 LITERAL	CTX$M_LIBOPN	= 1^1 - 1^0; 
 MACRO		CTX$V_LKPDON	= 4,1,1,0%; 			! Lookup was done 
 LITERAL	CTX$M_LKPDON	= 1^2 - 1^1; 
 MACRO		CTX$V_REPROG	= 4,2,1,0%; 			! Replace in progress 
 LITERAL	CTX$M_REPROG	= 1^3 - 1^2; 
 MACRO		CTX$V_HDRDIRTY	= 4,3,1,0%; 		! Header has been modified 
 LITERAL	CTX$M_HDRDIRTY	= 1^4 - 1^3; 
 MACRO		CTX$V_MHDOUT	= 4,4,1,0%; 			! Module header needs to be written 
 LITERAL	CTX$M_MHDOUT	= 1^5 - 1^4; 
 MACRO		CTX$V_OLDLIB	= 4,5,1,0%; 			! Library is old (VMS R1) format 
 LITERAL	CTX$M_OLDLIB	= 1^6 - 1^5; 
 MACRO		CTX$V_FOUND1	= 4,6,1,0%; 			! Found match in LBR$GET_INDEX 
 LITERAL	CTX$M_FOUND1	= 1^7 - 1^6; 
 MACRO		CTX$V_RONLY	= 4,7,1,0%; 			! Library is read only 
 LITERAL	CTX$M_RONLY	= 1^8 - 1^7; 
 MACRO		CTX$V_OUTPUTHLP	= 4,8,1,0%; 		! LBR$GET_HELP treats "HELP" keyword as normal keyword 
 LITERAL	CTX$M_OUTPUTHLP	= 1^9 - 1^8; 
 					! Only LBR$OUTPUT_HELP sets and clears this flag 
 			
 MACRO		CTX$L_CACHE	= 8,0,32,0%; 			! Listhead of index cache list 
 MACRO		CTX$L_RECRAB	= 12,0,32,0%; 		! RAB address for record I/O 
 MACRO		CTX$L_RPHASHT	= 16,0,32,0%; 		! Pointer to hash table for deleted symbols 
 MACRO		CTX$L_RPLDESC	= 20,0,32,0%; 		! String descriptor for keyname 
 MACRO		CTX$B_RPNEWTXT	= 28,0,0,0%; 		! RFA of new text for replaced key 
 LITERAL	CTX$S_RPNEWTXT	= 6; 
 MACRO		CTX$B_DLTXTRFA	= 34,0,0,0%; 		! RFA of text to delete (replace) 
 LITERAL	CTX$S_DLTXTRFA	= 6; 
 MACRO		CTX$B_EOMODRFA	= 34,0,0,0%; 		! RFA of end of module (VMS R1 library) 
 LITERAL	CTX$S_EOMODRFA	= 6; 
 MACRO		CTX$B_READRFA	= 40,0,0,0%; 		! RFA of next LBR$GET_RECORD 
 LITERAL	CTX$S_READRFA	= 6; 
 MACRO		CTX$L_READBUF	= 46,0,32,0%; 		! Address of internal record buffer 
 MACRO		CTX$L_RDBUFR	= 50,0,32,0%; 		! Address of block buffer 
 MACRO		CTX$L_RDVBN1	= 54,0,32,0%; 		! VBN of first block in buffer 
 MACRO		CTX$L_RDBLKS	= 58,0,32,0%; 		! Number of blocks in the buffer 
 MACRO		CTX$B_NXTPUTRFA	= 62,0,0,0%; 		! RFA for next sequential PUT 
 LITERAL	CTX$S_NXTPUTRFA	= 6; 
 MACRO		CTX$L_HIVBN	= 70,0,32,0%; 			! Highest VBN in cache 
 MACRO		CTX$L_CHDALLSIZ	= 74,0,32,0%; 		! size in bytes left in block for cache header entry allocation 
 MACRO		CTX$L_CHDALLADR	= 78,0,32,0%; 		! address of block for cache header entry allocation 
 LITERAL	
 $EQULST (CTX$C_,GBL,0,1  
 	,(CHDALLBLK,7) 			! Number of blocks for initial allocation 
 	); 
 LITERAL	CTX$C_LENGTH	= 134; 
 LITERAL	CTX$K_LENGTH	= 134; 	 

  
 ! 
 ! Library header (VBN 1 of the library) 
 ! 
  
 !...$LHDDEF	
  
 MACRO		LHD$B_TYPE	= 0,0,8,0%; 			! Type of library 
 MACRO		LHD$B_NINDEX	= 1,0,8,0%; 		! Number of indices 
 MACRO		LHD$L_SANITY	= 4,0,32,0%; 		! ID for sanity check 
 LITERAL	
 $EQULST (LHD$C_,GBL,0,1  
 	,(SANEID,123454321) 		! ID for sanity check 
 	,(SANEID3,233579905) 		! ID for sanity check for V3 libraries 
 	); 
 MACRO		LHD$W_MAJORID	= 8,0,16,0%; 		! Library format level major id 
 MACRO		LHD$W_MINORID	= 10,0,16,0%; 		! Library format level minor id 
 LITERAL	
 $EQULST (LHD$C_,GBL,0,1  
 	,(MAJORID,3) 			! Major id level 
 	,(MINORID,0) 			! Minor id level 
 					!   Changed to 2 for Update History Changes 
 	); 
 MACRO		LHD$T_LBRVER	= 12,0,0,0%; 		! ASCIC version of librarian 
 LITERAL	LHD$S_LBRVER	= 32; 
 					!  that created library 
 MACRO		LHD$L_CREDAT	= 44,0,32,0%; 		! Creation date/time 
 MACRO		LHD$L_UPDTIM	= 52,0,32,0%; 		! Date/time of last update 
 MACRO		LHD$B_MHDUSZ	= 60,0,8,0%; 		! Size in bytes of additional 
 					!  module header data 
 MACRO		LHD$W_IDXBLKF	= 61,0,16,0%; 		! Number of disk blocks in index segment 
 MACRO		LHD$W_CLOSERROR	= 64,0,16,0%; 		! Toggle during library close to trap an interupted write. 
 LITERAL	
 $EQULST (LHD$C_,GBL,0,1  
 	,(CORRUPTED,57005) 			! "%XDEAD" 
 	); 
 MACRO		LHD$W_SPAREWORD	= 66,0,16,0%; 		! Spare 
 MACRO		LHD$L_FREEVBN	= 68,0,32,0%; 		! VBN of 1st deleted block 
 MACRO		LHD$L_FREEBLK	= 72,0,32,0%; 		! Number of deleted blocks 
 MACRO		LHD$B_NEXTRFA	= 76,0,0,0%; 		! Next free spot for data puts 
 LITERAL	LHD$S_NEXTRFA	= 6; 
 MACRO		LHD$L_NEXTVBN	= 82,0,32,0%; 		! Next free VBN for alloc_block 
 MACRO		LHD$L_FREIDXBLK	= 86,0,32,0%; 		! Number of free pre-allocated index blocks 
 MACRO		LHD$L_FREEIDX	= 90,0,32,0%; 		! Listhead for pre-allocated index blocks 
 MACRO		LHD$L_HIPREAL	= 94,0,32,0%; 		! VBN of highest pre-allocated index block 
 MACRO		LHD$L_HIPRUSD	= 98,0,32,0%; 		! VBN of highest pre-allocated block in use 
 MACRO		LHD$L_IDXBLKS	= 102,0,32,0%; 		! Number of index blocks in use 
 MACRO		LHD$L_IDXCNT	= 106,0,32,0%; 		! Number of index entries (total) 
 MACRO		LHD$L_MODCNT	= 110,0,32,0%; 		! Number of entries in index 1 (module names) 
 MACRO		LHD$L_MODHDRS	= 116,0,32,0%; 		! Number of module headers in library 
 MACRO		LHD$L_IDXOVH	= 120,0,32,0%; 		! Number of overhead index pointers 
 MACRO		LHD$W_MAXLUHREC	= 124,0,16,0%; 		! Max number of update history records. 
 					!  If zero then lib won't have history 
 MACRO		LHD$W_NUMLUHREC	= 126,0,16,0%; 		! Count of history records. 
 MACRO		LHD$B_BEGLUHRFA	= 128,0,0,0%; 		! RFA of beginning of history 
 LITERAL	LHD$S_BEGLUHRFA	= 6; 
 MACRO		LHD$B_ENDLUHRFA	= 134,0,0,0%; 		! RFA of end of library update history 
 LITERAL	LHD$S_ENDLUHRFA	= 6; 
 LITERAL	LHD$C_IDXDESC	= 196; 
 LITERAL	LHD$K_IDXDESC	= 196; 				! Start of index descriptors 

  
 ! 
 ! Index descriptors in header 
 ! 
  
 !...$IDDDEF	
  
 MACRO		IDD$W_FLAGS	= 0,0,16,0%; 			! Flags longword 
 			 
 MACRO		IDD$V_ASCII	= 0,0,1,0%; 			! Keys are ASCII if 1 
 LITERAL	IDD$M_ASCII	= 1^1 - 1^0; 
 MACRO		IDD$V_LOCKED	= 0,1,1,0%; 			! Index is locked from modification 
 LITERAL	IDD$M_LOCKED	= 1^2 - 1^1; 
 MACRO		IDD$V_VARLENIDX	= 0,2,1,0%; 		! Index entries have variable length 
 LITERAL	IDD$M_VARLENIDX	= 1^3 - 1^2; 
 MACRO		IDD$V_NOCASECMP	= 0,3,1,0%; 		! Do not upcase match keyword on search compare 
 LITERAL	IDD$M_NOCASECMP	= 1^4 - 1^3; 
 MACRO		IDD$V_NOCASENTR	= 0,4,1,0%; 		! Don't upcase keyword on entry 
 LITERAL	IDD$M_NOCASENTR	= 1^5 - 1^4; 
 MACRO		IDD$V_UPCASNTRY	= 0,5,1,0%; 		! Upcase the index entry when comparing against a match keyword 
 LITERAL	IDD$M_UPCASNTRY	= 1^6 - 1^5; 
 			
 MACRO		IDD$W_KEYLEN	= 2,0,16,0%; 		! Total length of key 
 MACRO		IDD$L_VBN	= 4,0,32,0%; 			! VBN of first block of index 
 LITERAL	IDD$C_LENGTH	= 8; 
 LITERAL	IDD$K_LENGTH	= 8; 	 

  
 ! 
 ! Index block structure 
 ! 
  
 !...$INDEXDEF	
  
 MACRO		INDEX$W_USED	= 0,0,16,0%; 			! Total bytes in use 
 MACRO		INDEX$L_PARENT	= 2,0,32,0%; 		! VBN of parent index 
 LITERAL	INDEX$C_ENTRIES	= 12; 
 LITERAL	INDEX$K_ENTRIES	= 12; 				! Start of index entries 
 LITERAL	
 $EQULST (INDEX$C_,GBL,0,1  
 	,(BLKSIZ,500) 			! Maximum useable index space 
 	); 
 LITERAL	INDEX$C_LENGTH	= 512; 
 LITERAL	INDEX$K_LENGTH	= 512; 				! Length of entire block (512) 

  
 ! 
 ! Entry in an index (binary) 
 ! 
  
 !...$IDXDEF	
  
 MACRO		IDX$B_RFA	= 0,0,0,0%; 			! RFA of text (or index) 
 LITERAL	IDX$S_RFA	= 6; 
 MACRO		IDX$L_VBN	= 0,0,32,0%; 			! VBN of RFA 
 MACRO		IDX$W_OFFSET	= 4,0,16,0%; 		! Offset to byte of RFA 
 LITERAL	IDX$C_LENGTH	= 6; 
 LITERAL	IDX$K_LENGTH	= 6; 	 
 			 
 MACRO		IDX$L_KEYID	= 6,0,32,0%; 			! Binary keyID 
 ! 
 ! Entry in an index (ASCII) 
 ! 
  
 			 
 MACRO		IDX$B_KEYLEN	= 6,0,8,0%; 		! Length of ASCII keyname 
 LITERAL	IDX$C_RFAPLSBYT	= 7; 
 LITERAL	IDX$K_RFAPLSBYT	= 7; 			! Length of rfa plus the length byte 
 MACRO		IDX$T_KEYNAME	= 7,0,0,0%; 		! ASCII keyname 

  
 ! 
 ! Format of RFA disk pointer 
 ! 
  
 !...$RFADEF	
  
 MACRO		RFA$L_VBN	= 0,0,32,0%; 			! Virtual block number in file 
 MACRO		RFA$W_OFFSET	= 4,0,16,0%; 		! Byte offset within block 
 LITERAL	
 $EQULST (RFA$C_,GBL,0,1  
 	,(INDEX,65535) 			! Offset = FFFF indicate index 
 	); 
 LITERAL	RFA$C_LENGTH	= 6; 
 LITERAL	RFA$K_LENGTH	= 6; 				! Length of RFA pointer 

  
 ! 
 ! Data block structure 
 ! 
 !...$DATADEF	
  
 MACRO		DATA$B_RECS	= 0,0,8,0%; 			! Number of records in this block 
 MACRO		DATA$L_LINK	= 2,0,32,0%; 			! Link to next block 
 LITERAL	DATA$C_DATA	= 6; 
 LITERAL	DATA$K_DATA	= 6; 				! Start of data area 
 LITERAL	DATA$C_LENGTH	= 512; 
 LITERAL	DATA$K_LENGTH	= 512; 				! Length of data block 

  
 ! 
 ! Disk block cache list entry 
 ! 
  
 !...$CACHEDEF	
  
 MACRO		CACHE$L_LINK	= 0,0,32,0%; 			! Link to next entry or 0 
 MACRO		CACHE$L_VBN	= 4,0,32,0%; 			! VBN of index block 
 MACRO		CACHE$L_ADDRESS	= 8,0,32,0%; 		! Address of block in memory 
 MACRO		CACHE$W_FLAGS	= 12,0,16,0%; 			! Flags 
 			 
 MACRO		CACHE$V_DIRTY	= 12,0,1,0%; 			! True if this block modified 
 MACRO		CACHE$V_DATA	= 12,1,1,0%; 			! Data block as opposed to index block 
 			
 LITERAL	CACHE$C_LENGTH	= 14; 
 LITERAL	CACHE$K_LENGTH	= 14; 				! Length of one entry 

  
 ! 
 ! Cache entry for replace key list 
 ! 
 !...$RKBDEF	
  
 MACRO		RKB$L_LINK	= 0,0,32,0%; 			! Link in hash bucket 
 MACRO		RKB$L_INDEX	= 4,0,32,0%; 			! Index number symbol is in 
 MACRO		RKB$L_KEYID	= 8,0,32,0%; 			! ID of key (binary keys) 
 MACRO		RKB$W_KEYLEN	= 12,0,16,0%; 		! Length of keyname (ASCI keys) 
 MACRO		RKB$L_KEYADDR	= 16,0,32,0%; 		! Pointer to KEYNAME 
 MACRO		RKB$T_KEYNAME	= 20,0,0,0%; 		! Start of key name 
 LITERAL	RKB$C_LENGTH	= 20; 
 LITERAL	RKB$K_LENGTH	= 20; 				! Length of fixed part of block 

  
 ! 
 ! Update history list 
 ! 
  
 !...$LUHDEF	
  
 			 
 MACRO		LUH$L_NXTLUHBLK	= 0,0,32,0%; 		! VBN of next block or 0 if last 
 MACRO		LUH$W_SPARE	= 4,0,16,0%; 			! spare word 
 LITERAL	LUH$C_DATA	= 6; 
 LITERAL	LUH$K_DATA	= 6; 				! Begin data area for LUH records 
 LITERAL	LUH$C_LENGTH	= 512; 
 LITERAL	LUH$K_LENGTH	= 512; 				! length of a block for LUH storage 
 			 
 MACRO		LUH$W_RECHDR	= 0,0,16,0%; 		! Mark beginning of new record 
 MACRO		LUH$W_RECLEN	= 2,0,16,0%; 		! Length of update history record 
 LITERAL	LUH$C_RECHDRLEN	= 4; 
 LITERAL	LUH$K_RECHDRLEN	= 4; 			! Size of header field 
 LITERAL	
 $EQULST (LUH$C_,GBL,0,1  
 	,(RECHDRMRK,43962) 			! %X'ABBA' 
 	,(DATFLDLEN,506) 			! (512 - 6) bytes are used for data 
 					! see LBRUSR.MDL for LBR$C_MAXLUHLEN,1024 
 	); 

  
 ! 
 ! Data structures for help processing 
 ! 
  
 !...$HLPDEF	
  
 LITERAL	
 $EQULST (HLP$C_,GBL,0,1  
 	,(MAXRECSIZ,80) 			! Maximum length of help record line 
 	); 
  
 MACRO		HLP$L_HLPFLAGS	= 0,0,32,0%; 		! Flags for help processing 
 MACRO		HLP$W_USERFLAGS	= 0,0,16,0%; 		!   Flags user will see when called to print line 
 			 
 MACRO		HLP$V_UNOHLP	= 0,0,1,0%; 			! No help text was found 
 LITERAL	HLP$M_UNOHLP	= 1^1 - 1^0; 
 MACRO		HLP$V_UKEYLIN	= 0,1,1,0%; 			! Line contains keyname 
 LITERAL	HLP$M_UKEYLIN	= 1^2 - 1^1; 
 MACRO		HLP$V_UOTHINFO	= 0,2,1,0%; 		! Line is part of other info 
 LITERAL	HLP$M_UOTHINFO	= 1^3 - 1^2; 
 			
 MACRO		HLP$W_LBRFLAGS	= 2,0,16,0%; 		!   Flags used internally by help processor 
 			 
 				 
 MACRO		HLP$V_ANYHELP	= 2,8,1,0%; 		! Some help text was found (%X'1000000') 
 LITERAL	HLP$M_ANYHELP	= 1^9 - 1^8; 
 MACRO		HLP$V_HELPHLP	= 2,9,1,0%; 		! Help is for 'HELP'  (%X'2000000') 
 LITERAL	HLP$M_HELPHLP	= 1^10 - 1^9; 
 MACRO		HLP$V_KEYLINE	= 2,10,1,0%; 		! Line contains a key (%X'4000000') 
 LITERAL	HLP$M_KEYLINE	= 1^11 - 1^10; 
 MACRO		HLP$V_QUALINE	= 2,11,1,0%; 		! Line contains a qualifier (%X'8000000') 
 LITERAL	HLP$M_QUALINE	= 1^12 - 1^11; 
 MACRO		HLP$V_QUALHELP	= 2,12,1,0%; 		! Processing "HELP KEY /QUALIFIER" (%X'10000000') 
 LITERAL	HLP$M_QUALHELP	= 1^13 - 1^12; 
 MACRO		HLP$V_HLPFOUND	= 2,13,1,0%; 		! Help text was found (%X'20000000') 
 LITERAL	HLP$M_HLPFOUND	= 1^14 - 1^13; 
 MACRO		HLP$V_ALLHELP	= 2,14,1,0%; 		! "..." was seen (%X'400000000') 
 LITERAL	HLP$M_ALLHELP	= 1^15 - 1^14; 
 			
 MACRO		HLP$L_BUFDESC	= 4,0,32,0%; 		! Buffer descriptor 
 MACRO		HLP$L_CURPTR	= 12,0,32,0%; 		! Pointer into buffer 
 MACRO		HLP$L_NCHARS	= 16,0,32,0%; 		! Number of characters in buffer 
 MACRO		HLP$L_CURLEVEL	= 20,0,32,0%; 		! Current help level 
 MACRO		HLP$L_LASTLEVEL	= 24,0,32,0%; 		! Help level last looked at 
 MACRO		HLP$L_TABINDEX	= 28,0,32,0%; 		! Current tab index 
 MACRO		HLP$L_WIDTH	= 32,0,32,0%; 			! Width of output line 
 MACRO		HLP$L_KEYLIST	= 36,0,32,0%; 		! Address of found keys descriptors 
 MACRO		HLP$L_REALKEYS	= 40,0,32,0%; 		! Number of "real" keys passed 
 MACRO		HLP$L_PMATCH	= 44,0,32,0%; 		! Number of key1 partial matches found 
 MACRO		HLP$B_PMTDESC	= 48,0,0,0%; 		! String descriptor for 1st partial match 
 LITERAL	HLP$S_PMTDESC	= 8; 
 MACRO		HLP$B_PMTRFA	= 56,0,0,0%; 		! RFA of 1st partial match module 
 LITERAL	HLP$S_PMTRFA	= 6; 
 MACRO		HLP$B_KEY2RFA	= 62,0,0,0%; 		! RFA of 1st level 2 key within module 
 LITERAL	HLP$S_KEY2RFA	= 6; 
 MACRO		HLP$T_WILDFLAGS	= 68,0,0,0%; 		! Bitvector of wild flags (64 bits) 
 LITERAL	HLP$S_WILDFLAGS	= 8; 
 MACRO		HLP$L_READSTS	= 76,0,32,0%; 		! Status from last read operation 
 MACRO		HLP$B_READRFA	= 80,0,0,0%; 		! Address of current reading rfa 
 LITERAL	HLP$S_READRFA	= 6; 
 MACRO		HLP$B_LSTKEYRFA	= 86,0,0,0%; 		! RFA of last key found 
 LITERAL	HLP$S_LSTKEYRFA	= 6; 
 LITERAL	HLP$C_SIZE	= 92; 
 LITERAL	HLP$K_SIZE	= 92; 				! Length of block 
  
 LITERAL	
 $EQULST (HLP$C_,GBL,0,1  
 	,(OUTROUT,	1) 			! First parameter 
 	,(OUTWIDTH,	2) 			! Second parameter 
 	,(LINEDESC,	3) 			! Third parameter 
 	,(LIBNAME,	4) 			! Fourth parameter 
 	,(FLAGS,		5) 			! Fifth parameter 
 	,(INROUT,		6) 			! Sixth parameter 
 	,(PARAMS,		6) 			! Number of lbr$output_help parameters 
 	,(INDENT,		2) 			! No. of characters to indent per level 
 	,(MAXKEYS,	10) 			! Maximum number of keys 
 	,(PROMPT,		25) 			! Number of bytes in topic prompts 
 	,(MAXWIDTH,	132) 			! Maximum line width 
 	,(PAGESIZE,	512) 			! Size of a page 
 	,(FACILITY,	7733248) 			! Facility code 118 * 65536 
 	,(LISWIDTH,	80) 			! Default listing width 
 	,(MAXLISWID,	256) 			! Maximum listing width 
 	,(KEYLOGTAB,	2) 			! Width of logical tab for listing keys as found 
 	,(LOGTAB,		11) 			! Width of logical tab 
 	); 
  
 LITERAL	
 $EQULST (HLP$K_,GBL,0,1  
 	,(INFO,		1) 			! Offset to info block pointer 
 	,(LINEWIDTH,	2) 			! Offset to line width 
 	,(USEROUT,	3) 			! Offset to user routine address 
 	,(USERDATA,	4) 			! Offset to user data address 
 	,(KEY1DESC,	5) 			! Offset to key1 descriptor 
 	); 
  

  
 ! 
 ! Help control flags 
 ! 
  
 !...$HCFDEF	
 	 
 			 
 MACRO		HCF$L_USERLIB	= 0,0,32,0%; 		! User library flags 
 MACRO		HCF$L_PROMPT	= 4,0,32,0%; 		! Prompting flags 
 LITERAL	HCF$C_LENGTH	= 8; 
 LITERAL	HCF$K_LENGTH	= 8; 	 
 			 
 			 
 MACRO		HCF$V_CONT	= 0,0,1,0%; 			! Continue with prompting 
 LITERAL	HCF$M_CONT	= 1^1 - 1^0; 
 MACRO		HCF$V_STAY	= 0,1,1,0%; 			! Stay at same prompting level 
 LITERAL	HCF$M_STAY	= 1^2 - 1^1; 
 MACRO		HCF$V_MORE	= 0,2,1,0%; 			! More information is available 
 LITERAL	HCF$M_MORE	= 1^3 - 1^2; 
 MACRO		HCF$V_INFO	= 0,3,1,0%; 			! Some information was printed 
 LITERAL	HCF$M_INFO	= 1^4 - 1^3; 
 MACRO		HCF$V_BACKUP	= 0,4,1,0%; 			! Backing up a prompt level 
 LITERAL	HCF$M_BACKUP	= 1^5 - 1^4; 
 			
 LITERAL	
 $EQULST (HCF$M_,GBL,0,1  
 	,(NOPROMPT,-1) 			! Prompting turned off 
 	); 

  
 ! 
 ! Current library indices 
 ! 
  
 !...$HLIDEF	
 	 
 MACRO		HLI$L_MAININDEX	= 0,0,32,0%; 		! Main library (/LIB) index 
 MACRO		HLI$L_LASTINDEX	= 4,0,32,0%; 		! Last library opened index 
 MACRO		HLI$L_LASTNUMB	= 8,0,32,0%; 		! Last library opened number, relative to 
 					! user specified default libraries 
 LITERAL	HLI$C_LENGTH	= 12; 
 LITERAL	HLI$K_LENGTH	= 12; 	 

  
 ! 
 ! Output driver print data 
 ! 
  
 !...$HPDDEF	
 	 
 			 
 MACRO		HPD$L_SUBPMTPTR	= 0,0,32,0%; 		! Ptr used for filling subprompt buffer 
 MACRO		HPD$L_SUBPMTLEV	= 4,0,32,0%; 		! Current prompt level 
 MACRO		HPD$L_OUTPUTROU	= 8,0,32,0%; 		! User specified output routine 
 MACRO		HPD$L_LENARRAY	= 12,0,32,0%; 		! Address of the keyword length array 
 MACRO		HPD$B_TRUEKEYS	= 16,0,8,0%; 		! Number of help keys 
 MACRO		HPD$B_HELPLEVEL	= 17,0,8,0%; 		! Current key depth 
 MACRO		HPD$B_PRINTFLAG	= 18,0,8,0%; 		! Flags 
 LITERAL	HPD$C_LENGTH	= 19; 
 LITERAL	HPD$K_LENGTH	= 19; 	 
 			 
 			 
 MACRO		HPD$V_INIT	= 0,0,1,0%; 			! Printing initiated 
 LITERAL	HPD$M_INIT	= 1^1 - 1^0; 
 MACRO		HPD$V_ALL	= 0,1,1,0%; 			! Print all information found 
 LITERAL	HPD$M_ALL	= 1^2 - 1^1; 
 MACRO		HPD$V_FOUND	= 0,2,1,0%; 			! Keys successfully found 
 LITERAL	HPD$M_FOUND	= 1^3 - 1^2; 
 			

  
  
 ! 
 ! Old format library information structure 
 ! 
  
 !...$OFLDEF	
  
 MACRO		OFL$L_MNTVBN	= 0,0,32,0%; 		! VBN of start of module name table 
 MACRO		OFL$L_MNTESIZ	= 4,0,32,0%; 		! size of an entry (in bytes) in MNT 
 MACRO		OFL$L_NUMODS	= 8,0,32,0%; 		! Number of modules in MNT 
 MACRO		OFL$L_MNTBLKS	= 12,0,32,0%; 		! Number of blocks in MNT 
 MACRO		OFL$L_MNTEPBLK	= 16,0,32,0%; 		! Number of entries per block 
 MACRO		OFL$L_MNTADR	= 20,0,32,0%; 		! Address of MNT window block 
 MACRO		OFL$L_MNTBLSZ	= 24,0,32,0%; 		! Size of MNT window block 
 MACRO		OFL$L_GSTVBN	= 28,0,32,0%; 		! VBN of start of global symbol table 
 MACRO		OFL$L_GSTESIZ	= 32,0,32,0%; 		! Size of an entry in GST 
 MACRO		OFL$L_NUMSYMS	= 36,0,32,0%; 		! Number of symbols in GST 
 MACRO		OFL$L_GSTBLKS	= 40,0,32,0%; 		! Number of blocks in GST 
 MACRO		OFL$L_GSTEPBLK	= 44,0,32,0%; 		! Number of entries per block 
 MACRO		OFL$L_GSTADR	= 48,0,32,0%; 		! Address of GST window block 
 MACRO		OFL$L_GSTBLSZ	= 52,0,32,0%; 		! Size of GST window block 
 MACRO		OFL$L_WINBVBN	= 56,0,32,0%; 		! VBN of base of current window 
 MACRO		OFL$L_WINTVBN	= 60,0,32,0%; 		! VBN of top of window 
 MACRO		OFL$L_WINBLKS	= 64,0,32,0%; 		! Number of blocks in window 
 ! 
 ! Do not change the order of 'ENT', 'RBN', 'ADR' 
 ! 
 MACRO		OFL$L_TRILENT	= 68,0,32,0%; 		! Trial table entry's number 
 MACRO		OFL$L_TRILRBN	= 72,0,32,0%; 		! within block and relative block 
 					! within window 
 MACRO		OFL$L_TRILADR	= 76,0,32,0%; 		! Pointer to trial entry in table 
 MACRO		OFL$L_LOWENT	= 80,0,32,0%; 		! Lowest possible name entry 
 MACRO		OFL$L_LOWRBN	= 84,0,32,0%; 		! Relative block within window 
 MACRO		OFL$L_LOWADR	= 88,0,32,0%; 		!  and its address within table 
 MACRO		OFL$L_HIENT	= 92,0,32,0%; 			! Highest possible name entry 
 MACRO		OFL$L_HIRBN	= 96,0,32,0%; 			! Relative block number within window 
 MACRO		OFL$L_HIADR	= 100,0,32,0%; 			!  and its address within table 
 LITERAL	OFL$C_LENGTH	= 104; 
 LITERAL	OFL$K_LENGTH	= 104; 	 
  

  
 ! 
 ! Data structure to extract information for either the GST or MNT 
 ! of an old format library 
 ! 
  
 !...$OIBDEF	
  
 MACRO		OIB$L_VBN	= 0,0,32,0%; 			! VBN of start of index 
 MACRO		OIB$L_ESIZ	= 4,0,32,0%; 			! Size of an entry in bytes 
 MACRO		OIB$L_NENTS	= 8,0,32,0%; 			! Number of entries in index 
 MACRO		OIB$L_NBLKS	= 12,0,32,0%; 			! Number of blocks in index 
 MACRO		OIB$L_ENTPBLK	= 16,0,32,0%; 		! Number of entries in a block 
 MACRO		OIB$L_TBLADR	= 20,0,32,0%; 		! Address of window table in memory 
 MACRO		OIB$L_TBLSIZ	= 24,0,32,0%; 		! Size of window table 
 LITERAL	OIB$C_LENGTH	= 28; 
 LITERAL	OIB$K_LENGTH	= 28; 	 
  

  
