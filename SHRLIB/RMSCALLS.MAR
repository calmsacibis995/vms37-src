
;
;	version 'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;

	.MACRO	$CLOSE FAB,ERR,SUC
	$RMSCALL	CLOSE,FAB,ERR,SUC
	.ENDM	$CLOSE

;
;

	.MACRO	$CONNECT RAB,ERR,SUC
	$RMSCALL	CONNECT,RAB,ERR,SUC
	.ENDM	$CONNECT

;
;

	.MACRO	$CREATE FAB,ERR,SUC
	$RMSCALL	CREATE,FAB,ERR,SUC
	.ENDM	$CREATE

;
;

	.MACRO	$DELETE RAB,ERR,SUC
	$RMSCALL	DELETE,RAB,ERR,SUC
	.ENDM	$DELETE

;
;

	.MACRO	$DISCONNECT RAB,ERR,SUC
	$RMSCALL	DISCONNECT,RAB,ERR,SUC
	.ENDM	$DISCONNECT

;
;

	.MACRO	$DISPLAY FAB,ERR,SUC
	$RMSCALL	DISPLAY,FAB,ERR,SUC
	.ENDM	$DISPLAY

;
;

	.MACRO	$ENTER FAB,ERR,SUC
	$RMSCALL	ENTER,FAB,ERR,SUC
	.ENDM	$ENTER

;
;

	.MACRO	$ERASE FAB,ERR,SUC
	$RMSCALL	ERASE,FAB,ERR,SUC
	.ENDM	$ERASE

;
;

	.MACRO	$EXTEND FAB,ERR,SUC
	$RMSCALL	EXTEND,FAB,ERR,SUC
	.ENDM	$EXTEND

;
;

	.MACRO	$FIND RAB,ERR,SUC
	$RMSCALL	FIND,RAB,ERR,SUC
	.ENDM	$FIND

;
;

	.MACRO	$FLUSH RAB,ERR,SUC
	$RMSCALL	FLUSH,RAB,ERR,SUC
	.ENDM	$FLUSH

;
;

	.MACRO	$FREE RAB,ERR,SUC
	$RMSCALL	FREE,RAB,ERR,SUC
	.ENDM	$FREE

;
;

	.MACRO	$GET RAB,ERR,SUC
	$RMSCALL	GET,RAB,ERR,SUC
	.ENDM	$GET

;
;

	.MACRO	$MODIFY FAB,ERR,SUC
	$RMSCALL	MODIFY,FAB,ERR,SUC
	.ENDM	$MODIFY

;
;

	.MACRO	$NXTVOL RAB,ERR,SUC
	$RMSCALL	NXTVOL,RAB,ERR,SUC
	.ENDM	$NXTVOL

;
;

	.MACRO	$OPEN FAB,ERR,SUC
	$RMSCALL	OPEN,FAB,ERR,SUC
	.ENDM	$OPEN

;
;

	.MACRO	$PARSE FAB,ERR,SUC
	$RMSCALL	PARSE,FAB,ERR,SUC
	.ENDM	$PARSE

;
;

	.MACRO	$PUT RAB,ERR,SUC
	$RMSCALL	PUT,RAB,ERR,SUC
	.ENDM	$PUT

;
;

	.MACRO	$READ RAB,ERR,SUC
	$RMSCALL	READ,RAB,ERR,SUC
	.ENDM	$READ

;
;

	.MACRO	$RELEASE RAB,ERR,SUC
	$RMSCALL	RELEASE,RAB,ERR,SUC
	.ENDM	$RELEASE

;
;

	.MACRO	$REMOVE FAB,ERR,SUC
	$RMSCALL	REMOVE,FAB,ERR,SUC
	.ENDM	$REMOVE

;
;

	.MACRO	$RENAME OLDFAB,ERR,SUC,NEWFAB
	$RMSCALLTWO	RENAME,OLDFAB,ERR,SUC,NEWFAB
	.ENDM	$RENAME

;
;

	.MACRO	$REWIND RAB,ERR,SUC
	$RMSCALL	REWIND,RAB,ERR,SUC
	.ENDM	$REWIND

;
;

	.MACRO	$SEARCH FAB,ERR,SUC
	$RMSCALL	SEARCH,FAB,ERR,SUC
	.ENDM	$SEARCH

;
;

	.MACRO	$SPACE RAB,ERR,SUC
	$RMSCALL	SPACE,RAB,ERR,SUC
	.ENDM	$SPACE

;
;

	.MACRO	$TRUNCATE RAB,ERR,SUC
	$RMSCALL	TRUNCATE,RAB,ERR,SUC
	.ENDM	$TRUNCATE

;
;

	.MACRO	$UPDATE RAB,ERR,SUC
	$RMSCALL	UPDATE,RAB,ERR,SUC
	.ENDM	$UPDATE

;
;

	.MACRO	$WAIT RAB
	$RMSCALL	WAIT,RAB
	.ENDM	$WAIT

;
;

	.MACRO	$WRITE RAB,ERR,SUC
	$RMSCALL	WRITE,RAB,ERR,SUC
	.ENDM	$WRITE

;
;
;  rms macro to reserve a buffer
;  (kept in the interest of compatibility only!)
;

	.MACRO	$BUFFER SIZE
	.BLKB	SIZE
	.ENDM	$BUFFER

;
;  no-op of $init for compatibility!
;

	.MACRO	$INIT
	.PRINT				; $init macro not required!;
	.ENDM	$INIT


;

	.NLIST

;
;  $rmscall macro to setup arglist and call the desired routine
;

	.MACRO	$RMSCALL PROC,TAB,ERR,SUC
	.GLOBL	SYS$'PROC
	.IF	B <TAB>
	CALLG	(AP),@#SYS$'PROC
	$$.TMP=0
	.IF	NB <ERR>
	$$.TMP=1
	.ENDC
	.IF	NB <SUC>
	$$.TMP=1
	.ENDC
	.IF	NE $$.TMP
	.ERROR				; tab'= parameter missing;
	.ENDC
	.ENDC

	.IF	NB <TAB>
	$$.TMP1=1
	.IF	NB <SUC>
	PUSHAL	SUC
	$$.TMP1=3
	.ENDC
	.IF	NB <ERR>
	PUSHAL	ERR
	.IF	EQ <$$.TMP1-1>
	$$.TMP1=2
	.ENDC
	.IFF
	.IF	EQ <$$.TMP1-3>
	PUSHL	#0
	.ENDC
	.ENDC
	.NTYPE	$$.TMP2,TAB
	.IF	EQ <<$$.TMP2&^XF0>-^X50>
	PUSHL	TAB
	.IFF
	.IF	EQ <<$$.TMP2&^XF0>-^X10>
	PUSHL	TAB
	.IFF
	PUSHAL	TAB
	.ENDC
	.ENDC
	CALLS	#$$.TMP1,@#SYS$'PROC
	.ENDC
	.ENDM	$RMSCALL
	.LIST


;
;  $rmscalltwo macro to setup arglist and call the desired routine
;

	.MACRO	$RMSCALLTWO PROC,TAB,ERR,SUC,TAB2
	.GLOBL	SYS$'PROC
	.IF	B <TAB>
	CALLG	(AP),SYS$'PROC
	$$.TMP=0
	.IIF	NB <ERR>, $$.TMP=1
	.IIF	NB <SUC>, $$.TMP=1
	.IIF	NB <TAB2>, $$.TMP=1
	.IF	NE $$.TMP
	.ERROR				; tab'= parameter missing;
	.ENDC
	.MEXIT
	.ENDC

;
;NOW KNOW THAT TAB IS THERE!
;

	.IF	B <TAB2>		; must have both pointers
	.ERROR				; missing parameter;
	.MEXIT
	.ENDC
	.NTYPE	$$.TMP2,TAB2
	.IF	EQ <<$$.TMP2&^XF0>-^X50>
	PUSHL	TAB2
	.IFF
	.IF	EQ <<$$.TMP2&^XF0>-^X10>
	PUSHL	TAB2
	.IFF
	PUSHAL	TAB2
	.ENDC
	.ENDC
	.IF	NB <SUC>
	PUSHAL	SUC
	.IFF
	PUSHL	#0
	.ENDC
	.IF	NB <ERR>
	PUSHAL	ERR
	.IFF
	PUSHL	#0
	.ENDC
	.NTYPE	$$.TMP2,TAB
	.IF	EQ <<$$.TMP2&^XF0>-^X50>
	PUSHL	TAB
	.IFF
	.IF	EQ <<$$.TMP2&^XF0>-^X10>
	PUSHL	TAB
	.IFF
	PUSHAL	TAB
	.ENDC
	.ENDC
	CALLS	#4,@#SYS$'PROC
	.ENDM	$RMSCALLTWO
