 ;	$begin	rmsusr,V02-040
 ;
 ;****************************************************************************
 ;*									    *
 ;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
 ;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
 ;*  ALL RIGHTS RESERVED.						    *
 ;* 									    *
 ;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
 ;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
 ;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
 ;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
 ;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
 ;*  TRANSFERRED.							    *
 ;* 									    *
 ;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
 ;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
 ;*  CORPORATION.							    *
 ;* 									    *
 ;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
 ;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
 ;* 									    *
 ;*									    *
 ;****************************************************************************
 ;
 ;	rms user structure definitions
 ;
 ;	Modified By:
 ;
 ;	V02-040	RAS0073		Ron Schaefer		 2-Mar-1982
 ;		Add FAB$B_DSBMSK, to support $TRNLOG translation table
 ;		disable mask support.
 ;
 ;	V02-039	CDS0003		C Saether		 5-Jan-1982
 ;		Add XAB$W_GBC and XAB$W_VERLIMIT to FHC XAB.
 ;		Make NAM$C_MAXRSS and NAM$C_MAXRSSLCL both 252.
 ;
 ;	V02-038 DMW0003		David Michael Walp	21-Jan-82
 ;		Remove NAM$B/L_QUOTED, 17 ANSI "a" character filenames
 ;
 ;	V02-037	KBT0001		Keith B Thompson	 8-Jan-1982
 ;		Remove XAB$B_COMPAT, change XAB$B_STRUCT to XAB$B_PROLOG
 ;		in the key xab and add XAB$B_MTACC to the protection xab
 ;
 ;	V02-036	TMK0001		Todd M. Katz		 8-Jan-1982
 ;		Define NAM$V_IFI and NAM$V_SRCHNMF in the field NAM$L_WCC.
 ;
 ;	V02-035	CDS0002		C Saether		23-Dec-1981
 ;		Add FAB$W_GBC field for global buffer count.
 ;
 ;	V02-034 LJA0002		Laurie Anderson		20-Dec-1981
 ;		Re-inserted NAM$C_BLN_DIRWC as equivalant to NAM$C_BLN
 ;
 ;	V02-033	CDS0001		C Saether		 4-Nov-1981
 ;		Change key xab "structure" field to "struct".
 ;
 ;	V02-032	RAS0040		Ron Schaefer		26-Oct-1981
 ;		Add NAM$V_CNCL_DEV bit for concealed devices and
 ;		NAM$V_ROOT_DIR bit for rooted directories to the
 ;		NAM$L_FNB field.
 ;
 ;	V02-031	PSK0004		Paulina S Knibbe	19-Oct-1981
 ;		Change the XAB$$B_CMP_BITS to COMPAT and insert the
 ;		constants that field can take.
 ;
 ;	V02-030	PSK0003		Paulina S Knibbe	14-Sep-1981
 ;		Make the new key XAB variables shorter so we can
 ;		keep three column format in map
 ;
 ;	V02-029	PSK0002		Paulina S Knibbe	02-Sep-1981
 ;		Make the KEY XAB long word aligned again.
 ;
 ;	V02-028	PSK0001		Paulina S Knibbe	25-Aug-1981
 ;		Merge in Maria's changes to the KEY XAB.
 ;
 ;	V02-027	RAS0028		Ron Schaefer		20-Aug-1981
 ;		Change FAB$C_STM11 to FAB$C_STM.
 ;
 ;	V02-026	JAK0062		J A Krycka		14-Aug-1981
 ;		Add NOP and RFS fields to the NAM block.
 ;
 ;	V02-025 RAS0014		Ron Schaefer		7-Jul-1981
 ;		Add stream format codes to FAB and stream access code to RAB.
 ;
 ;	V02-024	RAS0012		Ron Schaefer		12-Jun-1981
 ;		Correct the BLISS definition of the XAB protection codes
 ;		to be relative to the start of the 4-bit protection field.
 ;
 ;	V02-023	JAK0059		J A Krycka		11-Jun-1981
 ;		Multiplex the QUOTED descriptor in the NAM block with the
 ;		NAME descriptor instead of the DEV descriptor.
 ;
 ;	V02-022	MCN0007		Maria del C. Nasr	12-May-1981
 ;		Use new symbol for old length of backup date and time XAB.
 ;
 ;	V02-021	KRM0012		Karl Malik		17-Apr-1981
 ;		Remove the NAM DWC definitions and extend the NAM block
 ;		by 40 bytes to provide easy access to various filespec
 ;		elements of either the expanded name string or the
 ;		resultant name string.
 ;
 ;	V02-020	MLJ0010		Martin L. Jack		25-Mar-1981
 ;		Add alternate format file ID in NAM block.
 ;
 ;	V02-019 kpl0001		Peter Lieberwirth	31-Dec-1980
 ;		Include definitions for new ROP bits RRL and REA.
 ;		Clean up some spelling and format while here.
 ;
 ;	V02-018	MCN0004		Maria del C. Nasr	17-Nov-1980
 ;		Include definition for backup date and time XAB.
 ;
 ;	v017	reformat	dave walp	24-JUL-1980
 ;
 ;	v016	cds0063		chris saether	7-DEC-1979
 ;		add rab$w_stv0 and rab$w_stv2 to get at both words of stv
 ;
 ;	v015	tmh0001		tim halvorsen	01-NOV-1979
 ;		add svctx bit to wcc longword definition
 ;
 ;	V014	ran0002		r a newell	1-SEP-1978	09:59
 ;		rms32 isam modification.
 ;
 ;	e h marison,	 19-APR-1978  16:20
 ;	e h marison,	 26-APR-1978  13:08
 ;	w koenig,	 16-JUN-1978, added dct bit in key xab
 ;
 ;	file access block (fab) definitions
 ;
 ;
 	.MACRO	$FABDEF,$GBL

 	$DEFINI	FAB,$GBL


 ;+++++*****
 ;   the fields thru ctx must not be modified due to
 ;   commonality between fab/rab/xab
 $EQU	FAB$C_BID	3		; code for fab
 $DEF	FAB$B_BID	.BLKB		; block id
 $DEF	FAB$B_BLN	.BLKB		; block len
						; move to bit 6
 $EQU	FAB$V_PPF_RAT	6		; rat value for process-permanent files
 $EQU	FAB$M_PPF_RAT	<^X3FC0>
 $EQU	FAB$S_PPF_RAT	8
 $EQU	FAB$V_PPF_IND	14		; indirect access to process-permanent file
 $EQU	FAB$M_PPF_IND	<^X4000>
					; (i.e., restricted operations)
 $DEF	FAB$W_IFI	.BLKW		; internal file index
						; reserved for asy (not implemented)
 $EQU	FAB$V_MXV	1		; maximize version number
 $EQU	FAB$M_MXV	2
 $EQU	FAB$V_SUP	2		; supersede existing file
 $EQU	FAB$M_SUP	4
 $EQU	FAB$V_TMP	3		; create temporary file
 $EQU	FAB$M_TMP	8
 $EQU	FAB$V_TMD	4		; create temp file marked for delete
 $EQU	FAB$M_TMD	16
 $EQU	FAB$V_DFW	5		; deferred write (rel and idx)
 $EQU	FAB$M_DFW	32
 $EQU	FAB$V_SQO	6		; sequential access only
 $EQU	FAB$M_SQO	64
 $EQU	FAB$V_RWO	7		; rewind mt on open
 $EQU	FAB$M_RWO	128
 $EQU	FAB$V_POS	8		; use next magtape position
 $EQU	FAB$M_POS	256
 $EQU	FAB$V_WCK	9		; write checking
 $EQU	FAB$M_WCK	<^X200>
 $EQU	FAB$V_NEF	10		; inhibit end of file positioning
 $EQU	FAB$M_NEF	<^X400>
 $EQU	FAB$V_RWC	11		; rewind mt on close
 $EQU	FAB$M_RWC	<^X800>
 $EQU	FAB$V_DMO	12		; dismount mt on close (not implemented)
 $EQU	FAB$M_DMO	<^X1000>
 $EQU	FAB$V_SPL	13		; spool file on close
 $EQU	FAB$M_SPL	<^X2000>
 $EQU	FAB$V_SCF	14		; submit command file on close
 $EQU	FAB$M_SCF	<^X4000>
 $EQU	FAB$V_DLT	15		; delete sub-option
 $EQU	FAB$M_DLT	<^X8000>
 $EQU	FAB$V_NFS	16		; non-file structured operation
 $EQU	FAB$M_NFS	<^X10000>
 $EQU	FAB$V_UFO	17		; user file open - no rms operations
 $EQU	FAB$M_UFO	<^X20000>
 $EQU	FAB$V_PPF	18		; process permanent file (pio segment)
 $EQU	FAB$M_PPF	<^X40000>
 $EQU	FAB$V_INP	19		; process-permanent file is 'input'
 $EQU	FAB$M_INP	<^X80000>
 $EQU	FAB$V_CTG	20		; contiguous extension
 $EQU	FAB$M_CTG	<^X100000>
 $EQU	FAB$V_CBT	21		; contiguous best try
 $EQU	FAB$M_CBT	<^X200000>
 $EQU	FAB$V_JNL	22		; explicit logging (not implemented)
 $EQU	FAB$M_JNL	<^X400000>
 $EQU	FAB$V_RCK	23		; read checking
 $EQU	FAB$M_RCK	<^X800000>
 $EQU	FAB$V_NAM	24		; use name block dvi, did, and/or fid fields for open
 $EQU	FAB$M_NAM	<^X1000000>
 $EQU	FAB$V_CIF	25		; create if non-existent
 $EQU	FAB$M_CIF	<^X2000000>
 $EQU	FAB$V_UFM	26		; user file open mode (user if 1, super if 0)
 $EQU	FAB$M_UFM	<^X4000000>
					;  enable only if esc and (ufo or nfs) are also on
					;  (note: this bit must immediately precede esc)
 $EQU	FAB$V_ESC	27		; 'escape' to non-standard function ($modify)
 $EQU	FAB$M_ESC	<^X8000000>
 $EQU	FAB$V_TEF	28		; truncate at eof on close (write-accessed seq. disk file only)
 $EQU	FAB$M_TEF	<^X10000000>
 $EQU	FAB$V_OFP	29		; output file parse (only name type sticky)
 $EQU	FAB$M_OFP	<^X20000000>
 $EQU	FAB$V_KFO	30		; known file open (image activator only release 1)
 $EQU	FAB$M_KFO	<^X40000000>
 $DEF	FAB$L_FOP	.BLKL		; file options
 $DEF	FAB$L_STS	.BLKL		; status
 $DEF	FAB$L_STV	.BLKL		; status value
 $DEF	FAB$L_ALQ	.BLKL		; allocation quantity
 $DEF	FAB$W_DEQ	.BLKW		; default allocation quantity
 $EQU	FAB$V_PUT	0		; put access
 $EQU	FAB$M_PUT	1
 $EQU	FAB$V_GET	1		; get access
 $EQU	FAB$M_GET	2
 $EQU	FAB$V_DEL	2		; delete access
 $EQU	FAB$M_DEL	4
 $EQU	FAB$V_UPD	3		; update access
 $EQU	FAB$M_UPD	8
 $EQU	FAB$V_TRN	4		; truncate access
 $EQU	FAB$M_TRN	16
 $EQU	FAB$V_BIO	5		; block i/o access
 $EQU	FAB$M_BIO	32
 $EQU	FAB$V_BRO	6		; block and record i/o access
 $EQU	FAB$M_BRO	64
 $EQU	FAB$V_EXE	7		; execute access (caller must be exec or kernel mode,
 $EQU	FAB$M_EXE	128
					;  ufo must also be set)
 $DEF	FAB$B_FAC	.BLKB		; file access
 $EQU	FAB$V_SHRPUT	0		; put access
 $EQU	FAB$M_SHRPUT	1
 $EQU	FAB$V_SHRGET	1		; get access
 $EQU	FAB$M_SHRGET	2
 $EQU	FAB$V_SHRDEL	2		; delete access
 $EQU	FAB$M_SHRDEL	4
 $EQU	FAB$V_SHRUPD	3		; update access
 $EQU	FAB$M_SHRUPD	8
 $EQU	FAB$V_MSE	4		; multi-stream connects enabled
 $EQU	FAB$M_MSE	16
 $EQU	FAB$V_NIL	5		; no sharing
 $EQU	FAB$M_NIL	32
 $EQU	FAB$V_UPI	6		; user provided interlocking (allows multiple
 $EQU	FAB$M_UPI	64
					;  writers to seq. files)
 $DEF	FAB$B_SHR	.BLKB		; file sharing
 ;-----*****
 $DEF	FAB$L_CTX	.BLKL		; user context
 $DEF	FAB$B_RTV	.BLKB		; retrieval window size
				
 $EQU	FAB$V_ORG	4
 $EQU	FAB$S_ORG	4
 $EQU	FAB$C_SEQ	0		; sequential
 $EQU	FAB$C_REL	16		; relative
 $EQU	FAB$C_IDX	32		; indexed
 $EQU	FAB$C_HSH	48		; hashed
 $DEF	FAB$B_ORG	.BLKB		; file organization
 $EQU	FAB$V_FTN	0		; fortran carriage-ctl
 $EQU	FAB$M_FTN	1
 $EQU	FAB$V_CR	1		; lf-record-cr carriage ctl
 $EQU	FAB$M_CR	2
 $EQU	FAB$V_PRN	2		; print-file carriage ctl
 $EQU	FAB$M_PRN	4
 $EQU	FAB$V_BLK	3		; records don't cross block boundaries
 $EQU	FAB$M_BLK	8
 $DEF	FAB$B_RAT	.BLKB		; record format
 $EQU	FAB$C_RFM_DFLT	2		; var len is default
 $EQU	FAB$C_UDF	0		; undefined (also stream binary)
 $EQU	FAB$C_FIX	1		; fixed length records
 $EQU	FAB$C_VAR	2		; variable length records
 $EQU	FAB$C_VFC	3		; variable fixed control
 $EQU	FAB$C_STM	4		; RMS-11 stream (valid only for sequential org)
 $EQU	FAB$C_STMLF	5		; LF stream (valid only for sequential org)
 $EQU	FAB$C_STMCR	6		; CR stream (valid only for sequential org)
 $EQU	FAB$C_MAXRFM	6		; maximum rfm supported
 $DEF	FAB$B_RFM	.BLKB		; record format
 $DEF	FAB$L_JNL	.BLKL		; lcb address
 $DEF	FAB$L_XAB	.BLKL		; xab address
 $DEF	FAB$L_NAM	.BLKL		; nam block address
 $DEF	FAB$L_FNA	.BLKL		; file name string address
 $DEF	FAB$L_DNA	.BLKL		; default file name string addr
 $DEF	FAB$B_FNS	.BLKB		; file name string size
 $DEF	FAB$B_DNS	.BLKB		; default name string size
 $DEF	FAB$W_MRS	.BLKW		; maximum record size
 $DEF	FAB$L_MRN	.BLKL		; maximum record number
 $DEF	FAB$W_BLS	.BLKW		; blocksize for tape
 $DEF	FAB$B_BKS	.BLKB		; bucket size
 $DEF	FAB$B_FSZ	.BLKB		; fixed header size
 $DEF	FAB$L_DEV	.BLKL		; device characteristics
 $DEF	FAB$L_SDC	.BLKL		; spooling device characteristics
 $DEF	FAB$W_GBC	.BLKW		; Global buffer count
 $DEF	FAB$B_DSBMSK	.BLKB		; $TRNLOG disable mask
 				 		; (spare)
 			.BLKB	1
 				 		; (spare)
 			.BLKL	1
 $DEF	FAB$C_BLN

 $DEF	FAB$K_BLN			; length of fab
 	$DEFEND	FAB,$GBL,DEF

 	.ENDM	$FABDEF
 
 ;
 ;	 record access block (rab) definitions
 ;
 ;  there is one rab per connected stream
 ;  it is used for all communications between the user
 ;  and rms concerning operations on the stream
 ;
 	.MACRO	$RABDEF,$GBL

 	$DEFINI	RAB,$GBL


 ;+++++*****
 ;  the fields thru ctx cannot be changed due to commonality
 ;  with the fab
 ;
 $EQU	RAB$C_BID	1		; code for rab
 $DEF	RAB$B_BID	.BLKB		; block id
 $DEF	RAB$B_BLN	.BLKB		; block length
 			; (ifi in fab)
						; move to bit 6
 $EQU	RAB$V_PPF_RAT	6		; rat value for process-permanent files
 $EQU	RAB$M_PPF_RAT	<^X3FC0>
 $EQU	RAB$S_PPF_RAT	8
 $EQU	RAB$V_PPF_IND	14		; indirect access to process-permanent file
 $EQU	RAB$M_PPF_IND	<^X4000>
					; (i.e., restricted operations)
 $DEF	RAB$W_ISI	.BLKW		; internal stream index
					; the following bits may be
					; input to various rab-related
					; operations
					;
 $EQU	RAB$V_ASY	0		; asynchronous operations
 $EQU	RAB$M_ASY	1
 $EQU	RAB$V_TPT	1		; truncate put  -  allow sequential put not at
 $EQU	RAB$M_TPT	2
					;   eof, thus truncating file (seq. org only)
					;
					; these next two should be in the byte for bits
					; input to $find or $get, but there is no room there
					;
 $EQU	RAB$V_REA	2		; lock record for read only, allow other readers
 $EQU	RAB$M_REA	4
 $EQU	RAB$V_RRL	3		; read record regardless of lock
 $EQU	RAB$M_RRL	8
					;
 $EQU	RAB$V_UIF	4		; update if existent
 $EQU	RAB$M_UIF	16
 $EQU	RAB$V_MAS	5		; mass-insert mode
 $EQU	RAB$M_MAS	32
 $EQU	RAB$V_FDL	6		; fast record deletion
 $EQU	RAB$M_FDL	64
 $EQU	RAB$V_HSH	7		; use hash code in bkt
 $EQU	RAB$M_HSH	128
					;
 $EQU	RAB$V_EOF	8		; connect to eof
 $EQU	RAB$M_EOF	256
 $EQU	RAB$V_RAH	9		; read ahead
 $EQU	RAB$M_RAH	<^X200>
 $EQU	RAB$V_WBH	10		; write behind
 $EQU	RAB$M_WBH	<^X400>
 $EQU	RAB$V_BIO	11		; connect for bio only
 $EQU	RAB$M_BIO	<^X800>
						; (1 spare)
 $EQU	RAB$V_LOA	13		; use bucket fill percentage
 $EQU	RAB$M_LOA	<^X2000>
 $EQU	RAB$V_LIM	14		; compare for key limit reached on $get/$find seq. (idx only)
 $EQU	RAB$M_LIM	<^X4000>
						; (1 spare)
					;
					; the following bits are input to
					; $find or $get, (see above also REA and RRL)
					; (separate byte)
					;
 $EQU	RAB$V_LOC	16		; use locate mode
 $EQU	RAB$M_LOC	<^X10000>
 $EQU	RAB$V_WAT	17		; wait if record not available
 $EQU	RAB$M_WAT	<^X20000>
 $EQU	RAB$V_ULK	18		; manual unlocking
 $EQU	RAB$M_ULK	<^X40000>
 $EQU	RAB$V_RLK	19		; allow readers for this locked record
 $EQU	RAB$M_RLK	<^X80000>
 $EQU	RAB$V_NLK	20		; do not lock record
 $EQU	RAB$M_NLK	<^X100000>
 $EQU	RAB$V_KGE	21		; key > or =
 $EQU	RAB$M_KGE	<^X200000>
 $EQU	RAB$V_KGT	22		; key greater than
 $EQU	RAB$M_KGT	<^X400000>
 $EQU	RAB$V_NXR	23		; get non-existent record
 $EQU	RAB$M_NXR	<^X800000>
					;
					;  the following bits are terminal qualifiers only
					;  (separate byte)
					;
 $EQU	RAB$V_RNE	24		; read no echo
 $EQU	RAB$M_RNE	<^X1000000>
 $EQU	RAB$V_TMO	25		; use time-out period
 $EQU	RAB$M_TMO	<^X2000000>
 $EQU	RAB$V_CVT	26		; convert to upper case
 $EQU	RAB$M_CVT	<^X4000000>
 $EQU	RAB$V_RNF	27		; read no filter
 $EQU	RAB$M_RNF	<^X8000000>
						; spare (for dsablmbx if ever supported)
 $EQU	RAB$V_PTA	29		; purge type ahead
 $EQU	RAB$M_PTA	<^X20000000>
 $EQU	RAB$V_PMT	30		; use prompt buffer
 $EQU	RAB$M_PMT	<^X40000000>
 $EQU	RAB$V_CCO	31		; cancel control o on output
 $EQU	RAB$M_CCO	<^X80000000>
 $DEF	RAB$L_ROP	.BLKB		; record options
 $DEF	RAB$B_ROP1	.BLKB		; various options
 			; due to REA and RRL being in a different byte)
 $DEF	RAB$B_ROP2	.BLKB		; get/find options  (use of this field discouraged
 ;
 $DEF	RAB$B_ROP3	.BLKB		; terminal read options
 $DEF	RAB$L_STS	.BLKL		; status
 $DEF	RAB$L_STV			; status value
 $DEF	RAB$W_STV0	.BLKW		; low word of stv
 $DEF	RAB$W_STV2	.BLKW		; high word of stv
 $EQU	RAB$S_RFA	6
 $DEF	RAB$W_RFA			; record's file address
 $DEF	RAB$L_RFA0	.BLKL
 $DEF	RAB$W_RFA4	.BLKW
 				 		; (reserved - rms release 1 optimizes stores
 			;  to the rfa field to be a move quad, overwriting
 			;  this reserved word)
 			.BLKW	1
 ;-----*****
 $DEF	RAB$L_CTX	.BLKL		; user context
 				 		; (spare)
 			.BLKW	1
 $EQU	RAB$C_SEQ	0		; sequential access
 $EQU	RAB$C_KEY	1		; keyed access
 $EQU	RAB$C_RFA	2		; rfa access
 $EQU	RAB$C_STM	3		; stream access (valid only for sequential org)
 $DEF	RAB$B_RAC	.BLKB		; record access
 $DEF	RAB$B_TMO	.BLKB		; time-out period
 $DEF	RAB$W_USZ	.BLKW		; user buffer size
 $DEF	RAB$W_RSZ	.BLKW		; record buffer size
 $DEF	RAB$L_UBF	.BLKL		; user buffer address
 $DEF	RAB$L_RBF	.BLKL		; record buffer address
 $DEF	RAB$L_RHB	.BLKL		; record header buffer addr
 $DEF	RAB$L_KBF			; key buffer address
 $DEF	RAB$L_PBF	.BLKL		; prompt buffer addr
 $DEF	RAB$B_KSZ			; key buffer size
 $DEF	RAB$B_PSZ	.BLKB		; prompt buffer size
 $DEF	RAB$B_KRF	.BLKB		; key of reference
 $DEF	RAB$B_MBF	.BLKB		; multi-buffer count
 $DEF	RAB$B_MBC	.BLKB		; multi-block  count
 $DEF	RAB$L_BKT			; bucket hash code, vbn, or rrn
 $DEF	RAB$L_DCT	.BLKL		; duplicates count on key accessed on alternate key
 $DEF	RAB$L_FAB	.BLKL		; related fab for connect
 				 		; (spare)
 			.BLKL	1
 $DEF	RAB$C_BLN

 $DEF	RAB$K_BLN			; length of rab
 	$DEFEND	RAB,$GBL,DEF

 	.ENDM	$RABDEF
 
 ;
 ;	 name block field definitions
 ;
 ;  the nam block is used to communicate optional
 ;  filename-related information
 ;
 	.MACRO	$NAMDEF,$GBL

 	$DEFINI	NAM,$GBL


 $EQU	NAM$C_BID	2		; code for nam block
 $DEF	NAM$B_BID	.BLKB		; block id
 ;+++++++++++++++++++++++
 ;  the following 3 fields must not be rearranged relative to each other
 ;
 $DEF	NAM$B_BLN	.BLKB		; block length
 $EQU	NAM$C_MAXRSS	252		; maximum resultant name string size (network)
 $EQU	NAM$C_MAXRSSLCL	252		;maximum resultant name string size (local)
 			;	dev (15+1)
 			;	dir (60)
 			;	name,type,version (9+3+6+2)
 $DEF	NAM$B_RSS	.BLKB		; resultant string area size
 $DEF	NAM$B_RSL	.BLKB		; resultant string length
 ;-----------------------
 $DEF	NAM$L_RSA	.BLKL		; resultant string area address
 			; Note: This field is reserved for use by Digital
 $EQU	NAM$V_PWD	0		; Return password if present in nodespec string
 $EQU	NAM$M_PWD	1
					;  (default is to mask out password from expanded and
					;  resultant name strings and to create a logical name
					;  whose equivalence string is the unaltered nodespec)
 $EQU	NAM$V_ROD	1		; Return optional data if present in taskspec string
 $EQU	NAM$M_ROD	2
					;  (default is to mask out binary data after slash in
					;  taskspec from expanded and resultant name strings)
 $EQU	NAM$V_SOD	2		; Send optional data if present in taskspec string
 $EQU	NAM$M_SOD	4
					;  (default is to ignore optional data in taskspec
					;  string for a task-to-task access function)
 $DEF	NAM$B_NOP	.BLKB		; Name options (currently not documented)
 			; Note: This field is reserved for use by Digital
 $EQU	NAM$C_UFS	0		; Unknown file system for remote file access or
 			;  not applicable for local file access or
 			;  not applicable for task-to-task operation
 $EQU	NAM$C_RMS11	1		; RMS-11
 $EQU	NAM$C_RMS20	2		; RMS-20
 $EQU	NAM$C_RMS32	3		; RMS-32
 $EQU	NAM$C_FCS11	4		; FCS-11
 $EQU	NAM$C_RT11FS	5		; RT-11 file system
 $EQU	NAM$C_TOPS20FS	7		; TOPS-20 file system
 $EQU	NAM$C_TOPS10FS	8		; TOPS-10 file system
 ;+++++++++++++++++++++++
 ;  the following 3 fields must not be rearranged relative to each other
 ;
 $DEF	NAM$B_RFS	.BLKB		; Remote file system type (currently not documented)
 $DEF	NAM$B_ESS	.BLKB		; espanded string area size
 $DEF	NAM$B_ESL	.BLKB		; expanded string length
 ;-----------------------
 $DEF	NAM$L_ESA	.BLKL		; expanded string area address
 $DEF	NAM$L_RLF	.BLKL		; related file nam block addr
 $EQU	NAM$S_DVI	16
 $EQU	NAM$C_DVI	16		; length of dvi field
 ;+++++*****
 ;  the location of the following fields must not
 ;  be changed due to their commonality with the fib
 $DEF	NAM$T_DVI	.BLKB	16	; device id
 $EQU	NAM$S_FID	6
 $DEF	NAM$W_FID			; file id
 $DEF	NAM$W_FID_NUM	.BLKW		; file number
 $DEF	NAM$W_FID_SEQ	.BLKW		; sequence number
 $DEF	NAM$W_FID_RVN			; relative volume number
 $DEF	NAM$B_FID_RVN	.BLKB		; alternate format RVN
 $DEF	NAM$B_FID_NMX	.BLKB		; alternate format file number extension
 $EQU	NAM$S_DID	6
 $DEF	NAM$W_DID			; directory id
 $DEF	NAM$W_DID_NUM	.BLKW		; file number
 $DEF	NAM$W_DID_SEQ	.BLKW		; sequence number
 $DEF	NAM$W_DID_RVN			; relative volume number
 $DEF	NAM$B_DID_RVN	.BLKB		; alternate format RVN
 $DEF	NAM$B_DID_NMX	.BLKB		; alternate format file number extension
						; the first word is reserved for IFI/ACP context
 $EQU	NAM$V_IFI	16		; the first word contains an IFI
 $EQU	NAM$M_IFI	<^X10000>
						; grow from top down, start at top bit
 $EQU	NAM$V_SRCHNMF	30		; no-more-files has been encountered on a search
 $EQU	NAM$M_SRCHNMF	<^X40000000>
 $EQU	NAM$V_SVCTX	31		; save context across search calls
 $EQU	NAM$M_SVCTX	<^X80000000>
 $DEF	NAM$L_WCC	.BLKL		; wild card context
 $EQU	NAM$V_EXP_VER	0		; version was explicit
 $EQU	NAM$M_EXP_VER	1
 $EQU	NAM$V_EXP_TYPE	1		; type was explicit
 $EQU	NAM$M_EXP_TYPE	2
 $EQU	NAM$V_EXP_NAME	2		; name was explicit
 $EQU	NAM$M_EXP_NAME	4
 $EQU	NAM$V_WILD_VER	3		; version contained a wild card
 $EQU	NAM$M_WILD_VER	8
 $EQU	NAM$V_WILD_TYPE	4		; type contained a wild card
 $EQU	NAM$M_WILD_TYPE	16
 $EQU	NAM$V_WILD_NAME	5		; name contained a wild card
 $EQU	NAM$M_WILD_NAME	32
 $EQU	NAM$V_EXP_DIR	6		; directory was explicit
 $EQU	NAM$M_EXP_DIR	64
 $EQU	NAM$V_EXP_DEV	7		; device was explicit
 $EQU	NAM$M_EXP_DEV	128
 $EQU	NAM$V_WILDCARD	8		; filename string included a wild card
 $EQU	NAM$M_WILDCARD	256
					; (inclusive or of other wild card bits)
						; (spares)
 $EQU	NAM$V_CNCL_DEV	12		; concealed device present
 $EQU	NAM$M_CNCL_DEV	<^X1000>
 $EQU	NAM$V_ROOT_DIR	13		; root directory present
 $EQU	NAM$M_ROOT_DIR	<^X2000>
 $EQU	NAM$V_LOWVER	14		; lower numbered version(s) of file exist(s)
 $EQU	NAM$M_LOWVER	<^X4000>
 $EQU	NAM$V_HIGHVER	15		; higher 		"
 $EQU	NAM$M_HIGHVER	<^X8000>
					;
 $EQU	NAM$V_PPF	16		; process-permanent file referenced indirectly
 $EQU	NAM$M_PPF	<^X10000>
 $EQU	NAM$V_NODE	17		; filename specification included a nodename
 $EQU	NAM$M_NODE	<^X20000>
 $EQU	NAM$V_QUOTED	18		; filename spec included a quoted string
 $EQU	NAM$M_QUOTED	<^X40000>
 $EQU	NAM$V_GRP_MBR	19		; directory spec was of group-member format
 $EQU	NAM$M_GRP_MBR	<^X80000>
 $EQU	NAM$V_WILD_DIR	20		; directory spec included a wild card
 $EQU	NAM$M_WILD_DIR	<^X100000>
 $EQU	NAM$V_DIR_LVLS	21		; number of directory levels (0=ufd only)
 $EQU	NAM$M_DIR_LVLS	<^XE00000>
 $EQU	NAM$S_DIR_LVLS	3
						; separate byte for wild card directory flags
 $EQU	NAM$V_WILD_UFD	24		; ufd included a wild card
 $EQU	NAM$M_WILD_UFD	<^X1000000>
 $EQU	NAM$V_WILD_SFD1	25		; sfd1 included a wild card
 $EQU	NAM$M_WILD_SFD1	<^X2000000>
 $EQU	NAM$V_WILD_SFD2	26		; sfd2 included a wild card
 $EQU	NAM$M_WILD_SFD2	<^X4000000>
 $EQU	NAM$V_WILD_SFD3	27		; sfd3 included a wild card
 $EQU	NAM$M_WILD_SFD3	<^X8000000>
 $EQU	NAM$V_WILD_SFD4	28		; sfd4 included a wild card
 $EQU	NAM$M_WILD_SFD4	<^X10000000>
 $EQU	NAM$V_WILD_SFD5	29		; sfd5 included a wild card
 $EQU	NAM$M_WILD_SFD5	<^X20000000>
 $EQU	NAM$V_WILD_SFD6	30		; sfd6 included a wild card
 $EQU	NAM$M_WILD_SFD6	<^X40000000>
 $EQU	NAM$V_WILD_SFD7	31		; sfd7 included a wild card
 $EQU	NAM$M_WILD_SFD7	<^X80000000>
						; alternate definitions for wild_ufd and wild_sfd1
 $EQU	NAM$V_WILD_GRP	24		; group contained a wild card
 $EQU	NAM$M_WILD_GRP	<^X1000000>
 $EQU	NAM$V_WILD_MBR	25		; member contained a wild card
 $EQU	NAM$M_WILD_MBR	<^X2000000>
 ;-----*****
 $DEF	NAM$L_FNB	.BLKL		; file name status bits
 $DEF	NAM$C_BLN_V2
 			; (prior to 40 byte extension)

 ;
 ; Extend the NAM block by 40 bytes.
 ;
 $DEF	NAM$K_BLN_V2			; Version 2 name block length
 $DEF	NAM$B_NODE	.BLKB		; Nodespec length
 $DEF	NAM$B_DEV	.BLKB		; Device length
 $DEF	NAM$B_DIR	.BLKB		; Directory length
 $DEF	NAM$B_NAME	.BLKB		; Filename length
 $DEF	NAM$B_TYPE	.BLKB		; Filetype length
 $DEF	NAM$B_VER	.BLKB		; Version number length
 				 	; Currently unused
 			.BLKB	2
 $DEF	NAM$L_NODE	.BLKL		; Nodespec address
 $DEF	NAM$L_DEV	.BLKL		; Device address
 $DEF	NAM$L_DIR	.BLKL		; Directory address
 $DEF	NAM$L_NAME	.BLKL		; Filename address
 $DEF	NAM$L_TYPE	.BLKL		; Filetype address
 $DEF	NAM$L_VER	.BLKL		; Version number address
 				 	; Currently unused
 			.BLKL	2
 $DEF	NAM$C_BLN_DIRWC
 $DEF	NAM$K_BLN_DIRWC			; Not documented optional length
 $DEF	NAM$C_BLN

 $DEF	NAM$K_BLN			; Name block length
 	$DEFEND	NAM,$GBL,DEF

 	.ENDM	$NAMDEF
 
 ;
 ;	 definitions for all xabs
 ;		$xabdef
 ;
 ;
 	.MACRO	$XABDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 ;  the first four fields are shared in common between all xabs
 ;  and hence are defined only once
 ;  (the only exception is that the spare word may be used by some xabs)
 ;
 $DEF	XAB$B_COD	.BLKB		; xab id code
 $DEF	XAB$B_BLN	.BLKB		; block length
 				 		; (spare)
 			.BLKW	1
 					;UP TILL NOW COMMON AMONG ALL XABS
 			;WITH POSSIBLE EXCEPTION OF SPARE FIELD
 $DEF	XAB$L_NXT	.BLKL		; xab chain link
 $DEF	XAB$W_RVN	.BLKW
 				
 			.BLKW	1
 $EQU	XAB$S_RDT	8
 $DEF	XAB$Q_RDT
 $DEF	XAB$L_RDT0	.BLKL
 			;COMMON AMONG DAT AND RDT XABS
 $DEF	XAB$L_RDT4	.BLKL
 	. = 4 		;BACK TO END OF TOTAL COMMONALITY
 			.BLKL	1
 				 		;THESE FIELDS WILL BE DEFINED LATER
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				
 			.BLKL	1
 				
 			.BLKL	1
 				
 			.BLKW	1
 $DEF	XAB$B_BKZ	.BLKB		;COMMON TO FHC AND ALQ XABS

 	$DEFEND	XAB,$GBL,DEF

 	.ENDM	$XABDEF
 ;++
 ;	file header characteristics xab definitions
 ;		$xabfhcdef
 ;
 ;+++++*****
 	.MACRO	$XABFHCDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;  the fields of this xab cannot be rearranged since
 ;  they correspond to an on-disk structure
 ;
 $EQU	XAB$C_FHC	29		; xabfhc id code
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 $DEF	XAB$B_RFO	.BLKB		; record format and file org
 $DEF	XAB$B_ATR	.BLKB		; record attributes
 $DEF	XAB$W_LRL	.BLKW		; longest record's length
 			; (n.b. reversed on disk!)
 $DEF	XAB$L_HBK			; hi vbn allocated
 $DEF	XAB$W_HBK0	.BLKW
 $DEF	XAB$W_HBK2	.BLKW
 			; (n.b. reversed on disk)
 $DEF	XAB$L_EBK			; eof vbn
 $DEF	XAB$W_EBK0	.BLKW
 $DEF	XAB$W_EBK2	.BLKW
 $DEF	XAB$W_FFB	.BLKW		; first free byte in eof block
 				 		; bucket size for fhc ( note: field name is bkz,
 			; defined above in $xabdef, since it is shared
 			; by the all xab)
 			.BLKB	1
 $DEF	XAB$B_HSZ	.BLKB		; header size for vfc
 $DEF	XAB$W_MRZ	.BLKW		; max record size
 $DEF	XAB$W_DXQ	.BLKW		; default extend quantity
 $DEF	XAB$W_GBC	.BLKW		; global buffer count
 				 		; spares (pad to last word)
 			.BLKB	8
 ;-----*****
 $DEF	XAB$W_VERLIMIT	.BLKW		; version limit for file.
 $DEF	XAB$L_SBN	.BLKL		; starting lbn if contiguous
 $DEF	XAB$C_FHCLEN

 $DEF	XAB$K_FHCLEN			; length of xabfhc
 	$DEFEND	XAB,$GBL,FHCDEF

 	.ENDM	$XABFHCDEF
 ;--
 ;++
 ;
 ;	allocation xab definitions
 ;		$xaballdef
 	.MACRO	$XABALLDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 ;
 ;+++++*****
 ;  the fields thru bkz cannot be rearranged due to
 ;  their commonality with fab
 $EQU	XAB$C_ALL	20		; xaball id code
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 $EQU	XAB$V_HRD	0		; fail if requested alignment impossible
 $EQU	XAB$M_HRD	1
 $EQU	XAB$V_ONC	1		; locate allocated space within a cylinder
 $EQU	XAB$M_ONC	2
						; (spares)
 $EQU	XAB$V_CBT	5		; contiguous alllocation, best try
 $EQU	XAB$M_CBT	32
						; spare
 $EQU	XAB$V_CTG	7		; contiguous allocation
 $EQU	XAB$M_CTG	128
 $DEF	XAB$B_AOP	.BLKB		; allocation options
 $EQU	XAB$C_ANY	0		; any allocation o.k.
 $EQU	XAB$C_CYL	1		; cylinder boundary
 $EQU	XAB$C_LBN	2		; allocate at specified lbn
 $EQU	XAB$C_VBN	3		; allocate near specified vbn
 $EQU	XAB$C_RFI	4		; allocate near related file
 $DEF	XAB$B_ALN	.BLKB		; alignment type
 			; (not applicable if aln = vbn or rfi)
 $DEF	XAB$W_VOL	.BLKW		; relative volume no. for allocation
 $DEF	XAB$L_LOC	.BLKL		; allocation location
 $DEF	XAB$L_ALQ	.BLKL		; allocation quantity
 $DEF	XAB$W_DEQ	.BLKW		; default allocation quantity
 				 		; bucket size for area (note: field name is bkz,
 			; defined above in $xabdef,since it is shared by the fhc
 			; xab and has the same offset, of course)
 ;-----*****
 			.BLKB	1
 $DEF	XAB$B_AID	.BLKB		; area id number
 $EQU	XAB$S_RFI	6
 $DEF	XAB$W_RFI			; related file id
 $DEF	XAB$W_RFI0	.BLKW		; file number
 $DEF	XAB$W_RFI2	.BLKW		; seq number
 $DEF	XAB$W_RFI4	.BLKW		; rev number
 				 		; (spare)
 			.BLKW	1
 $DEF	XAB$C_ALLLEN

 $DEF	XAB$K_ALLLEN			; length of xaball
 	$DEFEND	XAB,$GBL,ALLDEF

 	.ENDM	$XABALLDEF
 ;--
 ;++
 ;
 ;	date/time xab definitions
 ;		$xabdatdef
 	.MACRO	$XABDATDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 $EQU	XAB$C_DAT	18		; xabdat id code
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 				 		;REVISION #,DEFINED IN $XABDEF,SINCE COMMON TO DAT & RDT
 			.BLKW	1
 				 		; spare
 			.BLKW	1
 				 		; revision date & time,defined in $xabdef
 			.BLKQ	1
 $EQU	XAB$S_CDT	8
 $DEF	XAB$Q_CDT			; creation date & time
 $DEF	XAB$L_CDT0	.BLKL
 $DEF	XAB$L_CDT4	.BLKL
 $EQU	XAB$S_EDT	8
 $DEF	XAB$Q_EDT			; expiration date & time
 $DEF	XAB$L_EDT0	.BLKL
 $DEF	XAB$L_EDT4	.BLKL
 $DEF	XAB$C_DATLEN_V2
 $DEF	XAB$K_DATLEN_V2			; Version 2 XABDAT length
 $EQU	XAB$S_BDT	8
 $DEF	XAB$Q_BDT			; backup date and time
 $DEF	XAB$L_BDT0	.BLKL
 $DEF	XAB$L_BDT4	.BLKL
 $DEF	XAB$C_DATLEN

 $DEF	XAB$K_DATLEN			; length of XABDAT
 	$DEFEND	XAB,$GBL,DATDEF

 	.ENDM	$XABDATDEF
 ;--
 ;++
 ;
 ;	revision date/time xab definitions
 ;		$xabrdtdef
 	.MACRO	$XABRDTDEF,$GBL

 	$DEFINI	XAB,$GBL

 $EQU	XAB$C_RDT	30		; xabrdt id code
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 				 		;REVISION #,DEFINED IN $XABDEF,SINCE COMMON TO DAT & RDT
 			.BLKW	1
 				 		; spare
 			.BLKW	1
 				 		; revision date & time,defined in $xabdef
 			.BLKQ	1
 $DEF	XAB$C_RDTLEN

 $DEF	XAB$K_RDTLEN			; length of rdt xab
 	$DEFEND	XAB,$GBL,RDTDEF

 	.ENDM	$XABRDTDEF
 ;--
 ;++
 ;
 ;	protection xab field definitions
 ;		$xabprodef
 ;
 	.MACRO	$XABPRODEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 $EQU	XAB$C_PRO	19		; xabpro id code
 $EQU	XAB$V_NOREAD	0		; deny read access
 $EQU	XAB$M_NOREAD	1
 $EQU	XAB$V_NOWRITE	1		; deny write access
 $EQU	XAB$M_NOWRITE	2
 $EQU	XAB$V_NOEXE	2		; deny execution access
 $EQU	XAB$M_NOEXE	4
 $EQU	XAB$V_NODEL	3		; deny delete access
 $EQU	XAB$M_NODEL	8
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 $EQU	XAB$V_SYS	0		; system
 $EQU	XAB$S_SYS	4
 $EQU	XAB$V_OWN	4		; owner
 $EQU	XAB$S_OWN	4
 $EQU	XAB$V_GRP	8		; group
 $EQU	XAB$S_GRP	4
 $EQU	XAB$V_WLD	12		; world
 $EQU	XAB$S_WLD	4
 $DEF	XAB$W_PRO	.BLKW		; protection mask
 $DEF	XAB$B_MTACC	.BLKB		; Magtape access control char.
 				 		; (spare)
 			.BLKB	1
 $DEF	XAB$L_UIC			; uic code
 $DEF	XAB$W_MBM	.BLKW		; member code
 $DEF	XAB$W_GRP	.BLKW		; group code
 $DEF	XAB$C_PROLEN

 $DEF	XAB$K_PROLEN			; xabpro length
 	$DEFEND	XAB,$GBL,PRODEF

 	.ENDM	$XABPRODEF
 ;--
 ;++
 ;
 ;	terminal control xab field definitions
 ;		$xabtrmdef
 ;
 ;
 	.MACRO	$XABTRMDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 $EQU	XAB$C_TRM	31		;XABTRM ID CODE
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 $DEF	XAB$L_AST_ADDR	.BLKL		; ast address
 $DEF	XAB$L_AST_PARM	.BLKL		; ast parameter
 $DEF	XAB$W_MBX_CHAN	.BLKW		; associated mailbox channel number
 $EQU	XAB$V_DSABL_AST	0		; disable ast
 $EQU	XAB$M_DSABL_AST	1
 $DEF	XAB$B_FLAGS	.BLKB
 				 		; spare
 			.BLKB	1
 				 		; spares
 			.BLKL	1
 $DEF	XAB$C_TRMLEN

 $DEF	XAB$K_TRMLEN			; length of xab of type terminal control
 	$DEFEND	XAB,$GBL,TRMDEF

 	.ENDM	$XABTRMDEF
 ;--
 ;++
 ;
 ;	summary xab field definitions
 ;		$xabsumdef
 ;
 	.MACRO	$XABSUMDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 $EQU	XAB$C_SUM	22		; xabsum id code
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 			.BLKL	1
 $DEF	XAB$B_NOA	.BLKB		; number of defined areas for index file
 $DEF	XAB$B_NOK	.BLKB		; number of defined keys for index file
 $DEF	XAB$W_PVN	.BLKW		; prologue version number (relative and index files)
 $DEF	XAB$C_SUMLEN

 $DEF	XAB$K_SUMLEN			; xabsum length
 	$DEFEND	XAB,$GBL,SUMDEF

 	.ENDM	$XABSUMDEF
 ;--
 ;++
 ;
 ;	key definition xab field definitions
 ;		$xabkeydef
 ;
 	.MACRO	$XABKEYDEF,$GBL

 	$DEFINI	XAB,$GBL

 ;
 $EQU	XAB$C_KEY	21		; xabkey id code
 				
 			.BLKB	1
 				
 			.BLKB	1
 				
 			.BLKW	1
 				 		;HAS SAME COD, BLN, SPARE AND NXT FIELD
 			;THESE 4 FIELDS ARE COMMON TO ALL XABS AND
 			;HAVE BEEN DEFINED BY $XABDEF
 ;
 ; the field layout of the key xab is such that it matchs as
 ; closely as possible the layout of a key decriptor in the
 ; index file prologue. this is so the contents may be moved
 ; between the two structures as efficiently as possible.
 ;
 			.BLKL	1
 $DEF	XAB$B_IAN	.BLKB		; index level area number
 $DEF	XAB$B_LAN	.BLKB		; lowest index level area number
 $DEF	XAB$B_DAN	.BLKB		; data level area number
 $DEF	XAB$B_LVL	.BLKB		; level of root bucket
 $DEF	XAB$B_IBS	.BLKB		; size of index buckets in virtual blocks
 $DEF	XAB$B_DBS	.BLKB		; size of data buckets in virtual blocks
 $DEF	XAB$L_RVB	.BLKL		; root bucket start vbn
 $EQU	XAB$V_DUP	0		; duplicate key values allowed
 $EQU	XAB$M_DUP	1
 $EQU	XAB$V_CHG	1		; alt key only --key field may change on update
 $EQU	XAB$M_CHG	2
 $EQU	XAB$V_NUL	2		; alt key only --null key value enable
 $EQU	XAB$M_NUL	4
 $EQU	XAB$V_IDX_NCMPR	3		; indicate index records for given key are not compressed
 $EQU	XAB$M_IDX_NCMPR	8

						; space over dup
						; spare
 $EQU	XAB$V_KEY_NCMPR	6		; indicates primary key is not compressed in data record
 $EQU	XAB$M_KEY_NCMPR	64
 $EQU	XAB$V_DAT_NCMPR	7		; data record is not compressed
 $EQU	XAB$M_DAT_NCMPR	128

 $DEF	XAB$B_FLG	.BLKB		; key option flags
 $EQU	XAB$C_STG	0		; string
 $EQU	XAB$C_IN2	1		; signed 15 bit integer (2 bytes)
 $EQU	XAB$C_BN2	2		; 2 byte binary
 $EQU	XAB$C_IN4	3		; signed 31 bit integer (4 bytes)
 $EQU	XAB$C_BN4	4		; 4 byte binary
 $EQU	XAB$C_PAC	5		; packed decimal (1-16 bytes)
 $EQU	XAB$C_MAXDTP	5		; max. legal data type
 $DEF	XAB$B_DTP	.BLKB		; key field data type
 $DEF	XAB$B_NSG	.BLKB		; number of key segments
 $DEF	XAB$B_NUL	.BLKB		; nul key character
 $DEF	XAB$B_TKS	.BLKB		; total key field size (bytes)
 			; 1-254 = alternate keys)
 $DEF	XAB$B_REF	.BLKB		; key of reference (0=prim key,
 $DEF	XAB$W_MRL	.BLKW		; minimun record length to contain key field
 $DEF	XAB$W_IFL	.BLKW		; index bucket fill size (bytes)
 $DEF	XAB$W_DFL	.BLKW		; data bucket fil size (bytes)
 $EQU	XAB$S_POS	16
 $DEF	XAB$W_POS			; key field record offset positions
 $DEF	XAB$W_POS0	.BLKW		; segment 0
 $DEF	XAB$W_POS1	.BLKW		; segment 1
 $DEF	XAB$W_POS2	.BLKW		; segment 2
 $DEF	XAB$W_POS3	.BLKW		; segment 3
 $DEF	XAB$W_POS4	.BLKW		; segment 4
 $DEF	XAB$W_POS5	.BLKW		; segment 5
 $DEF	XAB$W_POS6	.BLKW		; segment 6
 $DEF	XAB$W_POS7	.BLKW		; segment 7
 $EQU	XAB$S_SIZ	8
 $DEF	XAB$B_SIZ			; key field segment sizes
 $DEF	XAB$B_SIZ0	.BLKB		; segment 0
 $DEF	XAB$B_SIZ1	.BLKB		; segment 1
 $DEF	XAB$B_SIZ2	.BLKB		; segment 2
 $DEF	XAB$B_SIZ3	.BLKB		; segment 3
 $DEF	XAB$B_SIZ4	.BLKB		; segment 4
 $DEF	XAB$B_SIZ5	.BLKB		; segment 5
 $DEF	XAB$B_SIZ6	.BLKB		; segment 6
 $DEF	XAB$B_SIZ7	.BLKB		; segment 7
 				 		; spare
 ;
 ; the positions of the above fields are dictated by the key descriptor
 ; record layout in the index file prologue.
 ;
 			.BLKW	1
 $DEF	XAB$L_KNM	.BLKL		; pointer to 32 character key name buffer
 $DEF	XAB$L_DVB	.BLKL		; first data bucket start vbn
 $DEF	XAB$C_KEYLEN_V2
 ;
 ; Additions for prologue 3 files
 ;
 $DEF	XAB$K_KEYLEN_V2			; old xabkey length
 $EQU	XAB$S_TYP	8
 $DEF	XAB$B_TYP			; key field segment types
 $DEF	XAB$B_TYP0	.BLKB		; segment 0
 $DEF	XAB$B_TYP1	.BLKB		; segment 1
 $DEF	XAB$B_TYP2	.BLKB		; segment 2
 $DEF	XAB$B_TYP3	.BLKB		; segment 3
 $DEF	XAB$B_TYP4	.BLKB		; segment 4
 $DEF	XAB$B_TYP5	.BLKB		; segment 5
 $DEF	XAB$B_TYP6	.BLKB		; segment 6
 $DEF	XAB$B_TYP7	.BLKB		; segment 7
 $EQU	XAB$C_PRG3	3		;  Prologue version three
 $EQU	XAB$C_PRG2	2		;  Prologue version two
 $EQU	XAB$C_PRG1	1		;  Prologue versoin one
 $DEF	XAB$B_PROLOG	.BLKB		; indicate prologue version desired (primary key only)
 				 		; spare
 			.BLKB	1
 				 		; spare
 			.BLKW	1
 $DEF	XAB$C_KEYLEN

 ;--
 ;++

 $DEF	XAB$K_KEYLEN			; xabkey length
 	$DEFEND	XAB,$GBL,KEYDEF

 	.ENDM	$XABKEYDEF
 
 ;
 ;		rms escape definitions
 ;
 ;  the following values identify various requests for non-standard rms
 ;  functions.  they are currently input to the $modify function in the
 ;  ctx field of the fab only if the esc bit is set in fop.  incorrect
 ;  use of these capabilties could cause rms to fail, hence great caution
 ;  should be exercised in their use.
 ;
 	.MACRO	$RMEDEF,$GBL

 	$DEFINI	RME,$GBL


 $EQU	RME$C_SETRFM	1		; change rfm, mrs, and fsz (if vfc) in ifab only

 	$DEFEND	RME,$GBL,DEF

 	.ENDM	$RMEDEF

