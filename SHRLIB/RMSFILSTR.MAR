 ;	$begin	rmsfilstr,v02-061
 ;
 ;****************************************************************************
 ;*									    *
 ;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
 ;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
 ;*  ALL RIGHTS RESERVED.						    *
 ;* 									    *
 ;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
 ;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
 ;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
 ;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
 ;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
 ;*  TRANSFERRED.							    *
 ;* 									    *
 ;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
 ;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
 ;*  CORPORATION.							    *
 ;* 									    *
 ;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
 ;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
 ;* 									    *
 ;*									    *
 ;****************************************************************************
 ;
 ;	internal rms file structure definitions
 ;
 ;	Modified By:
 ;
 ;	V02-061	CDS0001		C Saether		23-Dec-1981
 ;		Add default global buffer count field to prologue
 ;		vbn 1 for relative and isam files.
 ;
 ;	V02-060	KBT0001		Keith B Thompson	12-Nov-1981
 ;		Add ONC and CBT flags in the AOP area descriptor field
 ;		and correct the position of CTG.
 ;
 ;	V02-059	PSK0004		Paulina S. Knibbe	23-Oct-1981
 ;		Remove LCB_EXITS flag.
 ;
 ;	V02-058	MCN0007		Maria del C. Nasr	15-May-1981
 ;		Add compression constants.
 ;
 ;	V02-057	PSK0003		Paulina S. Knibbe	16-Apr-1981
 ;		Add KEY_COMPR and REC_COMPR bits to the KEY structure
 ;		Add constants for largest non-compressed data record,
 ;		primary key and index (SIDR key.
 ;
 ;	V02-056 PSK0002		Paulina S. Knibbe	19-Mar-1981
 ;		Add pointer size field to the BKT structure
 ;
 ;	V02-055 MCN0006		Maria del C. Nasr	16-Mar-1981
 ;		Modify the BKT, and IRC structures to increase record id
 ;		size to a word, and reflect other changes required for the
 ;		new ISAM structure.
 ;
 ;	V02-054	PSK0001		Paulina Knibbe	11-Mar-1981
 ;		Add definitions for per-segment datatypes to the KEY structure
 ;		Add another prologue version constant
 ;
 ;	V02-053 ras0053		Ron Schaefer	24-Nov-1980	14:48
 ;		merge RMSINT and RMSIDXSTR file structure definitions into
 ;		one file containing all on-disk structures and no in-memory
 ;		structures.
 ;
 ;	V02-052	REFORMAT	Keith B. Thompson	29-JUL-1980
 ;
 ;	V051	jak0045		J A Krycka	21-MAR-1980	15:00
 ;		remove IFB$V_DAP_FMODE.
 ;
 ;	V050	cds0075		C D Saether	21-JAN-1980	11:25
 ;		remove IFB$L_FWA_BDB, IFB$W_BKS_BYTES, IFB$W_BKS_RECS.
 ;
 ;	V049	ras0010		R A Schaefer	07-JAN-1980	16:45
 ;		re-arrange drc fields for valid did check.
 ;
 ;	V048	ras0009		R A Schaefer	20-DEC-1979	15:30
 ;		add FWA$T_RNM_FID to hold the saved fid from a rename
 ;		for checking bad rename directory operation.
 ;
 ;	V047	jak0029		J A Krycka	18-NOV-1979	11:00
 ;		add FWA$V_REMRESULT to denote that fal has returned resultant
 ;		string.
 ;
 ;	v046	tmh0003		Tim Halvorsen	02-NOV-1979
 ;		add FWA$L_DIRBDB to hold address of directory buffer bdb
 ;		add FWA$V_FILEFOUND bit to indicate that at least one file
 ;		has been found - used to return FNF vs. NMF.
 ;
 ;	V045	jak0025		J A Krycka	28-SEP-1979	17:00
 ;		add FWA$V_DEV_UNDER in conjunction with effort to
 ;		modify expanded and resultant name string processing to prefix
 ;		an underscore to node and device names that have been subject
 ;		to logical name translation.
 ;
 ;	V044			Tim Halvorsen	12-SEP-1979
 ;		add IFB$V_SEARCH bit to mark ifabs left during searches.
 ;
 ;	V043			Tim Halvorsen	11-SEP-1979
 ;		overlay the fib buffer with the node descriptors to reduce
 ;		the total space used by fwa.  increase the size of the file
 ;		name and type buffers due to the new maximum sizes which can
 ;		occur as a result of wild characters (i.e. *a*b*c*d*e etc).
 ;
 ;	V042	jak0023		J A Krycka	27-AUG-1979	18:00
 ;		move FWA$T_NODEBUF to NWA$T_NODEBUF and add FWA$Q_DIR1 thru
 ;		FWA$Q_DIR8 in conjunction with effort in RM0XPFN to allow
 ;		multiple node specs in a file specification.
 ;
 ;	v041	cds0022		C Saether	26-july-79	22:45
 ;		add IFB$V_SEQFIL to bookkeeping bits.
 ;
 ;	V040	cds0000		C Saether	16-JAN-1979	14:00
 ;		remove definition of lockabove from srchflags in irab
 ;		and add abovelckd to bookeeping bits
 ;
 ;	V039	wsk0000		W S Koenig	10-JAN-1979	1:25
 ;		fix problem w/ IDX_PTR overlapping w/ AS_DEV longwords
 ;
 ;	V038	jak0017		J A Krycka	28-DEC-1978	14:30
 ;		make IFB$L_NWA_PTR and IFB$L_FRB_PTR separate locations so that
 ;		networking and file sharing do not interfere with each other.
 ;
 ;	V037	ran0003		R A Newell	20-DEC-1978	17:35
 ;		file sharing and isam changes.
 ;
 ;	V036	jak0007		J A Krycka	17-DEC-1978	19:00
 ;		change values of FWA$C_MAXNODE and FWA$C_NODBUFSIZ.
 ;
 ;	V035	jak0006		J A Krycka	21-NOV-1978	16:40
 ;		add FWA$V_ACCSTR definition.
 ;
 ;	V034	ran0002		R A Newell	1-NOV-1978	09:49
 ;		RMS32 isam modifications.  additions of isam fields, take out
 ;		NWA, add PLG_VER, change ASB size, define PTR_VBN, update,
 ;		UPD_NRP, RFA_VBN, and RFA_ID fields.
 ;
 ;++
 
 ;
 ;	 prologue field definitions
 ;
 ;
 ;  common vbn1 format for indexed and relative files
 ;
 ;  (note: indexed file defintions not included at this time)
 ;
 	.MACRO	$PLGDEF,$GBL

 	$DEFINI	PLG,$GBL


 				 		; leave space for indexed file things
 			.BLKB	11
 $DEF	PLG$B_DBKTSIZ	.BLKB		; data bucket size
 				 		; filler
 			.BLKL	1
 $EQU	PLG$V_NOEXTEND	0		; no extend allowed (rel)
 $DEF	PLG$B_FLAGS	.BLKB		; flag bits
 				 		; space filler
 			.BLKB	85
 $DEF	PLG$B_AVBN	.BLKB		; vbn of first area descriptor
 $DEF	PLG$B_AMAX	.BLKB		; maximum number of areas
 $DEF	PLG$W_DVBN	.BLKW		; first data bucket vbn
 				 		; spare
 			.BLKW	1
 $DEF	PLG$L_MRN	.BLKL		; maximum record number (rel)
 $DEF	PLG$L_EOF	.BLKL		; eof vbn (rel)
 $EQU	PLG$C_VER_NO	1		; current prolog version number
 $EQU	PLG$C_VER_IDX	2		; new plg for indexed files
 $EQU	PLG$C_VER_3	3		; new plg for compression, space reclamation (plg 3)
 $DEF	PLG$W_VER_NO	.BLKW		; version number
 $DEF	PLG$W_GBC	.BLKW		; default global buffer count
 $DEF	PLG$C_BLN

 $DEF	PLG$K_BLN
 	$DEFEND	PLG,$GBL,DEF

 	.ENDM	$PLGDEF
 
 ;
 ;
 ;  relative file deletion control byte bit definitions
 ;
 	.MACRO	$DLCDEF,$GBL

 	$DEFINI	DLC,$GBL


						; (start with bit 2)
 $EQU	DLC$V_DELETED	2		; record deleted
 $EQU	DLC$M_DELETED	4
 $EQU	DLC$V_REC	3		; record exists (but may have been deleted)
 $EQU	DLC$M_REC	8

 	$DEFEND	DLC,$GBL,DEF

 	.ENDM	$DLCDEF
 
 ;
 ; index bucket definition
 ;
 ; this is the bucket format for RMS-11/RMS-32 index files.
 ;
 	.MACRO	$BKTDEF,$GBL

 	$DEFINI	BKT,$GBL

 	
 $DEF	BKT$B_CHECKCHAR	.BLKB		; bucket check character
 $DEF	BKT$B_AREANO			; area number form which bucket was allocated
 $DEF	BKT$B_INDEXNO	.BLKB		; index to which this bucket belongs (plg 3)
 $DEF	BKT$W_ADRSAMPLE	.BLKW		; address sample - low 16 bits of first vbn in bucket
 $DEF	BKT$W_FREESPACE			; displacement in bucket of first free byte
 $DEF	BKT$W_KEYFRESPC	.BLKW		; pointer to key's free space (plg 3)
 $DEF	BKT$W_NXTRECID			; next available word record id (plg 3)
 $DEF	BKT$B_NXTRECID	.BLKB		; next available record id
 $DEF	BKT$B_LSTRECID	.BLKB		; last id in range
 $DEF	BKT$L_NXTBKT	.BLKL		; vbn of next bucket
 $DEF	BKT$B_LEVEL	.BLKB		; bucket level number
 $EQU	BKT$V_LASTBKT	0		; last bucket in horizontal chain
 $EQU	BKT$M_LASTBKT	1
 $EQU	BKT$V_ROOTBKT	1		; root bucket
 $EQU	BKT$M_ROOTBKT	2
 $EQU	BKT$V_LAST_CONT	2		; last continuation bucket
 $EQU	BKT$M_LAST_CONT	4
 $EQU	BKT$V_PTR_SZ	3		; size of vbn pointers in this bucket
 $EQU	BKT$M_PTR_SZ	24
 $EQU	BKT$S_PTR_SZ	2
 $DEF	BKT$B_BKTCB	.BLKB		; bucket control bits
 $DEF	BKT$C_OVERHDSZ
 $DEF	BKT$K_OVERHDSZ			; length of bucket overhead
 				; only if count_dup set in index descriptor
 				; only for primary data level buckets
 $EQU	BKT$C_ENDOVHD	4			; end of bucket overhead
 $EQU	BKT$C_DATBKTOVH	2			; end of bucket overhead for data buckets
 $EQU	BKT$C_DUPBKTOVH	8			; additional end of data bucket overhead
 				;  when duplicates are allowed (LCB pointer
 				;  and dup count)
 $DEF	BKT$L_DUP_COUNT	.BLKL		; count of duplicates

 	$DEFEND	BKT,$GBL,DEF

 	.ENDM	$BKTDEF
 
 ;
 ; index record definition
 ;
 ; this is the definition of RMS-11/RMS-32 index file record formats
 ;	

 	.MACRO	$IRCDEF,$GBL

 	$DEFINI	IRC,$GBL


 $EQU	IRC$V_PTRSZ	0		; size of pointer
 $EQU	IRC$M_PTRSZ	3
 $EQU	IRC$S_PTRSZ	2
 $EQU	IRC$V_RECORDCB	2		; record control bits
 $EQU	IRC$M_RECORDCB	252
 $EQU	IRC$S_RECORDCB	6

 ;
 ; bits used for primary and secondary data levels
 ;
						; skip size of pointer field
 $EQU	IRC$V_DELETED	2		; record is deleted
 $EQU	IRC$M_DELETED	4
				
 $EQU	IRC$V_NOPTRSZ	4		; not pointer size
 $EQU	IRC$M_NOPTRSZ	16

 ;
 ; fields used only in primary data level
 ;
						; skip over first 3 bits
 $EQU	IRC$V_RRV	3		; rrv record
 $EQU	IRC$M_RRV	8
						; skip
 $EQU	IRC$V_DEL_COUNT	5		; count of deleted records
 $EQU	IRC$M_DEL_COUNT	32

 ;
 ; fields used only in secondary data level
 ;
						; skip 5 bits
 $EQU	IRC$V_KEYDELETE	5		; key deleted
 $EQU	IRC$M_KEYDELETE	32

 ;
 ; fields used only in index levels
 ;
						; space over other fields
 $EQU	IRC$V_HIGH_KEY	2		; no key value is present
 $EQU	IRC$M_HIGH_KEY	4
					; highest key value is implied
 $EQU	IRC$V_LAST_CONT	3		; last continuation bucket pointer is present
 $EQU	IRC$M_LAST_CONT	8

 			

 ;
 ; index bucket record
 ;
 $DEF	IRC$B_CONTROL	.BLKB		; record control byte
 				;  just present for consistency)
 $EQU	IRC$C_IDXPTRBAS	2			; used to determine size of pointer in index
 $EQU	IRC$C_IDXOVHDSZ	1			; includes record control byte
 	
 ;
 ; data bucket record
 ;
 $DEF	IRC$T_BUCKETPTR			; bucket pointer (not referenced in the code,
 	. = 0
 			.BLKB	1
 $DEF	IRC$B_ID	.BLKB		; record id

 ;
 ; prologue 3 data bucket record
 ;
 $DEF	IRC$B_RRV_ID	.BLKB		; rrv's id -- always in the same place
 	. = 0
 			.BLKB	1
 $DEF	IRC$W_ID	.BLKW		; record id
 ;
 ; constants
 ;
 $EQU	IRC$C_DATSZFLD	2			; size of size field in variable length records
 $EQU	IRC$C_DATPTRBAS	3			; used to determine size of RRV in data buckets,
 				;  and dup count in SIDR's
 $EQU	IRC$C_DATOVHDSZ	2			; includes the record control byte, and the id
 $EQU	IRC$C_FIXOVHDSZ	7			; the record overhead for fixed record
 $EQU	IRC$C_VAROVHDSZ	9			; record overhead for variable records
 ;
 ; prologue 3 constants
 ;
 $EQU	IRC$C_DATPTRBS3	4			; used to determine size of RRV in data buckets
 $EQU	IRC$C_DATOVHSZ3	3			; record control byte, and id
 $EQU	IRC$C_FIXOVHSZ3	9			; record control byte, id, and rrv in fixed
 				;  records
 $EQU	IRC$C_VAROVHSZ3	11			; record control byte, id, rrv, and size for
 				;  variable length recs
 $EQU	IRC$C_KEYCMPOVH	2			; key compression overhead
 $EQU	IRC$C_DATCMPOVH	3			; data compression overhead
 $DEF	IRC$W_RRV_ID	.BLKW		; rrv's id -- always in the same place

 	$DEFEND	IRC,$GBL,DEF

 	.ENDM	$IRCDEF
 
 	
 ;
 ; definitions for the key descriptors in the prologue
 ;
 ; these definitions are associated w/ the plg and area definitions
 ;
 	.MACRO	$KEYDEF,$GBL

 	$DEFINI	KEY,$GBL


 $DEF	KEY$L_IDXFL	.BLKL		; vbn for next key descriptor
 $DEF	KEY$W_NOFF	.BLKW		; offset to next key descriptor
 $DEF	KEY$B_IANUM	.BLKB		; index area number
 $DEF	KEY$B_LANUM	.BLKB		; level 1 area number
 $DEF	KEY$B_DANUM	.BLKB		; data area number
 $DEF	KEY$B_ROOTLEV	.BLKB		; root level
 $DEF	KEY$B_IDXBKTSZ	.BLKB		; index bucket size
 $DEF	KEY$B_DATBKTSZ	.BLKB		; data bucket size
 $DEF	KEY$L_ROOTVBN	.BLKL		; root bucket pointer
 $EQU	KEY$V_DUPKEYS	0		; duplicate key values allowed
 $EQU	KEY$M_DUPKEYS	1
 $EQU	KEY$V_CHGKEYS	1		; key value may change on $update operation
 $EQU	KEY$M_CHGKEYS	2
 $EQU	KEY$V_NULKEYS	2		; null key character enabled
 $EQU	KEY$M_NULKEYS	4
 $EQU	KEY$V_IDX_COMPR	3		; index is compressed
 $EQU	KEY$M_IDX_COMPR	8
 $EQU	KEY$V_INITIDX	4		; index must be initialized
 $EQU	KEY$M_INITIDX	16
 $EQU	KEY$V_COUNT_DUP	5		; maintain duplicate count
 $EQU	KEY$M_COUNT_DUP	32

						; space over dupkeys
 $EQU	KEY$V_NORFA	1		; no rfa fields in records (single key only)
 $EQU	KEY$M_NORFA	2
 $EQU	KEY$V_PRG_D_RFA	2		; delete records and rrv's may be purged
 $EQU	KEY$M_PRG_D_RFA	4
					; from file (disables fast delete)
				
				
				
 $EQU	KEY$V_KEY_COMPR	6		; (PLG3) Primary key is compressed in data record
 $EQU	KEY$M_KEY_COMPR	64
 $EQU	KEY$V_REC_COMPR	7		; (PLG3) Data record is compressed
 $EQU	KEY$M_REC_COMPR	128
 $EQU	KEY$C_MAX_DAT	10			; (PLG3) Maximum size of a non-compressed data
 				;  record
 $EQU	KEY$C_MAX_PRIMARY	6			; (PLG3) Maximum size of a non-compressed
 				;  primary key
 $EQU	KEY$C_MAX_INDEX	6			; (PLG3) Maximum size of a non-compressed
 				;  index and SIDR key
 $DEF	KEY$B_FLAGS	.BLKB		; flag bits
 $EQU	KEY$C_STRING	0			; string data type
 $EQU	KEY$C_SGNWORD	1			; signed binary word
 $EQU	KEY$C_UNSGNWORD	2			; unsigned binary word
 $EQU	KEY$C_SGNLONG	3			; signed binary long word
 $EQU	KEY$C_UNSGNLONG	4			; unsigned binary long word
 $EQU	KEY$C_PACKED	5			; packed decimal
 $EQU	KEY$C_MAX_DATA	5			; maximum data type value allowed
 $DEF	KEY$B_DATATYPE	.BLKB		; data type for key
 $DEF	KEY$B_SEGMENTS	.BLKB		; number of segments in key
 $DEF	KEY$B_NULLCHAR	.BLKB		; "null" character
 $DEF	KEY$B_KEYSZ	.BLKB		; total key size
 $DEF	KEY$B_KEYREF	.BLKB		; key of reference
 $DEF	KEY$W_MINRECSZ	.BLKW		; minimum record length
 $DEF	KEY$W_IDXFILL	.BLKW		; index fill quantity
 $DEF	KEY$W_DATFILL	.BLKW		; data fill quantity
 $DEF	KEY$W_POSITION			; key seg position
 $DEF	KEY$W_POSITION0	.BLKW		; another name for position 0
 $DEF	KEY$W_POSITION1	.BLKW		; position 1
 $DEF	KEY$W_POSITION2	.BLKW		; position 2
 $DEF	KEY$W_POSITION3	.BLKW		; position 3
 $DEF	KEY$W_POSITION4	.BLKW		; position 4
 $DEF	KEY$W_POSITION5	.BLKW
 $DEF	KEY$W_POSITION6	.BLKW
 $DEF	KEY$W_POSITION7	.BLKW
 $DEF	KEY$B_SIZE			; key segment size
 $DEF	KEY$B_SIZE0	.BLKB		; another name for size
 $DEF	KEY$B_SIZE1	.BLKB		; size 1
 $DEF	KEY$B_SIZE2	.BLKB
 $DEF	KEY$B_SIZE3	.BLKB
 $DEF	KEY$B_SIZE4	.BLKB
 $DEF	KEY$B_SIZE5	.BLKB
 $DEF	KEY$B_SIZE6	.BLKB
 $DEF	KEY$B_SIZE7	.BLKB
 $EQU	KEY$S_KEYNAM	32
 $DEF	KEY$T_KEYNAM	.BLKB	32	; key name
 $DEF	KEY$L_LDVBN	.BLKL		; first data bucket
 $DEF	KEY$B_TYPE			; key segment datatype (plg 3)
 $DEF	KEY$B_TYPE0	.BLKB		; another name for first datatype (plg 3)
 $DEF	KEY$B_TYPE1	.BLKB		; (plg 3)
 $DEF	KEY$B_TYPE2	.BLKB		; (plg 3)
 $DEF	KEY$B_TYPE3	.BLKB		; (plg 3)
 $DEF	KEY$B_TYPE4	.BLKB		; (plg 3)
 $DEF	KEY$B_TYPE5	.BLKB		; (plg 3)
 $DEF	KEY$B_TYPE6	.BLKB		; (plg 3)
 $DEF	KEY$B_TYPE7	.BLKB		; (plg 3)
 $DEF	KEY$C_BLN
 $EQU	KEY$C_SPARE	6			; these are spare words in key block (plg 3)

 $DEF	KEY$K_BLN			; length of key descriptor in the prologue (plg 3)
 	$DEFEND	KEY,$GBL,DEF

 	.ENDM	$KEYDEF
 
 ;
 ;
 ; definitions for the area descriptor in the prologue
 ;
 ;
 	.MACRO	$AREADEF,$GBL

 	$DEFINI	AREA,$GBL

 				 			; spare
 			.BLKB	1
 $DEF	AREA$B_FLAGS	.BLKB		; not currently used
 $DEF	AREA$B_AREAID	.BLKB		; area id
 $DEF	AREA$B_ARBKTSZ	.BLKB		; bucket size for area
 $DEF	AREA$W_VOLUME	.BLKW		; relative volume number
 $EQU	AREA$C_CYL	1			; cylinded alignment
 $EQU	AREA$C_LBN	2			; logical block alignment
 $EQU	AREA$C_VBN	3			; virtual block alignment
 $EQU	AREA$C_RFI	4			; allocate close to related file by fid
 $DEF	AREA$B_ALN	.BLKB		; extend allocation alignment
 $EQU	AREA$V_HARD	0		; absolute alignment or nothing
 $EQU	AREA$M_HARD	1
 $EQU	AREA$V_ONC	1		; locate on cylinder
 $EQU	AREA$M_ONC	2
				
 $EQU	AREA$V_CBT	5		; contiguous best try
 $EQU	AREA$M_CBT	32
				
 $EQU	AREA$V_CTG	7		; contiguous
 $EQU	AREA$M_CTG	128
 $DEF	AREA$B_AOP	.BLKB		; alignment options
 $DEF	AREA$L_AVAIL	.BLKL		; available (returned) buckets
 $DEF	AREA$L_CVBN	.BLKL		; start vbn for current extent
 $DEF	AREA$L_CNBLK	.BLKL		; number of blocks in current extent
 $DEF	AREA$L_USED	.BLKL		; number of blocks used
 $DEF	AREA$L_NXTVBN	.BLKL		; next vbn to use
 $DEF	AREA$L_NXT	.BLKL		; start vbn for next extent
 $DEF	AREA$L_NXBLK	.BLKL		; number of blocks in next extent
 $DEF	AREA$W_DEQ	.BLKW		; default extend quantity
 				 			; spare
 			.BLKB	2
 $DEF	AREA$L_LOC	.BLKL		; start lbn on volume
 $EQU	AREA$S_RFI	6
 $DEF	AREA$W_RFI	.BLKW	3	; related file id
 				 			; spare
 			.BLKB	12
 $DEF	AREA$W_CHECK	.BLKW		; checksum
 $DEF	AREA$C_BLN

 $DEF	AREA$K_BLN			; length of area descriptor in the prologue
 	$DEFEND	AREA,$GBL,DEF

 	.ENDM	$AREADEF

