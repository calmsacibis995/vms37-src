1 Errors
Errors are displayed in the format:
	%facility-l-code, text
where:
	"facility" is the name of the facility which produced the error
	(e.g. FOR for FORTRAN).
	"l" is a one letter code indicating the severity of the error.
	The severities are:
	    I - Informational
	    S - Success
	    W - Warning
	    E - Error
	    F - Severe error
	"code" is an abbreviation for the message text.

Further help for some of the more common errors can be found by
typing:		HELP Errors facility code
For more information, see the VAX/VMS System Messages and
Recovery Procedures Manual.
! BASERRORS.HLP - Help for BAS$ errors.  
! 1-002 SBL1002 Correct misspellings.  SBL 25-Sept-1980
! 1-001 - Original.  SBL 20-Feb-1980
!
2 BAS
VAX-11 BASIC error messages
3 ARGDONMAT
 Arguments don't match

 Explanation:  FATAL - The arguments in a  function  call  do  not
 match the arguments defined for the function, either in number or
 in type.

 User Action:  Change the arguments in the function call to  match
 those in the DEF, or change the arguments in the DEF.

3 ARGTOOLAR
 Argument too large in EXP

 Explanation:  FATAL - The program contains:

 o    An argument to the EXP function larger than 88, or

 o    An exponentiation operation that results in a number greater
      than 1E38.

 User Action:  Change the EXP argument to one in the valid  range,
 or reduce the size of the exponent.

3 ARRMUSSAM
 Arrays must be same dimension

 Explanation:  FATAL - The  program  attempts  to  perform  matrix
 addition   or  subtraction  on  input  arrays  with  a  different
 dimensions.

 User Action:  Redimension the arrays so  that  the  input  arrays
 have identical dimensions.

3 ARRMUSSQU
 Arrays must be square

 Explanation:  FATAL - The program attempts matrix inversion  (MAT
 INV) on an array that is not square.

 User  Action:   Redimension  the  array  to  be   square   before
 performing MAT INV.

3 BADDIRDEV
 Bad directory for device

 Explanation:  FATAL - The device directory does not exist  or  is
 unreadable.

 User Action:  Supply a valid directory.

3 BADRECIDE
 Bad record identifier

 Explanation:  FATAL - The program attempted a record access  that
 specified:

 o    A zero or negative record number on a RELATIVE file, or

 o    A null key value on an INDEXED file.

 User Action:  Change the record number or key specification to  a
 valid value.

3 BADRECVAL
 Bad RECORDSIZE value on OPEN

 Explanation:  FATAL - The value in the RECORDSIZE clause  in  the
 OPEN statement is zero or greater than 16384.

 User Action:  Change the value in the RECORDSIZE clause.

3 CANCHAARR
 Cannot change array dimensions

 Explanation:  FATAL -  The  program  attempts  to  redimension  a
 one-dimensional array to two dimensions or vice versa.

 User Action:  Change the arrays dimensions in the DIM statement.

3 CANFINFIL
 Can't find file or account

 Explanation:  FATAL - The specified file or directory is  not  on
 the device.

 User Action:  Supply a valid file specification.

3 CANINVMAT
 Can't invert matrix

 Explanation:  FATAL - The program attempts to invert  a  singular
 matrix.

 User Action:  Supply a matrix of the proper form for inversion.

3 CORFILSTR
 Corrupted file structure

 Explanation:  FATAL - RMS has detected an invalid file  structure
 on disk.

 User Action:  See your system manager.


3 DATFORERR
 Data format error

 Explanation:  WARNING - The program specifies a data type  in  an
 INPUT  or  READ  statement  that  does  not  agree with the value
 supplied.

 User Action:  Change the INPUT or READ statement, or supply  data
 of the correct type.

3 DATTYPERR
 Data type error

 Explanation:  FATAL - The program contains a value  of  incorrect
 data type.

 User Action:  Change the value to the correct data type.

3 DEVHUNWRI
 Device hung or write locked

 Explanation:  FATAL - The program attempted  an  operation  to  a
 hardware  device that is not functioning properly or is protected
 against writing.

 User  Action:   Check  the  device  on  which  the  operation  is
 performed.

3 DIFUSELON
 Differing use of LONG/WORD qualifiers

 Explanation:  FATAL - The main and subprograms were compiled with
 different LONG/WORD modes.

 User Action:   Recompile  one  of  the  programs  with  the  same
 qualifier as the other.

3 DIRERR
 Directive error

 Explanation:  FATAL - A  system  service  call  resulted   in  an
 error.

 User Action:  See the VAX/VMS I/O  User's  Guide  or  the  VAX-11
 Record Management Services Reference Manual.
3 DIVBY_ZER
 Division by 0

 Explanation:  FATAL - The program attempts to divide a  value  by
 zero.

 User Action:   Check  program  logic  and  change  the  attempted
 division, or trap the error in an error handler.

3 DUPKEYDET
 Duplicate key detected

 Explanation:  FATAL - In a PUT operation to an  indexed  file,  a
 duplicate  key  was  specified,  and DUPLICATES was not specified
 when the file was created.

 User Action:  Change the duplicate key,  or  re-create  the  file
 specifying DUPLICATES for that key.

3 ENDFILDEV
 End of file on device

 Explanation:  FATAL - The program attempted to read  data  beyond
 the end of the file.

 User Action:  None.  The program can trap this error in an  error
 handler.

3 ERRTRANEE
 ERROR trap needs RESUME

 Explanation:  FATAL - An error handler  attempts  to  execute  an
 END,   SUBEND,  FUNCTIONEND  or  FNEND  statement  without  first
 executing a RESUME statement.

 User Action:  Change the program logic so that the error  handler
 executes  a  RESUME  statement  before  executing an END, SUBEND,
 FUNCTIONEND or FNEND statement.

3 FATSYSIO_
 Fatal system I/O failure

 Explanation:  FATAL - An I/O error  has  occurred  in:   (1)  the
 system,  or  (2)  Record Management Services.  The last operation
 will not be completed.

 User Action:   See  the  VAX/VMS  System  Messages  and  Recovery
 Procedures Manual for RMS errors, or retry the operation.

3 FIEOVEBUF
 FIELD overflows buffer

 Explanation:  FATAL - A FIELD statement attempts to  access  more
 data than exists in the specified buffer.

 User Action:  Change the FIELD statement to  match  the  buffer's
 size, or increase the buffer's size.

3 FILACPFAI
 FILE ACP failure

 Explanation:   FATAL  -  The  operating  system's  file   handler
 reported an error to RMS.

 User Action:  See the VAX/VMS I/O  User's  Guide  or  the  VAX-11
 Record Management Services Reference Manual.

3 FILATTNOT
 File attributes not matched

 Explanation:  FATAL  -  The  following  attributes  in  the  OPEN
 statement do not match the corresponding attributes of the target
 file:

      ORGANIZATION

      BUCKETSIZE

      BLOCKSIZE

      RECORDSIZE

      Key  number,  size,   position   or   attributes   (CHANGES,
      DUPLICATES)

      Record format

 User Action:  Change the OPEN statement attributes to match those
 of the file or remove the clause.

3 FILEXPDAT
 File expiration date not yet reached

 Explanation:  FATAL - The program  attempted  to  delete  a  file
 before the file's expiration date was reached.

 User Action:  Change the file's expiration date.

3 FILIS_LOC
 File is locked

 Explanation:  FATAL - The program does not allow  shared  access,
 and  attempts  to  access  a file that has been locked by another
 user, or by the system.

 User Action:  Change the OPEN statement to allow shared access or
 wait until the file is released by other user(s).

3 FLOPOIERR
 Floating point error

 Explanation:   FATAL  -  A  program  operation  resulted   in   a
 floating-point  number  with  absolute  value  outside  the range
 10E-38 to 10E38.

 User Action:  Check program logic, or trap the error in an  error
 handler.

3 FNEWITFUN
 FNEND without function call

 Explanation:  FATAL - The  program  executes  a  FNEND  statement
 before executing a function call.

 User Action:   Check  program  logic  to  make  sure  that  FNEND
 statements  are  executed  only in multi-line DEFs, or remove the
 FNEND statement.

3 ILLALLCLA
 Illegal ALLOW clause

 Explanation:  FATAL - The value specified for  the  ALLOW  clause
 (sharing) is illegal for the type of file organization.

 User Action:  Change the ALLOW clause value.

3 ILLARGLOG
 Illegal argument in LOG

 Explanation:  FATAL - The program contains  a  negative  or  zero
 argument to the LOG or LOG10 function.

 User Action:  Supply an argument in the valid range.

3 ILLBYTCOU
 Illegal byte count for I/O
 Explanation:  FATAL - A PRINT or INPUT list  invoked  a  function
 that closed an I/O channel.

 User Action:  Change the function so that it does not  close  the
 I/O channel.

3 ILLEXIDEF
 Illegal exit from DEF*

 Explanation:  FATAL - A multi-line DEF* contains a branch  to  an
 END, SUBEND or FUNCTIONEND statement.

 User Action:  Change  the  program  logic  so  that  the  program
 executes  the  multi-line  DEF's FNEND statement before executing
 the END, SUBEND or FUNCTIONEND statement.

3 ILLFIEVAR
 Illegal FIELD variable

 Explanation:  FATAL - A FIELD statement contains a variable  that
 is  also  named  in  a  COMMON, MAP, SUB, FUNCTION, CALL, or MOVE
 statement.

 User Action:  Remove the variable from the  FIELD  statement,  or
 from the COMMON, MAP, SUB, FUNCTION, CALL, or MOVE statement.

3 ILLFILNAM
 Illegal file name
 Explanation:  FATAL - A file name  is:   (1)  too  long,  or  (2)
 incorrectly formatted, or (3) contains embedded blanks or invalid
 characters.

 User Action:  Supply a valid file specification.

3 ILLILLACC
 Illegal or illogical access

 Explanation:  FATAL - The requested access is impossible because:

 o    The attempted record operation and the ACCESS clause in  the
      OPEN statement are incompatible.

 o    The  ACCESS   clause   is   inconsistent   with   the   file
      organization.

 o    ACCESS READ or  APPEND  was  specified  when  the  file  was
      created.

 User Action:  Change the ACCESS clause.

3 ILLIO_CHA
 Illegal I/O channel

 Explanation:  FATAL  -  The  program  specified  an  I/O  channel
 outside the legal range.

 User Action:   Specify  I/O  channels  in  the  range  1  to  99,
 inclusive.

3 ILLKEYATT
 Illegal key attributes

 Explanation:    FATAL   -   An   invalid   combination   of   key
 characteristics is specified, either:

      NODUPLICATES and
      CHANGES, or

      CHANGES without
      DUPLICATES

 User Action:  Change the invalid key characteristics.

3 ILLNUM
 Illegal number

 Explanation:  FATAL - A value supplied to a numeric  variable  is
 incorrect, for example "ABC" and "1..2" are illegal numbers.

 User Action:  Supply numeric values of the correct form.

3 ILLOPE
 Illegal operation

 Explanation:  FATAL - The program attempts to:

 o    DELETE a record in a sequential file, or

 o    UPDATE a record on a magtape file, or

 o    Transpose a matrix, or perform a matrix multiplication, with
      the same array as source and destination, or

 o    Rewind a process-permanent file, or

 o    DELETE a record in a read-only file, or

 o    Assign a value to a virtual array  element  in  a  read-only
      file, or

 o    Perform a MARGIN operation on VIRTUAL file, or

 o    Perform an invalid operation on a VIRTUAL file, for example,
      using  GET  and  PUT  on  a VIRTUAL file, then attempting to
      reference a virtual array dimensioned on that file.

 User Action:  Change the illegal operation.

3 ILLRECACC
 Illogical record accessing

 Explanation:   FATAL  -  The  program  attempts  to  perform   an
 operation  that  is  invalid  for  the  specified  file type, for
 example, a random access on a sequential file.

 User Action:  Supply a valid operation  for  that  file  type  or
 change the file type.

3 ILLRECFIL
 Illegal record on file

 Explanation:  FATAL - A record contains  an  invalid  byte  count
 field.

 User Action:  Use the DCL DUMP command  to  check  the  file  for
 possible bad data.

3 ILLRESSUB
 Illegal RESUME to subroutine

 Explanation:  FATAL - While in an error handler activated  by  an
 ON  ERROR GO BACK, the error handler attempts to RESUME without a
 line number.

 User Action:  None;  you cannot RESUME to a line in  any  program
 module except the one containing the error handler.

3 ILLSWIUSA
 Illegal switch usage

 Explanation:  FATAL - The program attempts an illegal SYS call.

 User Action:  See the appropriate RSTS/E SYS call documentation.

3 ILLSYSUSA
 Illegal SYS(0) usage,

 Explanation:  FATAL - The program attempted an illegal SYS call.

 User Action:  See the appropriate RSTS/E SYS call documentation.

3 ILLUSADEV
 Illegal usage for device

 Explanation:  FATAL - The requested operation cannot be performed
 because:

 o    The device specification contains illegal syntax,

 o    The specified device does not exist on your system,

 o    The specified device  is  inappropriate  for  the  requested
      operation (for example, an indexed file access on magtape).

 User Action:  Supply the correct device type.

3 IMASQUROO
 Imaginary square roots

 Explanation:   FATAL  -  An  argument  to  the  SQR  function  is
 negative.

 User Action:  Supply arguments  to  the  SQR  function  that  are
 greater than or equal to zero.

3 INDNOTFUL
 Index not fully optimized

 Explanation:  WARNING - A record was successfully written  to  an
 INDEXED  file, however, the alternate key path was not optimized.
 This slows record access.

 User Action:  Delete the record and rewrite it.

3 INTERR
 Integer error

 Explanation:  FATAL -  The  program  contains  an  integer  whose
 absolute  value  is  greater  than 32767 in WORD mode, or greater
 than 2147483647 in LONG mode.

 User Action:  Use only integers in the valid range.

3 INVFILOPT
 Invalid file options

 Explanation:  FATAL - The  program  has  specified  invalid  file
 options in the OPEN statement.

 User Action:  Change the invalid file options.

3 INVKEYREF
 Invalid key of reference

 Explanation:  FATAL - The program  attempts  to  perform  a  GET,
 FIND,  or  RESTORE  on  an INDEXED file using an invalid KEY, for
 example, an alternate KEY that has not been defined.

 User Action:  Use a valid  KEY  in  the  GET,  FIND,  or  RESTORE
 statement.

3 INVRFAFIE
 Invalid RFA field

 Explanation:  FATAL - During a FIND or GET  by  RFA,  an  invalid
 record's file address was contained in the RAB.

 User Action:  Supply a correct RFA field.

3 IO_CHAALR
 I/O channel already open

 Explanation:  FATAL - The program attempted to OPEN channel  zero
 (the controlling terminal).

 User Action:  Remove the OPEN statement;  channel zero is  always
 open.

3 IO_CHANOT
 I/O channel not open

 Explanation:  FATAL - The program attempted  to  perform  an  I/O
 operation before OPENing the channel.

 User Action:  OPEN the channel before attempting an I/O operation
 to it.

3 KEYFIEBEY
 Key field beyond end of record

 Explanation:  FATAL -  The  position  given  for  the  key  field
 exceeds the maximum size of the record.

 User Action:  Specify a key field within the record.

3 KEYLARTHA
 Key larger than record

 Explanation:  FATAL - The key specification exceeds  the  maximum
 record size.

 User Action:  Reduce the size of the key specification.

3 KEYNOTCHA
 key not changeable

 Explanation:  FATAL - An UPDATE statement attempted to  change  a
 KEY  field  that  did  not  have  CHANGES  specified  in the OPEN
 statement.

 User  Action:   Remove  the  changed  key  field  in  the  UPDATE
 statement,  or  specify  CHANGES  for  that key field in the OPEN
 statement.  Note the primary key cannot be changed.

3 KEYSIZTOO
 Key size too large

 Explanation:  FATAL - The key length on a GET or FIND  is  either
 zero or larger than the key length defined for the target record.

 User Action:  Change the key specification in  the  GET  or  FIND
 statement.

3 KEYWAIEXH
 Keyboard wait exhausted

 Explanation:  FATAL - No input was received during the  execution
 of  a INPUT, LINPUT, or INPUT LINE statement that was preceded by
 a WAIT statement.

 User Action:  None;  you must supply input within  the  specified
 time.

3 MATDIMERR
 Matrix dimension error

 Explanation:  FATAL - The program:

 o    attempts to assign more than two dimensions to an array, or

 o    attempts to  reference  a  one-dimensional  array  with  two
      subscripts, or

 o    attempts to  reference  a  two-dimensional  array  with  one
      subscript.

 User Action:  Reduce the number of subscripts to one or  two,  or
 reference the array using the correct number of dimensions.

3 MAXMEMEXC
 Maximum memory exceeded

 Explanation:  FATAL - The program has insufficient string and I/O
 buffer  space  because:   (1)  its allowable memory size has been
 exceeded, or (2) the system's maximum memory  capacity  has  been
 reached.

 User Action:  Reduce the amount of string or I/O buffer space, or
 split the program into two or more modules.

3 MEMMANVIO
 Memory management violation

 Explanation:  FATAL - The program attempted to read or write to a
 memory location to which it was not allowed access.

 User Action:  If the program was compiled with /NOCHECK,  it  may
 be  exceeding an array bound;  recompile with /CHECK.  Otherwise,
 check program logic.

3 MISSPEFEA
 Missing special feature

 Explanation:  FATAL - The program attempts to use an  unavailable
 SYS call.

 User Action:  See the appropriate RSTS/E SYS call documentation.

3 MOVOVEBUF
 Move overflows buffer

 Explanation:  FATAL - In a MOVE statement, the combined length of
 elements in the I/O list exceeds size of the record just read.

 User Action:  Reduce the size of the I/O list,  or  increase  the
 file's RECORDSIZE.

3 NAMACCNOW
 Name or account now exists

 Explanation:  FATAL - The program attempted to RENAME a file  and
 a file with that name already exists.

 User Action:  Use the KILL statement to erase the old file before
 using RENAME to name the new file or use a different name.

3 NEGFILSTR
 Negative fill or string length

 Explanation:  FATAL - A MOVE statement I/O list contains  a  FILL
 item or string length with a negative value.

 User Action:  Change the FILL item or string length value  to  be
 greater than or equal to zero.

3 NODNAMERR
 Node name error

 Explanation:  FATAL - A file specification's node name contains a
 syntax error.

 User Action:  Supply a valid node name.

3 NOTENDFIL
 Not at end of file

 Explanation:  FATAL - The program attempted a PUT operation:  (1)
 on  a  sequential  file  before  the  last record, or (2) without
 opening the file for WRITE access.

 User Action:  OPEN a sequential file with ACCESS APPEND, or  OPEN
 the file with ACCESS WRITE.

3 NOTENODAT
 Not enough data in record

 Explanation:  FATAL - An INPUT statement did not find enough data
 in one line to satisfy all the specified variables.

 User Action:  Supply enough data in the  record,  or  reduce  the
 number of specified variables.

3 NOTIMP
 Not implemented

 Explanation:  FATAL - The program attempted to use a feature that
 does  not exist in this version of BASIC, for example, CHAIN with
 line number.

 User Action:  None.

3 NOTRANACC
 Not a random access device

 Explanation:  FATAL - The program attempts a random access  on  a
 device  that does not allow such access;  for example, a PUT with
 a record number to a magtape file.

 User Action:  Make the access sequential instead of random or use
 a suitable I/O device.

3 NO_CURREC
 No current record

 Explanation:  FATAL - The program attempts  a  DELETE  or  UPDATE
 when  the previous GET or FIND failed, or no previous GET or FIND
 was done.

 User Action:  Correct the cause of failure for the  previous  GET
 or  FIND,  or  make  sure  a GET or FIND was done, then retry the
 operation.

3 NO_PRIKEY
 No primary key specified

 Explanation:  FATAL - The program attempts to create  an  INDEXED
 file without specifying a PRIMARY KEY value.

 User Action:  Specify a PRIMARY KEY.

3 NO_ROOUSE
 No room for user on device

 Explanation:  FATAL  -  No  user  storage  space  exists  on  the
 specified device.

 User Action:  Delete files that are no longer needed.

3 ONEOR_TWO
 One or two dimensions only

 Explanation:  FATAL - The program contains a MAT  statement  that
 attempts to assign more than two dimensions to an array.

 User  Action:   Change  the  number  of  dimensions  in  the  MAT
 statement to one or two.

3 ON_STAOUT
 ON statement out of range

 Explanation:  FATAL - The index value in an ON GOTO or  ON  GOSUB
 statement  is  less  than  1  or  greater than the number of line
 numbers in the list.

 User Action:  Check program logic to make  sure  that  the  index
 value  is greater than or equal to one, and less than or equal to
 the number of line numbers in the ON GOTO or ON GOSUB statement.

3 OUTOF_DAT
 Out of data

 Explanation:  FATAL - A READ statement requested additional  data
 from an exhausted DATA list.

 User Action:  Remove the READ statement,  reduce  the  number  of
 variables in the READ statement, or supply more DATA items.

3 PRIKEYOUT
 Primary key out of sequence

 Explanation:  FATAL  -  A  sequential  PUT  to  an  INDEXED  file
 specifies  a  PRIMARY  KEY value lower than that of the preceding
 record.

 User Action:  Sort the records before using  PUT  on  an  indexed
 file.

3 PRIUSIFOR
 PRINT-USING format error

 Explanation:   FATAL  -  The  program  contains  a  PRINT   USING
 statement with an invalid format string.

 User Action:  Change the PRINT USING format string.

3 PROC__TRA
 Programmable ^C trap

 Explanation:  FATAL - A  CTRL/C  was  typed  at  the  controlling
 terminal.

 User Action:  None;  however, you can trap  this  error  with  an
 error handler.

3 PROLOSSOR
 Program lost-Sorry

 Explanation:  FATAL - A fatal system error caused your program to
 be lost.

 User Action:  This error should never occur.  Submit  a  Software
 Performance Report.

3 PROVIO
 Protection violation

 Explanation:  FATAL - The program attempted to read or write to a
 file whose protection code did not allow the operation.

 User  Action:   Use  a  different  file,  or  change  the  file's
 protection code or the attempted operation.

3 RECALREXI
 Record already exists

 Explanation:  FATAL  -  An  attempted  random  access  PUT  on  a
 relative file has encountered a pre-existing record.

 User Action:  Specify a different record number for  the  PUT  or
 delete the record.

3 RECBUCLOC
 Record/bucket locked

 Explanation:  FATAL - The program attempts to access a record  or
 bucket that has been locked by another program.

 User Action:  Retry the operation.

3 RECFILTOO
 Record on file too big

 Explanation:  FATAL - The specified record  is  longer  than  the
 input buffer.

 User Action:  Increase the input buffer's size.


3 RECHASBEE
 Record has been deleted

 Explanation:  FATAL - A record previously located by  its  Record
 File Address (RFA) has been deleted.

 User Action:  None.

3 RECNOTFOU
 Record not found

 Explanation:  FATAL - A random access GET or FIND  was  attempted
 on a deleted or nonexistent record.

 User Action:  None.

3 RECNUMEXC
 RECORD number exceeds maximum

 Explanation:  FATAL - The specified  record  number  exceeds  the
 maximum specified for this file.

 User Action:  Reduce the specified record  number.   The  maximum
 record  number  cannot  be  specified  in  BASIC;  it is either a
 default, or it was specified by a non-BASIC program when the file
 was created.

3 REDARR
 Redimensioned array

 Explanation:  FATAL - The  program  attempts  to  redimension  an
 array to have more elements than were originally dimensioned.

 User Action:  Change the statement that attempts the  redimension
 or increase the original number elements.

3 RESNO_ERR
 RESUME and no error

 Explanation:  FATAL - The program  executes  a  RESUME  statement
 outside of the error handling routine.

 User Action:  Check program logic to make sure  that  the  RESUME
 statement is executed only in the error handler.

3 RETWITGOS
 RETURN without GOSUB

 Explanation:  FATAL - The program  executes  a  RETURN  statement
 before a GOSUB.

 User Action:  Check  program  logic  to  make  sure  that  RETURN
 statements are executed only in subroutines, or remove the RETURN
 statement.

3 RRVNOTFUL
 RRV not fully updated,

 Explanation:  FATAL - RMS wrote a record  successfully,  but  did
 not  update one or more Record Retrieval Vectors.  Therefore, you
 cannot retrieve any records associated with those vectors.

 User Action:  Delete the record and rewrite it.

3 SCAFACINT
 SCALE factor interlock

 Explanation:  FATAL - A subprogram was compiled with a  different
 SCALE factor than the calling program.

 User Action:  Recompile one of the programs with a  scale  factor
 that matches the other.

3 SIZRECINV
 Size of record invalid

 Explanation:  FATAL - The program contains a COUNT  specification
 that is invalid because:

 o    COUNT equals zero, or

 o    COUNT exceeds the maximum size of the record, or

 o    COUNT conflicts with the actual size of the  current  record
      during a sequential file UPDATE on disk, or

 o    COUNT does not equal  the  maximum  record  size  for  fixed
      format records.

 User Action:  Supply a valid COUNT value.

3 STO
 Stop

 Explanation:   INFORMATION  -  The  program   executed   a   STOP
 statement.

 User Action:  Continue execution by typing CONTINUE or  terminate
 execution by typing EXIT.

3 STRTOOLON
 String too long

 Explanation:  FATAL - The program contains a string  longer  than
 65535 bytes.

 User Action:  Reduce the length of the string.

3 RECATTNOT
 Record attributes not matched

 Explanation:   FATAL  -  A  RECORDTYPE  clause   specifies   file
 attributes that do not match those of the file.

 User Action:  Change the RECORDTYPE attribute to  match  that  of
 the file.

3 SUBOUTRAN
 Subscript out of range

 Explanation:  FATAL - The program attempts to reference an  array
 element outside of the array's DIMENSIONed bounds.

 User Action:  Check program logic to make  sure  that  all  array
 references are to elements within the array boundaries.

3 SYNERR
 Syntax error

 Explanation:   FATAL  -  A  program  statement   is   incorrectly
 formatted.

 User Action:  This error  should  never  occur  in  the  run-time
 environment.  Submit a Software Performance Report.

3 TAPBOTDET
 Tape BOT detected

 Explanation:  FATAL - The program attempts a rewind or  backspace
 operation  on  a  magtape that is already at the beginning of the
 file.

 User Action:  Check program logic;  do not rewind or backspace if
 the magtape is at the beginning of the file.

3 TAPNOTANS
 Tape not ANSI labelled

 Explanation:   FATAL  -  The  program  attempts   to   access   a
 file-structured magtape that does not have an ANSI label.

 User Action:  Determine the magtape's format by mounting it  with
 the  /FOREIGN  qualifier and using the DCL DUMP command.  You can
 then access it as a non-file-structured magtape.

3 TAPRECNOT
 Tape records not ANSI

 Explanation:  FATAL - The records in the magtape you accessed are
 neither ANSI D nor ANSI F format.

 User Action:  Determine the magtape's format by mounting it  with
 the /FOREIGN qualifier and using the DUMP DCL command.

3 TERFORFIL
 Terminal format file required

 Explanation:  FATAL -  The  program  attempted  to  use  PRINT #,
 INPUT #, LINPUT #, MAT INPUT #, MAT PRINT #, or PRINT USING  # to
 access a RELATIVE, INDEXED, or VIRTUAL file.

 User Action:  Supply a terminal-format file.

3 TOOFEWARG
 Too few arguments

 Explanation:   FATAL  -  A  function  call  or  SUB  or  FUNCTION
 statement  passed fewer arguments than were defined in the DEF or
 subprogram.

 User Action:  Change the number of arguments to match the  number
 defined in the DEF or subprogram.

3 TOOMANARG
 Too many arguments

 Explanation:  FATAL - A  function  call  or  a  SUB  or  FUNCTION
 statement passed more arguments than were expected.

 User Action:  Reduce the number of arguments.  A SUB or  FUNCTION
 statement can pass a maximum of 32 arguments; a function call can
 pass a maximum of eight arguments.

3 VIRARRDIS
 Virtual array not on disk

 Explanation:  FATAL  -  The  program  attempted  to  reference  a
 virtual array on a non-disk device.

 User Action:  Virtual arrays must be on disk;   change  the  file
 specification in the OPEN statement for this array.

3 VIRARROPE
 Virtual array not yet open

 Explanation:  FATAL  -  The  program  attempted  to  reference  a
 virtual array before OPENing the associated disk file.

 User Action:  OPEN the disk file  containing  the  virtual  array
 before referencing the array.

3 VIRBUFTOO
 Virtual buffer too large

 Explanation:  FATAL - The program attempted to access  a  VIRTUAL
 file and the buffer size was not a multiple of 512 bytes.

 User Action:  Change the I/O buffer  to  be  a  multiple  of  512
 bytes.

3 WHA
 What?

 Explanation:  FATAL - A command or immediate mode statement could
 not be processed.

 User Action:  Check for illegal verbs or improper formats.
2 COB
 VAX-11 COBOL Error Messages

! COBOL Runtime error message HELP file		Edit: LEB1010
!
! Revision History
! ----------------
! 1-001 Orignal. RKR 12-DEC-1979
! 1-002 Reallign text.  RKR 14-DEC-1979
! 1-003 Remove FAO descriptors from text.  SBL 19-Dec-1979
! 1-004 Removed blank lines at beginning of file. RKR 31-DEC-1979
! 1-005 Change text for SUBOVELON and ORGNOTMAT. RKR 08-JAN-1980
! 1-006 Correct misspellings.  SBL 25-Sept-1980
! 1-007 Added the errors LSTHNDUSE,LSTHNDLDB,EXPDBOVER,KEYNOTMAT
!	and UNLUNOFIL for V3A.  LEB 20-AUG-1981
! 1-008 Added the errors RECNOTLOC and UNLNO_CUR for V3A.  LEB 1-DEC-1981
! 1-009 Updated text for UNLNO_CUR and deleted RECNOTLOC.  LEB 1-DEC-1981
! 1-010 Cleaned up the complete text file.  LEB 18-JAN-1982
!
3 CALFAI
 CALL failed on routine

 Explanation:  Failure to CALL the specified routine.   This
 may be due to one of several possible conditions:

     a.  The routine name  is  too  long  (greater  than  31
         characters).

     b.  The routine name is too  short  (for  example,  all
         blanks)

     c.  The routine name contains invalid characters.

     d.  The named routine is not in the linked image.

 User Action:   Either code the routine name  to  conform  to
 the  syntax  rules  for  proper  routine  name  formation or
 relink the image to include the missing  routine.

3 CANFAIL
 CANCEL failed on routine

 Explanation:  Failure  to  CANCEL  the  specified  routine.
 This may be due to a number of problems including:

     a.  The routine name  is  too  long  (greater  than  31
         characters).

     b.  The routine name is too  short  (for  example,  all
         blanks)

     c.  The routine name contains invalid characters.

     d.  The named routine is not in the linked image.

 User Action:   Either code the routine name  to  conform  to
 the  syntax  rules  for  proper  routine  name  formation or
 relink the image to include the missing  routine.

3 DELINCOPE
 DELETE on file incompatible with OPEN mode

 Explanation:  The DELETE operation is not  compatible  with
 the  open  mode  of the file.  The file status variable, if
 present, has been set to 94.  No applicable  USE  procedure
 was found.

 User Action:   Examine the mode in which  the file is opened
 (prior to the attempted DELETE  operation) and make the open
 mode consistent with the  DELETE operation.

3 DELNO_R_S
 attempting DELETE on file without previous READ or  START

 Explanation:  Attempting to perform a DELETE on  this  file
 without   having  previously  performed  a  READ  or  START
 operation.  The file status variable, if present, has  been
 set to 93.  No applicable USE procedure was found.

 User Action:   Your program must execute a  READ  or   START
 operation  (in  sequential  access mode) immediately  before
 executing the DELETE operation.  This must occur  for   each
 execution of the DELETE operation.

3 DELUNOFIL
 attempting DELETE on unopened file

 Explanation:  Attempting to perform  a  DELETE  before  the
 file  is opened.  The file status variable, if present, has
 been set to 94.  No applicable USE procedure was found.

 User Action:  Your  program  must  execute  an  appropriate
 OPEN  operation  before  attempting  to  perform  a  DELETE
 operation on the file.

3 EOFON_ACC
 end-of-file detected on ACCEPT from file

 Explanation:  An  end-of-file  condition  was  detected  in
 executing an ACCEPT statement.

 User  Action:  You  typed  a  CNTRL/Z,  which   caused   an
 end-of-file  condition  for  an  ACCEPT  statement.  If you
 wish to use CNTRL/Z as an end-of-file indicator, you should
 code the input operations using an ACCEPT AT END statement.

3 ERRDURACC
 error during ACCEPT from file

 Explanation:   An error condition was  detected  by  RMS  in
 executing   the  ACCEPT  operation.   The  subsequent  error
 message is the RMS error code associated with this error.

 User Action:   You typed an illegal character (such as BREAK
 key).   If  you  wish to trap such illegal input characters,
 code the input operation using a COBOL  READ  statement  and
 declare an appropriate USE procedure to handle the error.

3 ERRDURDIS
 error during DISPLAY on file

 Explanation:   An error condition was  detected  by  RMS  in
 executing  the  DISPLAY  operation.   The  subsequent  error
 message is the RMS error code associated with this error.

 User Action:   Examine the logical  name  assignment  and/or
 the  type  of  device  to  which  the  DISPLAY  statement is
 attempting to write output information.

3 ERRDURSOR
 error during SORT or MERGE

 Explanation:   An error has occurred during a SORT or  MERGE
 operation.   The  subsequent error message is the associated
 SORT or MERGE error code.

 User Action:   Examine the logic of the program to determine
 why  an  error  is  occurring  during  a  SORT or MERGE.  In
 particular, if the program contains input procedures for the
 SORT  or  MERGE  operation, ensure that at least one RELEASE
 operation is executed in the input procedure.  Failure to do
 so can cause this error condition.

3 ERRON_FIL
 error on file

 Explanation:   An error status has been returned by RMS that
 is  not  recognized  by  the VAX-11 COBOL I/O error handler.
 The subsequent error message is  the  associated  RMS  error
 code.  The file status variable, if present, has been set to
 30 (except for a CLOSE operation -- file status =  98).   No
 applicable USE procedure has been found.

 User Action:   Examine the subsequent error  message  issued
 by  RMS  and  respond accordingly, or code an applicable USE
 procedure to handle the I/O error.

3 EXPDBOVER
 expression  value  in  database  argument  list   overflows
 longword

 Explanation:   The value of an offset or  relative  position
 integer expression in a database record selection expression
 cannot be contained in a longword.

 User Action:   Determine why the  value  is  too  large  and
 correct  the program to use a value that is representable in
 a longword.

3 FAIGET_EF
 failure to get event flag

 Explanation:   An   internal   operation   associated   with
 execution  of  the  CANCEL  operation requires an event flag
 number.  The attempt to allocate the event flag  number  has
 failed.

 User  Action:   The  process  associated  with  your   COBOL
 program   has  allocated  a  number  of  event  flags.   The
 execution of the CANCEL operation  has  requested  one  more
 event  flag  than  is  available to the process.  Deallocate
 some  event  flag  before  executing   the   COBOL   program
 containing the CANCEL operation.

3 FAIGET_VM
 failure to get virtual memory

 Explanation:   An internal  operation  associated  with  the
 execution  of  an  ACCEPT  or DISPLAY statement requires the
 allocation  of  dynamic  virtual  memory.   The  attempt  to
 allocate this space has failed.

 User Action:   The executable  image  containing  the  COBOL
 ACCEPT  or  DISPLAY  operation  is using a large quantity of
 virtual memory.  The execution  of  the  ACCEPT  or  DISPLAY
 statement   has   requested  more  dynamic  memory  than  is
 available to the executable image.  Your  program  must  use
 less virtual memory if the COBOL ACCEPT or DISPLAY operation
 is to work successfully.

3 FATINTERR
 fatal internal error

 Explanation:   An internal  consistency  check  has  failed.
 This  represents  an  internal error in the Run-Time Library
 and should be reported to Digital Equipment  Corporation  by
 software performance report.

 User Action:   Either discuss this  error  with  your  local
 software support specialist or submit a software performance
 report with supporting documentation, including  the  system
 traceback listing.

3 FILALRCLO
 file already closed

 Explanation:   Attempting to CLOSE a file  that  is  already
 closed.   The file status variable, if present, has been set
 to 94.  No applicable USE procedure has been found.

 User  Action:   Examine  the  logic  of  your  program   and
 eliminate the redundant CLOSE operation.  Alternatively, you
 may discover the inadvertent omission of performing an  OPEN
 on this file.

3 FILALRLOC
 file is already locked

 Explanation:   In the file sharing  environment,  attempting
 to  open  a  file  for  which  another process has exclusive
 access.  The file status variable, if present, has been  set
 to 91.  No applicable USE procedure has been found.

 User Action:   Declare an applicable USE procedure for  this
 file to handle this I/O condition.

3 FILALROPE
 file is already open

 Explanation:   Attempting to open a  file  that  is  already
 open.  The file status variable, if present, has been set to
 94.  No applicable USE procedure has been found.

 User  Action:   Examine  the  logic  of  the   program   and
 eliminate  the redundant OPEN operation.  Alternatively, you
 may declare an  applicable  USE  procedure  to  handle  this
 error.

3 FILCLOLOC
 file is closed with LOCK

 Explanation:   Attempting to open a  file  that  is  already
 closed with LOCK.  The file status variable, if present, has
 been set to 94.  No applicable USE procedure has been found.

 User  Action:   Examine  the  logic  of  the   program   and
 eliminate   the   attempted  OPEN  operation  on  the  file.
 Alternatively, you may declare an applicable  USE  procedure
 to handle the error.

3 FILNOTFOU
 file not found on OPEN

 Explanation:   The named  file  was  not  found  during  the
 execution  of the OPEN statement.  The file status variable,
 if present, has been set to 97.  No applicable USE procedure
 has been found.

 User Action:   Examine the referenced directory to check for
 the  existence  of the named file.  Another common source of
 this error is a mistake in spelling the  file  specification
 for the file.

3 GOTO_ALT
 GO TO with no preceding ALTER

 Explanation:   Attempting to perform a GO  TO  that  has  no
 preceding ALTER.

 User Action:   Examine the logic of the  program  to  ensure
 that  the  execution  of  an  ALTER  statement  precedes the
 execution of the referenced GO TO statement.

3 INTDIVZER
 intermediate divide by zero

 Explanation:   Attempting to divide  by  COBOL  Intermediate
 Temporary that has a value of zero.

 User Action:   Examine the referenced expression in which  a
 division  operation occurs and determine why the divisor has
 a zero value.

3 INTEXPOVE
 intermediate exponent overflow

 Explanation:   A COBOL  Intermediate  Temporary  is  created
 that has an exponent that is greater than +99.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  an  arithmetic  operation and determine
 what is causing a COBOL Intermediate Temporary to be created
 with too large an exponent.

3 INTEXPUND
 intermediate exponent underflow

 Explanation:   A COBOL  Intermediate  Temporary  is  created
 that has an exponent less than -99.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  an  arithmetic  operation and determine
 what is causing a COBOL Intermediate Temporary to be created
 with too small an exponent.

3 INTRESOPE
 intermediate reserved operand

 Explanation:   Encountering  a  reference  to  a  previously
 created  COBOL  Intermediate  Temporary  whose  exponent  is
 greater than +99 or less than -99.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  an  arithmetic  operation and determine
 what is causing a COBOL Intermediate Temporary to be created
 with  too  large  or  too  small an exponent in a previously
 executed statement.

3 INVARG
 invalid argument

 Explanation:   Internal consistency checking has detected an
 invalid  argument  being  passed  to  a routine in the COBOL
 Run-Time Library.  This represents  an  internal  error  and
 should be reported to Digital Equipment Corporation.

 User Action:   Submit a software performance report with the
 appropriate  supporting  documentation, including the system
 traceback listing.

3 INVDECDAT
 invalid decimal data

 Explanation:   Invalid decimal data has been encountered  in
 the  course of converting a numeric DISPLAY data item into a
 packed number.  One or more of the  following  problems  may
 exist:

     a.  The length of the source string is outside  of  the
         range 0 through 31.

     b.  The length of the destination packed decimal string
         is outside of the range 0 through 31.

     c.  The source string contains  an  invalid  byte.   An
         invalid byte is:

         -   Any character other than ASCII "0" through  "9"
             in a digit byte or an ASCII "+" or a space or a
             hyphen in the sign byte of a  leading  separate
             numeric data item.

         -   Any character other than ASCII "0" through  "9"
             in  any  high-order  byte  (that  is,  any byte
             except  the  least  significant  byte)   in   a
             trailing numeric data item.

     d.  In  the  case  of  trailing  numeric   input,   the
         translation of the least significant digit produces
         an invalid decimal digit or sign nibble.


 User  Action:   This  error  usually   occurs   when   space
 characters  are used in lieu of insignificant, leading, zero
 digit  positions  for  numeric  fields.   These  fields  are
 commonly  found  within  records  on  a  file.  Examine such
 numeric fields on the file  and  replace  all  insignificant
 leading spaces in these fields with numeric zero characters.
 Alternatively, before referencing these fields in arithmetic
 operations,    use   the   INSPECT   statement   to   change
 insignificant space characters to  zeros  in  these  fields.
 Another  alternative  is the NUMERIC class test to determine
 if numeric data items contain numeric characters only.  This
 class  test  should  be  executed  before these numeric data
 items are referenced in arithmetic operations.

3 INVDECDIG
 invalid decimal digit

 Explanation:   An invalid decimal digit has been encountered
 in the course of converting a packed decimal number.

 User Action:   Examine the logic of the program to determine
 why  illegal  data  is  being  discovered  in converting the
 packed decimal number.

3 INVLINVAL
 invalid LINAGE value on file

 Explanation:   An invalid value has been encountered in  one
 of the data names associated with the LINAGE clause for this
 file.

 User  Action:   Examine  the  logic  of  the   program   and
 determine  why  a data name value associated with the LINAGE
 clause  does  not  fall  within  the  range  of  values   as
 prescribed in the COBOL rules for the LINAGE clause.

3 KEYNOTMAT
 attempting to open indexed file whose actual  keys  do  not
 match those declared

 Explanation:   An OPEN was  attempted  on  an  indexed  file
 whose  keys  (as  described  in the program) do not have the
 same data-type, size, and position within the record as when
 the  file  was  created.   The  file  status  data  item, if
 specified, has been set to 94.  No applicable USE  procedure
 has been found.

 User Action:   Run SYS$SYSTEM:DSP to  determine  the  actual
 keys  within the file and change the program to describe the
 keys correctly.

3 LSTHNDLDB
 lost handler for database exception - environment corrupted

 Explanation:  The default  COBOL  handler  COB$$HANDLER  was
 deleted,  or a new handler was established that did not call
 COB$$HANDLER when a  program  was  attempting  to  execute a
 GLOBAL USE procedure for a DB-EXCEPTION.

 User Action:   Do not establish a new handler or include  in
 the  new  handler  a  call to  COB$$HANDLER for unrecognized
 conditions.

3 LSTHNDUSE
 lost handler for a USE procedure - environment corrupted

 Explanation:   The default  COBOL  handler COB$$HANDLER  was
 deleted,  or a new handler was established that did not call
 COB$$HANDLER when a  program  was  attempting  to  execute a
 GLOBAL USE procedure for an I/O statement.

 User Action:   Do not establish a new handler or include  in
 the  new  handler  a  call to  COB$$HANDLER for unrecognized
 conditions.

3 NESERRPER
 nesting error for PERFORM

 Explanation:   A logic error has  been  encountered  in  the
 order in which the nesting of PERFORM ranges are exited.

 User Action:   PERFORM ranges  must  be  exited  in  reverse
 order   from  which  these  PERFORM  ranges  are  activated.
 Examine the logic of the PERFORM range nesting  to  discover
 why  these PERFORM ranges are not exited in reverse order of
 their activation.

3 NO_SPACE
 no file space on device for file

 Explanation:   During the course of an OPEN,  a  failure  to
 find  additional space  on  a  particular  device  has  been
 detected.  The file status variable, if  present,  has  been
 set to 95.  No applicable USE procedure has been found.

 User Action:   Most likely, you have  many  outdated  and/or
 transient  files  on the device.  Examine the directories on
 the  particular  device  and  free-up  sufficient  space  by
 purging  or deleting unused files, then resubmit the program
 for execution.

3 OCCDEPOVE
 OCCURS DEPENDING value overflows longword

 Explanation:   The value of the data name associated with an
 OCCURS DEPENDING phrase cannot be contained in a longword.

 User Action:   Examine the referenced  line  in  the  source
 program  containing  an  implicit reference to the data name
 associated OCCURS DEPENDING phrase  to  determine  why  this
 value has overflowed a longword value.

3 ORGNOTMAT
 attempting to open file whose actual organization does  not
 match that declared

 Explanation:   There is a mismatch between the  organization
 of  the file as declared in the program and the organization
 of the file as it was created.  This mismatch is encountered
 on  the  OPEN  operation.   The  file  status  variable,  if
 present, has been set to 94.  No  applicable  USE  procedure
 has been found.

 User  Action:   Examine   the   program   and   change   the
 declaration  of  the  file's  organization to match the file
 organization attributes (sequential, relative,  or  indexed)
 when the file was initially created.

3 REAINCOPE
 READ on file incompatible with OPEN mode

 Explanation:   The  file  was  opened  in  a  mode  that  is
 incompatible  with  a  READ operation (that is, an open mode
 for which  READ  operations  are  disallowed).   This  error
 usually  represents bad logic in the user program.  The file
 status variable,  if  present,  has  been  set  to  94.   No
 applicable USE procedure has been found.

 User Action:   Examine the logic of the program to determine
 why a READ operation that is incompatible with the open mode
 is being attempted.  Change the open mode to allow the  READ
 operation or eliminate the READ operation.

3 REASMAMIN
 attempting READ of variable  length  smaller  than  minimum
 allowed from file

 Explanation:   Attempting to READ a record that  is  smaller
 than  the  minimum length record declared in the program for
 this file.  The file status variable, if present,  has  been
 set to 94.  No applicable USE procedure has been found.

 User Action:   Examine the length of the record on the  file
 being  read  and  then  change  the  minimum  record  length
 declared in the program for this file to allow a  successful
 READ operation on the record.

3 REAUNOFIL
 attempting READ on unopened file

 Explanation:   Attempting a READ operation on a file that is
 not  open  at  this  time.   This error usually represents a
 logic error in the user program.  The file status  variable,
 if present, has been set to 94.  No applicable USE procedure
 has been found.

 User Action:   Examine the logic of the program to determine
 why  a  READ  operation  is  attempted  on an unopened file.
 Change the logic of the program by opening the  file  or  by
 eliminating the READ operation.

3 RECACTPER
 recursive activation of PERFORM

 Explanation:   Attempting to PERFORM a paragraph or  section
 that   is  already  activated  due  to  a  previous  PERFORM
 statement.   This   constitutes   an   attempted   recursive
 activation of the paragraph or section and is illegal in the
 COBOL language.  The program must execute an EXIT  statement
 from  the  paragraph  or  section  before  this paragraph or
 section can be the subject of s subsequent PERFORM.

 User Action:   Examine the logic of the program to determine
 why  an  EXIT  from  the  paragraph  or section is not being
 executed before the subsequent PERFORM of the same paragraph
 or section.

3 RECACTUSE
 recursive activation of USE procedure

 Explanation:  Attempting  to   activate   (enter)   a   USE
 procedure  while that USE procedure is already active.  USE
 procedures are activated (or entered)  in  response  to  an
 error  or  condition  associated  with  an  I/O  operation.
 Within that USE procedure, another I/O operation  has  been
 attempted  that  caused  this  USE  procedure to be entered
 recursively before exiting from the initial  entry  to  the
 USE  procedure.   This  recursive  activation  of  the  USE
 procedure is illegal in the COBOL language.

 User  Action:  Examine  the  logic  of   the   program   to
 ascertain  the  condition  causing the recursive activation
 of the USE procedure and eliminate that  condition.

3 RECLOCDEL
 record on file is already locked (DELETE attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  DELETE  a  record  that  is  already  locked by another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCREA
 record on file is already locked (READ attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  READ  a  record  that  is  already  locked  by  another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCREW
 record on file is already locked (REWRITE attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  REWRITE  a  record  that  is  already locked by another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCSTA
 record on file is already locked (START attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  perform  a START operation on a record already locked by
 another, contending process.  The file status  variable,  if
 present,  has  been  set to 92.  No applicable USE procedure
 has been found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCWRI
 record on file is already locked (WRITE attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  WRITE  a  record  that  is  already  locked  by another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 REWINCOPE
 REWRITE on file incompatible with OPEN mode

 Explanation:   The REWRITE operation is not compatible  with
 the  open  mode  of  the file.  The file status variable, if
 present, has been set to 94.  No  applicable  USE  procedure
 has been found.

 User Action:   Examine the mode in which the file was opened
 prior to the attempted REWRITE operation and change the open
 mode to allow  the  successful  completion  of  the  REWRITE
 operation.   Alternatively,  change the logic of the program
 to bypass the attempted REWRITE operation.

3 REWNO_R_S
 attempting REWRITE on file with no previous READ or START

 Explanation:   Attempting to perform a REWRITE on this  file
 without   having   previously  performed  a  READ  or  START
 operation.  The file status variable, if present,  has  been
 set to 93.  No applicable USE procedure has been found.

 User Action:   Your program must execute  a  READ  or  START
 operation  (that  is,  sequential  access  mode) immediately
 before executing the REWRITE operation.  This must occur for
 each execution of the REWRITE operation.

3 REWSMAMIN
 attempting REWRITE of variable length smaller than  minimum
 allowed on file

 Explanation:   Attempting  to  REWRITE  a  record  that   is
 smaller  than  the  minimum  record  length  declared in the
 program  for  this  file.   The  file  status  variable,  if
 present,  has  been  set to 94.  No applicable USE procedure
 has been found.

 User Action:   Examine the length of the record on the  file
 being  rewritten  and  then change the minimum record length
 attribute  in  the  program  for  the  file  to  allow   the
 successful REWRITE operation for this record.

3 REWUNOFIL
 attempting REWRITE on unopened file

 Explanation:   Attempting to perform a REWRITE operation  on
 this  file  before  the  file  is  opened.   The file status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  a  REWRITE  operation  is  attempted before the file is
 opened.  Change the logic of the program to  open  the  file
 or, alternatively, eliminate the REWRITE operation.

3 STAINCOPE
 START on file incompatible with OPEN mode

 Explanation:   The START operation is  not  compatible  with
 the  current  open  mode  of  the  file.   The  file  status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the mode in which the file was opened
 prior  to  the attempted START operation and change the open
 mode  to  allow  the  successful  completion  of  the  start
 operation.

3 STAUNOFIL
 attempting START on unopened file

 Explanation:   Attempting to perform a  START  operation  on
 this  file  before  the  file  is  opened.   The file status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  a  START  operation  is  attempted  before  the file is
 opened.  Change the logic of the program to  open  the  file
 or,  alternatively,  eliminate  the  START  operation before
 executing the OPEN.

3 SUBOVELON
 subscript or reference modifier overflows longword

 Explanation:   The evaluation of a  subscript  or  reference
 modifier  has produced a value that cannot be contained in a
 longword quantity.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  the subscripting operation or reference
 modifier to determine why the  value  produced  overflows  a
 longword quantity.

3 TIMOVELON
 TIMES value overflows longword

 Explanation:   The   evaluation   of   the   TIMES   operand
 associated  with  the PERFORM statement has produced a value
 that cannot be contained in a longword quantity.

 User Action:   Examine the referenced  line  of  the  source
 program to determine why the evaluation of the TIMES operand
 produces a value that overflows a longword quantity.

3 UNDEF_EXP
 attempting undefined exponentiation -- negative base raised
 to fractional exponent

 Explanation:   Attempting    an    illegal    exponentiation
 operation  in  COBOL  in which a negative base is taken to a
 fractional power.

 User Action:   Examine the logic of the  source  program  to
 determine why this illegal operation is being attempted.

3 UNEINSCON
 INSPECT CONVERTING lengths unequal

 Explanation:   The lengths of  the  search  and  replacement
 strings are not equal in the INSPECT CONVERTING statement.

 User Action:   Examine  the  referenced  INSPECT  CONVERTING
 statement  to  determine  why  the lengths of the search and
 replacement strings are not equal.  These  lengths  must  be
 the same according to the rules of the COBOL language.

3 UNLNO_CUR
 attempting UNLOCK on file with no current record

 Explanation:   Attempting  to  perform  an   UNLOCK   RECORD
 statement  without having established a current record.  The
 file  status  variable,  if  present,  is  set  to  93.   No
 applicable USE procedure has been found.

 User Action:   Execute  a  record  operation  that  locks  a
 record,  and  therefore  establishes a current record before
 executing an UNLOCK RECORD statement.

3 UNLUNOFIL
 attempting UNLOCK on unopened file

 Explanation:   Attempting an UNLOCK operation on a file that
 is not open.  This error usually represents a logic error in
 the program.  The file status data  item,  if  present,  has
 been set to 94.  No applicable USE procedure has been found.

 User  Action:   Determine  why  an   UNLOCK   operation   is
 attempted  on  an unopened file.  Change the program to open
 the file or eliminate the UNLOCK operation.

3 WRIBEYBOU
 attempting WRITE beyond boundaries of file

 Explanation:   Attempting to WRITE a  record  at  a  logical
 position  that  is outside of the bounds of this file.  If a
 sequential  WRITE  has  been  attempted  on  a  sequentially
 organized  file, the file status variable has been set to 34
 and no applicable USE procedure was found.

 User Action:   This error usually occurs when  your  program
 attempts  to  write  records  to a volume that does not have
 sufficient free space to contain the file.  Delete or  purge
 as  many  files  as  possible to free-up sufficient space to
 contain the file being written.

3 WRIINCOPE
 WRITE on file incompatible with OPEN mode

 Explanation:   The WRITE operation is  not  compatible  with
 the  current  open  mode  of  the  file.   The  file  status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the mode in which the file was opened
 prior  to  the  attempted  WRITE  operation.  Alternatively,
 change the logic of the  program  to  bypass  the  attempted
 WRITE operation.

3 WRINOTASC
 attempting to WRITE non-ascending ISAM key on file

 Explanation:   Attempting  to  perform  a  sequential  WRITE
 operation to an indexed file in which the primary key is not
 in ascending sequence value.  The file status  variable,  if
 present,  has been set to 21.  No applicable exception label
 or USE procedure was found.

 User Action:   Examine the logic of the program to determine
 why  the primary key values are not written in ascending key
 value.

3 WRISMAMIN
 attempting WRITE of variable length  smaller  than  minimum
 allowed on file

 Explanation:   Attempting to WRITE a record that is  smaller
 than  the  minimum length record declared in the program for
 this file.  The file status variable, if present,  has  been
 set to 94.  No applicable USE procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  it is shorter than the minimum length declared for this
 file in the program.

3 WRIUNOFIL
 attempting WRITE on unopened file

 Explanation:   Attempting to perform a  WRITE  operation  on
 this  file  before  the  file  is  opened.   The file status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  the  WRITE  operation  is  attempted before the file is
 opened.  Change the logic of the program to  open  the  file
 before  executing  the  WRITE.  Alternatively, eliminate the
 WRITE operation.

2 FOR
! 2-003 SBL2003 Change text for RECIO_OPE, SEGRECFOR.  SBL 19-Aug-1981
! 2-002 SBL2002 Add errors for NAMELIST.  SBL 11-Nov-1980
! 2-001 SBL2001 Correct misspellings.  SBL 25-Sept-1980
VAX-11 FORTRAN error messages
3 ADJARRDIM
 adjustable array dimension error

 Explanation:  Upon entry to a subprogram, the evaluation of
 dimensioning information detected an array in which:
       o  an upper dimension bound was  less  than  a  lower
          dimension bound, or
       o  the dimensions implied an array which exceeds  the
          addressable memory.

 If execution continues, any attempt to  access  that  array
 will likely result in an access violation.

 User Action:  Check the values of the expressions  for  the
 bounds of the array where it is dimensioned.

3 ATTACCNON
 attempt to access non-existent record

 Explanation:  One of the following conditions occurred:
       o  An attempt was made to  READ,  FIND  or  DELETE  a
          non-existent  record  from a relative organization
          file using direct access.
       o  An attempt was made to access beyond  the  end  of
          the  file  with  a direct-access READ or FIND to a
          sequential organization file.
       o  An attempt was made to read a non-existent  record
          of  an  indexed  organization  file  with  a keyed
          access READ statement.

 User Action:   Verify  that  the  given  record  number  is
 correct.   Or,  correct  the  program to include an ERR= or
 IOSTAT=  specification  to  detect   and   respond   to   a
 non-existent record condition.

3 BACERR
 BACKSPACE error

 Explanation:  One of the following conditions occurred:
       o  The file was not a sequential organization file.
       o  The file was not opened for sequential access.  (A
          unit   opened   for   append  access  may  not  be
          backspaced until a REWIND  statement  is  executed
          for that unit.)
       o  RMS detected an error condition  during  execution
          of a BACKSPACE statement.

 User Action:  If a VAX-11 RMS error message accompanies the
 message,  use the VAX-11 RMS message to determine the cause
 of  the  error.   Insure  that  the   BACKSPACE   statement
 specifies a logical unit which is connected to a sequential
 organization file opened for sequential access.

3 CLOERR
 CLOSE error

 Explanation:  An error condition was detected by RMS during
 execution of a CLOSE statement.

 User  Action:   Take  corrective  action   based   on   the
 associated VAX-11 RMS message.

3 DELERR
 DELETE error

 Explanation:  One of the following conditions occurred:
       o  On a  direct  access  DELETE,  the  file  was  not
          relative organization.
       o  On a current  record  DELETE,  the  file  was  not
          relative  or indexed organization, or the file was
          opened for direct access.
       o  RMS detected an error condition  during  execution
          of a DELETE statement.

 User Action:  If  a  VAX-11  RMS  message  accompanies  the
 message,  use the VAX-11 RMS message to determine the cause
 of the error.  Otherwise, verify that the  file  opened  on
 the  logical  unit  specified  in  the  DELETE statement is
 relative or indexed organization and that it is not  opened
 for direct access.

3 DUPFILSPE
 duplicate file specifications

 Explanation:  Multiple attempts were made to  specify  file
 attributes without an intervening close operation by one of
 the following:
       o  A DEFINE FILE followed by DEFINE FILE.
       o  A DEFINE FILE followed by an OPEN statement.
       o  A CALL ASSIGN or CALL FDBSET followed by  an  OPEN
          statement.

 User Action:  Verify the logical unit numbers in the DEFINE
 FILE and/or OPEN statements.  If the same file is required,
 either delete the statement in  error  or  insert  a  CLOSE
 statement.

3 ENDDURREA
 end-of-file during read

 Explanation:  One of the following conditions occurred:
       o  An  RMS  end-of-file  condition  was   encountered
          during  execution of a READ statement that did not
          contain an END, ERR or IOSTAT specification.
       o  An  end-of-file  record  written  by  the  ENDFILE
          statement  was  encountered  during execution of a
          READ statement that did not contain an END, ERR or
          IOSTAT specification.
       o  An attempt was made to read past the  end  of  the
          internal  file  character  string  or array during
          execution of a READ statement that did not contain
          an END, ERR or IOSTAT specification.

 User Action:  Correct the program to include an END=,  ERR=
 or  IOSTAT=  specification  to  detect  and  respond  to an
 end-of-file condition.  Or, check the program that  created
 the  file  to  determine  that  all  expected  records were
 created.

3 ENDFILERR
 ENDFILE error

 Explanation:  One of the following conditions occurred:
       o  The file was not a  sequential  organization  file
          with variable length records.
       o  The file was not opened for sequential  or  append
          access.
       o  The unformatted file does  not  contain  segmented
          records.
       o  RMS detected  an  error  during  execution  of  an
          ENDFILE statement.

 User  Action:   Either  delete  the  ENDFILE  statement  or
 correct the OPEN statement for the file in question so that
 the organization is sequential and  that  the  records  are
 either variable formatted or segmented.

3 ERRDURREA
 error during read

 Explanation:   RMS  detected  an  error  condition   during
 execution of a READ statement.

 User  Action:   Take  corrective  action   based   on   the
 accompanying VAX-11 RMS error message.

3 ERRDURWRI
 error during write

 Explanation:   RMS  detected  an  error  condition   during
 execution of a WRITE statement.

 User  Action:   Take  corrective  action   based   on   the
 accompanying VAX-11 RMS error message.

3 FILNAMSPE
 file name specification error

 Explanation:  A file  name  specification  given  to  OPEN,
 INQUIRE or CALL ASSIGN was not acceptable to RMS.

 User Action:  Check the file name string displayed  in  the
 message  for  illegal  characters  and  correct  the source
 program.  If the file name string  was  referred  to  by  a
 variable  name,  check  that  the  variable  was  correctly
 initialized.  If the file name string is  a  logical  name,
 verify  that  the  logical  name translates to a valid file
 specification.

3 FILNOTFOU
 file not found

 Explanation:  A file with the specified name could  not  be
 found during an open operation.

 User Action:  Use the full file specification displayed  in
 the    message   to   determine   whether   the   resulting
 specification is as you intended it.  Verify  your  current
 default   disk   and  directory,  the  disk  and  directory
 containing the  required  file  and  current  logical  name
 assignments.

3 FINERR
 FIND error

 Explanation:   RMS  detected  an  error  condition   during
 execution of a FIND statement.

 User  Action:   Take  corrective  action   based   on   the
 accompanying VAX-11 RMS error message.

3 FORVARMIS
 format/variable-type mismatch

 Explanation:  An attempt was made either to read or write a
 real variable with an integer field descriptor (I or L), or
 to read or write an integer or logical variable with a real
 field  descriptor (D, E, F, or G).  If execution continued,
 the following actions occurred:

         Format         Action
         I,L            convert as if INTEGER*4
         D,E,F,G        convert as if REAL*4

 User Action:  Either change  the  variable  declaration  or
 modify the FORMAT statement to correct the specification.

3 INCFILORG
 inconsistent file organization

 Explanation:  One of the following conditions occurred:
       o  The  file  organization  specified  in   an   OPEN
          statement  did  not  match the organization of the
          existing file.
       o  The file organization of  the  existing  file  was
          inconsistent  with the specified access mode, that
          is, direct access was specified  with  an  indexed
          organization  file  or  keyed access was specified
          with a sequential or relative organization file.

 User Action:  Verify that the file referred to in the  OPEN
 statement   is   the   correct   organization,  change  the
 ORGANIZATION keyword specification in the OPEN statement to
 match  the  file  or  resolve the inconsistency between the
 file organization and the access type specified.

3 INCKEYCHG
 inconsistent key change or duplicate key

 Explanation:  A WRITE or REWRITE to an indexed organization
 file  caused  a key field to change or be duplicated.  This
 condition was not allowed by the attributes  of  the  file,
 established when the file was created.

 User Action:  Verify that the key being changed is the  one
 desired.   Or,  correct  the  program to include an ERR= or
 IOSTAT= specifier to detect and respond to a key change  or
 duplication condition.

3 INCOPECLO
 inconsistent OPEN/CLOSE parameters

 Explanation:  Specifications in an OPEN or CLOSE  statement
 were inconsistent.  Some of the invalid combinations are:
       o  READONLY with STATUS='NEW' or STATUS='SCRATCH'.
       o  ACCESS='APPEND'  with  READONLY,  STATUS='NEW'  or
          STATUS='SCRATCH'.
       o  DISPOSE='SAVE',         DISPOSE='PRINT'         or
          DISPOSE='SUBMIT' with STATUS='SCRATCH'.
       o  DISPOSE='DELETE' with READONLY.

 User Action:  Correct either the OPEN  or  CLOSE  statement
 for the file.

3 INCRECLEN
 inconsistent record length

 Explanation:  One of the following conditions occurred:
       o  An attempt was made  to  create  a  new  relative,
          indexed,  or direct access file without specifying
          a record length.
       o  An existing file was opened in  which  the  record
          length  did  not match the record size given in an
          OPEN or DEFINE FILE statement.

 User Action:  Locate the statement  in  your  program  that
 caused  the  error and check the record size specification.
 Remember that formatted records are specified in  units  of
 bytes  and  unformatted  records  are specified in units of
 longwords.

3 INCRECTYP
 inconsistent record type

 Explanation:  The RECORDTYPE value in an OPEN statement did
 not  match  the  record type attribute of the existing file
 which was opened.

 User Action:  Verify that the RECORDTYPE= specification  in
 the OPEN statement is correct.

3 INFFORLOO
 infinite format loop

 Explanation:  The format associated with an  I/O  statement
 that  included  an I/O list had no field descriptors to use
 in transferring those values.

 User Action:  Locate the statement  in  your  program  that
 caused  the  error and check the format associated with the
 I/O statement.  There must be  a  format  field  descriptor
 that transmits an element to or from the I/O list.

3 INPCONERR
 input conversion error

 Explanation:  During a formatted input operation an invalid
 character  was  detected  in  an  input field, or the input
 value overflowed  the  range  representable  in  the  input
 variable.  The value of the variable is set to zero.

 User Action:  Check that the format associated with the I/O
 statement  is  correct  and  verify the field width of each
 field specified against the data record being read.

3 INPRECTOO
 input record too long

 Explanation:  A record was read that exceeded the  explicit
 or  the  default RECORDSIZE specification specified at OPEN
 (or default OPEN).

 User Action:  Locate the READ or ACCEPT statement  in  your
 program that caused the error and check the associated OPEN
 statement.  Correct the record size  specification  in  the
 OPEN  statement,  if  necessary.   Remember that the record
 size specification is in units of bytes for formatted files
 and in units of longwords for unformatted files.

3 INPSTAREQ
 input statement requires too much data

 Explanation:  An unformatted READ  statement  attempted  to
 read more data than existed in the record being read.

 User Action:  Locate the READ  statement  in  your  program
 that  caused  the  error,  and check the number of elements
 specified.  Check that the data type  of  each  element  is
 properly  declared;  an omitted declaration results in four
 bytes of data input by default.

3 INSVIRMEM
 insufficient virtual memory

 Explanation:  The FORTRAN  Run-Time  Library  attempted  to
 exceed  its virtual page limit while dynamically allocating
 space.

 User Action:  Determine the current working  set  limit  by
 using  the  SHOW  WORKING_SET  command.  Then, increase the
 size of the working set limit and rerun your program.

3 INVARGFOR
 invalid argument to FORTRAN Run-Time Library

 Explanation:  One of the following conditions occurred:
       o  An invalid argument was given to a PDP-11  FORTRAN
          compatibility subroutine such as ERRSET.
       o  The  FORTRAN  compiler  passed  an  invalid  coded
          argument  to the Run-Time Library.  This can occur
          if the compiler is newer than the Run-Time Library
          in use.

 User Action:  Locate  the  call  to  the  library  in  your
 program.   If  the  procedure is a compatibility procedure,
 see the VAX-11 FORTRAN User's Guide.  Otherwise, verify the
 version of the compiler with the version of the library and
 recompile or relink your program, as necessary.

3 INVKEYSPE
 invalid key specification

 Explanation:  A key specification in an OPEN  statement  or
 in a keyed access READ statement was invalid.  For example,
 the key length may have been zero or greater than 255 bytes
 or  the  key  length  may  not  have  conformed  to the key
 specification of the existing file.

 User Action:  Verify that the key  specification  is  valid
 and that it matches the existing file, if any.

3 INVLOGUNI
 invalid logical unit number

 Explanation:  A logical unit number greater than 99 or less
 than  0  was  used  in  an I/O statement.  The logical unit
 number which was in error is displayed in the message.

 User Action:   Verify  that  the  variable  containing  the
 logical  unit  number  in  an  I/O  statement  has been set
 properly.

3 INVREFVAR
 invalid reference to variable "varname" in NAMELIST input

 Explanation:  An invalid variable was given as input  to  a
 NAMELIST READ statement.  The variable in error is shown as
 "varname" in  the  message  text.   One  of  the  following
 situations occurred:
       o  The variable is not a member of the NAMELIST group
          being processed.
       o  An  attempt  was  made  to  subscript  the  scalar
          variable.
       o  A   subscript   of   the   array   variable    was
          out-of-bounds.
       o  There were too many or too few subscripts for  the
          variable.
       o  An attempt was made to substring the non-character
          variable.
       o  A  substring  of   the   character   variable   is
          out-of-bounds.
       o  A subscript or substring of the variable contained
          a value which was not an integer constant.

 User Action:   Verify  that  you  are  giving  the  correct
 variable  name  and  that the variable has the correct data
 type  and  dimension;   then  give   a   correct   variable
 reference.

3 KEYVALERR
 keyword value error in OPEN statement

 Explanation:  An  OPEN  or  CLOSE  statement  keyword  that
 requires a value had an improper value.

 User Action:  Locate  the  OPEN  or  CLOSE  statement  that
 caused  the  error  and  change the value to one within the
 acceptable  limits.   See  the  VAX-11   FORTRAN   Language
 Reference Manual for the allowable values.

3 LISIO_SYN
 list-directed I/O syntax error

 Explanation:  The data in a list-directed input record  had
 an   invalid  format  or  the  type  of  the  constant  was
 incompatible with the corresponding variable.  The value of
 the variable was unchanged.

 User Action:  Locate the  READ  or  ACCEPT  statement  that
 caused  the  error.   Check  the  data in the record for an
 invalid format  by  printing  the  file  or  examining  the
 terminal  input.  Also, check the data type declarations of
 each variable in the I/O list.

3 MIXFILACC
 mixed file access modes

 Explanation:  One of the following conditions occurred:
       o  An attempt was made  to  use  both  formatted  and
          unformatted operations on the same unit.
       o  An attempt was made to use an invalid  combination
          of  access  modes  on  a  unit,  i.e.   direct and
          sequential.   The  only   valid   combination   is
          sequential   and  keyed  on  a  unit  opened  with
          ACCESS='KEYED'.
       o  An attempt was  made  to  execute  a  FORTRAN  I/O
          statement  on  a logical unit that was opened by a
          language other than FORTRAN.

 User Action:  Locate the I/O statement in your program that
 caused the error, and any explicit OPEN associated with the
 unit.  Verify that I/O to the unit is consistent  with  the
 attributes of previous I/O statements.

3 NO_CURREC
 no current record

 Explanation:   A  REWRITE  or  current  record  DELETE  was
 attempted when no current record was defined.

 User Action:  Correct the program so that a current  record
 is  defined when a REWRITE or DELETE is attempted.  See the
 VAX-11 FORTRAN User's Guide for information.

3 NO_SUCDEV
 no such device

 Explanation:  A file name specification included an invalid
 or   unknown   device  name  when  an  open  operation  was
 attempted.

 User Action:   Locate  the  explicit  OPEN  statement  that
 caused  the  error  or  the  I/O  statement that caused the
 implicit open.  The  message  displays  the  complete  file
 specification of the file.  If the specification contains a
 logical name, verify that the logical name was  assigned  a
 proper  equivalence  name.   Correct the OPEN statement, or
 assign a proper logical name, as required.

3 NOTFORSPE
 not a FORTRAN-specific error

 Explanation:  An error occurred in the user program  or  in
 the Run-Time Library that was not a FORTRAN-specific error.

 User  Action:   Take  corrective  action   based   on   the
 associated error.

3 OPEDEFREQ
 OPEN or DEFINE FILE required for keyed or direct access

 Explanation:  One of the following conditions occurred:
       o  A  direct  access  READ,  WRITE,  FIND  or  DELETE
          statement  was attempted for a file when no DEFINE
          FILE or OPEN statement  with  ACCESS='DIRECT'  was
          performed for that file.
       o  A keyed access READ statement was attempted for  a
          file  when  no  OPEN statement with ACCESS='KEYED'
          was performed for that file.

 User Action:  Locate the  I/O  statement  that  caused  the
 error and verify that the OPEN or DEFINE FILE statement for
 the specified logical unit specifies the correct access.

3 OPEFAI
 open failure

 Explanation:  An error was detected by RMS while attempting
 to  open a file in an OPEN, INQUIRE or other I/O statement.
 This message is used when the error condition is not one of
 the   more  common  conditions  for  which  specific  error
 messages are provided.

 User Action:  Use the  associated  VAX-11  RMS  message  to
 determine the reason for the error and correct it.

3 OUTCONERR
 output conversion error

 Explanation:  During a formatted output operation the value
 of a particular number could not be output in the specified
 field length without loss of significant digits.  The field
 is filled with asterisks.

 User Action:  Check the program  output  to  determine  the
 field  that  could not be properly converted for output and
 check the field widths in  the  associated  format  or  the
 value  of the I/O list expression to determine which was in
 error.

3 OUTSTAOVE
 output statement overflows record

 Explanation:  An output  statement  attempted  to  transfer
 more data than would fit in the maximum record size.

 User Action:  Either reduce the width of the fields in  the
 associated  format, break the record in two with the format
 specification, or change the record size  specification  in
 the OPEN statement or internal file variable declaration.

3 RECIO_OPE
 recursive I/O operation

 Explanation:  While  processing  an  I/O  statement  for  a
 logical  unit,  another  I/O  operation on the same logical
 unit was attempted.  One of the  following  conditions  may
 have occurred:
       o  A function subprogram that  performs  I/O  to  the
          same  logical  unit is referenced in an expression
          in an I/O list or variable format expression.
       o  An I/O statement was executed at AST level for the
          same logical unit.
       o  An exception handler (or a  procedure  it  called)
          executed  an I/O statement in response to a SIGNAL
          from an I/O statement for the same logical unit.

 User Action:  Locate the statement  in  your  program  that
 caused  the recursive I/O operation and correct the program
 logic or specify a different logical unit number for one of
 the operations.

3 RECNUMOUT
 record number outside range

 Explanation:   A  direct  access  READ,  WRITE,   or   FIND
 statement  specified  a  record  number  outside  the range
 specified when the file was created.

 User  Action:   Check  that  the  direct  access  operation
 specified  the  correct  record  number  and check that the
 logical unit number specified in the I/O  statement  agrees
 with the logical unit number in the OPEN statement.

3 REWERR
 REWIND error

 Explanation:  One of the following conditions occurred:
       o  The file was not a sequential organization file.
       o  The file was not opened for sequential  or  append
          access.
       o  RMS detected an error condition  during  execution
          of a REWIND statement.

 User Action:  Verify that the file specified is  sequential
 organization  and  that  it  is open for sequential access.
 Or, take corrective action based on the VAX-11 RMS message.

3 REWRITERR
 REWRITE error

 Explanation:   RMS  detected  an  error  condition   during
 execution of a REWRITE statement.

 User  Action:   Take  corrective  action   based   on   the
 associated VAX-11 RMS message.

3 SEGRECFOR
 segmented record format error

 Explanation:  An invalid segmented record control data word
 was  detected  in an unformatted sequential file.  The file
 was  probably created with RECORDTYPE='VARIABLE' in effect, 
 or was written by a language other than FORTRAN.

 User Action:  Locate the  I/O  statement  that  caused  the
 error  and  check  that the correct logical unit number was
 specified.   If  no  RECORDTYPE   is   specified   for   an
 unformatted  sequential  file with variable length records,
 segmented records are assumed.

3 SPERECLOC
 specified record locked

 Explanation:  A READ or direct access WRITE, FIND or DELETE
 was attempted on a record which was locked by another user.

 User  Action:   Correct  the  program  logic  so  that  I/O
 attempted on locked records can be retried.  This condition
 can be detected  by  using  the  ERR=  and/or  IOSTAT=  I/O
 statement  keywords.   See  the VAX-11 FORTRAN User's Guide
 for more information.

3 SYNERRFOR
 syntax error in format

 Explanation:  A syntax  error  was  encountered  while  the
 Run-Time Library was processing a format stored in an array
 or character variable.

 User Action:  Locate the I/O statement in your  program  in
 which   the   format   specification  was  an  variable  or
 expression instead  of  a  statement  number  or  character
 constant.   Check  that the resulting expression is a valid
 format specification, including left and right parentheses.

3 SYNERRNAM
 syntax error in NAMELIST input at or near "text"

 Explanation:  The  syntax  of  input  to  a  NAMELIST  READ
 statement  was  incorrect.   The  part  of the record being
 processed when the error was detected is shown as "text" in
 the message text.

 User Action:  Respecify the input data to  conform  to  the
 correct  syntax.  See the VAX-11 FORTRAN Language Reference
 Manual for a description of proper NAMELIST input syntax.

3 TOOMANREC
 too many records in I/O statement

 Explanation:  One of the following conditions occurred:
       o  An attempt was made to read or write more than one
          record with an ENCODE or DECODE statement.
       o  An attempt was made to  write  more  records  than
          existed  in an internal file character variable or
          array.

 User Action:  Correct the program logic or format  so  that
 the correct number of records are written.

3 TOOMANVAL
 too many values for NAMELIST variable "varname"

 Explanation:  An attempt was made to assign too many values
 to  a  variable during a NAMELIST READ statement.  The name
 of the variable being assigned to is shown as "varname"  in
 the message text.

 User Action:  Verify that you are  specifying  the  correct
 variable  and  that  the dimension of the array is correct.
 If the variable is a scalar, note that  consecutive  commas
 in NAMELIST input indicate a skipped value, therefore using
 commas before the value when assigning to a  scalar  is  an
 error.   Respecify  the  assignment  and  give  the correct
 number of values.

3 UNIALROPE
 unit already open

 Explanation:  A DEFINE FILE statement specified  a  logical
 unit that was already opened.

 User Action:  Verify that the logical unit  number  in  the
 DEFINE FILE statement is correct.  If it is correct, insert
 a CLOSE statement before the  DEFINE  FILE  or  remove  the
 DEFINE FILE.

3 UNLERR
 UNLOCK error

 Explanation:   RMS  detected  an  error   condition   during
 execution of an UNLOCK statement.

 User  Action:   Take  corrective  action   based   on   the
 associated VAX-11 RMS message.

3 VFEVALERR
 variable format expression value error

 Explanation:  The value of a variable format expression was
 not  within the range acceptable for its intended use;  for
 example, a field width was less than or equal to  zero.   A
 value  of 1 was assumed except for a P edit descriptor, for
 which a value of
 0 was assumed.

 User Action:  Check the value of the expression and correct
 the program.

3 WRIREAFIL
 write to READONLY file

 Explanation:  A write operation was  attempted  to  a  file
 that was declared READONLY by the currently active OPEN.

 User Action:  Locate the statement that  caused  the  error
 and verify the logical unit number.  If correct, verify the
 parameters on the OPEN statement.
!
! VAX/VMS LIB facility errorrs.				EDIT: RKR1002
!
2 LIB
VAX-11 Common Run-Time Library error messages
3 ATTCONSTO
 attempt to continue from stop

 A handler attempted to continue from a call to
 LIB$STOP.
3 BADSTA
 bad stack

 When scanning the process stack, a stack frame was
 found to be invalid or inaccessible.  The user
 program probably had written on the stack frame.
3 DECOVF
 decimal overflow

 A decimal overflow was detected.
 Either the library routine or the hardware detected the
 error.
3 DESSTROVF
 destination string overflow

 The destination string was overflowed, and the operation
 did not justify return of a warning, but a fatal error.
 For example if source data to LIB$CVT_DX_DX is an atomic
 data type and the destination is a Numeric Byte Data 
 String, then if the destination string is not large
 enough to contain the converted number this error is
 returned.
3 FATERRLIB
 fatal error in library

 An internal consistency check failed in the
 general library. This usually indicates a
 programming error in the Run-Time Library and should
 be reported to DIGITAL.
3 FLTOVF
 floating overflow

 A floating underflow was detected.
 Either the library routine or the hardware detected the
 error.
3 FLTUND
 floating underflow

 A floating underflow was detected.
 Either the library routine or the hardware detected the
 error.
3 INSVIRMEM
 insufficient virtual memory

 A call to LIB$GET_VM failed because the user
 program exceeded the image quota for virtual
 memory. This quota can be increased by a suitably
 privileged command.
3 INTLOGERR
 internal logic error

 A general library procedure detected an internal
 logic error. Such a condition should be reported to
 DIGITAL.
3 INTOVF
 integer overflow

 An integer overflow was detected.
 Either the library routine or the hardware detected the
 error.
3 INVARG
 invalid argument(s)

 A calling program passed one or more invalid
 arguments to a general library procedure.
3 INVCLADSC
 invalid class in descriptor

 This class of descriptor is not supported by the
 routine. 
3 INVCLADTY
 invalid class and data type combination

 This combination of class and data type, passed in
 descriptor, is not supported by the routine.
3 INVCVT
 invalid conversion

 An invalid conversion was detected.  For example 
 LIB$CVT_DX_DX can return this error when the source
 data is negative and the destination data type is an
 unsigned data type.
3 INVDTYDSC
 invalid data type in descriptor

 This data type, passed in descriptor, is not
 supported by the routine.
3 INVNBDS
 invalid Numeric Byte Data String

 Numeric Byte Data Strings are defined in documentation
 of LIB$CVT_DX_DX routine.  This error indicates that 
 the string of bytes indicated to be NBDS, is not NBDS.
3 OUTSTRTRU
 output string truncated

 As a result of moving a string from source to destination
 truncation occurred.  This is a warning.  
3 ROPRAND
 reserved operand

 A reserved operand was detected.
 Either the library routine or the hardware detected the
 error.
3 SIGNO_ARG
 signal with no arguments

 LIB$SIGNAL or LIB$STOP was called with no
 arguments.
3 STRIS_INT
 String is interlocked

 Explanation:   Message.  Code  being executed at  AST level
 attempted writing into a string that was being written into
 or  whose  length  was  being  used  for length computation
 immediately before the AST.

 User Action:   The user should not write to strings at  AST
 level that are used at non-AST level or in other  AST-level
 processing.  If it is necessary to use the same strings for
 interrupt routines, then the user should disable ASTs while
 string assignments are in progress.
3 USEFLORES
 use of floating reserved operand

 The executing image has accessed a reserved floating
 operand which has been fixed up by the library
 procedure LIB$FIXUP_FLT to positive zero so that the
 program may continue.
3 WRONUMARG
 Wrong number of arguments

 One or more required parameters was not supplied on a
 procedure call.  Check documentation for the calling
 sequence and review call instruction in your program.
! MTHERRORS.HLP - Help text for MTH$ facility errors
!
! 1-001 - First update.  Add SIGLOSMAT.  SBL 16-Jan-1979
! 1-002	- Remove SOS sequence numbers, since COPY can't
!	   concatenate files with unlike attributes.
!	   JBS 21-JAN-1980
! 1-003 - Edits from Rich Grove.  SBL 4-Feb-1980
!
2 MTH
VAX-11 Common Run-Time Library error messages
3 FLOOVEMAT
 floating overflow in math library

 A overflow condition was detected during execution of a
 math library procedure. The result returned was the
 reserved operand, minus zero.
3 FLOUNDMAT
 floating underflow in math library

 A floating underflow condition was detected during
 execution of a math library procedure.  The result returned
 was zero.
3 INVARGMAT
 invalid argument to math library

 One of the math library procedures detected an invalid
 argument value.
3 LOGZERNEG
 logarithm of zero or negative value

 An attempt was made to take the logarithm of zero or a
 negative number. The result returned was the reserved
 operand: minus zero.
3 SIGLOSMAT
 significance lost in math library

 The magnitude of an argument or the magnitude of the ratio of
 the arguments to a math library function was so large that all
 significance in the result was lost.  The result returned was
 the reserved operand, minus zero.
3 SQUROONEG
 square root of negative value

 An argument required the evaluation of the square root of a
 negative value. The result returned was the reserved
 operand, minus zero.
3 UNDEXP
 undefined exponentiation

 An exponentiation was attempted which is mathematically
 undefined; e.g., 0.**0. The result returned was the
 reserved operand minus zero for floating-point operations,
 and zero for integer operations.
3 WRONUMARG
 wrong number of arguments

 An improper number of arguments was used to call a math library
 procedure.
!
! VAX-11 Common Run-Time Library error messages		Edit: RKR1001
!
2 OTS
VAX-11 Common Run-Time Library error messages
3 FATINTERR
 fatal internal error in Run-Time Library

 An explicit or implicit call to the Run-Time Library
 resulted in the failure of an internal
 consistency check. This usually indicates a
 programming error in the Run-Time Library and should
 be reported to DIGITAL.
3 FATIO_ERR
 fatal I/O error
3 INSVIRMEM
 insufficient virtual memory

 A call to LIB$GET_VM failed because the user
 program exceeded the image quota for virtual
 memory. This quota can be increased by a suitably
 privileged command.
3 INTDATCOR
 internal data corrupted in Run-Time Library

 On a call to the Run-Time Library, a data base
 consistency check failed. A user program can cause
 this by referencing outside of a dimensioned array.
3 INVSTRDES
 invalid string descriptor

 A string descriptor passed to a language support
 procedure did not contain a valid DSC$B_CLASS field.
3 IO_CONCLO
 I/O continued to closed file

 An attempt was made to continue performing I/O to a closed file.
3 STRIS_INT
 String is interlocked

 Explanation:   Message.  Code  being executed at  AST level
 attempted writing into a string that was being written into
 or  whose  length  was  being  used  for length computation
 immediately before the AST.

 User Action:   The user should not write to strings at  AST
 level that are used at non-AST level or in other  AST-level
 processing.  If it is necessary to use the same strings for
 interrupt routines, then the user should disable ASTs while
 string assignments are in progress.
3 WRONUMARG
 Wrong number of arguments

 One or more required paramters are missing in a procedure
 call.  Review documented call list to this procedure and
 review the call instruction in your program.
2 STR
 VAX-11 Common Run-Time Library STRING Error Messages

! STRING Runtime error message HELP file
!
! Revision History
! ----------------
! 1-001 Orignal. RW  3-Jan-1980
! 1-002 Editorial changes.  RW  21-Jan-1980
! 1-003 More editorial changes.  RW  21-Jan-1980
!
3 DIVBY_ZER
 Division by zero

 Explanation:   Message.   The  string  arithmetic  routines
 attempted  to take the reciprocal of a string whose numeric
 value was 0.

 User Action:   The user should insure  that any string used
 as a divisor is not a null string or any other string whose
 numeric value is 0.

3 FATINTERR
 Fatal internal error

 Explanation:   Message.  An internal consistency check  has
 failed.  This represents  an internal error in the Run-Time
 Library  and  should  be  reported  to  Digital   Equipment
 Corporation  by SPR.

 User Action:   The user should either  discuss  this  error
 with the local software support specialist or submit an SPR
 with supporting documentation including the system traceback
 listing.

3 ILLSTRCLA
 Illegal string class

 Explanation:   Message.  The class code  found in the class
 field of a  descriptor is not a string class code supported
 by the  VAX/VMS  Procedure Calling  and  Condition Handling
 Standard, Appendix C in the VAX-11 Architecture Handbook.

 User Action:   If the user  is programming in a  high level
 language and using the string data types and functions that
 are supplied by the language, then check  that there are no
 logic errors where data is written outside array bounds  or
 other error where data is written incorrectly.  If the user
 is creating descriptors, check that all  string descriptors
 are initialized before using them.

3 ILLSTRPOS
 Illegal string position

 Explanation:   Successfully completed  except  one  of  the
 character-position  parameters to a string routine  pointed
 to a character-position  before the beginning of the  input
 string (was less than 1 but 1 was used) or after the end of
 the input string  (was greater than the length of the input
 string but the length of the input string was used).

 User Action:   The user should make sure that any parameter
 which is a  character-position  is greater than 0  and less
 than or equal to the length of the input string.

3 ILLSTRSPE
 Illegal string specification

 Explanation:   Successfully completed except the character-
 position  parameters  specifying a  substring  of a  string
 parameter were inconsistent  because the ending  character-
 position was less than the starting  character-position.  A
 null string was used for the substring.

 User Action:   The user program should verify that starting
 character-positions  are  less  than  or  equal  to  ending
 character-position.

3 INSVIRMEM
 Insufficient virtual memory

 Explanation:   Message. An attempt to allocate heap storage
 for use as dynamic strings or string temporaries failed.

 User Action:   The user who is  allocating space by calling
 STR$GET1_DX or LIB$GET_VM should verify that  when finished
 using the storage it is released by calling STR$FREE1_DX or
 LIB$FREE_VM respectively.  The high level language user who
 has not  directly  allocated space  can cause this error by
 having a large number of  long strings.  In this case, make
 sure to reduce strings to 0 length when not in use.

3 NEGSTRLEN
 Negative string length

 Explanation:   Successfully completed  except that a length
 parameter to a string routine had a negative value; lengths
 of strings must always be positive or 0.  0 was used.

 User Action:   The user  should verify that all  parameters
 containing string lengths do not contain negative numbers.

3 STRIS_INT
 String is interlocked

 Explanation:   Message.  Code  being executed at  AST level
 attempted writing into a string that was being written into
 or  whose  length  was  being  used  for length computation
 immediately before the AST.

 User Action:   The user should not write to strings at  AST
 level that are used at non-AST level or in other  AST-level
 processing.  If it is necessary to use the same strings for
 interrupt routines, then the user should disable ASTs while
 string assignments are in progress.

3 STRTOOLON
 String is too long (greater than 65535)

 Explanation:   Message.   An attempt  was made  to create a
 string that was longer than allowed by the  String Facility
 or the descriptors  in the  VAX/VMS  Procedure  Calling and
 Condition  Handling  Standard,  Appendix C  in  the  VAX-11
 Architecture Handbook.  The maximum length string supported
 is 65,535.

 User Action:   The user should never specify string lengths
 greater  than  65,535.  The user  should also  check that a
 concatenation  operation  is not  going to try  to create a
 string longer than 65,535.

3 TRU
 Truncation

 Explanation:   Warning.  An attempt  was made to place more
 characters into a string  than it could contain.  The value
 was truncated on the right to fit.

 User Action:   The user should not put more characters into
 a string than its maximum length.  The error may be ignored
 if right truncation is acceptable.

3 WRONUMARG
 Wrong number of arguments

 Explanation:   Message.  A String facility entry was called
 without the correct number of arguments.

 User Action:   A user  who is directly  calling the  String
 facility should check the argument list in the  call.  High
 level language programmers who have not issued  a call to a
 String facility routine directly should either discuss this
 error with the  local software support specialist or submit
 an SPR  with supporting documentation including  the system
 traceback listing.
2 SYSTEM
VAX/VMS and hardware generated messages
3 ACCVIO
 access violation

 An instruction attempted to access a memory location which was
 protected against that access.  This is often caused by a
 program array reference outside the bounds of the array or by
 an inconsistency between the number of arguments passed to a
 subroutine and the number expected.
3 FLTDIV
 arithmetic trap, floating/decimal divide by zero

 During a floating-point or decimal arithmetic operation an
 attempt was made to divide by zero. If floating, the result of the
 operation was set to the reserved operand, minus zero.
 If decimal, the result of the operation is unpredictable.
3 FLTDIV_F
 arithmetic fault, floating divide by zero

 During a floating-point arithmetic operation an attempt was made
 to divide by zero.
3 FLTOVF
 arithmetic trap, floating overflow

 During an arithmetic operation a floating-point value exceeded the
 largest representable value for that data type.
 The result of the operation was set to the reserved operand,
 minus zero.
3 FLTOVF_F
 arithmetic fault, floating overflow

 During an arithmetic operation a floating-point value exceeded the
 largest representable value for that data type.
3 FLTUND
 arithmetic trap, floating underflow

 During an arithmetic operation a floating-point
 value had become less than the smallest representable value
 for that data type and was replaced with a value of zero.
3 FLTUND_F
 arithmetic fault, floating underflow

 During an arithmetic operation a floating-point
 value had become less than the smallest representable value
 for that data type.
3 INTDIV
 arithmetic trap, integer divide by zero

 During an integer arithmetic operation an attempt was
 made to divide by zero. The result of the operation was set
 to the dividend which is equivalent to division by 1. 
3 INTOVF
 arithmetic trap, integer overflow

 During an arithmetic operation an integer's value
 exceeded byte, word or longword range.  The result of
 the operation was the correct low-order part.
3 SUBRNG
 arithmetic trap, subscript out of range

 An array reference was detected outside the declared
 bounds of the array.
