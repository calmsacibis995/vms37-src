 !	$begin	rmsfilstr,v02-061 
 ! 
 !**************************************************************************** 
 !*									    * 
 !*  COPYRIGHT (c) 1978, 1980, 1982 BY					    * 
 !*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    * 
 !*  ALL RIGHTS RESERVED.						    * 
 !* 									    * 
 !*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   * 
 !*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   * 
 !*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   * 
 !*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   * 
 !*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   * 
 !*  TRANSFERRED.							    * 
 !* 									    * 
 !*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   * 
 !*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   * 
 !*  CORPORATION.							    * 
 !* 									    * 
 !*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   * 
 !*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    * 
 !* 									    * 
 !*									    * 
 !**************************************************************************** 
 ! 
 !	internal rms file structure definitions 
 ! 
 !	Modified By: 
 ! 
 !	V02-061	CDS0001		C Saether		23-Dec-1981 
 !		Add default global buffer count field to prologue 
 !		vbn 1 for relative and isam files. 
 ! 
 !	V02-060	KBT0001		Keith B Thompson	12-Nov-1981 
 !		Add ONC and CBT flags in the AOP area descriptor field 
 !		and correct the position of CTG. 
 ! 
 !	V02-059	PSK0004		Paulina S. Knibbe	23-Oct-1981 
 !		Remove LCB_EXITS flag. 
 ! 
 !	V02-058	MCN0007		Maria del C. Nasr	15-May-1981 
 !		Add compression constants. 
 ! 
 !	V02-057	PSK0003		Paulina S. Knibbe	16-Apr-1981 
 !		Add KEY_COMPR and REC_COMPR bits to the KEY structure 
 !		Add constants for largest non-compressed data record, 
 !		primary key and index (SIDR key. 
 ! 
 !	V02-056 PSK0002		Paulina S. Knibbe	19-Mar-1981 
 !		Add pointer size field to the BKT structure 
 ! 
 !	V02-055 MCN0006		Maria del C. Nasr	16-Mar-1981 
 !		Modify the BKT, and IRC structures to increase record id 
 !		size to a word, and reflect other changes required for the 
 !		new ISAM structure. 
 ! 
 !	V02-054	PSK0001		Paulina Knibbe	11-Mar-1981 
 !		Add definitions for per-segment datatypes to the KEY structure 
 !		Add another prologue version constant 
 ! 
 !	V02-053 ras0053		Ron Schaefer	24-Nov-1980	14:48 
 !		merge RMSINT and RMSIDXSTR file structure definitions into 
 !		one file containing all on-disk structures and no in-memory 
 !		structures. 
 ! 
 !	V02-052	REFORMAT	Keith B. Thompson	29-JUL-1980 
 ! 
 !	V051	jak0045		J A Krycka	21-MAR-1980	15:00 
 !		remove IFB$V_DAP_FMODE. 
 ! 
 !	V050	cds0075		C D Saether	21-JAN-1980	11:25 
 !		remove IFB$L_FWA_BDB, IFB$W_BKS_BYTES, IFB$W_BKS_RECS. 
 ! 
 !	V049	ras0010		R A Schaefer	07-JAN-1980	16:45 
 !		re-arrange drc fields for valid did check. 
 ! 
 !	V048	ras0009		R A Schaefer	20-DEC-1979	15:30 
 !		add FWA$T_RNM_FID to hold the saved fid from a rename 
 !		for checking bad rename directory operation. 
 ! 
 !	V047	jak0029		J A Krycka	18-NOV-1979	11:00 
 !		add FWA$V_REMRESULT to denote that fal has returned resultant 
 !		string. 
 ! 
 !	v046	tmh0003		Tim Halvorsen	02-NOV-1979 
 !		add FWA$L_DIRBDB to hold address of directory buffer bdb 
 !		add FWA$V_FILEFOUND bit to indicate that at least one file 
 !		has been found - used to return FNF vs. NMF. 
 ! 
 !	V045	jak0025		J A Krycka	28-SEP-1979	17:00 
 !		add FWA$V_DEV_UNDER in conjunction with effort to 
 !		modify expanded and resultant name string processing to prefix 
 !		an underscore to node and device names that have been subject 
 !		to logical name translation. 
 ! 
 !	V044			Tim Halvorsen	12-SEP-1979 
 !		add IFB$V_SEARCH bit to mark ifabs left during searches. 
 ! 
 !	V043			Tim Halvorsen	11-SEP-1979 
 !		overlay the fib buffer with the node descriptors to reduce 
 !		the total space used by fwa.  increase the size of the file 
 !		name and type buffers due to the new maximum sizes which can 
 !		occur as a result of wild characters (i.e. *a*b*c*d*e etc). 
 ! 
 !	V042	jak0023		J A Krycka	27-AUG-1979	18:00 
 !		move FWA$T_NODEBUF to NWA$T_NODEBUF and add FWA$Q_DIR1 thru 
 !		FWA$Q_DIR8 in conjunction with effort in RM0XPFN to allow 
 !		multiple node specs in a file specification. 
 ! 
 !	v041	cds0022		C Saether	26-july-79	22:45 
 !		add IFB$V_SEQFIL to bookkeeping bits. 
 ! 
 !	V040	cds0000		C Saether	16-JAN-1979	14:00 
 !		remove definition of lockabove from srchflags in irab 
 !		and add abovelckd to bookeeping bits 
 ! 
 !	V039	wsk0000		W S Koenig	10-JAN-1979	1:25 
 !		fix problem w/ IDX_PTR overlapping w/ AS_DEV longwords 
 ! 
 !	V038	jak0017		J A Krycka	28-DEC-1978	14:30 
 !		make IFB$L_NWA_PTR and IFB$L_FRB_PTR separate locations so that 
 !		networking and file sharing do not interfere with each other. 
 ! 
 !	V037	ran0003		R A Newell	20-DEC-1978	17:35 
 !		file sharing and isam changes. 
 ! 
 !	V036	jak0007		J A Krycka	17-DEC-1978	19:00 
 !		change values of FWA$C_MAXNODE and FWA$C_NODBUFSIZ. 
 ! 
 !	V035	jak0006		J A Krycka	21-NOV-1978	16:40 
 !		add FWA$V_ACCSTR definition. 
 ! 
 !	V034	ran0002		R A Newell	1-NOV-1978	09:49 
 !		RMS32 isam modifications.  additions of isam fields, take out 
 !		NWA, add PLG_VER, change ASB size, define PTR_VBN, update, 
 !		UPD_NRP, RFA_VBN, and RFA_ID fields. 
 ! 
 !++ 
  
 ! 
 !	 prologue field definitions 
 ! 
 ! 
 !  common vbn1 format for indexed and relative files 
 ! 
 !  (note: indexed file defintions not included at this time) 
 ! 
 !...$PLGDEF	
  
 MACRO		PLG$B_DBKTSIZ	= 11,0,8,0%; 	! data bucket size 
 MACRO		PLG$B_FLAGS	= 16,0,8,0%; 	! flag bits 
 			 
 MACRO		PLG$V_NOEXTEND	= 16,0,1,0%; 	! no extend allowed (rel) 
 			
 MACRO		PLG$B_AVBN	= 102,0,8,0%; 	! vbn of first area descriptor 
 MACRO		PLG$B_AMAX	= 103,0,8,0%; 	! maximum number of areas 
 MACRO		PLG$W_DVBN	= 104,0,16,0%; 	! first data bucket vbn 
 MACRO		PLG$L_MRN	= 108,0,32,0%; 		! maximum record number (rel) 
 MACRO		PLG$L_EOF	= 112,0,32,0%; 		! eof vbn (rel) 
 MACRO		PLG$W_VER_NO	= 116,0,16,0%; 	! version number 
 LITERAL	PLG$C_VER_NO	= 1; 		! current prolog version number 
 LITERAL	PLG$C_VER_IDX	= 2; 		! new plg for indexed files 
 LITERAL	PLG$C_VER_3	= 3; 		! new plg for compression, space reclamation (plg 3) 
 MACRO		PLG$W_GBC	= 118,0,16,0%; 		! default global buffer count 
 LITERAL	PLG$C_BLN	= 120; 
 LITERAL	PLG$K_BLN	= 120; 	 

  
 ! 
 ! 
 !  relative file deletion control byte bit definitions 
 ! 
 !...$DLCDEF	
  
 			 
 						! (start with bit 2) 
 MACRO		DLC$V_DELETED	= 0,2,1,0%; 		! record deleted 
 LITERAL	DLC$M_DELETED	= 1^3 - 1^2; 
 MACRO		DLC$V_REC	= 0,3,1,0%; 		! record exists (but may have been deleted) 
 LITERAL	DLC$M_REC	= 1^4 - 1^3; 
 			

  
 ! 
 ! index bucket definition 
 ! 
 ! this is the bucket format for RMS-11/RMS-32 index files. 
 ! 
 !...$BKTDEF	
 	 
 MACRO		BKT$B_CHECKCHAR	= 0,0,8,0%; 		! bucket check character 
 MACRO		BKT$B_AREANO	= 1,0,8,0%; 		! area number form which bucket was allocated 
 MACRO		BKT$B_INDEXNO	= 1,0,8,0%; 		! index to which this bucket belongs (plg 3) 
 MACRO		BKT$W_ADRSAMPLE	= 2,0,16,0%; 		! address sample - low 16 bits of first vbn in bucket 
 MACRO		BKT$W_FREESPACE	= 4,0,16,0%; 		! displacement in bucket of first free byte 
 MACRO		BKT$W_KEYFRESPC	= 4,0,16,0%; 	! pointer to key's free space (plg 3) 
 MACRO		BKT$W_NXTRECID	= 6,0,16,0%; 		! next available word record id (plg 3) 
 MACRO		BKT$B_NXTRECID	= 6,0,8,0%; 		! next available record id 
 MACRO		BKT$B_LSTRECID	= 7,0,8,0%; 		! last id in range 
 MACRO		BKT$L_NXTBKT	= 8,0,32,0%; 		! vbn of next bucket 
 MACRO		BKT$B_LEVEL	= 12,0,8,0%; 		! bucket level number 
 MACRO		BKT$B_BKTCB	= 13,0,8,0%; 		! bucket control bits 
 			 
 MACRO		BKT$V_LASTBKT	= 13,0,1,0%; 		! last bucket in horizontal chain 
 LITERAL	BKT$M_LASTBKT	= 1^1 - 1^0; 
 MACRO		BKT$V_ROOTBKT	= 13,1,1,0%; 		! root bucket 
 LITERAL	BKT$M_ROOTBKT	= 1^2 - 1^1; 
 MACRO		BKT$V_LAST_CONT	= 13,2,1,0%; 		! last continuation bucket 
 LITERAL	BKT$M_LAST_CONT	= 1^3 - 1^2; 
 MACRO		BKT$V_PTR_SZ	= 13,3,2,0%; 		! size of vbn pointers in this bucket 
 LITERAL	BKT$M_PTR_SZ	= 1^5 - 1^3; 
 			
 LITERAL	BKT$C_OVERHDSZ	= 14; 
 LITERAL	BKT$K_OVERHDSZ	= 14; 			! length of bucket overhead 
 MACRO		BKT$L_DUP_COUNT	= 14,0,32,0%; 		! count of duplicates 
 				! only if count_dup set in index descriptor 
 				! only for primary data level buckets 
 LITERAL	BKT$C_ENDOVHD	= 4; 			! end of bucket overhead 
 LITERAL	BKT$C_DATBKTOVH	= 2; 			! end of bucket overhead for data buckets 
 LITERAL	BKT$C_DUPBKTOVH	= 8; 			! additional end of data bucket overhead 
 				!  when duplicates are allowed (LCB pointer 
 				!  and dup count) 

  
 ! 
 ! index record definition 
 ! 
 ! this is the definition of RMS-11/RMS-32 index file record formats 
 !	 
  
 !...$IRCDEF	
  
 MACRO		IRC$B_CONTROL	= 0,0,8,0%; 		! record control byte 
 			 
 MACRO		IRC$V_PTRSZ	= 0,0,2,0%; 		! size of pointer 
 LITERAL	IRC$M_PTRSZ	= 1^2 - 1^0; 
 MACRO		IRC$V_RECORDCB	= 0,2,6,0%; 		! record control bits 
 LITERAL	IRC$M_RECORDCB	= 1^8 - 1^2; 
 			
  
 ! 
 ! bits used for primary and secondary data levels 
 ! 
 			 
 							! skip size of pointer field 
 MACRO		IRC$V_DELETED	= 0,2,1,0%; 		! record is deleted 
 LITERAL	IRC$M_DELETED	= 1^3 - 1^2; 
 				 
 MACRO		IRC$V_NOPTRSZ	= 0,4,1,0%; 		! not pointer size 
 LITERAL	IRC$M_NOPTRSZ	= 1^5 - 1^4; 
 			
  
 ! 
 ! fields used only in primary data level 
 ! 
 			 
 							! skip over first 3 bits 
 MACRO		IRC$V_RRV	= 0,3,1,0%; 			! rrv record 
 LITERAL	IRC$M_RRV	= 1^4 - 1^3; 
 							! skip 
 MACRO		IRC$V_DEL_COUNT	= 0,5,1,0%; 		! count of deleted records 
 LITERAL	IRC$M_DEL_COUNT	= 1^6 - 1^5; 
 			
  
 ! 
 ! fields used only in secondary data level 
 ! 
 			 
 							! skip 5 bits 
 MACRO		IRC$V_KEYDELETE	= 0,5,1,0%; 		! key deleted 
 LITERAL	IRC$M_KEYDELETE	= 1^6 - 1^5; 
 			
  
 ! 
 ! fields used only in index levels 
 ! 
 			 
 							! space over other fields 
 MACRO		IRC$V_HIGH_KEY	= 0,2,1,0%; 		! no key value is present 
 LITERAL	IRC$M_HIGH_KEY	= 1^3 - 1^2; 
 				! highest key value is implied 
 MACRO		IRC$V_LAST_CONT	= 0,3,1,0%; 		! last continuation bucket pointer is present 
 LITERAL	IRC$M_LAST_CONT	= 1^4 - 1^3; 
 			
  
 			 
  
 ! 
 ! index bucket record 
 ! 
 MACRO		IRC$T_BUCKETPTR	= 1,0,0,0%; 		! bucket pointer (not referenced in the code, 
 				!  just present for consistency) 
 LITERAL	IRC$C_IDXPTRBAS	= 2; 			! used to determine size of pointer in index 
 LITERAL	IRC$C_IDXOVHDSZ	= 1; 			! includes record control byte 
 	 
 ! 
 ! data bucket record 
 ! 
 			 
 MACRO		IRC$B_ID	= 1,0,8,0%; 			! record id 
 MACRO		IRC$B_RRV_ID	= 2,0,8,0%; 		! rrv's id -- always in the same place 
  
 ! 
 ! prologue 3 data bucket record 
 ! 
 			 
 MACRO		IRC$W_ID	= 1,0,16,0%; 			! record id 
 MACRO		IRC$W_RRV_ID	= 3,0,16,0%; 		! rrv's id -- always in the same place 
 ! 
 ! constants 
 ! 
 LITERAL	IRC$C_DATSZFLD	= 2; 			! size of size field in variable length records 
 LITERAL	IRC$C_DATPTRBAS	= 3; 			! used to determine size of RRV in data buckets, 
 				!  and dup count in SIDR's 
 LITERAL	IRC$C_DATOVHDSZ	= 2; 			! includes the record control byte, and the id 
 LITERAL	IRC$C_FIXOVHDSZ	= 7; 			! the record overhead for fixed record 
 LITERAL	IRC$C_VAROVHDSZ	= 9; 			! record overhead for variable records 
 ! 
 ! prologue 3 constants 
 ! 
 LITERAL	IRC$C_DATPTRBS3	= 4; 			! used to determine size of RRV in data buckets 
 LITERAL	IRC$C_DATOVHSZ3	= 3; 			! record control byte, and id 
 LITERAL	IRC$C_FIXOVHSZ3	= 9; 			! record control byte, id, and rrv in fixed 
 				!  records 
 LITERAL	IRC$C_VAROVHSZ3	= 11; 			! record control byte, id, rrv, and size for 
 				!  variable length recs 
 LITERAL	IRC$C_KEYCMPOVH	= 2; 			! key compression overhead 
 LITERAL	IRC$C_DATCMPOVH	= 3; 			! data compression overhead 

  
 	 
 ! 
 ! definitions for the key descriptors in the prologue 
 ! 
 ! these definitions are associated w/ the plg and area definitions 
 ! 
 !...$KEYDEF	
  
 MACRO		KEY$L_IDXFL	= 0,0,32,0%; 		! vbn for next key descriptor 
 MACRO		KEY$W_NOFF	= 4,0,16,0%; 		! offset to next key descriptor 
 MACRO		KEY$B_IANUM	= 6,0,8,0%; 		! index area number 
 MACRO		KEY$B_LANUM	= 7,0,8,0%; 		! level 1 area number 
 MACRO		KEY$B_DANUM	= 8,0,8,0%; 		! data area number 
 MACRO		KEY$B_ROOTLEV	= 9,0,8,0%; 		! root level 
 MACRO		KEY$B_IDXBKTSZ	= 10,0,8,0%; 		! index bucket size 
 MACRO		KEY$B_DATBKTSZ	= 11,0,8,0%; 		! data bucket size 
 MACRO		KEY$L_ROOTVBN	= 12,0,32,0%; 		! root bucket pointer 
 MACRO		KEY$B_FLAGS	= 16,0,8,0%; 		! flag bits 
 			 
 MACRO		KEY$V_DUPKEYS	= 16,0,1,0%; 		! duplicate key values allowed 
 LITERAL	KEY$M_DUPKEYS	= 1^1 - 1^0; 
 MACRO		KEY$V_CHGKEYS	= 16,1,1,0%; 		! key value may change on $update operation 
 LITERAL	KEY$M_CHGKEYS	= 1^2 - 1^1; 
 MACRO		KEY$V_NULKEYS	= 16,2,1,0%; 		! null key character enabled 
 LITERAL	KEY$M_NULKEYS	= 1^3 - 1^2; 
 MACRO		KEY$V_IDX_COMPR	= 16,3,1,0%; 		! index is compressed 
 LITERAL	KEY$M_IDX_COMPR	= 1^4 - 1^3; 
 MACRO		KEY$V_INITIDX	= 16,4,1,0%; 		! index must be initialized 
 LITERAL	KEY$M_INITIDX	= 1^5 - 1^4; 
 MACRO		KEY$V_COUNT_DUP	= 16,5,1,0%; 		! maintain duplicate count 
 LITERAL	KEY$M_COUNT_DUP	= 1^6 - 1^5; 
 			
  
 						! primary key flags only 
 							! space over dupkeys 
 MACRO		KEY$V_NORFA	= 16,1,1,0%; 			! no rfa fields in records (single key only) 
 LITERAL	KEY$M_NORFA	= 1^2 - 1^1; 
 MACRO		KEY$V_PRG_D_RFA	= 16,2,1,0%; 		! delete records and rrv's may be purged 
 LITERAL	KEY$M_PRG_D_RFA	= 1^3 - 1^2; 
 				! from file (disables fast delete) 
 				 
 				 
 				 
 MACRO		KEY$V_KEY_COMPR	= 16,6,1,0%; 		! (PLG3) Primary key is compressed in data record 
 LITERAL	KEY$M_KEY_COMPR	= 1^7 - 1^6; 
 MACRO		KEY$V_REC_COMPR	= 16,7,1,0%; 		! (PLG3) Data record is compressed 
 LITERAL	KEY$M_REC_COMPR	= 1^8 - 1^7; 
 			
 LITERAL	KEY$C_MAX_DAT	= 10; 			! (PLG3) Maximum size of a non-compressed data 
 				!  record 
 LITERAL	KEY$C_MAX_PRIMARY	= 6; 			! (PLG3) Maximum size of a non-compressed 
 				!  primary key 
 LITERAL	KEY$C_MAX_INDEX	= 6; 			! (PLG3) Maximum size of a non-compressed 
 				!  index and SIDR key 
 MACRO		KEY$B_DATATYPE	= 17,0,8,0%; 		! data type for key 
 LITERAL	KEY$C_STRING	= 0; 			! string data type 
 LITERAL	KEY$C_SGNWORD	= 1; 			! signed binary word 
 LITERAL	KEY$C_UNSGNWORD	= 2; 			! unsigned binary word 
 LITERAL	KEY$C_SGNLONG	= 3; 			! signed binary long word 
 LITERAL	KEY$C_UNSGNLONG	= 4; 			! unsigned binary long word 
 LITERAL	KEY$C_PACKED	= 5; 			! packed decimal 
 LITERAL	KEY$C_MAX_DATA	= 5; 			! maximum data type value allowed 
 MACRO		KEY$B_SEGMENTS	= 18,0,8,0%; 		! number of segments in key 
 MACRO		KEY$B_NULLCHAR	= 19,0,8,0%; 		! "null" character 
 MACRO		KEY$B_KEYSZ	= 20,0,8,0%; 		! total key size 
 MACRO		KEY$B_KEYREF	= 21,0,8,0%; 		! key of reference 
 MACRO		KEY$W_MINRECSZ	= 22,0,16,0%; 		! minimum record length 
 MACRO		KEY$W_IDXFILL	= 24,0,16,0%; 		! index fill quantity 
 MACRO		KEY$W_DATFILL	= 26,0,16,0%; 		! data fill quantity 
 MACRO		KEY$W_POSITION	= 28,0,16,0%; 		! key seg position 
 MACRO		KEY$W_POSITION0	= 28,0,16,0%; 	! another name for position 0 
 MACRO		KEY$W_POSITION1	= 30,0,16,0%; 		! position 1 
 MACRO		KEY$W_POSITION2	= 32,0,16,0%; 		! position 2 
 MACRO		KEY$W_POSITION3	= 34,0,16,0%; 		! position 3 
 MACRO		KEY$W_POSITION4	= 36,0,16,0%; 		! position 4 
 MACRO		KEY$W_POSITION5	= 38,0,16,0%;  
 MACRO		KEY$W_POSITION6	= 40,0,16,0%;  
 MACRO		KEY$W_POSITION7	= 42,0,16,0%;  
 MACRO		KEY$B_SIZE	= 44,0,8,0%; 		! key segment size 
 MACRO		KEY$B_SIZE0	= 44,0,8,0%; 		! another name for size 
 MACRO		KEY$B_SIZE1	= 45,0,8,0%; 		! size 1 
 MACRO		KEY$B_SIZE2	= 46,0,8,0%;  
 MACRO		KEY$B_SIZE3	= 47,0,8,0%;  
 MACRO		KEY$B_SIZE4	= 48,0,8,0%;  
 MACRO		KEY$B_SIZE5	= 49,0,8,0%;  
 MACRO		KEY$B_SIZE6	= 50,0,8,0%;  
 MACRO		KEY$B_SIZE7	= 51,0,8,0%;  
 MACRO		KEY$T_KEYNAM	= 52,0,0,0%; 		! key name 
 LITERAL	KEY$S_KEYNAM	= 32; 
 MACRO		KEY$L_LDVBN	= 84,0,32,0%; 		! first data bucket 
 MACRO		KEY$B_TYPE	= 88,0,8,0%; 		! key segment datatype (plg 3) 
 MACRO		KEY$B_TYPE0	= 88,0,8,0%; 		! another name for first datatype (plg 3) 
 MACRO		KEY$B_TYPE1	= 89,0,8,0%; 		! (plg 3) 
 MACRO		KEY$B_TYPE2	= 90,0,8,0%; 		! (plg 3) 
 MACRO		KEY$B_TYPE3	= 91,0,8,0%; 		! (plg 3) 
 MACRO		KEY$B_TYPE4	= 92,0,8,0%; 		! (plg 3) 
 MACRO		KEY$B_TYPE5	= 93,0,8,0%; 		! (plg 3) 
 MACRO		KEY$B_TYPE6	= 94,0,8,0%; 		! (plg 3) 
 MACRO		KEY$B_TYPE7	= 95,0,8,0%; 		! (plg 3) 
 LITERAL	KEY$C_BLN	= 96; 
 LITERAL	KEY$K_BLN	= 96; 				! length of key descriptor in the prologue (plg 3) 
 LITERAL	KEY$C_SPARE	= 6; 			! these are spare words in key block (plg 3) 

  
 ! 
 ! 
 ! definitions for the area descriptor in the prologue 
 ! 
 ! 
 !...$AREADEF	
 MACRO		AREA$B_FLAGS	= 1,0,8,0%; 		! not currently used 
 MACRO		AREA$B_AREAID	= 2,0,8,0%; 		! area id 
 MACRO		AREA$B_ARBKTSZ	= 3,0,8,0%; 		! bucket size for area 
 MACRO		AREA$W_VOLUME	= 4,0,16,0%; 		! relative volume number 
 MACRO		AREA$B_ALN	= 6,0,8,0%; 			! extend allocation alignment 
 LITERAL	AREA$C_CYL	= 1; 			! cylinded alignment 
 LITERAL	AREA$C_LBN	= 2; 			! logical block alignment 
 LITERAL	AREA$C_VBN	= 3; 			! virtual block alignment 
 LITERAL	AREA$C_RFI	= 4; 			! allocate close to related file by fid 
 MACRO		AREA$B_AOP	= 7,0,8,0%; 			! alignment options 
 			 
 MACRO		AREA$V_HARD	= 7,0,1,0%; 			! absolute alignment or nothing 
 LITERAL	AREA$M_HARD	= 1^1 - 1^0; 
 MACRO		AREA$V_ONC	= 7,1,1,0%; 			! locate on cylinder 
 LITERAL	AREA$M_ONC	= 1^2 - 1^1; 
 				 
 MACRO		AREA$V_CBT	= 7,5,1,0%; 			! contiguous best try 
 LITERAL	AREA$M_CBT	= 1^6 - 1^5; 
 				 
 MACRO		AREA$V_CTG	= 7,7,1,0%; 			! contiguous 
 LITERAL	AREA$M_CTG	= 1^8 - 1^7; 
 			
 MACRO		AREA$L_AVAIL	= 8,0,32,0%; 		! available (returned) buckets 
 MACRO		AREA$L_CVBN	= 12,0,32,0%; 		! start vbn for current extent 
 MACRO		AREA$L_CNBLK	= 16,0,32,0%; 		! number of blocks in current extent 
 MACRO		AREA$L_USED	= 20,0,32,0%; 		! number of blocks used 
 MACRO		AREA$L_NXTVBN	= 24,0,32,0%; 		! next vbn to use 
 MACRO		AREA$L_NXT	= 28,0,32,0%; 			! start vbn for next extent 
 MACRO		AREA$L_NXBLK	= 32,0,32,0%; 		! number of blocks in next extent 
 MACRO		AREA$W_DEQ	= 36,0,16,0%; 			! default extend quantity 
 MACRO		AREA$L_LOC	= 40,0,32,0%; 			! start lbn on volume 
 MACRO		AREA$W_RFI	= 44,0,0,0%; 		! related file id 
 LITERAL	AREA$S_RFI	= 6; 
 MACRO		AREA$W_CHECK	= 62,0,16,0%; 		! checksum 
 LITERAL	AREA$C_BLN	= 64; 
 LITERAL	AREA$K_BLN	= 64; 				! length of area descriptor in the prologue 

  
