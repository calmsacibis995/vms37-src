 !	$begin	rmsusr,V02-040 
 ! 
 !**************************************************************************** 
 !*									    * 
 !*  COPYRIGHT (c) 1978, 1980, 1982 BY					    * 
 !*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    * 
 !*  ALL RIGHTS RESERVED.						    * 
 !* 									    * 
 !*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   * 
 !*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   * 
 !*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   * 
 !*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   * 
 !*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   * 
 !*  TRANSFERRED.							    * 
 !* 									    * 
 !*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   * 
 !*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   * 
 !*  CORPORATION.							    * 
 !* 									    * 
 !*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   * 
 !*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    * 
 !* 									    * 
 !*									    * 
 !**************************************************************************** 
 ! 
 !	rms user structure definitions 
 ! 
 !	Modified By: 
 ! 
 !	V02-040	RAS0073		Ron Schaefer		 2-Mar-1982 
 !		Add FAB$B_DSBMSK, to support $TRNLOG translation table 
 !		disable mask support. 
 ! 
 !	V02-039	CDS0003		C Saether		 5-Jan-1982 
 !		Add XAB$W_GBC and XAB$W_VERLIMIT to FHC XAB. 
 !		Make NAM$C_MAXRSS and NAM$C_MAXRSSLCL both 252. 
 ! 
 !	V02-038 DMW0003		David Michael Walp	21-Jan-82 
 !		Remove NAM$B/L_QUOTED, 17 ANSI "a" character filenames 
 ! 
 !	V02-037	KBT0001		Keith B Thompson	 8-Jan-1982 
 !		Remove XAB$B_COMPAT, change XAB$B_STRUCT to XAB$B_PROLOG 
 !		in the key xab and add XAB$B_MTACC to the protection xab 
 ! 
 !	V02-036	TMK0001		Todd M. Katz		 8-Jan-1982 
 !		Define NAM$V_IFI and NAM$V_SRCHNMF in the field NAM$L_WCC. 
 ! 
 !	V02-035	CDS0002		C Saether		23-Dec-1981 
 !		Add FAB$W_GBC field for global buffer count. 
 ! 
 !	V02-034 LJA0002		Laurie Anderson		20-Dec-1981 
 !		Re-inserted NAM$C_BLN_DIRWC as equivalant to NAM$C_BLN 
 ! 
 !	V02-033	CDS0001		C Saether		 4-Nov-1981 
 !		Change key xab "structure" field to "struct". 
 ! 
 !	V02-032	RAS0040		Ron Schaefer		26-Oct-1981 
 !		Add NAM$V_CNCL_DEV bit for concealed devices and 
 !		NAM$V_ROOT_DIR bit for rooted directories to the 
 !		NAM$L_FNB field. 
 ! 
 !	V02-031	PSK0004		Paulina S Knibbe	19-Oct-1981 
 !		Change the XAB$$B_CMP_BITS to COMPAT and insert the 
 !		constants that field can take. 
 ! 
 !	V02-030	PSK0003		Paulina S Knibbe	14-Sep-1981 
 !		Make the new key XAB variables shorter so we can 
 !		keep three column format in map 
 ! 
 !	V02-029	PSK0002		Paulina S Knibbe	02-Sep-1981 
 !		Make the KEY XAB long word aligned again. 
 ! 
 !	V02-028	PSK0001		Paulina S Knibbe	25-Aug-1981 
 !		Merge in Maria's changes to the KEY XAB. 
 ! 
 !	V02-027	RAS0028		Ron Schaefer		20-Aug-1981 
 !		Change FAB$C_STM11 to FAB$C_STM. 
 ! 
 !	V02-026	JAK0062		J A Krycka		14-Aug-1981 
 !		Add NOP and RFS fields to the NAM block. 
 ! 
 !	V02-025 RAS0014		Ron Schaefer		7-Jul-1981 
 !		Add stream format codes to FAB and stream access code to RAB. 
 ! 
 !	V02-024	RAS0012		Ron Schaefer		12-Jun-1981 
 !		Correct the BLISS definition of the XAB protection codes 
 !		to be relative to the start of the 4-bit protection field. 
 ! 
 !	V02-023	JAK0059		J A Krycka		11-Jun-1981 
 !		Multiplex the QUOTED descriptor in the NAM block with the 
 !		NAME descriptor instead of the DEV descriptor. 
 ! 
 !	V02-022	MCN0007		Maria del C. Nasr	12-May-1981 
 !		Use new symbol for old length of backup date and time XAB. 
 ! 
 !	V02-021	KRM0012		Karl Malik		17-Apr-1981 
 !		Remove the NAM DWC definitions and extend the NAM block 
 !		by 40 bytes to provide easy access to various filespec 
 !		elements of either the expanded name string or the 
 !		resultant name string. 
 ! 
 !	V02-020	MLJ0010		Martin L. Jack		25-Mar-1981 
 !		Add alternate format file ID in NAM block. 
 ! 
 !	V02-019 kpl0001		Peter Lieberwirth	31-Dec-1980 
 !		Include definitions for new ROP bits RRL and REA. 
 !		Clean up some spelling and format while here. 
 ! 
 !	V02-018	MCN0004		Maria del C. Nasr	17-Nov-1980 
 !		Include definition for backup date and time XAB. 
 ! 
 !	v017	reformat	dave walp	24-JUL-1980 
 ! 
 !	v016	cds0063		chris saether	7-DEC-1979 
 !		add rab$w_stv0 and rab$w_stv2 to get at both words of stv 
 ! 
 !	v015	tmh0001		tim halvorsen	01-NOV-1979 
 !		add svctx bit to wcc longword definition 
 ! 
 !	V014	ran0002		r a newell	1-SEP-1978	09:59 
 !		rms32 isam modification. 
 ! 
 !	e h marison,	 19-APR-1978  16:20 
 !	e h marison,	 26-APR-1978  13:08 
 !	w koenig,	 16-JUN-1978, added dct bit in key xab 
 ! 
 !	file access block (fab) definitions 
 ! 
 ! 
 !...$FABDEF	
  
 !+++++***** 
 !   the fields thru ctx must not be modified due to 
 !   commonality between fab/rab/xab 
 MACRO		FAB$B_BID	= 0,0,8,0%; 		! block id 
 LITERAL	FAB$C_BID	= 3; 		! code for fab 
 MACRO		FAB$B_BLN	= 1,0,8,0%; 		! block len 
 MACRO		FAB$W_IFI	= 2,0,16,0%; 		! internal file index 
 			 
 						! move to bit 6 
 MACRO		FAB$V_PPF_RAT	= 2,6,8,0%; 	! rat value for process-permanent files 
 LITERAL	FAB$M_PPF_RAT	= 1^14 - 1^6; 
 MACRO		FAB$V_PPF_IND	= 2,14,1,0%; 	! indirect access to process-permanent file 
 LITERAL	FAB$M_PPF_IND	= 1^15 - 1^14; 
 			! (i.e., restricted operations) 
 			
 MACRO		FAB$L_FOP	= 4,0,32,0%; 		! file options 
 			 
 						! reserved for asy (not implemented) 
 MACRO		FAB$V_MXV	= 4,1,1,0%; 		! maximize version number 
 LITERAL	FAB$M_MXV	= 1^2 - 1^1; 
 MACRO		FAB$V_SUP	= 4,2,1,0%; 		! supersede existing file 
 LITERAL	FAB$M_SUP	= 1^3 - 1^2; 
 MACRO		FAB$V_TMP	= 4,3,1,0%; 		! create temporary file 
 LITERAL	FAB$M_TMP	= 1^4 - 1^3; 
 MACRO		FAB$V_TMD	= 4,4,1,0%; 		! create temp file marked for delete 
 LITERAL	FAB$M_TMD	= 1^5 - 1^4; 
 MACRO		FAB$V_DFW	= 4,5,1,0%; 		! deferred write (rel and idx) 
 LITERAL	FAB$M_DFW	= 1^6 - 1^5; 
 MACRO		FAB$V_SQO	= 4,6,1,0%; 		! sequential access only 
 LITERAL	FAB$M_SQO	= 1^7 - 1^6; 
 MACRO		FAB$V_RWO	= 4,7,1,0%; 		! rewind mt on open 
 LITERAL	FAB$M_RWO	= 1^8 - 1^7; 
 MACRO		FAB$V_POS	= 4,8,1,0%; 		! use next magtape position 
 LITERAL	FAB$M_POS	= 1^9 - 1^8; 
 MACRO		FAB$V_WCK	= 4,9,1,0%; 		! write checking 
 LITERAL	FAB$M_WCK	= 1^10 - 1^9; 
 MACRO		FAB$V_NEF	= 4,10,1,0%; 		! inhibit end of file positioning 
 LITERAL	FAB$M_NEF	= 1^11 - 1^10; 
 MACRO		FAB$V_RWC	= 4,11,1,0%; 		! rewind mt on close 
 LITERAL	FAB$M_RWC	= 1^12 - 1^11; 
 MACRO		FAB$V_DMO	= 4,12,1,0%; 		! dismount mt on close (not implemented) 
 LITERAL	FAB$M_DMO	= 1^13 - 1^12; 
 MACRO		FAB$V_SPL	= 4,13,1,0%; 		! spool file on close 
 LITERAL	FAB$M_SPL	= 1^14 - 1^13; 
 MACRO		FAB$V_SCF	= 4,14,1,0%; 		! submit command file on close 
 LITERAL	FAB$M_SCF	= 1^15 - 1^14; 
 MACRO		FAB$V_DLT	= 4,15,1,0%; 		! delete sub-option 
 LITERAL	FAB$M_DLT	= 1^16 - 1^15; 
 MACRO		FAB$V_NFS	= 4,16,1,0%; 		! non-file structured operation 
 LITERAL	FAB$M_NFS	= 1^17 - 1^16; 
 MACRO		FAB$V_UFO	= 4,17,1,0%; 		! user file open - no rms operations 
 LITERAL	FAB$M_UFO	= 1^18 - 1^17; 
 MACRO		FAB$V_PPF	= 4,18,1,0%; 		! process permanent file (pio segment) 
 LITERAL	FAB$M_PPF	= 1^19 - 1^18; 
 MACRO		FAB$V_INP	= 4,19,1,0%; 		! process-permanent file is 'input' 
 LITERAL	FAB$M_INP	= 1^20 - 1^19; 
 MACRO		FAB$V_CTG	= 4,20,1,0%; 		! contiguous extension 
 LITERAL	FAB$M_CTG	= 1^21 - 1^20; 
 MACRO		FAB$V_CBT	= 4,21,1,0%; 		! contiguous best try 
 LITERAL	FAB$M_CBT	= 1^22 - 1^21; 
 MACRO		FAB$V_JNL	= 4,22,1,0%; 		! explicit logging (not implemented) 
 LITERAL	FAB$M_JNL	= 1^23 - 1^22; 
 MACRO		FAB$V_RCK	= 4,23,1,0%; 		! read checking 
 LITERAL	FAB$M_RCK	= 1^24 - 1^23; 
 MACRO		FAB$V_NAM	= 4,24,1,0%; 		! use name block dvi, did, and/or fid fields for open 
 LITERAL	FAB$M_NAM	= 1^25 - 1^24; 
 MACRO		FAB$V_CIF	= 4,25,1,0%; 		! create if non-existent 
 LITERAL	FAB$M_CIF	= 1^26 - 1^25; 
 MACRO		FAB$V_UFM	= 4,26,1,0%; 		! user file open mode (user if 1, super if 0) 
 LITERAL	FAB$M_UFM	= 1^27 - 1^26; 
 			!  enable only if esc and (ufo or nfs) are also on 
 			!  (note: this bit must immediately precede esc) 
 MACRO		FAB$V_ESC	= 4,27,1,0%; 		! 'escape' to non-standard function ($modify) 
 LITERAL	FAB$M_ESC	= 1^28 - 1^27; 
 MACRO		FAB$V_TEF	= 4,28,1,0%; 		! truncate at eof on close (write-accessed seq. disk file only) 
 LITERAL	FAB$M_TEF	= 1^29 - 1^28; 
 MACRO		FAB$V_OFP	= 4,29,1,0%; 		! output file parse (only name type sticky) 
 LITERAL	FAB$M_OFP	= 1^30 - 1^29; 
 MACRO		FAB$V_KFO	= 4,30,1,0%; 		! known file open (image activator only release 1) 
 LITERAL	FAB$M_KFO	= 1^31 - 1^30; 
 			
 MACRO		FAB$L_STS	= 8,0,32,0%; 		! status 
 MACRO		FAB$L_STV	= 12,0,32,0%; 		! status value 
 MACRO		FAB$L_ALQ	= 16,0,32,0%; 		! allocation quantity 
 MACRO		FAB$W_DEQ	= 20,0,16,0%; 		! default allocation quantity 
 MACRO		FAB$B_FAC	= 22,0,8,0%; 		! file access 
 			 
 MACRO		FAB$V_PUT	= 22,0,1,0%; 		! put access 
 LITERAL	FAB$M_PUT	= 1^1 - 1^0; 
 MACRO		FAB$V_GET	= 22,1,1,0%; 		! get access 
 LITERAL	FAB$M_GET	= 1^2 - 1^1; 
 MACRO		FAB$V_DEL	= 22,2,1,0%; 		! delete access 
 LITERAL	FAB$M_DEL	= 1^3 - 1^2; 
 MACRO		FAB$V_UPD	= 22,3,1,0%; 		! update access 
 LITERAL	FAB$M_UPD	= 1^4 - 1^3; 
 MACRO		FAB$V_TRN	= 22,4,1,0%; 		! truncate access 
 LITERAL	FAB$M_TRN	= 1^5 - 1^4; 
 MACRO		FAB$V_BIO	= 22,5,1,0%; 		! block i/o access 
 LITERAL	FAB$M_BIO	= 1^6 - 1^5; 
 MACRO		FAB$V_BRO	= 22,6,1,0%; 		! block and record i/o access 
 LITERAL	FAB$M_BRO	= 1^7 - 1^6; 
 MACRO		FAB$V_EXE	= 22,7,1,0%; 		! execute access (caller must be exec or kernel mode, 
 LITERAL	FAB$M_EXE	= 1^8 - 1^7; 
 			!  ufo must also be set) 
 			
 MACRO		FAB$B_SHR	= 23,0,8,0%; 		! file sharing 
 			 
 MACRO		FAB$V_SHRPUT	= 23,0,1,0%; 	! put access 
 LITERAL	FAB$M_SHRPUT	= 1^1 - 1^0; 
 MACRO		FAB$V_SHRGET	= 23,1,1,0%; 	! get access 
 LITERAL	FAB$M_SHRGET	= 1^2 - 1^1; 
 MACRO		FAB$V_SHRDEL	= 23,2,1,0%; 	! delete access 
 LITERAL	FAB$M_SHRDEL	= 1^3 - 1^2; 
 MACRO		FAB$V_SHRUPD	= 23,3,1,0%; 	! update access 
 LITERAL	FAB$M_SHRUPD	= 1^4 - 1^3; 
 MACRO		FAB$V_MSE	= 23,4,1,0%; 		! multi-stream connects enabled 
 LITERAL	FAB$M_MSE	= 1^5 - 1^4; 
 MACRO		FAB$V_NIL	= 23,5,1,0%; 		! no sharing 
 LITERAL	FAB$M_NIL	= 1^6 - 1^5; 
 MACRO		FAB$V_UPI	= 23,6,1,0%; 		! user provided interlocking (allows multiple 
 LITERAL	FAB$M_UPI	= 1^7 - 1^6; 
 			!  writers to seq. files) 
 			
 MACRO		FAB$L_CTX	= 24,0,32,0%; 		! user context 
 !-----***** 
 MACRO		FAB$B_RTV	= 28,0,8,1%; 	! retrieval window size 
 MACRO		FAB$B_ORG	= 29,0,8,0%; 		! file organization 
 			 
 				 
 MACRO		FAB$V_ORG	= 29,4,4,0%;  
 			
 LITERAL	FAB$C_SEQ	= 0; 		! sequential 
 LITERAL	FAB$C_REL	= 16; 		! relative 
 LITERAL	FAB$C_IDX	= 32; 		! indexed 
 LITERAL	FAB$C_HSH	= 48; 		! hashed 
 MACRO		FAB$B_RAT	= 30,0,8,0%; 		! record format 
 			 
 MACRO		FAB$V_FTN	= 30,0,1,0%; 		! fortran carriage-ctl 
 LITERAL	FAB$M_FTN	= 1^1 - 1^0; 
 MACRO		FAB$V_CR	= 30,1,1,0%; 		! lf-record-cr carriage ctl 
 LITERAL	FAB$M_CR	= 1^2 - 1^1; 
 MACRO		FAB$V_PRN	= 30,2,1,0%; 		! print-file carriage ctl 
 LITERAL	FAB$M_PRN	= 1^3 - 1^2; 
 MACRO		FAB$V_BLK	= 30,3,1,0%; 		! records don't cross block boundaries 
 LITERAL	FAB$M_BLK	= 1^4 - 1^3; 
 			
 MACRO		FAB$B_RFM	= 31,0,8,0%; 		! record format 
 LITERAL	FAB$C_RFM_DFLT	= 2; 		! var len is default 
 LITERAL	FAB$C_UDF	= 0; 		! undefined (also stream binary) 
 LITERAL	FAB$C_FIX	= 1; 		! fixed length records 
 LITERAL	FAB$C_VAR	= 2; 		! variable length records 
 LITERAL	FAB$C_VFC	= 3; 		! variable fixed control 
 LITERAL	FAB$C_STM	= 4; 		! RMS-11 stream (valid only for sequential org) 
 LITERAL	FAB$C_STMLF	= 5; 		! LF stream (valid only for sequential org) 
 LITERAL	FAB$C_STMCR	= 6; 		! CR stream (valid only for sequential org) 
 LITERAL	FAB$C_MAXRFM	= 6; 		! maximum rfm supported 
 MACRO		FAB$L_JNL	= 32,0,32,0%; 		! lcb address 
 MACRO		FAB$L_XAB	= 36,0,32,0%; 		! xab address 
 MACRO		FAB$L_NAM	= 40,0,32,0%; 		! nam block address 
 MACRO		FAB$L_FNA	= 44,0,32,0%; 		! file name string address 
 MACRO		FAB$L_DNA	= 48,0,32,0%; 		! default file name string addr 
 MACRO		FAB$B_FNS	= 52,0,8,0%; 		! file name string size 
 MACRO		FAB$B_DNS	= 53,0,8,0%; 		! default name string size 
 MACRO		FAB$W_MRS	= 54,0,16,0%; 		! maximum record size 
 MACRO		FAB$L_MRN	= 56,0,32,0%; 		! maximum record number 
 MACRO		FAB$W_BLS	= 60,0,16,0%; 		! blocksize for tape 
 MACRO		FAB$B_BKS	= 62,0,8,0%; 		! bucket size 
 MACRO		FAB$B_FSZ	= 63,0,8,0%; 		! fixed header size 
 MACRO		FAB$L_DEV	= 64,0,32,0%; 		! device characteristics 
 MACRO		FAB$L_SDC	= 68,0,32,0%; 		! spooling device characteristics 
 MACRO		FAB$W_GBC	= 72,0,16,0%; 		! Global buffer count 
 MACRO		FAB$B_DSBMSK	= 74,0,8,0%; 	! $TRNLOG disable mask 
 LITERAL	FAB$C_BLN	= 80; 
 LITERAL	FAB$K_BLN	= 80; 			! length of fab 

  
 ! 
 !	 record access block (rab) definitions 
 ! 
 !  there is one rab per connected stream 
 !  it is used for all communications between the user 
 !  and rms concerning operations on the stream 
 ! 
 !...$RABDEF	
  
 !+++++***** 
 !  the fields thru ctx cannot be changed due to commonality 
 !  with the fab 
 ! 
 MACRO		RAB$B_BID	= 0,0,8,0%; 		! block id 
 LITERAL	RAB$C_BID	= 1; 		! code for rab 
 MACRO		RAB$B_BLN	= 1,0,8,0%; 		! block length 
 MACRO		RAB$W_ISI	= 2,0,16,0%; 		! internal stream index 
 			! (ifi in fab) 
 			 
 						! move to bit 6 
 MACRO		RAB$V_PPF_RAT	= 2,6,8,0%; 	! rat value for process-permanent files 
 LITERAL	RAB$M_PPF_RAT	= 1^14 - 1^6; 
 MACRO		RAB$V_PPF_IND	= 2,14,1,0%; 	! indirect access to process-permanent file 
 LITERAL	RAB$M_PPF_IND	= 1^15 - 1^14; 
 			! (i.e., restricted operations) 
 			
 MACRO		RAB$L_ROP	= 4,0,32,0%; 		! record options 
 			 
 			! the following bits may be 
 			! input to various rab-related 
 			! operations 
 			! 
 MACRO		RAB$V_ASY	= 4,0,1,0%; 		! asynchronous operations 
 LITERAL	RAB$M_ASY	= 1^1 - 1^0; 
 MACRO		RAB$V_TPT	= 4,1,1,0%; 		! truncate put  -  allow sequential put not at 
 LITERAL	RAB$M_TPT	= 1^2 - 1^1; 
 			!   eof, thus truncating file (seq. org only) 
 			! 
 			! these next two should be in the byte for bits 
 			! input to $find or $get, but there is no room there 
 			! 
 MACRO		RAB$V_REA	= 4,2,1,0%; 		! lock record for read only, allow other readers 
 LITERAL	RAB$M_REA	= 1^3 - 1^2; 
 MACRO		RAB$V_RRL	= 4,3,1,0%; 		! read record regardless of lock 
 LITERAL	RAB$M_RRL	= 1^4 - 1^3; 
 			! 
 MACRO		RAB$V_UIF	= 4,4,1,0%; 		! update if existent 
 LITERAL	RAB$M_UIF	= 1^5 - 1^4; 
 MACRO		RAB$V_MAS	= 4,5,1,0%; 		! mass-insert mode 
 LITERAL	RAB$M_MAS	= 1^6 - 1^5; 
 MACRO		RAB$V_FDL	= 4,6,1,0%; 		! fast record deletion 
 LITERAL	RAB$M_FDL	= 1^7 - 1^6; 
 MACRO		RAB$V_HSH	= 4,7,1,0%; 		! use hash code in bkt 
 LITERAL	RAB$M_HSH	= 1^8 - 1^7; 
 			! 
 MACRO		RAB$V_EOF	= 4,8,1,0%; 		! connect to eof 
 LITERAL	RAB$M_EOF	= 1^9 - 1^8; 
 MACRO		RAB$V_RAH	= 4,9,1,0%; 		! read ahead 
 LITERAL	RAB$M_RAH	= 1^10 - 1^9; 
 MACRO		RAB$V_WBH	= 4,10,1,0%; 		! write behind 
 LITERAL	RAB$M_WBH	= 1^11 - 1^10; 
 MACRO		RAB$V_BIO	= 4,11,1,0%; 		! connect for bio only 
 LITERAL	RAB$M_BIO	= 1^12 - 1^11; 
 						! (1 spare) 
 MACRO		RAB$V_LOA	= 4,13,1,0%; 		! use bucket fill percentage 
 LITERAL	RAB$M_LOA	= 1^14 - 1^13; 
 MACRO		RAB$V_LIM	= 4,14,1,0%; 		! compare for key limit reached on $get/$find seq. (idx only) 
 LITERAL	RAB$M_LIM	= 1^15 - 1^14; 
 						! (1 spare) 
 			! 
 			! the following bits are input to 
 			! $find or $get, (see above also REA and RRL) 
 			! (separate byte) 
 			! 
 MACRO		RAB$V_LOC	= 4,16,1,0%; 		! use locate mode 
 LITERAL	RAB$M_LOC	= 1^17 - 1^16; 
 MACRO		RAB$V_WAT	= 4,17,1,0%; 		! wait if record not available 
 LITERAL	RAB$M_WAT	= 1^18 - 1^17; 
 MACRO		RAB$V_ULK	= 4,18,1,0%; 		! manual unlocking 
 LITERAL	RAB$M_ULK	= 1^19 - 1^18; 
 MACRO		RAB$V_RLK	= 4,19,1,0%; 		! allow readers for this locked record 
 LITERAL	RAB$M_RLK	= 1^20 - 1^19; 
 MACRO		RAB$V_NLK	= 4,20,1,0%; 		! do not lock record 
 LITERAL	RAB$M_NLK	= 1^21 - 1^20; 
 MACRO		RAB$V_KGE	= 4,21,1,0%; 		! key > or = 
 LITERAL	RAB$M_KGE	= 1^22 - 1^21; 
 MACRO		RAB$V_KGT	= 4,22,1,0%; 		! key greater than 
 LITERAL	RAB$M_KGT	= 1^23 - 1^22; 
 MACRO		RAB$V_NXR	= 4,23,1,0%; 		! get non-existent record 
 LITERAL	RAB$M_NXR	= 1^24 - 1^23; 
 			! 
 			!  the following bits are terminal qualifiers only 
 			!  (separate byte) 
 			! 
 MACRO		RAB$V_RNE	= 4,24,1,0%; 		! read no echo 
 LITERAL	RAB$M_RNE	= 1^25 - 1^24; 
 MACRO		RAB$V_TMO	= 4,25,1,0%; 		! use time-out period 
 LITERAL	RAB$M_TMO	= 1^26 - 1^25; 
 MACRO		RAB$V_CVT	= 4,26,1,0%; 		! convert to upper case 
 LITERAL	RAB$M_CVT	= 1^27 - 1^26; 
 MACRO		RAB$V_RNF	= 4,27,1,0%; 		! read no filter 
 LITERAL	RAB$M_RNF	= 1^28 - 1^27; 
 						! spare (for dsablmbx if ever supported) 
 MACRO		RAB$V_PTA	= 4,29,1,0%; 		! purge type ahead 
 LITERAL	RAB$M_PTA	= 1^30 - 1^29; 
 MACRO		RAB$V_PMT	= 4,30,1,0%; 		! use prompt buffer 
 LITERAL	RAB$M_PMT	= 1^31 - 1^30; 
 MACRO		RAB$V_CCO	= 4,31,1,0%; 		! cancel control o on output 
 LITERAL	RAB$M_CCO	= 1^32 - 1^31; 
 			
 MACRO		RAB$B_ROP1	= 5,0,8,0%; 	! various options 
 MACRO		RAB$B_ROP2	= 6,0,8,0%; 	! get/find options  (use of this field discouraged 
 			! due to REA and RRL being in a different byte) 
 MACRO		RAB$B_ROP3	= 7,0,8,0%; 	! terminal read options 
 ! 
 MACRO		RAB$L_STS	= 8,0,32,0%; 		! status 
 MACRO		RAB$L_STV	= 12,0,32,0%; 		! status value 
 MACRO		RAB$W_STV0	= 12,0,16,0%; 	! low word of stv 
 MACRO		RAB$W_STV2	= 14,0,16,0%; 	! high word of stv 
 MACRO		RAB$W_RFA	= 16,0,0,0%; 	! record's file address 
 LITERAL	RAB$S_RFA	= 6; 
 MACRO		RAB$L_RFA0	= 16,0,32,0%;  
 MACRO		RAB$W_RFA4	= 20,0,16,0%;  
 			!  to the rfa field to be a move quad, overwriting 
 			!  this reserved word) 
 MACRO		RAB$L_CTX	= 24,0,32,0%; 		! user context 
 !-----***** 
 MACRO		RAB$B_RAC	= 30,0,8,0%; 		! record access 
 LITERAL	RAB$C_SEQ	= 0; 		! sequential access 
 LITERAL	RAB$C_KEY	= 1; 		! keyed access 
 LITERAL	RAB$C_RFA	= 2; 		! rfa access 
 LITERAL	RAB$C_STM	= 3; 		! stream access (valid only for sequential org) 
 MACRO		RAB$B_TMO	= 31,0,8,0%; 		! time-out period 
 MACRO		RAB$W_USZ	= 32,0,16,0%; 		! user buffer size 
 MACRO		RAB$W_RSZ	= 34,0,16,0%; 		! record buffer size 
 MACRO		RAB$L_UBF	= 36,0,32,0%; 		! user buffer address 
 MACRO		RAB$L_RBF	= 40,0,32,0%; 		! record buffer address 
 MACRO		RAB$L_RHB	= 44,0,32,0%; 		! record header buffer addr 
 MACRO		RAB$L_KBF	= 48,0,32,0%; 		! key buffer address 
 MACRO		RAB$L_PBF	= 48,0,32,0%; 	! prompt buffer addr 
 MACRO		RAB$B_KSZ	= 52,0,8,0%; 		! key buffer size 
 MACRO		RAB$B_PSZ	= 52,0,8,0%; 	! prompt buffer size 
 MACRO		RAB$B_KRF	= 53,0,8,0%; 		! key of reference 
 MACRO		RAB$B_MBF	= 54,0,8,1%; 	! multi-buffer count 
 MACRO		RAB$B_MBC	= 55,0,8,0%; 		! multi-block  count 
 MACRO		RAB$L_BKT	= 56,0,32,0%; 		! bucket hash code, vbn, or rrn 
 MACRO		RAB$L_DCT	= 56,0,32,0%; 	! duplicates count on key accessed on alternate key 
 MACRO		RAB$L_FAB	= 60,0,32,0%; 		! related fab for connect 
 LITERAL	RAB$C_BLN	= 68; 
 LITERAL	RAB$K_BLN	= 68; 			! length of rab 

  
 ! 
 !	 name block field definitions 
 ! 
 !  the nam block is used to communicate optional 
 !  filename-related information 
 ! 
 !...$NAMDEF	
  
 MACRO		NAM$B_BID	= 0,0,8,0%; 		! block id 
 LITERAL	NAM$C_BID	= 2; 		! code for nam block 
 MACRO		NAM$B_BLN	= 1,0,8,0%; 		! block length 
 !+++++++++++++++++++++++ 
 !  the following 3 fields must not be rearranged relative to each other 
 ! 
 MACRO		NAM$B_RSS	= 2,0,8,0%; 		! resultant string area size 
 LITERAL	NAM$C_MAXRSS	= 252; 		! maximum resultant name string size (network) 
 LITERAL	NAM$C_MAXRSSLCL	= 252; 		!maximum resultant name string size (local) 
 			!	dev (15+1) 
 			!	dir (60) 
 			!	name,type,version (9+3+6+2) 
 MACRO		NAM$B_RSL	= 3,0,8,0%; 		! resultant string length 
 MACRO		NAM$L_RSA	= 4,0,32,0%; 		! resultant string area address 
 !----------------------- 
 MACRO		NAM$B_NOP	= 8,0,8,0%; 		! Name options (currently not documented) 
 			! Note: This field is reserved for use by Digital 
 					! 
 MACRO		NAM$V_PWD	= 8,0,1,0%; 		! Return password if present in nodespec string 
 LITERAL	NAM$M_PWD	= 1^1 - 1^0; 
 			!  (default is to mask out password from expanded and 
 			!  resultant name strings and to create a logical name 
 			!  whose equivalence string is the unaltered nodespec) 
 MACRO		NAM$V_ROD	= 8,1,1,0%; 		! Return optional data if present in taskspec string 
 LITERAL	NAM$M_ROD	= 1^2 - 1^1; 
 			!  (default is to mask out binary data after slash in 
 			!  taskspec from expanded and resultant name strings) 
 MACRO		NAM$V_SOD	= 8,2,1,0%; 		! Send optional data if present in taskspec string 
 LITERAL	NAM$M_SOD	= 1^3 - 1^2; 
 			!  (default is to ignore optional data in taskspec 
 			!  string for a task-to-task access function) 
 				! 
 MACRO		NAM$B_RFS	= 9,0,8,0%; 		! Remote file system type (currently not documented) 
 			! Note: This field is reserved for use by Digital 
 LITERAL	NAM$C_UFS	= 0; 		! Unknown file system for remote file access or 
 			!  not applicable for local file access or 
 			!  not applicable for task-to-task operation 
 LITERAL	NAM$C_RMS11	= 1; 		! RMS-11 
 LITERAL	NAM$C_RMS20	= 2; 		! RMS-20 
 LITERAL	NAM$C_RMS32	= 3; 		! RMS-32 
 LITERAL	NAM$C_FCS11	= 4; 		! FCS-11 
 LITERAL	NAM$C_RT11FS	= 5; 		! RT-11 file system 
 LITERAL	NAM$C_TOPS20FS	= 7; 		! TOPS-20 file system 
 LITERAL	NAM$C_TOPS10FS	= 8; 		! TOPS-10 file system 
 !+++++++++++++++++++++++ 
 !  the following 3 fields must not be rearranged relative to each other 
 ! 
 MACRO		NAM$B_ESS	= 10,0,8,0%; 		! espanded string area size 
 MACRO		NAM$B_ESL	= 11,0,8,0%; 		! expanded string length 
 MACRO		NAM$L_ESA	= 12,0,32,0%; 		! expanded string area address 
 !----------------------- 
 MACRO		NAM$L_RLF	= 16,0,32,0%; 		! related file nam block addr 
 MACRO		NAM$T_DVI	= 20,0,0,0%; 	! device id 
 LITERAL	NAM$S_DVI	= 16; 
 LITERAL	NAM$C_DVI	= 16; 		! length of dvi field 
 !+++++***** 
 !  the location of the following fields must not 
 !  be changed due to their commonality with the fib 
 MACRO		NAM$W_FID	= 36,0,0,0%; 	! file id 
 LITERAL	NAM$S_FID	= 6; 
 MACRO		NAM$W_FID_NUM	= 36,0,16,0%; 	! file number 
 MACRO		NAM$W_FID_SEQ	= 38,0,16,0%; 	! sequence number 
 MACRO		NAM$W_FID_RVN	= 40,0,16,0%; 	! relative volume number 
 MACRO		NAM$B_FID_RVN	= 40,0,8,0%; 	! alternate format RVN 
 MACRO		NAM$B_FID_NMX	= 41,0,8,0%; 	! alternate format file number extension 
 MACRO		NAM$W_DID	= 42,0,0,0%; 	! directory id 
 LITERAL	NAM$S_DID	= 6; 
 MACRO		NAM$W_DID_NUM	= 42,0,16,0%; 	! file number 
 MACRO		NAM$W_DID_SEQ	= 44,0,16,0%; 	! sequence number 
 MACRO		NAM$W_DID_RVN	= 46,0,16,0%; 	! relative volume number 
 MACRO		NAM$B_DID_RVN	= 46,0,8,0%; 	! alternate format RVN 
 MACRO		NAM$B_DID_NMX	= 47,0,8,0%; 	! alternate format file number extension 
 MACRO		NAM$L_WCC	= 48,0,32,0%; 		! wild card context 
 			 
 						! the first word is reserved for IFI/ACP context 
 MACRO		NAM$V_IFI	= 48,16,1,0%; 		! the first word contains an IFI 
 LITERAL	NAM$M_IFI	= 1^17 - 1^16; 
 						! grow from top down, start at top bit 
 MACRO		NAM$V_SRCHNMF	= 48,30,1,0%; 	! no-more-files has been encountered on a search 
 LITERAL	NAM$M_SRCHNMF	= 1^31 - 1^30; 
 MACRO		NAM$V_SVCTX	= 48,31,1,0%; 		! save context across search calls 
 LITERAL	NAM$M_SVCTX	= 1^32 - 1^31; 
 			
 MACRO		NAM$L_FNB	= 52,0,32,0%; 		! file name status bits 
 			 
 MACRO		NAM$V_EXP_VER	= 52,0,1,0%; 	! version was explicit 
 LITERAL	NAM$M_EXP_VER	= 1^1 - 1^0; 
 MACRO		NAM$V_EXP_TYPE	= 52,1,1,0%; 	! type was explicit 
 LITERAL	NAM$M_EXP_TYPE	= 1^2 - 1^1; 
 MACRO		NAM$V_EXP_NAME	= 52,2,1,0%; 	! name was explicit 
 LITERAL	NAM$M_EXP_NAME	= 1^3 - 1^2; 
 MACRO		NAM$V_WILD_VER	= 52,3,1,0%; 	! version contained a wild card 
 LITERAL	NAM$M_WILD_VER	= 1^4 - 1^3; 
 MACRO		NAM$V_WILD_TYPE	= 52,4,1,0%; 	! type contained a wild card 
 LITERAL	NAM$M_WILD_TYPE	= 1^5 - 1^4; 
 MACRO		NAM$V_WILD_NAME	= 52,5,1,0%; 	! name contained a wild card 
 LITERAL	NAM$M_WILD_NAME	= 1^6 - 1^5; 
 MACRO		NAM$V_EXP_DIR	= 52,6,1,0%; 	! directory was explicit 
 LITERAL	NAM$M_EXP_DIR	= 1^7 - 1^6; 
 MACRO		NAM$V_EXP_DEV	= 52,7,1,0%; 	! device was explicit 
 LITERAL	NAM$M_EXP_DEV	= 1^8 - 1^7; 
 MACRO		NAM$V_WILDCARD	= 52,8,1,0%; 	! filename string included a wild card 
 LITERAL	NAM$M_WILDCARD	= 1^9 - 1^8; 
 			! (inclusive or of other wild card bits) 
 						! (spares) 
 MACRO		NAM$V_CNCL_DEV	= 52,12,1,0%; 	! concealed device present 
 LITERAL	NAM$M_CNCL_DEV	= 1^13 - 1^12; 
 MACRO		NAM$V_ROOT_DIR	= 52,13,1,0%; 	! root directory present 
 LITERAL	NAM$M_ROOT_DIR	= 1^14 - 1^13; 
 MACRO		NAM$V_LOWVER	= 52,14,1,0%; 	! lower numbered version(s) of file exist(s) 
 LITERAL	NAM$M_LOWVER	= 1^15 - 1^14; 
 MACRO		NAM$V_HIGHVER	= 52,15,1,0%; 	! higher 		" 
 LITERAL	NAM$M_HIGHVER	= 1^16 - 1^15; 
 			! 
 MACRO		NAM$V_PPF	= 52,16,1,0%; 		! process-permanent file referenced indirectly 
 LITERAL	NAM$M_PPF	= 1^17 - 1^16; 
 MACRO		NAM$V_NODE	= 52,17,1,0%; 		! filename specification included a nodename 
 LITERAL	NAM$M_NODE	= 1^18 - 1^17; 
 MACRO		NAM$V_QUOTED	= 52,18,1,0%; 	! filename spec included a quoted string 
 LITERAL	NAM$M_QUOTED	= 1^19 - 1^18; 
 MACRO		NAM$V_GRP_MBR	= 52,19,1,0%; 	! directory spec was of group-member format 
 LITERAL	NAM$M_GRP_MBR	= 1^20 - 1^19; 
 MACRO		NAM$V_WILD_DIR	= 52,20,1,0%; 	! directory spec included a wild card 
 LITERAL	NAM$M_WILD_DIR	= 1^21 - 1^20; 
 MACRO		NAM$V_DIR_LVLS	= 52,21,3,0%; 	! number of directory levels (0=ufd only) 
 LITERAL	NAM$M_DIR_LVLS	= 1^24 - 1^21; 
 			
 			 
 						! separate byte for wild card directory flags 
 MACRO		NAM$V_WILD_UFD	= 52,24,1,0%; 	! ufd included a wild card 
 LITERAL	NAM$M_WILD_UFD	= 1^25 - 1^24; 
 MACRO		NAM$V_WILD_SFD1	= 52,25,1,0%; 	! sfd1 included a wild card 
 LITERAL	NAM$M_WILD_SFD1	= 1^26 - 1^25; 
 MACRO		NAM$V_WILD_SFD2	= 52,26,1,0%; 	! sfd2 included a wild card 
 LITERAL	NAM$M_WILD_SFD2	= 1^27 - 1^26; 
 MACRO		NAM$V_WILD_SFD3	= 52,27,1,0%; 	! sfd3 included a wild card 
 LITERAL	NAM$M_WILD_SFD3	= 1^28 - 1^27; 
 MACRO		NAM$V_WILD_SFD4	= 52,28,1,0%; 	! sfd4 included a wild card 
 LITERAL	NAM$M_WILD_SFD4	= 1^29 - 1^28; 
 MACRO		NAM$V_WILD_SFD5	= 52,29,1,0%; 	! sfd5 included a wild card 
 LITERAL	NAM$M_WILD_SFD5	= 1^30 - 1^29; 
 MACRO		NAM$V_WILD_SFD6	= 52,30,1,0%; 	! sfd6 included a wild card 
 LITERAL	NAM$M_WILD_SFD6	= 1^31 - 1^30; 
 MACRO		NAM$V_WILD_SFD7	= 52,31,1,0%; 	! sfd7 included a wild card 
 LITERAL	NAM$M_WILD_SFD7	= 1^32 - 1^31; 
 			
 			 
 						! alternate definitions for wild_ufd and wild_sfd1 
 MACRO		NAM$V_WILD_GRP	= 52,24,1,0%; 	! group contained a wild card 
 LITERAL	NAM$M_WILD_GRP	= 1^25 - 1^24; 
 MACRO		NAM$V_WILD_MBR	= 52,25,1,0%; 	! member contained a wild card 
 LITERAL	NAM$M_WILD_MBR	= 1^26 - 1^25; 
 			
 !-----***** 
 LITERAL	NAM$C_BLN_V2	= 56; 
 LITERAL	NAM$K_BLN_V2	= 56; 		! Version 2 name block length 
 			! (prior to 40 byte extension) 
  
 ! 
 ! Extend the NAM block by 40 bytes. 
 ! 
 MACRO		NAM$B_NODE	= 56,0,8,0%; 	! Nodespec length 
 MACRO		NAM$B_DEV	= 57,0,8,0%; 	! Device length 
 MACRO		NAM$B_DIR	= 58,0,8,0%; 	! Directory length 
 MACRO		NAM$B_NAME	= 59,0,8,0%; 	! Filename length 
 MACRO		NAM$B_TYPE	= 60,0,8,0%; 	! Filetype length 
 MACRO		NAM$B_VER	= 61,0,8,0%; 	! Version number length 
 MACRO		NAM$L_NODE	= 64,0,32,0%; 	! Nodespec address 
 MACRO		NAM$L_DEV	= 68,0,32,0%; 	! Device address 
 MACRO		NAM$L_DIR	= 72,0,32,0%; 	! Directory address 
 MACRO		NAM$L_NAME	= 76,0,32,0%; 	! Filename address 
 MACRO		NAM$L_TYPE	= 80,0,32,0%; 	! Filetype address 
 MACRO		NAM$L_VER	= 84,0,32,0%; 	! Version number address 
 LITERAL	NAM$C_BLN_DIRWC	= 96; 
 LITERAL	NAM$K_BLN_DIRWC	= 96; 		! Not documented optional length 
 LITERAL	NAM$C_BLN	= 96; 
 LITERAL	NAM$K_BLN	= 96; 			! Name block length 

  
 ! 
 !	 definitions for all xabs 
 !		$xabdef 
 ! 
 ! 
 !...$XABDEF	
 ! 
 !  the first four fields are shared in common between all xabs 
 !  and hence are defined only once 
 !  (the only exception is that the spare word may be used by some xabs) 
 ! 
 MACRO		XAB$B_COD	= 0,0,8,0%; 		! xab id code 
 MACRO		XAB$B_BLN	= 1,0,8,0%; 		! block length 
 MACRO		XAB$L_NXT	= 4,0,32,0%; 		! xab chain link 
 					!UP TILL NOW COMMON AMONG ALL XABS 
 			!WITH POSSIBLE EXCEPTION OF SPARE FIELD 
 MACRO		XAB$W_RVN	= 8,0,16,0%;  
 MACRO		XAB$Q_RDT	= 12,0,0,1%;  
 LITERAL	XAB$S_RDT	= 8; 
 MACRO		XAB$L_RDT0	= 12,0,32,0%;  
 MACRO		XAB$L_RDT4	= 16,0,32,1%;  
 			!COMMON AMONG DAT AND RDT XABS 
 					!BACK TO END OF TOTAL COMMONALITY 
 MACRO		XAB$B_BKZ	= 22,0,8,0%; 		!COMMON TO FHC AND ALQ XABS 

 !++ 
 !	file header characteristics xab definitions 
 !		$xabfhcdef 
 ! 
 !+++++***** 
 !...$XABFHCDEF	 
 !  the fields of this xab cannot be rearranged since 
 !  they correspond to an on-disk structure 
 ! 
 LITERAL	XAB$C_FHC	= 29; 		! xabfhc id code 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$B_RFO	= 8,0,8,0%; 		! record format and file org 
 MACRO		XAB$B_ATR	= 9,0,8,0%; 		! record attributes 
 MACRO		XAB$W_LRL	= 10,0,16,0%; 		! longest record's length 
 MACRO		XAB$L_HBK	= 12,0,32,0%; 		! hi vbn allocated 
 			! (n.b. reversed on disk!) 
 MACRO		XAB$W_HBK0	= 12,0,16,0%;  
 MACRO		XAB$W_HBK2	= 14,0,16,0%;  
 MACRO		XAB$L_EBK	= 16,0,32,0%; 		! eof vbn 
 			! (n.b. reversed on disk) 
 MACRO		XAB$W_EBK0	= 16,0,16,0%;  
 MACRO		XAB$W_EBK2	= 18,0,16,0%;  
 MACRO		XAB$W_FFB	= 20,0,16,0%; 		! first free byte in eof block 
 			! defined above in $xabdef, since it is shared 
 			! by the all xab) 
 MACRO		XAB$B_HSZ	= 23,0,8,0%; 		! header size for vfc 
 MACRO		XAB$W_MRZ	= 24,0,16,0%; 		! max record size 
 MACRO		XAB$W_DXQ	= 26,0,16,0%; 		! default extend quantity 
 MACRO		XAB$W_GBC	= 28,0,16,0%; 		! global buffer count 
 MACRO		XAB$W_VERLIMIT	= 38,0,16,0%; 	! version limit for file. 
 !-----***** 
 MACRO		XAB$L_SBN	= 40,0,32,0%; 		! starting lbn if contiguous 
 LITERAL	XAB$C_FHCLEN	= 44; 
 LITERAL	XAB$K_FHCLEN	= 44; 		! length of xabfhc 

 !-- 
 !++ 
 ! 
 !	allocation xab definitions 
 !		$xaballdef 
 !...$XABALLDEF	 
 ! 
 ! 
 !+++++***** 
 !  the fields thru bkz cannot be rearranged due to 
 !  their commonality with fab 
 LITERAL	XAB$C_ALL	= 20; 		! xaball id code 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$B_AOP	= 8,0,8,0%; 		! allocation options 
 			 
 MACRO		XAB$V_HRD	= 8,0,1,0%; 		! fail if requested alignment impossible 
 LITERAL	XAB$M_HRD	= 1^1 - 1^0; 
 MACRO		XAB$V_ONC	= 8,1,1,0%; 		! locate allocated space within a cylinder 
 LITERAL	XAB$M_ONC	= 1^2 - 1^1; 
 						! (spares) 
 MACRO		XAB$V_CBT	= 8,5,1,0%; 		! contiguous alllocation, best try 
 LITERAL	XAB$M_CBT	= 1^6 - 1^5; 
 						! spare 
 MACRO		XAB$V_CTG	= 8,7,1,0%; 		! contiguous allocation 
 LITERAL	XAB$M_CTG	= 1^8 - 1^7; 
 			
 MACRO		XAB$B_ALN	= 9,0,8,0%; 		! alignment type 
 LITERAL	XAB$C_ANY	= 0; 		! any allocation o.k. 
 LITERAL	XAB$C_CYL	= 1; 		! cylinder boundary 
 LITERAL	XAB$C_LBN	= 2; 		! allocate at specified lbn 
 LITERAL	XAB$C_VBN	= 3; 		! allocate near specified vbn 
 LITERAL	XAB$C_RFI	= 4; 		! allocate near related file 
 MACRO		XAB$W_VOL	= 10,0,16,0%; 		! relative volume no. for allocation 
 			! (not applicable if aln = vbn or rfi) 
 MACRO		XAB$L_LOC	= 12,0,32,0%; 		! allocation location 
 MACRO		XAB$L_ALQ	= 16,0,32,0%; 		! allocation quantity 
 MACRO		XAB$W_DEQ	= 20,0,16,0%; 		! default allocation quantity 
 			! defined above in $xabdef,since it is shared by the fhc 
 			! xab and has the same offset, of course) 
 !-----***** 
 MACRO		XAB$B_AID	= 23,0,8,0%; 		! area id number 
 MACRO		XAB$W_RFI	= 24,0,0,0%; 	! related file id 
 LITERAL	XAB$S_RFI	= 6; 
 MACRO		XAB$W_RFI0	= 24,0,16,0%; 	! file number 
 MACRO		XAB$W_RFI2	= 26,0,16,0%; 	! seq number 
 MACRO		XAB$W_RFI4	= 28,0,16,0%; 	! rev number 
 LITERAL	XAB$C_ALLLEN	= 32; 
 LITERAL	XAB$K_ALLLEN	= 32; 		! length of xaball 

 !-- 
 !++ 
 ! 
 !	date/time xab definitions 
 !		$xabdatdef 
 !...$XABDATDEF	 
 ! 
 LITERAL	XAB$C_DAT	= 18; 		! xabdat id code 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$Q_CDT	= 20,0,0,1%; 	! creation date & time 
 LITERAL	XAB$S_CDT	= 8; 
 MACRO		XAB$L_CDT0	= 20,0,32,0%;  
 MACRO		XAB$L_CDT4	= 24,0,32,1%;  
 MACRO		XAB$Q_EDT	= 28,0,0,1%; 	! expiration date & time 
 LITERAL	XAB$S_EDT	= 8; 
 MACRO		XAB$L_EDT0	= 28,0,32,0%;  
 MACRO		XAB$L_EDT4	= 32,0,32,1%;  
 LITERAL	XAB$C_DATLEN_V2	= 36; 
 LITERAL	XAB$K_DATLEN_V2	= 36; 		! Version 2 XABDAT length 
 MACRO		XAB$Q_BDT	= 36,0,0,1%; 	! backup date and time 
 LITERAL	XAB$S_BDT	= 8; 
 MACRO		XAB$L_BDT0	= 36,0,32,0%;  
 MACRO		XAB$L_BDT4	= 40,0,32,1%;  
 LITERAL	XAB$C_DATLEN	= 44; 
 LITERAL	XAB$K_DATLEN	= 44; 		! length of XABDAT 

 !-- 
 !++ 
 ! 
 !	revision date/time xab definitions 
 !		$xabrdtdef 
 !...$XABRDTDEF	 
 LITERAL	XAB$C_RDT	= 30; 		! xabrdt id code 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 LITERAL	XAB$C_RDTLEN	= 20; 
 LITERAL	XAB$K_RDTLEN	= 20; 		! length of rdt xab 

 !-- 
 !++ 
 ! 
 !	protection xab field definitions 
 !		$xabprodef 
 ! 
 !...$XABPRODEF	 
 ! 
 LITERAL	XAB$C_PRO	= 19; 		! xabpro id code 
 					! define relative to the start of the 4-bit subfield 
 MACRO		XAB$V_NOREAD	= 0,0,1,0%; 	! deny read access 
 LITERAL	XAB$M_NOREAD	= 1^1 - 1^0; 
 MACRO		XAB$V_NOWRITE	= 0,1,1,0%; 	! deny write access 
 LITERAL	XAB$M_NOWRITE	= 1^2 - 1^1; 
 MACRO		XAB$V_NOEXE	= 0,2,1,0%; 		! deny execution access 
 LITERAL	XAB$M_NOEXE	= 1^3 - 1^2; 
 MACRO		XAB$V_NODEL	= 0,3,1,0%; 		! deny delete access 
 LITERAL	XAB$M_NODEL	= 1^4 - 1^3; 
 			
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$W_PRO	= 8,0,16,0%; 		! protection mask 
 			 
 MACRO		XAB$V_SYS	= 8,0,4,0%; 		! system 
 MACRO		XAB$V_OWN	= 8,4,4,0%; 		! owner 
 MACRO		XAB$V_GRP	= 8,8,4,0%; 		! group 
 MACRO		XAB$V_WLD	= 8,12,4,0%; 		! world 
 			
 MACRO		XAB$B_MTACC	= 10,0,8,0%; 	! Magtape access control char. 
 MACRO		XAB$L_UIC	= 12,0,32,0%; 		! uic code 
 MACRO		XAB$W_MBM	= 12,0,16,0%; 	! member code 
 MACRO		XAB$W_GRP	= 14,0,16,0%; 	! group code 
 LITERAL	XAB$C_PROLEN	= 16; 
 LITERAL	XAB$K_PROLEN	= 16; 		! xabpro length 

 !-- 
 !++ 
 ! 
 !	terminal control xab field definitions 
 !		$xabtrmdef 
 ! 
 ! 
 !...$XABTRMDEF	 
 ! 
 LITERAL	XAB$C_TRM	= 31; 		!XABTRM ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$L_AST_ADDR	= 8,0,32,0%; 	! ast address 
 MACRO		XAB$L_AST_PARM	= 12,0,32,0%; 	! ast parameter 
 MACRO		XAB$W_MBX_CHAN	= 16,0,16,0%; 	! associated mailbox channel number 
 MACRO		XAB$B_FLAGS	= 18,0,8,0%;  
 			 
 MACRO		XAB$V_DSABL_AST	= 18,0,1,0%; 	! disable ast 
 LITERAL	XAB$M_DSABL_AST	= 1^1 - 1^0; 
 			
 LITERAL	XAB$C_TRMLEN	= 24; 
 LITERAL	XAB$K_TRMLEN	= 24; 		! length of xab of type terminal control 

 !-- 
 !++ 
 ! 
 !	summary xab field definitions 
 !		$xabsumdef 
 ! 
 !...$XABSUMDEF	 
 ! 
 LITERAL	XAB$C_SUM	= 22; 		! xabsum id code 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$B_NOA	= 8,0,8,0%; 		! number of defined areas for index file 
 MACRO		XAB$B_NOK	= 9,0,8,0%; 		! number of defined keys for index file 
 MACRO		XAB$W_PVN	= 10,0,16,0%; 		! prologue version number (relative and index files) 
 LITERAL	XAB$C_SUMLEN	= 12; 
 LITERAL	XAB$K_SUMLEN	= 12; 		! xabsum length 

 !-- 
 !++ 
 ! 
 !	key definition xab field definitions 
 !		$xabkeydef 
 ! 
 !...$XABKEYDEF	 
 ! 
 LITERAL	XAB$C_KEY	= 21; 		! xabkey id code 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 ! 
 ! the field layout of the key xab is such that it matchs as 
 ! closely as possible the layout of a key decriptor in the 
 ! index file prologue. this is so the contents may be moved 
 ! between the two structures as efficiently as possible. 
 ! 
 MACRO		XAB$B_IAN	= 8,0,8,0%; 		! index level area number 
 MACRO		XAB$B_LAN	= 9,0,8,0%; 		! lowest index level area number 
 MACRO		XAB$B_DAN	= 10,0,8,0%; 		! data level area number 
 MACRO		XAB$B_LVL	= 11,0,8,0%; 		! level of root bucket 
 MACRO		XAB$B_IBS	= 12,0,8,0%; 		! size of index buckets in virtual blocks 
 MACRO		XAB$B_DBS	= 13,0,8,0%; 		! size of data buckets in virtual blocks 
 MACRO		XAB$L_RVB	= 14,0,32,0%; 		! root bucket start vbn 
 MACRO		XAB$B_FLG	= 18,0,8,0%; 		! key option flags 
 			 
 MACRO		XAB$V_DUP	= 18,0,1,0%; 		! duplicate key values allowed 
 LITERAL	XAB$M_DUP	= 1^1 - 1^0; 
 MACRO		XAB$V_CHG	= 18,1,1,0%; 		! alt key only --key field may change on update 
 LITERAL	XAB$M_CHG	= 1^2 - 1^1; 
 MACRO		XAB$V_NUL	= 18,2,1,0%; 		! alt key only --null key value enable 
 LITERAL	XAB$M_NUL	= 1^3 - 1^2; 
 MACRO		XAB$V_IDX_NCMPR	= 18,3,1,0%; 	! indicate index records for given key are not compressed 
 LITERAL	XAB$M_IDX_NCMPR	= 1^4 - 1^3; 
 			
  
 					! primary key only flags 
 						! space over dup 
 						! spare 
 MACRO		XAB$V_KEY_NCMPR	= 18,6,1,0%; 	! indicates primary key is not compressed in data record 
 LITERAL	XAB$M_KEY_NCMPR	= 1^7 - 1^6; 
 MACRO		XAB$V_DAT_NCMPR	= 18,7,1,0%; 	! data record is not compressed 
 LITERAL	XAB$M_DAT_NCMPR	= 1^8 - 1^7; 
 			
  
 MACRO		XAB$B_DTP	= 19,0,8,0%; 		! key field data type 
 LITERAL	XAB$C_STG	= 0; 		! string 
 LITERAL	XAB$C_IN2	= 1; 		! signed 15 bit integer (2 bytes) 
 LITERAL	XAB$C_BN2	= 2; 		! 2 byte binary 
 LITERAL	XAB$C_IN4	= 3; 		! signed 31 bit integer (4 bytes) 
 LITERAL	XAB$C_BN4	= 4; 		! 4 byte binary 
 LITERAL	XAB$C_PAC	= 5; 		! packed decimal (1-16 bytes) 
 LITERAL	XAB$C_MAXDTP	= 5; 		! max. legal data type 
 MACRO		XAB$B_NSG	= 20,0,8,0%; 		! number of key segments 
 MACRO		XAB$B_NUL	= 21,0,8,0%; 		! nul key character 
 MACRO		XAB$B_TKS	= 22,0,8,0%; 		! total key field size (bytes) 
 MACRO		XAB$B_REF	= 23,0,8,0%; 		! key of reference (0=prim key, 
 			! 1-254 = alternate keys) 
 MACRO		XAB$W_MRL	= 24,0,16,0%; 		! minimun record length to contain key field 
 MACRO		XAB$W_IFL	= 26,0,16,0%; 		! index bucket fill size (bytes) 
 MACRO		XAB$W_DFL	= 28,0,16,0%; 		! data bucket fil size (bytes) 
 MACRO		XAB$W_POS	= 30,0,0,0%; 	! key field record offset positions 
 LITERAL	XAB$S_POS	= 16; 
 MACRO		XAB$W_POS0	= 30,0,16,0%; 	! segment 0 
 MACRO		XAB$W_POS1	= 32,0,16,0%; 	! segment 1 
 MACRO		XAB$W_POS2	= 34,0,16,0%; 	! segment 2 
 MACRO		XAB$W_POS3	= 36,0,16,0%; 	! segment 3 
 MACRO		XAB$W_POS4	= 38,0,16,0%; 	! segment 4 
 MACRO		XAB$W_POS5	= 40,0,16,0%; 	! segment 5 
 MACRO		XAB$W_POS6	= 42,0,16,0%; 	! segment 6 
 MACRO		XAB$W_POS7	= 44,0,16,0%; 	! segment 7 
 MACRO		XAB$B_SIZ	= 46,0,0,0%; 	! key field segment sizes 
 LITERAL	XAB$S_SIZ	= 8; 
 MACRO		XAB$B_SIZ0	= 46,0,8,0%; 	! segment 0 
 MACRO		XAB$B_SIZ1	= 47,0,8,0%; 	! segment 1 
 MACRO		XAB$B_SIZ2	= 48,0,8,0%; 	! segment 2 
 MACRO		XAB$B_SIZ3	= 49,0,8,0%; 	! segment 3 
 MACRO		XAB$B_SIZ4	= 50,0,8,0%; 	! segment 4 
 MACRO		XAB$B_SIZ5	= 51,0,8,0%; 	! segment 5 
 MACRO		XAB$B_SIZ6	= 52,0,8,0%; 	! segment 6 
 MACRO		XAB$B_SIZ7	= 53,0,8,0%; 	! segment 7 
 ! 
 ! the positions of the above fields are dictated by the key descriptor 
 ! record layout in the index file prologue. 
 ! 
 MACRO		XAB$L_KNM	= 56,0,32,0%; 		! pointer to 32 character key name buffer 
 MACRO		XAB$L_DVB	= 60,0,32,0%; 		! first data bucket start vbn 
 LITERAL	XAB$C_KEYLEN_V2	= 64; 
 LITERAL	XAB$K_KEYLEN_V2	= 64; 		! old xabkey length 
 ! 
 ! Additions for prologue 3 files 
 ! 
 MACRO		XAB$B_TYP	= 64,0,0,0%; 	! key field segment types 
 LITERAL	XAB$S_TYP	= 8; 
 MACRO		XAB$B_TYP0	= 64,0,8,0%; 	! segment 0 
 MACRO		XAB$B_TYP1	= 65,0,8,0%; 	! segment 1 
 MACRO		XAB$B_TYP2	= 66,0,8,0%; 	! segment 2 
 MACRO		XAB$B_TYP3	= 67,0,8,0%; 	! segment 3 
 MACRO		XAB$B_TYP4	= 68,0,8,0%; 	! segment 4 
 MACRO		XAB$B_TYP5	= 69,0,8,0%; 	! segment 5 
 MACRO		XAB$B_TYP6	= 70,0,8,0%; 	! segment 6 
 MACRO		XAB$B_TYP7	= 71,0,8,0%; 	! segment 7 
 MACRO		XAB$B_PROLOG	= 72,0,8,0%; 	! indicate prologue version desired (primary key only) 
 LITERAL	XAB$C_PRG3	= 3; 		!  Prologue version three 
 LITERAL	XAB$C_PRG2	= 2; 		!  Prologue version two 
 LITERAL	XAB$C_PRG1	= 1; 		!  Prologue versoin one 
 LITERAL	XAB$C_KEYLEN	= 76; 
 LITERAL	XAB$K_KEYLEN	= 76; 		! xabkey length 
  
 !-- 
 !++ 

  
 ! 
 !		rms escape definitions 
 ! 
 !  the following values identify various requests for non-standard rms 
 !  functions.  they are currently input to the $modify function in the 
 !  ctx field of the fab only if the esc bit is set in fop.  incorrect 
 !  use of these capabilties could cause rms to fail, hence great caution 
 !  should be exercised in their use. 
 ! 
 !...$RMEDEF	
  
 LITERAL	RME$C_SETRFM	= 1; 		! change rfm, mrs, and fsz (if vfc) in ifab only 

  
