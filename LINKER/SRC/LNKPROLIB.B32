MODULE LNK_PROCSLIB (					! OBJECT LIBRARY PROCESSING
		IDENT='V03-007',
		ADDRESSING_MODE(EXTERNAL=GENERAL,
				NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	LINKER
!
! ABSTRACT:	ROUTINES TO DO ALL PASS 1 OBJECT LIBRARY PROCESSING
!
!
! ENVIRONMENT:	VMS NATIVE MODE
!
! AUTHOR:	T.J. PORTER, CREATION DATE: 16-MAY-77
!
! MODIFIED BY:
!
!	V03-007	BLS0170		Benn Schreiber		13-Apr-1982
!		Beef up error handling from lbr$ calls
!
!	V03-006	BLS0159		Benn Schreiber		17-Mar-1982
!		Also check for angles in directory spec
!
!	V03-005	BLS0079		Benn Schreiber		14-Sep-1981
!		Set CLU$V_INTCLU in LNK$ADDIMAGE
!
!	V03-004	BLS0074		Benn Schreiber		29-Aug-1981
!		Modify inserting into cluster list in lnk$addimage
!		to insert after owning cluster
!
!	V03-003	BLS0050		Benn Schreiber		25-May-1981
!		Independent shareable images
!
!	V03-002	BLS0029		Benn Schreiber		18-Dec-1980
!		Library of shareable image symbol tables
!
!	V03-001	BLS0007		Benn Schreiber,		3-Jun-1980
!		Convert to MDL data structures.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
LIBRARY
	'STARLETL32';					! STARLET DATA STRUCTURES
LIBRARY
	'CLIMACL32';					! CLI STRUCTURE GENERATION MACROS
REQUIRE
	'PREFIX';					! GENERAL DEFINITIONS
LIBRARY
	'DATBAS';					! INTERNAL DATA BASE

FORWARD ROUTINE
	LNK$BINTIM,					! CONVERT TIME TO BINARY
	LNK$ADDIMAGE;					! ADD SHAREABLE IMAGE TO CLUSTER LIST
!
! EQUATED SYMBOLS:
!
GLOBAL LITERAL
	LNK$K_LIBBLOCKS = 10 : SHORT;			! NUMBER OF BLOCKS IN A WINDOW
							! OF A LIBRARY
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
	LBR$_KEYNOTFND,					! KEY NOT FOUND
	LIN$_FORMAT,					! FORMAT BAD
	LIN$_LIBFIND,					! FIND FAILURE IN LIBRARY
	LIN$_LIBNAMLNG,					! ILLEGAL MODULE NAME LENGTH
	LIN$_NOSUCHMOD,					! MODULE NOT IN LIBRARY ERROR
	LIN$_READERR;					! READ ERROR

EXTERNAL
	LBR$GL_RMSSTV,					! STV RETURNED BY LIBRARIAN
	LNK$GL_CTLMSK : BLOCK[,BYTE],			! LINKER CONTROL FLAGS
	LNK$GL_INPUTIFI,				! LIBRARIAN CONTROL INDEX
	LNK$GL_CLIWORK : REF VECTOR[,BYTE],		! POINTER TO A CLI WORK AREA
	LNK$GL_CURFIL : REF BLOCK[,BYTE],		! POINTER TO CURRENT (LIBRARY) FILE DESCRIPTOR
	LNK$GL_CURCLU : REF BLOCK[,BYTE],		! POINTER TO CURRENT CLUSTER DESCRIPTOR
	LNK$GL_CLULST,					! HEAD OF CLUSTER DESCRIPTOR LIST
	LNK$GL_CLUTREE,					! TREE HEAD OF CLUSTER TREE
	LNK$GL_LASTCLU : REF BLOCK[,BYTE],		! POINTER TO LAST CLUSTER DESCRIPTOR
	LNK$GL_UDFLST,					! UNDEFINED SYMBOL LISTHEAD
	LNK$GW_NUDFSYMS : WORD,				! NUMBER OF UNDEFINED SYMBOLS
	LNK$GL_OBJRECS,					! NUMBER OF RECORDS PROCESSED
	LNK$GB_PASS : BYTE,				! LINKER PASS
	LNK$AL_RAB : BLOCK[RAB$C_BLN,BYTE],		! RAB TO USE FOR READS
	LNK$AL_LBQLDSC : BLOCK[,BYTE];			! POINTER TO LIBRARY QUALIFIER DESCRIPTOR
!
EXTERNAL ROUTINE
	LIB$LOOKUP_TREE,		! LOOKUP ITEM IN TREE
	LBR$FIND,			! POINT TO MODULE
	LBR$SET_MODULE,			! READ MODULE HEADER
	LBR$GET_RECORD,			! READ RECORD OF MODULE
	LBR$LOOKUP_KEY,			! LOOKUP KEY IN LIBRARY
	LBR$SET_INDEX,			! SET INDEX NUMBER
	LBR$SEARCH,			! SEARCH INDEX FOR ENTRIES
	LNK$ALLOBLK,			! DYNAMIC MEMORY ALLOCATOR
	LNK$DEALBLK,			! AND DEALLOCATOR
	LNK$ALLOCLUSTER,		! ALLOCATE CLUSTER DESCRIPTOR
	LNK$INSERT_CLU,			! INSERT CLUSTER INTO CLUSTER TREE
	LNK$ALLOFDB,			! ALLOCATE FILE DESCRIPTOR BLOCK
	LNK$CLOSCURFIL,			! CLOSE CURRENT OBJ FILE
	LNK$PROCSOBJ,			! PROCESS OBJ FILES
	LNK$POINTOBJ;			! POINT TO OBJ IN A LIBRARY
!
! MODULE OWN STORAGE:
!

OWN
	SHRDEFEXT : QUADVECTOR[1] INITIAL(STRINGDESC('SYS$LIBRARY:.EXE')), ! DEFAULT NAME STRING FOR SHR IMAGES
	SAVEDRECOUNT,							! RECORD COUNT A BEGINNING OF LIBRARY MODULE
	MODNAMINDEX : INITIAL (1),					! MODULE NAME INDEX IS INDEX 1
	GSTNAMINDEX : INITIAL (2),					! GLOBAL SYMBOL INDEX IS INDEX 2
	GSTMISSCNT,							! NUMBER OF UNSUCCESSFUL GST SEARCHS THIS CALL
	QUALVAL_DESC : $CLIREQDESC(RQTYPE=ASCIIVAL);			! REQUEST DESCRIPTOR TO GET ASCII VALUE
GLOBAL
	LNK$GL_FUTLSRCH,						! ACCUMULATED FUTILE SEARCHES
	LNK$GL_LIBRECS,							! NUMBER OF RECORDS PROCESSED IN LIBRARIES
	LNK$GL_LIBSYM : REF BLOCK[,BYTE],				! POINTER TO THE SYMBOL THAT CAUSED
	LNK$GL_NMODSEXP,						! NUMBER OF EXPLICITLY EXTRACTED MODULES
	LNK$GL_NMODSRCH;						!   "    EXTRACTED BECAUSE THEY RESOLVE SYMBOLS
									! A MODULE TO LOAD FROM LIBRARY.

GLOBAL ROUTINE LNK$PROCSLIB(ARGLIST) =		! PROCESS LIBRARY

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS ROUTINE IS CALLED DURING PASS 1 OF
! LINKING TO PROCESS A RELOCATABLE OBJECT MODULE LIBRARY
! WHICH HAS ALREADY BEEN OPENED. THERE ARE TWO FUNCTIONS
! PERFORMED, (IN ORDER IF BOTH SPECIFIED):
!	(1) IF EXPLICIT MODULE INCLUSION HAS BEEN SPECIFIED,
!	    THE NAMED MODULES ARE SEARCHED FOR IN THE
!	    LIBRARY'S MODULE NAME TABLE AND, IF  FOUND, 
!	    PROCESSED SEQUENTIALLY BY CALLING LNK$PROCSOBJ FOR EACH.
!	(2) IF SEARCH FOR UNRESOLVED SYMBOLS IS SPECIFIED, AND THERE
!	    EXIST CURRENTLY UNDEFINED SYMBOLS ON THE UNDEFINED LIST,
!	    SEARCH THE LIBRARY GLOBAL SYMBOL TABLE FOR EACH SYMBOL.
!	    WHEN ONE IS FOUND, PROCESS THE DEFINING MODULE BY
!	    CALLING LNK$PROCSOBJ.
!
! FORMAL PARAMETERS:
!	ARGLIST IS THE ADDRESS OF THE ORIGINAL ARGUMENT LIST FROM
!	THE IMAGE ACTIVATOR. AT OFFSET CLI$A_UTILSERV IS THE
!	ADDRESS AT WHICH TO RE-CALL CLI TO PROVIDE THE MODULE
!	NAMES ON AN EXPLICIT MODULE EXTRACTION FROM LIBRARY
!
! IMPLICIT INPUTS:
!
!	LNK$GL_CURFIL - POINTS TO CURRENT OBJ FILE (IN THIS
!			CASE A LIBRARY) DESCRIPTOR BLOCK.
!	FLAG BITS IN THE DESCRIPTOR SPECIFY THE KIND OF 
!	LIBRARY SEARCH (MODULE OR SYMBOL OR BOTH). IF
!	MODULE SEARCH IS SPECIFIED, THE FILE DESCRIPTOR CONTAINS
!	THE POINTERS TO THE CLI DATA WHICH DESCRIBES MODULES TO
!	BE INCLUDED.
!	LNK$GW_NUDFSYMS - NUMBER OF UNDEFINED (STRONGLY REFERENCED)
!           		  SYMBOLS
!	LNK$GL_UDFLST -   LISTHEAD FOR DOUBLY LINKED LIST OF
!			  UNDEFINED SYMBOLS.
!
! IMPLICIT OUTPUTS:
!
!	THE MODULES SELECTED FOR PROCESSING ARE PROCESSED BY LNK$PROCSOBJ
!	IN ADDITION:
!		LNK$GL_LIBSYM	RECEIVES THE ADDRESS OF THE
!				ENTRY IN THE SYMBOL TABLE WHEN
!				A SYMBOL SEARCH IS SUCCESSFUL.
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	AS PERFORMED BY LNK$PROCSOBJ
!
!--

    BEGIN

    LOCAL
	STATUS,
	KEYDESC : BLOCK[DSC$C_S_BLN,BYTE],				! STRING DESCRIPTOR
	NEXTSYM : REF BLOCK[,BYTE],					! NEXT UNDEFINED SYMBOL IN LIST
	MODULERFA : BLOCK[6,BYTE];					! FILE ADDRESS OF FIRST RECORD OF
									! THE ASSOCIATED MODULE. FIRST 4
									! BYTES ARE VBN, FOLLOWED BY THE 
									! OFFSET INTO BLOCK
MAP ARGLIST : REF BLOCK[,BYTE];
!
BIND
	AUXFNB = LNK$GL_CURFIL[FDB$T_AUXFNB] : BLOCK[NAM$C_BLN,BYTE];	! AUXILLIARY FILE NAME BLOCK IN FDB

BIND ROUTINE
	RECALLCLI = .ARGLIST[CLI$A_UTILSERV];				! ROUTINE TO RETURN MODULE NAMES
!
IF NOT .LNK$GL_CURFIL[FDB$V_LIBEXTR]					! IF NOT EXTRACTING SPECIFIC MODULES AND
THEN IF .LNK$GW_NUDFSYMS EQL 0 THEN RETURN TRUE;			! THERE ARE NO UNDEFINED SYMBOLS
LNK$AL_LBQLDSC[CLI$W_QDVALSIZ] = .LNK$GL_CURFIL[FDB$W_LIBLSTLNG];	! SAVE LIBRARY MODULE LIST DESCRIPTOR
LNK$AL_LBQLDSC[CLI$A_QDVALADR] = .LNK$GL_CURFIL[FDB$L_OMDLST];		! ORIGINALLY FROM CLI
LNK$GL_CURFIL[FDB$L_OMDLST] = 0;					! INITIALIZE MODULE DESCR. LISTHEAD
IF .LNK$GL_CURFIL[FDB$V_LIBEXTR]					! IF THIS IS INCLUSION OF EXPLICITLY
THEN BEGIN
	LNK$GL_LIBSYM = 0;						! INVALIDATE LIBRARY SYMBOL
	STATUS = LBR$SET_INDEX(LNK$GL_INPUTIFI, MODNAMINDEX);		! SET TO LOOK AT MODULE NAME INDEX
	IF NOT .STATUS
	THEN BEGIN
	    SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],.STATUS);
	    RETURN TRUE;						! DON'T ABORT THE LINK, THO
	    END;
!
! NOW LOOP CALLING CLI FOR THE NEXT MODULE NAME IN THE
! LIST, SEARCHING MODULE NAME TABLE FOR THAT MODULE THEN,
! IF FOUND PROCESSING THE MODULE
!
	WHILE .LNK$AL_LBQLDSC[CLI$W_QDVALSIZ] NEQ 0			! THAT IS WHILE THERE
	DO BEGIN							! REMAINS MORE TEXT ON THE
		RECALLCLI (QUALVAL_DESC,.LNK$GL_CLIWORK,LNK$AL_LBQLDSC);! LIBRARY INCLUSION QUALIFIER
		IF .QUALVAL_DESC[CLI$W_RQSIZE] EQL 0			! GO GET NEXT NAME (ALLOWING
		OR .QUALVAL_DESC[CLI$W_RQSIZE] GTRU SYM$C_MAXLNG	! CLI TO USE THE LIBRARY HEADER BUFFER)
		THEN BEGIN
		    SIGNAL(LIN$_LIBNAMLNG,2,				! CHECK A VALID NAME
			    QUALVAL_DESC[CLI$W_RQSIZE],
			   .QUALVAL_DESC[CLI$W_RQSIZE]);		! AND ISSUE ERROR IF AN
		    QUALVAL_DESC[CLI$W_RQSIZE] = SYM$C_MAXLNG;		! ILLEGAL LENGTH, SET TO MAXIMUM
		    END;
		KEYDESC[DSC$W_LENGTH] = .QUALVAL_DESC[CLI$W_RQSIZE];	! SET UP STRING DESCRIPTOR FOR SYMBOL
		KEYDESC[DSC$A_POINTER] = .QUALVAL_DESC[CLI$A_RQADDR];
		IF NOT (STATUS = LBR$LOOKUP_KEY(LNK$GL_INPUTIFI,
						KEYDESC, MODULERFA))	! LOOKUP THE MODULE NAME
		THEN BEGIN
		    IF .STATUS EQL LBR$_KEYNOTFND
			THEN SIGNAL(LIN$_NOSUCHMOD,2,QUALVAL_DESC[CLI$W_RQSIZE],
					LNK$GL_CURFIL[FDB$Q_FILENAME])
			ELSE SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],
					.STATUS,.LBR$GL_RMSSTV);
			END
		ELSE BEGIN
			IF .LNK$GL_CURFIL[FDB$V_IMGLIB]			! IF THIS IS SHR IMG STB LIBRARY
			THEN LNK$ADDIMAGE(KEYDESC,MODULERFA)		!  THEN JUST ADD TO THE CLUSTER LIST
			ELSE BEGIN
			    SAVEDRECOUNT = .LNK$GL_OBJRECS;		! SAVE CURRENT RECORD COUNT
			    LNK$GL_NMODSEXP = .LNK$GL_NMODSEXP + 1;	! COUNT ONE MORE EXPLICITLY EXTRACTED
			    LNK$POINTOBJ(MODULERFA);			! FOUND IT SO GO POINT TO
			    IF NOT LNK$PROCSOBJ(MODULERFA) THEN RETURN FALSE; ! THE MODULE IN THE LIBRARY
			    LNK$GL_LIBRECS = .LNK$GL_LIBRECS + .LNK$GL_OBJRECS - ! ACCUMULATE THE NUMBER OF RECORDS
					.SAVEDRECOUNT;				! FOUND IN LIBRARIES
			    END;
		     END;
	   END;
     END;								! AND PROCESS IT
!
! NOW CHECK WHETHER THIS LIBRARY IS TO BE SEARCHED FOR
! CURRENTLY UNDEFINED SYMBOLS. EXIT NOW IF NOT
!
IF .LNK$GL_CURFIL[FDB$V_LIBSRCH]						! IF A SYMBOL SEARCH REQUIRED
THEN BEGIN
LNK$GL_CURFIL[FDB$V_NEWUDF] = FALSE;						! RESET UNDEFINED SYMBOLS CONTRIBUTED
GSTMISSCNT = 0;									! RESET COUNT OF SYMBOLS NOT FOUND
NEXTSYM = .LNK$GL_UDFLST;							! START AT TOP OF LIST, AND
STATUS = LBR$SET_INDEX(LNK$GL_INPUTIFI, GSTNAMINDEX);				! LOOK IN GLOBAL SYMBOL INDEX
IF NOT .STATUS
THEN BEGIN
    SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],.STATUS);
    RETURN TRUE;								! DON'T ABORT THE LINK, THO
    END;

IF .LNK$GL_CURFIL[FDB$V_IMGLIB]							! IF THIS IS SHR IMG STB LIBRARY
THEN BEGIN
WHILE .NEXTSYM NEQ LNK$GL_UDFLST
DO BEGIN
    BIND
	NEXTSYMNAM = .NEXTSYM-.NEXTSYM[SYM$B_NAMLNG]-SNB$C_FXDLEN : BLOCK[,BYTE];

    KEYDESC[DSC$W_LENGTH] = .NEXTSYM[SYM$B_NAMLNG];
    KEYDESC[DSC$A_POINTER] = NEXTSYMNAM[SNB$T_NAME];
    IF (STATUS = LBR$LOOKUP_KEY(LNK$GL_INPUTIFI,KEYDESC,MODULERFA))		! IF SYMBOL IS IN LIBRARY
    THEN BEGIN
	STATUS = LBR$SEARCH(LNK$GL_INPUTIFI,MODNAMINDEX,			! FIND THE MODULE NAME
					MODULERFA,LNK$ADDIMAGE);
	IF NOT .STATUS
	    THEN SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],.STATUS);
	END
    ELSE IF .STATUS NEQ LBR$_KEYNOTFND
	THEN SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],
			.STATUS,.LBR$GL_RMSSTV);
    NEXTSYM = .NEXTSYM[SYM$L_UDFLINK];						! LINK TO NEXT UNDEFINED SYMBOL
    END
 END
ELSE WHILE .LNK$GW_NUDFSYMS NEQ 0						! WHILE IT CONTAINS SOME UN-
										! DEFINED SYMBOLS, GET
AND (IF (LNK$GL_LIBSYM = .NEXTSYM) NEQ LNK$GL_UDFLST				! NEXT ENTRY. HOWEVER
	THEN TRUE								! IF BACK AT THE LISTHEAD
	ELSE IF NOT .LNK$GL_CURFIL[FDB$V_NEWUDF]				! AND THIS FILE DID NOT ADD
		THEN FALSE							! MORE UNDEFINED SYMBOLS-WE ARE DONE
		ELSE BEGIN							! IF IT DID ADD MORE, GET
		      LNK$GL_LIBSYM=.LNK$GL_LIBSYM[SYM$L_UDFLINK];		! TOP ENTRY IN LIST
		      LNK$GL_CURFIL[FDB$V_NEWUDF]=FALSE;			! RESET THE UNDEFINED SYMBOLS CONTRIBUTED FLAG
		      TRUE							! AND CONTINUE THE
		     END)							! SEARCH
DO BEGIN									! FOR A SYMBOL ON THE 
	    BIND LIBSYMNAM = .LNK$GL_LIBSYM 
			- .LNK$GL_LIBSYM[SYM$B_NAMLNG] - SNB$C_FXDLEN : BLOCK[,BYTE]; ! POINT TO NAME PART
		KEYDESC[DSC$W_LENGTH] = .LNK$GL_LIBSYM[SYM$B_NAMLNG];	! MAKE STRING DESCRIPTOR FOR NAME
		KEYDESC[DSC$A_POINTER] = LIBSYMNAM[SNB$T_NAME];		! ...
	    NEXTSYM=.LNK$GL_LIBSYM[SYM$L_UDFLINK];				! UNDEFINED LIST AND
	    IF (.LNK$GL_LIBSYM[SYM$W_FLAGS] AND GSY$M_WEAK) EQL 0		! PROVIDED IT IS NOT A WEAK
	    AND NOT .LNK$GL_LIBSYM[SYM$V_GSTMISS]				! REFERENCE AND THAT WE
	    THEN								! HAVE NOT BEFORE FAILED TO
										! FIND IT IN THIS LIBRARY,
		    IF (STATUS = LBR$LOOKUP_KEY(LNK$GL_INPUTIFI, KEYDESC, MODULERFA)) 	! GO LOOK FOR THE SYMBOL
		THEN BEGIN							! RETURN RECORD'S FILE ADDRESS
		    LNK$GL_NMODSRCH = .LNK$GL_NMODSRCH + 1;			! COUNT THE NUMBER OF MODULES
		    SAVEDRECOUNT = .LNK$GL_OBJRECS;				! SAVE CURRENT RECORD COUNT
		    LNK$POINTOBJ(MODULERFA);					! TO POINT TO THE MODULE
		    IF NOT LNK$PROCSOBJ(MODULERFA) THEN RETURN FALSE;		! AND GO PROCESS IT
		    LNK$GL_LIBRECS = .LNK$GL_LIBRECS + .LNK$GL_OBJRECS - 	! ACCUMULATE THE NUMBER OF
					.SAVEDRECOUNT;				! RECORDS FROM LIBRARIES
		    NEXTSYM = .LNK$GL_LIBSYM;					! RETRIEVE NEXT IN LIST (SINCE THE
										! ONE WE HAD MAY HAVE JUST BEEN
										! DEFINED BY THAT MODULE)
		    END
		ELSE BEGIN							! IF THE SYMBOL WAS NOT
			IF .STATUS NEQ LBR$_KEYNOTFND
			    THEN SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],
					.STATUS,.LBR$GL_RMSSTV);
		        GSTMISSCNT = .GSTMISSCNT+1;				! FOUND IN LIBRARY, COUNT
		        LNK$GL_LIBSYM[SYM$V_GSTMISS ]= TRUE;			! ANOTHER MISS AND SUPPRESS
						 				! ANY MORE SEARCHES FOR IT
		     END;
										! END OF SYMBOL LIST LOOP
   END;
LNK$GL_LIBSYM = 0;							! INVALIDATE THE SYMBOL POINTER
!
! NOW FINISHED LOOKING FOR UNDEFINED SYMBOLS IN THE CURRENT LIBRARY
! MUST NOW GO DOWN WHAT IS LEFT OF THE UNDEFINED SYMBOL LIST, TURNING
! OFF THE GST MISS FLAG IN EACH SYMBOL DESCRIPTOR.
!
NEXTSYM = LNK$GL_UDFLST;
IF .GSTMISSCNT NEQ 0								! IF THERE WERE NO MISSES
THEN WHILE (NEXTSYM=.NEXTSYM[SYM$L_UDFLINK]) NEQ LNK$GL_UDFLST			! FORGET IT
	DO NEXTSYM[SYM$V_GSTMISS] = FALSE;					! TURN OFF FLAG
LNK$GL_FUTLSRCH = .LNK$GL_FUTLSRCH + .GSTMISSCNT;				! ACCUMULATE FUTILE SEARCH COUNT
END;

LNK$GL_CURFIL[FDB$V_SELSER] = FALSE;						! RESET THE POSSIBLE SELECTIVE SEARCH FLAG 
RETURN TRUE;									! AND ALL DONE
END;										! END OF ROUTINE

GLOBAL ROUTINE LNK$BINTIM (ASCTIM, BINTIM) =
BEGIN
!
!	THIS ROUTINE CONVERTS A DATE/TIME STRING FROM A MODULE
!	HEADER TO BINARY.
!
! INPUTS:
!
!	ASCTIM		ADDRESS OF 17-BYTE ASCII DATE/TIME
!	BINTIM		ADDRESS OF QUADWORD TO STORE BINARY TIME
!
!--

LOCAL
    TIMEDESC : BLOCK[DSC$C_S_BLN,BYTE],
    TIMESTRING : VECTOR[23,BYTE];

CH$MOVE (17,.ASCTIM,TIMESTRING);			! COPY ASCII STRING FOR DATE/TIME
CH$FILL (%C'0',6,TIMESTRING[17]);			! FILL REST OF STRING WITH 0'S
TIMESTRING[17] = %C':';					! FIX PUNCTUATION AS REQUIRED
TIMESTRING[20] = %C'.';
TIMEDESC[DSC$W_LENGTH] = 23;
TIMEDESC[DSC$A_POINTER] = TIMESTRING;
$BINTIM(TIMBUF=TIMEDESC,TIMADR=.BINTIM);
RETURN TRUE
END;

GLOBAL ROUTINE LNK$ADDIMAGE (MODULEDESC, MODULERFA, RETCLUDESC, FOUNDFLAG) =
BEGIN
!
!	THIS ROUTINE IS CALLED BY THE LIBRARIAN WHEN IT FINDS A MODULE
!	NAME WITH THE SAME RFA AS THE GLOBAL SYMBOL JUST LOCATED.  WE
!	CHECK TO SEE IF THIS SHAREABLE IMAGE HAS ALREADY BEEN REQUESTED.
!	IF NOT, THEN A CLUSTER DESCRIPTOR AND FDB ARE ALLOCATED.
!
!	IF MODULERFA IS NOT PRESENT (NULLPARAMETER), THEN NO LIBRARY READING
!	IS DONE, THE CLUSTER DESCRIPTOR AND FILE DESCRIPTOR BLOCKS ARE CREATED,
!	HOWEVER.
!
!	IF RETCLUDESC IS PASSED, IT IS THE ADDRESS OF A LONGWORD TO STORE
!	THE ALLOCATED CLUSTER DESCRIPTOR ADDRESS.  NOTE THAT THE ONLY WAY
!	TO DETERMINE IF AN IMAGE WAS REQUESTED IS TO CHECK FOR RETCLUDESC
!	BEING NON-0, SINCE THIS ROUTINE ALWAYS RETURNS FALSE TO STOP LBR SEARCH
!
!	IF FOUNDFLAG IS PASSED, IT IS THE ADDRESS OF A LONGWORD TO STORE
!	A 1 (FOUND) OR 0 (INSERTED)
!
ROUTINE COMPARECLU (KEYDESC,CLUNODE) =
BEGIN
!
! LOCAL ROUTINE TO COMPARE A NAME OF NODE WITH ANOTHER NAME
!
MAP
    KEYDESC : REF BLOCK[,BYTE],			! POINTER TO STRING DESCRIPTOR
    CLUNODE : REF BLOCK[,BYTE];			! NODE FOR DESCRIPTOR BEING EXAMINED

LOCAL
    CLU : REF BLOCK[,BYTE];

CLU = .CLUNODE[NODE$L_PTR];			! POINT TO CLUSTER DESCRIPTOR
RETURN CH$COMPARE(.KEYDESC[DSC$W_LENGTH],.KEYDESC[DSC$A_POINTER],
			.CLU[CLU$B_NAMLNG],CLU[CLU$T_NAME])
END;
!
! MAIN BODY OF LNK$ADDIMAGE
!
MAP
    MODULEDESC : REF BLOCK[,BYTE],
    MODULERFA : REF BLOCK[,BYTE],
    RETCLUDESC : REF VECTOR[,LONG],
    FOUNDFLAG : REF VECTOR[,LONG];

BUILTIN
    NULLPARAMETER;

LOCAL
    STATUS,
    READ_LIBRARY,
    MHDBUF : BLOCK[LBR$C_MAXHDRSIZ,BYTE],			! BUFFER TO READ MODULE HEADER
    MHDBUFDESC : BLOCK[DSC$C_S_BLN,BYTE],			! STRING DESCRIPTOR OF MHDBUF
    BUFDESC : BLOCK[DSC$C_S_BLN,BYTE],
    PREVCLU : REF BLOCK[,BYTE],					! POINTER TO PREVIOUS CLUSTER
    NEXTCLU : REF BLOCK[,BYTE],
    LASTCLU : REF BLOCK[,BYTE],
    FDB : REF BLOCK[,BYTE],					! POINTER TO CREATED FDB
    CLU : REF BLOCK[,BYTE];					!  AND CLUSTER

!
! SEARCH THE CLUSTER LIST TO SEE IF THIS SHAREABLE IMAGE ALREADY REQUESTED
!
IF NOT NULLPARAMETER(3)
    THEN RETCLUDESC[0] = 0;
IF NOT NULLPARAMETER(4)
    THEN FOUNDFLAG[0] = 0;
IF LIB$LOOKUP_TREE(LNK$GL_CLUTREE,.MODULEDESC,COMPARECLU,CLU)		! LOOK IT UP
THEN BEGIN
    IF NOT NULLPARAMETER(4)
	THEN FOUNDFLAG[0] = 1;
    IF NOT NULLPARAMETER(3)
	THEN RETCLUDESC[0] = .CLU[NODE$L_PTR];
    RETURN FALSE;								!  RETURN FALSE TO STOP SEARCH IF FOUND
    END;
!
! IMAGE NOT REQUESTED.  READ AND VERIFY MODULE HEADER.  THEN CREATE CLUSTER DESCRIPTOR
!
IF (READ_LIBRARY = NOT NULLPARAMETER(2))				! SET FLAG IF PARAMETER SPECIFIED
THEN BEGIN
    IF NOT (STATUS = LBR$FIND(LNK$GL_INPUTIFI,.MODULERFA))		! POINT TO THE MODULE
    THEN BEGIN
	SIGNAL((LIN$_LIBFIND AND NOT STS$M_SEVERITY) OR STS$K_ERROR,4,	! REPORT ERROR
		.MODULERFA[RFA$L_VBN],.MODULERFA[RFA$W_OFFSET],
		.MODULEDESC[DSC$A_POINTER]-1,LNK$GL_CURFIL[FDB$Q_FILENAME],
		LIN$_FORMAT,0,
		.STATUS,.LBR$GL_RMSSTV);
	RETURN FALSE;							! RETURN TO STOP SEARCH
	END;

    BUFDESC[DSC$W_LENGTH] = .LNK$AL_RAB[RAB$W_USZ];			! SET UP BUFFER DESCRIPTOR TO READ OBJ MODULE HEADER REC
    BUFDESC[DSC$A_POINTER] = .LNK$AL_RAB[RAB$L_UBF];
    IF NOT (STATUS = LBR$GET_RECORD(LNK$GL_INPUTIFI,BUFDESC,BUFDESC))	! READ FIRST RECORD OF OBJ MODULE
    THEN BEGIN
	SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],
			.STATUS,.LBR$GL_RMSSTV);
	RETURN FALSE;
	END;

    MHDBUFDESC[DSC$W_LENGTH] = LBR$C_MAXHDRSIZ;				! READ LIBRARY MODULE HEADER...SET UP BUFFER DESCRIPTOR
    MHDBUFDESC[DSC$A_POINTER] = MHDBUF;
    IF NOT (STATUS = LBR$SET_MODULE(LNK$GL_INPUTIFI,.MODULERFA,		! READ IT NOW
					MHDBUFDESC,MHDBUFDESC))
    THEN BEGIN
	SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],
			.STATUS,.LBR$GL_RMSSTV);
	RETURN FALSE;
	END;

    BEGIN
	BIND
	    HDREC = .BUFDESC[DSC$A_POINTER] : BLOCK[,BYTE],			! NAME THE HEADER RECORD
	    MHDID = HDREC[MHD$T_NAME] + .HDREC[MHD$B_NAMLNG] : VECTOR[,BYTE];	! AND THE MODULE ID PART OF HEADER

	IF .HDREC[OBJ$B_RECTYP] NEQ OBJ$C_HDR					! MAKE SURE IT LOOKS LIKE AN OBJ MODULE HEADER
	    OR .HDREC[OBJ$B_SUBTYP] NEQ OBJ$C_HDR_MHD
	    THEN BEGIN
		SIGNAL(LIN$_READERR,1,LNK$GL_CURFIL[FDB$Q_FILENAME],LIN$_FORMAT,0);
		RETURN FALSE;
		END;
	END;
    END;									! OF READ_LIBRARY

!
! NOW ALLOCATE A CLUSTER DESCRIPTOR FOR THE NEW SHAREABLE IMAGE
!
LNK$ALLOCLUSTER(CLU,1);							! CREATE CLUSTER DESCRIPTOR, DON'T LINK INTO LIST
IF NOT NULLPARAMETER(3)							! IF CALLER WANTS DESCRIPTOR ADDRESS
    THEN RETCLUDESC[0] = .CLU;						!  THEN RETURN IT
LASTCLU = .LNK$GL_CURCLU[CLU$L_LASTCLU];				! GET POINTER TO LAST IMAGE CONTAINED IN THIS ONE
IF .LASTCLU NEQ 0							! IF THERE IS ONE, INSERT AFTER IT
THEN BEGIN
    NEXTCLU = .LASTCLU[CLU$L_NXTCLU];
    LASTCLU[CLU$L_NXTCLU] = .CLU;
    CLU[CLU$L_PREVCLU] = .LASTCLU;
    END
ELSE BEGIN								! THIS IS THE FIRST, INSERT AFTER CURRENT CLUSTER
    NEXTCLU = .LNK$GL_CURCLU[CLU$L_NXTCLU];
    LNK$GL_CURCLU[CLU$L_NXTCLU] = .CLU;
    CLU[CLU$L_PREVCLU] = .LNK$GL_CURCLU;
    END;
IF (CLU[CLU$L_NXTCLU] = .NEXTCLU) NEQ 0					! SET PREVCLU IN NEXT CLUSTER
    THEN NEXTCLU[CLU$L_PREVCLU] = .CLU
    ELSE LNK$GL_LASTCLU = .CLU;						! OR MAKE THIS THE LAST CLUSTER IF IT IS
LNK$GL_CURCLU[CLU$L_LASTCLU] = .CLU;					! MAKE THIS THE NEW LAST CLUSTER
CLU[CLU$V_SHRIMG] = TRUE;						! FLAG CLUSTER AS SHAREABLE IMAGE
CLU[CLU$V_INTCLU] = TRUE;						! FLAG AS INTERNALLY CREATED
CH$MOVE((CLU[CLU$B_NAMLNG]=.MODULEDESC[DSC$W_LENGTH]),			! SET MODULE NAME INTO CLUSTER DESCRIPTOR
		.MODULEDESC[DSC$A_POINTER],CLU[CLU$T_NAME]);
LNK$INSERT_CLU(.CLU);							! INSERT CLUSTER INTO CLUSTER TREE

IF .READ_LIBRARY							! IF READING LIBRARY, SET MORE INFO INTO CLUSTER DESCRIPTOR
THEN BEGIN
    BIND
	HDREC = .BUFDESC[DSC$A_POINTER] : BLOCK[,BYTE],				! NAME THE HEADER RECORD
	MHDID = HDREC[MHD$T_NAME] + .HDREC[MHD$B_NAMLNG] : VECTOR[,BYTE],	! AND THE MODULE ID PART OF HEADER
	MHDGSMATCH = MHDID[1] : LONG,						! 
	MHDCREDAT = MHDID[0] + .MHDID[0] + 1 : VECTOR[,BYTE],			! AND THE CREATE DATE/TIME
	MODHEADER = .MHDBUFDESC[DSC$A_POINTER] : BLOCK[,BYTE],			! THE LIBRARY MODULE HEADER
	MODGSMATCH = MODHEADER[MHD$T_OBJIDENT] : LONG;				! THE GSMATCH STORED IN LIBRARY MODULE HEADER

    LNK$BINTIM(MHDCREDAT,CLU[CLU$Q_CREDAT]);					! CONVERT CREATION DATE/TIME FOR LATER
    CLU[CLU$L_GSMATCH] = .MODGSMATCH;						! SAVE THE GSMATCH FOUND IN THE LIBRARY
    END;
!
! ALLOCATE AN FDB
!
LNK$ALLOFDB(FDB);
CLU[CLU$L_FSTFDB] = CLU[CLU$L_LSTFDB] = .FDB;
LNK$ALLOBLK((FDB[FDB$W_USRNAMLEN] = .MODULEDESC[DSC$W_LENGTH]),
					FDB[FDB$L_USRNAMADR]);
CH$MOVE(.FDB[FDB$W_USRNAMLEN],.MODULEDESC[DSC$A_POINTER],
					.FDB[FDB$L_USRNAMADR]);
IF .LNK$GL_CTLMSK[LNK$V_INTFIL]
THEN CH$MOVE(DSC$C_S_BLN,SHRDEFEXT,FDB[FDB$W_DEFNAMLEN])			! SET DEFAULT FILENAME STRING
ELSE BEGIN
    LOCAL
	PTR,
	PTR1;
!
! THE DEFAULT FILENAME STRING CONSISTS OF THE RESULTANT 
! FILENAME OF THE CURRENT FILE WITH THE EXTENSION SET TO ".EXE"
!
    IF (PTR = CH$FIND_CH(.LNK$GL_CURFIL[FDB$W_DEFNAMLEN],			! FIND END OF DIRECTORY
			.LNK$GL_CURFIL[FDB$L_DEFNAMADR],%ASCII']')) EQL 0
	THEN PTR = CH$FIND_CH(.LNK$GL_CURFIL[FDB$W_DEFNAMLEN],
			.LNK$GL_CURFIL[FDB$L_DEFNAMADR],%ASCII'>');
    PTR1 = CH$FIND_CH(.PTR-.LNK$GL_CURFIL[FDB$L_DEFNAMADR],.PTR,%ASCII'.');	! THEN FIND START OF EXTENSION
    LNK$ALLOBLK(.PTR1-.LNK$GL_CURFIL[FDB$L_DEFNAMADR]+4,FDB[FDB$L_DEFNAMADR]);	! ALLOCATE BLOCK TO HOLD MODIFIED NAME(+4 FOR .EXE)
    PTR = CH$MOVE(.PTR1-.LNK$GL_CURFIL[FDB$L_DEFNAMADR],.LNK$GL_CURFIL[FDB$L_DEFNAMADR], ! MOVE IN FIRST PART OF NAME
			.FDB[FDB$L_DEFNAMADR]);
    PTR1 = CH$MOVE(4,UPLIT('.EXE'),.PTR);					! SET THE EXTENSION
    FDB[FDB$W_DEFNAMLEN] = .PTR1 - .FDB[FDB$L_DEFNAMADR];			! COMPUTE LENGTH OF DEFAULT NAME
    END;
CH$MOVE(DSC$C_S_BLN,LNK$GL_CURFIL[FDB$Q_FILENAME],FDB[FDB$Q_LIBNAMDSC]);	! COPY LIBRARY FILE DESCRIPTOR
FDB[FDB$V_SHR] = TRUE;								! FLAG FILE AS SHAREABLE IMAGE

RETURN FALSE									! RETURN FALSE TO STOP SEARCH
END;										! OF ADDIMAGE

GLOBAL ROUTINE LNK$LIBBUFDEAL : NOVALUE =
BEGIN
!
!	THIS ROUTINE IS CALLED AT THE END OF PASS 1 TO DEALLOCATE
!	THE BUFFER USED FOR LIBRARY PROCESSING AND THE CLI WORK AREA
!	WHICH WAS RETAINED FOR POSSIBLE  MODULE EXTRACTION
!
IF .LNK$GL_CLIWORK NEQ 0			! IF THERE IS STILL AN AREA
THEN LNK$DEALBLK(CLI$C_WORKAREA,.LNK$GL_CLIWORK);	! THEN DE-ALLOCATE IT
RETURN;						! AND ALL DONE
END;
END ELUDOM								! End of module
