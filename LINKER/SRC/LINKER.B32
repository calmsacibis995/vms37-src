MODULE LNK_MAIN (IDENT='V03-016',
		ADDRESSING_MODE(EXTERNAL=GENERAL,
				NONEXTERNAL=LONG_RELATIVE),
		MAIN=LNK$START) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!
!
!++
!
! MODULE: LNK_MAIN
!
! FACILITY: LINKER
!
! ABSTRACT:	THIS IS THE MAINLINE CONTROL ROUTINE WHICH CALLS EVERYTHING ELSE
!
! HISTORY:
!
!	VERSION: X01.00
!
!	AUTHOR: T.J. PORTER 03-JAN-77
!
! MODIFIED BY:
!
!	V03-016	BLS0170		Benn Schreiber		15-Apr-1982
!		Correct handling of library errors
!
!	V03-015	BLS0159		Benn Schreiber		17-Mar-1982
!		Set inhib_msg when exiting.
!
!	V03-014	BLS0111		Benn Schreiber		22-Nov-1981
!		Complete shareable image psect handling/migration
!
!	V03-013	BLS0101		Benn Schreiber		 7-Nov-1981
!		Multiple modifications...see other modules.
!
!	V03-012	BLS0090		Benn Schreiber		26-Oct-1981
!		Module-local symbols
!
!	V03-011	BLS0078		Benn Schreiber		 8-Sep-1981
!		Several minor fixes.
!
!	V03-010	BLS0074		Benn Schreiber		29-Aug-1981
!		More work on based shareable images
!
!	V03-009	BLS0072		Benn Schreiber		25-Aug-1981
!		Enhance based image capabilities
!
!	V03-008	BLS0069		Benn Schreiber		15-Aug-1981
!		Rework pass 2.  Fix miscellaneous bugs
!
!	V03-007 (lost)
!
!	V03-006	BLS0049		Benn Schreiber		22-Mar-1981
!		Allow positioning of pic shareable images in cluster= option
!
!	V03-005	BLS0046		Benn Schreiber		14-Mar-1981
!		Random collection of bug fixes.  Issue info message if
!		creating PIC shareable image and non-pic data or non-pic
!		shareable image input.
!
!	V03-004	BLS0040		Benn Schreiber		12-Feb-1981
!		Force psects in collect= option to be global.
!
!	V03-003	BLS0035		Benn Schreiber		19-Jan-1981
!		65K psects
!
!	V03-002	BLS0029		Benn Schreiber		21-Dec-1980
!		Library of shareable images.
!
!	V03-001	BLS0007		Benn Schreiber,		3-Jun-1980
!		Convert data structures to MDL.
!--


!
!++
!
! FUNCTIONAL DESCRIPTION:
!
!
! THIS MODULE CONTAINS THE MAINLINE AND THE TERMINATION ROUTINE
! OF THE LINKER.
!
!--
!
LIBRARY
	'LIBL32';				! SYSTEM SERVICES MACROS
REQUIRE
	'PREFIX';				! VARIABLES, MACROS ETC.
LIBRARY
	'DATBAS';				! INTERNAL DATA BASE
!
FORWARD ROUTINE
	LNK$EXIT : NOVALUE;			! TERMINATION ROUTINE
!
EXTERNAL ROUTINE
	LNK$CLOSCURFIL,				! CLOSE THE CURRENT OBJ FILE
	LNK$CLOSMAPFIL,				! CLOSE THE MAP FILE
	LNK$CLOSIMGFIL,				! CLOSE THE IMAGE FILE
	LNK$CLOSYMOUT,				! CLOSE SYMBOL TABLE OUTPUT
	LNK$IMGINIT,				! INITIALIZATION OF IMAGE IN MEMORY
	LNK$INIT,				! INITIALIZATION ROUTINE
	LNK$FLUSHIMG,				! WRITE AND COMPRESS THE IMAGE FILE
	LNK$HANDLER,				! ERROR HANDLER
	LNK$GETCMD,				! GET COMMAND PARAMETERS
	LNK$MAPINIT,				! INITILIZE THE MAP OUTPUT
	LNK$MAPADROMD,				! MAP OBJ MODULES WITH .ADDRESS
	LNK$MAPISCTS,				! MAP IMAGE SECTIONS
	LNK$MAPPSCTS,				! MAP THE P-SECTIONS
	LNK$MAPSTATS,				! OUTPUT THE STATISTICS
	LNK$MAPSYMS,				! MAP THE SYMBOL TABLE
	LNK$OBJPASS1,				! OBJECT MODULE PASS 1
	LNK$OBJPASS2,				! AND PASS 2
	LNK$SYMTBLOUT,				! OUTPUT SYMBOL TABLES
	LNK$VMALLO,				! VIRTUAL MEMORY ALLOCATION AND RELOCATION
	LNK$WRTIMGHDR;				! WRITE THE IMAGE HEADER BLOCK(S)
!
EXTERNAL
	LNK$GB_PASS : BYTE,			! PASS NUMBER
	LNK$GB_MAXERCOD : BYTE,			! RECORDED ERROR CODE
	LNK$GL_CTLMSK : BBLOCK;			! CONTROL MASK
!
EXTERNAL LITERAL
	LIN$_FATALERROR,			! FATAL ERROR MESSAGE ISSUED.
	LIN$_WARNISUE,				! WARNING MESSAGES ISSUED
	LIN$_ERRORISUE;				! ERRORS ISSUED
!
GLOBAL
	LNK$AW_VERSION : BLOCK [LID$C_SIZE, BYTE]! LINKER VERSION ARRAY
			    INITIAL (		! INITIALIZE IT TO
				WORD (%ASCII '03'), ! CURRENT VERSION
				WORD (%ASCII '16')),! AND ALTERATION NUMBER
!
! STARTING REAL TIMES:
!
	LNK$GQ_STARTIM : VECTOR [2],		! START TIME
	LNK$GQ_PS1STIM : VECTOR [2],		! PASS 1 START TIME
	LNK$GQ_ALOSTIM : VECTOR [2],		! ALLOCATION PHASE START TIME
	LNK$GQ_PS2STIM : VECTOR [2],		! PASS 2 START TIME
	LNK$GQ_MAPSTIM : VECTOR [2],		! REMAINDER OF MAP BEGINS
	LNK$GQ_STBSTIM : VECTOR [2],		! SYMBOL TABLE OUTPUT BEGINS
!
! CPU TIMES:
!
	LNK$GL_CPUSTIM,				! CPU TIME AT THE START OF LINK
	LNK$GL_PS1CPUT,				! PASS 1 CPU TIME (AT THE START)
	LNK$GL_ALOCPUT,				! ALLOCATION PHASE CPU TIME
	LNK$GL_PS2CPUT,				! PASS 2 CPU TIME
	LNK$GL_MAPCPUT,				! MAP OUTPUT CPU TIME
	LNK$GL_STBCPUT,				! SYMBOL TABLE OUTPUT CPU TIME
	LNK$GL_ENDCPUT,				! END CPU TIME
!
! PAGE FAULT COUNTS:
!
	LNK$GL_SPAGFLTS,			! PAGE FAULT COUNT AT START OF LINK
	LNK$GL_PS1FLTS,				! PAGE FAULT COUNT AT START OF PASS 1
	LNK$GL_ALOFLTS,				! DURING ALLOCATION/RELOCATION
	LNK$GL_PS2FLTS,				! PASS 2 PAGE FAULTS
	LNK$GL_MAPFLTS,				! MAP OUTPUT PAGE FAULTS
	LNK$GL_STBFLTS,				! SYMBOL TABLE OUTPUT PAGE FAULT COUNT
	LNK$GL_ENDFLTS;				! END PAGE FAULTS

GLOBAL ROUTINE LNK$START (ARGLIST) : NOVALUE =
BEGIN
!
!	THIS IS THE MAIN ROUTINE OF THE LINKER, ITS PURPOSE
!	BEING MERELY TO CALL THE ROUTINES THAT DO
!	ALL THE WORK AND TO MONITOR THE PERFORMANCE OF EACH.
!		ARGLIST IS THE ARGUMENT LIST PROVIDED ON ACTIVATION
!		BY CLI. IT CONTAINS (AT OFFSET CLI$A_UTILSERV)
!		THE CLI RE-CALL ADDRESS REQUIRED FOR OBTAINING
!		THE COMMAND PARAMETERS.
!
OWN	CURCPUTIM,				! CPU TIME BUFFER
	CURPAGEFLTS,				! PAGE FAULT COUNT BUFFER
	DATALIST : BLOCK [7] INITIAL (		! ITEM DESCRIPTOR LIST
			WORD (4), WORD (JPI$_CPUTIM),	! LONGWORD OF CPU TIME
			LONG (CURCPUTIM), LONG (0),	!
			WORD (4), WORD (JPI$_PAGEFLTS),	! LONGWORD OF PAGE FAULTS
			LONG (CURPAGEFLTS), LONG (0),	!
			LONG (JPI$C_LISTEND));		! END OF ITEM DESCRIPTOR LIST

ENABLE LNK$HANDLER;					! ENABLE CONDITION HANDLER
$GETTIM (TIMADR = LNK$GQ_STARTIM);			! GET START VALUES
$GETJPI (ITMLST = DATALIST);
LNK$GL_CPUSTIM = .CURCPUTIM;
LNK$GL_SPAGFLTS = .CURPAGEFLTS;
LNK$INIT ();						! PERFORM INITIALIZATION
LNK$GETCMD (ARGLIST-4);					! GO GET THE COMMAND PARAMETERS
							! WITH NO RETURN IF IN ERROR
LNK$GB_PASS = 1;					! SET PASS NUMBER
$GETTIM (TIMADR = LNK$GQ_PS1STIM);			! GET START VALUES FOR PASS 1
$GETJPI (ITMLST = DATALIST);
LNK$GL_PS1CPUT = .CURCPUTIM;
LNK$GL_PS1FLTS = .CURPAGEFLTS;
LNK$OBJPASS1 (ARGLIST-4);				! EXECUTE PASS1
$GETTIM (TIMADR = LNK$GQ_ALOSTIM);			! GET THE START VALUES OF ALLOCATION/RELOCATION PHASE
$GETJPI (ITMLST = DATALIST);
LNK$GL_ALOCPUT = .CURCPUTIM;
LNK$GL_ALOFLTS = .CURPAGEFLTS;
LNK$VMALLO ();						! ALLOCATE VIRTUAL MEMORY
IF .LNK$GL_CTLMSK [LNK$V_IMAGE]				! IF AN IMAGE IS REQUIRED
    THEN LNK$IMGINIT ();				! GO GET IT STARTED
IF .LNK$GL_CTLMSK [LNK$V_MAP]				! IF A MAP IS REQUIRED
    THEN LNK$MAPINIT ();				! START THE MAP
LNK$GB_PASS = 2;					! SET PASS 2
$GETTIM (TIMADR = LNK$GQ_PS2STIM);			! GET START VALUES FOR PASS 2
$GETJPI (ITMLST = DATALIST);
LNK$GL_PS2CPUT = .CURCPUTIM;
LNK$GL_PS2FLTS = .CURPAGEFLTS;
LNK$OBJPASS2 ();					! EXECUTE PASS 2
IF .LNK$GL_CTLMSK [LNK$V_IMAGE]				! IF IMAGE PRODUCTION STILL ENABLED
    THEN LNK$FLUSHIMG ();				! COMPRESS AND WRITE THE IMAGE FILE
$GETTIM (TIMADR = LNK$GQ_MAPSTIM);			! START VALUES FOR BULK OF MAP OUTPUT
$GETJPI (ITMLST = DATALIST);
LNK$GL_MAPCPUT = .CURCPUTIM;
LNK$GL_MAPFLTS = .CURPAGEFLTS;
IF .LNK$GL_CTLMSK [LNK$V_MAPOPN]			! IF THE MAP IS STILL OPEN
THEN BEGIN
	LNK$MAPADROMD ();				! OUTPUT MODULES WITH .ADDRESS
	LNK$MAPISCTS ();				! OUTPUT IMAGE SECTION SYNOPSIS
	LNK$MAPPSCTS ();				! PRINT THE P-SECTION SYNOPSIS
	LNK$MAPSYMS ();					! OUTPUT THE SYMBOL TABLE
     END;
$GETTIM (TIMADR = LNK$GQ_STBSTIM);			! GET START VALUES FOR STB OUTPUT
$GETJPI (ITMLST = DATALIST);
LNK$GL_STBCPUT = .CURCPUTIM;
LNK$GL_STBFLTS = .CURPAGEFLTS;
LNK$SYMTBLOUT ();					! OUTPUT THE SYMBOL TABLE
IF .LNK$GL_CTLMSK [LNK$V_IMAGE]				! IF THE IMAGE IS STILL OPEN
    THEN LNK$WRTIMGHDR ();				! OUTPUT THE HEADER AND CLOSE IT
$GETJPI (ITMLST = DATALIST);
LNK$GL_ENDCPUT = .CURCPUTIM;
LNK$GL_ENDFLTS = .CURPAGEFLTS;
IF .LNK$GL_CTLMSK [LNK$V_MAPOPN]			! IF THE MAP IS STILL OPEN
THEN BEGIN
	LNK$MAPSTATS ();				! THEN STATISTICS OF THIS RUN
	LNK$CLOSMAPFIL ();				! FINALLY CLOSE THE MAP FILE
     END;

LNK$EXIT ((IF .LNK$GB_MAXERCOD THEN SS$_NORMAL
		ELSE IF .LNK$GB_MAXERCOD EQL STS$K_WARNING
				THEN LIN$_WARNISUE
				ELSE LIN$_ERRORISUE));
END;

GLOBAL ROUTINE LNK$EXIT (EXITCODE) : NOVALUE=
BEGIN
!
! LINKER TERMINATION ROUTINE
!

IF .EXITCODE NEQ SS$_NORMAL
THEN BEGIN
	LNK$CLOSCURFIL ();				! CLOSE THE CURRENT OBJ FILE
	LNK$CLOSYMOUT (0);				! CLOSE ANY SYMBOL TABLE OUTPUT
	LNK$CLOSIMGFIL ();				! CLOSE THE IMAGE FILE
	LNK$CLOSMAPFIL ();				! CLOSE THE MAP FILE
     END;
$EXIT (CODE = .EXITCODE OR STS$M_INHIB_MSG);

END;

END ELUDOM
