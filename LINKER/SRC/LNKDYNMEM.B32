MODULE LNK_DYNMEM (
		IDENT = 'V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL)
		) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!
!
!++
!
! MODULE: LNK_DYNMEM
!
! FACILITY: LINKER
!
! ABSTRACT:  DYNAMIC MEMORY ALLOCATION AND DEALLOCATION
!
! HISTORY:
!
!	VERSION: X01.00
!
!	AUTHOR: T.J. PORTER 14-JAN-77
!
! MODIFIED BY:
!
!	V03-001	BLS0007		Benn Schreiber,		3-Jun-1980
!		Convert to MDL data structures.
!--

!
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	THIS MODULE CONTAINS ALL THE DYNAMIC MEMORY ALLOCATION
!	AND DE-ALLOCATION LOGIC OF THE LINKER.  A SINGLY
!	LINKED LIST OF FREE BLOCKS OF MEMORY IS MAINTAINED
!	(LISTHEAD IS LNK$GL_MEMLHD) AND MEMORY IS ALLOCATED
!	BY FIRST FIT.  SHOULD THERE BE NO AVAILABLE MEMORY BLOCK
!	OF REQUIRED SIZE, THE ALLOCATION ROUTINE EXPANDS
!	THE PROGRAM REGION BY THE NUMBER OF PAGES EQUAL TO 
!	LNK$C_MEMEXP, LINKS THIS ON THE END OF THE FREE
!	LIST AND ALLOCATES THE REQUIRED MEMORY FROM THAT NEW
!	BLOCK.  THE FREE MEMORY LIST IS THEREFORE INITIALIZED
!	ON FIRST ALLOCATION CALL.  MEMORY IS ALWAYS ALLOCATED
!	IN EIGHT BYTE QUANTA, WITH A MAXIMUM OF LNK$C_MEMEXP*512
!	BYTES.  DEALLOCATION EFFECTS COMPACTION WHENEVER POSSIBLE.
!
! CALLING SEQUENCES:
!	LNK$ALLOBLK(BLOCKSIZE,BLOCKADDR)
!	LNK$DEALBLK(BLOCKSIZE,BLOCKADDR)
!		WHERE:
!		  BLOCKSIZE = NUMBER OF BYTES TO BE (DE)ALLOCATED.
!		  BLOCKADDR = ADDRESS OF CELL FOR THE ADDRESS OF
!		              THE BLOCK ALLOCATED OR TO BE DEALLOCATED.
! ERROR CONDITIONS:
!
!	1.  BLOCKSIZE < OR = 0 OR > LNK$C_MEMEXP*512 (CODE = 0,10)
!
!	2.  FAILURE TO EXPAND THE PROGRAM REGION ISSUES A MESSAGE
!	    THAT MEMORY IS FULL AND THE LINKER ABORTS.
!
!	3.  ANY PART OF A BLOCK TO BE DEALLOCATED IS:
!		(I) WITHIN A FREE BLOCK (CODE = 2,13)
!		(II) BEYOND TOP OF PROGRAM REGION (CODE = 11)
!		(III) LOWER THAN THAN LOWEST BLOCK EVER ALLOCATED (CODE = 12)
!
!	IN CASES 1 AND 3 A FATAL ("BUG") MESSAGE IS ISSUED AND
!		THE LINKER TERMINATES.
!
!--
!
REQUIRE
	'PREFIX';
!
FORWARD ROUTINE
	ALLOCATE ,				! ALLOCATION ROUTINE
	DEALLOCATE;				! DEALLOCATION ROUTINE
GLOBAL
	LNK$GL_MEMLHD : VECTOR[2]
			INITIAL (0,0),		! FREE MEMORY LISTHEAD
	LNK$GL_MINADDR : INITIAL(CONTROL_REGION); ! LOWEST ADDRESS EVER ALLOCATED
!
EXTERNAL LITERAL
	LIN$_MEMBUG,				! ILLEGAL BLOCK SIZE MESSAGE
	LIN$_MEMFUL;				! RAN OUT OF VM MESSAGE
!
EXTERNAL ROUTINE
	SYS$EXPREG;				! EXPAND REGION SYSTEM SERVICE
!
GLOBAL LITERAL
	LNK$C_MEMEXP = 128;			! NO. OF PAGES TO EXTEND PROGRAM REGION
!
LITERAL
	MAXBLOCKSIZE = LNK$C_MEMEXP*512;	! MAXIMUM ALLOCATION SIZE
!
OWN
	ERRORCODE : BYTE,			! ERROR CODE FOR FAILURE MESSAGE
	NEWBLOCK : REF VECTOR[2],		! CURRENT BLOCK POINTER
	NEXTBLOCK : REF VECTOR[2],		! NEXT BLOCK POINTER
	LASTBLOCK : REF VECTOR[2];		! PREVIOUS BLOCK POINTER
!
GLOBAL ROUTINE LNK$ALLOBLK (SIZE, BLOCKADDR) : NOVALUE =
!
!	ALLOCATE A BLOCK FROM THE FREE
!	MEMORY LIST.
!
BEGIN
!
LOCAL
	BLOCKSIZE;
!
ERRORCODE = 0;					! INITIALIZE ERROR CODE
!
BLOCKSIZE = (.SIZE + 7) AND ( NOT 7);		! ROUND UP TO MULTIPLE OF 8 BYTES
!
IF .BLOCKSIZE EQL 0				! CHECK LEGAL BLOCK
OR	 					! SIZE WAS REQUESTED
	.BLOCKSIZE GTRU MAXBLOCKSIZE
OR NOT ( ERRORCODE = .ERRORCODE + 1;		! SET NEW ERROR CODE
	ALLOCATE (.BLOCKSIZE, .BLOCKADDR))	! GO ALLOCATE
THEN
	SIGNAL_STOP(LIN$_MEMBUG,3,		! ISSUE ERROR MESSAGE AND
		.BLOCKSIZE,.BLOCKADDR,.ERRORCODE);	! TERMINATE IF FAILURE
RETURN;						! OTHERWISE RETURN
END;		! OF LNK$ALLOBLK ROUTINE
!
ROUTINE ALLOCATE (SIZE, ADDRESS) =
!
!	ROUTINE TO DO ACTUAL ALLOCATION AND PROGRAM
!	REGION EXPANSION
!
BEGIN
!
LOCAL
	MEMLIMITS : VECTOR[2];
!
LASTBLOCK = LNK$GL_MEMLHD[0];			! INITIALLY AT TOP OF FREE LIST
!
WHILE (NEWBLOCK = .LASTBLOCK[0])NEQ 0 DO	! FOLLOW DOWN FREE LIST
	BEGIN
	IF .NEWBLOCK[1] EQL .SIZE		! LOOK FOR SUITABLE FREE BLOCK
	THEN BEGIN				! EXACT SIZE MATCH
		LASTBLOCK[0] = .NEWBLOCK[0];	! SO LAST POINTS WHERE THIS ONE POINTED
		IF (.ADDRESS = NEWBLOCK[0]) LSSU .LNK$GL_MINADDR ! NOW RECORD LOWEST
		THEN LNK$GL_MINADDR = NEWBLOCK[0];	! ALLOCATED ADDRESS
		RETURN TRUE;			! AND WE ARE DONE
		END
	ELSE IF .NEWBLOCK[1] GTRU .SIZE		! OR ONE LARGER THAN REQUESTED
	THEN BEGIN
		NEXTBLOCK = NEWBLOCK[0]+.SIZE; 			! IN WHICH CASE THERE IS A NEW
		NEXTBLOCK[0] = .NEWBLOCK[0];
		NEXTBLOCK[1] = .NEWBLOCK[1]-.SIZE; 		! NEXT BLOCK (THE PART REMAIN-
		LASTBLOCK[0] = NEXTBLOCK[0];			! ING) AFTER TAKING REQUESTED BLOCK OFF
		IF (.ADDRESS = NEWBLOCK[0]) LSSU .LNK$GL_MINADDR ! NOW RECORD LOWEST
		THEN LNK$GL_MINADDR = NEWBLOCK[0];		! ALLOCATED ADDRESS
		RETURN TRUE;			! AND WE ARE DONE
	     END
	ELSE LASTBLOCK = NEWBLOCK[0];		! WHEN NOT SUITABLE THIS BLOCK BECOMES PREVIOUS BLOCK
	END;					! OF WHILE LOOP
!
!	AT THIS POINT WE HAVE REACHED THE END OF THE FREE
!	MEMORY LIST WITHOUT FINDING A BLOCK OF REQUIRED SIZE.
!	THUS, WE EXPAND THE ADDRESS SPACE AND ATTEMPT TO
!	ALLOCATE FROM ADDITIONAL VIRTUAL MEMORY.
!
IF SYS$EXPREG(LNK$C_MEMEXP,MEMLIMITS,,)
						! SUCCESSFULLY EXPANDED PROGRAM REGION
THEN BEGIN					! DEALLOCATE NEW SPACE TO END OF
	IF NOT DEALLOCATE(MAXBLOCKSIZE,.MEMLIMITS[0],LASTBLOCK[0])
		THEN RETURN FALSE;
	IF NOT ALLOCATE(.SIZE,.ADDRESS)		! FREE LIST THEN ALLOCATE FROM IT
		THEN RETURN FALSE;
	RETURN TRUE;
     END
						! FAILURE TO EXPAND PROGRAM REGION
ELSE SIGNAL_STOP(LIN$_MEMFUL);			! IS FATAL
END;			! OF ALLOCATE ROUTINE
GLOBAL ROUTINE LNK$DEALBLK (SIZE, BLOCKADDR) : NOVALUE =
!
!	ROUTINE TO DEALLOCATE A BLOCK TO THE FREE
!	MEMORY LIST AFTER CHECKING ITS SIZE
!
BEGIN
!
LOCAL
	BLOCKSIZE;
!
ERRORCODE = 10;					! INITIALIZE ERROR CODE
!
BLOCKSIZE = (.SIZE + 7) AND ( NOT 7);		! ROUND UP TO A MULTIPLE OF 8 BYTES
!
IF .BLOCKSIZE EQL 0				! CHECK BLOCK SIZE IS
OR
.BLOCKSIZE GTRU MAXBLOCKSIZE			! LEGAL AND THAT IT LIES
OR (ERRORCODE = .ERRORCODE + 1;			!
(.BLOCKADDR + .BLOCKSIZE - 1)) GTRU CONTROL_REGION ! COMPLETELY WITHIN PROGRAM REGION
						! AND IF NOT...
OR (ERRORCODE = .ERRORCODE + 1;			! ISSUE FATAL ERROR MESSAGE
.BLOCKADDR LSSU .LNK$GL_MINADDR)			! ALSO IF BELOW MINIMUM ALLOCATED ADDRESS
OR NOT DEALLOCATE(.BLOCKSIZE,.BLOCKADDR,LNK$GL_MEMLHD)	! ATTEMPT DEALLOCATION
THEN SIGNAL_STOP(LIN$_MEMBUG,3,			! ISSUING FATAL ERROR IF FAILURE
	.BLOCKSIZE,.BLOCKADDR,.ERRORCODE);
RETURN;						! OTHERWISE JUST RETURN
END;
!
ROUTINE DEALLOCATE (SIZE, ADDRESS, LISTHEAD) =
!
!	ROUTINE TO PUT A BLOCK ONTO A LIST OF FREE BLOCKS,
!	WITH MAXIMAL COMPACTION
!
BEGIN
LASTBLOCK = .LISTHEAD;				! PREVIOUS BLOCK INITIALLY THE LISTHEAD
NEWBLOCK = .ADDRESS;				! CURRENT BLOCK IS TO BE INSERTED
!
WHILE (NEXTBLOCK = .LASTBLOCK[0])NEQ 0 DO	! FOLLOW DOWN FREE LIST TILL
BEGIN						! THE END, OR TILL WE REACH
IF NEWBLOCK[0] LEQU NEXTBLOCK[0]
THEN
	BEGIN					! THE POSITION FOR INSERTION.
	IF NEWBLOCK[0]+.SIZE EQL NEXTBLOCK[0]
	THEN
		BEGIN				! HERE WE COMPACT WITH NEXT BLOCK
		NEWBLOCK[0] = .NEXTBLOCK[0];
		NEWBLOCK[1] = .NEXTBLOCK[1]+.SIZE;
		END
	ELSE
		BEGIN
		IF NEWBLOCK[0] + .SIZE GTRU NEXTBLOCK[0] ! IF THE BLOCK TO DEALLOCATE
		THEN (ERRORCODE = .ERRORCODE + 1; 	! EXTENDS INTO NEXT FREE BLOCK
			RETURN FALSE);			! AND RETURN FAILURE
		NEWBLOCK[0] = NEXTBLOCK[0];		! ELSE SET POINTER AND SIZE SINCE NO
		NEWBLOCK[1] = .SIZE;			! FORWARD COMPACTION NEEDED
		END;
	IF NEWBLOCK[0] EQL LASTBLOCK[0]+.LASTBLOCK[1]
	THEN
		BEGIN					! HERE WE COMPACT WITH PREVIOUS
		LASTBLOCK[0] = .NEWBLOCK[0];		! BLOCK
		LASTBLOCK[1] = .NEWBLOCK[1]+.LASTBLOCK[1];
		END
	ELSE						! NO BACKWARD COMPACTION BUT...
		BEGIN					! MUST CHECK THAT BLOCK TO
		IF NEWBLOCK[0] LSSU LASTBLOCK[0] + .LASTBLOCK[1]
							! DEALLOCATE IS NOT PARTIALLY IN
			THEN (ERRORCODE = .ERRORCODE + 1; ! PREVIOUS HOLE -- FAILURE IF SO
			     RETURN FALSE);
		LASTBLOCK[0] = NEWBLOCK[0];	! IF OK PREVIOUS POINTS TO NEW ONE.
		END;				! AND WE ARE DONE COMPACTING
	RETURN TRUE;				! SO RETURN SUCCESS.
	END
ELSE
	LASTBLOCK = NEXTBLOCK[0];		! NOT THERE YET SO LAST BLOCK IS ONE JUST TESTED
END;						! OF WHILE LOOP
!
! THE BLOCK TO DEALLOCATE IS BEYOND LAST HOLE
!
IF NEWBLOCK[0] LSSU LASTBLOCK[0] + .LASTBLOCK[1]	! BUT IF IT STARTS WITHIN
THEN (ERRORCODE = .ERRORCODE + 1;			! THE LAST HOLE - FAIL IT
		RETURN FALSE)
ELSE
	BEGIN						! OTHERWISE CHECK FOR COMPACTION
	IF NEWBLOCK[0] EQL LASTBLOCK[0] + .LASTBLOCK[1]	! WITH LAST HOLE
	THEN LASTBLOCK[1] = .LASTBLOCK[1] + .SIZE	! AND ADD IN SIZE IF REQUIRED
	ELSE
		BEGIN				! OTHERWISE JUST
		NEWBLOCK[0] = 0;		! PUT ON END OF FREE LIST.
		NEWBLOCK[1] =.SIZE;
		LASTBLOCK[0] = NEWBLOCK[0];
		END;				! AND ALL DONE
	RETURN TRUE;			! SO RETURN SUCCESS
	END;
END;			! OF ROUTINE
END ELUDOM		! OF MODULE
