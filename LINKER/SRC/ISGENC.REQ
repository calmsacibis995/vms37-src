!	Version 'V03-000'
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!
!
!++
!
! MODULE: ISGENC.REQ
!
! FACILITY: LINKER
!
! ABSTRACT:	REQUIRE FILE FOR I-SECTION GENERATION CONTROL
!
! HISTORY:
!
!	AUTHOR: T.J. PORTER 01-APR-77
!
!	MODIFICATIONS:
!
!	V03-002		BLS0026		Benn Schreiber		28-Nov-1980
!		Remove ascii name string from isect generation tables.
!
!	V02-001		BLS0007		Benn Schreiber		15-Aug-1980
!		Convert to MDL data structures.
!--

!
!++
!
! functional description:
!
!	this is a require file which sets up all necessary data
!	for generation of image sections. generation of image
!	sections is driven by a table chosen depending upon
!	the kind of link being performed.
!		exe_isgentbl	is used for normal user executable
!				images
!		shr_isgentbl	is used for shareable images
!		sys_isgentbl	is used for system space images
!	the order of entries in these tables is the order in which
!	the image sections are generated. there is one
!	entry for each image section to be generated.
!	each entry provides the following information:
!		name of isection build routine
!		p-section attribute mask (the and mask)
!		p-section match pattern
!		i-section code which appears in the isd of header
!		size of the isd written to header
!		page fault cluster size
!		isd flags.
!	this file requires that sysdef be previously declared
!		to define the isd's and the image header layout.
!--
!
!
COMPILETIME
	NUM_ISECTS=0;						! VARIABLE FOR TABLE GENERATION
!
!	DEFINE GENERIC I-SECTION TYPE PARAMETERS:-
!		SIZE	= NUMBER OF BYTES IN ISD OF HEADER
!		CODE	= IMAGE SECTION TYPE CODE IN ISD
!		PFC	= PAGE FAULT CLUSTER SIZE
!		GBL	= INDICATOR FOR WHETHER POTENTIALLY GLOBAL
!				TRUE OR FALSE
!		DZRO	= DEMAND ALLOCATE ZERO FILL IMAGE SECTION
!				TYPE INDICATOR - TRUE OR FALSE
!
LITERAL
	NULL_SIZE   = 0,					! NULL ISD TYPE
	NULL_CODE   = 0,
	NULL_PFC    = 0,
	NULL_GBL    = FALSE,
	NULL_DZRO   = FALSE,
!
	NORMAL_GBL  = FALSE,
	NORMAL_DZRO = FALSE,
	NORMAL_CODE = ISD$K_NORMAL,				! NORMAL ISD'S TYPE
	NORMAL_SIZE = ISD$K_LENPRIV,				! NORMAL ISD SIZE
	NORMAL_PFC  = NULL_PFC,					! NORMALLY NULL
!
	STACK_CODE  = ISD$K_USRSTACK,				! STACK ISD TYPE CODE
	STACK_SIZE  = ISD$K_LENDZRO,				! DEMAND ZERO ISD
	STACK_PFC   = NULL_PFC,					! DEFAULT IS NULL
	STACK_GBL   = FALSE,
	STACK_DZRO  = TRUE,
!
	SHRFXD_CODE = ISL$C_SHRFXD,				! SHARABLE AT FIXED PLACE
	SHRFXD_SIZE = ISD$K_LENPRIV,				! IN THE ADDRESS SPACE
	SHRFXD_PFC  = NULL_PFC,
	SHRFXD_GBL  = FALSE,
	SHRFXD_DZRO = FALSE,
!
	PRVFXD_CODE = ISL$C_PRVFXD,				! PRIVATE IN FIXED PLACE OF ADDRESS
	PRVFXD_SIZE = ISD$K_LENPRIV,
	PRVFXD_PFC  = NULL_PFC,
	PRVFXD_GBL  = FALSE,
	PRVFXD_DZRO = FALSE,
!
	SHRPIC_CODE = ISL$C_SHRPIC,				! SHAREABLE POSITION INDEPENDENT
	SHRPIC_SIZE = ISD$K_LENPRIV,
	SHRPIC_PFC  = NULL_PFC,
	SHRPIC_GBL  = FALSE,
	SHRPIC_DZRO = FALSE,
!
	PRVPIC_CODE = ISL$C_PRVPIC,				! PRIVATE PIC SECTIONS
	PRVPIC_SIZE = ISD$K_LENPRIV,
	PRVPIC_PFC  = NULL_PFC,
	PRVPIC_GBL  = FALSE,
	PRVPIC_DZRO = FALSE,

	RDWRTEXEREL = GPS$M_WRT OR GPS$M_EXE OR			! MASK FOR READ,
				GPS$M_REL,			! WRITE EXECUTE AND RELOCATABLE
	SHRPICMASK = RDWRTEXEREL OR GPS$M_SHR OR		! SEARCH MASK FOR PIC AND SHAREABLE P-SECTIONS
				GPS$M_PIC,			! WHICH ARE READ, WRITE EXECUTABLE
								! AND RELOCATABLE
	RDWRTEXERELVEC = RDWRTEXEREL OR GPS$M_VEC,		! MASK FOR VECTOR IMAGE SECTIONS
	SHRPICVEC = SHRPICMASK OR GPS$M_VEC;			! MASK FOR SHAREABLE VECTOR IMAGE SECTIONS
!
!
!	DEFINE THE HEADER FILLING
!
GLOBAL LITERAL
	ISD$C_SIZE = ISD$K_LENGLBL + ISL$C_SIZE : WEAK,		! SIZE OF FULL IMAGE SECTION DESCRIPTOR INCLUDING LINKER PART
	HDR$K_FILLCHR = 255 : BYTLIT WEAK,			! FILL CHARACTER
	IHD$K_SHR = IHD$K_LIM : WEAK,				! JUST A DIFFERENT NAME
	IHD$K_ACTIVOFF = IHD$K_LENGTH : WEAK,			! OFFSET TO ACTIVATION AREA
	IHD$K_SYMDBGOFF = IHD$K_ACTIVOFF + IHA$K_LENGTH : WEAK,	! OFFSET TO SYMBOL TABLE DATA
	IHD$K_IMGIDOFF = IHD$K_SYMDBGOFF + IHS$K_LENGTH : WEAK,	! OFFSET TO IMAGE IDENTIFICATION AREA
	IHD$K_PATCHOFF = IHD$K_IMGIDOFF + IHI$K_LENGTH : WEAK,	! OFFSET TO PATCH CONTROL AREA
	IHD$K_MAXLENGTH = IHD$K_PATCHOFF : WEAK,		! MAXIMUM HEADER LENGTH WITHOUT PATCH AREA
	HDR$K_MINFILL = 2 : WEAK; 				! MINIMUM FILL MUST EQUAL WIDTH
								! OF ISD SIZE FIELD
!
!
!	THE FOLLOWING MACROS GENERATE ACCESSING MACROS FOR BLOCK
!	STRUCTURES WHICH HAVE FIELDS OF BYTE, WORD OR LONG WIDTH.
!
COMPILETIME
	YYYYYYYSIZE = 0;						! VARIABLE WHICH IS RESULTANT BLOCK LENGTH
!
MACRO
!
    GENBLOCKFIELDS(BLKNAM)[] =
!
! CALLING SEQUENCE:
!	GENBLOCKFIELDS(BLKNAM,
!		FLDNAM1,FLDWIDTH1,
!		FLDNAM2,FLDWIDTH2,
!		   ...........
!		     ETC,
!		FLDNAMN,FLDWIDTHN);
!	WHERE:
!		FLDNAMI	= THE NAME OF FIELD I IN THE BLOCK
!		FLDWIDTHI = WIDTH IN BYTES OF FIELD I
!
!	THE MACRO GENERATES FIELD ACCESS MACROS OF THE FORM
!	BLKNAM$X_FLDNAM WHERE X IS B, W, L FOR FIELD WIDTHS OF
!	1, 2, 4 BYTES RESPECTIVELY.
!	IN ADDITION A MACRO OF FORM INIT_BLKNAM IS
!	GENERATED FOR STATIC INITIALIZATION OF BLOCK. FOR EXAMPLE
!	INITIAL (INIT_BLKNAM(VALUE1,VALUE2,....VALUEN))
!
!
!	GENERATE A MACRO TO REFERENCE THE START OF THE BLOCK
!
!	MACRO %NAME(%STRING(BLKNAM),'$C_START') =
!		0,0,0,0%QUOTE%;
!
!	GENERATE THE ACCESSING MACROS FOR ALL THE FIELDS OF THE BLOCK
!
!	YYYYYYYYBBF(BLKNAM,0,%REMAINING);
!
!	DEFINE A GLOBAL LITERAL (FOR LINK TIME ERROR DETECTION) WHOSE
!		VALUE IS NUMBER OF BYTES IN BLOCK
!
!	GLOBAL LITERAL %NAME(%STRING(BLKNAM),'$C_SIZE') = YYYYYYYSIZE : WEAK;
!
!	NOW DEFINE A MACRO THAT CAN BE USED TO STATICALLY INITIALIZE
!		ALL THE FIELDS OF THIS BLOCK
!	MACRO NAME IS INIT_BLKNAM
!
	YYYCRE8INIMACRO(%NAME('INIT_',%STRING(BLKNAM)), (ZZZBBF(%REMAINING)), (XXXBBF(%REMAINING)))%,
!
! AUXILIARY MACROS:-
!
    YYYCRE8INIMACRO(NAME, FORMAL, BODY) =
		MACRO NAME FORMAL =%REMOVE BODY%QUOTE%%,
!
    ZZZBBF[FLDNAM, FLDWIDTH] = %NAME(%STRING(FLDNAM),'_FML')%,
!
    XXXBBF[FLDNAM, FLDWIDTH] = %IF FLDWIDTH EQL 1 %THEN BYTE
				%ELSE %IF FLDWIDTH EQL 2 %THEN WORD
				       %ELSE LONG
					%FI
				%FI
					(%NAME(%STRING(FLDNAM),'_FML'))%,
!
    YYYFLDPREFIX(WIDTH) = %IF WIDTH EQL 1
			%THEN B
			%ELSE %IF WIDTH EQL 2
			      %THEN W
			      %ELSE %IF WIDTH EQL 4
				    %THEN L
				    %ELSE T
				    %FI
			      %FI
			%FI%,
!
    YYYYYYYYBBF( BLKNAM, OFF, NAM, BYTS)[] =
	MACRO %NAME( %STRING(BLKNAM), '$', %STRING(YYYFLDPREFIX(BYTS)),'_', %STRING(NAM)) =
			OFF, 0, MIN(BYTS*8, 32), 0 %QUOTE%;
	%ASSIGN(YYYYYYYSIZE,OFF+BYTS)
	YYYYYYYYBBF( BLKNAM, OFF+BYTS, %REMAINING)%;

!
!	DEFINE ACCESS MACROS FOR I-SECTION GENERATION CONTROL
!	TABLE ENTRIES
!
GENBLOCKFIELDS(ISC,						! NAMES ARE ISC$X_YY...
	MASK,2,							! P-SECTION AND MASK
	MATCH,2,						! P-SECTION ATTRIBUTE MATCH
	CODE,1,							! I-SECT TYPE
	SIZE,1,							! ISD SIZE
	PFC,1,							! PAGE FAULT CLUSTER
	FLAGS,1,						! ISD FLAGS
	MATCTL,1);						! MATCH CONTROL FIELD OF ISD

MACRO
	ISECTDEF(NAME,TYPE,MATCH)=			
!
!	THIS MACRO DEFINES AN IMAGE SECTION NAME AND THE PARAMETERS
!	OF SUCH AN IMAGE SECTION.
!		NAME IS A NAME TO BE ASSOCIATED WITH THE IMAGE SECTION
!		TYPE IS ONE OF THE GENERIC TYPES LISTED ABOVE.
!		MATCH IS THE PATTERN OF P-SECTION ATTRIBUTES TO BE
!		MATCHED IN THE SEARCH
!
	LITERAL
		%NAME(%STRING(NAME),'_MATCH') = MATCH OR GPS$M_REL,		! SET MATCH MASK ALWAYS RELOCATABLE
		%NAME(%STRING(NAME),'_ISDCODE') = %NAME(%STRING(TYPE),'_CODE'), ! ISD TYPE CODE
		%NAME(%STRING(NAME),'_ISDSIZ') = %NAME(%STRING(TYPE),'_SIZE'),  ! SIZE OF ISD
		%NAME(%STRING(NAME),'_PFC') = %NAME(%STRING(TYPE),'_PFC'),	! AND CLUSTER SIZE
		%NAME(%STRING(NAME),'_GBL') = %NAME(%STRING(TYPE),'_GBL'),	! GLOBAL FLAG
		%NAME(%STRING(NAME),'_CRF') = %IF(%NAME(%STRING(NAME),'_MATCH')	! SET THE COPY ON REFERENCE
						AND (GPS$M_WRT OR		! FLAG IFF P-SECTION
						GPS$M_SHR)) EQL GPS$M_WRT	! WRITABLE AND NOT SHAREABLE
						%THEN TRUE			! IS WRITABLE
						%ELSE FALSE
						%FI,
		%NAME(%STRING(NAME),'_DZRO') = %NAME(%STRING(TYPE),'_DZRO'),	! DEMAND ZERO FLAG
		%NAME(%STRING(NAME),'_WRT') = %IF(%NAME(%STRING(NAME),'_MATCH')	! WRITABLE FLAG IF P-SECTION
						AND GPS$M_WRT) NEQ 0		! IS WRITABLE
						%THEN TRUE
						%ELSE %IF %NAME(NAME,'_DZRO')	! OR IF THE IMAGE SECTION
						      %THEN TRUE		! IS A DEMAND ZERO
						      %ELSE FALSE
						      %FI
						%FI,
		%NAME(%STRING(NAME),'_MTCLFLD') = ISD$K_MATALL;%,		! MATCH CONTROL FIELD OF ISD'S
!
	ISGENTBLENT[ISNAME,SRCHMASK] = INIT_ISC(
!
!	THIS MACRO GENERATES ISECTION GENERATION CONTROL TABLE ENTRIES,
!	INITIALIZED WITH PARAMETERS ASSOCIATED WITH THE PARTICULAR
!	IMAGE SECTIONS.
!		ISNAME IS THE NAME OF THE IMAGE SECTION TYPE
!		SRCHMASK IS THE MASK OF P-SECTION ATTRIBUTES TO BE
!		CONSIDERED IN SEARCH FOR PATTERNS
!
		SRCHMASK,					! STORE AND MASK
		%NAME(%STRING(ISNAME),'_MATCH'),		! SET MATCH PATTERN
		%NAME(%STRING(ISNAME),'_ISDCODE'),		! CODE FOR ISD
		%NAME(%STRING(ISNAME),'_ISDSIZ'),		! SIZE OF ISD
		%NAME(%STRING(ISNAME),'_PFC'),			! AND PAGE FAULT CLUSTER
		(ISD$M_GBL*%NAME(%STRING(ISNAME),'_GBL')) OR	! SET ISECT
		(ISD$M_WRT*%NAME(%STRING(ISNAME),'_WRT')) OR	! DESCRIPTOR
		(ISD$M_CRF*%NAME(%STRING(ISNAME),'_CRF')) OR	! FLAGS
		(ISD$M_DZRO*%NAME(%STRING(ISNAME),'_DZRO')),
		%NAME(%STRING(ISNAME),'_MTCLFLD')
		)%,
!
!	THIS MACRO GENERATES AN IMAGE SECTION GENERATION CONTROL
!	TABLE.
!
	ISGENTBL(TBLNAM)[]=
		%ASSIGN(NUM_ISECTS,(%LENGTH-1)/2)		! GET NUMBER IN
		OWN						! TABLE AND SET
		%NAME(%STRING(TBLNAM),'_ISECTS') :		! IN VARIABLE
			BYTE INITIAL (NUM_ISECTS),
		%NAME(%STRING(TBLNAM),'_ISGENTBL') :		! GENERATE AND
			BLOCKVECTOR[NUM_ISECTS,ISC$C_SIZE,BYTE]	! INITIALIZE ALL
			INITIAL(ISGENTBLENT(%REMAINING));%;	! ENTRIES OF TABLE
!
!	DEFINE INTERESTING IMAGE SECTION TYPES
!
ISECTDEF(_U_R_,NORMAL,GPS$M_REL);				! USER RO DATA
ISECTDEF(_U_RW,NORMAL,GPS$M_WRT OR GPS$M_REL);			! USER R/W DATA
ISECTDEF(_U_X_,NORMAL,GPS$M_EXE OR GPS$M_REL);			! USER EXECUTE ONLY
ISECTDEF(_U_XW,NORMAL,GPS$M_WRT OR				! USER MODIFIABLE
				GPS$M_EXE OR GPS$M_REL);	! EXECUTABLE CODE
ISECTDEF(_U_R_V, NORMAL, GPS$M_REL OR GPS$M_VEC);		! RO VECTOR
ISECTDEF(_U_RWV, NORMAL, GPS$M_WRT OR GPS$M_VEC			! RW VECTOR
				OR GPS$M_REL);
ISECTDEF(_U_X_V, NORMAL, GPS$M_EXE OR GPS$M_REL			! EXE ONLY VECTOR
				OR GPS$M_VEC);
ISECTDEF(_U_XWV, NORMAL, GPS$M_WRT OR GPS$M_EXE			! MODIFIABLE
				OR GPS$M_VEC OR GPS$M_REL);	!  EXECUTABLE VECTOR
ISECTDEF(_STACK,STACK,0);					! USER STACK
ISECTDEF(S_ALONE,NORMAL,GPS$M_REL);				! STAND ALONE IMAGE
!
!	THE SET FOR SHAREABLE IMAGES
!
ISECTDEF(_S_R_,SHRFXD,_U_R__MATCH OR GPS$M_SHR);	! SHAREABLE NON-PIC IMAGE SECTIONS
ISECTDEF(_S_RW,SHRFXD,_U_RW_MATCH OR GPS$M_SHR);
ISECTDEF(_S_X_,SHRFXD,_U_X__MATCH OR GPS$M_SHR);
ISECTDEF(_S_XW,SHRFXD,_U_XW_MATCH OR GPS$M_SHR);
!
ISECTDEF(___R_,PRVFXD,_U_R__MATCH);			! PRIVATE NON-PIC SET
ISECTDEF(___RW,PRVFXD,_U_RW_MATCH);
ISECTDEF(___X_,PRVFXD,_U_X__MATCH);
ISECTDEF(___XW,PRVFXD,_U_XW_MATCH);
!
ISECTDEF(_SPR_,SHRPIC,_U_R__MATCH OR GPS$M_SHR OR GPS$M_PIC);	! SHAREABLE PIC SET
ISECTDEF(_SPRW,SHRPIC,_U_RW_MATCH OR GPS$M_SHR OR GPS$M_PIC);
ISECTDEF(_SPX_,SHRPIC,_U_X__MATCH OR GPS$M_SHR OR GPS$M_PIC);
ISECTDEF(_SPXW,SHRPIC,_U_XW_MATCH OR GPS$M_SHR OR GPS$M_PIC);
!
ISECTDEF(__PR_,PRVPIC,_U_R__MATCH OR GPS$M_PIC);		! PRIVATE PIC SET
ISECTDEF(__PRW,PRVPIC,_U_RW_MATCH OR GPS$M_PIC);
ISECTDEF(__PX_,PRVPIC,_U_X__MATCH OR GPS$M_PIC);
ISECTDEF(__PXW,PRVPIC,_U_XW_MATCH OR GPS$M_PIC);
!
ISECTDEF(_S_R_V, SHRFXD, _U_R_V_MATCH OR GPS$M_SHR);		! SHAREABLE NON-PIC VECTOR SET
ISECTDEF(_S_RWV, SHRFXD, _U_RWV_MATCH OR GPS$M_SHR);
ISECTDEF(_S_X_V, SHRFXD, _U_X_V_MATCH OR GPS$M_SHR);
ISECTDEF(_S_XWV, SHRFXD, _U_XWV_MATCH OR GPS$M_SHR);
!
ISECTDEF(___R_V, PRVFXD, _U_R_V_MATCH);				! PRIVATE NON-PIC VECTOR SET
ISECTDEF(___RWV, PRVFXD, _U_RWV_MATCH);
ISECTDEF(___X_V, PRVFXD, _U_X_V_MATCH);
ISECTDEF(___XWV, PRVFXD, _U_XWV_MATCH);
!
ISECTDEF(_SPR_V, SHRPIC, _U_R_V_MATCH OR GPS$M_SHR OR GPS$M_PIC); ! SHAREABLE PIC VECTOR SET
ISECTDEF(_SPRWV, SHRPIC, _U_RWV_MATCH OR GPS$M_SHR OR GPS$M_PIC);
ISECTDEF(_SPX_V, SHRPIC, _U_X_V_MATCH OR GPS$M_SHR OR GPS$M_PIC);
ISECTDEF(_SPXWV, SHRPIC, _U_XWV_MATCH OR GPS$M_SHR OR GPS$M_PIC);
!
ISECTDEF(__PR_V, PRVPIC, _U_R_V_MATCH OR GPS$M_PIC);		! PRIVATE PIC VECTOR SET
ISECTDEF(__PRWV, PRVPIC, _U_RWV_MATCH OR GPS$M_PIC);
ISECTDEF(__PX_V, PRVPIC, _U_X_V_MATCH OR GPS$M_PIC);
ISECTDEF(__PXWV, PRVPIC, _U_XWV_MATCH OR GPS$M_PIC);
