MODULE LNK_VMALLO (IDENT='V03-010',
			ADDRESSING_MODE(EXTERNAL=GENERAL,
					NONEXTERNAL=LONG_RELATIVE)
			) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!
!
!++
!
! MODULE: LNK_VMALLO
!
! FACILITY: LINKER
!
! ABSTRACT: ALLOCATION OF VIRTUAL MEMORY TO IMAGE.
!
! HISTORY:
!
!	VERSION: X01.00
!
!	AUTHOR: T.J. PORTER 30-MAR-77
!
! MODIFIED BY:
!
!	V03-010	BLS0163		Benn Schreiber		22-Mar-1982
!		Never put fixup section at 0
!
!	V03-009	BLS0151		Benn Schreiber		22-Feb-1982
!		Set isl$v_memalo in fixup section if allocated memory
!
!	V03-008	BLS0111		Benn Schreiber		21-Nov-1981
!		Ignore deleted psects
!
!	V03-007	BLS0095		Benn Schreiber		31-Oct-1981
!		Don't make fixup section for based shareable image
!		if no other images included
!
!	V03-006	BLS0074		Benn Schreiber		29-Aug-1981
!		Rework relocate cluster for shareable images
!
!	V03-005	BLS0050		Benn Schreiber		23-Mar-1981
!		Independent shareable images
!
!	V03-004	BLS0035		Benn Schreiber		11-Jan-1981
!		65K psects
!
!	V03-003	BLS0020		Benn Schreiber		8-Sep-1980
!		Improve handling of based shareable images so that
!		universals are put into symbol table file.
!
!	V03-002	BLS0016		Benn Schreiber,		1-Sep-1980
!		Don't allocate page 0 if creating shareable image.
!
!	V03-001	BLS0007		Benn Schreiber,		3-Jun-1980
!		Convert to MDL data structures.
!--

!
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	THIS MODULE CONTAINS THE VIRTUAL MEMORY ALLOCATION LOGIC
!	OF THE LINKER. THERE IS ONE ROUTINE:
!		LNK$VMALLO()
!	WHICH ALLOCATES MEMORY TO P-SECTIONS OF EACH OF THE 
!	FOUR POSSIBLE IMAGE SECTIONS, READ-ONLY, READ-WRITE
!	EXECUTE-ONLY AND EXECUTE-WRITE, AS WELL AS TO 
!	THE USER STACK.
!	AS EACH IMAGE-SECTION IS BUILT, THE P-SECTIONS WHOSE
!	ATTRIBUTES MATCH THOSE OF THE IMAGE SECTION ARE
!	ASSIGNED A BASE ADDRESS IN LEXICAL ORDER. AS EACH
!	IS ASSIGNED ITS BASE ADDRESS, ANY RELOCATABLE SYMBOLS OWNED
!	BY THAT P-SECTION ARE RELOCATED BY ADDITION OF 
!	THE ALIGNED P-SECTION BASE ADDRESS.
!	AFTER ALL REQUIRED IMAGE SECTIONS HAVE BEEN BUILT
!	THE HEADER SIZE IS CALCULATED AND THE BASE VIRTUAL
!	BLOCK NUMBER IN EACH ISD (ON SINGLY LINKED LIST)
!	IS RELOCATED BY THE NUMBER OF HEADER BLOCKS.
!
!--
!
LIBRARY
	'LIBL32';				! SYSTEM USER DATA STRUCTURES
REQUIRE
	'PREFIX';				! GENERAL DATA, MACROS ETC.
LIBRARY
	'DATBAS';				! DATA BASE DESCRIPTION
REQUIRE
	'ISGENC';				! GENERATION CONTROL TABLES
!
FORWARD ROUTINE
	ALLOCLUSTER : NOVALUE,					! GATHER P-SECTIONS INTO I-SECTIONS FOR CURRENT CLUSTER
	COMPARE_BASES,						! ACTION ROUTINE FOR LIB$INSERT_TREE
	ALLOC_NODE,						! ACTION ROUTINE FOR LIB$INSERT_TREE
	RELOCLUSTER : NOVALUE,					! RELOCATE CONTENTS OF CURRENT CLUSTER
	LNK$CREFIXISD,						! BUILD FIXUP SECTION ISD
	LNK$CLUVIRMEM,						! ALLOCATE VIRTUAL MEMORY FOR A CLUSTER
	LNK$SETLASTCLU,						! TEST/SET LAST CLUSTER
	STACK_ISECTBLD : NOVALUE,				! BUILD USER STACK IMAGE SECTION
	NORMAL_ISECTBLD : NOVALUE,				!   "   NORMAL USER ISECT
	BUILDISD : NOVALUE;					! CREATE ISD
!
EXTERNAL
	LNK$GL_SHRSYMS,						! NUMBER OF SYMBOLS IN OTHER SHAREABLE IMAGES
	LNK$GL_SHRIMGS,						! NUMBER OF SHAREABLE IMAGES REFERENCED
	LNK$GL_SHRCLSTRS,					! NUMBER OF PIC/NON-PIC SHR IMAGES IN LINK
	LNK$AL_VALCTLTB,					! ADDRESS OF CREF BY VALUE CONTROL TABLE
	LNK$AL_SYTBLFMT,					! CREF CONTROL TABLE
	LNK$GL_TFRPSC : REF BLOCK[,BYTE],			! POINTER TO P-SECT CONTAING USER
	LNK$GL_TFRADR,						! TRANSFER ADDRESS
	LNK$GL_DBGTFPS : REF BLOCK[,BYTE],			! POINTER TO PSECTION CONTAINING DEBUG
	LNK$GL_DBGTFR,						! TRANSFER ADDRESS
	LNK$GL_CTLMSK : BLOCK[,BYTE],				! LINK CONTROL MASK
	LNK$GL_MINVA,						! LOWEST VIRTUAL ADDRESS ALLOCATED
	LNK$GL_CLULST : VECTOR[2],				! CLUSTER DESCRIPTOR LISTHEAD
	LNK$GL_LASTCLU : REF BLOCK[,BYTE],			! POINTER TO LAST CLUSTER DESCRIPTOR ALLOCATED
	LNK$GL_CURCLU : REF BLOCK[,BYTE],			! CURRENT CLUSTER DESCRIPTOR POINTER
	LNK$GL_DEFCLU : BLOCK[,BYTE],				! DEFAULT CLUSTER
	LNK$GL_FVMLST : REF BLOCK[,BYTE];			! FREE V.M. LIST ENTRY
!
EXTERNAL ROUTINE
	CRF$INSRTKEY,						! INSERT KEY
	CRF$INSRTREF,						! INSERT REF TO KEY IN CREF TABLE
	LIB$INSERT_TREE,					! INSERT INTO BALANCED BINARY TREE
	LNK$ALLOBLK : NOVALUE,					! DYNAMIC MEMORY ALLOCATOR
	LNK$ALLOVIRMEM,						! ALLOCATE SPECIFICE REGION OF VIRTUAL MEMORY
	LNK$FINDVIRMEM,						! FIND A LARGE ENOUGH REGION OF   "      "
	LNK$FNDPSCMSK;						! FIND P-SECTIONS BY MASK
!
EXTERNAL LITERAL
	LIN$_BASESYM,						! BAD BASE ADDRESS SYMBOL
	LIN$_CLUBELBAS,						! CLUSTER= BASED CLUSTER BELOW BASE= BASE
	LIN$_CONFMEM,						! CONFLICTING MEMORY REQUIREMENTS
	LIN$_INSVIRMEM,						! INSUFFICIENT VIRTUAL MEMORY
	LIN$_NOIMGFIL,						! NO IMAGE FILE CREATED
	LIN$_STKOVFLO;						! STACK OVERFLOW
!
GLOBAL
	LNK$GL_LOWCLU : REF BLOCK[,BYTE],			! ADDR OF CLUSTER DESCRIPTOR OF LOWEST VA CLUSTER (NO SHR IMGS)
	LNK$GL_HIGHCLU : REF BLOCK[,BYTE],			! ADDR OF CLUSTER DESCRIPTOR OF HIGHEST VA CLUSTER (NO SHR IMGS)
	LNK$GL_LSTCLSTR : REF BLOCK[,BYTE],			! ADDR OF CLUSTER DESCRIPTOR OF LAST CLUSTER (INCLUDES SHR IMGS)
	LNK$GL_FIXISD : REF BLOCK[,BYTE],			! ADDR OF FIXUP ISD
	LNK$GL_1STGADR,						! VA OF FIRST SPECIAL G^ FIXUP
	LNK$GL_LASTGADR,					! VA OF LAST ""
	LNK$GW_SHRISCTS : WORD,					! NUMBER OF ISECTS FROM PIC SHAREABLE IMAGES
	LNK$GL_MAPLST,						! LIST OF P-SECTIONS FOR MAP OUTPUT (IN V.A. ORDER)
	LNK$GW_STACK : WORD,					! STACK SIZE (PAGES)
	LNK$GW_NISECTS : WORD;					! NUMBER OF IMAGE SECTIONS
!
GLOBAL LITERAL
	DEF$C_STACK = 20,					! DEFAULT STACK SIZE (PAGES)
	DEF$C_BASE = %X'200';					! DEFAULT BASE ADDRESS
!
!	GENERATE IMAGE SECTION GENERATION CONTROL TABLES
!
	PSECT OWN = $PLIT$ (NOPIC,CONCATENATE,LOCAL,NOSHARE,NOEXECUTE,NOWRITE);

ISGENTBL(EXE,							! EXECUTABLE IMAGE
	_U_R_,  RDWRTEXERELVEC,					! READ ONLY PART
	_U_RW,  RDWRTEXERELVEC,					! READ WRITE DATA
	_U_X_,  RDWRTEXERELVEC,					! EXECUTE ONLY
	_U_XW,  RDWRTEXERELVEC,					! OVERWRITTEN CODE
	_U_R_V, RDWRTEXERELVEC,					! READ ONLY VECTOR
	_U_RWV, RDWRTEXERELVEC,					! READ WRITE VECTOR
	_U_X_V, RDWRTEXERELVEC,					! EXECUTE ONLY VECTOR
	_U_XWV, RDWRTEXERELVEC,					! OVERWRITTEN CODE VECTOR
	_STACK,0);						! STACK -- MUST BE LAST
ISGENTBL(SYS,							! SYSTEM IMAGE
	S_ALONE,GPS$M_REL);					! IS A SINGLE SECTION
ISGENTBL(SHR,							! SHAREABLE IMAGE
	_S_R_,  SHRPICVEC,
	_S_RW,  SHRPICVEC,
	_S_X_,  SHRPICVEC,
	_S_XW,  SHRPICVEC,
	___R_,  SHRPICVEC,
	___RW,  SHRPICVEC,
	___X_,  SHRPICVEC,
	___XW,  SHRPICVEC,
	_SPR_,  SHRPICVEC,
	_SPRW,  SHRPICVEC,
	_SPX_,  SHRPICVEC,
	_SPXW,  SHRPICVEC,
	__PR_,  SHRPICVEC,
	__PRW,  SHRPICVEC,
	__PX_,  SHRPICVEC,
	__PXW,  SHRPICVEC,
	_S_R_V, SHRPICVEC,					! VECTOR IMAGE SECTIONS
	_S_RWV, SHRPICVEC,
	_S_X_V, SHRPICVEC,
	_S_XWV, SHRPICVEC,
	___R_V, SHRPICVEC,
	___RWV, SHRPICVEC,
	___X_V, SHRPICVEC,
	___XWV, SHRPICVEC,
	_SPR_V, SHRPICVEC,
	_SPRWV, SHRPICVEC,
	_SPX_V, SHRPICVEC,
	_SPXWV, SHRPICVEC,
	__PR_V, SHRPICVEC,
	__PRWV, SHRPICVEC,
	__PX_V, SHRPICVEC,
	__PXWV, SHRPICVEC,
	__PXWV, SHRPICVEC,
	_STACK,0);						! MUST BE THE LAST

	PSECT OWN = $OWN$ (NOPIC,CONCATENATE,LOCAL,NOSHARE,NOEXECUTE,WRITE);

OWN
	DEFCLUBASED,						! REMEMBER IF DEFAULT CLUSTER IS BASED
	CURPSECT : REF BLOCK[,BYTE],				! POINTER TO CURRENT PSECT DESCRIPTOR
	CURRENT_BASE,						! CURRENT BASE IN ISECT
	ISECT_BASE,						! BASE OF THE IMAGE SECTION
	CNTRL_REG_ADDR : INITIAL(SYSTEM_SPACE),			! CONTROL REGION ADDRESS (FOR NEXT ISECT ALLOCATED DOWNWARD)
	ISECT : BYTE,						! I-SECT CONTROL TABLE INDEX
	NUMISECTS : BYTE,					! POTENTIAL NUMBER OF ISECTS IN THIS CLUSTER OF IMAGE
	ISECTGENTBL : REF BLOCKVECTOR[,ISC$C_SIZE,BYTE],	! ISECT GENERATION TABLE FOR CURRENT CLUSTER
	PREVISECT : REF BLOCK[,BYTE],				! POINTER TO PREVIOUS ISECT DESCRIPTOR BLOCK
	ISCTDESC : REF BLOCK[,BYTE];				! I-SECT DESCRIPTOR BLOCK

GLOBAL ROUTINE LNK$VMALLO : NOVALUE =
BEGIN
!++
!	THIS ROUTINE IS THE DRIVER FOR MEMORY ALLOCATION. 
!
!	TWO PASES OF THE CLUSTER LIST ARE MADE. THE FIRST PASS ALLOCATES
!	SPECIFIC ADDRESS SPACE TO CLUSTERS WHICH HAVE BEEN GIVEN A
!	BASE ADDRESS . THE SECOND PASS
!	ALLOCATES MEMORY TO POSITION INDEPENDENT SHAREABLE IMAGES AND
!	OTHER USER CLUSTERS NOT EXPLICITLY POSITIONED. THIS IS DONE IN
!	CLUSTER LIST ORDER AND THE FIRST SPACE LARGE ENOUGH FROM THE BASE
!	OF THE REGION IS ALLOCATED.
!--
LOCAL	BASEADDRSYM : REF BLOCK[,BYTE],				! THE SYMBOL TABLE ENTRY FOR THE SYMBOL
	BASESYMSNB : REF BLOCK[,BYTE];
!
! SELECT THE CORRECT ISECT GENERATION CONTROL TABLE
! 
IF .LNK$GL_CTLMSK[LNK$V_EXE]					! IF NORMAL EXE IMAGE POINT TO
THEN BEGIN
	ISECTGENTBL = EXE_ISGENTBL;				! ITS CONTROL TABLE AND SET 
	NUMISECTS = .EXE_ISECTS;				! NUMBER OF POTENTIAL ISECTS PER CLUSTER
     END
ELSE IF .LNK$GL_CTLMSK[LNK$V_SYS]				! POINT TO SYSTEM IMAGE CONTROL TABLE
	THEN BEGIN
		ISECTGENTBL = SYS_ISGENTBL;			! AND THEN
		NUMISECTS = .SYS_ISECTS;			! POTENTIAL NUMBER OF ISECTS
	     END
	ELSE BEGIN						! IT MUST BE A SHAREABLE IMAGE
		ISECTGENTBL = SHR_ISGENTBL;			! SO SET THE CONTROL TABLE
		NUMISECTS = .SHR_ISECTS;			! AND NUMBER OF ISECTS PER CLUSTER
	     END;

DEFCLUBASED = .LNK$GL_DEFCLU[CLU$V_BASED];			! REMEMBER IF DEFAULT CLUSTER BASED
LNK$GL_HIGHCLU = 0;						! INITIALLY POINTS TO NO CLUSTER
LNK$GL_LOWCLU = 0;						!
LNK$GL_CURCLU = LNK$GL_CLULST[0];				! START AT TOP OF CLUSTER LIST
WHILE (LNK$GL_CURCLU = .LNK$GL_CURCLU[CLU$L_NXTCLU]) NEQ 0	! GET NEXT CLUSTER DESCRIPTOR
DO IF NOT .LNK$GL_CURCLU[CLU$V_SHRIMG]				! AND IF A USER CLUSTER WITH A
      AND .LNK$GL_CURCLU[CLU$V_BASED]				! BASE ADDRESS SPECIFIED
      THEN BEGIN						! ITS TIME HAS COME
	LNK$GL_CTLMSK[LNK$V_PICIMG] = FALSE;			! THE IMAGE IS NON-PIC
	BASEADDRSYM = .LNK$GL_CURCLU[CLU$L_BASE];		! CELL CONTAINS POINTER TO THE SYMBOL TABLE ENTRY
	IF .LNK$GL_CURCLU[CLU$V_SYMBAS]				! IF THE ADDRESS IS SYMBOLICALLY SPECIFIED
	    AND .BASEADDRSYM NEQ 0				!  AND IT WAS DEFINED
	THEN BEGIN						! FIRST FIGURE OUT IF VALID
		BASESYMSNB = .BASEADDRSYM - .BASEADDRSYM[SYM$B_NAMLNG]
						 - SNB$C_FXDLEN; ! POINT TO NAME BLOCK
		IF (.BASEADDRSYM[SYM$W_FLAGS] AND (GSY$M_DEF	! FIRST CHECK ABSOLUTE DEFINITION
			OR GSY$M_REL)) NEQ GSY$M_DEF
		THEN BEGIN
			SIGNAL(LIN$_BASESYM,1,			! AND ISSUE ERROR IF NOT
				BASESYMSNB[SNB$B_NAMLNG]);
			IF .LNK$GL_CTLMSK[LNK$V_SYS]		! IF A SYSTEM IMAGE SET THE
			THEN LNK$GL_CURCLU[CLU$L_BASE] = SYSTEM_SPACE		! BASE ADDRESS FOR IT
			ELSE LNK$GL_CURCLU[CLU$L_BASE] = 0;			! OTHERWISE DEFAULT TO ZERO
		     END
		ELSE BEGIN
		    IF NOT (.LNK$GL_CTLMSK[LNK$V_SYS] AND NOT	! OTHERWISE UNLESS SYSTEM IMAGE WITHOUT A HEADER
				.LNK$GL_CTLMSK[LNK$V_SYSHEADR])
			THEN LNK$GL_CURCLU[CLU$L_BASE] = .BASEADDRSYM[SYM$L_VALUE] + ! THEN SET TO NEXT PAGE BEYOND VALUE
				511 AND NOT 511
			ELSE LNK$GL_CURCLU[CLU$L_BASE] = .BASEADDRSYM[SYM$L_VALUE]; ! IF NO /HEADER, THEN DON'T ROUND IT
		    END;
		IF .LNK$GL_CTLMSK[LNK$V_SYS]			! IF A SYSTEM IMAGE SYMBOLICALLY
		THEN LNK$GL_FVMLST[FVM$L_ADDRESS] = .LNK$GL_CURCLU[CLU$L_BASE];	! BASED THEN SET V.M. BASE
	     END;
	IF .DEFCLUBASED						! IF DEFAULT CLUSTER IS BASED
	    AND .LNK$GL_CURCLU[CLU$L_BASE] LSSU .LNK$GL_DEFCLU[CLU$L_BASE]
	    THEN SIGNAL(LIN$_CLUBELBAS,3,.LNK$GL_CURCLU[CLU$L_BASE],
			LNK$GL_CURCLU[CLU$B_NAMLNG],
			.LNK$GL_DEFCLU[CLU$L_BASE]);
	ALLOCLUSTER();						! GO ALLOCATE THE CLUSTER
	IF NOT LNK$ALLOVIRMEM(.LNK$GL_CURCLU[CLU$L_BASE],	! CONTENTS TO VIRTUAL MEMORY
		.LNK$GL_CURCLU[CLU$L_PAGES])			! THEN ATTEMPT TO ALLOCATE THAT REGION
	THEN BEGIN
		LNK$GL_CTLMSK[LNK$V_IMAGE] = FALSE;		! TURN OFF IMAGE PRODUCTION
		SIGNAL(LIN$_CONFMEM,3,				! AND ISSUE ERROR ON FAILURE
			.LNK$GL_CURCLU[CLU$L_BASE],.LNK$GL_CURCLU[CLU$L_PAGES],
			LNK$GL_CURCLU[CLU$B_NAMLNG],LIN$_NOIMGFIL);
	     END;
	LNK$SETLASTCLU(.LNK$GL_CURCLU);				! SEE IF LAST CLUSTER
	RELOCLUSTER();						! 
	END
	ELSE IF .LNK$GL_CURCLU[CLU$V_SHRIMG]			! IF THIS IS A BASED SHAREABLE IMAGE
	    AND .LNK$GL_CURCLU[CLU$V_BASED]
	THEN LNK$CLUVIRMEM(.LNK$GL_CURCLU);			! ALLOCATE VIRTUAL MEMORY FOR CLUSTER
!
! ALL EXPLICITLY BASED VIRTUAL MEMORY HAS NOW BEEN ALLOCATED. NOW MAKE
! ANOTHER PASS DOWN THE CLUSTER LIST, ALLOCATING MEMORY TO THE USER
! DEFINED CLUSTERS WHICH HAVE NO EXPLICIT ADDRESS SPECIFICATION.
!
BASEADDRSYM = .LNK$GL_MINVA;					! SAVE MINIMUM ADDRESS
IF NOT .LNK$GL_CTLMSK[LNK$V_SHR]				! IF NOT CREATING SHAREABLE IMAGE
    THEN IF LNK$ALLOVIRMEM(0,1)					!  FORCE ALLOCATE FIRST PAGE IF STILL FREE
	THEN LNK$GL_MINVA = .BASEADDRSYM;			! RESTORE MINIMUM ADDRESS IF SUCCEEDED
LNK$GL_CURCLU = LNK$GL_CLULST[0];				! START AT TOP OF LIST

WHILE (LNK$GL_CURCLU = .LNK$GL_CURCLU[CLU$L_NXTCLU]) NEQ 0		! GET NEXT CLUSTER DESCRIPTOR
DO BEGIN
	IF NOT .LNK$GL_CURCLU[CLU$V_BASED]				! IF BASE ADDRESS NOT YET ESTABLISHED
	AND NOT .LNK$GL_CURCLU[CLU$V_SHRIMG]				! AND NOT FROM A SHAREABLE IMAGE
	THEN BEGIN
		ALLOCLUSTER();						! GATHER P-SECTIONS
		LNK$CLUVIRMEM(.LNK$GL_CURCLU);				! ALLOCATE VIRT. MEMORY FOR CLUSTER
	     END;
   END;
!
! IF THIS IMAGE IS A BASED IMAGE, THEN ALLOCATE THE FIXUP SECTION
! NOW, IF THERE ARE ANY SHAREABLE IMAGES LINKED IN ALSO, SO THAT WHEN THE
! VIRTUAL MEMORY IS ALLOCATED FOR THESE SHAREABLE IMAGES, THEY DON'T OVERMAP
! THE FIXUP SECTION.  WE CAN'T ALLOCATE VIRTUAL MEMORY FOR THE FIXUP SECTION
! YET, SINCE WE DON'T KNOW THE EXTENT OF IT'S SIZE (DUE TO NOT KNOWING THE
! NUMBER OF .ADDRESS FIXUPS YET TO BE FOUND), WE CAN ONLY SPECIFY IT'S
! BASE, AND THEN COMPUTE THE SIZE AT LNK$FLUSHIMG AFTER PASS 2.
!
! WE CAN DO THIS IF THE IMAGE IS BASED, BECAUSE THE .ADDRESS FIXUPS ARE NOT
! DONE THEN.
!
IF NOT .LNK$GL_CTLMSK[LNK$V_SYS]
    AND NOT .LNK$GL_CTLMSK[LNK$V_SHR]
    AND .DEFCLUBASED
THEN BEGIN
    LOCAL
	FIXISDHDR : REF BLOCK[,BYTE];

    LNK$CREFIXISD();
    FIXISDHDR = LNK$GL_FIXISD[ISL$T_HDRISD];
    IF NOT LNK$ALLOVIRMEM(.FIXISDHDR[ISD$V_VPN]^9,.FIXISDHDR[ISD$W_PAGCNT])
    THEN BEGIN
	SIGNAL(LIN$_CONFMEM,3,
			.FIXISDHDR[ISD$V_VPN]^9,.FIXISDHDR[ISD$W_PAGCNT],
			CSTRING('FIXUP SECTION'),LIN$_NOIMGFIL);
	LNK$GL_CTLMSK[LNK$V_IMAGE] = FALSE;
	END;
    LNK$GL_FIXISD[ISL$V_MEMALO] = TRUE;			! FLAG MEMORY ALLOCATED
    END;
				
!
! IF IMAGE IS BASED, MAKE ONE MORE PASS DOWN THE LIST AND ALLOCATE VM
! FOR PIC SHAREABLE IMAGES
!
LNK$GL_CURCLU = LNK$GL_CLULST[0];				! START AT TOP OF LIST

IF .DEFCLUBASED							! IF DEFAULT CLUSTER IS BASED (BASE=)
    AND NOT .LNK$GL_CTLMSK[LNK$V_SYS]
THEN WHILE (LNK$GL_CURCLU = .LNK$GL_CURCLU[CLU$L_NXTCLU]) NEQ 0		! GET NEXT CLUSTER DESCRIPTOR
DO BEGIN
    IF NOT .LNK$GL_CURCLU[CLU$V_BASED]					! IF BASE ADDRESS NOT YET ESTABLISHED
	AND .LNK$GL_CURCLU[CLU$V_SHRIMG]				! AND A SHAREABLE IMAGE
    THEN BEGIN
	LNK$CLUVIRMEM(.LNK$GL_CURCLU);					! ALLOCATE VIRT. MEMORY FOR CLUSTER
	END;
    END;

!
! IF LNK$GL_HIGHCLU IS 0, THEN THERE WERE PROBABLY NO OBJECT INPUT FILES,
! ONLY SHAREABLE IMAGES.  MAKE THE DEFAULT CLUSTER THE HIGHEST CLUSTER.
!
IF .LNK$GL_HIGHCLU EQL 0
THEN BEGIN
    IF .LNK$GL_DEFCLU[CLU$L_FSTFDB] EQL 0				! IF IT HAS NO FILES IN IT
    THEN BEGIN
	LNK$GL_LASTCLU[CLU$L_NXTCLU] = LNK$GL_DEFCLU;			! LINK IT ON THE END OF THE LIST
	IF (LNK$GL_DEFCLU[CLU$L_PREVCLU] = .LNK$GL_LASTCLU) EQL 0
	    THEN LNK$GL_DEFCLU[CLU$L_PREVCLU] = LNK$GL_CLULST;
	LNK$GL_LASTCLU = LNK$GL_DEFCLU;
	END;
    LNK$ALLOVIRMEM(0,1);						! ALLOCATE FIRST PAGE
    LNK$GL_HIGHCLU = LNK$GL_DEFCLU;					! MAKE DEFAULT CLUSTER THE HIGHEST CLUSTER
    LNK$GL_LOWCLU = LNK$GL_DEFCLU;
    END;
!
! NOW CREATE THE FIXUP SECTION WITH THE ISD AS THE LAST ISECT IN THE IMAGE.
! THEN, GO THROUGH ALL THE CLUSTERS AND DEFINE THE SYMBOLS IN THE FIXUP SECTION
! AS NEEDED.
!
IF (.LNK$GL_FIXISD EQL 0)
    AND ((NOT .LNK$GL_CTLMSK[LNK$V_SYS]
	AND (.LNK$GL_SHRCLSTRS NEQ 0)					! CREATE SECTION ONLY IF NEEDED
	AND NOT .DEFCLUBASED)
    OR .LNK$GL_CTLMSK[LNK$V_EXE])					! UNLESS EXECUTABLE, THEN ALWAYS CREATE IT
    THEN LNK$CREFIXISD();

IF .LNK$GL_TFRPSC NEQ 0							! IF A TRANSFER ADDRESS EXISTS
    THEN LNK$GL_TFRADR = .LNK$GL_TFRADR + .LNK$GL_TFRPSC[PSC$L_BASE];	! THEN RELOCATE IT
IF .LNK$GL_DBGTFPS NEQ 0 AND .LNK$GL_DBGTFPS NEQ 1			! IF A DEBUG TRANSFER ADDRESS (AND NOT SYS$IMGSTA)
    THEN LNK$GL_DBGTFR = .LNK$GL_DBGTFR + .LNK$GL_DBGTFPS[PSC$L_BASE];	! RELOCATE IT ALSO
RETURN;									! MEMORY ALLOCATION/RELOCATION COMPLETE
END;						! OF ROUTINE.

ROUTINE ALLOCLUSTER : NOVALUE =
BEGIN
!
!	THIS ROUTINE INDEXES DOWN THE I-SECTION GENERATION CONTROL
!	TABLE, CALLING THE I-SECT SPECIFIC ROUTINE.
!	FIRST HOWEVER ESTABLISH THE BASE ADDRESS IF IT WAS SYMBOLIC
!
ISECT_BASE = .LNK$GL_CURCLU[CLU$L_BASE];			! START AT BASE DETERMINED BY COMMAND
ISCTDESC = LNK$GL_CURCLU[CLU$L_FSTISD];				! INITIALIZE TO LISTHEAD FOR ISECTIONS
PREVISECT = LNK$GL_CURCLU[CLU$L_FSTISD];
!
INCR ILOOP FROM 1 TO .NUMISECTS DO				! INCREMENT THROUGH GENERATION
BEGIN								! CONTROL TABLE
	ISECT = .ILOOP;						! REMEMBER INDEX
	IF NOT (.LNK$GL_CTLMSK[LNK$V_SYS]			! UNLESS A SYSTEM IMAGE WITHOUT A HEADER
			AND NOT .LNK$GL_CTLMSK[LNK$V_SYSHEADR])
	    THEN ISECT_BASE = (.ISECT_BASE+511) AND NOT 511;	! ROUND UP NEXT PAGE
	IF .ISECTGENTBL[.ISECT-1,ISC$B_CODE] EQL STACK_CODE	! CALL THE BUILD ROUTINE BASED ON
	THEN STACK_ISECTBLD()					! THE KIND OF ISECT .. STACK
	ELSE NORMAL_ISECTBLD();					! AND ALL OTHERS
END;
IF .ISCTDESC[ISL$L_NXTISD] EQL -1				! IF AN ALLOCATED ISD IS UNUSED
THEN BEGIN
	ISCTDESC = .LNK$GL_CURCLU[CLU$L_LSTISD];		! THEN DISCONNECT IT FROM LIST
	ISCTDESC[ISL$L_NXTISD] = 0;
     END;
RETURN;
END;

ROUTINE COMPARE_BASES (PSECTBASE, CURRENTNODE, PSECTDESC) =
BEGIN
!
! COMPARE PSECT BASE WITH BASE OF CURRENT NODE
!
MAP
    CURRENTNODE : REF BLOCK[,BYTE],
    PSECTDESC : REF BLOCK[,BYTE];

LOCAL
    PDESC : REF BLOCK[,BYTE];

PDESC = .CURRENTNODE[NODE$L_PTR];			! GET POINTER TO PSECT DESCRIPTOR
IF .PSECTBASE LSSU .PDESC[PSC$L_BASE]
    THEN RETURN -1
    ELSE IF .PSECTBASE EQL .PDESC[PSC$L_BASE]
	THEN BEGIN
	    IF .PSECTDESC[PSC$L_LENGTH]			! BASES THE SAME...DOES CURRENT NODE EXTEND FARTHER?
			LSSU .PDESC[PSC$L_LENGTH]
		THEN RETURN -1
		ELSE RETURN CH$COMPARE(.PSECTDESC[PSC$B_NAMLNG],! IF THEY ARE EQUAL COMPARE THE NAMES
				PSECTDESC[PSC$T_NAME],
				.PDESC[PSC$B_NAMLNG],
				PDESC[PSC$T_NAME]);
	    END
	ELSE RETURN 1
END;
ROUTINE ALLOC_NODE (KEYVALUE, RETADR, PSECTDESC) =
BEGIN
!
! ALLOCATE A NODE AND POINT TO CURRENT PSECT DESCRIPTOR
!
LOCAL
    BLOCKADDR : REF BLOCK[,BYTE];

LNK$ALLOBLK(NODE$C_LONG,BLOCKADDR);
BLOCKADDR[NODE$L_PTR] = .PSECTDESC;
.RETADR = .BLOCKADDR;
RETURN TRUE
END;

ROUTINE RELOCLUSTER : NOVALUE =
BEGIN
!
!	THIS ROUTINE RELOCATES THE CONTENTS OF THE CURRENT CLUSTER. THIS MEANS
!	GOING DOWN EACH OF THE I-SECTION AND P-SECTION LISTS AND ADDING
!	THE CLUSTER BASE TO THEIR BASES. IN ADDITION, FOR EACH P-SECTION,
!	THE LIST OF SYMBOLS IS SCANNED AND THOSE THAT ARE RELOCATABLE ARE
!	ALSO RELOCATED BY THE CLUSTER BASE ADDRESS. IN THE PROCESS OF DOING THIS
!	EACH P-SECTION DESCRIPTOR IS REMOVE FROM THE CLUSTER LIST AND PUT
!	ON THE MAPPING LIST IN VIRTUAL ADDRESS ORDER FOR LATER MAP
!	OUTPUT.
!
!		IF THE CURRENT CLUSTER HAS ALREADY BEEN BASED, HOWEVER, THE
!	RELOCATION IS NOT DONE - THE P-SECTIONS ARE MERELY MOVED TO THE
!	MAPPING LIST.
!
ROUTINE RELOCPSECTS (PSECTDESC) =
BEGIN
!
! THIS LOCAL ROUTINE RELOCATES THE PSECTS ON THE SPECIFIED PSECT
! LIST AND TRANSFERS THEM TO THE MAPPING LIST.
!
MAP
	PSECTDESC : REF BLOCK[,BYTE];

LOCAL
	BLOCKADDR,
	SYMSNB : REF BLOCK[,BYTE],
	SYMBOL : REF BLOCK[,BYTE];

IF .PSECTDESC EQL 0
    THEN RETURN TRUE;
IF .PSECTDESC[PSC$L_LEFT] NEQ 0
    THEN RELOCPSECTS(.PSECTDESC[PSC$L_LEFT]);
IF NOT .PSECTDESC[PSC$V_DELETED]					! IF PSECT IS NOT DELETED
    AND (.PSECTDESC[PSC$L_ISECT] NEQ 0					! IF P-SECTION ALLOCATED TO MEMORY
   OR (.PSECTDESC[PSC$W_FLAGS] AND (GPS$M_LIB OR GPS$M_GBL)) NEQ 0	! OR IS GLOBAL OR IN SHAREABLE
   OR .LNK$GL_CTLMSK[LNK$V_SHR]						! OR A SHAREABLE OR
   OR .LNK$GL_CTLMSK[LNK$V_DBG]						! DEBUGGABLE IMAGE
   OR .LNK$GL_CTLMSK[LNK$V_SYMTBL])					! OR CREATING A SYMBOL TABLE
   THEN BEGIN
	IF .PSECTDESC[PSC$V_REL]					! AND THIS P-SECTION IS RELOCATABLE
	    AND NOT .LNK$GL_CURCLU[CLU$V_BASED]				! AND CLUSTER IS NOT BASED
	    OR (.LNK$GL_CURCLU[CLU$V_SHRIMG] AND .LNK$GL_CURCLU[CLU$V_PIC])
	    THEN PSECTDESC[PSC$L_BASE] = .PSECTDESC[PSC$L_BASE] +
					.LNK$GL_CURCLU[CLU$L_BASE];	! ADD CLUSTER BASE TO ITS BASE
	SYMBOL = .PSECTDESC[PSC$L_SYMLST];				! GO DOWN LIST OF
	WHILE .SYMBOL NEQ 0						! SYMBOLS OWNED BY
	DO BEGIN							! P-SECTION AND ADD ITS
		IF .SYMBOL[SYM$V_REL]					! BASE TO ANY THAT
!		    OR (.LNK$GL_CURCLU[CLU$V_SHRIMG] AND .LNK$GL_CURCLU[CLU$V_PIC])
		THEN BEGIN						! ARE RELOCATABLE
			BIND
			    SYMSNB = .SYMBOL - .SYMBOL[SYM$B_NAMLNG]	! POINT TO NAME BLOCK
						- SNB$C_FXDLEN : BLOCK[,BYTE];
			IF .LNK$GL_CURCLU[CLU$V_SHRIMG]			! IF THIS IS SHAREABLE IMAGE
			THEN SYMBOL[SYM$V_REL] = FALSE;			!  IT'S NOT RELOCATABLE ANYMORE
			IF .SYMBOL[SYM$V_GREF]				! IF SYMBOL WAS IN PIC, NON-BASED IMAGE
			    THEN SYMBOL[SYM$L_VALUE] = .SYMBOL[SYM$L_OFFSET]
							+ .LNK$GL_CURCLU[CLU$L_BASE]
			    ELSE SYMBOL[SYM$L_VALUE] = .SYMBOL[SYM$L_VALUE]
							+ .PSECTDESC[PSC$L_BASE];
			IF .LNK$GL_CTLMSK[LNK$V_LONG]			! IF A LONG FORM MAP IS REQUIRED
			    AND .SYMBOL[SYM$V_CROSREF]			! AND SYMBOL HAS BEEN CROSS REFERENCED IN PASS 1
			    AND NOT .SYMBOL[SYM$V_SUPRES]		! AND THE SYMBOL IS NOT  SUPPRESSED
			    AND NOT .SYMBOL[SYM$V_LCLSYM]		! AND IT'S NOT A LOCAL SYMBOL
			THEN BEGIN
			    CRF$INSRTKEY(LNK$AL_SYTBLFMT,SYMSNB[SNB$B_NAMLNG],
					SYMBOL[SYM$L_VALUE],
					.SYMBOL[SYM$W_FLAGS]);
			    CRF$INSRTREF(LNK$AL_VALCTLTB,		! THEN INSERT THIS SYMBOL
				SYMBOL[SYM$L_VALUE],SYMSNB[SNB$B_NAMLNG], ! AS A REFERENCE TO ITS
				.SYMBOL[SYM$W_FLAGS],0);		! OWN VALUE RELOCATED
			    END;
		     END;
		SYMBOL = .SYMBOL[SYM$L_PSCLST];				! MOVE ON TO NEXT
	END;
	LIB$INSERT_TREE(LNK$GL_MAPLST,.PSECTDESC[PSC$L_BASE],%REF(1),	!  INSERT NODE INTO VA 
			COMPARE_BASES, ALLOC_NODE, BLOCKADDR,.PSECTDESC);! ORDERED TREE (PSECT MAPPING LIST)
									! (IF ABS, SUPRESSED IN MAP, BUT NEEDED
									! IN LIST FOR SYMBOL TABLE FILE OUTPUT
   END;

IF .PSECTDESC[PSC$L_RIGHT] NEQ 0					! PROCESS RIGHT SUBTREE IF PRESENT
    THEN RELOCPSECTS(.PSECTDESC[PSC$L_RIGHT]);

RETURN TRUE
END;									! OF RELOCPSECTS
!
! MAIN BODY OF RELOCLUSTER
!

IF NOT .LNK$GL_CURCLU[CLU$V_SHRIMG]
THEN BEGIN
    IF (.LNK$GL_HIGHCLU EQL 0					! IF NO HIGHEST CLUSTER
	OR .LNK$GL_CURCLU[CLU$L_BASE] GTRU .LNK$GL_HIGHCLU[CLU$L_BASE])! OR THIS IS NEW HIGHEST
	THEN LNK$GL_HIGHCLU = .LNK$GL_CURCLU;			! THEN MAKE IT NEW HIGHEST CLUSTER
    IF (.LNK$GL_LOWCLU EQL 0					! IF NO LOWEST CLUSTER
	OR .LNK$GL_CURCLU[CLU$L_BASE] LSSU .LNK$GL_LOWCLU[CLU$L_BASE]) ! OR THIS ONE IS LOWER
	THEN LNK$GL_LOWCLU = .LNK$GL_CURCLU;
    END;
!
! RELOCATE THE PSECTS IN THIS CLUSTER
!
RELOCPSECTS(.LNK$GL_CURCLU[CLU$L_LPSLST]);

RETURN TRUE
END;									! OF RELOCLUSTER

GLOBAL ROUTINE LNK$CREFIXISD =
BEGIN
!
! THIS ROUTINE CREATES THE FIXUP IMAGE SECTION AT THE END OF THE HIGHEST
! USER CLUSTER
!

    LOCAL
	LASTISD : REF BLOCK[,BYTE],
	LASTHDRISD : REF BLOCK[,BYTE],
	STACKISD : REF BLOCK[,BYTE],
	SYMBOLBLOCK : REF BLOCK[,BYTE],
	SYMBOLSNB : REF BLOCK[,BYTE],
	HDRISD : REF BLOCK[,BYTE],
	FIXADR,
	SAVECURCLU,
	TEMPISD : BLOCK[ISL$C_SIZE+ISD$C_LENGLBL,BYTE];

    LASTISD = STACKISD = .LNK$GL_HIGHCLU[CLU$L_LSTISD];			! POINT TO LAST ISD IN CLUSTER
    LASTHDRISD = LASTISD[ISL$T_HDRISD];					! POINT TO PART OF LAST ISD BOUND FOR HEADER
    IF .LASTISD EQL LNK$GL_HIGHCLU[CLU$L_FSTISD]			! IF CLUSTER HAS NO IMAGE SECTIONS
    THEN BEGIN
	CH$FILL(0,ISL$C_SIZE+ISD$C_LENGLBL,TEMPISD);			! ZERO TEMPORARY ISECT
	LASTHDRISD = TEMPISD[ISL$T_HDRISD];				! USE IT FOR THE PAGE COUNT
	LASTHDRISD[ISD$W_PAGCNT] = 1;					! SET ONE PAGE (SO FIXUP SECTION NOT BASED AT 0)
	END;
    IF .LASTHDRISD[ISD$B_TYPE] NEQ ISD$K_USRSTACK			! IF THE LAST SECTION IS NOT A STACK SECTION
	THEN STACKISD = 0						! THEN REMEMBER THAT
	ELSE BEGIN
	    LASTISD = .LASTISD[ISL$L_PREVISD];				! POINT TO ONE JUST BEFORE STACK ISD
	    LASTHDRISD = LASTISD[ISL$T_HDRISD];				! AND IT'S HEADER PART
	    END;
    SAVECURCLU = .LNK$GL_CURCLU;					! SAVE CURRENT CLUSTER DESCRIPTOR POINTER
    LNK$GL_CURCLU = .LNK$GL_HIGHCLU;					! MAKE HIGHEST CLUSTER THE CURRENT CLUSTER
    ISECT_BASE = FIXADR = (.LASTHDRISD[ISD$V_VPG]^9)			! SET BASE OF ISECT WE WILL CREATE
					+(.LASTHDRISD[ISD$W_PAGCNT]*512);
    IF .ISECT_BASE EQL 0						! IF BASE IS 0, MAKE IT X'200', THIS CLUSTER IS
	THEN ISECT_BASE = %X'200';					!  NULL.
    LNK$ALLOBLK(ISD$C_SIZE,ISCTDESC);					! ALLOCATE ISECT DESCRIPTOR
    LNK$GL_FIXISD = LASTISD[ISL$L_NXTISD] = .ISCTDESC;			! LINK INTO ISD LIST AND REMEMBER DESCRIPTOR ADDRESS
    IF .LNK$GL_CTLMSK[LNK$V_SHR]					! SET THE CORRECT INDEX INTO ISGENTBL
        THEN ISECT = 6							! (IF A SHAREABLE IMAGE)
	ELSE ISECT = 2;							! (IF AN EXECUTABLE IMAGE)
    PREVISECT = .LASTISD;						! POINT TO PREVIOUS ISECT DESCRIPTOR FOR BUILDISD
    BUILDISD(((((.LNK$GL_SHRIMGS*2)+.LNK$GL_SHRSYMS+1)*4)		! FILL IN AND LINK INTO CURRENT CLUSTER
						+IAF$C_LENGTH+511)/512);
    IF .STACKISD NEQ 0
    THEN BEGIN
	ISCTDESC[ISL$L_NXTISD] = .STACKISD;				! PUT STACK ISD BACK IN IF IT WAS THERE
	STACKISD[ISL$L_PREVISD] = .ISCTDESC;
	LNK$GL_CURCLU[CLU$L_LSTISD] = .STACKISD;
	END;
    HDRISD = ISCTDESC[ISL$T_HDRISD];					! POINT TO PART IN HEADER
    FIXADR = .FIXADR + IAF$C_LENGTH;					! POINT TO START OF FIXUP AREA (SKIP HEADER)
    !
    ! NOW LOOP THROUGH ALL THE CLUSTERS, AND FOR EACH CLUSTER THAT HAS SYMBOLS
    ! IN THE SHR LST, REDEFINE THE SYMBOL AT THE PROPER LOCATION IN THE FIXUP
    ! AREA.
    !
    LNK$GL_CURCLU = LNK$GL_CLULST[0];					! START AT TOP OF CLUSTER LIST

    IF .LNK$GL_SHRSYMS NEQ 0
    THEN WHILE (LNK$GL_CURCLU = .LNK$GL_CURCLU[CLU$L_NXTCLU]) NEQ 0
    DO IF .LNK$GL_CURCLU[CLU$L_SHRSYMS] NEQ 0				! IF THIS CLUSTER HAS SHAREABLE IMAGE REFERENCES
    THEN BEGIN
	FIXADR = .FIXADR + 8;						! LEAVE ROOM FOR # OF REFS, AND SHR IMAGE NUMBER
	SYMBOLBLOCK = .LNK$GL_CURCLU[CLU$L_SHRLST];			! NOW RUN THROUGH ALL THE SYMBOLS
	WHILE .SYMBOLBLOCK NEQ 0
	DO BEGIN
	    SYMBOLSNB = .SYMBOLBLOCK - .SYMBOLBLOCK[SYM$B_NAMLNG]	! POINT TO NAME BLOCK PART
							- SNB$C_FXDLEN;
	    SYMBOLBLOCK[SYM$L_OFFSET] = .SYMBOLBLOCK[SYM$L_VALUE];	! SAVE OFFSET
	    SYMBOLBLOCK[SYM$L_VALUE] = .FIXADR;				! DEFINE SYMBOL TO BE HERE INSTEAD
	    FIXADR = .FIXADR + 4;					! NEXT SLOT
	    SYMBOLBLOCK = .SYMBOLBLOCK[SYM$L_SHRLNK];			! AND LINK TO NEXT
	    END;
	END;

    LNK$GL_1STGADR = .FIXADR+4;
    LNK$GL_LASTGADR = .FIXADR+4;
    LNK$GL_CURCLU = .SAVECURCLU;					! RESTORE CURRENT CLUSTER

RETURN TRUE
END;

GLOBAL ROUTINE LNK$CLUVIRMEM (CLUSTERDESC) =
BEGIN
!
!	THIS ROUTINE ALLOCATES VIRTUAL MEMORY FOR A CLUSTER
!	IF THE MEMORY CANNOT BE ALLOCATED THE IMAGE PRODUCTION IS
!	DISABLED.
!
! INPUTS:
!
!	CLUSTERDESC	A POINTER TO THE CLUSTER DESCRIPTOR FOR CLUSTER TO
!			BE ALLOCATED
!
! OUTPUTS:
!
!	VIRTUAL MEMORY ALLOCATED. [CLU$L_BASE] IN THE CLUSTER DESCRIPTOR
!	SET TO VA OF ALLOCATED MEMORY.
!
!
MAP
    CLUSTERDESC : REF BLOCK[,BYTE];

LOCAL
    SAVECLUSTER,
    STATUS;

IF NOT (STATUS = (IF NOT .CLUSTERDESC[CLU$V_BASED]		!  IF THIS CLUSTER NOT BASED
	    AND .LNK$GL_CTLMSK[LNK$V_SHR]			!  AND WE ARE PRODUCING A SHAREABLE IMAGE
	    AND .DEFCLUBASED					!  THAT IS BASED
	THEN LNK$FINDVIRMEM(CLUSTERDESC[CLU$L_BASE],		! THEN FIND THE VIRTUAL MEMORY
				.CLUSTERDESC[CLU$L_PAGES],
				.LNK$GL_DEFCLU[CLU$L_BASE])	! BUT INSIST THAT IT BE ABOVE THE BASE= BASE.
	ELSE IF .CLUSTERDESC[CLU$V_BASED]			! IF THIS CLUSTER IS BASED
	    THEN LNK$ALLOVIRMEM(.CLUSTERDESC[CLU$L_BASE],.CLUSTERDESC[CLU$L_PAGES])
	    ELSE LNK$FINDVIRMEM(CLUSTERDESC[CLU$L_BASE],	! ATTEMPT TO FIND ENOUGH MEMORY
			.CLUSTERDESC[CLU$L_PAGES])))		! FOR CLUSTER, RETURNING BASE ADDRESS
THEN BEGIN
    SIGNAL(LIN$_INSVIRMEM,2,			! BUT ISSUE ERROR IF INSUFFICIENT
		.CLUSTERDESC[CLU$L_PAGES],CLUSTERDESC[CLU$B_NAMLNG],LIN$_NOIMGFIL);
    LNK$GL_CTLMSK[LNK$V_IMAGE] = FALSE;		! AND DISABLE IMAGE OUTPUT
    END;
IF .CLUSTERDESC[CLU$V_SHRIMG]
    THEN CLUSTERDESC[CLU$V_BASED] = TRUE;	! IT'S BASED NOW
ISCTDESC = CLUSTERDESC[CLU$L_FSTISD];		! INITIALIZE TO LISTHEAD FOR ISECTIONS
IF (IF .CLUSTERDESC[CLU$V_SHRIMG]
	THEN .CLUSTERDESC[CLU$V_PIC]
	ELSE NOT .CLUSTERDESC[CLU$V_BASED])
THEN WHILE (ISCTDESC = .ISCTDESC[ISL$L_NXTISD]) NEQ 0	! GET NEXT ISD IN LIST
DO BEGIN
    BIND
	HDRISD = ISCTDESC[ISL$T_HDRISD] : BLOCK[,BYTE];	! POINT TO HEADER PART

    IF NOT .HDRISD[ISD$V_P1]				! IF NOT CONTROL REGION
	THEN HDRISD[ISD$V_VPG] = .HDRISD[ISD$V_VPG] + 	! ADD THE CLUSTER BASE PAGE
			(.CLUSTERDESC[CLU$L_BASE] ^ -9);! TO I-SECTION PAGE NUMBER
    IF .CLUSTERDESC[CLU$V_SHRIMG]			! IF SHAREABLE IMAGE
	THEN HDRISD[ISD$V_BASED] = TRUE;		! FLAG SECTION AS BASED
    END;
!
! SEE IF LAST CLUSTER
!
LNK$SETLASTCLU(.CLUSTERDESC);
!
! RELOCATE CONTENTS OF CLUSTER
!
IF (IF .CLUSTERDESC[CLU$V_SHRIMG]
	THEN .CLUSTERDESC[CLU$V_PIC]
	ELSE NOT .CLUSTERDESC[CLU$V_BASED])
THEN BEGIN
    SAVECLUSTER = .LNK$GL_CURCLU;
    LNK$GL_CURCLU = .CLUSTERDESC;
    RELOCLUSTER();
    LNK$GL_CURCLU = .SAVECLUSTER;
    END;

RETURN .STATUS
END;


GLOBAL ROUTINE LNK$SETLASTCLU (CLUDESC) =
BEGIN
!
!	THIS ROUTINE TESTS IF THE CLUSTER PASSED TO IT IS INDEED
!	THE LAST CLUSTER.  IF SO, IT SETS LNK$GL_LSTCLSTR
!
MAP
    CLUDESC : REF BLOCK[,BYTE];

IF (.LNK$GL_LSTCLSTR EQL 0)
    OR (.CLUDESC[CLU$L_BASE] GTRU .LNK$GL_LSTCLSTR[CLU$L_BASE])
    THEN LNK$GL_LSTCLSTR = .CLUDESC;

RETURN TRUE
END;

ROUTINE STACK_ISECTBLD : NOVALUE =
BEGIN
!
!	THIS ROUTINE BUILDS A DEMAND ZERO IMAGE SECTION FOR
!	USER STACK, IF ANY AND IF ON THE LAST CLUSTER.
!
IF .LNK$GW_STACK NEQ 0						! IF THERE IS SOME STACK
AND (.LNK$GL_CURCLU[CLU$L_NXTCLU] EQL 0				! AND WE ARE ON THE LAST CLUSTER
    OR .LNK$GL_CURCLU EQL LNK$GL_DEFCLU)
THEN BEGIN
	IF (ISECT_BASE = .CNTRL_REG_ADDR - .LNK$GW_STACK*512)	! SET BASE OF STACK
		LSSU CONTROL_REGION				! IF IT GOES BELOW CONTROL REGION
	THEN SIGNAL_STOP(LIN$_STKOVFLO,2,			! AN ERROR
			.LNK$GW_STACK,.ISECT_BASE);
	IF .ISCTDESC[ISL$L_NXTISD] EQL 0			! IF CURRENT ISD IS THE LAST
	THEN BEGIN						! ONE IN USE
		LNK$ALLOBLK(ISD$C_SIZE,ISCTDESC[ISL$L_NXTISD]);	! GO ALLOCATE A NEW DESCRIPTOR
		ISCTDESC = .ISCTDESC[ISL$L_NXTISD];		! AND LINK TO THE PREVIOUS ONE
	     END;
	BUILDISD(.LNK$GW_STACK);				! GO CREATE ISD
	CNTRL_REG_ADDR = .ISECT_BASE;				! UPDATE CONTROL REGION POINTER
   END;
RETURN;								! AND ALL DONE
END;								! OF STACK ALLOCATOR

ROUTINE NORMAL_ISECTBLD : NOVALUE =
BEGIN
!
!	THIS ROUTINE BUILDS THE NORMAL IMAGE-SECTIONS OF THE 
!	PROGRAM REGION BY GATHERING COMPATIBLE P-SECTIONS IN
!	LEXICAL ORDER
!
ROUTINE FINDMASK_ACTION (PSCTDESC) =
BEGIN
!
! THIS ROUTINE IS CALLED BY LNK$FNDPSCMSK FOR EACH PSECT
! THAT MATCHES THE MASK
!
MAP
    PSCTDESC : REF BLOCK[,BYTE];

LOCAL
	AROUND,
	ISECT_BLKS,
	SYMSNB : REF BLOCK[,BYTE],			! PTR TO NAME BLOCK
	PSECT_LENGTH,
	PSCPART_BASE,
	SYMBOL : REF BLOCK[,BYTE];
!
BIND
	ISD$C_MAXBLK = %X'FFFF',				! MAX ISD BLOCK SIZE
	ISD$C_MAXBLKBYT = ISD$C_MAXBLK*512;			! EXPRESSED IN BYTES ALSO
!
BEGIN								! WITH APPROPRIATE ATTRIBUTES
	IF .ISCTDESC[ISL$L_NXTISD] EQL 0			! IF WE HAVEN'T ALLOCATED AN ISECT
	THEN BEGIN						! DESCRIPTOR THAT WASN'T USED
		LNK$ALLOBLK(ISD$C_SIZE,ISCTDESC[ISL$L_NXTISD]);	! GO ALLOCATE DESCRIPTOR
		ISCTDESC = .ISCTDESC[ISL$L_NXTISD];		! AND LINK TO THE PREVIOUS ONE
		ISCTDESC[ISL$L_NXTISD] = -1;			! TEMPORARILY MARK AS ALLOCATED
	     END;
	AROUND = (1^.PSCTDESC[PSC$B_ALIGN]) - 1;		! COMPUTE THE ADJUSTMENT FOR ALIGNING
	CURRENT_BASE = (.CURRENT_BASE + .AROUND) AND NOT .AROUND;! AND DO IT THEN
	PSCPART_BASE = .CURRENT_BASE;					! SET BASE OF PSECT SEGMENT
	PSECT_LENGTH = .PSCTDESC[PSC$L_LENGTH];				! SET LENGTH OF PSECT
	PSCTDESC[PSC$L_ISECT] = 0;					! ENSURE 0 ISECT POINTER
	WHILE ((.PSCPART_BASE - .ISECT_BASE + .PSECT_LENGTH) GTRU ISD$C_MAXBLKBYT
		AND (.PSECT_LENGTH GTRU 0))
	DO BEGIN
	    ISECT_BLKS = ISD$C_MAXBLK;				! SET TO MAXIMUM ISD
	    BUILDISD(.ISECT_BLKS);				! BUILD ISD WE HAVE
	    LNK$GL_CURCLU[CLU$L_PAGES] = .LNK$GL_CURCLU[CLU$L_PAGES] + .ISECT_BLKS; ! ADD ISECT SIZE TO CLUSTER SIZE
	    IF .PSCTDESC[PSC$L_ISECT] EQL 0 THEN PSCTDESC[PSC$L_ISECT] = .ISCTDESC; ! IF PSECT NOT BOUND TO ISECT, DO SO
	    LNK$ALLOBLK(ISD$C_SIZE,ISCTDESC[ISL$L_NXTISD]);		! ALLOCATE A NEW ISD
	    ISCTDESC = .ISCTDESC[ISL$L_NXTISD];				! LINK INTO LIST
	    ISCTDESC[ISL$L_NXTISD] = -1;				! TEMPORARILY MARK AS ALLOCATED
	    PSECT_LENGTH = (.PSCPART_BASE - .ISECT_BASE + .PSECT_LENGTH) - ISD$C_MAXBLKBYT; ! REDUCE PSECT LENGTH
	    ISECT_BASE = (.ISECT_BASE + ISD$C_MAXBLKBYT);			! SET NEW ISECT BASE
	    PSCPART_BASE = .ISECT_BASE;					! SET BASE OF PART OF PSECT
	    END;
	PSCTDESC[PSC$L_BASE] = .CURRENT_BASE;			! SET P-SECT BASE
	IF .PSCTDESC[PSC$L_ISECT] EQL 0 THEN PSCTDESC[PSC$L_ISECT] = .ISCTDESC; ! BIND PSECT TO ISECT IF NOT DONE
	CURRENT_BASE = .CURRENT_BASE + .PSCTDESC[PSC$L_LENGTH];		! THEN UPDATE FOR THE NEXT
	PSCPART_BASE = .CURRENT_BASE;					! UPDATE PSECT BASE POINTER
END;
RETURN TRUE							! AND DONE
END;								! OF FINDMASK_ACTION
!
! MAIN BODY OF NORMAL_ISECTBLD
!
LOCAL
    ISECT_BLKS;

BIND
	ATTRIBMASK = .ISECTGENTBL[.ISECT-1,ISC$W_MASK],		! CREATE MORE
	ATTRIBVALUE = .ISECTGENTBL[.ISECT-1,ISC$W_MATCH];	! CONVENIENT NAMES

CURRENT_BASE = .ISECT_BASE;					! SET FIRST PSECT BASE
LNK$FNDPSCMSK(ATTRIBMASK,ATTRIBVALUE,FINDMASK_ACTION);		! FIND COMPATIBLE PSECTS
ISECT_BLKS = (.CURRENT_BASE - .ISECT_BASE+511)/512;		! COMPUTE NUMBER OF BLOCKS
IF .ISCTDESC[ISL$L_NXTISD] EQL -1				! IF A DESCRIPTOR WAS ALLOCATED
THEN BUILDISD(.ISECT_BLKS);					! THEN CREATE ISD
LNK$GL_CURCLU[CLU$L_PAGES] = .LNK$GL_CURCLU[CLU$L_PAGES] +	! ADD I-SECTION SIZE TO CLUSTER SIZE
					.ISECT_BLKS;
ISECT_BASE = .CURRENT_BASE;					! SET BASE OF NEXT I-SECT
RETURN TRUE
END;

ROUTINE BUILDISD (NPAGES) : NOVALUE =
BEGIN
!
!	ROUTINE TO ALLOCATE AN IMAGE SECTION DESCRIPTOR AND
!	FILL IN ITS FIELDS, THEN LINK ON TO THE ISD LIST
!	NPAGES = NUMBER OF PAGES TO ALLOCATE IN SECTION.
!
BIND
	HDRISD = ISCTDESC[ISL$T_HDRISD] : BLOCK[,BYTE],		! SET POINTER TO PART FOR HEADER
	MATCHCTRL = .ISECTGENTBL[.ISECT-1,ISC$B_MATCTL],	! ISD MATCH CONTROL
	ISECTFLAGS = .ISECTGENTBL[.ISECT-1,ISC$B_FLAGS],	! I-SECT FLAGS
	ISECTPSCFLAGS = .ISECTGENTBL[.ISECT-1, ISC$W_MATCH],	! MATCH CONTROL FLAGS FOR ISECT
	ISCPFC = .ISECTGENTBL[.ISECT-1,ISC$B_PFC],		! PAGE FAULT CLUSTER PARAMETER
	ISDSIZE = .ISECTGENTBL[.ISECT-1,ISC$B_SIZE],		! ISD SIZE PARAMETER
	ISDTYPE = .ISECTGENTBL[.ISECT-1,ISC$B_CODE];		! ISECTION TYPE

IF ISDSIZE EQL 0
    THEN RETURN;						! SKIP NULL ISECT DESCRIPTOR
ISCTDESC[ISL$L_NXTISD] = 0;					! ENSURE END OF LIST
ISCTDESC[ISL$L_PREVISD] = .PREVISECT;				! SET POINTER TO PREVIOUS ISECT
PREVISECT = .ISCTDESC;						! SET THIS AS NEW PREVIOUS
ISCTDESC[ISL$L_CLUDSC] = .LNK$GL_CURCLU;			! SET POINTER TO CLUSTER DESCRIPTOR
ISCTDESC[ISL$L_BUFADR] = 0;					! NO BUFFER FOR ITS BINARY YET
ISCTDESC[ISL$L_BUFEND] = 0;					! SO ZERO THE QUADWORD
LNK$GW_NISECTS = .LNK$GW_NISECTS + 1;				! COUNT THIS ISECTION
HDRISD[ISD$W_SIZE] = ISDSIZE;					! AND COPY INTO ISD
HDRISD[ISD$W_PAGCNT] = .NPAGES;					! INSERT PAGE COUNT
HDRISD[ISD$L_VPNPFC] = .ISECT_BASE ^-9;				! INSERT VIRTUAL PAGE ADDRESS
IF (HDRISD[ISD$B_PFC] = MINU(.NPAGES,.LNK$GL_CURCLU[CLU$B_PFC])) EQL 0 ! IF NO PFC GIVEN FOR CLUSTER
THEN HDRISD[ISD$B_PFC] = MINU(ISCPFC,.NPAGES);			! PFC IS MINIMUM OF DEFAULT
								! VALUE AND NUMBER OF PAGES
HDRISD[ISD$L_FLAGS] = ISECTFLAGS;				! INSERT FLAGS
HDRISD[ISD$V_MATCHCTL] = MATCHCTRL;				! INSERT THE MATCH CONTROL FIELD
HDRISD[ISD$B_TYPE] = ISDTYPE;					! AND TYPE
HDRISD[ISD$L_VBN] = 0;						! SET NO RELATIVE DISK BLOCK YET ALLOCATED
LNK$GL_CURCLU[CLU$L_LSTISD] = .ISCTDESC;			! WHICH WILL BE ADJUSTED LATER
LNK$GL_CURCLU[CLU$L_NISECTS] = .LNK$GL_CURCLU[CLU$L_NISECTS] + 1;! COUNT THIS ISECT IN CLUSTER
IF (ISECTPSCFLAGS AND GPS$M_VEC) NEQ 0				! IF THIS IS A VECTOR ISECT
	THEN HDRISD[ISD$V_VECTOR] = TRUE;			! THEN SET THE FLAG
RETURN;								! SAVE END POINTER
END;		! OF ISECT DESCRIPTOR BUILDER
END ELUDOM
