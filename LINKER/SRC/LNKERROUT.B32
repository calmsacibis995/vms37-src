MODULE LNK_HANDLER (
		IDENT ='V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL,
				NONEXTERNAL=LONG_RELATIVE)
		) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!
!
!++
!
! MODULE: LNK_HANDLER
!
! FACILITY: LINKER
!
! ABSTRACT: ERROR HANDLER FOR THE LINKER
!
! HISTORY:
!
!	VERSION: X01.00
!
!	AUTHOR: T.J. PORTER 30-DEC-76
!
! MODIFIED BY:
!
!	V03-002	BLS0031		Benn Schreiber		19-Jan-1981
!		Print Pass 1 error messages in map in pass 2
!
!	V03-001	BLS0007		Benn Schreiber,		3-Jun-1980
!		Rewrite and convert to MDL data structures.
!--


!
!++
!
! FUNCTIONAL DESCRIPTION:
!
! This module processes errors for the linker.
!--
!
LIBRARY
	'STARLETL32';			! VMS AND RMS INTERFACES
LIBRARY
	'DATBAS';			! DATA BASE
REQUIRE
	'PREFIX';			! GENERAL MACROS ETC

EXTERNAL
	LNK$GB_PASS : BYTE,			! PASS 1 OR 2
	LNK$GL_CUROMD : REF BLOCK[,BYTE],	! POINTER TO CURRENT OBJECT MODULE DESCRIPTOR
	LNK$GL_CTLMSK : BLOCK[,BYTE];		! CONTROL FLAGS

EXTERNAL ROUTINE
	LNK$ALLOBLK;				! ALLOCATE VIRTUAL MEMORY

PSECT PLIT = $CODE$;				! MOVE THE PLITS
!
! $SHR_MESSAGES - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MESSAGES( name, code, (msg,severity), ... )
!
!	where:
!	    "name" is the name of the facility (e.g., COPY)
!	    "code" is the corresponding facility code (e.g., 103)
!	    "msg" is the name of the shared message (e.g., BEGIN)
!	    "severity" is the desired message severity (e.g., 1, 0, 2)
!

MACRO
    $SHR_MESSAGES( FACILITY_NAME, FACILITY_CODE ) =
	GLOBAL LITERAL
	SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE, %REMAINING ); %,

    SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, %REMOVE(VALUE) ) %,

    SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME(FACILITY_NAME,'$_',MSG_ID) = %NAME('SHR$_',MSG_ID) + FACILITY_CODE*65536 +
	    %IF %DECLARED(%NAME('STS$K_',SEVERITY))
		%THEN %NAME('STS$K_',SEVERITY)
		%ELSE SEVERITY %FI %;


!
EXTERNAL LITERAL
	LINK$_FACILITY,
	LIN$_FATALERROR;

$SHR_MESSAGES (LIN, 100,				! facility is Link, id is 151
		(openin, severe),			! error opening "file" as input
		(openout, warning),			! error opening "file" as output
		(closein, warning),			! error closing "file" as input
		(closeout, warning),			! error closing "file" as output
		(readerr, warning),			! error reading "file"
		(writeerr, error));			! error writing "file" 

EXTERNAL ROUTINE
	LNK$MAPOUT,					! Output to map file
	LNK$EXIT;					! Linker exit routine


GLOBAL
	LNK$GL_ERRLIST,					! Listhead for pass 1 non-module errors
	LNK$GL_LASTERR : INITIAL (LNK$GL_ERRLIST),	! pointer to last pass 1 non-module error
	LNK$GB_MAXERCOD : BYTE INITIAL (1);		! Maximum error code seen during link

GLOBAL ROUTINE LNK$ERRMSG(ERRORMSGDESC) =

!---
!
! This routine is called by SYS$PUTMSG after it has formatted the error
! message and just before it writes the message to SYS$ERROR or SYS$OUTPUT.
! The input parameter is a string descriptor for the formatted message.
! This routine is used to output error messages to the map file.
!
! INPUTS:
!
!	ERRORMSGDESC	address of string descriptor of error text.
!
! OUTPUTS:
!
!	error text also output to map file if open.
!---

BEGIN

MAP
    ERRORMSGDESC : REF BLOCK[,BYTE];

IF .LNK$GL_CTLMSK[LNK$V_MAPOPN]
THEN LNK$MAPOUT(.ERRORMSGDESC[DSC$A_POINTER],			! Put message in map if mapping
		 .ERRORMSGDESC[DSC$W_LENGTH]);

IF .LNK$GB_PASS EQL 1						! If this is pass 1
    AND .LNK$GL_CTLMSK[LNK$V_MAP]				!  and a map will be generated
THEN BEGIN
    LOCAL
	LASTBLOCK : REF BLOCK[,BYTE],
	EBLOCK : REF BLOCK[,BYTE];

    LNK$ALLOBLK(OEB$C_SIZE+.ERRORMSGDESC[DSC$W_LENGTH],		! Allocate a text block
			EBLOCK);
    EBLOCK[OEB$L_NXTOEB] = 0;					! Zero link to next block
    EBLOCK[OEB$W_BYTCNT] = .ERRORMSGDESC[DSC$W_LENGTH];		! Fill in the error message block
    IF .LNK$GL_CUROMD NEQ 0
    THEN BEGIN
	LASTBLOCK = .LNK$GL_CUROMD[OMD$L_LSTERR];		! Get pointer to last on list
	LASTBLOCK[OEB$L_NXTOEB] = .EBLOCK;			! Link new one into list
	LNK$GL_CUROMD[OMD$L_LSTERR] = .EBLOCK;			!  and make this one the new last
	END
    ELSE BEGIN							! It's not related to any particular module
	LASTBLOCK = .LNK$GL_LASTERR;				! Get pointer to last non-module error
	LASTBLOCK[OEB$L_NXTOEB] = .EBLOCK;			! And link new one in
	LNK$GL_LASTERR = .EBLOCK;				! Make this one the new last block
	END;
    CH$MOVE(.ERRORMSGDESC[DSC$W_LENGTH],			! Copy the text for printing in pass 2
		.ERRORMSGDESC[DSC$A_POINTER],
			EBLOCK[OEB$T_TEXT]);
    END;
RETURN TRUE;							! Tell $PUTMSG to output
								!  msg on terminal
END;								! end of map_outmsg

GLOBAL ROUTINE LNK$HANDLER (SIGARGS, MECHARGS) =
BEGIN

!---
!
! This routine is a condition handler called whenever a signal is done by
! the linker.  It merely remembers the most severe error for an exit status.
!
!--

MAP
    SIGARGS : REF BLOCK[,BYTE],
    MECHARGS : REF BLOCK[,BYTE];

BIND
    SIGNAME = SIGARGS[CHF$L_SIG_NAME] : BLOCK[,BYTE];

!
! If this is not a linker error then resignal
!
IF .SIGNAME[STS$V_FAC_NO] NEQ LINK$_FACILITY
    THEN RETURN SS$_RESIGNAL;

IF NOT .SIGNAME						! If this is an error signal
    AND ((.SIGNAME[STS$V_SEVERITY]			!  and severity is worse than it was
	GEQU .LNK$GB_MAXERCOD)
	OR .LNK$GB_MAXERCOD)				! or we haven't had any errors
    THEN LNK$GB_MAXERCOD =				!  then set new worst error
		.SIGNAME[STS$V_SEVERITY]; 

SIGARGS[CHF$L_SIG_ARGS] = .SIGARGS[CHF$L_SIG_ARGS] - 2;	!Don't count pc/psl

$PUTMSG(MSGVEC=SIGARGS[CHF$L_SIG_ARGS],ACTRTN=LNK$ERRMSG);! output the message

SIGARGS[CHF$L_SIG_ARGS] = .SIGARGS[CHF$L_SIG_ARGS] + 2;
IF .LNK$GB_MAXERCOD EQL STS$K_SEVERE			! if this is a severe error
THEN LNK$EXIT((IF .LNK$GB_PASS EQL 0 THEN (.SIGNAME OR STS$M_INHIB_MSG)
			ELSE LIN$_FATALERROR));		!  then exit

RETURN SS$_CONTINUE					! signal to continue
END;

GLOBAL ROUTINE LNK$FILNAMDSC (IFAB) =
BEGIN

!--
! This routine returns the address of a string descriptor for the input fab.
!
! INPUTS:
!
!	IFAB	is the address of the fab
!
! ROUTINE VALUE:
!
!	the address of a string descriptor for the file name
!
!---
MAP
    IFAB : REF BLOCK[,BYTE];

BIND
    NAM = .IFAB [FAB$L_NAM] : BBLOCK;

OWN
    FILEDESC : BLOCK[DSC$C_S_BLN,BYTE];			! the string descriptor

IF (FILEDESC [DSC$W_LENGTH] = .NAM [NAM$B_RSL]) NEQ 0	! if resultant name present
THEN FILEDESC [DSC$A_POINTER] = .NAM [NAM$L_RSA]
ELSE IF (FILEDESC [DSC$W_LENGTH] = .NAM [NAM$B_ESL]) NEQ 0 ! if expanded name present
    THEN FILEDESC [DSC$A_POINTER] = .NAM [NAM$L_ESA]
    ELSE BEGIN
	FILEDESC [DSC$W_LENGTH] = .IFAB [FAB$B_FNS];	! use filename string
	FILEDESC [DSC$A_POINTER] = .IFAB [FAB$L_FNA];	!  if all else fails
	END;

RETURN FILEDESC
END;							!Of LNK$FILNAMDSC

END ELUDOM
