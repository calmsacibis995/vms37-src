	.TITLE	SOSPER - PRINT ERROR MESSAGE
	.IDENT	/V03001/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; PETER H. LIPMAN	19-JUN-77
;
; MODIFIED BY:
;
;	V03001	PHL35743	Peter H. Lipman		2-Mar-1982
;
;		Add "ending buf adr" parameter to NAMFIL call.
;
;	020702	PHL0702		Peter H. Lipman		21-May-1980
;
;			RSTS specific error deleting backup copy of
;		file was added to the error reporting logic.
;

	.MCALL	FDOF$L,QIOSY$,GCMLD$
	FDOF$L
	QIOSY$
	GCMLD$

	CODE$	PER

;
; CRTERR - ERROR IN CREATING OUTPUT FILE
;	(SP) = FDB ADDRESS OF FILE IN ERROR
;	BUF+BUFILE = FDB ADDRESS OF GOOD COPY OF FILE
;
CRTERR::
	MOV	(SP),R0			;FDB ADDRESS
	JSR	PC,CRTER1		;OUTPUT CREATE ERROR MESSAGE
	JSR	R1,PRTINL		;GOOD COPY OF FILE
	.WORD	CRTEM2
	MOV	#FILEIN,-(SP)		;ADDRESS OF FDB WITH INTENDED FILE NAME
	MOV	BUF+BUFILE,R0		;FDB ADDRESS OF CURRENT INPUT FILE
	CMP	(SP),R0			;IF THE CURRENT INPUT FILE IS "FILEIN"
	BEQ	20$			;THEN BEST COPY HAS THE CORRECT NAME
	CLR	FILEIN+F.FVER		;FORCE NEW VERSION OF FILE
					;EVEN IF BACKUP COPY ALREADY DONE
	MOV	R0,2(SP)
	JSR	PC,CAT			;RENAME THE FILE - CAT(OLD,NEW)
	TST	R0
	BGE	20$			;IF OK, PRINT NAME OF FILEIN
	TST	(SP)+			;OTHERWISE PRINT NAME OF TEMP FIILE
20$:	CLR	-(SP)			;NO SPECIAL FLAGS FOR PRTFIL
	JSR	PC,PRTFIL		;PRINT THE FILE NAME
	BR	FATX			;AND TERMINATE SOS
;
; CLOSE/POINT/CREATE/DELETE/DELETE BACKUP ERROR
;	R0 = FDB ADDRESS
;	0(SP) = RETURN ADDRESS FOR DELETE, DELETE BACKUP, AND CREATE
;		CLOSE AND POINT ARE FORCED FATAL EXITS.
;
CLSERR::
PNTERR::
	MOV	#FATX,-(SP)		;FORCE FATAL EXIT
	MOV	#CLSER1,-(SP)		;ADR OF CLOSE ERROR MESSAGE
	BR	CLDLER
CRTER1::MOV	#CRTEM1,-(SP)		;ADR OF CREATE ERROR MESSAGE
	BR	CLDLER

	.IF	DF,R$$STS
BAKERR::MOV	#BAKER1,-(SP)		;DELETE BACKUP ERROR (RSTS ONLY)
	BR	CLDLER
	.ENDC	;R$$STS

DELERR::MOV	#DELER1,-(SP)		;ADR OF DELETE ERROR MESSAGE
CLDLER:	MOV	R0,-(SP)		;FDB ADDRESS OF FILE
	JSR	PC,FDBERR		;PRINT ERROR MESSAGE
	MOV	(SP)+,R0		;RESTORE FDB ADDRESS
	TST	(SP)+			;CLEAN OFF MESSAGE ADDRESS
	RTS	PC			;AND RETURN
;
; RENAME ERROR OTHER THAN IE.PRI, IE.DUP, IE.2DV, IE.FEX
;	 0(SP) = ERROR CODE
;	12(SP) = FDB OF NEW NAME
;	14(SP) = FDB OF EXISTING FILE
;
CATERR::
	.IF	DF,R$$DBG		;*****
	JMP	CATBUG			;***** REPORT RENAME BUG
	.ENDC	;R$$DBG			;*****

	JSR	R1,PRTINL		;PRINT ERROR MESSAGE
	.WORD	CATER1			;"ERROR RENAMING FILE"
	JSR	PC,FCSERP		;PRINT THE ERROR CODE
	MOV	#CATER2,(SP)		;"EXISTING FILE"
	MOV	14(SP),-(SP)		;FDB OF EXISTING FILE
	JSR	PC,FDBERR		;PRINT THE ERROR
	MOV	#CATER3,(SP)		;"NEW FILE NAME"
	MOV	14(SP),-(SP)		;FDB ADDRESS OF NEW NAME
	JSR	PC,FDBERR		;PRINT THE ERROR
	BR	FATX			;AND EXIT
;
; 0(SP) = MESSAGE ADDRESS, R0 = FDB ADDRESS
;
FCFAT1::MOV	R0,-(SP)		;PUSH FDB ADDRESS
	JSR	PC,FDBERR		;REPORT THE ERROR
	BR	FATX			;AND EXIT

;
; IOSTS CONTAINS ERROR CODE
;
IOFATL::
	.IF	DF,R$$STS
	MOVB	#ERRFQ,FIRQB+FQFUN	;SET FUNCTION CODE
	MOVB	IOSTS,FIRQB+FQFUN+1	;AND ERROR CODE
	CALFIP				;TRANSLATE TO MESSAGE
	.TTRST				;RESET CTLO
	JSR	R1,PRTINL		;MESSAGE HEADER
	.WORD	FATALQ			;FATAL I/O ERROR
	
	MOV	#FIRQB+FQERNO,-(SP)	;COPY MESSAGE POINTER
	JSR	PC,PRINTZ		;PRINT ERROR
	JSR	PC,TYPECR		;ADD CR, LF

	.IFF
	CLR	-(SP)
	MOVB	IOSTS,(SP)		;SAVE IOSTS IN LOW BYTE, 0 HIGH BYTE
	JSR	R1,PRTINL		;MESSAGE HEADER
	.WORD	FATALQ			;FATAL I/O ERROR
	JSR	PC,FCSERP		;PRINT FCS ERROR CODE
	.ENDC

FATX:	JMP	EXIT			;EXIT SOS

	PLIT	FATALQ,<<15><12>/FATAL ERROR - /<15><12>>

ENTRY	FDBERR				;FDBERR(MSG,FDBADR)
	MOV	4(SP),-(SP)		;COPY MESSAGE POINTER TO STACK
	BEQ	10$			;BRANCH IF NO MESSAGE SUPPLIED
	JSR	PC,PRINTC		;PRINT THE MESSAGE WITH CRLF
10$:	MOV	4(SP),R0		;FDB ADDRESS
	MOV	F.ERR(R0),(SP)		;SAVE THE ERROR CODE
	MOV	R0,-(SP)		;FDB ADR
	MOV	TTOCTL,-(SP)		;ADDRESS OF NEXT BYTE IN OUTPUT BUFFER
	MOV	#TTOEND,-(SP)		;END ADR OF OUTPUT BUFFER
	JSR	PC,NAMFIL		;FORM FILE NAME STRING
	ADD	#6,SP			;CLEAN UP THE STACK
	ADD	R0,TTOCTL		;UPDATE BUFFER POINTER
	ADD	R0,TTOCTL+2		;AND SIZE
	JSR	R1,PRTINL		;SEPARATE MSG FROM FILE NAME
	.WORD	FDBE1
	JSR	PC,FCSERP		;PRINT FCS ERROR CODE
	TST	(SP)+
	RTS	PC			;AND RETURN

	PLIT	FDBE1,</ - />

ENTRY	FCSERP				;FCSERP(ERR CODE)
	JSR	R1,$SAV3		;SAVE R1,R2
	MOVB	10.(SP),R2		;SIGN EXTENDED ERROR CODE
	NEG	R2			;FORM POSITIVE VALUE
	TSTB	11.(SP)			;IF HIGH BYTE IS NEGATIVE
	BGE	10$
	ADD	#128.,R2		;IT IS A DIRECTIVE STATUS CODE
10$:	MOV	#TTOCTL,R3		;ADDRESS OF OUTPUT BUF PTR AND SIZE
	MOV	(R3),R0			;POINTER TO NEXT BYTE TO STORE IN
	MOV	#QIOMSG,R1		;NAME OF MSG FILE
	JMP	GERRM1			;CALL THE GET ERROR MESSAGE ROUTINE
GERRM2::
	ROR	(SP)+			;RECOVER CARRY BIT
	BCS	20$			;BRANCH IF STRING NOT FOUND
	MOV	R0,(R3)+		;UPDATED PTR TO NEXT BYTE
	ADD	R1,(R3)			;NUMBER OF BYTES JUST ADDED
	BR	50$			;FORCE MESSAGE OUT AND RETURN
;
; FAILED TO CONVERT ERROR CODE TO STRING
;
20$:	MOV	#FC01,-(SP)		;"HANDLER ERROR"
	MOV	12.(SP),R2		;ORIGINAL ERROR PARAM
	BGE	30$			;BRANCH IF NOT QIO ERROR
	MOV	#FC02,(SP)		;"QI/O ERROR"
30$:	MOVB	R2,R2			;SIGN EXTEND THE ERROR BYTE
	BLT	40$			;BRANCH IF IT IS AN ERROR STATUS
	NEG	R2			;EXTRA NEGATE ON SUCCESS STATUS
	MOV	#FC03,(SP)		;"SUCCESS STATUS"
40$:	NEG	R2			;FORM POSITIVE NUMBER TO PRINT
	JSR	PC,PRINT		;PRINT THE ERROR MESSAGE
	MOV	R2,(SP)			;VALUE TO PRINT
	MOV	#1,-(SP)		;MINIMUM NUMBER OF PRINT POSITIONS
	JSR	PC,PRINTN		;PRINT THE ERROR CODE IN DECIMAL
	MOV	#'.,(SP)		;ADD A DECIMAL POINT
	JSR	PC,TYPE			;
	CMP	(SP)+,(SP)+		;CLEAN UP THE STACK
50$:	JSR	PC,TYPECR		;FORCE THE LINE OUT
	RTS	PC			;AND RETURN
;
; READ ONLY DATA FOR FCSERP
;
	PLIT	FC01,<$Handler error code -$>
	PLIT	FC02,<$QI/O error code -$>
	PLIT	FC03,<$Successful completion code $>
	PLIT	CATER1,<<15><12>/Error renaming file - />
	PLIT	CATER2,</Existing file/>
	PLIT	CATER3,</New file name/>
	PLIT	CLSER1,<<15><12>/Error closing or repositioning file/>
	PLIT	DELER1,<<15><12>/Error deleting file/>
	PLIT	CRTEM1,<<15><12>/Error creating output file/>
	PLIT	CRTEM2,</Best copy of file is />

	.IF	DF,R$$STS
	.ENABL	LSB
	.EVEN
	.WORD	<10$-BAKER1+1>/2
BAKER1:	.ASCII	<15><12>/Error deleting old .BAK file, /
	.ASCII	/cannot make new backup copy/
10$:
	.EVEN
	.DSABL	LSB
	.ENDC	;R$$STS

	.SBTTL	GET COMMAND LINE ERROR
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	R0 ALTERED, OTHERS PRESERVED
;
GCMLER::
	JSR	PC,TYPECR	;START MESSAGE WITH CR, LF
	MOVB	GCMLB+G.ERR,R0	;SIGN EXTENDED ERROR CODE
	BGE	40$		;SHOULD BE NEGATIVE
	ADD	#4,R0		;-1 TO -4 NOW +3 TO 0
	BGE	50$		;BRANCH IF IN RANGE
40$:	MOV	#3,R0		;CODE -1 FOR I/O ERROR
50$:	ASL	R0		;FORM WORD INDEX
	MOV	GCERAD(R0),-(SP) ;ADDRESS OF COUNTED STRING
	JSR	PC,PRINTC	;OUTPUT THE MESSAGE AND CR, LF
	TST	(SP)+		;CLEAN OFF THE PARAMETER
	RTS	PC		;RETURN

;
; ERROR MESSAGES FOR GCML ERRORS
;
GCERAD:	.WORD	40$,30$,20$,10$
	.WORD	15$-10$+1/2	;ERROR CODE -1
10$:	.ASCII	^Command line I/O error^
15$:
	.EVEN

	.WORD	25$-20$+1/2	;ERROR CODE -2
20$:	.ASCII	^Failed to open command file^
25$:
	.EVEN

	.WORD	35$-30$+1/2	;ERROR CODE -3
30$:	.ASCII	^Bad command file name^
35$:
	.EVEN

	.WORD	45$-40$+1/2	;ERROR CODE -4
40$:	.ASCII	^Maximum command file depth exceeded^
45$:
	.EVEN


	.END
