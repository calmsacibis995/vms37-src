MODULE SHIFTB (
	IDENT = 'V03-000'
		) =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! WILLIAM T. MARSHALL	19-MAR-76
!
! MODIFIED BY:
!
!


!
!	SHIFTB
!
!	THIS ROUTINE DOES ALL THE BUFFER SHIFTING THAT IS
!	REQUIRED BY ODD SIZE INSERTS, CHANGES, ETC.
!	THE ALGORITHM ATTEMPTS TO MINIMIZE THE NUMBER
!	OF WORDS THAT MUST BE TRANSFERRED, BY SHIFTING
!	ANY ONE OF THREE DIFFERENT WAYS.
!		1. 	LOWER USED PORTION UPWARD INTO FREE AREA
!		2.	UPPER PORTION DOWNWARD INTO FREE AREA
!		3.	UPPER PORTION UPWARD INTO FREE AREA
!
!	THE ROUTINE WILL EITHER COMPRESS OR EXPAND THE AREA,
!	DEPENDING ON THE SIGN OF THE LENGTH PARAMETER--
!	A NEGATIVE LENGTH SAYS TO COMPRESS OUT THAT MUCH AREA,
!	A POSITIVE LENGTH SAYS TO EXPAND AND LEAVE THAT MUCH.
!
!	PARMETERS -
!		BUF - ADDRESS OF BUFFER HEADER
!		ADR - ADDRESS OF FIRST BYTE TO SHIFT OUT, OR
!			ADDRESS WHERE TO MAKE ROOM
!		LNG - NUMBER OF BYTES REQUIRED (MUST BE EVEN)
!
!	RETURNS -
!		VALUE RETURNED IS THE 'CONVERTED' ADDRESS PASED
!			IN THE PARAMETER.  THAT IS, THE ADR OR
!			THE NEW AREA IF LNG>0, OR THE ADR OF
!			THE SMALLER AREA IF LNG<0.
!
!
!	V02.02	09-JUN-76	WTM
!	V02.01	19-MAR-76	WTM


REQUIRE 'SRC$:SOSREQ.B16';

EXROUTINE
	SOSERR;		! IN CASE OF MAJOR ERROR

LINKAGE R1R2R0=JSR(REGISTER=1,REGISTER=2,REGISTER=0):NOPRESERVE(1,2);

GBLROUTINE (SHIFTB(ADR,LNG))=
BEGIN
LOCAL
    LL;
ROUTINE MOVE(P1,P2,P3): NOVALUE R1R2R0 =
	DECR I FROM (.P3 ^ -1) TO 1 DO
		BEGIN
		.P2=..P1;
		P1=.P1+2;
		P2=.P2+2;
		END;
ROUTINE MOVER(P1,P2,P3): NOVALUE R1R2R0 =
	DECR I FROM (.P3 ^ -1) TO 1 DO
		BEGIN
		P1=.P1-2;
		P2=.P2-2;
		.P2=..P1;
		END;

IF .ADR LEQU .BUFLST+8 AND .BUFFIR GTRU .BUFLST THEN
	IF .LNG GTR 0 AND .BUFFR1 LSS .LNG THEN
		SOSERR(3,INTERNAL)
	ELSE
	IF .LNG GTR 0 THEN
		BEGIN
		LL=.BUFLST+.LINLEN(.BUFLST)*2-.ADR;
		IF .LINLEN(.BUFLST) EQL 0 THEN LL=.LL+10;
		MOVER(.ADR+.LL,.ADR+.LL+.LNG,.LL);
		BUFFR1=.BUFFR1-.LNG;
		IF .ADR LEQU .BUFLST THEN
			BUFLST=.BUFLST+.LNG;
		RETURN .ADR;
		END
	ELSE
		BEGIN
		LL=.BUFLST+.LINLEN(.BUFLST)*2-.ADR+.LNG;
		IF .LINLEN(.BUFLST) EQL 0 THEN LL=.LL+10;
		MOVE(.ADR-.LNG,.ADR,.LL);
		BUFFR1=.BUFFR1-.LNG;
		IF .ADR LEQU .BUFLST THEN
			BUFLST=.BUFLST+.LNG;
		RETURN .ADR;
		END
ELSE
IF .BUFFIR EQL .BUFSTRT OR (.BUFFR2 GTR .LNG AND
	(.ADR-.BUFFIR) GEQ (.BUFADR+.BUFLEN-.BUFFR2-.ADR)) THEN
	IF .LNG GTR 0 AND .BUFFR2 LSS .LNG THEN
		SOSERR(3,INTERNAL)
	ELSE
	IF .LNG GTR 0 THEN
		BEGIN
		LL=.BUFADR+.BUFLEN-.BUFFR2-.ADR;
		MOVER(.ADR+.LL,.ADR+.LNG+.LL,.LL);
		BUFFR2=.BUFFR2-.LNG;
		IF .ADR LEQU .BUFLST THEN
			BUFLST=.BUFLST+.LNG;
		RETURN .ADR;
		END
	ELSE
		BEGIN
		LL=.BUFADR+.BUFLEN-.BUFFR2-.ADR+.LNG;
		MOVE(.ADR-.LNG,.ADR,.LL);
		BUFFR2=.BUFFR2-.LNG;
		IF .ADR LEQU .BUFLST THEN
			BUFLST=.BUFLST+.LNG;
		RETURN .ADR
		END
ELSE
	IF .LNG GTR 0 AND .BUFFR1 LSS .LNG THEN
		SOSERR(3,INTERNAL)
	ELSE
	IF .LNG GTR 0 THEN
		BEGIN
		LL=.ADR-.BUFFIR;
		MOVE(.BUFFIR,.BUFFIR-.LNG,.LL);
		BUFFR1=.BUFFR1-.LNG;
		BUFFIR=.BUFFIR-.LNG;
		RETURN .ADR-.LNG;
		END
	ELSE
		BEGIN
		LL=.ADR-.BUFFIR;
		MOVER(.ADR,.ADR-.LNG,.LL);
		BUFFR1=.BUFFR1-.LNG;
		BUFFIR=.BUFFIR-.LNG;
		RETURN .ADR-.LNG;
		END;
RETURN 0;
END;


END ELUDOM
