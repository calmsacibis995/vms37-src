	.TITLE	LPA$SWEEP
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	LPA-11 PROCEDURE LIBRARY
;
; ABSTRACT:
;	THIS MODULE CONTAINS THE START SWEEP ROUTINES FOR THE LPA-11
;	PROCEDURE LIBRARY.
;
; ENVIRONMENT:	USER MODE, SHARED OR NON-SHARED LIBRARY
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  23-AUG-78
;
; MODIFIED BY:
;
;	V03-001	SBL3001		Steven B. Lionel	30-Mar-1982
;		Change module name to LPA$SWEEP.
;
;	V04	SRB0001		STEVE BECKHARDT		23-OCT-1979
;		FIXED BUG IN HANDLING OF BUFFER OVERRUN NON-FATAL:
;		INITIALIZED BUFFER 0 RELEASED FLAG TO 1 IN ROUTINE
;		SWPCOM IF BUFFER OVERRUN IS NON-FATAL.  AS A RESULT,
;		BUFFER 0 SHOULD NOT BE RELEASED THE FIRST TIME.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PSECT	_LPA$CODE,PIC,SHR,EXE,NOWRT,BYTE

; PREFIX STRING USED IN ASSIGNING CHANNEL

DNPREFIX:	.ASCII	/LPA11$/
DNPREFIXS=.-DNPREFIX

	.SBTTL	LPA$SETIBF - INITIALIZE IBUF ARRAY
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE INITIALIZES THE IBUF ARRAY
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	IBUF(AP)	ADDRESS OF IBUF ARRAY (MUST BE LONGWORD ALIGNED)
;	IND(AP)		ADDRESS OF LONGWORD TO RECEIVE COMPLETION STATUS
;	LAMSKB(AP)	ADDRESS OF LAMSKS ARRAY
;	BUF0(AP)	ADDRESS OF FIRST DATA BUFFER
;	   .
;	   .
;	BUFN(AP)	ADDRESS OF LAST DATA BUFFER (UP TO 8 ARE ALLOWED)
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IND(AP)		; ADDRESS OF LONGWORD TO RECEIVE COMPLETION STATUS
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	1	INDICATES IBUF WAS SUCCESSFULLY INITIALIZED
;	0	INDICATES AN ARGUMENT ERROR - POSSIBLE CAUSES:
;			1)  INCORRECT NUMBER OF ARGUMENTS
;			2)  IBUF ARRAY NOT LONGWORD ALIGNED
;			3)  BUFFER ADDRESSES NOT EQUIDISTANT
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	LPA$SETIBF,^M<R2,R3,R4,R5,R6>

	CLRL	R2			; RETURN STATUS
	MOVL	4(AP),R6		; GET ADDRESS OF IBUF ARRAY
	BITL	#3,R6			; IS IBUF LONGWORD ALIGNED?
	BNEQ	60$			; NO - ERROR
	MOVC5	#0,(R6),#0,#IBF$K_LENGTH,(R6)	; ZERO IBUF
	MOVAL	12(AP),R4		; POINT TO LAMSKB ARG
	
	; PROCESS LAMSKB ARG
	MOVL	(R4)+,IBF$L_LAMSKB(R6)	; STORE IN IBUF

	; PROCESS BUFFER ADDRESSES
	MOVZBL	(AP),R3			; GET NUMBER OF ARGS
	SUBL	#4,R3			; ACCOUNT FOR FIRST ARGUMENTS
	CMPL	R3,#7			; R3 = # OF BUFFERS - 1
	BGTRU	60$			; INCORRECT # OF ARGS
	MOVL	(R4),IBF$L_CMDTBL+CMT$L_BFRADDR(R6); STORE FIRST BUFFER ADDR.
	MOVB	R3,IBF$L_CMDTBL+CMT$B_VBFRMASK(R6)  ; STORE # IN COMMAND TABLE
	BEQL	50$			; ONLY 1 BUFFER ADDRESS SPECIFIED
	SUBL3	(R4)+,(R4),IBF$L_LBUF(R6)  ; COMPUTE AND STORE BUFFER LENGTH
	BRB	40$

30$:	SUBL3	(R4)+,(R4),R0		; COMPUTE NEXT LENGTH
	CMPL	R0,IBF$L_LBUF(R6)	; MAKE SURE IT AGREES
	BNEQ	60$			; IT DOESN'T - ERROR
40$:	SOBGTR	R3,30$			; DO NEXT ONE

50$:	; INITIALIZE ARGUMENT INDEPENDENT STUFF.  FIRST INIT. QUEUES
	MOVAL	IBF$L_USRQFL(R6),IBF$L_USRQFL(R6)	; USER QUEUE
	MOVAL	IBF$L_USRQFL(R6),IBF$L_USRQBL(R6)

	MOVAL	IBF$L_DEVQFL(R6),IBF$L_DEVQFL(R6)	; DEVICE QUEUE
	MOVAL	IBF$L_DEVQFL(R6),IBF$L_DEVQBL(R6)

	MOVAL	IBF$L_INUQFL(R6),IBF$L_INUQFL(R6)	; IN USE QUEUE
	MOVAL	IBF$L_INUQFL(R6),IBF$L_INUQBL(R6)

	MOVAW	IBF$W_USW(R6),IBF$L_CMDTBL+CMT$L_USWADDR(R6)	; USW ADDRESS

	MOVQ	#^X1000101000001,IBF$L_CMDTBL+CMT$W_DELAY(R6); DEFAULT SAMPLING
							     ; NUMBERS

	MOVW	#INITCODE,IBF$Q_IOST(R6)	; SHOW THAT SETIBF WAS CALLED

	INCL	R2			; INDICATE SUCCESS

60$:	MOVL	8(AP),R1		; GET ADDRESS OF IND
	BEQL	70$			; DEFAULTED
	MOVL	R2,(R1)			; RETURN STATUS
70$:	RET

	.SBTTL	START SWEEP ROUTINES
;++
; FUNCTIONAL DESCRIPTION:
;
;	THESE ROUTINES ARE THE START SWEEP ROUTINES.  THERE ARE
;	FOUR TYPES OF SWEEPS: A/D, D/A, DIGITAL IN, AND DIGITAL OUT.
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	IBUF(AP)	ADDRESS OF ARRAY INITIALIZED BY SETIBF
;	LBUF(AP)	ADDRESS OF WORD CONTAINING THE SIZE OF EACH DATA BUFFER
;			(IN WORDS)
;	NBUF(AP)	ADDRESS OF LONGWORD CONTAINING NUMBER OF BUFFERS TO FILL
;	MODE(AP)	ADDRESS OF A WORD WHICH SPECIFIES SAMPLING OPTIONS
;			BIT 5	SERIAL/PARALLEL (DUAL A/D)
;			BIT 6	DEDICATED/MULTIREQUEST MODE
;			BIT 9	CLOCK OVERFLOW/EXTERNAL TRIGGER
;			BIT 10	TIME STAMPING
;			BIT 11	EVENT MARKING
;			BIT 12	IMMEDIATE START/DIGITAL INPUT START
;			BIT 13	SINGLE/DUAL A/D
;			BIT 14	BUFFER OVER/UNDERRUN FATAL/NON-FATAL
;	DWELL(AP)	ADDRESS OF WORD CONTAINING DWELL VALUE
;	IEFN(AP)	VALUE OF EVENT FLAG OR IF GREATER THAN 128 ADDRESS OF
;			COMPLETION ROUTINE
;	LDELAY(AP)	ADDRESS OF A WORD CONTAINING DELAY VALUE
;	ICHN(AP)	ADDRESS OF A BYTE CONTAINING START CHANNEL VALUE
;	NCHN(AP)	ADDRESS OF A WORD CONTAINING NUMBER OF SAMPLES VALUE
;	IND(AP)		ADDRESS OF A LONGWORD TO RECEIVE STATUS
;
; IMPLICIT INPUTS:
;
;	 VARIOUS FIELDS IN THE IBUF ARRAY
;
; OUTPUT PARAMETERS:
;
;	IND(AP)		ADDRESS OF A LONGWORD TO RECEIVE STATUS
;
; IMPLICIT OUTPUTS:
;
;	VARIOUS FIELDS IN THE IBUF ARRAY
;
; COMPLETION CODES:
;
;	1	INDICATES SUCCESS 
;	0	INDICATES ERROR DETECTED BY THIS ROUTINE - POSSIBILITIES:
;			1)  SETIBF WAS NOT CALLED FIRST
;			2)  RLSBUF HAS NOT BEEN CALLED TO RELEASE A BUFFER
;			3)  SIZE OF DATA BUFFERS DISAGREES WITH SIZE
;			    COMPUTED FROM SETIBF CALL.
;	VARIOUS VMS CODES RETURNED BY $ASSIGN AND $QIO
;
; SIDE EFFECTS:
;
;	VARIOUS FIELDS IN THE IBUF ARRAY ARE MODIFIED
;
;--

	.ENTRY	LPA$ADSWP,^M<R2,R3,R4,R5,R6,R7>		; START A/D SWEEP
	MOVL	#2,R5			; MODE WORD
	BRB	SWPCOM


	.ENTRY	LPA$DASWP,^M<R2,R3,R4,R5,R6,R7>		; START D/A SWEEP
	MOVZWL	#^X82,R5		; MODE WORD
	BRB	SWPCOM


	.ENTRY	LPA$DISWP,^M<R2,R3,R4,R5,R6,R7>		; START DIG. INPUT SWEEP
	MOVL	#^X1A,R5		; MODE WORD
	BRB	SWPCOM


	.ENTRY	LPA$DOSWP,^M<R2,R3,R4,R5,R6,R7>		; START DIG. OUT SWEEP
	MOVZWL	#^X9A,R5



SWPCOM:	; COMMON PROCESSING FOR ALL SWEEP ROUTINES.  R5 CONTAINS MODE WORD.
	MOVAL	4(AP),R7		; POINT TO FIRST ARGUMENT
	SUBB3	#2,(AP),R3		; R3 CONTAINS # OF OPTIONAL ARGS 

	CLRL	R0			; ASSUME ERROR

	MOVL	(R7)+,R6		; ADDRESS OF IBUF ARRAY
	CMPW	IBF$Q_IOST(R6),#INITCODE	; VERIFY SETIBF WAS CALLED
	BNEQ	15$			; IT WASN'T - ERROR
	CLRQ	IBF$Q_IOST(R6)		; CLEAR USER'S I/O STATUS BLOCK

	; VERIFY THAT A BUFFER HAS BEEN RELEASED AND SET IN USW
	BBC	#FLG_V_USWSET,IBF$W_FLAGS(R6),15$	; BR. IF USW IS NOT SET

	; PROCESS LBUF
	MOVZWL	@(R7)+,R1		; GET LBUF
	MULL	#2,R1			; MULTIPLY BY 2 TO CONV. WORDS TO BYTES
	MOVL	IBF$L_LBUF(R6),R2	; GET LBUF CALCULATED IN SETIBF
	BEQL	20$			; THERE ISN'T ONE
	CMPL	R1,R2			; COMPARE THEM
	BEQL	20$			; EQUAL  - NO ERROR

15$:	BRW	115$			; ERROR

20$:	MOVL	R1,IBF$L_LBUF(R6)	; STORE LENGTH OF EACH BUFFER
	MOVZBL	IBF$L_CMDTBL+CMT$B_VBFRMASK(R6),R2	; GET # OF BUFFERS-1
	INCL	R2					; ADD 1
	MULL3	R2,R1,IBF$L_CMDTBL+CMT$L_BFRLEN(R6)  ; STORE OVERALL BFR LENGTH

	; PROCESS NBUF 
	DECB	R3			; DECR. ARG COUNT
	BLSS	30$			; ARG OMITTED
	MOVL	(R7)+,R1		; GET ADDRESS OF NBUF
	BEQL	30$			; DEFAULTED (CONTINUOUS SAMPLING)
	MOVL	(R1),IBF$L_NBUF(R6)	; STORE NBUF
	BEQL	30$			; ZERO ALSO MEANS CONTINUOUS SAMPLING
	BISW	#FLG_M_CNTBFRS,IBF$W_FLAGS(R6)	; SET COUNT BUFFERS FLAG

30$:	; PROCESS MODE
	DECB	R3			; DECR. ARG COUNT
	BLSS	50$			; ARG. OMITTED
	MOVL	(R7)+,R1		; GET ADDRESS OF MODE
	BEQL	50$			; DEFAULTED
	MOVZWL	(R1),R1			; GET MODE

	; SET BITS IN MODE WORD (IN R5) DEPENDING ON BITS IN MODE ARG (IN R1)
	BBC	#5,R1,32$		; BRANCH IF SERIAL
	BBSS	#11,R5,32$		; SET FOR PARALLEL
32$:	BBC	#6,R1,34$		; BRANCH IF DEDICATED MODE
	BBSS	#3,R5,34$		; SET FOR MULTIREQUEST MODE
34$:	BBC	#9,R1,36$		; BRANCH IF CLOCK OVERFLOW TRIGGER
	BBSS	#10,R5,36$		; SET FOR EXTERNAL TRIGGER
36$:	BBC	#10,R1,38$		; BRANCH IF NO TIME STAMPING
	BBSS	#15,R5,38$		; SET FOR TIME STAMPING
38$:	BBC	#11,R1,40$		; BRANCH IF NO EVENT MARKING
	BBSS	#14,R5,40$		; SET FOR EVENT MARKING
40$:	BBC	#12,R1,42$		; BRANCH IF IMMEDIATE START
	BBSS	#12,R5,42$		; SET FOR DIGITAL INPUT START
42$:	BBC	#13,R1,44$		; BRANCH IF SINGLE A/D CONVERTER
	BBSS	#5,R5,44$		; SET FOR DUAL A/D CONVERTERS
44$:	BBC	#14,R1,50$		; BRANCH IF OVER/UNDERRUN IS FATAL
	BISW	#FLG_M_BFR0RLSD,IBF$W_FLAGS(R6)  ; SET BUFFER 0 RELEASED FLAG
	BBSS	#23,R5,50$		; SET FOR OVER/UNDERRUN NON-FATAL

50$:	; MODE WORD NOW COMPLETE EXCEPT FOR CHANNEL SELECTION BITS (BITS 8-9)
	BISL	R5,IBF$L_CMDTBL+CMT$W_MODE(R6)	; OR INTO MODE WORD IN CMD TBL

	; PROCESS DWELL
	DECB	R3			; DECR. ARG COUNT
	BLSS	60$			; ARG OMITTED
	MOVL	(R7)+,R1		; ADDRESS OF DWELL VALUE
	BEQL	60$			; DEFAULTED
	MOVW	(R1),IBF$L_CMDTBL+CMT$W_DWELL(R6)	; STORE DWELL

60$:	; PROCESS IEFN (EVENT FLAG OR COMPLETION ROUTINE ADDRESS)
	MOVZWL	#IO$_STARTDATA!IO$M_SETEVF,R4	; I/O FUNCTION CODE
	DECB	R3			; DECR. ARG COUNT
	BLSS	65$			; ARG OMITTED
	MOVL	(R7)+,R0		; GET EVENT FLAG # OR ADDRESS OF ROUTINE
	BEQL	65$			; EITHER DEFAULTED OR EVENT FLAG ZERO
	CMPL	R0,#128			; EVENT FLAG OR AST ADDRESS?
	BLSSU	70$			; EVENT FLAG
	BICW	#IO$M_SETEVF,R4		; DON'T SET EVENT FLAG ON BUFFER FULLS
	MOVL	R0,IBF$L_COMPLADDR(R6)	; SAVE COMPLETION ROUTINE ADDRESS

65$:	; USE DEFAULT EVENT FLAG
	MOVZBL	#DEFEVFLG,R0

70$:	; SAVE EVENT FLAG NUMBER IN R0
	MOVB	R0,IBF$B_EFN(R6)

	; PROCESS DELAY
	DECB	R3			; DECR. ARG COUNT
	BLSS	80$			; ARG OMITTED
	MOVL	(R7)+,R0		; ADDRESS OF DELAY VALUE
	BEQL	80$			; DEFAULTED
	MOVW	(R0),IBF$L_CMDTBL+CMT$W_DELAY(R6)	; STORE IN COMMAND TABLE

80$:	; DON'T PROCESS ICHN AND NCHN IF SETADC WAS CALLED
	BBS	#FLG_V_SETADC,IBF$W_FLAGS(R6),90$	; BR. IF IT WAS CALLED

	; PROCESS ICHN
	DECB	R3			; DECR. ARG COUNT
	BLSS	85$			; ARG OMITTED
	MOVL	(R7)+,R0		; GET ADDRESS OF ICHN VALUE
	BEQL	85$			; DEFAULTED
	MOVB	(R0),IBF$L_CMDTBL+CMT$B_ICHN(R6)	; STORE ICHN

85$:	; PROCESS NCHN
	DECB	R3			; DECR. ARG COUNT
	BLSS	90$			; ARG OMITTED
	MOVL	(R7)+,R0		; GET ADDRESS OF NCHN VALUE
	BEQL	90$			; DEFAULTED
	MOVW	(R0),IBF$L_CMDTBL+CMT$W_NCHN(R6)	; STORE NCHN

90$:	; SET CHANNEL SELECTION BITS IN MODE WORD
	MOVL	IBF$L_CMDTBL+CMT$L_RCLADDR(R6),R0	; RCL ADDRESS SUPPLIED?
	BEQL	94$			; NO

	; HAVE RCL ADDRESS.  NOTE CHANNEL BITS ARE ALREADY ZERO. FIND RCL LENGTH
	CLRL	R1
92$:	ADDL	#2,R1			; ADD 2 TO LENGTH
	TSTW	(R0)+			; AT END OF RCL?
	BGEQ	92$			; NOT YET
	MOVL	R1,IBF$L_CMDTBL+CMT$L_RCLLEN(R6)   ; STORE RCL LENGTH
	BRB	100$

94$:	CMPW	#1,IBF$L_CMDTBL+CMT$W_NCHN(R6)	; IS NCHN = 1?
	BEQL	95$			; YES, SET SINGLE CHANNEL BIT
	BISB	#2,IBF$L_CMDTBL+CMT$W_MODE+1(R6); NO, SET SEQUENTIAL CHANNEL BIT
	BRB	100$
95$:	BISB	#1,IBF$L_CMDTBL+CMT$W_MODE+1(R6); SET SINGLE CHANNEL BIT

100$:	CLRL	R3			; NUMBER TO APPEND TO LOGICAL NAME
					; USED TO ASSIGN CHANNEL TO
	MOVL	IBF$L_LAMSKB(R6),R0	; GET ADDRESS OF LAMASK BUFFER
	BEQL	110$			; THERE IS NONE
	MOVQ	(R0),IBF$L_CMDTBL+CMT$B_STWRDN(R6)	; MOVE CONTENTS 
	MOVZWL	6(R0),R3		; GET NUMBER TO APPEND TO LOGICAL NAME
					; USED TO ASSIGN CHANNEL TO

110$:	; ASSIGN CHANNEL
	MOVAW	IBF$W_CHAN(R6),R2	; ADDRESS OF PLACE TO STORE CHANNEL #
	BSBW	LPA$$ASSIGN		; ASSIGN CHANNEL
	BLBC	R0,115$			; ERROR

	; NOW SET UP TO DO QIO
	MOVAB	LPA$$CMPLTAST,R2	; ADDRESS OF QIO COMPLETE AST
	MOVAB	LPA$$BFRAST,R3		; ADDRESS OF BUFFER AST
	MOVAB	LPA$$OVRAST,R5		; ADDRESS OF OVER/UNDERRUN AST
	$QIO_S	IBF$B_EFN(R6),-		; EVENT FLAG
		IBF$W_CHAN(R6),-	; CHANNEL
		R4,-			; I/O FUNCTION CODE
		IBF$Q_IOSB(R6),-	; I/O STATUS BLOCK
		(R2),-			; COMPLETION AST ADDRESS
		R6,-			; AST PARAMETER (ADDRESS OF IBUF ARRAY)
		IBF$L_CMDTBL(R6),-	; ADDRESS OF COMMAND TABLE
		#40,-			; LENGTH OF COMMAND TABLE
		R3,-			; NORMAL BUFFER AST ADDRESS
		R5			; OVER/UNDERRUN AST ADDRESS
	BLBS	R0,115$			; SUCCESSFUL QIO

	; ERROR IN QIO
	PUSHL	R0			; SAVE STATUS
	$DASSGN_S	IBF$W_CHAN(R6)	; DEASSIGN CHANNEL
	POPL	R0			; RESTORE STATUS

115$:	; ALL ERRORS AND SUCCESS COME HERE WITH STATUS IN R0
	CMPB	(AP),#10		; IND SPECIFIED?
	BLSSU	120$			; NO
	MOVL	40(AP),R1		; GET ADDRESS OF IND
	BEQL	120$			; DEFAULTED
	MOVL	R0,(R1)			; STORE STATUS

120$:	RET

	.SBTTL	LPA$STPSWP - STOP SWEEP
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE STOPS SWEEPS. A SWEEP CAN BE STOPPED IN TWO WAYS:
;	EITHER BY SETTING THE STOP BIT IN THE USER STATUS WORD (WHICH
;	STOPS AT THE END OF THE CURRENT BUFFER) OR BY ISSUING  A CANCEL I/O
;	(WHICH STOPS IT IMMEDIATELY).
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	IBUF(AP)		ADDRESS OF IBUF ARRAY
;	IWHEN(AP)		ADDRESS OF BYTE WHICH SPECIFIES WHEN TO
;				STOP SWEEP (0 = IMMED.  NON-0 = AT END OF BFR.)
;	IND(AP)			ADDRESS OF LONGWORD TO RECEIVE STATUS
;
; IMPLICIT INPUTS:
;
;	VARIOUS FIELDS IN IBUF ARRAY
;
; OUTPUT PARAMETERS:
;
;	IND(AP)			ADDRESS OF LONGWORD TO RECEIVE STATUS
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	1	INDICATES SUCCESS
;	VARIOUS ERRORS RETURNED BY $CANCEL
;
; SIDE EFFECTS:
;
;	FIELDS IN THE IBUF ARRAY MAY BE MODIFIED
;
;--

	.ENTRY	LPA$STPSWP,^M<R6>

	MOVL	4(AP),R6		; GET ADDRESS OF IBUF ARRAY

	CMPB	(AP),#2			; IS IWHEN SUPPLIED?
	BLSSU	20$			; NO
	MOVL	8(AP),R0		; GET ADDRESS OF IWHEN
	BEQL	20$			; DEFAULTED
	TSTL	(R0)			; DETERMINE WHEN
	BEQL	20$			; IMMEDIATELY

	; AT END OF CURRENT BUFFER - SET STOP BIT IN USW
	BISB	#^X40,IBF$W_USW+1(R6)	
	MOVL	#1,R0			; SUCCESS
	BRB	40$

20$:	; ISSUE CANCEL I/O
	$CANCEL_S	IBF$W_CHAN(R6)	; RETURNS STATUS IN R0

40$:	CMPB	(AP),#3			; IND SUPPLIED?
	BLSSU	60$			; NO
	MOVL	12(AP),R1		; YES, GET ADDRESS
	BEQL	60$			; DEFAULTED
	MOVL	R0,(R1)			; STORE STATUS IN IND
60$:	RET

	.SBTTL	LPA$CLOCKA - SET CLOCK A RATE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SETS THE RATE FOR CLOCK A
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	IRATE(AP)		ADDRESS OF LONGWORD CONTAINING CLOCK RATE
;	IPRSET(AP)		ADDRESS OF WORD CONTAINING CLOCK PRESET
;	IND(AP)			ADDRESS OF LONGWORD TO RECEIVE COMPLETION STATUS
;	CHAN(AP)		ADDRESS OF WORD CONTAINING NUMBER TO IDENTIFY
;				WHICH LPA-11
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IND(AP)			ADDRESS OF LONGWORD TO RECEIVE COMPLETION STATUS
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	1	INDICATES SUCCESS
;	VARIOUS VMS SYSTEM STATUS CODES INDICATE ERRORS
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	LPA$CLOCKA,^M<R2,R3,R4,R5,R6,R7>

	MOVL	#1,R5			; MODE WORD

	; BUILD CLOCK STATUS.  IF IRATE IS >= 0 THEN USE AS IS.  IF
	; IRATE IS < 0 THEN SET SCHMITT TRIGGER 1 INTERRUPT ENABLE (BIT 14).
	MOVL	#^X4141,R6		; CLOCK STATUS INCLUDING BIT 14
	MOVL	@4(AP),R0		; PUT IRATE IN R0
	BLSS	10$			; ITS < 0.  LEAVE RATE = 0 (BITS 1 - 3)
	BICW	#^X4000,R6		; ITS >= 0.  CLEAR BIT 14
	INSV	R0,#1,#3,R6		; INSERT RATE
10$:	MOVZWL	@8(AP),R7		; CLOCK PRESET

	; PUT # OF ARGS LEFT IN R0, POINTER TO THEM IN R1, AND 
	; JOIN COMMON CLOCK ROUTINE
	SUBB3	#2,(AP),R0		; # OF ARGS LEFT
	MOVAL	12(AP),R1		; ADDRESS OF NEXT ARG
	BRB	CLKCOM			; JOIN COMMON ROUTINE

	.SBTTL	LPA$CLOCKB - SET CLOCK B RATE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SETS THE RATE FOR CLOCK B
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	IRATE(AP)		ADDRESS OF LONGWORD CONTAINING CLOCK RATE
;	IPRSET(AP)		ADDRESS OF WORD CONTAINING CLOCK PRESET
;	MODE(AP)		ADDRESS OF A WORD WHICH SPECIFIES OPTIONS
;				BIT 0 SET INDICATES OPERATE CLOCK B IN
;					NON-INTERRUPT MODE
;				BIT 1 SET INDICATES THE FEED B TO A BIT SHOULD
;					BE SET IN THE CLOCK B STATUS REGISTER
;	IND(AP)			ADDRESS OF LONGWORD TO RECEIVE COMPLETION STATUS
;	CHAN(AP)		ADDRESS OF WORD CONTAINING NUMBER TO IDENTIFY
;				WHICH LPA-11
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IND(AP)			ADDRESS OF LONGWORD TO RECEIVE COMPLETION STATUS
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	1	INDICATES SUCCESS
;	VARIOUS VMS SYSTEM STATUS CODES INDICATE ERRORS
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	LPA$CLOCKB,^M<R2,R3,R4,R5,R6,R7>

	MOVL	#^X11,R5		; MODE WORD
	MOVL	#^X41,R6		; CLOCK STATUS
	MOVL	4(AP),R0		; ADDRESS OF IRATE
	BEQL	40$			; DEFAULTED
	MOVL	(R0),R0			; GET IRATE
	BEQL	40$			; ZERO
	INSV	R0,#1,#3,R6		; INSERT IRATE
	BLBC	@12(AP),20$		; BR. IF LEAVE INTERRUPTS ENABLED
	BICB	#^X40,R6		; CLEAR INTERRUPT ENABLE
20$:	BBC	#1,@12(AP),30$		; BR. IF DON'T SET FEED B TO A
	BISB	#^X20,R6		; SET FEED B TO A
30$:	MOVZWL	@8(AP),R7		; PRESET

40$:	; GET # OF ARGS LEFT IN R0, ADDRESS OF NEXT ARG IN R1
	SUBB3	#3,(AP),R0		; NUMBER OF ARGS LEFT
	MOVAL	16(AP),R1		; ADDRESS OF NEXT ARG

CLKCOM:	; BOTH CLOCK ROUTINES COME HERE FOR COMMON PROCESSING
	CLRQ	R3			; R3 WILL HOLD LPA CHANNEL
					; R4 WILL HOLD ADDR. OF IND

	DECB	R0			; DECR. ARG COUNT
	BLSS	50$			; NO MORE ARGS
	MOVL	(R1)+,R4		; ADDR. OF IND

	DECB	R0			; DECR. ARG COUNT
	BLSS	50$			; NO MORE ARGS
	MOVL	(R1)+,R3		; ADDRESS OF LPA CHANNEL
	BEQL	50$			; DEFAULTED
	MOVZWL	(R3),R3			; GET CHANNEL NUMBER

50$:	; NOW ALLOCATE SPACE ON STACK TO RECEIVE CHANNEL NUMBER ASSIGNED
	; AND SPACE FOR I/O STATUS BLOCK FOR QIO.
	SUBL	#12,SP			; 3 LONGWORDS SHOULD DO IT
	MOVL	SP,R2			; PLACE TO STORE CHANNEL NUMBER ASSIGNED
	BSBW	LPA$$ASSIGN		; ASSIGN CHANNEL
	BLBC	R0,90$			; ERROR

	; NOW SET CLOCK
	$QIOW_S	#CLKEVFLG,-		; EVENT FLAG
		(R2),-			; CHANNEL NUMBER
		#IO$_SETCLOCK,-	; I/O FUNCTION CODE
		4(R2),-			; I/O STATUS BLOCK
		,,-			; AST ADDRESS, AST PARAMETER
		,R5,R6,R7		; MODE WORD, CLOCK STATUS, PRESET
	BLBC	R0,80$			; ERROR
	MOVZWL	4(R2),R0		; I/O STATUS
	BLBC	R0,80$			; ERROR

	; NOW DEASSIGN CHANNEL
	$DASSGN_S	(R2)
	BRB	90$			; STATUS IS IN R0

80$:	; ERROR IN QIO - SAVE STATUS BEFORE DEASSIGNING CHANNEL
	PUSHL	R0			; SAVE STATUS
	$DASSGN_S	(R2)
	POPL	R0			; RESTORE STATUS

90$:	TSTL	R4			; IND SPECIFIED?
	BEQL	95$			; NO
	MOVL	R0,(R4)			; YES, STORE STATUS
95$:	RET

	.SBTTL	LPA$LAMSKS - SET MASKS BUFFER
;++
; FUNCTIONAL DESCRIIPTION:
;
;	THIS ROUTINE PERFORMS TWO COMPLETELY SEPARATE FUNCTIONS.
;	FIRST IT MUST BE CALLED BY PROGRAMS THAT UTILIZE TWO OR MORE
;	LPA-11S TO IDENTIFY WHICH LPA-11 IS TO BE USED IN A SUBSEQUENT
;	START SWEEP CALL.  THE SECOND ARGUMENT IS A NUMBER WHICH IS APPENDED
;	TO THE LOGICAL NAME THAT IS USED TO ASSIGN A CHANNEL TO.  IT IS 
;	ASSUMED THAT THE USER HAS ASSIGNED THE RESULTANT LOGICAL NAME
;	TO THE APPROPRIATE LPA-11.
;	SECONDLY, THIS ROUTINE MUST BE CALLED BY PROGRAMS THAT UTILIZE
;	DIGITAL INPUT STARTING OR EVENT MARKING.  ARGUMENTS CAN SUPPLIED
;	FOR THE DIGITAL INPUT START WORD AND MASK AND FOR THE EVENT MARK
;	WORD AND MASK.
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	LAMSKB(AP)	ADDRESS OF 8 BYTE ARRAY
;	NUM(AP)		ADDRESS OF WORD CONTAINING NUMBER TO APPEND TO LOG. NAME
;	IUNIT(AP)	UNUSED (PRESENT FOR RSX-11M COMPATIBILITY)
;	STWRDN(AP)	ADDRESS OF BYTE CONTAINING DIGITAL START CHANNEL
;	EVMRKN(AP)	ADDRESS OF BYTE CONTAINING EVENT MARK CHANNEL
;	STWRDM(AP)	ADDRESS OF WORD CONTAINING DIGITAL START MASK
;	EVMRKM(AP)	ADDRESS OF WORD CONTAINING EVENT MARK MASK
;	IND(AP)		ADDRESS OF LONGWORD TO RECEIVE STATUS
;
; IMPLICIT INPUTS:
; 
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IND(AP)		ADDRESS OF LONGWORD TO RECEIVE STATUS
;
; IMPLICIT OUTPUTS:
;
;	THE 8 BYTE ARRAY IS FILLED IN
;
; COMPLETION CODES:
;
;	1	INDICATES SUCCESS (THIS ROUTINE ALWAYS RETURNS SUCCESS.
;		THE ARGUMENT IS PRESENT FOR COMPATIBILITY ONLY)
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	LPA$LAMSKS,^M<R2,R3>
	
	MOVAL	4(AP),R3		; R3 CONTAINS ADDRESS OF ARGUMENT LIST
	MOVL	(R3)+,R2		; R2 CONTAINS ADDRESS OF 8 BYTE ARRAY
	CLRQ	(R2)			; CLEAR ARRAY

	; PROCESS NUM
	SUBB3	#2,(AP),R1		; R1 CONTAINS # OF REMAINING ARGS
	BLSS	90$			; NO MORE ARGS
	MOVL	(R3)+,R0		; GET ADDRESS OF NUM
	BEQL	10$			; DEFAULTED
	MOVW	(R0),6(R2)		; STORE IN ARRAY

10$:	; PROCESS STWRDN
	SUBB	#2,R1			; ENOUGH ARGS?
	BLSS	90$			; NOPE
	TSTL	(R3)+			; SKIP OVER UNUSED ARG
	MOVL	(R3)+,R0		; GET ADDRESS OF STRWDN
	BEQL	20$			; DEFAULTED
	MOVB	(R0),(R2)		; STORE IN ARRAY

20$:	; PROCESS EVMRKN
	DECB	R1			; ENOUGH ARGS?
	BLSS	90$			; NOPE
	MOVL	(R3)+,R0		; GET ADDRESS OF EVMRKN
	BEQL	30$			; DEFAULTED
	MOVB	(R0),1(R2)		; STORE IN ARRAY

30$:	; PROCESS STWRDM
	DECB	R1			; ENOUGH ARGS?
	BLSS	90$			; NOPE
	MOVL	(R3)+,R0		; GET ADDRESS OF STWRDM
	BEQL	40$			; DEFAULTED
	MOVW	(R0),2(R2)		; STORE IN ARRAY

40$:	; PROCESS EVMRKM
	DECB	R1			; ENOUGH ARGS?
	BLSS	90$			; NOPE
	MOVL	(R3)+,R0		; GET ADDRESS OF EVMRKN
	BEQL	50$			; DEFAULTED
	MOVW	(R0),4(R2)		; STORE IN ARRAY

50$:	; PROCESS IND
	DECB	R1			; ENOUGH ARGS?
	BLSS	90$			; NOPE
	MOVL	(R3)+,R0		; GET ADDRESS OF IND
	BEQL	90$			; DEFAULTED
	MOVL	#1,(R0)			; STORE SUCCESS STATUS

90$:	RET

	.SBTTL	LPA$SETADC - SET CHANNEL PARAMETERS
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SETS THE CHANNEL SAMPLING PARAMETERS.
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	IBUF(AP)	ADDRESS OF IBUF ARRAY
;	IFLAG(AP)	UNUSED (PRESENT FOR COMPATIBILITY WITH RSX-11M)
;	ICHN(AP)	IF INC IS DEFAULTED OR NON-ZERO, THIS IS THE ADDRESS
;			OF A BYTE CONTAINING THE INITIAL CHANNEL NUMBER.
;			IF INC = 0, THIS IS THE ADDRESS OF A RANDOM 
;			CHANNEL LIST.
;	NCHN(AP)	ADDRESS OF A WORD CONTAINING NUMBER OF SAMPLES TO
;			BE TAKEN PER SAMPLE SEQUENCE.
;	INC(AP)		ADDRESS OF A BYTE CONTAINING THE CHANNEL INCREMENT.
;			IF THIS BYTE CONTAINS 0, THEN ICHN IS THE ADDRESS
;			OF A RANDOM CHANNEL LIST.
;	IND(AP)		ADDRESS OF A LONGWORD TO RECEIVE STATUS.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IND(AP)		ADDRESS OF A LONGWORD TO RECEIVE STATUS
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	0		INDICATES LPA$SETIBF WAS NOT CALLED PRIOR TO THIS CALL
;	1		INDICATES SUCCESS
;
; SIDE EFFECTS:
;
;	VARIOUS FIELDS IN THE IBUF ARRAY ARE MODIFIED
;
;--

	.ENTRY	LPA$SETADC,^M<R2,R3,R4,R6>

	CLRL	R0			; STATUS
	MOVL	4(AP),R6		; ADDRESS OF IBUF ARRAY
	CMPW	IBF$Q_IOST(R6),#INITCODE  ; VERIFY LPA$SETIBF WAS CALLED
	BNEQ	80$			; IT WASN'T - ERROR
	MOVAL	12(AP),R3		; POINT TO ICHN ARG

	; PROCESS ICHN
	SUBB3	#3,(AP),R2		; ENOUGH ARGS?
	BLSS	70$			; NOPE
	MOVL	(R3)+,R4		; R4 = ADDRESS OF ICHN OR RCL

	; PROCESS NCHN
	DECB	R2			; ENOUGH ARGS?
	BLSS	20$			; NOPE
	MOVL	(R3)+,R1		; GET ADDRESS OF NCHN
	BEQL	10$			; DEFAULTED
	MOVW	(R1),IBF$L_CMDTBL+CMT$W_NCHN(R6)  ; STORE NCHN

10$:	; PROCESS INC
	DECB	R2			; ENOUGH ARGS?
	BLSS	20$			; NOPE
	MOVL	(R3)+,R1		; GET ADDRESS OF INC
	BEQL	20$			; DEFAULTED
	MOVB	(R1),IBF$L_CMDTBL+CMT$B_INC(R6)	; STORE INC
	BNEQ	20$			; NON-ZERO, SO ICHN IS NOT RCL ADDR.

	; INC = 0 SO ICHN IS RCL ADDRESS (IN R4)
	MOVL	R4,IBF$L_CMDTBL+CMT$L_RCLADDR(R6)  ; STORE RCL ADDRESS
	BRB	70$

20$:	; INC WAS EITHER DEFAULTED OR NON-ZERO, SO R4 POINTS TO ICHN VALUE
	TSTL	R4			; WAS ICHN DEFAULTED?
	BEQL	70$			; YES
	MOVB	(R4),IBF$L_CMDTBL+CMT$B_ICHN(R6)  ; NO, STORE ICHN VALUE

70$:	; SUCCESS RETURN
	BISW	#FLG_M_SETADC,IBF$W_FLAGS(R6)	; SET SETADC CALLED BIT
	INCL	R0			; SET SUCCESS CODE

80$:	; STORE COMPLETION CODE IN IND
	CMPB	(AP),#6			; ENOUGH ARGS?
	BLSSU	90$			; NO
	MOVL	24(AP),R1		; GET ADDRESS OF IND
	BEQL	90$			; DEFAULTED
	MOVL	R0,(R1)			; STORE VALUE IN IND
90$:	RET

	.SBTTL	LPA$CVADF - CONVERT A/D TO FLOATING POINT
	.SBTTL	LPA$FLT16 - CONVERT UNSIGNED WORD TO FLOATING POINT
;++
; FUNCTIONAL DESCRIPTION:
;
;	LPA$CVADF CONVERTS A NUMBER RETURNED BY AN A/D CONVERTER TO
;	FLOATING POINT.  THE NUMBER IS A SIGNED 12 BIT NUMBER WITH BIT 11
;	THE SIGN BIT.  IT IS FOR THIS REASON THAT ^X0800 IS SUBTRACTED
;	FROM THE NUMBER BEFORE IT IS CONVERTED TO FLOATING POINT.  NOTE THAT
;	THE ORIGINAL CVADF ROUTINE (ON RSX-11M?) EXPECTED AN A/D VALUE
;	IN BITS 0 - 11 OF THE WORD AND A GAIN IN BITS 12 - 15.  HOWEVER,
;	THE LPA-11 ON VAX DOES NOT SUPPORT ANY A/D'S THAT SUPPLY A GAIN
;	IN BITS 12 - 15.  THEREFORE, THIS ROUTINE DOES NOT USE THOSE BITS
;	AS A GAIN.
;	LPA$FLT16 CONVERTS AN UNSIGNED(!) WORD TO FLOATING POINT AND IS
;	INCLUDED HERE FOR COMPATIBILITY REASONS.
;
; CALLING SEQUENCE:
;
;	CALLS/CALLG
;	THESE ROUTINES MAY BE CALLED AS FUNCTIONS
;
; INPUT PARAMETERS:
;
;	IVAL(AP)		ADDRESS OF WORD TO CONVERT
;	VAL(AP)			ADDRESS OF LONGWORD TO RECEIVE RESULT
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	VAL(AP)			ADDRESS OF LONGWORD TO RECEIVE RESULT
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--


	.ENTRY	LPA$FLT16,^M<>
	MOVZWL	@4(AP),R0		; CONVERT INPUT WORD TO LONGWORD
	CVTLF	R0,R0			; CONVERT TO FLOATING POINT
	BRB	CVCOM

	.ENTRY	LPA$CVADF,^M<>
	SUBW3	#^X0800,@4(AP),R0	; SUBTRACT ^X0800 FROM INPUT
	CVTWF	R0,R0			; CONVERT TO FLOATING


CVCOM:	; OPTIONALLY STORE RESULT
	CMPB	(AP),#2			; ENOUGH ARGS SUPPLIED?
	BLSSU	90$			; NO
	MOVL	8(AP),R1		; GET ADDRESS OF ARG
	BEQL	90$			; DEFAULTED
	MOVL	R0,(R1)			; STORE RESULT
90$:	RET

	.SBTTL	LPA$XRATE - COMPUTE CLOCK RATE AND PRESET
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE COMPUTES A CLOCK RATE AND PRESET GIVEN A DESIRED
;	DWELL (INTER-SAMPLE INTERVAL).  THE CLOCK RATE IS ALWAYS
;	THE HIGHEST RATE WHICH WILL PERMIT THE REQUESTED DWELL IN ORDER TO
;	ACHIEVE THE FINEST RESOLUTION.  THIS MAY BE DIFFERENT FOR CLOCK A
;	AND CLOCK B AS THEY HAVE DIFFERENT MAXIMUM PRESETS.  THE CLOCK RATE
;	IS RETURNED AS A NUMBER (1 - 5) WHICH CAN THEN BE USED AS THE CLOCK
;	RATE FOR LPA$CLOCKA OR LPA$CLOCKB.  IF CALLED AS A FUNCTION, THE 
;	FUNCTION VALUE IS THE ACTUAL DWELL BEING SUPPLIED, WHICH MAY DIFFER
;	FROM THE REQUESTED DWELL DUE TO TRUNCATION ERROR.
;
; CALLING SEQUENCE:
;
;	CALLS/G
;	MAY BE CALLED AS A FUNCTION
;
; INPUT PARAMETERS:
;
;	DWELL(AP)		ADDRESS OF LONGWORD CONTAINING DWELL AS
;				A FLOATING POINT NUMBER
;	IRATE(AP)		ADDRESS OF A LONGWORD TO RECEIVE THE CLOCK
;				RATE (1 - 5) (0 INDICATES ERROR)
;
;	IPRSET(AP)		ADDRESS OF A WORD TO RECEIVE CLOCK PRESET
;	IFLAG(AP)		ADDRESS OF A BYTE WHICH INDICATES WHETHER
;				THE COMPUTATION IS FOR CLOCKA (MAXIMUM
;				PRESET = 65535) OR CLOCK B (MAXIMUM PRESET =
;				255) 0 = CLOCKA.  NON-0 = CLOCK B.
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	IRATE(AP)		SEE ABOVE
;	IPRSET(AP)		SEE ABOVE
;	R0			FUNCTION VALUE.  ACTUAL DWELL COMPUTED
;				AS A FLOATING POINT NUMBER.
;
;	NOTE THAT IF THE DESIRED DWELL IS TOO SMALL OR TOO LARGE TO BE
;	ACHIEVED, THEN BOTH IRATE(AP) AND R0 WILL CONTAIN ZERO
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	IF IRATE(AP) OR R0 EQUALS ZERO, THEN THE DESIRED DWELL COULD
;	NOT BE ACHIEVED.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	LPA$XRATE,^M<R2,R3,R4,R5>

	; GET MAXIMUM PRESET
	MOVF	#^F65535.0,R5		; MAXIMUM PRESET FOR CLOCK A
	TSTB	@16(AP)			; TEST FLAG
	BEQL	10$			; COMPUTATION IS FOR CLOCK A
	MOVF	#^F255.0,R5		; MAXIMUM PRESET FOR CLOCK B

10$:	MOVF	@4(AP),R4		; DESIRED DWELL
	CMPF	R4,#^F0.000001		; IS IT WITHIN RANGE?
	BLSS	40$			; NO
	MOVF	#^F1000000.0,R3		; MAXIMUM CLOCK RATE (1 MHZ)
	MOVL	#1,R2			; LOOP COUNTER AND CLOCK RATE NUMBER

20$:	; CALCULATE PRESET:  PRESET = RATE X DWELL
	MULF3	R4,R3,R1		; CALCULATED PRESET IN R1
	CMPF	R1,R5			; LESS THAN MAXIMUM PRESET ALLOWED?
	BLEQ	30$			; YES - USE IT
	DIVF	#^F10.0,R3		; NO - DIVIDE CLOCK RATE BY 10
	AOBLEQ	#5,R2,20$		; AND TRY NEXT CLOCK RATE

	; IF WE FALL THROUGH THAN DESIRED DWELL IS TOO GREAT TO BE
	; ACHIEVED WITH THE SLOWEST CLOCK RATE AND LARGEST PRESET.
	BRB	40$

30$:	; HAVE CALCULATED PRESET IN R1.  ADD 0.5 AND TRUNCATE TO AN INTEGER
	ADDF	#^F0.5,R1		; TO ROUND
	CVTFL	R1,R1			; CVT TO A LONGWORD TO AVOID OVERFLOW
	MOVZWL	R1,R1			; NOW TRUNCATE TO A WORD

	; STORE PRESET (AS TWO'S COMPLEMENT OF CALC. PRESET BECAUSE THAT'S
	; WHAT THE CLOCKS USE)
	MNEGW	R1,@12(AP)

	; NOW CONVERT EVERYTHING BACK TO FLOATING POINT TO GIVE CALLER
	; ACTUAL DWELL COMPUTED (WHICH MAY BE DIFFERENT DUE TO TRUNCATION ERROR)
	CVTLF	R1,R1			; CONVERT TO FLOATING POINT
	DIVF3	R3,R1,R0		; ACTUAL DWELL = PRESET / RATE
	BRB	50$

40$:	; ERROR - EITHER DESIRED DWELL WAS TOO GREAT ( > 655.35 FOR CLOCK A
	; OR > 2.55 FOR CLOCK B) OR WAS TOO SMALL ( < 0.000001 FOR EITHER CLOCK)
	CLRL	R2			; RETURN 0 FOR CLOCK RATE NUMBER
	CLRL	R0			; AND 0 FOR COMPUTED DWELL

50$:	; STORE CLOCK RATE NUMBER (IN R2)
	MOVL	R2,@8(AP)
	RET				; COMPUTED DWELL IN R0 FOR FUNCTION CALL

	.SBTTL	LPA$LOADMC - LOAD MICROCODE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SENDS A REQUEST TO THE LPA-11 MICROCODE LOADER
;	PROCESS TO LOAD A SPECIFIED VERSION OF MICROCODE INTO A SPECIFIED
;	LPA-11.  THE LPA-11 IS SPECIFIED BY A NUMBER WHICH IS APPENDED
;	TO A LOGICAL NAME (SEE LPA$$ASSIGN ROUTINE)
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	ITYPE(AP)		ADDRESS OF BYTE CONTAINING TYPE OF
;				MICROCODE TO LOAD
;					1 = MULTIREQUEST
;					2 = DED. A/D
;					3 = DED. D/A
;	INUM(AP)		ADDRESS OF WORD CONTAINING NUMBER TO APPEND
;				TO LOGICAL NAME (TO ASSIGN CHANNEL TO)
;	ISTAT(AP)		ADDRESS OF LONGWORD TO RECEIVE COMPLETION CODE
;	IERROR(AP)		ADDRESS OF LONGWORD TO RECEIVE SECOND
;				LONGWORD OF I/O STATUS BLOCK IF COMPLETION
;				CODE IS SS$_DEVCMDERR, SS$_DEVREQERR, OR
;				SS$_CTRLERR
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	ISTAT(AP)		SEE ABOVE
;	IERROR(AP)		SEE ABOVE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	VARIOUS SYSTEM STATUS'S
;
; SIDE EFFECTS:
;
;	NONE
;--

	.ENTRY	LPA$LOADMC,^M<R2,R3,R4,R5>

	MOVZBL	(AP),R4			; GET NUMBER OF ARGUMENTS
	CLRL	R3			; DEFAULT NUMBER TO APPEND TO LOG. NAME
	MOVL	#1,R5			; DEFAULT MICROCODE TYPE

	; PROCESS ITYPE
	DECL	R4			; ENOUGH ARGUMENTS SUPPLIED?
	BLSS	50$			; NO
	MOVL	4(AP),R0		; GET ADDRESS OF ITYPE
	BEQL	40$			; DEFAULTED
	MOVZBL	(R0),R5			; GET ITYPE

40$:	; PROCESS INUM
	DECL	R4			; ENOUGH ARGUMENTS SUPPLIED?
	BLSS	50$			; NO
	MOVL	8(AP),R0		; GET ADDRESS OF INUM
	BEQL	50$			; DEFAULTED
	MOVZWL	(R0),R3			; GET INUM

50$:	; ASSIGN CHANNEL TO LPA-11
	MOVAW	-(SP),R2		; GET ADDRESS OF WORD ON TOP OF
					; STACK TO RECEIVE CHANNEL NUMBER
	BSBW	LPA$$ASSIGN		; ASSIGN CHANNEL
	BLBC	R0,70$			; ERROR

	; NOW SEND REQUEST TO LOADER PROCESS
	PUSHL	R5			; PUSH MICROCODE TYPE
	PUSHAW	(R2)			; PUSH ADDRESS OF CHANNEL
	CALLS	#2,LPA$$SNDLDRQ		; SEND LOAD REQUEST

70$:	; PROCESS ISTAT
	DECL	R4			; ENOUGH ARGUMENTS SUPPLIED?
	BLSS	90$			; NO
	MOVL	12(AP),R2		; GET ADDRESS OF ISTAT
	BEQL	80$			; DEFAULTED
	MOVL	R0,(R2)			; STORE ISTAT

80$:	; PROCESS IERROR
	DECL	R4			; ENOUGH ARGUMENTS SUPPLIED?
	BLSS	90$			; NO
	MOVL	16(AP),R2		; GET ADDRESS OF IERROR
	BEQL	90$			; DEFAULTED
	MOVL	R1,(R2)			; STORE IERROR

90$:	RET

	.SBTTL	LPA$$ASSIGN - ASSIGN A CHANNEL TO AN LPA-11
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE ASSIGNS A CHANNEL TO A LOGICAL NAME OF THE FORM
;	LPA11$n, WHERE n IS THE VALUE OF ONE OF THE INPUT ARGUMENTS.
;	IT IS ASSUMED THAT THE USER HAS ALREADY ASSIGNED THAT LOGICAL NAME
;	TO AN LPA-11.
;
; CALLING SEQUENCE:
;
;	BSBW/B
;
; INPUT PARAMETERS:
;
;	R2	IS THE ADDRESS OF THE LOCATION TO STORE THE CHANNEL NUMBER 
;		ASSIGNED
;	R3	CONTAINS THE NUMBER TO BE APPENDED TO THE LOGICAL NAME
;		TO ASSIGN A CHANNEL TO.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	CONTAINS A COMPLETION CODE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	THE SAME ONES THAT ARE SUPPLIED BY THE $ASSIGN SYSTEM SERVICE
;
; SIDE EFFECTS:
;
;	R1 IS NOT PRESERVED
;
;--

LPA$$ASSIGN:
	PUSHR	#^M<R2,R3,R4,R5>	; SAVE SOME REGISTERS

	MOVL	SP,R5			; SAVE STACK POINTER

	; CONVERT NUMBER TO ASCII STRING ON STACK

10$:	; CONVERT NEXT DIGIT
	CLRL	R4			; HIGH BITS OF DIVIDEND
	EDIV	#10,R3,R3,R4		; QUO.-> R3   REM. -> R4
	BISB3	#^X30,R4,-(SP)		; CONVERT TO ASCII AND PUSH ON STACK
	TSTL	R3			; REPEAT?
	BNEQ	10$			; BR. IF YES

	; NOW PUSH PREFIX STRING ONTO STACK
	MOVL	#DNPREFIXS-1,R3		; LENGTH OF STRING
20$:	MOVB	DNPREFIX[R3],-(SP)	; PUSH NEXT CHAR ON STACK
	SOBGEQ	R3,20$			; REPEAT

	; NOW BUILD A STRING DESCRIPTOR ON STACK
	SUBL3	SP,R5,R3		; OVERALL LENGTH OF STRING
	PUSHAB	(SP)			; PUSH ADDRESS OF STRING
	PUSHL	R3			; PUSH LENGTH
	MOVL	SP,R4			; R4 POINTS TO STRING DESCRIPTOR

	; NOW ASSIGN THE CHANNEL
	$ASSIGN_S	(R4),(R2)

	MOVL	R5,SP			; RESTORE STACK POINTER
	POPR	#^M<R2,R3,R4,R5>	; RESTORE REGISTERS
	RSB				; RETURN CODE IN R0 FROM $ASSIGN



	.END
