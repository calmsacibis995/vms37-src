	.TITLE	LPA$SNDLDRQ - SEND LOAD REQUEST
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	LPA-11 PROCEDURE LIBRARY
;
; ABSTRACT:
;	THIS ROUTINE SENDS A LOAD REQUEST TO THE LPA-11 MICROCODE
;	LOADER PROCESS AND RECEIVES STATUS OVER A TEMPORARY MAILBOX
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  8-OCT-78
;
; MODIFIED BY:
;
;	V03-001	SBL3001		Steven B. Lionel	30-Mar-1982
;		Change module name to LPA$SNDLDRQ.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DIBDEF			; DIB OFFSETS
	$IODEF			; I/O FUNCTION CODES

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
; OFFSETS FROM STACK FRAME FOR TEMPORARY STORAGE

WRKSPACE = 112		; AMOUNT OF WORKSPACE TO ALLOCATE

IOSB = -112		; I/O STATUS BLOCK
SMBCHAN = -104		; SEND MAILBOX CHANNEL NUMBER
RMBCHAN = -102		; RECEIVE MAILBOX CHANNEL NUMBER
MBXBFR = -100		; MAILBOX BUFFER
CHANBFRDSC = -68	; CHANNEL CHARACTERISTICS BUFFER DESCRIPTOR
CHANBFR = -60		; CHANNEL CHARACTERISTICS BUFFER

CHANBFRSIZ = 60		; CHANNEL CHARACTERISTICS BUFFER SIZE

; OFFSETS INTO MAILBOX MESSAGE

MBX$L_TYPE = 0			; MESSAGE TYPE
MBX$B_CTRLR = 4			; CONTROLLER
MBX$B_MCTYPE = 5		; MICROCODE TYPE
MBX$W_RMBUNIT = 6		; RETURN MAILBOX UNIT
;
; OWN STORAGE:
;

	.PSECT	_LPA$CODE,PIC,SHR,EXE,NOWRT,LONG


SMBDSC:	.LONG	SMBNAMSIZ		; SEND MAILBOX NAME DESCRIPTOR
	.LONG	SMBNAM

SMBNAM:	.ASCII	/LPA$LOADER/		; SEND MAILBOX NAME
SMBNAMSIZ = .-SMBNAM

	.SBTTL	LPA$$SNDLDRQ - SEND REQUEST TO LOADER PROCESS
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SENDS A LOAD MICROCODE REQUEST TO THE LOADER PROCESS
;	AND RECEIVES A RESPONSE OVER A TEMPORARY MAILBOX
;
; CALLING SEQUENCE:
;
;	CALLS/G
;
; INPUT PARAMETERS:
;
;	4(AP)		ADDRESS OF A WORD CONTAINING CHANNEL ASSIGNED
;	8(AP)		MICROCODE TYPE TO LOAD
;			1 = MULTIREQUEST MODE
;			2 = DEDICATED A/D MODE
;			3 = DEDICATED D/A MODE
;
; IMPLICIT INPUTS:
;
;	THIS ROUTINE ASSUMES THAT A CHANNEL HAS BEEN ASSIGNED TO AN LPA-11
;
; OUTPUT PARAMETERS:
;
;	R0		CONTAINS COMPLETION CODE
;	R1		CONTAINS SECOND LONGWORD OF I/O STATUS BLOCK
;			IF R0 CONTAINS SS$_DEVREQERR, SS$_DEVCMDERR, OR
;			SS$_CTRLERR
;
; IMPLICIT OUTPUTS:
;
;	THE CHANNEL IS DEASSIGNED
;
; COMPLETION CODES:
;
;	VARIOUS COMPLETION CODES RETURNED BY THE SYSTEM
;
;--

	.ENTRY	LPA$$SNDLDRQ, ^M<R2,R3,R4>

	; ALLOCATE WORK SPACE ON STACK
	MOVAB	-WRKSPACE(SP),SP

	CLRL	MBXBFR+MBX$L_TYPE(FP)		; CLEAR MESSAGE TYPE
	MOVB	8(AP),MBXBFR+MBX$B_MCTYPE(FP)	; STORE M.C. TYPE IN MAILBOX BFR
	MOVL	4(AP),R3			; GET ADDRESS OF CHANNEL

	MOVAB	CHANBFR(FP),R2			; GET ADDRESS OF CHAN. INFO. BFR
	MOVZBL	#CHANBFRSIZ,CHANBFRDSC(FP)	; BUILD A DESCRIPTOR TO 
	MOVL	R2,CHANBFRDSC+4(FP)		; CHANNEL INFO. BUFFER

	$GETCHN_S	PRIBUF = CHANBFRDSC(FP),-	; GET CHANNEL INFO.
			CHAN = (R3)			; FOR DEVICE
	PUSHL	R0			; SAVE STATUS

	$DASSGN_S	CHAN = (R3)		; DEASSIGN CHANNEL TO DEVICE
	POPL	R0			; RESTORE STATUS
	BLBC	R0,10$			; ERROR

	; GET DEVICE NAME AND VERIFY ITS AN LPA-11 BEFORE GETTING CONTROLLER
	MOVZWL	B^CHANBFR+DIB$W_DEVNAMOFF(FP),R1   ; GET OFFSET TO DEVICE NAME
	ADDL	R1,R2				; ADD TO START ADDR. OF BUFFER
	MOVZWL	#SS$_IVDEVNAM,R0		; ASSUME ERROR
	CMPB	(R2)+,#3			; SHOULD HAVE AT LEAST 3 CHARS.
	BLSSU	10$				; ERROR - LESS THAN 3 CHARS
	CMPW	(R2)+,#^A'LA'			; MAKE SURE DEVICE NAME IS 'LA'
	BNEQ	10$				; IT ISN'T - ERROR
	MOVB	(R2)+,MBXBFR+MBX$B_CTRLR(FP)	; COPY CTRLR LETTER INTO MB BFR

;
;	NOW SEND LOAD REQUEST TO LOADER PROCESS AND GET REPLY
;
	$ASSIGN_S	DEVNAM = SMBDSC,-	; DEVICE NAME
			CHAN = SMBCHAN(FP)	; CHANNEL
	BLBS	R0,20$			; SUCCESS
10$:	BRW	90$			; ERROR

20$:	; CREATE A TEMPORARY MAILBOX TO GET REPLY AND GET ITS UNIT NUMBER
	$CREMBX_S	PRMFLG = #0,-		; TEMPORARY MAILBOX
			CHAN = RMBCHAN(FP),-	; CHANNEL
			MAXMSG = #32,-		; MAXIMUM MESSAGE SIZE
			BUFQUO = #32		; BUFFER QUOTA
	BLBS	R0,30$			; SUCCESS
	BRW	70$			; ERROR

30$:	$GETCHN_S	PRIBUF = CHANBFRDSC(FP),-	; PRIMARY BUFFER
			CHAN = RMBCHAN(FP)		; CHANNEL
	BLBC	R0,60$			; ERROR

	MOVW	CHANBFR+DIB$W_UNIT(FP),-	; STORE UNIT # OF RETURN
		MBXBFR+MBX$W_RMBUNIT(FP)	; MAILBOX IN BUFFER

	; SEND REQUEST TO LOADER PROCESS
	$QIOW_S		FUNC = #IO$_WRITEVBLK!IO$M_NOW,-	; FUNCTION
			CHAN = SMBCHAN(FP),-			; CHANNEL
			IOSB = IOSB(FP),-			; I/O STATUS
			P1 = MBXBFR(FP),-			; BUFFER
			P2 = #8					; SIZE
	BLBC	R0,60$			; ERROR
	MOVQ	IOSB(FP),R0		; GET I/O STATUS
	BLBC	R0,60$			; ERROR

	; GET REPLY FROM LOADER PROCESS
	$QIOW_S		FUNC = #IO$_READVBLK,-	; FUNCTION
			CHAN = RMBCHAN(FP),-	; CHANNEL
			IOSB = IOSB(FP),-	; I/O STATUS BLOCK
			P1 = MBXBFR(FP),-	; BUFFER
			P2 = #32		; SIZE
	BLBC	R0,60$			; ERROR
	MOVQ	IOSB(FP),R0		; GET I/O STATUS
	BLBC	R0,60$			; ERROR

	; HAVE REPLY - PICK IT UP
	MOVQ	MBXBFR(FP),R0

60$:	; DEASSIGN BOTH MAILBOX CHANNELS
	MOVQ	R0,-(SP)		; SAVE STATUS
	$DASSGN_S	RMBCHAN(FP)
	BRB	80$

70$:	; DEASSIGN SEND MAILBOX CHANNEL
	MOVQ	R0,-(SP)		; SAVE STATUS
80$:	$DASSGN_S	SMBCHAN(FP)

	MOVQ	(SP)+,R0		; RESTORE STATUS

90$:	RET



	.END
