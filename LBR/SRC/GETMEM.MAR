	.TITLE	GETMEM	Allocate/deallocate virtual memory
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:  Memory allocation routiens
;
; ABSTRACT:  ALLOCATE AND DEALLOCATE VIRTUAL BLOCK
;
;
; ENVIRONMENT:  VAX Native mode
;
; AUTHOR:  K.D. MORSE, CREATION DATE:  25-APR-77
;
; MODIFIED BY:
;
;	X01.01		001	B.L. SCHREIBER	9-FEB-1979
;		Correct error in allocation routine.
;	V01.02		008	B.L. SCHREIBER	26-OCT-1979
;		Declare $CRFMSG
;	V01.03		010	B.L. SCHREIBER	13-NOV-1979
;		Word-relative references
;	V01.04			B.L. SCHREIBER	15-NOV-1979
;		Generalize into GETMEM.
;--

	.SBTTL	declarations
;
; Declar macros
;
	$libdef					; Declare run-time library error codes
;
; EQUATED SYMBOLS:
;

blk$l_addr = 0					; Offset to addr of next block
blk$l_size = 4					; Offset to size of this block
mem$k_roundup = 8				; Round allocation up to 8 bytes
mem$k_memexp = 128				; Number of pages to expand by
mem$k_maxblk = mem$k_memexp * 512		; Largest block that can be allocated
mem$_blkwthinbl = lib$_badbloadr		; Block deallocated within deallocated block
mem$_illblksize = lib$_badblosiz		; Illegal block size
mem$_success = 1				; Success

;
; Own storage:
;

	.PSECT	$OWN$, NOPIC, USR, CON, REL, LCL, NOSHR, NOEXE, RD, WRT, NOVEC

mem$l_maxblk::					; Size of expand region request
	.long	mem$k_maxblk			; (set up by lbr$open)
mem$l_memexp::					; Number of pages in expand region request
	.long	mem$k_memexp			; (set up by lbr$open)
new$l_blks:: 	.LONG	0,0			; Addresses of expanded pages
mem$l_dynmem:: 	.LONG	0,0			; Listhead of dynamic memory

	.DEFAULT DISPLACEMENT, WORD		; Use word displacement

	.SBTTL	LBR$GET_VM	Allocate virtual memory
;++
; Functional description:
;
; This routine allocates a block of dynamic memory.  The requested block
; size is rounded up to the nearest four bytes.  An error condition is
; returned if the block cannot be allocated.
; First fit algorithm is used.
;
; Calling sequence:
;
;	BSBW	LBR$GET_VM
;
; Input parameters:
;
;	R0		Address of longword containing number of bytes to allocate
;	R1		Address of longword to store allocated memory address
;
; Completion codes:
;
;	success:
;		r0 - contains a one
;	failure:
;		r0 - contains a zero
;
;
; Side effects:
;
; The dynamic memory list is updated.  More dynamic memory is acquired
; if necessary
;
;--


	.PSECT	$CODE$, NOPIC, USR, CON, REL, LCL, NOSHR, EXE, RD, NOWRT, NOVEC

;crf$alblk::
;	moval	-(sp),r1			; set location to return result
;	bsbb	lbr$get_vm			; get the memory
;	popl	r1				; return result in r1
;	rsb

;lnk$alloblk::
lbr$get_vm::
	pushr	#^M<r2, r3, r4>			; Save registers
	movl	r1,r4				; Save return result address
	addl3	#<mem$k_roundup-1>,r0,r3	; Round up to the nearest
	bicl2	#<mem$k_roundup-1>,r3		; Multiple of four bytes
	bleq	10$				; Check for size <= 0
	cmpl	r3,mem$l_maxblk			; Check size > maximum
	bleq	40$				; Branch on legal size
10$:	movl	#mem$_illblksize,r0		; Report illegal block size
	brb	al_blk_exit			; Return
;
; Expand the program region
;
20$:	$EXPREG_S	mem$l_memexp,new$l_blks; Expand dynamic memory
	blbc	r0,al_blk_exit			; Branch if it failed
;
; Now insert memory into list.
;
30$:	movl	new$l_blks,r1			; Get address of new block
	movl	mem$l_maxblk,r0			; Get size of new block
	bsbb	lbr$free_vm			; Go insert new blk in list
	blbc	r0,al_blk_exit			; Branch if failed to insert new block
;
; Search down list for first block >= size requested.
;
40$:	movab	mem$l_dynmem,r1			; Get listhead of dynamic memory
50$:	movl	r1,r2				; Set new previous block
	movl	(r2),r1				; Get address of free block
	beql	20$				; End of list, go expand memory
	cmpl	r3,blk$l_size(r1)		; Requested size > block size?
	bgtr	50$				; Yes, keep looking
	beql	60$				; Branch on same size
;
; Take part of this block and link the rest back into the list.
;
	subl2	r3,blk$l_size(r1)		; Subtract off requested size
	cmpl	blk$l_size(r1),#8		; Did we allocate the bookkeeping words?
	bleq	60$				; If so, go pretend it's a good fit.
						; This can float at most 4 bytes.
	addl2	blk$l_size(r1),r1		; Get address of requested block
	brb	70$				; Return
;
; Block was perfect fit.  delete it from the list.
;
60$:	movl	blk$l_addr(r1),blk$l_addr(r2)	; Set pointer to next block
	clrq	blk$l_addr(r1)			; Clean up the block
70$:	movl	#mem$_success,r0		; Set success status code
	movl	r1,(r4)				; Return address to caller
al_blk_exit:
	popr	#^m<r2, r3, r4>
	rsb

	.SBTTL	LBR$FREE_VM	Free virtual memory
;++
; Functional description:
;
; This routine deallocates a block of memory and inserts it into a dynamic
; Memory list.  The block is zeroed and its size is rounded up to the
; Nearest four bytes.  If it is adjacent to another block, the two blocks
; are compacted into one.
;
; Calling sequence:
;
;	BSBW	LBR$FREE_VM
;
; Input parameters:
;
;	R0		Address of longword containing size of block to deallocate
;	R1		Address of longword containing address of block to deallocate
;
; Completion codes:
;
;	success:
;		r0 - contains a one
;	failure:
;		r0 - contains a zero
;
; Side effects:
;
;	NONE
;
;--


;crf$dealblk::
;lnk$dealblk::
lbr$free_vm::
	pushr	#^m<r2, r3, r4>
	addl3	#<mem$k_roundup-1>,r0,r3	; Round up to the nearest
10$:	bicl2	#<mem$k_roundup-1>,r3		; Multiple of four bytes
	bleq	20$				; Check for size <= 0
	cmpl	r3,mem$l_maxblk			; Check size > maximum
	bleq	30$				; Branch on legal size
20$:	movl	#mem$_illblksize,r0		; Report illegal block size
	brw	deal_blk_exit			; Return
30$:	movab	mem$l_dynmem,r0			; Get listhead of dynamic memory
	clrq	(r1)				; Clear block info long words
	addl3	r1,r3,r4			; Get address following new block
;
; Search down list for insertion point.
;
40$:	movl	r0,r2				; R2 contains prev block
	movl	(r0),r0				; R0 contains next block addr
	beqlu	60$				; Branch on end of list
	cmpl	r1,r0				; Is new addr > next addr
	bgtru	40$				; Yes, keep looking
;
; Found insertion point.
;	r2 = addr of previous block
;	r1 = addr of new block
;	r0 = addr of next block
;
	movl	r1,blk$l_addr(r2)		; Point prev to new
	cmpl	r4,r0				; Is new adjacent to next?
	beqlu	50$				; Yes, branch to compact
	bgtru	80$				; Error, within block
	movl	r0,blk$l_addr(r1)		; No, point new to next
	movl	r3,blk$l_size(r1)		; Set size of new block
	brb	70$				; Go check adjacent to prev
;
; Compact with next block.
;
50$:	addl3	r3,blk$l_size(r0),blk$l_size(r1) ; Set size = new+next
	movl	blk$l_addr(r0),blk$l_addr(r1)	; Set next pointer
	clrq	(r0)				; Clear old next block
	brb	70$				; Go check for compaction
;
; Set up new block on end of list.
;
60$:	movl	r1,blk$l_addr(r2)		; Point prev to new
	movl	r3,blk$l_size(r1)		; Set new block size
;
; Check for compact with previous block.
;
70$:	addl3	r2,blk$l_size(r2),r4		; Get end of prev block
	cmpl	r4,r1				; Is new adjacent to prev?
	bgtru	80$				; Error, block within prev
	bnequ	90$				; No, not adjacent
;
; Compact with previous block.
;
	addl2	blk$l_size(r1),blk$l_size(r2)	; Prev size = new+prev
	movl	blk$l_addr(r1),blk$l_addr(r2)	; Set up next pntr
	clrq	(r1)				; Clear new block pntr & size
	brb	90$				; Branch to exit
;
; Error, block within block.
;
80$:	movl	#mem$_blkwthinbl,r0		; Report block within block
	brb	deal_blk_exit			; Return
90$:	movl	#mem$_success,r0		; Set success status code
deal_blk_exit:
	popr	#^m<r2, r3, r4>
	rsb

	.end
