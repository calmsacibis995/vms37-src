MODULE lbr_dumpindex (				! Index manipulation routines
			LANGUAGE (BLISS32),
			IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library access procedures
!
! ABSTRACT:
!
!	The VAX/VMS librarian procedures implement a standard access method
!	to libraries through a shared, common procedure set.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR: Tim Halvorsen, Benn Schreiber		11-Jun-1979
!
! MODIFIED BY:
!
!	V02-002		RPG0020		Bob Grosso	26-Feb-1981
!		Add dumping of variable length key indices and 
!		dumping of entire block if called with 
!		lbr$dump_indexblocks(n).
!
!	V02-001		RPG00007	Bob Grosso	5-Jan-1981
!		Remove BUILTIN declaration
!--

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions

REQUIRE 'PREFIX';		! Librarian general definitions

REQUIRE 'LBRDEF';		! Librarian structure definitions

REQUIRE 'LBRMSG';		! Librarian error message definitions


FORWARD ROUTINE
    lbr$dump_indexblocks,	! Dump the entire index in hex and ASCII
    lbr$dump_index;		! Dump the index

EXTERNAL ROUTINE
    find_index : JSB_2,				! Find index block in memory
    lib$put_output : ADDRESSING_MODE (GENERAL);	! Write to SYS$OUTPUT

EXTERNAL
    lbr$gl_control: REF BBLOCK;	! Address of control block

OWN
    faostring1 : countedstring ('!/Index block !XL at address !XL'),
    faostring2 : countedstring ('(parent = !XL, used = !XW)!/'),
    faostring3 : countedstring ('!XW   !XL !XW   !AC'),
    faostring4 : countedstring ('!XW   !XL !XW   !XL'),
    faodmpblk  : countedstring ('!XL !XL !XL !XL !AF');

GLOBAL ROUTINE lbr$dump_index (index) =

!---
!
!	Dump the contents of the entire index structure
!	to SYS$OUTPUT.
!
! Inputs:
!
!	index = Primary index number
!
! Outputs:
!
!	None
!
!---

BEGIN
MACRO
    write (string) =
	lib$put_output (fao_buffer (string
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI))%;

EXTERNAL ROUTINE
    lib$put_output : ADDRESSING_MODE (GENERAL);

ROUTINE fao_buffer (ctrstr,args) =
BEGIN
OWN
    desc :	BBLOCK [dsc$c_s_bln],	! Result descriptor
    buf :	VECTOR [80, BYTE];	! Output buffer
MAP
    ctrstr :	REF VECTOR [,BYTE],
    args :	VECTOR [4];

LOCAL
    faodesc : BBLOCK [dsc$c_s_bln];

faodesc [dsc$w_length] = .ctrstr [0];
faodesc [dsc$a_pointer] = ctrstr [1];
desc [dsc$w_length] = 80;			! Set up result descriptor
desc [dsc$a_pointer] = buf;
$faol (ctrstr=faodesc, outlen=desc, outbuf=desc, prmlst=args);
RETURN desc;
END;

ROUTINE dump_block2 (index, vbn) =
BEGIN
LOCAL
    entry,
    index_desc: REF BBLOCK,	! Index descriptor
    index_block: REF BBLOCK;	! Index block address

index_desc = .lbr$gl_control [lbr$l_hdrptr] + lhd$c_idxdesc
		+ (.index-1)*idd$c_length;

perform (find_index (.vbn, index_block));

write(faostring1,.vbn,.index_block);
write(faostring2,
	.index_block [index$l_parent],
	.index_block [index$w_used]);

entry = .index_block+index$c_entries;
WHILE (.entry LSS .index_block+index$c_entries+.index_block[index$w_used]-1) DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .index_desc [idd$v_ascii]	! If ASCII keys,
    THEN
	write(faostring3,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		entry [idx$b_keylen])
    ELSE
	write(faostring4,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		.entry [idx$l_keyid]);
    entry = .entry + idx$c_rfaplsbyt + .entry [idx$b_keylen];
    END;

entry = .index_block+index$c_entries;
WHILE (.entry LSS .index_block+index$c_entries+.index_block[index$w_used]-1) DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .entry [idx$w_offset] EQL rfa$c_index	! If subindex,
    THEN
	dump_block2(.index, .entry [idx$l_vbn]);
    entry = .entry + idx$c_rfaplsbyt + .entry [idx$b_keylen];
    END;

RETURN true;
END;

ROUTINE dump_block (index, vbn) =
BEGIN
LOCAL
    index_desc: REF BBLOCK,	! Index descriptor
    index_block: REF BBLOCK;	! Index block address

index_desc = .lbr$gl_control [lbr$l_hdrptr] + lhd$c_idxdesc
		+ (.index-1)*idd$c_length;

perform (find_index (.vbn, index_block));

write(faostring1,.vbn,.index_block);
write(faostring2,
	.index_block [index$l_parent],
	.index_block [index$w_used]);

INCRU entry FROM .index_block+index$c_entries
	TO .index_block+index$c_entries+.index_block [index$w_used]-1
	BY idx$c_length + .index_desc [idd$w_keylen]
DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .index_desc [idd$v_ascii]	! If ASCII keys,
    THEN
	write(faostring3,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		entry [idx$b_keylen])
    ELSE
	write(faostring4,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		.entry [idx$l_keyid]);
    END;

INCRU entry FROM .index_block+index$c_entries
	TO .index_block+index$c_entries+.index_block [index$w_used]-1
	BY idx$c_length + .index_desc [idd$w_keylen]
DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .entry [idx$w_offset] EQL rfa$c_index	! If subindex,
    THEN
	dump_block(.index, .entry [idx$l_vbn]);
    END;

RETURN true;
END;

!
!	Main body of lbr$dump_index procedure
!
LOCAL
    index_desc: REF BBLOCK;		! Index descriptor

index_desc = .lbr$gl_control [lbr$l_hdrptr] + lhd$c_idxdesc
		+ (.index-1)*idd$c_length;
IF .index_desc [idd$l_vbn] EQL 0	! If empty index,
THEN
    RETURN true;			! return immediately

IF .index_desc [idd$v_varlenidx]
THEN
    perform(dump_block2 (.index, .index_desc [idd$l_vbn]))
ELSE
    perform(dump_block (.index, .index_desc [idd$l_vbn]));

RETURN true;

END;	! lbr$dump_index ()

GLOBAL ROUTINE lbr$dump_indexblocks (index) =

!---
!
!	Dump the entire index structure in both hex and ASCII
!	to SYS$OUTPUT.
!
! Inputs:
!
!	index = Primary index number
!
! Outputs:
!
!	None
!
!---

BEGIN
MACRO
    write (string) =
	lib$put_output (fao_buffer (string
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI))%;

EXTERNAL ROUTINE
    lib$put_output : ADDRESSING_MODE (GENERAL);

ROUTINE fao_buffer (ctrstr,args) =
BEGIN
OWN
    desc :	BBLOCK [dsc$c_s_bln],	! Result descriptor
    buf :	VECTOR [80, BYTE];	! Output buffer
MAP
    ctrstr :	REF VECTOR [,BYTE],
    args :	VECTOR [4];

LOCAL
    faodesc : BBLOCK [dsc$c_s_bln];

faodesc [dsc$w_length] = .ctrstr [0];
faodesc [dsc$a_pointer] = ctrstr [1];
desc [dsc$w_length] = 80;			! Set up result descriptor
desc [dsc$a_pointer] = buf;
$faol (ctrstr=faodesc, outlen=desc, outbuf=desc, prmlst=args);
RETURN desc;
END;

ROUTINE dump_wholeblk2 (index, vbn) =
BEGIN
LOCAL
    entry,
    index_desc: REF BBLOCK,	! Index descriptor
    index_block: REF BBLOCK;	! Index block address

index_desc = .lbr$gl_control [lbr$l_hdrptr] + lhd$c_idxdesc
		+ (.index-1)*idd$c_length;

perform (find_index (.vbn, index_block));

write(faostring1,.vbn,.index_block);
INCRU i FROM 0 TO 511 BY 16 DO
    write(faodmpblk,
	.index_block [.i+12,0,32,0], .index_block [.i+8,0,32,0],
	.index_block [.i+4,0,32,0], .index_block [.i,0,32,0],
	16, index_block [.i,0,0,0] );

entry = .index_block+index$c_entries;
WHILE (.entry LSS .index_block+index$c_entries+.index_block[index$w_used]-1) DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .index_desc [idd$v_ascii]	! If ASCII keys,
    THEN
	write(faostring3,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		entry [idx$b_keylen])
    ELSE
	write(faostring4,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		.entry [idx$l_keyid]);
    entry = .entry + idx$c_rfaplsbyt + .entry [idx$b_keylen];
    END;

entry = .index_block+index$c_entries;
WHILE (.entry LSS .index_block+index$c_entries+.index_block[index$w_used]-1) DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .entry [idx$w_offset] EQL rfa$c_index	! If subindex,
    THEN
	dump_wholeblk2(.index, .entry [idx$l_vbn]);
    entry = .entry + idx$c_rfaplsbyt + .entry [idx$b_keylen];
    END;

RETURN true;
END;

ROUTINE dump_wholeblk (index, vbn) =
BEGIN
LOCAL
    index_desc: REF BBLOCK,	! Index descriptor
    index_block: REF BBLOCK;	! Index block address

index_desc = .lbr$gl_control [lbr$l_hdrptr] + lhd$c_idxdesc
		+ (.index-1)*idd$c_length;

perform (find_index (.vbn, index_block));

write(faostring1,.vbn,.index_block);
INCRU i FROM 0 TO 511 BY 16 DO
    write(faodmpblk,
	.index_block [.i+12,0,32,0], .index_block [.i+8,0,32,0],
	.index_block [.i+4,0,32,0], .index_block [.i,0,32,0],
	16, index_block [.i,0,0,0] );

INCRU entry FROM .index_block+index$c_entries
	TO .index_block+index$c_entries+.index_block [index$w_used]-1
	BY idx$c_length + .index_desc [idd$w_keylen]
DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .index_desc [idd$v_ascii]	! If ASCII keys,
    THEN
	write(faostring3,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		entry [idx$b_keylen])
    ELSE
	write(faostring4,
		.entry - .index_block,
		.entry [idx$l_vbn], .entry [idx$w_offset],
		.entry [idx$l_keyid]);
    END;

INCRU entry FROM .index_block+index$c_entries
	TO .index_block+index$c_entries+.index_block [index$w_used]-1
	BY idx$c_length + .index_desc [idd$w_keylen]
DO
    BEGIN
    MAP entry: REF BBLOCK;
    IF .entry [idx$w_offset] EQL rfa$c_index	! If subindex,
    THEN
	dump_wholeblk(.index, .entry [idx$l_vbn]);
    END;

RETURN true;
END;

!
!	Main body of lbr$dump_indexblocks procedure
!
LOCAL
    index_desc: REF BBLOCK;		! Index descriptor

index_desc = .lbr$gl_control [lbr$l_hdrptr] + lhd$c_idxdesc
		+ (.index-1)*idd$c_length;
IF .index_desc [idd$l_vbn] EQL 0	! If empty index,
THEN
    RETURN true;			! return immediately
IF .index_desc [idd$v_varlenidx]
THEN
    perform( dump_wholeblk2 (.index, .index_desc [idd$l_vbn]))
ELSE
    perform( dump_wholeblk (.index, .index_desc [idd$l_vbn]));

RETURN true;

END;	! lbr$dump_indexblocks ()
END
ELUDOM
