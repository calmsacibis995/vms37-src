	.title	cache	Disk block cache routines
	.ident	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;   FACILITY
;
;	Native mode librarian
;
;   ABSTRACT
;
;	Routines to manipulate the disk block cache
;	in dynamic memory.
;
;   ENVIRONMENT
;
;	Native mode, user mode
;
;   AUTHOR
;
;	Tim Halvorsen, Benn Schreiber, July 1979
;
;   MODIFIED BY
;
;	V02-008		RPG0018		Bob Grosso	22-Dec-1981
;		Support deallocation of cache header entries.
;		
;	V02-007		RPG0017		Bob Grosso	02-Dec-1981
;		Support allocation of cache header entries from
;		common block.
;
;	V02-003		RPG0014		Bob Grosso	24-Jun-1981
;		Check status return from allocate in add_cache.
;
;	V02-002		RPG0013		Bob Grosso	19-Jan-1981
;		Record the highest VBN in the cache at ctx$l_hivbn.
;
;--

	.sbttl	Declarations
;
;	Symbol defintions
;

	$cachedef		; Cache definitions
	$ctxdef			; Context area definitions
	$lbrdef			; Librarian definitions
	$lbrctltbl		; Librarian control table

	.psect	$code$,exe,nowrt

	.default displacement,word

	.sbttl	add_cache, Add cache entry given VBN
;---
;
;	Add a cache entry to the block cache and return
;	the address to the caller.
;
; Inputs:
;
;	R0 = VBN of disk block
;	R1 = Address of longword to receive cache entry address
;
; Outputs:
;
;	None
;---

add_cache::
	pushr	#^M<r2, r3, r4, r5>	; save registers
	bsbb	find_vbn_entry		; look it up
	blbc	r0,40$			; branch if not found, go insert
	clrl	r0			; error if already in cache
	popr	#^m<r2, r3, r4, r5>
	rsb
;
; add to cache
;
40$:	movl	#cache$c_length,r0	; length of block
	bsbb	alloc_cache_hdr		; allocate cache header entry
	blbc	r0,60$			; return error status
	movl	r1,(r5)			; return address to caller
	movl	cache$l_link(r2),cache$l_link(r1) ; and link into hash list
	movl	r1,cache$l_link(r2)
	movl	r4,cache$l_vbn(r1)	; set vbn into cache entry
	movl	lbr$gl_control,r2	; control table index
	movl	lbr$l_ctxptr(r2),r2	; context block address
	movl	ctx$l_hivbn(r2),r3	; highest vbn in cache
	cmpl	r4,r3			; compare highest to most recent vbn
	bleq	50$
	movl	r4,ctx$l_hivbn(r2)	; save new highest vbn
50$:	movl	#1,r0			; return success
60$:	popr	#^m<r2, r3, r4, r5>
	rsb

;++
;
;	Routine to look up vbn in the cache table
;
; Inputs:
;
;
; Outputs:
;
;	r0	0 not found
;		1 found
;	r1	pointer to entry (if found)
;	r2	pointer to previous entry
;
;--
find_vbn_entry:
	movq	r0,r4			; put vbn in r4, return addr in r5
	movl	lbr$gl_control,r1	; control table index
	movl	lbr$l_ctxptr(r1),r1	; context block address
	movl	ctx$l_cache(r1),r1	; point to cache hash table
	subl3	#1,r4,r0		; hash function is vbn-1
	bicl2	#^C<<lbr$c_hashsize/4>-1>,r0 ; trim to table maximum
	moval	(r1)[r0],r2		; get address of previous
	movl	(r2),r1			; point to hash entry list
10$:	beql	30$			; if eql not in list
	cmpl	r4,cache$l_vbn(r1)	; is this the entry?
	beql	20$			; if eql yes
	bgtru	30$			; if gtru no, and not in list
	movl	r1,r2			; bring up the rear
	movl	cache$l_link(r1),r1	; and link to next
	brb	10$
20$:	movl	#1,r0
	rsb
30$:	clrl	r0
	rsb

	.sbttl	alloc_cache_hdr, allocate dynamic memory for cache header
;---
;
;	alloc_cache_hdr
;
;	this routine allocates a cache header entry from a common block
;	of memory maintained by pointer in the context block.  If the
;	common block is not sufficient to meet the need then dynamic memory 
;	is obtained by expanding the region, to increase the common block.
;
; inputs:
;
;	r0 = size of block to allocate
;
; outputs:
;
;	r1 = address of allocated block
;
;---

alloc_cache_hdr:
	pushr	#^m<r2,r3>
;
;	first check if common block is large enough
;
	movl	lbr$gl_control,r2	; control table index
	movl	lbr$l_ctxptr(r2),r2	; context block address
	cmpl	ctx$l_chdallsiz(r2),r0	; see if common block is large enough
	bgtr	20$
;
;	if not large enough, then deallocate any fragment
;
	movl	ctx$l_chdallsiz(r2),r0 ; size left over
	beql	10$
	movl	ctx$l_chdalladr(r2),r1 ; address of left over
	jsb	dealloc_mem		; deallocate left over
;
;	and allocate more
;
10$:	movl	#<ctx$c_chdallblk*512>,r0 ; allocate new common block
	movab	ctx$l_chdalladr(r2),r1	; location to receive address
	bsbw	get_zmem		; Allocate the memory
	blbc	r0,30$			; exit with error status
	movl	#<ctx$c_chdallblk*512>,ctx$l_chdallsiz(r2) ; size of common block
;
;	obtain cache entry header from common block
;
20$:	movl	#<cache$c_length+7>,r3	; round up to nearest
	bicl2	#7,r3			; multiple of four bytes
	subl2	r3,ctx$l_chdallsiz(r2) 	; decr block size
	movl	ctx$l_chdalladr(r2),r1	; return address of cache header entry
	addl2	r3,ctx$l_chdalladr(r2)	; remove from block
	movl	#1,r0			; return success
30$:	popr	#^m<r2,r3>
	rsb


	.sbttl	lookup_cache, Lookup a given VBN in the cache
;---
;
;	Lookup a specified VBN in the disk block cache
;	and return the address of the cache entry.
;
;   INPUTS:
;
;	R0 = VBN to lookup
;	R1 = Address of longword to receive cache entry address
;
;   OUTPUTS:
;
;	r0 = True if symbol found
;---

lookup_cache::
	pushr	#^m<r2, r3, r4, r5>
	bsbw	find_vbn_entry		; look it up
	movl	r1,(r5)			; return address
	popr	#^m<r2, r3, r4, r5>
	rsb

	.sbttl	remove_cache, Remove a single cache entry
;---
;
;	Remove a cache entry given the VBN of the entry.
;
; Inputs:
;
;	R0 = VBN of disk block
;
; Outputs:
;
;	r0 = status code
;---

remove_cache::
	pushr	#^m<r2, r3, r4, r5>
	bsbw	find_vbn_entry		; look it up
	blbc	r0,20$
	movl	cache$l_link(r1),-
		cache$l_link(r2)	; unlink from the list
	movl	#cache$c_length,r0	; set length of block
	bsbw	dealloc_mem		; deallocate cache entry
	movl	#1,r0
20$:	popr	#^m<r2, r3, r4, r5>
	rsb

	.sbttl	empty_cache, Empty disk block cache
;---
;
;	Empty the entire disk block cache and return the
;	storage used.
;
; Inputs:
;
;	None
;
; Outputs:
;
;	None
;---

	.entry	empty_cache,-
		^m<r2,r3,r4,r5,r6,r7>

	movl	#1,r6			; preset success return
	movab	dealloc_mem,r5		; address of deallocation routine
	movl	lbr$gl_control,r4	; control table address
	movl	lbr$l_ctxptr(r4),r4	; context block address

	movl	ctx$l_chdallsiz(r4),r0	; cache header entry allocation block size
	movl	ctx$l_chdalladr(r4),r1	; cache header entry allocation block addr
	jsb	(r5)			; deallocate the cache header entry blocks
	clrq	ctx$l_chdallsiz(r4)	; clear the size and address in ctx block

	pushab	ctx$l_cache(r4)		; stack address of cache hash list pointer
	movl	ctx$l_cache(r4),r4	; cache hash list address
	clrl	@(sp)+			; clear cache hash pointer in context block

	movl	#<lbr$c_hashsize/4>-1,r3 ; start at end of table
10$:	movl	(r4)[r3],r2		; get entry for this hash bucket
	beql	30$			; if eql none
20$:	blbc	cache$w_flags(r2),25$	; branch if not modified
	movl	cache$l_address(r2),r0	; address to write from
	movl	cache$l_vbn(r2),r1	; and vbn to write at
	blbc	r6,25$			; branch if previous write error
	bsbw	write_block		; write back the block
	blbs	r0,25$			; branch if write error
	movl	r0,r6			; save error for later
25$:	movl	#lbr$c_pagesize,r0	; set size of block
	movl	cache$l_address(r2),r1	; block address
	jsb	(r5)			; deallocate it
	movl	r2,r1			; deallocate cache entry
	movl	#cache$c_length,r0
	movl	cache$l_link(r2),r2	; link to next
	jsb	(r5)			; deallocate cache entry
	tstl	r2			; more in bucket?
	bneq	20$			; if neq yes
30$:	sobgeq	r3,10$			; loop for whole table
	movl	r4,r1			; deallocate cache table
	movl	#lbr$c_hashsize,r0
	jsb	(r5)
	movl	r6,r0
	ret

	.END
