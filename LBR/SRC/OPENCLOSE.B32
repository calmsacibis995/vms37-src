MODULE LBR_OPENCLOSE (			! Open/close routines for LIBRARIAN
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library access procedures
!
! ABSTRACT:
!
!	The VAX/VMS librarian procedures implement a standard access method
!	to libraries through a shared, common procedure set.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  7-Jun-1979
!
! MODIFIED BY:
!
!	V02-023		RPG0123		Bob Grosso	18-Jan-1982
!		Use resultant name string from previous open if a nam
!		block is given without a fid_num.  i.e. from a previous
!		open across the network.
!		
!	V02-022		RPG0122		Bob Grosso	16-Nov-1981
!		Refine the algorithm for index block pre-allocation.
!
!	V02-021		RPG0121		Bob Grosso	11-Nov-1981
!		Default the library version type if not specified
!		in create_options.
!
!		Add lbr$set_locate, lbr$set_move and lbr$ret_rmsstv.
!
!	V02-020		RPG41918	Bob Grosso	11-Nov-1981
!		Fix lbr$close so that the header block is bound
!		after the control block is made current.
!
!	V02-019		RPG0119		Bob Grosso	14-Aug-1981
!		Support lower case keywords
!
!	V02-009		RPG0043		Bob Grosso	20-Jul-1981
!		Accept library version to create.
!		Add sanity for version 3 libs.
!
!	V02-008		RPG0042		Bob Grosso	15-Jul-1981
!		Store unmodified header block to tweak diddle bit.
!
!	V02-007		RPG0041		Bob Grosso	1-Jul-1981
!		Fix lbr$get_header lhi$w_*luh.
!
!	V02-006		RPG0040		Bob Grosso	18-Jun-1981
!		Change lhd$l_*luhrec & lhi$l_*luhrec to l*$w_*luhrec.
!		Check cre$l_luhmax LEQ lbr$c_maxluhrec.
!
!	V02-005		RPG0039		Bob Grosso	4-Jun-1981
!		Replace 128 with lbr$c_maxkeylen.
!		Remove nam block size check from lbr$ini_control.
!
!	V02-004		RPG0038		Bob Grosso	4-May-1981
!		Change nam$c_bln_dirwc to nam$c_bln.
!
!	V02-003		RPG0035		Bob Grosso	22-Apr-1981
!		Activate library update history.
!
!	V02-002		RPG0030		Bob Grosso	7-Apr-1981
!		Activate variable length keyword storage, and 
!		keyword length check.
!
!	V02-001		RPG0018		Bob Grosso	26-Feb-1981
!		Call dealloc_cache instead of empty_cache from
!		LBR$CLOSE to perform more error checking and bufferred
!		writing of cache.
!--



%SBTTL  'Declarations';
LIBRARY
	'SYS$LIBRARY:STARLET.L32';	!System macros
REQUIRE
	'PREFIX';			!Librarian general definitions
REQUIRE
	'LBRDEF';			!Librarian structure definitions
REQUIRE
	'OLDFMTDEF';			!Old format (VMS R1) library structure

EXTERNAL LITERAL
    !
    !   success codes
    !
    lbr$_normal,	! success
    lbr$_oldlibrary,	! old format library opened

    !
    !   Warning codes
    !
    lbr$_oldmismch,	! old format library type mismatch
    lbr$_typmismch,	! library type mismatch
    lbr$_errclose,	! Error occurred in closing library

    !
    !   Error codes
    !
    lbr$_illctl,	! illegal control index
    lbr$_illcreopt,	! illegal create options
    lbr$_illfmt,	! illegal library format
    lbr$_illfunc,	! illegal library function
    lbr$_illtyp,	! illegal library type
    lbr$_libnotopn,	! library not open
    lbr$_libopn,	! library already open
    lbr$_nofilnam,	! no file specification found
    lbr$_toomnylib;	! too many libraries open

EXTERNAL
    lbr$gl_control : REF BLOCK [,BYTE],		!Pointer to current control table
    lbr$al_ctltab : VECTOR [lbr$c_maxctl],	!Table of pointers to all known control tables
    lbr$gl_hictl,				!Highest control number allocated
    mem$l_maxblk,				!Max size of expand region request to get memory
    mem$l_memexp,				!Number of pages in expand region request
    lbr$gl_maxread,				!Max. number blocks to read at once
    lbr$gl_rmsstv,				!Return RMS STV code here on errors
    lbr$gt_lbrver : VECTOR [32, BYTE]; 		!ASCIC string of librarian ID

EXTERNAL ROUTINE
    lbr_old_lib_dat,				!Extract info for old library
    read_block : JSB_2,				!Read a disk block
    write_block : JSB_2,			!Write a disk block
    add_cache : JSB_2,				!Add entry to cache list
    dealloc_cache,				! Empty disk block cache
    validate_ctl : JSB_1,			!Validate control blocks
    get_mem : JSB_2,				! Allocate dynamic memory
    get_zmem : JSB_2,				!Allocate and zero virtual memory
    dealloc_mem : JSB_2;			! Deallocate dynamic memory

FORWARD ROUTINE
    prealloc_index,				!Preallocate index blocks
    all_control_idx,				!Allocate a control table index number
    dea_control_idx : NOVALUE,			!Deallocate a control table index number
    lbr$close,					!Close open library file, delete
						! all allocated memory
    lbr_deal_mem : NOVALUE;			!Deallocate all allocated memory

%SBTTL  'LBR$INI_CONTROL';
GLOBAL ROUTINE lbr$ini_control (control_index, func, type, namblk) =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes a control table for use by the library
!	access procedures.
!
! CALLING SEQUENCE:
!
!	STATUS = LBR$INI_CONTROL(control_index,func,type,namblk)
!
! INPUT PARAMETERS:
!	func			Address of a longword containing the desired
!				 function - LBR$C_CREATE, LBR$C_READ, or
!				 LBR$C_UPDATE.
!	type			The type of library expected to open.  If not
!				 supplied, or 0, no type checking is done.
!	namblk			The (optional) address of a NAM block.
!				 If it has been previously filled in,
!				 the file will be opened by NAM block,
!				 otherwise the NAM block will be filled
!				 in for later use.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!
!	control_index		Receives the control_table index to use
!				 on all subsequent calls to the librarian
!				 for this library.
!
! IMPLICIT OUTPUTS:
!
!	The control_table is initialized.
!
! ROUTINE VALUE:
!
!	lbr$_normal		Control table initialized
!	lbr$_illtyp		Illegal library type specified
!	lbr$_illfunc		Illegal function requested
!	lbr$_toomnylib		Too many libraries
!
!--

MAP
    namblk : REF BBLOCK;
BUILTIN
    NULLPARAMETER;

IF NOT NULLPARAMETER (3)		! If type specified,
THEN
    IF ..type GTRU lbr$c_typ_decmx	! If expected type illegal,
	AND ..type LSSU lbr$c_typ_rdec
    THEN
        RETURN lbr$_illtyp;		! Return with error

IF ..func GTRU lbr$c_maxfunc		! If function is illegal
THEN RETURN lbr$_illfunc;		! then return with error

perform (all_control_idx (.control_index, lbr$gl_control));!Get an index number
					!(also allocate control table)

lbr$gl_control [lbr$b_id] = lbr$c_ctltblid;
lbr$gl_control [lbr$b_tblsiz] = lbr$c_length;
lbr$gl_control [lbr$b_func] = ..func;	! Set function code

IF NOT NULLPARAMETER (3)		! If type specified,
THEN
    lbr$gl_control [lbr$b_type] = ..type; ! Set type of library expected

IF NOT NULLPARAMETER (4)
THEN lbr$gl_control [lbr$l_usrnam] = .namblk;
RETURN lbr$_normal
END;					! Of LBR$INI_CONTROL

%SBTTL  'LBR$OPEN';
GLOBAL ROUTINE lbr$open (control_index, fns, create_options, dns, rlfna,
			rns, rnslen) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens an existing library for reading or updating,
!	or creates a new library.  This routine must be called before
!	any other library access procedures except LBR$INI_CONTROL.
!
! CALLING SEQUENCE:
!
!	status = LBR$OPEN (control_index[, fns, create_options, dns,
!			rlfna, rns, rnslen])
!
! INPUT PARAMETERS:
!
!	control_index	is the address of a longword containing the
!			 index returned from LBR$INI_CONTROL
!	dns		is the address of a string descriptor for the
!			 default filename string.
!	fns		is the address of a string descriptor for the
!			 filename string.
!	rlfna		is the address of a NAM block for the related
!			 file.
!	rns		is the address of a string descriptor for the
!			 resultant name string.
!	create_options	is the address of an array of create options.
!			 This argument is needed only if the function
!			 is LBR$C_CREATE.
!
! OUTPUT PARAMETERS:
!
!	rnslen		is the address of a longword to return the
!			 length of the resultant name string.
!
!	The specified library is opened.  The library header is
!	read into memory (or constructed if creating the library).
!	The default index is set to index 0.
!
!	If there is an error while opening the library, the expanded
!	name string will be returned, rather than the resultant name.
!
! ROUTINE VALUE:
!
!	lbr$_illfmt	illegal format in library
!	lbr$_illfunc	illegal function
!	lbr$_illctl	illegal control table
!	lbr$_illcreopt	illegal create options
!	lbr$_libopn	library already open
!	lbr$_typmismch	library type does not match requested type
!	lib$_insvirmem	insufficient virtual memory
!	lib$_badblosiz	bad block size
!--

BUILTIN
	NULLPARAMETER;			! True if parameter omitted
MAP
	dns : REF BBLOCK [dsc$c_s_bln],	! Pointer to string descriptor
	fns : REF BBLOCK [dsc$c_s_bln],	! Pointer to string descriptor
	rlfna : REF BBLOCK,		! Pointer to NAM block
	rns : REF BBLOCK [dsc$c_s_bln],	! Pointer to string descriptor
	create_options : REF BBLOCK;	! and the create options
LOCAL
	lbrfab : BBLOCK [fab$c_bln],	! Allocate a FAB to open library
	recrab : REF BBLOCK [rab$c_bln], ! Pointer to record I/O RAB
	lbrnam : REF BBLOCK [nam$c_bln], ! Pointer to NAM block
	status,
	return_status,
	blksiz,
	retries,
	one_second : VECTOR [2],
	hdradr,
	context : REF BBLOCK,		! Pointer to context block
	header : REF BBLOCK;		! Pointer to header block

lbr$gl_rmsstv = 0;
status = validate_ctl (..control_index); !Validate the control block
IF NOT .status AND .status NEQ lbr$_libnotopn !If failed and not becuase library
THEN RETURN .status;			!then its really bad, so return error

IF .lbr$gl_control [lbr$v_open]		!If library already open
THEN RETURN lbr$_libopn;		! then return an error

IF .lbr$gl_control [lbr$b_func] EQL lbr$c_create
THEN 
    BEGIN
    IF NULLPARAMETER (3)		! Options required on create
    THEN RETURN lbr$_illcreopt;		! return error if not
    IF (.create_options [cre$l_keylen] GTR lbr$c_maxkeylen) OR
       (.create_options [cre$l_luhmax] GTR lbr$c_maxluhrec) OR
       (.create_options [cre$l_vertyp] LSS 0) OR
       (.create_options [cre$l_vertyp] GTR cre$c_vmsv3) 
    THEN RETURN lbr$_illcreopt;		! return error if not
    END;
!	Allocate and initialize the internal context area
!
perform (get_zmem (ctx$c_length, lbr$gl_control [lbr$l_ctxptr]));
!
!	Allocate a RAB and NAM block to open the file.
!
status = get_zmem (rab$c_bln+nam$c_bln, recrab);
IF NOT .status				! If not enough memory,
THEN
    BEGIN
    lbr_deal_mem (..control_index);	! Deallocate everything
    RETURN .status;			! and return with error
    END;
!
! Initialize the FAB, RAB, and NAM blocks
!
context = .lbr$gl_control [lbr$l_ctxptr];	! Point to the context block
context [ctx$l_recrab] = .recrab;		! Save record I/O RAB address
IF (lbrnam = .lbr$gl_control [lbr$l_usrnam]) EQL 0 !If no user-supplied NAM block
THEN BEGIN
    lbrnam = .recrab + rab$c_bln;	!then use ours
    lbr$gl_control [lbr$l_usrnam] = .lbrnam;
    lbrnam [nam$b_bln] = nam$c_bln;		!Identify the NAM block
    lbrnam [nam$b_bid] = nam$c_bid;		!As a NAM block
    END;

CH$FILL (0, fab$c_bln, lbrfab);		!Zero the FAB
lbrfab [fab$b_bln] = fab$c_bln;		!Identify it as a fab with the length
lbrfab [fab$b_bid] = fab$c_bid;		!And ID
lbrfab [fab$v_bio] = true;		!Set for block I/O
lbrfab [fab$v_get] = true;		!Set to allow $READs
IF .lbr$gl_control [lbr$b_func] EQL lbr$c_create !If creating
OR .lbr$gl_control [lbr$b_func] EQL lbr$c_update !or updating
THEN 
    lbrfab [fab$v_put] = true		!then we will do $WRITEs also
ELSE
    context [ctx$v_ronly] = true;	! otherwise flag read only file

lbrfab [fab$w_mrs] = lbr$c_pagesize;	!Set the maximum record size
lbrfab [fab$b_rfm] = fab$c_fix;		!Set fixed record format

IF .lbrnam [nam$w_fid_num] NEQ 0	! Was filled-in NAM block passed
THEN 
    lbrfab [fab$v_nam] = true		!  yes--use it
ELSE
    BEGIN
    IF NOT NULLPARAMETER (2)		! Otherwise, did we get an FNS?
    THEN 
	BEGIN
	lbrfab [fab$b_fns] = .fns [dsc$w_length]; ! Set file name string
	IF .lbrfab [fab$b_fns] NEQ 0
	THEN lbrfab [fab$l_fna] = .fns [dsc$a_pointer];
	END
    ELSE				!  Has there been a previous open over the net
	BEGIN				!  i.e.  no fid_num but nam filled in.
	IF .lbrnam [nam$b_rsl] NEQ 0
	THEN
	    BEGIN
	    lbrfab [fab$b_fns] = .lbrnam [nam$b_rsl];
	    lbrfab [fab$l_fna] = .lbrnam [nam$l_rsa];
	    END
	ELSE
	    BEGIN			!  No, that is an error
	    lbr_deal_mem (..control_index);	! Deallocate all memory
	    RETURN lbr$_nofilnam;
	    END;
	END;
    END;

IF NOT NULLPARAMETER (4)		! Set default name string
THEN BEGIN
    lbrfab [fab$b_dns] = .dns [dsc$w_length];
    IF .lbrfab [fab$b_dns] NEQ 0
    THEN lbrfab [fab$l_dna] = .dns [dsc$a_pointer];
    END;

IF NOT NULLPARAMETER (5)		! Related filename block arg present?
    THEN lbrnam [nam$l_rlf] = .rlfna;

lbrfab [fab$l_nam] = .lbrnam;		!Point to the NAM block

IF .lbr$gl_control [lbr$b_func] EQL lbr$c_create !If creating the file
THEN BEGIN
    lbrfab [fab$v_cbt] = true;		!Set contiguous best try
    lbrfab [fab$v_ofp] = true;		!Set output file parse
    lbrfab [fab$l_alq] = .create_options [cre$l_alloc]; ! Set initial allocation
    END;

recrab [rab$b_bln] = rab$c_bln;		!Identify the RAB
recrab [rab$b_bid] = rab$c_bid;		!with length and ID
recrab [rab$l_fab] = lbrfab;		!Set pointer to FAB
recrab [rab$v_loc] = true;		!Set locate mode
recrab [rab$v_bio] = true;		!Set for block I/O only

IF NOT NULLPARAMETER (6)		!If result string arg present
THEN IF (lbrnam [nam$b_rss] = .rns [dsc$w_length]) NEQ 0
THEN BEGIN
    lbrnam [nam$b_ess] = .rns [dsc$w_length]; ! Copy to expanded name area
    lbrnam [nam$l_rsa] = .rns [dsc$a_pointer];! so that error messages will
    lbrnam [nam$l_esa] = .rns [dsc$a_pointer];! have the right information
    END;
!
!	Open the library, and connect the record stream.
!
status = (IF .lbr$gl_control [lbr$b_func] EQL lbr$c_create
		THEN $CREATE (FAB = lbrfab)
		ELSE BEGIN
		    retries = lbr$c_retryopen;	! Set max. number of retries
		    one_second [0] = -(10*1000*1000*lbr$c_retrywait); ! Set one second wait
		    one_second [1] = -1;
		    WHILE (status = $OPEN (FAB = lbrfab)) EQL rms$_flk ! while file is locked
				AND .retries GTR 0		! and we can still retry
		    DO BEGIN
			retries = .retries - 1;			! count a retry
			$SETIMR (EFN = 0, DAYTIM = one_second);	! Set timer for a second
			$WAITFR (EFN = 0);			! And wait for it
			END;
		    .status					! Return the status
		    END);
!
!	Return result name string if an error occurred.
!
IF NOT NULLPARAMETER (7)			!Returning length of resultant name string?
THEN IF (.rnslen = .lbrnam [nam$b_rsl]) EQL 0
    THEN IF (.rnslen = .lbrnam [nam$b_esl]) EQL 0
	THEN BEGIN
	    .rnslen = .lbrfab [fab$b_fns];
	    CH$MOVE (MIN (.rns [dsc$w_length], .lbrfab [fab$b_fns]),	!Bad error, so copy file name into rns 
			.lbrfab [fab$l_fna], .rns [dsc$a_pointer]);
	    END;
!
!	If error occurred, then give up
!
IF NOT .status				! If the open or create failed
THEN BEGIN
    lbr$gl_rmsstv = .lbrfab [fab$l_stv];	! Return STV on error
    lbr_deal_mem (..control_index);	!Deallocate memory
    RETURN .status;			!Return the OPEN status
    END;
!
!	Connect the record stream.
!
context [ctx$w_ifi] = .lbrfab [fab$w_ifi];	!Save IFI for close
IF NOT (status = $CONNECT (RAB = .recrab))	!Connect the record stream
THEN BEGIN				!and if that fails
    lbr$gl_rmsstv = .recrab [rab$l_stv];	!then return stv 
    lbr$close (.control_index);		!then close the file (which
					! deallocates all memory)
    RETURN .status			! return with error
    END;
context [ctx$w_isi] = .recrab [rab$w_isi];	!Save ISI
lbr$gl_control [lbr$l_curidx] = 1;	!Set current index to 1
!
!	Allocate a cache hash table
!
perform (get_zmem (lbr$c_hashsize, context [ctx$l_cache]));
return_status = lbr$_normal;		!Set to return normal status
!
!	If create, initialize memory resident header block.
!
IF .lbr$gl_control [lbr$b_func] EQL lbr$c_create
THEN
    BEGIN
	LOCAL
	    hdrnxtrfa : REF BBLOCK;
!
!	Allocate library header block
!
	status = get_zmem (lbr$c_pagesize, lbr$gl_control [lbr$l_hdrptr]);
	IF NOT .status				! If error occurred,
	THEN
	    BEGIN
		lbr$close (.control_index);	! close the library
	        RETURN .status;			! and return if error
	    END;

    header = .lbr$gl_control [lbr$l_hdrptr];	! Point at the header
    hdrnxtrfa = header [lhd$b_nextrfa];		! End of library RFA
    header [lhd$b_type] = .create_options [cre$l_type];
    header [lhd$b_nindex] = .create_options [cre$l_idxmax];
    header [lhd$w_majorid] = lhd$c_majorid;		! Set library format level
    header [lhd$w_minorid] = lhd$c_minorid;
    header [lhd$b_mhdusz] = .create_options [cre$l_uhdmax];
    header [lhd$l_sanity] = (IF .create_options [cre$l_vertyp] EQL cre$c_vmsv2
			    THEN lhd$c_saneid
			    ELSE lhd$c_saneid3);
    header [lhd$w_maxluhrec] = .create_options [cre$l_luhmax]; ! set maximum number of library update history records
!
! Preallocate index blocks
!
    IF NOT (status = prealloc_index (.header, .create_options))
    THEN BEGIN
	lbr$close (.control_index);
	RETURN .status;
	END;
    hdrnxtrfa [rfa$l_vbn] = .header [lhd$l_nextvbn]; ! Set next available VBN
    hdrnxtrfa [rfa$w_offset] = 0;		    !   and offset
    CH$MOVE (.lbr$gt_lbrver [0]+1, lbr$gt_lbrver, ! Set librarian version
		header [lhd$t_lbrver]);
    $GETTIM (TIMADR = header [lhd$l_credat]);	! Get creation date/time
    !
    !	Initialize all index descriptors
    !
    INCR i FROM 1 TO .header [lhd$b_nindex]	! Do all descriptors
    DO
	BEGIN
	BIND
	    index_desc = header [lhd$c_idxdesc-idd$c_length,0,0,0]:
		BLOCKVECTOR [,idd$c_length,BYTE];

	index_desc [.i, idd$w_flags] = 0; ! Preset flags to 0
	IF .create_options [cre$l_keylen] NEQ 0	! If ASCII keys,
	THEN
	    BEGIN
	    index_desc [.i, idd$v_ascii] = true; ! Set to ASCII keys
	    IF (.create_options [cre$l_vertyp] EQL 0) OR
	       (.create_options [cre$l_vertyp] GEQ cre$c_vmsv3)
	    THEN
		BEGIN
		index_desc [.i, idd$v_varlenidx] = true; ! Set to variable length ASCII keys
		index_desc [.i, idd$v_nocasecmp] = 	! should match keyword
		    .create_options [cre$v_nocasecmp];	! be upcased.
		index_desc [.i, idd$v_nocasentr] = 	! should index entry be upcased
		    .create_options [cre$v_nocasentr];  ! when compared with match keyword.
		index_desc [.i, idd$v_upcasntry] = 	! should the index entry be
		    .create_options [cre$v_upcasntry];	! upcased when entered.
		END;
	    index_desc [.i, idd$w_keylen] = .create_options [cre$l_keylen] + 1; ! (+1 for count byte)
	    END
	ELSE
	    index_desc [.i, idd$w_keylen] = 4;	! Set to binary keys
	index_desc [.i, idd$l_vbn] = 0;		! Set no index yet
	END;
    END
!
!	If open, read the library header from disk.
!
ELSE
    BEGIN
    status = read_block (1, lbr$gl_control [lbr$l_hdrptr]); ! Read block 1 of file
    IF NOT .status			! If error reading block,
    THEN BEGIN
	lbr$close (.control_index);	! Close the file
	RETURN .status;			! and return with error
	END;

    header = .lbr$gl_control [lbr$l_hdrptr];

    IF (.header [lhd$l_sanity] NEQ lhd$c_saneid) AND ! If not valid header,
    	(.header [lhd$l_sanity] NEQ lhd$c_saneid3)
    THEN BEGIN
	IF .header [ohd$b_fmtlvl] EQL ofl$c_fmtlvl ! Is it an old format library?
	THEN BEGIN
	    header [ohd$b_type] = .header [ohd$b_type] + 1; ! Adjust
						! library type to map
						! into new format
	    lbr_old_lib_dat (.header);	! Old format--extract information
	    context [ctx$v_oldlib] = true; ! Flag old format library
	    lbr$gl_control [lbr$b_func] = lbr$c_read; ! Only read access allowed
	    return_status = lbr$_oldlibrary; ! Set return status
	    END
	ELSE BEGIN
	    lbr$close (.control_index);	! Close the file
	    RETURN lbr$_illfmt;		! return illegal format file
	    END;
	END;

    IF .lbr$gl_control [lbr$b_type] NEQ 0 ! If user specified type,
	AND .header [lhd$b_type] NEQ .lbr$gl_control [lbr$b_type]
    THEN BEGIN
	IF .return_status EQL lbr$_normal
	THEN return_status = lbr$_typmismch	! return type mismatch
	ELSE IF .return_status EQL lbr$_oldlibrary
	THEN return_status = lbr$_oldmismch;
	lbr$gl_control [lbr$b_type] = .header [lhd$b_type];
	END;
    IF .header [lhd$w_closerror] THEN return_status = lbr$_errclose;
    END;
lbr$gl_rmsstv = .header [lhd$b_type];		!Return type of library opened
!
!	Mark file open successfully.
!
IF .lbr$gl_maxread EQL 0			! Max read length known?
THEN BEGIN
    $ADJWSL (WSETLM = blksiz);			! Get working set limit
    lbr$gl_maxread = MIN (.blksiz - lbr$c_maxread, lbr$c_maxread);	! Determine max number blocks to read
    IF .lbr$gl_maxread LSS lbr$c_minread	! but if too small
	THEN lbr$gl_maxread = lbr$c_minread;	!  then use the minimum
    IF .lbrnam [nam$v_node]			! If opening across network
	THEN lbr$gl_maxread = lbr$c_minread;	!  then reduce to minimum
    mem$l_memexp = .lbr$gl_maxread + lbr$c_memxtra; ! Allow extra pages on expand region
    mem$l_maxblk = .mem$l_memexp * lbr$c_pagesize; ! Set size of largest request
    END;
IF .lbr$gl_control [lbr$b_func] EQL lbr$c_update !If function is update
OR .lbr$gl_control [lbr$b_func] EQL lbr$c_create ! or create
THEN
    BEGIN
    LOCAL
	oldheader : REF BBLOCK;

    $GETTIM (TIMADR = header [lhd$l_updtim]); !Then get update time
    context [ctx$v_hdrdirty] = true;	  !and mark header as dirty
    !
    !   Store unmodified header block in core with the diddle bit set.
    !   Before initating a write to the library, original header will
    !   be written out.  If the update is unsuccessful, the header will
    !   record the failure.
    !
    status = get_zmem (lbr$c_pagesize, lbr$gl_control [lbr$l_oldhdrptr]);
    IF NOT .status				! If error occurred,
    THEN
	BEGIN
	lbr$close (.control_index);	! close the library
	RETURN .status;			! and return if error
	END;
    CH$MOVE ( lbr$c_pagesize, .lbr$gl_control [lbr$l_hdrptr], .lbr$gl_control [lbr$l_oldhdrptr] );
    oldheader = .lbr$gl_control [lbr$l_oldhdrptr];
    oldheader [lhd$w_closerror] = lhd$c_corrupted;
    END;
lbr$gl_control [lbr$v_open] = true;	! In control block also
context [ctx$v_libopn] = true;		! Flag library open

RETURN .return_status;			! Return with status
END;

%SBTTL  'LBR$CLOSE';
GLOBAL ROUTINE lbr$close (control_index) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes an open library file and release all virtual
!	memory allocated while the file was open.
!
! CALLING SEQUENCE:
!
!	status = LBR$CLOSE (control_index)
!
! INPUT PARAMETERS:
!
!	control_index		is the address of a longword containing the
!				 index returned from LBR$INI_CONTROL
!
! IMPLICIT INPUTS:
!
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The library file is closed.  All virtual memory allocated for the
!	processing of the library is deallocated.
!
! ROUTINE VALUE:
!
!	lbr$_libnotopn	library was not open
!	lbr$_illctl	illegal control block
!
! SIDE EFFECTS:
!	NONE
!
!--
LOCAL
	header_status,
	cache_status,
	disc_rec_sts,
	close_status;

IF ..control_index EQL 0		! 0 gets a return immediately
    THEN RETURN true;
IF NOT validate_ctl (..control_index)	!Validate the control table
THEN RETURN lbr$_illctl
ELSE IF NOT .lbr$gl_control [lbr$v_open]	!library must be open also
THEN RETURN lbr$_libnotopn
ELSE BEGIN
!
! Write back to file if necessary, close library, and deallocate
! dynamic virtual memory.
!
LOCAL
    lbrfab : BBLOCK [fab$c_bln];		!FAB for closing library
BIND
    context = .lbr$gl_control [lbr$l_ctxptr] : BBLOCK, !Context block pointer
    header = .lbr$gl_control [lbr$l_hdrptr] : BBLOCK,	! library header
    recrab = .context [ctx$l_recrab] : BBLOCK;	!Record RAB

header_status = true;
disc_rec_sts = true;
CH$FILL (0,fab$c_bln,lbrfab);		!Zero the FAB
lbrfab [fab$b_bln] = fab$c_bln;		!Identify it as a FAB
lbrfab [fab$b_bid] = fab$c_bid;
lbrfab [fab$w_ifi] = .context [ctx$w_ifi];	!Set IFI for close
!
!	Write all modified blocks to the library file.
!
cache_status = dealloc_cache (); ! Write cached disk blocks if necessary
IF .context  [ctx$v_hdrdirty]		! If header modified,
AND NOT .context  [ctx$v_oldlib]		! and not old format library
THEN BEGIN
    INCR I FROM 1 TO .header [lhd$b_nindex]	!Clear the lock bit in index descriptors
    DO BEGIN
	BIND
	    index_desc = header [lhd$c_idxdesc - idd$c_length, 0, 0, 0] :
			BLOCKVECTOR [,idd$c_length, BYTE];

	index_desc [.i, idd$v_locked] = false;
	END;

    IF .cache_status	! If no error in writing out cache then write header back
    THEN
        header_status = write_block (.lbr$gl_control  [lbr$l_hdrptr], 1); 
    END;

!
!	Close the file.
!
IF .recrab [rab$w_isi] NEQ 0		!If stream is connected
THEN disc_rec_sts = $DISCONNECT (RAB = recrab); !Disconnect record stream
close_status  = $CLOSE (FAB = lbrfab);	!Close the file
lbr_deal_mem (..control_index);		!Deallocate memory
IF NOT .header_status
    THEN RETURN .header_status
    ELSE IF NOT .cache_status
	THEN RETURN .cache_status
	ELSE IF NOT .disc_rec_sts
	    THEN RETURN .disc_rec_sts
	    ELSE IF NOT .close_status
		THEN RETURN .close_status
		ELSE RETURN lbr$_normal
END
END;					! Of LBR$CLOSE

%SBTTL  'all_control_idx';
ROUTINE all_control_idx (control_index, control_table) =
BEGIN
!
! This routine allocates an index number and returns it in control_index.
! If no index number is found then lbr$_toomnylib is returned.  the control
! table is then allocated and the address returned in control_table.  The
! control table address is also store in lbr$al_ctltab.
!
INCR i FROM 0 TO lbr$c_maxctl
DO IF .lbr$al_ctltab [.i] EQL 0		!If we found one
THEN BEGIN
    .control_index = .i + 1;		!Return index to caller
    perform (get_zmem (lbr$c_length, .control_table)); !Allocate the control table
    lbr$al_ctltab [.i] = ..control_table; !Set address into table
    IF .i GTRU .lbr$gl_hictl THEN lbr$gl_hictl = .i; !Update hictl if needed
    RETURN true;
    END
ELSE IF .i EQL lbr$c_maxctl THEN RETURN lbr$_toomnylib;
RETURN lbr$_toomnylib
END;					!Of all_control_idx

%SBTTL  'dea_control_idx';
ROUTINE dea_control_idx (control_index) : NOVALUE =
BEGIN
!
! This routine deallocates an index number and updates lbr$gl_hictl if necessary.
!
LOCAL
    index;

index = .control_index - 1;
dealloc_mem (lbr$c_length, .lbr$al_ctltab [.index]);	!Deallocate control table
lbr$al_ctltab [.index] = 0;			!Zero the table entry
INCR i FROM .index TO .lbr$gl_hictl 		!See if any higher indices allocated
DO IF .lbr$al_ctltab [.i] NEQ 0			!If there are
	THEN return				!then done
	ELSE IF .i EQL .lbr$gl_hictl		!If we go all the way to end
	    THEN BEGIN
		lbr$gl_hictl = .index;		!Then new low is just below us
		RETURN;
		END;
END;						!Of dea_control_idx

%SBTTL  'prealloc_index';
ROUTINE prealloc_index (header, create_options) =
BEGIN
!
! This routine pre-allocates index blocks in a library being created.
!
MAP
    header : REF BBLOCK,
    create_options : REF BBLOCK;

LOCAL
    indexblocks,
    entall,
    entsperblk,
    bufblks,
    cachentry : REF BBLOCK,
    bufadr : REF VECTOR [,LONG];

entall = .create_options [cre$l_entall];		!Pick up user request
IF .entall EQL 0 THEN entall = lbr$c_defentall;	! and default null request
entsperblk = (IF .create_options [cre$l_keylen] + 1 NEQ 0 !Determine if ASCII or binary
		THEN .create_options [cre$l_keylen]   ! and determine length of keys
		ELSE 4);
entsperblk = (index$c_length - index$c_entries) / (.entsperblk + rfa$c_length);
indexblocks = .entall/.entsperblk;		!compute # blocks to allocate
IF .indexblocks EQL 0				!Always allocate at least 1 block
    THEN indexblocks = 1;
IF .create_options [cre$l_vertyp] EQL cre$c_vmsv2	! If index is not variable key storage
THEN indexblocks = (.indexblocks*4)/3;			! add in the fudge factor

!
! Write the pre-allocated index
!
INCRU i FROM 1 TO .indexblocks			!Create the index
DO BEGIN
    perform (get_mem (lbr$c_pagesize, bufadr));	!Allocate a page
    perform (add_cache (.i+1, cachentry));	!Add to cache
    cachentry [cache$l_address] = .bufadr;
    cachentry [cache$v_dirty] = true;		!Mark block as modified
    bufadr [0] = (IF .i NEQ .indexblocks		!Set link to next block
			THEN .i+2		!
			ELSE 0);		! or 0 if on last block
    END;
header [lhd$l_hipreal] = .indexblocks + 1;	!Set vbn of highest preallocated index block
header [lhd$l_nextvbn] = .indexblocks + 2;	!Set next available vbn
header [lhd$l_freeidx] = 2;			! and pointer to first free index block
header [lhd$l_freidxblk] = .indexblocks;		!Set count of available blocks
RETURN true
END;						!OF prealloc_index

%SBTTL  'lbr_deal_mem';
GLOBAL ROUTINE lbr_deal_mem (control_index) : NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates all memory allocated during the processing
!	of a library.  This includes the librarian context block, the header
!	block, the RAB/NAM block, the block buffer, and any indices left.
!
! CALLING SEQUENCE:
!
!	LBR_DEAL_MEM()
!
! INPUT PARAMETERS:
!
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The librarian context block, the RAB/NAM block, and the block
!	buffer are all deallocated.
!
! SIDE EFFECTS:
!	NONE
!
!--

LOCAL
	context : REF BLOCK [,BYTE];		!Pointer to context block

IF .lbr$gl_control [lbr$l_hdrptr] NEQ 0		!If there is a header
THEN BEGIN
    dealloc_mem (lbr$c_pagesize,
		.lbr$gl_control [lbr$l_hdrptr]);	! then deallocate it
IF (context = .lbr$gl_control [lbr$l_ctxptr]) NEQ 0 !If there is a context block
THEN BEGIN
    IF .context [ctx$l_recrab] NEQ 0		!If there is a RAB allocated
    THEN dealloc_mem (rab$c_bln+nam$c_bln, .context [ctx$l_recrab]); !then deallocate it
    IF .context [ctx$l_readbuf] NEQ 0		!If read buffer allocated
	THEN dealloc_mem (lbr$c_maxrecsiz, .context [ctx$l_readbuf]);
    IF .context [ctx$l_rdbufr] NEQ 0			!Read buffer allocated?
    THEN dealloc_mem (.lbr$gl_maxread * lbr$c_pagesize,
			.context [ctx$l_rdbufr]);
!    IF .context [ctx$l_rphasht] NEQ 0		!Replace hash table allocated?
!    THEN dealloc_mem (lbr$c_pagesize, .context [ctx$l_rphasht]);
    IF .context [ctx$l_cache] NEQ 0		!Disk block cache hash table allocated?
    THEN dealloc_mem (lbr$c_hashsize, .context [ctx$l_cache]);
    dealloc_mem (ctx$c_length, .context);		!Deallocate the context block
    END;
END;
dea_control_idx (.control_index);			!Deassign control index
RETURN true
END;					! Of lbr_deal_mem

%SBTTL  'LBR$GET_HEADER';
GLOBAL ROUTINE lbr$get_header (control_index, retary) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine retrieves the information from the library header and stores
!	it into an array for the caller.
!
! CALLING SEQUENCE:
!
!	status = LBR$GET_HEADER (control_index, retary)
!
! INPUT PARAMETERS:
!
!	control_index		is the address of a longword containing the 
!				 index returned by LBR$INI_CONTROL.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!
!	The 128-longword array retary is filled in with the information from
!	the library header.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	lbr$_libnotopn	library was not open
!	lbr$_illctl	illegal control block
!
! SIDE EFFECTS:
!	NONE
!
!--

MAP
	retary : REF BLOCK [,BYTE];
LOCAL
	header : REF BLOCK [,BYTE];		!Pointer to header

perform (validate_ctl (..control_index));	!Validate the control table
IF NOT .lbr$gl_control [lbr$v_open]		!If library not open
THEN RETURN lbr$_libnotopn;			! thats an error too
IF (header = .lbr$gl_control [lbr$l_hdrptr]) EQL 0!If no header in memory
OR ((.header [lhd$l_sanity] NEQ lhd$c_saneid)	!  or header appears bogus
AND (.header [lhd$l_sanity] NEQ lhd$c_saneid3))
THEN RETURN lbr$_illctl			!  then error
ELSE BEGIN
BIND
	hdrnxtrfa = header [lhd$b_nextrfa] : BLOCK [,BYTE],
	retnxtrfa = retary [lhi$b_nextrfa] : BLOCK [,BYTE];
!
! Copy info from the header into the array
!
retary [lhi$l_type] = .header [lhd$b_type];	!Library type
retary [lhi$l_nindex] = .header [lhd$b_nindex];	!Number of indices
retary [lhi$l_majorid] = .header [lhd$w_majorid]; !Copy format level major/minor id
retary [lhi$l_minorid] = .header [lhd$w_minorid];
CH$MOVE (32,header [lhd$t_lbrver],retary [lhi$t_lbrver]); !Creating librarian version
retary [lhi$l_credat] = .header [lhd$l_credat];	!Creation date/time
retary [lhi$l_credat]+4 = .(header [lhd$l_credat]+4);
retary [lhi$l_updtim] = .header [lhd$l_updtim];	!Date/time of last update
retary [lhi$l_updtim]+4 = .(header [lhd$l_updtim]+4);
retary [lhi$l_updhis] = 0;	! Update history VBN is now obsolete
retary [lhi$l_freevbn] = .header [lhd$l_freevbn];	! 1st deleted block
retary [lhi$l_freeblk] = .header [lhd$l_freeblk];	! Number of deleted blocks
retnxtrfa [rfa$l_vbn] = .hdrnxtrfa [rfa$l_vbn];
retnxtrfa [rfa$w_offset] = .hdrnxtrfa [rfa$w_offset];
retary [lhi$w_rfaxtr] = 0;
retary [lhi$l_nextvbn] = .header [lhd$l_nextvbn];	!Next VBN to allocate
retary [lhi$l_freidxblk] = .header [lhd$l_freidxblk];
retary [lhi$l_freeidx] = .header [lhd$l_freeidx];
retary [lhi$l_hipreal] = .header [lhd$l_hipreal];
retary [lhi$l_idxblks] = .header [lhd$l_idxblks];
retary [lhi$l_idxcnt] = .header [lhd$l_idxcnt];
retary [lhi$l_modcnt] = .header [lhd$l_modcnt];
retary [lhi$l_mhdusz] = .header [lhd$b_mhdusz];
retary [lhi$l_maxluhrec] = .header [lhd$w_maxluhrec];
retary [lhi$l_numluhrec] = .header [lhd$w_numluhrec];
IF .header [lhd$w_closerror] EQL lhd$c_corrupted
THEN retary [lhi$l_libstatus] = false
ELSE retary [lhi$l_libstatus] = true;
RETURN lbr$_normal
END
END;						!Of LBR$GET_HEADER


%SBTTL  'LBR$SET_LOCATE';

GLOBAL ROUTINE lbr$set_locate (control_index) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine turns on locate mode.
!
! CALLING SEQUENCE:
!
!	status = LBR$SET_LOCATE (control_index)
!
! INPUT PARAMETERS:
!
!	control_index		is the address of a longword containing the 
!				 index returned by LBR$INI_CONTROL.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	lbr$_libnotopn	library was not open
!	lbr$_illctl	illegal control block
!
! SIDE EFFECTS:
!	Locate mode is turned on.
!
!--

perform (validate_ctl (..control_index));	! Validate the control table

lbr$gl_control [lbr$v_locate] = true;		! set locate mode
RETURN lbr$_normal;
END;		! lbr$set_locate


%SBTTL  'LBR$SET_MOVE';

GLOBAL ROUTINE lbr$set_move (control_index) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine turns off locate mode and leaves library in move mode.
!
! CALLING SEQUENCE:
!
!	status = LBR$SET_MOVE (control_index)
!
! INPUT PARAMETERS:
!
!	control_index		is the address of a longword containing the 
!				 index returned by LBR$INI_CONTROL.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	lbr$_libnotopn	library was not open
!	lbr$_illctl	illegal control block
!
! SIDE EFFECTS:
!	Move mode is turned on.
!
!--

perform (validate_ctl (..control_index));	! Validate the control table

lbr$gl_control [lbr$v_locate] = false;		! set locate mode
RETURN lbr$_normal;
END;		! lbr$set_move


%SBTTL  'LBR$RET_RMSSTV';

GLOBAL ROUTINE lbr$ret_rmsstv =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the RMS status value.
!
! CALLING SEQUENCE:
!
!	status = LBR$RET_RMSSTV ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	the contents of lbr$gl_rmsstv
!
! SIDE EFFECTS:
!	NONE
!
!--
RETURN .lbr$gl_rmsstv;
END;		! lbr$ret_rmsstv

END
ELUDOM						!Of Module
