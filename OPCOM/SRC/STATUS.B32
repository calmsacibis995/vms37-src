MODULE	STATUS		(
			 LANGUAGE (BLISS32),
			 IDENT = 'V03-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the specialized logic to service
!	a particular type of request sent by a user to OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!
!
!--

BEGIN						! Start of STATUS

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:OPCOMDEF.REQ';

FORWARD ROUTINE
	STATUS_HANDLER	: NOVALUE;

BUILTIN

	INSQUE,					! Insert entry onto a queue
	REMQUE;					! Remove entry from a queue

GLOBAL ROUTINE STATUS_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all STATUS messages received by OPCOM.
!
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of STATUS_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL ROUTINE
	CHECK_REQUEST,				! Common sanity checks
	DEALLOCATE_RQCB,			! Dispose of an RQCB
	FIND_OPERATOR,				! Locate a given operator
	FORMAT_MESSAGE,				! Format an OPCOM message
	INTERPRET_MASK,				! Interpret attention mask
	NOTIFY_OPERATOR,			! Notify a given operator
	VALID_OPERATOR;				! See if operator device is valid

LOCAL
	MESSAGE_VECTOR	: VECTOR [5,LONG],	! Message info
	STATUS_DESC	: BBLOCK [DSC$K_S_BLN],	! Status message descriptor
	STATUS_BUF	: BBLOCK [OPC$K_MAXREAD], ! Status message buffer
	RQCB		: REF BBLOCK,		! RQCB data structure
	OPER_RQCB	: REF BBLOCK,		! ditto (for known operator)
	RQST_RQCB	: REF BBLOCK,		! ditto (for request RQCB)
	OCD		: REF BBLOCK,		! OCD data structure
	MCB		: REF BBLOCK,		! MCB data structure
	RQST_COUNT	: LONG,			! Count of requests
	STATUS		: LONG;

!
! Check the minimum request size.  If not
! enough data, then ignore the message.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + OPC$K_STATUS_MIN_SIZE)
THEN
    RETURN;
!
! Do some common sanity checking, and get an RQCB.
!
IF NOT CHECK_REQUEST (.BUFFER_DESC, RQCB)
THEN
    RETURN;
!
! Make sure this is a valid operator device.
!
IF NOT VALID_OPERATOR (.BUFFER_DESC, .RQCB)
THEN
    BEGIN
    DEALLOCATE_RQCB (.RQCB);			! Dismiss the request
    RETURN;
    END;
!
! See if this is a valid operator.  If not, then dismiss the request.
!
IF NOT FIND_OPERATOR (.RQCB, OPER_RQCB)
THEN
    BEGIN
    MESSAGE_VECTOR [0] = OPC$_ILLRQST;		! Set message code
    MESSAGE_VECTOR [1] = 0;			! Use current time of day
    FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);	! Format the message
    NOTIFY_OPERATOR (.RQCB);			! Notify the requestor
    DEALLOCATE_RQCB (.RQCB);			! Dispose of the RQCb
    RETURN;					! Dismiss the request
    END;
!
! The operator is known to opcom.  Send the operator
! the standard status message.
!
STATUS_DESC [0,0,32,0] = OPC$K_MAXREAD;		! Set buffer size
STATUS_DESC [DSC$A_POINTER] = STATUS_BUF;	! Set buffer address
IF NOT INTERPRET_MASK (OPER_RQCB [RQCB_L_ATTNMASK1], STATUS_DESC, STATUS_DESC)
THEN
    BEGIN
    DEALLOCATE_RQCB (.RQCB);
    RETURN;
    END
ELSE
    BEGIN
    MESSAGE_VECTOR [0] = OPC$_OPERSTS;		! Set message code
    MESSAGE_VECTOR [1] = 0;			! Use current date and time
    MESSAGE_VECTOR [2] = RQCB [RQCB_L_OPER_LEN];! Set operator device name
    MESSAGE_VECTOR [3] = STATUS_DESC;		! Set status message descriptor
    FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);	! Format the message
    NOTIFY_OPERATOR (.RQCB);			! Send status message to the requestor
    END;
!
! Scan through the list of request queued for this OCD.
! If the requestor is enabled to handle the request, inform
! the operator of the request.
!
OCD = .OPER_RQCB [RQCB_L_OCD];			! Get OCD address
RQST_COUNT = .OCD [OCD_W_RQSTCOUNT];		! Get count of requests
RQST_RQCB = .OCD [OCD_L_RQSTFLINK];		! Get address of first RQCB
WHILE (.RQST_COUNT GTR 0) DO
    BEGIN
    !
    ! Compare the attention masks of the requests against
    ! the attention masks of the operator.  If any bits are
    ! in common, then notify the operator of the request.
    !
    IF ((.OPER_RQCB [RQCB_L_ATTNMASK1] AND .RQST_RQCB [RQCB_L_ATTNMASK1]) NEQ 0)
    OR ((.OPER_RQCB [RQCB_L_ATTNMASK2] AND .RQST_RQCB [RQCB_L_ATTNMASK2]) NEQ 0)
    THEN
	BEGIN
	MCB = .RQCB [RQCB_L_MCB];		! Save MCB address
	RQCB [RQCB_L_MCB] = .RQST_RQCB [RQCB_L_MCB];
	NOTIFY_OPERATOR (.RQCB);		! Inform the operator
	RQCB [RQCB_L_MCB] = .MCB;		! Restore MCB address
	END;
    RQST_COUNT = .RQST_COUNT - 1;		! Decrement the request cout
    RQST_RQCB  = .RQST_RQCB [RQCB_L_FLINK];	! Get address of next request
    END;

DEALLOCATE_RQCB (.RQCB);			! Dismiss the request.

END;						! End of STATUS_HANDLER

END						! End of STATUS
ELUDOM
