MODULE	TIMESTAMP	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V03-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains all the various and sundry general
!	purpose utility routines used by OPCOM's request handlers.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!
!
!--

BEGIN						! Start of TIMESTAMP

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:OPCOMDEF.REQ';

FORWARD ROUTINE
	TIME_STAMP	: NOVALUE;	! Periodic wakeup routine

BUILTIN

	INSQUE,				! Insert entry onto a queue
	REMQUE;				! Remove entry from a queue


GLOBAL ROUTINE TIME_STAMP : NOVALUE =

!++
! Functional description:
!
!	TIME_STAMP is an AST service routine that is executed periodically
!	to cause OPCOM to perform its periodic timestamp function and then
!	issue another timer AST request.  The timestamp function is to remind
!	all operators of outstanding requests.  If the operator has the
!	NOREMIND option set, then the operator will not be reminded.
!	TIME_STAMP uses an interlock mechanism to insure that the timestamp
!	will not occur at an inappropriate time for OPCOM.
!	
!	No timestamp message is explicitly logged, but messages may be logged
!	as operators are implicitly disabled and requests are canceled.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of TIME_STAMP

EXTERNAL ROUTINE
	IMPLICIT_DISABLE,			! Check for implicit disable
	NOTIFY_OPERATOR;			! Notify a given operator

EXTERNAL LITERAL
	MIN_SCOPE,				! Minimum scope value
	MAX_SCOPE,				! Maximum scope value
	BUSY,					! A bit in GLOBAL_STATUS
	TIMESTAMP_PENDING,			! A bit in GLOBAL_STATUS
	SHUTDOWN_PENDING;			! A bit in GLOBAL_STATUS

EXTERNAL
	OCD_VECTOR	: VECTOR,		! OCD list heads
	GLOBAL_STATUS	: BITVECTOR,		! Global status bits for OPCOM
	WAIT_DELTA	: REF BBLOCK;		! Delta time quadword
LOCAL
	OPER		: REF BBLOCK,		! RQCB (operator) data structure
	NEXT_OPER	: REF BBLOCK,		! ditto
	RQST		: REF BBLOCK,		! RQCB (request) data structure
	NEXT_RQST	: REF BBLOCK,		! ditto
	OCD		: REF BBLOCK,		! OCD data structure
	NEXT_OCD	: REF BBLOCK,		! ditto
	MCB		: REF BBLOCK,		! MCB data structure
	OCD_COUNT	: LONG,			! Count of OCDs in list
	OPER_COUNT	: LONG,			! Count of operators in OCD list
	RQST_COUNT	: LONG,			! Count of requests in list
	STATUS		: LONG;

!
! If shutdown is pending, then do nothing.
!
IF .GLOBAL_STATUS [SHUTDOWN_PENDING]
THEN
    BEGIN
    GLOBAL_STATUS [TIMESTAMP_PENDING] = FALSE;
    RETURN;
    END;
!
! Set TIMESTAMP_PENDING.  If OPCOM is busy, then return.
! If not, then set BUSY to prevent another timestamp AST
! from arriving.
!
GLOBAL_STATUS [TIMESTAMP_PENDING] = TRUE;
IF .GLOBAL_STATUS [BUSY]
THEN
    RETURN;
GLOBAL_STATUS [BUSY] = TRUE;
!
! Notify each operator known to OPCOM of every request that
! it is enabled to receive.  A side effect of this is that
! any operators that have been implicitly disabled will be
! removed from the operator data base.  Any request that no
! longer has operator coverage will be canceled.
!
INCR I FROM MIN_SCOPE TO MAX_SCOPE DO
    BEGIN
    !
    ! For each each class of operator (SYSTEM, GROUP, USER) ...
    !
    NEXT_OCD = .OCD_VECTOR [(.I-1)*2];		! Get first OCD in list
    INCR J FROM 1 TO .OCD_VECTOR [(.I-1)*2+1] DO
	BEGIN
	!
	! For each OCD in the operator class list...
	!
	OCD = .NEXT_OCD;			    ! Get current OCD address
	NEXT_OCD = .OCD [OCD_L_FLINK];		    ! Get next OCD address
	NEXT_OPER = .OCD [OCD_L_OPERFLINK];	    ! Get first operator address
	INCR K FROM 1 TO .OCD [OCD_W_OPERCOUNT] DO
	    BEGIN
	    !
	    ! For each operator in the OCD list...
	    !
	    OPER = .NEXT_OPER;				! Get current operator address
	    NEXT_OPER = .OPER [RQCB_L_FLINK];		! Get next operator address
	    !
	    ! Check to see if the operator is enabled.
	    ! Also check to see if the operator is eligible for the reminder.
	    !
	    IF NOT IMPLICIT_DISABLE (.OPER)
	    OR NOT (.BBLOCK [OPER [RQCB_L_RQ_OPTIONS], OPC$V_NOREMIND])
	    THEN
		BEGIN
		NEXT_RQST = .OCD [OCD_L_RQSTFLINK];	    ! Get first request address
		INCR L FROM 1 TO .OCD [OCD_W_RQSTCOUNT] DO
		    BEGIN
		    !
		    ! For each request in the OCD request list...
		    !
		    RQST = .NEXT_RQST;
		    NEXT_RQST = .RQST [RQCB_L_FLINK];
		    IF ((.OPER [RQCB_L_ATTNMASK1] AND .RQST [RQCB_L_ATTNMASK1]) NEQ 0)
		    OR ((.OPER [RQCB_L_ATTNMASK2] AND .RQST [RQCB_L_ATTNMASK2]) NEQ 0)
		    THEN
			BEGIN
			MCB = .OPER [RQCB_L_MCB];		! Save the MCB address
			OPER [RQCB_L_MCB] = .RQST [RQCB_L_MCB];	! Copy MCB address
			NOTIFY_OPERATOR (.OPER);		! Notify the operator
			OPER [RQCB_L_MCB] = .MCB;		! Restore the MCB address
			END;
		    END;
		END;
	    END;
	END;
    END;
!
! Queue another timer ast
!
GLOBAL_STATUS [BUSY] = FALSE;
GLOBAL_STATUS [TIMESTAMP_PENDING] = FALSE;
IF NOT (STATUS = $SETIMR (DAYTIM = WAIT_DELTA, ASTADR = TIME_STAMP))
THEN
    $EXIT (CODE = .STATUS);
  
END;						! End of TIME_STAMP

END						! End of TIMESTAMP
ELUDOM
