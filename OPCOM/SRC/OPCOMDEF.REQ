!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!	IDENT 'V02-002'
!
! Functional description:
!
!	This file contains some macro and literal definitions that
!	are needed by OPCOMDAT and OPCOMCODE.  The must be REQUIREd
!	into both files at compile time.
!
! Update history:
!
! V02-002	STJ0222		Steven T. Jeffreys,		17-Feb-1982
!		Add implict disable list pointers to the RQCB definition,
!		and some status bits that are used to mark the RQCB as
!		being implicitly disabled.
!
!--


STRUCTURE
	!
	! Define some handy data structures.
	!
	BBLOCK	[O, P, S, E; N] =
		[N]
		(BBLOCK+O)<P,S,E>,

	BBLOCKVECTOR [I, O, P, S, E; N, BS] =
		[N*BS]
		((BBLOCKVECTOR+I*BS)+O)<P,S,E>;


MACRO
	!
	! Define some handy macros for generating data structures.
	!
	DESCRIPTOR (STRING) =			! Generate static string descriptor
		BBLOCK	[DSC$K_S_BLN]
		INITIAL	(WORD (%CHARCOUNT (STRING)),
			 BYTE (DSC$K_DTYPE_T),
			 BYTE (DSC$K_CLASS_S),
			 LONG (UPLIT BYTE (STRING))
			)%;

!
! Define a compile time variable to be used as a table
! origin by several of the macros.
!
COMPILETIME	COUNTER	= 0;

!
! Temporary definition for symbols and macros that
! will later be moved to the $OPCDEF macro.
!
REQUIRE 'SRC$:OPCDEFTMP.REQ';

LITERAL
	MAX_DEV_NAM	= 30,			! Maximum length of a dev name
	!
	! Define volume protection masks that are used
	! to control access to the operator mailbox.
	!
	READ_WRITE	= %X'0FF0F',		! Allow read and write access
	READ_NOWRITE	= %X'0FFFF',		! Allow read, don't allow write
	!
	! Other useful literals
	!	
	TRUE		= 1,			! BOOLEAN value
	FALSE		= 0,			! BOOLEAN value
	!
	ON		= 1,			! Bit value
	OFF		= 0;			! Bit value


MACRO
	!
	! Define the common data structure header fields.
	! All of the data structure definitions that follow
	! this one have the first few fields in common.
	! However, some of the fields are used differently,
	! depending on the type of data structure.
	!
	HDR_L_FLINK		=  0,0,32,0%,	! Flink to next data structure
	HDR_L_BLINK		=  4,0,32,0%,	! Blink to last data structure
	HDR_W_SIZE		=  8,0,16,0%,	! Size of data structure
	HDR_B_TYPE		= 10,0,08,0%,	! Type of data structure
	HDR_B_SCOPE		= 11,0,08,0%,	! Scope of data structure
	HDR_L_SEQNUM		= 12,0,32,0%,	! Sequence # of data structure
	HDR_L_BPTR		= 16,0,32,0%,	! Back pointer to main data structure
	HDR_L_STATUS		= 20,0,32,0%,	! Status longword
	!
	! Define the common header status bits.
	! The low 16 bits are common for all data structures.
	! The high 16 bits are data structure specific.
	!
	HDR_M_LAL		= 1%,		! Block is from LAL
	HDR_V_LAL		= 0,0,1,0%,
	!
	HDR_V_BRD		= 0,1,1,0%,	! Broadcast this message
	HDR_M_BRD		= 2%,
	!
	HDR_V_LOG		= 0,2,1,0%,	! Log this message
	MDR_M_LOG		= 4%;

MACRO
	!!
	!!
	!! Define Request Context Block (RQCB) fields.
	!!
	!!
	RQCB_K_SIZE		= 124%,		! Size of RQCB in bytes
	RQCB_L_FLINK		=  0,0,32,0%,	! Flink to next RQCB
	RQCB_L_BLINK		=  4,0,32,0%,	! Blink to last RQCB
	RQCB_W_SIZE		=  8,0,16,0%,	! Size of data structure
	RQCB_B_TYPE		= 10,0,08,0%,	! Type of data structure
	! **  1 spare byte  **			!
	RQCB_L_SEQNUM		= 12,0,32,0%,	! RQCB sequence number
	RQCB_L_OCD		= 16,0,32,0%,	! Backpointer to OCD
	RQCB_L_STATUS		= 20,0,32,0%,	! Status longword
	!
	RQCB_W_MSGTYPE		= 24,0,16,0%,	! Message type code
	RQCB_W_REPLYMBX		= 26,0,16,0%,	! Reply mailbox unit number
	RQCB_L_PRIVMASK1	= 28,0,32,0%,	! First LW of privilege mask
	RQCB_L_PRIVMASK2	= 32,0,32,0%,	! Second LW of privilege mask
	RQCB_L_SENDERUIC	= 36,0,32,0%,	! UIC of request sender
	RQCB_T_USERNAME		= 40,0,00,0%,	! Pointer to start of username
	RQCB_S_USERNAME		= 12%,		! Size of username in bytes
	RQCB_T_ACCOUNT		= 52,0,00,0%,	! Pointer to start of account
	RQCB_S_ACCOUNT		= 8%,		! Size of account in bytes
	RQCB_B_BASEPRI		= 60,0,08,0%,	! Sender's base priority
	! **  1 spare byte			!
	RQCB_B_RQSTCODE		= 62,0,08,0%,	! Request type code
	RQCB_B_SCOPE		= 63,0,08,0%,	! Scope of request
	RQCB_L_OPTIONS		= 64,0,32,0%,	! Request independent options
	RQCB_L_RQ_OPTIONS	= 68,0,32,0%,	! Request dependent options
	RQCB_L_ATTNMASK1	= 72,0,32,0%,	! Attention mask part 1
	RQCB_L_ATTNMASK2	= 76,0,32,0%,	! Attention mask part 2
	RQCB_L_RQSTID		= 80,0,32,0%,	! User request identifier
	RQCB_L_UIC		= 84,0,32,0%,	! Requestor UIC
	RQCB_L_MCB		= 88,0,32,0%,	! Address of MCB
	RQCB_L_RQSTNUM		= 92,0,32,0%,	! Request number
	RQCB_W_OPRSTS		= 96,0,16,0%,	! Operator status bits
	RQCB_W_MBXSIZE		= 98,0,16,0%,	! Mailbox buffer size
	RQCB_L_OPER_LEN		=100,0,32,0%,	! Operator device name size
	RQCB_L_OPER_PTR		=104,0,32,0%,	! Operator device name pointer
	RQCB_L_TEXT_LEN		=108,0,32,0%,	! Optional text size
	RQCB_L_TEXT_PTR		=112,0,32,0%,	! Optional text pointer
	RQCB_L_DSBLFLINK	=116,0,32,0%,	! Flink to next disabled oper
	RQCB_L_DSBLBLINK	=120,0,32,0%,	! Blink to last disabled oper
	!
	! Define request status bits.
	!
	RQSTS_V_IMPCANCEL	= 0,0,1,0%,	! Request implicitly canceled
	!
	! Define operator status bits.
	!
	OPRSTS_V_TRM		= 0,0,1,0%,	! Terminal
	OPRSTS_V_REMTRM		= 0,1,1,0%,	! Remote terminal
	OPRSTS_V_MBX		= 0,2,1,0%,	! Mailbox
	OPRSTS_V_IMPDISABLE	= 0,3,1,0%;	! Operator implicitly disabled

MACRO
	!!
	!!
	!! Define Request Control Block (RCB) fields.
	!!
	!!
	RCB_K_SIZE		= 36%,		! Size of RCB in bytes
	RCB_L_FLINK		=  0,0,32,0%,	! Flink to next RCB
	RCB_L_BLINK		=  4,0,32,0%,	! Blink to last RCB
	RCB_W_SIZE		=  8,0,16,0%,	! Size of data structure
	RCB_B_TYPE		= 10,0,08,0%,	! Type of data structure
	RCB_B_SCOPE		= 11,0,08,0%,	! Scope of RCB
	RCB_L_SEQNUM		= 12,0,32,0%,	! RCB sequence number
	RCB_L_RQCB		= 16,0,32,0%,	! Pointer to RQCB
	RCB_L_STATUS		= 20,0,32,0%,	! Status longword
	!
	RCB_L_RQSTNUM		= 24,0,32,0%,	! Operator request number
	RCB_L_TEXTLEN		= 28,0,32,0%,	! Length of request text
	RCB_L_TEXTPTR		= 32,0,32,0%;	! Address of request text

MACRO
	!!
	!!
	!! Define Operator Control Block (OCB) fields
	!!
	!!
	OCB_K_SIZE		= 44%, 		! Size of fixed part of OCB
	OCB_L_FLINK		=  0,0,32,0%,	! Forward link to next OCB
	OCB_L_BLINK		=  4,0,32,0%,	! Backward link to last OCB
	OCB_W_SIZE		=  8,0,16,0%,	! Size of OCB
	OCB_W_TYPE		= 10,0,08,0%,	! Type of data structure
	OCB_B_SCOPE		= 11,0,08,0%,	! Scope of OCB
	OCB_L_SEQNUM		= 12,0,32,0%,	! OCB sequence number
	OCB_L_RQCB		= 16,0,32,0%,	! Address of RQCB
	OCB_L_STATUS		= 20,0,32,0%,	! Status logword.
	!
	OCB_L_ATTNMASK1		= 24,0,32,0%,	! Operator attention mask
	OCB_L_ATTNMASK2		= 28,0,32,0%,	! Operator attention mask
	OCB_L_DEVNAMLEN		= 32,0,32,0%,	! Operator device name length
	OCB_L_DEVNAMPTR		= 36,0,32,0%,	! Operator device name string address
	OCB_W_BUFSIZ		= 40,0,32,0%,	! Operator device buffer size
	! **  2 spare bytes **			!
	!
	! Define OCB status bits.
	!
	OCB_M_PRMOPR		= 1^16%,	! Permanent operator
	OCB_V_PRMOPR		= 20,16,1,0%,	! 
	OCB_M_MAILBOX		= 1^17%,	! Operator is a mailbox
	OCB_V_MAILBOX		= 20,17,1,0%;	!

MACRO
	!!
	!!
	!! Define Operator Class Descriptor (OCD) fields.
	!!
	!!
	OCD_K_SIZE		= 196%,		! Size of OCD in bytes
	OCD_L_FLINK		=  0,0,32,0%,	! Flink to first OCB
	OCD_L_BLINK		=  4,0,32,0%,	! Blink to last OCB
	OCD_W_SIZE		=  8,0,16,0%,	! OCD size 
	OCD_B_TYPE		= 10,0,08,0%,	! OCD type 
	OCD_B_SCOPE		= 11,0,08,0%,	! Scope of OCD
	OCD_L_SEQNUM		= 12,0,32,0%,	! OCD sequence number
	OCD_L_UIC		= 16,0,32,0%,	! UIC associated w/ this OCD
	OCD_L_STATUS		= 20,0,32,0%,	! Status longword
	!
	OCD_L_NOTIFYMASK1	= 24,0,32,0%,	! Operator notification mask
	OCD_L_NOTIFYMASK2	= 28,0,32,0%,	! Operator notification mask
	OCD_L_LCB		= 32,0,32,0%,	! Pointer to logfile control block
	! **  2 spare bytes **			!
	OCD_W_RQSTCOUNT		= 38,0,16,0%,	! Number of outstanding requests
	OCD_L_RQSTFLINK		= 40,0,32,0%,	! Flink to first request RQCB
	OCD_L_RQSTBLINK		= 44,0,32,0%,	! Blink to last request RQCB
	! **  2 spare bytes **			!
	OCD_W_OPERCOUNT		= 50,0,16,0%,	! Count of operators
	OCD_L_ATTNMASK1		= 52,0,32,0%,	! Operator attention mask1
	OCD_L_ATTNMASK2		= 56,0,32,0%,	! Operator attention mask2
	OCD_L_OPERFLINK		= 60,0,32,0%,	! FLINK to first OCB
	OCD_L_OPERBLINK		= 64,0,32,0%,	! BLINK to last OCB
	OCD_T_COUNTVECTOR	= 68,0,00,0%,	! Count vector (64 words)
	!
	! This next macro will allow us to examine any element
	! of the count vector by just specifying its index.
	!
	OCD_W_ENABLECOUNT (N)	= (N*2)+$BYTEOFFSET(OCD_T_COUNTVECTOR),0,16,0%,
	!
	! Define OCD status flags.
	!
	OCD_V_IMPCANCEL		= 0,0,1,0%;	! At least one request was
						! implicitly canceled.

MACRO
	!!
	!!
	!! Define the Message control block (MCB) offsets.
	!!
	!!
	MCB_K_SIZE		= 36%,		! Size of MCB
	MCB_L_FLINK		=  0,0,32,0%,	! FLINK to next MCB
	MCB_L_BLINK		=  4,0,32,0%,	! BLINK to previous MCB
	MCB_W_SIZE		=  8,0,16,0%,	! Size of data structure
	MCB_B_TYPE		= 10,0,08,0%,	! Type of data structure
	MCB_B_SCOPE		= 11,0,08,0%,	! Scope of MCB
	MCB_L_SEQNUM		= 12,0,32,0%,	! MCB sequence number
	MCB_L_RQCB		= 16,0,32,0%,	! Pointer to RQCB
	MCB_L_STATUS		= 20,0,32,0%,	! Status longword
	!
	MCB_L_MSGID		= 24,0,32,0%,	! Message Identifier
	MCB_L_TEXTLEN		= 28,0,32,0%,	! Message text length
	MCB_L_TEXTPTR		= 32,0,32,0%;	! Message text address

MACRO
	!!
	!! Define Structure Control Block (SCB) fields.
	!! This control block contains information about all
	!! data structures, and is used by the create and
	!! delete data structure routines.  Each data structre
	!! is represented in the SCB table by an entry of the
	!! following form.  (LAL = Look Aside List)
	!!
	SCB_K_SIZE		=  16%,		! Size of the SCB entry
	SCB_W_SIZE		=  0,0,16,0%,	! Size of data structure
	SCB_W_LAL_COUNT		=  2,0,16,0%,	! # of Look-aside list entries
	SCB_L_SEQNUM		=  4,0,32,0%,	! Count of blocks created
	SCB_L_FLINK		=  8,0,32,0%,	! Flink to first LAL entry
	SCB_L_BLINK		= 12,0,32,0%;	! Blink to last LAL entry

MACRO
	!!
	!! Define the Message Descriptor Block (MDB) fields.
	!! Every message that OPCOM issues is represented by
	!! an entry in the MDB table.  The MDB table is indexed
	!! by message number.  Each entry in the MDB table is
	!! a pointer to the corresponding MDB.
	!!
	MDB_L_MSG_CODE		=  0,0,32,0%,	! VMS message code
	MDB_L_NARGS		=  4,0,32,0%,	! # of FAO arguements
	MDB_L_ARGS		=  8,0,00,0%,	! Offset to first arguement
	MDB_B_MODE (N)		=  ((N-1)*4)+$BYTEOFFSET(MDB_L_ARGS),0,8,0%,
	MDB_B_TYPE (N)		=  ((N-1)*4)+1+$BYTEOFFSET(MDB_L_ARGS),0,8,0%,
	MDB_B_SIZE (N)		=  ((N-1)*4)+2+$BYTEOFFSET(MDB_L_ARGS),0,8,0%,
	MDB_B_OFFSET (N)	=  ((N-1)*4)+3+$BYTEOFFSET(MDB_L_ARGS),0,8,0%;

MACRO
	!!
	!! Define the Request Descriptor Block (RDB) fields.  Each
	!! RDB structure contains some control information on a
	!! particular request.  Each type of request that is known
	!! by OPCOM is represented by an RDB.
	!!
	RDB_K_SIZE		=  20%,		! Size of the data structure
	RDB_L_HANDLER		=  0,0,32,0%,	! Address of request handler
	RDB_L_COUNT		=  4,0,32,0%,	! Count of requests received
	RDB_L_OPTIONS		=  8,0,32,0%,	! Options bit mask
	RDB_L_ATTNMASK1		= 12,0,32,0%,	! Operator attention mask

	RDB_L_ATTNMASK2		= 16,0,32,0%;	! Operator attention mask
MACRO
	!++
	! SCB_DEF
	!
	! Functional description:
	!
	!	This macro will build the SCB table and the associated
	!	SCB's.  Each entry in the SCB table is a pointer to
	!	an SCB.  Each SCB describes a particular data structure.
	!	The table has a 1 origin, and is indexed by the data
	!	structure type.
	!
	! Inputs:
	!
	!	DS_TYPE		: Data structure type.  An alphabetic
	!			  string that is assumed to prefix all
	!			  structure definitions and literals
	!			  pertaining to that structure type.
	!
	!	COUNT		: Count of data structures of this type
	!			  to be preallocated and inserted on
	!			  the its SCB look-aside list.
	!
	! Implicit Input:
	!
	!	A COMPILETIME symbol, DS_TYPE_CODE, has
	!	been declared and initialized to 1.
	!
	! Implicit Output:
	!
	!	A GLOBAL LITERAL defining the data
	!	structure type is declared.
	!--

	SCB_DEF
		(DS_TYPE,COUNT) =
		GLOBAL LITERAL %NAME (DS_TYPE,'_K_TYPE') = COUNTER;
		PSECT OWN = $SCB_ENTRY;
		OWN
			SCB:	BBLOCK	[SCB_K_SIZE]
				PRESET	([SCB_W_SIZE]		= %NAME (DS_TYPE,'_K_SIZE'),
					 [SCB_W_LAL_COUNT]	= COUNT,
					 [SCB_L_FLINK]		= SCB + $BYTEOFFSET (SCB_L_FLINK),
					 [SCB_L_BLINK]		= SCB + $BYTEOFFSET (SCB_L_FLINK)
					);
		PSECT OWN = $SCB_TABLE;
		OWN
			SCB_TBL:LONG INITIAL (SCB);
		UNDECLARE SCB, SCB_TBL;
		%ASSIGN (COUNTER,COUNTER+1);
		%;

LITERAL
	!
	! The following literals are needed to support the MDB_DEF
	! macro.  The literals are referenced in this and other modules.
	!
	A		= 1,		! Address MODE
	V		= 2,		! Value MODE
	I		= 3,		! Immediate MODE
	!
	T		= 32,		! Size of an address
	L		= 32,		! Size of a longword
	W		= 16,		! Size of a word
	B		= 8;		! Size of a byte



MACRO
	!++
	!
	! FILL_MDB_ARG
	!
	! Functional description:
	!
	!	This macro will fill an individual MDB arguement
	!	descriptor.
	!
	! Input:
	!
	!	Described in the MCB_DEF macro.
	!--

	FILL_MDB_ARG (MODE,TYPE,SIZE,OFFSET) =
		OWN
			%IF %IDENTICAL (MODE,I)
			%THEN
			!
			! The MODE is Immediate.
			!
			MDB_MODE	: BYTE INITIAL (%NAME (MODE)),
			MDB_TYPE	: BYTE INITIAL (0),
			MDB_SIZE	: BYTE INITIAL (B),
			MDB_OFFSET	: BYTE INITIAL (OFFSET);
			%ELSE
			!
			! The MODE is Address or Value.
			!
			MDB_MODE	: BYTE INITIAL (%NAME (MODE)),
			MDB_TYPE	: BYTE INITIAL (%NAME (TYPE,'_K_TYPE')),
			MDB_SIZE	: BYTE INITIAL (%NAME (SIZE)),
			MDB_OFFSET	: BYTE INITIAL ($BYTEOFFSET (%NAME (TYPE,'_',SIZE,'_',OFFSET)));
			%FI
			UNDECLARE MDB_MODE, MDB_TYPE, MDB_SIZE, MDB_OFFSET;
		%;


MACRO
	!++
	! ARG_DESCRIPTOR
	!
	! Functional Description:
	!
	!	This macro is an intermediate step used to break the
	!	list of arguement descriptors apart for further processing.
	!
	! Input:
	!
	!	ARG_DESCRIPTOR	: A list of arguement descriptors, where
	!			  the format of an arguement descriptor
	!			  was shown in the MDB_DEF macro.
	!--

	MDB_ARGS [ARG_DESCRIPTOR] =
		FILL_MDB_ARG (%REMOVE (ARG_DESCRIPTOR));
		%;

MACRO
	!++
	! MDB_DEF
	!
	! Functional description:
	!
	!	This macro will build the MDB table and the associated
	!	MDB's.  Each entry in the MDB table is a pointer to an
	!	MDB.  Each MDB describes an OPCOM message, so that the
	!	message text may be retrieved via $GETMSG, and formatted
	!	via $FAO.  The MDB table has a 0 origin, and is indexed
	!	by the OPCOM message code.
	!
	! Input:
	!
	!	OPCOM_CODE	: An alphabetic string that uniquely
	!			  identifies the message.  The string
	!			  is prefixed by "OPC$_" to derive the
	!			  the actual VMS message code.
	!
	!	NARGS		: The number of FAO arguements for this message.
	!
	!	Arg. Descriptors: For every FAO arguement, there must be an
	!			  arguement descriptor.  Each descriptor is
	!			  a bracket list of 4 parameters that describe
	!			  the FAO arguement. A description of the
	!			  parameters follows.
	!
	!		MODE	: Defines the addressing mode of the arguement.
	!			  Legal values are A (address), V (value), and
	!			  I (immediate).
	!		TYPE	: Data structure type, or 0.
	!		SIZE	: Arguement size.  Must be L, W, B, T or 0.
	!		OFFSET	: May either be an alphabetic structure field
	!			  name, or if the MODE is I, the OFFSET may be
	!			  an unsigned byte constant.  If it is the 
	!			  former, then the TYPE, SIZE and OFFSET 
	!			  parameters are concatenated together to form
	!			  the actual structure reference.
	!
	! Implicit Input:
	!
	!	The COMPILETIME symbol MSG_CODE has been initialized to 0.
	!
	! Implicit Output:
	!
	!	The COMPILETIME symbol MSG_CODE is incremented.  OPCOM_CODE
	!	is declared to be a GLOBAL LITERAL.
	!--

	MDB_DEF (OPCOM_CODE,NARGS) [] =
		GLOBAL LITERAL %NAME (OPCOM_CODE) = COUNTER;
		PSECT OWN = $MDB_ENTRY;
		OWN
			!
			! Allocate and initialize storage for 
			! the fixed portion of the MDB.
			!
			MDB_ENTRY	: VECTOR [2,LONG] 
					  INITIAL (%NAME ('OPC$_',OPCOM_CODE),
					  	   NARGS
						  ); 
			!
			! Allocate and initialize storage for argument list.
			!
			MDB_ARGS (%REMAINING);
		!
		! Create an MDB table entry pointing to the MDB.
		!
		PSECT OWN = $MDB_TABLE;
		OWN
			MDB_TBL		: LONG INITIAL (MDB_ENTRY);
		UNDECLARE MDB_ENTRY,MDB_TBL;
		%ASSIGN	(COUNTER,COUNTER+1);
		%;
