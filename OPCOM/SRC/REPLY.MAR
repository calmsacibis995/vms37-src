
	.TITLE	REPLY_COMMAND - OPERATOR REPLY TO REQUEST COMMAND IMAGE
	.IDENT	'V03-001'
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;++
; FACILITY:
;
;	OPERATOR REPLY TO REQUEST COMMAND IMAGE
;
; ABSTRACT:
;
;	THIS IMAGE IMPLEMENTS THE DCL REPLY COMMAND. IT IS THE GENERAL PURPOSE
;	OPERATOR UTILITY.
;
; AUTHOR:
;	R.HEINEN 28-SEP-1977
;
; Modified by;
;
;	V03-001	BLS0158		Benn Schreiber		16-Mar-1982
;		Remove $CLIDEFQUALREPL and get values from STARLET
;
;	V10	STJ0216		Steven T. Jeffreys	15-Feb-1982
;		- Return SS$_INSFARG if no qualifier is specified in the
;		  command line.
;
;	V09	STJ0127		Steven Jeffreys 08-Sep-1981
;		Fixed logical name translation overflow by enlarging the buffer.
;
;	V08	STJ0124		Steven Jeffreys	10-Sep-19181
;		Added support for /INITIALIZE_TAPE and /BLANK_TAPE.
;
;	V07	SGD00028	S.G.D.		19-Oct-1979	08:00
;		Use USERNAME instead of PRCNAM. Prefix node name
;		to terminal name if net is up.
;--
;
; EXTERNAL SYMBOLS
;
	$BRDCSTDEF			; DEFINE BROADCAST DEFINITIONS
	$DEVDEF				; DEFINE DEVICE CHARACTERACTICS
	$JPIDEF				; DEFINE JPI SYMBOLS
	$LOGDEF				; DEFINE LOGICAL NAME SYMBOLS
	$OPCDEF				; DEFINE OPCOM SYMBOLS
	$OPCMSG				; DEFINE OPCOM MESSAGES
	$PRVDEF				; DEFINE PRIVILEGE VECTOR
;
; LOCAL MACROS
;
	.MACRO	CLI	A,B,C
	.IF	NB	C
	PUSHAB	C
	.IFF
	CLRL	-(SP)
	.ENDC
	.IF	NB	B
	PUSHAB	B
	.IFF
	CLRL	-(SP)
	.ENDC
	.IF	NB	A
	PUSHAB	A
	.IFF
	CLRL	-(SP)
	.ENDC
	CALLS	#3,@W^CALLBACK
	.ENDM
;
; LOCAL STORAGE
;
	.PSECT	OPCOM_IMPURE,NOEXE,QUAD
;
; NAME OF SYS$COMMAND DEVICE
;
SYS_CMD_I:	.LONG	0,10$
10$:		.BLKB	LOG$C_NAMLENGTH
SYS_CMD:	.LONG	20$-10$
		.LONG	10$
10$:	.ASCII	/SYS$COMMAND/
20$:	
	.BLKB	8
;
; DATA STORAGE TO GET PROCESS NAME IN CASE SYS$COMMAND IS NOT A TERMINAL
;
JPI_DATA:	.WORD	16		; MAX SIZE
		.WORD	JPI$_USERNAME	; Get user name for message
		.LONG	USER_NAME+8	; STORAGE ADDRESS
		.LONG	USER_NAME	; SIZE STORAGE ADDRESS
		.LONG	0
USER_NAME:	.LONG	16,10$
10$:		.BLKL	4
BATCH:		.LONG	20$-10$,10$
10$:		.ASCII	/Batch/
20$:
;
; Data for prefixing nodename to terminal name
;
SYSNODE_DESC:	.ASCID	/SYS$NODE/	; System logical name
NODE_BUF:	.LONG	16		; Buffer for translation of SYS$NODE
		.ADDRESS	10$	; Buffer address
10$:
		.BLKB	16		; Save space
;
; DESC FOR BROADCAST TARGET
;
BRD_DESC:	.LONG	0,0
;
; BUFFER TO BUILD BROADCAST MESSAGE
;
BRD_BUF:	.LONG	256,10$
10$:		.BLKB	256
;
; OPERATOR MESSAGE BUFFER AND ENTRIES
;
MSG_DESC:	.LONG	0,10$
	.LONG	0			; PAD SPACE
10$:	
RQSTYPE:	.BLKB	1		; OPERATOR REQUEST TYPE
TARGET:		.BLKB	3		; MASK OF TARGET OPERATORS
MSGID:		.BLKB	4		; MESSAGE ID
OPRNAME:	.BLKB	2+16		; OPERATOR NAME AND UNIT
RETURNTEXT:	.BLKB	128		; TEXT OF REPLY
;
; FAO CONTROL STRINGS
;
TTY:	.LONG	20$-10$
	.LONG	10$
10$:	.ASCII	@!/!AS!AS,!AS !%T!/!AS@
20$:
	.BYTE	7,7,7,7			; BELLS FOR /BELL QUALIFIER
;
; CLI RESULT PARSE DATA STORAGE
;
CLI_MESSAGE:	$CLIREQDESC	RQTYPE=CLI$K_INPUT1
CLI_INITCMD:	$CLIREQDESC	RQTYPE=CLI$K_INITPRS
CLI_MAJORQUAL:	$CLIREQDESC	RQTYPE=CLI$K_GETQUAL,QUALST=QUALS
CLI_NUMVAL:	$CLIREQDESC	RQTYPE=CLI$K_NUMERVAL
CLI_STRINGVAL:	$CLIREQDESC	RQTYPE=CLI$K_ASCIIVAL
CLI_WORKAREA:	.BLKB	CLI$C_WORKAREA
;
; QUALIFIER DESCS
;
QUALS:
ENAB_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_ENAB,TRUACT=ENAB_ROUT
DISA_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_DISA,TRUACT=DISA_ROUT
TO_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_TO,TRUACT=TO_ROUT
ABOR_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_ABOR,TRUACT=ABOR_ROUT
PEND_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_PEND,TRUACT=PEND_ROUT
BELL_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_BELL,TRUACT=BELL_ROUT
USER_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_USER,TRUACT=USER_ROUT
ALL_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_ALL,TRUACT=ALL_ROUT
TERM_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_TERM,TRUACT=TERM_ROUT
		$CLIQUALDESC QDCODE=CLI$K_REPL_STAT,TRUACT=STAT_ROUT
LOG_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_LOG,TRUACT=LOG_ROUT,FLSACT=NOLOG_ROUT,-
		QDFLGS=<CLI$V_QDEXPA>
BLANK_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_BLAN,TRUACT=BLANK_ROUT
INIT_QUAL:	$CLIQUALDESC QDCODE=CLI$K_REPL_INIT,TRUACT=INIT_ROUT
	$CLIQUALDESC	END_LIST
;
; BUFFER FOR OPERATOR NAME MATCH
;
NAME_BUF:
	.LONG	0,0,0
;
; MISC STORAGE
;
MASK:		.LONG	0		; OPERATOR ENABLE/DISABLE MASK
CALLBACK:	.LONG	0		; ADDRESS OF THE CLI PARSE CALL BACK

	.SBTTL	REPLY - OPERATOR REPLY TO REQUEST COMMAND IMAGE
	.PSECT	OPCOM_CODE,NOWRT
;++
; REPLY - OPERATOR REPLY TO REQUEST COMMAND IMAGE
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS THE REPLY COMMAND IMAGE.
;
; THE ACTION IS TO ACT ON THE CLI'S RESULT PARSE DATA AND PERFORM THE REQUIRED
; OPERATOR UTILITY.
;
; INPUTS:
;
;	CLI RESULT PARSE DATA IS AVAILABLE
;
; OUTPUTS:
;
;	IMAGE EXIT WITH STATUS OF THE OPERATION.
;--
REPLY:					;
	.WORD	0			;
	MOVL	CLI$A_UTILSERV(AP),W^CALLBACK; GET CALL BACK ADDRESS
	BNEQ	5$			; IF NEQ THEN CONTINUE
;
; NO CLI ERROR EXIT
;
	$EXIT_S	#OPC$_NOCLI		; NO CLI
;
; TRANSLATE SYS$COMMAND FOR INCLUSION IN OPERATOR MESSAGE AND ON BROADCASTS
;
5$:	MOVZBL	#5,R2			; SET TRANSLATE LOOP COUNT
10$:	MOVL	#LOG$C_NAMLENGTH,W^SYS_CMD_I		;
	$TRNLOG_S	LOGNAM=W^SYS_CMD,-
			RSLLEN=W^SYS_CMD_I,-
			RSLBUF=W^SYS_CMD_I
	MOVQ	W^SYS_CMD_I,W^SYS_CMD	; SET UP FOR NEXT TRANSLATE
	BLBC	R0,35$			; IF LOW CLEAR THEN DONE
	CMPW	R0,#SS$_NOTRAN		; IF NOT NORMAL THEN TRY AGAIN
	BEQL	35$			;
	CMPB	@W^SYS_CMD+4,#^X01B	; ESCAPE?
	BEQL	30$
	SOBGTR	R2,10$			;
	BRB	35$
30$:	ADDL	#4,W^SYS_CMD_I+4		; ADJUST DESC
	SUBL	#4,W^SYS_CMD_I
35$:	$GETDEV_S	DEVNAM=W^SYS_CMD_I,-
			PRIBUF=W^BRD_BUF
	BLBS	R0,36$			; IF ERROR THEN EXIT
	BRW	CMDERROR		;
36$:	$GETJPI_S	ITMLST=JPI_DATA	; GET PROCESS NAME
	BBS	#DEV$V_TRM,W^BRD_BUF+8,40$; BR IF TERMINAL
	SKPC	#^A/_/,W^USER_NAME,W^USER_NAME+8; PASS ALL USCORES IN NAME
	BEQL	37$			; IF EQL THEN NO USCORES
	MOVQ	R0,W^USER_NAME		; COPY REMAINDER
37$:	MOVZBL	W^USER_NAME,R0		; GET NAME SIZE
	CLRW	W^OPRNAME		; SET NO UNIT
	MOVB	R0,W^OPRNAME+2		; SET UP COUNTED STRING
	MOVC3	R0,W^USER_NAME+8,W^OPRNAME+3; COPY NAME
	BRB	50$			; CONTINUE
40$:	MOVW	W^BRD_BUF+8+12,W^OPRNAME; SAVE UNIT NUMBER
	MOVZBL	W^BRD_BUF+8+14,R0	; ADDRESS NAME OF CONTROLLER
	MOVZBL	W^BRD_BUF+8[R0],R1	; GET SIZE
	ADDB3	#1,R1,W^OPRNAME+2	; INSERT SIZE
	MOVB	#^A/_/,W^OPRNAME+3	;  INSERT "_"
	MOVC3	R1,W^BRD_BUF+9[R0],W^OPRNAME+4; COPY NAME 
;
; BEGIN QUALIFIER PROCESSING
;
50$:	CLI	W^CLI_INITCMD,W^CLI_WORKAREA; INIT PARSE
	CLI	W^CLI_MAJORQUAL,W^CLI_WORKAREA,W^MASK; DO QUALIFIER WORK
;
; RETURN IS FOR ILLEGAL REQUEST - NO QUALIFIER
;
	MOVZWL	#SS$_INSFARG,R0		; SET ERROR STATUS CODE
CMDERROR:				; GENERAL COMMAND ERROR
	INSV	#OPC$_FACILITY,-	; FORCE FACILITY CODE TO BE OPCOM'S
		#STS$V_FAC_NO,-		;
		#STS$S_FAC_NO,R0	;
	$EXIT_S	R0			; EXIT, ILLEGAL REQUEST

	.SBTTL	ENABLE/DISABLE OPERATOR TERMINAL QUALIFIERS
	.ENABL	LSB
;++
; DISABLE OPERATOR TERMINAL QUALIFIER
;--
DISA_ROUT:				; DISABLE OPERATOR TERMINAL
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	W^DISA_QUAL,R6		; ADDRESS QUALIFIER FOR DISABLE
	CLRL	R11			; SET NO ENABLED NAMES
	BRB	10$			; CONTINUE IN COMMON WITH ENABLE
;++
; ENABLE OPERATOR TERMINAL QUALIFIER
;--
ENAB_ROUT:				; ENABLE OPERATOR TERMINAL
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	#<^X0FFFFF07F>,R11	; SET ALL POSSIBLE ENABLES
	MOVAB	W^ENAB_QUAL,R6		; ADDRESS QUALIFIER FOR ENABLE
10$:	CLRL	R10			; COMMON ENABLE/DISABLE CODE
	MOVB	#OPC$_RQ_TERME,W^RQSTYPE; SET OPCOM REQUEST TYPE
	MOVAB	W^OPC$A_NAMES,R9	; ADDRESS GLOBAL MATCH DATA
	MOVAB	W^NAME_BUF,R8		; ADDRESS PLACE TO COPY
	TSTW	CLI$W_QDVALSIZ(R6)	; VALUE PRESENT?
	BNEQ	25$			; IF NEQ THEN YES
	MNEGL	#1,R10			; 
	BRB	100$			; CONTINUE
20$:	TSTW	CLI$W_QDVALSIZ(R6)	; MORE VALUE?
	BEQL	100$			; IF EQL THEN NO
25$:	CLI	W^CLI_STRINGVAL,W^CLI_WORKAREA,(R6); CALL CLI FOR NEXT VALUE
	MOVL	W^CLI_STRINGVAL+CLI$Q_RQDESC,R7; GET SIZE OF THIS VALUE
	MOVC5	R7,@CLI_STRINGVAL+CLI$Q_RQDESC+4,#0,#12,(R8); MOVE NAME TO MY SPACE
	BISB	#^X080,(R8)		; SET BIT FOR EASY MATCH
	MATCHC	R7,(R8),#OPC$C_NAMES,(R9);
	BNEQ	120$			; IF NEQ THEN ILLEGAL OPERATOR NAME
	BICB	#7,R3			; FIND OFFSET IN TABLE
	SUBL	R9,R3			; 
	ASHL	#-3,R3,R3		;
	BBSS	R3,R10,20$		; SET THE BIT
	BRB	20$
;
; SEND ENABLE/DISABLE MESSAGE
;
100$:	MOVL	R11,W^TARGET		; SET THE NEW VALUE
	MOVL	R10,W^MSGID		; SET THE BITS TO CHANGE
	BSBW	SND_OPR_MSG		; SEND THE MESSAGE
	$EXIT_S	R0			; EXIT
;
; BAD OPERATOR NAME FOUND
;
120$:	$EXIT_S	#OPC$_UNKNOPR		; EXIT, UNKNOWN OPERATOR
 
	.DSABL	LSB

	.SBTTL	LOGFILE CONTROL AND TERMINAL STATUS QUALIFIERS
	.ENABL	LSB
;++
;
; CLOSE LOGFILE QUALIFIER
;--
NOLOG_ROUT::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	#1,W^MSGID		; SIGNAL CLOSE LOG
	BRB	5$			;
;++
; RE-OPEN LOGFILE QUALIFIER
;--
LOG_ROUT:				; FLUSH THE LOGFILE
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	CLRL	W^MSGID			; CLEAR THE MESSAGE ID TO SIGNAL OPEN
5$:
	MOVZBL	#OPC$_RQ_LOGI,W^RQSTYPE	; SET THE REQUEST TYPE
	BRB	10$			; CONTINUE 
;++
; GET TERMINAL STATUS
;--
STAT_ROUT:				;
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVZWL	#OPC$_RQ_STATUS,W^RQSTYPE; SET MESSAGE TYPE
10$:	BRW	SND_OPR_MSG
 
	.DSABL	LSB

	.SBTTL	COMPLETE, PEND OR CANCEL REQUEST QUALIFIERS
	.ENABL	LSB
;++
; REPLY/BLANK HANDLER
;--
BLANK_ROUT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVW	#<OPC$_BLANKTAPE&^X0FFFF>,W^RQSTYPE+2; SET THE STATUS
	MOVAB	W^BLANK_QUAL,R6		; ADDRESS QUALIFIER
	BRB	10$			; CONTINUE IN REPLY COMMON
;++
; REPLY/INIT HANDLER
;--
INIT_ROUT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVW	#<OPC$_INITAPE&^X0FFFF>,W^RQSTYPE+2; SET THE STATUS
	MOVAB	W^INIT_QUAL,R6		; ADDRESS QUALIFIER
	BRB	10$			; CONTINUE IN REPLY COMMON
;++
; REPLY TO COMPLETE REQUEST QUALIFIER
;--
TO_ROUT:				; REPLY TO COMPLETE REQUEST
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVW	#<OPC$_RQSTCMPLTE&^X0FFFF>,W^RQSTYPE+2; SET THE STATUS
	MOVAB	W^TO_QUAL,R6		; ADDRESS QUALIFIER
	BRB	10$			; CONTINUE IN REPLY COMMON
;++
;  ABORT REQUEST QUALIFIER
;--
ABOR_ROUT:				; ABORT REQUEST QUALIFIER
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVW	#<OPC$_RQSTABORT&^X0FFFF>,W^RQSTYPE+2; SET STATUS
	MOVAB	W^ABOR_QUAL,R6		; ADDRESS QUALIFIER
	BRB	10$			; CONTINUE IN REPLY COMMON
;++
; PEND REQUEST QUALIFIER
;--
PEND_ROUT:				; PEND REQUEST QUALIFIER
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVW	#<OPC$_RQSTPEND&^X0FFFF>,W^RQSTYPE+2; SET THE STATUS
	MOVAB	W^PEND_QUAL,R6		; ADDRESS QUALIFIER
10$:					; COMMON TO/PEND/ABORT CODE
	MOVW	#OPC$_RQ_REPLY,W^RQSTYPE; SET MESSAGE TYPE
	CLI	W^CLI_NUMVAL,W^CLI_WORKAREA,(R6); GET THE VALUE
	MOVL	W^CLI$L_RQVALU+CLI_NUMVAL,W^MSGID; AND SAVE IT IN MESSAGE
	BRW	SND_OPR_MSG		; SEND THE OPERATOR THE MESSAGE
 
	.DSABL	LSB

	.SBTTL	SND_OPR_MSG - SEND MESSAGE TO OPCOM
;++
; SND_OPR_MSG - SEND MESSAGE TO OPCOM
;
; FUNCTIONAL DESCRIPTION:
;
; SEND A MESSAGE TO THE OPCOM PROCESS.
;
; INPUTS:
;
;	THE MESSAGE DEPENDENT HEADER IS SET UP IN THE MESSAGE BUFFER,
;
; OUTPUTS:
;
;	R0 = STATUS OF THE MESSAGE SEND
;--
SND_OPR_MSG:				; COMMON OPERATOR MESSAGE ROUTINE
	MOVZBL	#26,W^MSG_DESC		; ASSUME SHORTEST MESSAGE
	CLI	W^CLI_MESSAGE,W^CLI_WORKAREA,W^MASK; GET TEXT OF MESSAGE
	MOVQ	W^CLI_MESSAGE+CLI$Q_RQDESC,R0; GET THE TEXT DESC
	CMPW	R0,#128			; SIZE IN RANGE?
	BLSSU	10$			; IF LSSU THEN YES
	MOVZBL	#128,R0			; SET MAX SIZE
10$:	TSTL	R0			; ANY MESSAGE?
	BEQL	20$			; IF EQL THEN NO
	CMPB	(R1),#^A/"/		; """?
	BNEQ	15$			;
	INCL	R1
	DECL	R0
15$:	ADDL	R0,W^MSG_DESC		; ADJUST SIZE
	MOVC5	R0,(R1),#0,#128,W^RETURNTEXT;
20$:	CLRL	-(SP)
	PUSHAB	W^MSG_DESC		; SEND THE MESSAGE
	CALLS	#2,@#SYS$SNDOPR		;
	$EXIT_S	R0

	.SBTTL	BROADCAST QUALIFIERS
;++
; ADD BELLS TO BROADCAST MESSAGE
;--
BELL_ROUT:
	.WORD	0
	ADDL	#4,W^TTY		; ADJUST SIZE OF FAO CONTROL STRING
	RET
 
	.ENABL	LSB
 
;++
; BROADCAST TO ALL TERMINALS
;--
ALL_ROUT:				; BROADCAST TO ALL TERMINALS
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	CLRL	R2			; SET UP NULL BROADCAST DESC
	BSBB	50$			; FORMAT AND BROADCAST MESSAGE
	BRB	30$			; EXIT
;++
; BROADCAST TO TERMINALS IN USE
;--
USER_ROUT:				;
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVAB	W^BRD_DESC,R2		; ADDRESS DESC
	CLRL	(R2)			; BUT NO NAME
	MOVL	R2,4(R2)		;
	BSBB	50$			; FORMAT AND BROADCAST
	BRB	30$			; DONE
;++
; BROADCAST TO SINGLE TERMINAL(S)
;--
TERM_ROUT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVAB	W^BRD_DESC,R2		; ADDRESS DESC
	MOVAB	W^TERM_QUAL,R6		; ADDRESS QUALIFIER DATA
	CLI	W^CLI_STRINGVAL,W^CLI_WORKAREA,(R6)
	MOVQ	W^CLI_STRINGVAL+CLI$Q_RQDESC,(R2); SAVE AS TERMINAL NAME
	BSBB	50$			; FORMAT AND BRAODCAST MESSAGE
					; IGNORE ERROR
20$:	TSTW	CLI$W_QDVALSIZ(R6)	; MORE?
	BEQL	30$			; IF EQL THEN EXIT
	CLI	W^CLI_STRINGVAL,W^CLI_WORKAREA,(R6)
	MOVQ	W^CLI_STRINGVAL+CLI$Q_RQDESC,(R2); SAVE AS TERMINAL NAME
	BSBW	60$			; Just broadcast
	BRB	20$
;
; BROADCAST DONE
;
30$:	$EXIT_S	R0			; EXIT 
;
; FORMAT AND BROADCAST MESSAGE SUBOURTINE
;
50$:					; COMMON BROADCAST CODE
	MOVAB	W^NODE_BUF,R7		; Set to translate SYS$NODE
	$TRNLOG_S LOGNAM=W^SYSNODE_DESC- ; ADDRESS OF LOGICAL NAME DESCRIPTOR
		RSLLEN=(R7)-		; UPDATE SIZE IN NCB DESCRIPTOR
		RSLBUF=(R7)		; PUT EQUIVALENCE STRING IN NCB
	BLBC	R0,51$			; If LBC error - ignore node name
	CMPW	R0,#SS$_NOTRAN		; Did it translate?
	BNEQ	52$			; If NEQ yes
51$:
	CLRW	(R7)			; Don't try to put out the node name
52$:
	CLI	W^CLI_MESSAGE,W^CLI_WORKAREA,W^MASK
	MOVAB	W^SYS_CMD_I,R0		; ADDRESS NAME
	BBS	#DEV$V_TRM,W^BRD_BUF+8,55$; BR IF TERMINAL
	MOVAB	W^BATCH,R0		; SAY NAME IS BATCH
55$:	MOVAB	W^CLI_MESSAGE+CLI$Q_RQDESC,R1; AND TEXT
	MOVAB	W^USER_NAME,R3		; ADDRESS USER NAME
	$FAO_S	W^TTY,W^BRD_BUF,W^BRD_BUF,R7,R0,R3,#0,R1
60$:
;;	PUSHAB	(R2)
;;	PUSHAB	W^BRD_BUF		;
;;	CALLS	#2,@#SYS$BRDCST		;

	$BRDCST_S MSGBUF = BRD_BUF,-
		  DEVNAM = (R2)

	INSV	#OPC$_FACILITY,-	; FORCE FACILITY CODE TO BE OPCOM'S
		#STS$V_FAC_NO,-		;
		#STS$S_FAC_NO,R0	;
	RSB				; RETURN
 
 	.END	REPLY

