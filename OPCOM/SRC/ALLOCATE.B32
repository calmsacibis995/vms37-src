MODULE	ALLOCATE	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V03-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the logic to allocate and deallocate
!	the various data structures used by OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
! V02-002	STJ0161		Steven T. Jeffreys,	08-Feb-1982
!		Make references to library routines use general addressing mode.
!
!--

BEGIN						! Start of ALLOCATE

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:OPCOMDEF.REQ';

FORWARD ROUTINE
	ALLOCATE_DS,			! Allocate data structure
	CREATE_OCD	: NOVALUE,	! Create a new OCD and insert it into an OCD list
	DEALLOCATE_DS,			! Deallocate data structure
	DEALLOCATE_MCB	: NOVALUE,	! Deallocate an MCB.
	DEALLOCATE_OCD	: NOVALUE,	! Deallocate an OCD
	DEALLOCATE_RQCB	: NOVALUE;	! Deallocate an RQCB.

BUILTIN

	INSQUE,				! Insert entry onto a queue
	REMQUE;				! Remove entry from a queue


GLOBAL ROUTINE ALLOCATE_DS (DS_TYPE, DS_ADDR) =

!++
! Functional description:
!
!	This routine will allocate a block of process address space
!	to be used as a data structure of the specified type.  This
!	routine will also write some structure dependent information
!	into the data structure.
!
! Input:
!
!	DS_TYPE	= The data structure type.  This is used as
!		  an index into the SCB table to get some
!		  structure dependent information.
!
! Implicit Input:
!
!	The SCB data base.
!
! Output:
!
!	DS_ADDR	= An address of a longword to receive the data
!		  structure address.
!
! Implict output:
!
!	The SCB entry for this structure type is updated.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	TRUE		= The allocate succeeded.
!	<anything else> = The allocate failed.
!--

BEGIN						! Start of ALLOCATE_DS

EXTERNAL ROUTINE
	LIB$GET_VM	: ADDRESSING_MODE (GENERAL);	! Allocate a block of VM

EXTERNAL
	SCB_TABLE	: VECTOR;		! SCB table of pointers

EXTERNAL LITERAL
	SS$_BADPARAM,				! System status value
	MIN_DS_TYPE,				! Min STRUCTURE_TYPE value
	MAX_DS_TYPE;				! Max STRUCTURE_TYPE value

LOCAL
	SCB		: REF BBLOCK,		! SCB structure
	BLOCK		: REF BBLOCK,		! Block of VM allocated
	SIZE		: LONG,			! Size of the VM block
	STATUS		: LONG;


!
! Make sure DS_TYPE is a legal value.
!
IF (.DS_TYPE LSS MIN_DS_TYPE) OR (.DS_TYPE GTR MAX_DS_TYPE)
THEN
    $EXIT (CODE=SS$_BADPARAM);
!
! Get the structure info from the appropriate SCB.
! Allocate the structure from the look aside list if possible.
!
SCB = .SCB_TABLE [.DS_TYPE - 1];
IF .SCB [SCB_W_LAL_COUNT] GTR 0
THEN
    BEGIN
    REMQUE (.SCB [SCB_L_FLINK], BLOCK);
    SCB [SCB_W_LAL_COUNT] = .SCB [SCB_W_LAL_COUNT] - 1;
    END
ELSE
    BEGIN
    !
    ! The look aside list was empty.
    ! Allocate and zero a block of memory via LIB$GET_VM.
    ! LAL blocks do not have to be zeroed, as it is done
    ! when the blocks are put on the list.
    !
    SIZE = .SCB [SCB_W_SIZE];
    IF NOT (STATUS = LIB$GET_VM (SIZE, BLOCK))
    THEN
	$EXIT (CODE=.STATUS);
    CH$FILL (0, .SIZE, .BLOCK);
    !
    ! Fill in the structure dependent information.
    !
    BLOCK [HDR_L_FLINK] = BLOCK [HDR_L_FLINK];
    BLOCK [HDR_L_BLINK] = BLOCK [HDR_L_FLINK];
    BLOCK [HDR_W_SIZE]  = .SCB [SCB_W_SIZE];
    BLOCK [HDR_B_TYPE]  = .DS_TYPE;
    END;

!
! Set the data structure sequence number.
!
SCB [SCB_L_SEQNUM] = .SCB [SCB_L_SEQNUM] + 1;
BLOCK [HDR_L_SEQNUM] = .SCB [SCB_L_SEQNUM];

!
! Set the address of the data structure in the output cell.
!
.DS_ADDR = .BLOCK;

RETURN (TRUE);

END;						! End of ALLOCATE_DS

GLOBAL ROUTINE CREATE_OCD (SCOPE, UIC, BLOCK) : NOVALUE =

!++
! Functional description:
!
!	This routine contains the specializedlogic to create and initialize
!	an OCD and to insert it onto the appropriate OCD list.  The OCD list
!	depends on the SCOPE.
!
! Input:
!
!	SCOPE	: The scope of the OCD.
!	UIC	: The UIC of the OCD.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	BLOCK	: The address of a longword to receive the
!		  address of the new OCD.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CREATE_OCD

EXTERNAL LITERAL
	OCD_K_TYPE;				! Structure type

EXTERNAL ROUTINE
	ALLOCATE_DS;				! Allocate a data structure

EXTERNAL
	OCD_VECTOR	: VECTOR;		! Pointers to OCD list heads

LOCAL
	STATUS		: LONG,
	OCD		: REF BBLOCK;		! OCD data structure

!
! NOTE:	This routine is incomplete, and must later be enhanced
!	to create and link in a default LCB as well.
!
IF NOT (ALLOCATE_DS (OCD_K_TYPE, OCD))		! Allocate a new OCD
THEN
    RETURN (.STATUS);
OCD [OCD_L_RQSTFLINK] = OCD [OCD_L_RQSTFLINK];	! Init request list head
OCD [OCD_L_RQSTBLINK] = OCD [OCD_L_RQSTFLINK];	!
OCD [OCD_L_OPERFLINK] = OCD [OCD_L_OPERFLINK];	! Init operator list head
OCD [OCD_L_OPERBLINK] = OCD [OCD_L_OPERFLINK];	!
OCD [OCD_B_SCOPE] = .SCOPE;			! Set the OCD SCOPE
OCD [OCD_L_UIC]	= .UIC;				! Set the OCD UIC
OCD [OCD_L_NOTIFYMASK1] = -1;			! Broadcast all messages
OCD [OCD_L_NOTIFYMASK2] = -1;			!
!
! Imsert the OCD in the appropriate OCD list.  If the list is empty,
! then this OCD will be the list head, and the OCD_VECTOR must be 
! made to point to it.  After inserting the OCD, increment the OCD count
! for this list.
!
IF .OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2+1] EQL 0
THEN
    OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2] = .OCD! Make OCD_VECTOR point to the OCD
ELSE
    INSQUE (.OCD, .OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2]);
OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2+1] = .OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2+1] + 1;
.BLOCK = .OCD;					! Return OCD address

END;						! End of CREATE_OCD

GLOBAL ROUTINE DEALLOCATE_DS (DS_ADDR) =

!++
! Functional description:
!
!	This routine will deallocate a data structure.
!	The data structure is zeroed and placed on the
!	appropriate free list.
!
! Input:
!
!	DS_ADDR	= The address of the data structure.
!
! Implicit Input:
!
!	The SCB data base.
!
! Output:
!
!	None.
!
! Implict output:
!
!	The SCB entry for this structure type is updated.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	TRUE		= The deallocate succeeded.
!	<anything else> = The deallocate failed.
!--

BEGIN						! Start of ALLOCATE_DS

MAP
	DS_ADDR		: REF BBLOCK;

EXTERNAL
	SCB_TABLE	: VECTOR;		! SCB table of pointers

EXTERNAL LITERAL
	SS$_BADPARAM,				! System status value
	MIN_DS_TYPE,				! Min STRUCTURE_TYPE value
	MAX_DS_TYPE;				! Max STRUCTURE_TYPE value

LOCAL
	SCB		: REF BBLOCK;		! SCB structure

!
! Check input parameter.
!
IF (.DS_ADDR [HDR_B_TYPE] LSS MIN_DS_TYPE) 
OR (.DS_ADDR [HDR_B_TYPE] GTR MAX_DS_TYPE)
OR (.DS_ADDR EQL 0)
THEN
    RETURN (FALSE);
!
! Zero the block and place it on the correct look aside list.
! The first 11 bytes of the data structure are not zeroed, because
! they contain info that will identify the structure.
!
SCB = .SCB_TABLE [.DS_ADDR [HDR_B_TYPE] - 1];	! Get the SCB address
CH$FILL (0, (.SCB [SCB_W_SIZE] - $BYTEOFFSET (HDR_B_SCOPE)), (.DS_ADDR + $BYTEOFFSET (HDR_B_SCOPE)));
BBLOCK [DS_ADDR [HDR_L_STATUS], HDR_V_LAL] = TRUE;	! Mark this an LAL block
INSQUE (DS_ADDR [HDR_L_FLINK], SCB [SCB_L_FLINK]);	! Put structure on LAL
SCB [SCB_W_LAL_COUNT] = .SCB [SCB_W_LAL_COUNT] + 1;	! Incr. the LAL count

RETURN (TRUE);

END;						! End of DEALLOCATE_DS

GLOBAL ROUTINE DEALLOCATE_MCB (MCB) : NOVALUE =

!++
! Functional description:
!
!	This routine contains the specialized logic to
!	deallocate an MCB.
!
! Input:
!
!	MCB	: Address of an MCB.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of DEALLOCATE_MCB

MAP
	MCB		: REF BBLOCK;

EXTERNAL ROUTINE
	DEALLOCATE_DS,				! Deallocate a data structure
	LIB$FREE_VM	: ADDRESSING_MODE (GENERAL);

EXTERNAL LITERAL
	MCB_K_TYPE,				! MCB structure type
	SS$_BADPARAM;				! System status code

LOCAL
	RQCB		: REF BBLOCK;

!
! If block address is 0, then there is no work to do.
!
IF .MCB EQL 0
THEN
    RETURN;
!
! Make sure this is an MCB.
!
IF (.MCB [MCB_B_TYPE] NEQ MCB_K_TYPE)
THEN
    RETURN;
!
! If the MCB points to any message text, deallocate
! the text buffer.
!
IF .MCB [MCB_L_TEXTPTR] NEQ 0
THEN
    BEGIN
    LIB$FREE_VM (MCB [MCB_L_TEXTLEN], MCB [MCB_L_TEXTPTR]);
    MCB [MCB_L_TEXTPTR] = 0;
    END;
!
! Deallocate the MCB.  As an added precaution,
! explicitly zero the RQCB backpointer.
!
RQCB = .MCB [MCB_L_RQCB];			! Get back pointer to RQCB
IF NOT (.RQCB EQL 0)
THEN
    RQCB [RQCB_L_MCB] = 0;			! Break link from RQCB to MCB
MCB [MCB_L_RQCB] = 0;				! Break link from MCB to RQCB
DEALLOCATE_DS (.MCB);

END;						! End of DEALLOCATE_MCB

GLOBAL ROUTINE DEALLOCATE_OCD (OCD) : NOVALUE =

!++
! Functional description:
!
!	This routine contains the specialized logic to deallocate
!	an OCD to the appropriate free list.
!
! Input:
!
!	OCD	: Address of an OCD
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of DEALLOCATE_OCD

MAP
	OCD		: REF BBLOCK;		! OCD structure

EXTERNAL ROUTINE
	DEALLOCATE_DS;				! Deallocate a data structure

EXTERNAL LITERAL
	OCD_K_TYPE;				! OCD structure type

EXTERNAL
	OCD_VECTOR	: VECTOR;		! Pointers to OCDs

LOCAL
	TEMP		: LONG;			! Used to receive an address

!
! Make sure that the data structure is an OCD.
!
IF (.OCD EQL 0) OR (.OCD [OCD_B_TYPE] NEQ OCD_K_TYPE)
THEN
    RETURN;
!
! If the OCD is still busy, do not deallocate it.
!
IF (.OCD [OCD_W_OPERCOUNT] NEQ 0)
OR (.OCD [OCD_W_RQSTCOUNT] NEQ 0)
OR (.OCD [OCD_L_LCB] NEQ 0)
THEN
    RETURN;
!
! Decrement the OCD count of the appropriate location in
! the OCD vector and remove the OCD from the OCD list.
! If the count went to zero, then the pointer to the first
! OCD in the OCD vector must be zeroed.
!
REMQUE	(OCD [OCD_L_FLINK], TEMP);
OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2+1] = .OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2+1] - 1;
IF .OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2+1] EQL 0
THEN
    OCD_VECTOR [(.OCD [OCD_B_SCOPE]-1)*2] = 0;
!
! Release the OCD.
!
DEALLOCATE_DS (.OCD);
RETURN;

END;						! End of DEALLOCATE_OCD

GLOBAL ROUTINE DEALLOCATE_RQCB (RQCB) : NOVALUE =

!++
! Functional description:
!
!	This routine contains the specialized logic to 
!	deallocate an RQCB and any data structures that
!	that may be linked to it.
!
! Input:
!
!	RQCB	:  Address of an RQCB.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of DEALLOCATE_RQCB

MAP
	RQCB		: REF BBLOCK;

EXTERNAL ROUTINE
	DEALLOCATE_DS,				! Deallocate a data structure
	DEALLOCATE_MCB	: NOVALUE,		! Deallocate an MCB
	DEALLOCATE_OCD	: NOVALUE,		! Deallocate an OCD
	LIB$FREE_VM	: ADDRESSING_MODE (GENERAL);

EXTERNAL LITERAL
	RQCB_K_TYPE;				! RQCB structure type

!
! If no block specified, then return.
!
IF .RQCB EQL 0
THEN
    RETURN;
!
! Make sure this is a RQCB.
!
IF (.RQCB [RQCB_B_TYPE] NEQ RQCB_K_TYPE)
THEN
    RETURN;
!
! If the RQCB is linked to an OCD, attempt to deallocate the OCD.
!
IF .RQCB [RQCB_L_OCD] NEQ 0
THEN
    BEGIN
    DEALLOCATE_OCD (.RQCB [RQCB_L_OCD]);
    RQCB [RQCB_L_OCD] = 0;
    END;
!
! If there is an MCB linked to the RQCB then deallocate it.
!
IF .RQCB [RQCB_L_MCB] NEQ 0
THEN
    BEGIN
    DEALLOCATE_MCB (.RQCB [RQCB_L_MCB]);
    RQCB [RQCB_L_MCB] = 0;
    END;
!
! If the operator name descriptor is valid, deallocate
! the block of memory it points to.
!
IF .RQCB [RQCB_L_OPER_PTR] NEQ 0
THEN
    BEGIN
    LIB$FREE_VM (RQCB [RQCB_L_OPER_LEN], RQCB [RQCB_L_OPER_PTR]);
    RQCB [RQCB_L_OPER_PTR] = 0;
    END;
!
! If the request/reply text descriptor is valid,
! deallocate the block of memory it points to.
!
IF .RQCB [RQCB_L_TEXT_PTR] NEQ 0
THEN
    BEGIN
    LIB$FREE_VM (RQCB [RQCB_L_TEXT_LEN], RQCB [RQCB_L_TEXT_PTR]);
    RQCB [RQCB_L_TEXT_PTR] = 0;
    END;
!
! Deallocate the RQCB.
!
DEALLOCATE_DS (.RQCB);

END;						! End of DEALLOCATE_RQCB

END						! End of ALLOCATE
ELUDOM
