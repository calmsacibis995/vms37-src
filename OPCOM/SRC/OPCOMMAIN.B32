MODULE	OPCOMMAIN	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V03-001',
			 MAIN = OPCOM_MAIN
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the top leve logic for OPCOM, the 
!	OPerator COmunication Manager.  OPCOM will provide the
!	interface between a user and an operator on the system.
!	Specifically, this module contains the routines responsible
!	for starting OPCOM in an orderly manner, receiving requests
!	and dispatching them to the proper handler, and for the
!	orderly shutdown of OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!
!	V03-001	RLRV3A1		Robert L. Rappaport	5-Apr-1982
!		Added MSG$_UDA50MVER and MSG$_DUPUNITNO.
!
!	V02-003	STJ0156		Steven T. Jeffreys	05-Feb-1982
!		Added two new mount verification messages to the
!		dispatcher table; MVCOMPLETE and MVABORTED.
!
!	V02-002	STJ0066		Steven T. Jeffreys	14-Jul-1981
!		Changed function dispatcher to recognize the mount
!		verification messages.
!
!--

BEGIN						! Start of OPCOMMAIN

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:OPCOMDEF.REQ';



GLOBAL ROUTINE OPCOM_MAIN : NOVALUE =

!++
! Functional description:
!
!	This is the main routine for OPCOM.  When OPCOM is
!	started, control is transfered here.  The main routine
!	will call a special initialization routine to set things
!	up, and then enter its main loop, servicing requests as
!	they arrive.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of OPCOM_MAIN

MACRO

	MESSAGE_TYPE	=  0,0,16,0%,		! Message type code
	REQUEST_TYPE	= 38,0,8,0%;		! Request type code

LITERAL
	EVENT_FLAG	= 1;			! Local event flag number

GLOBAL

	FINISHED	: LONG INITIAL (FALSE);	! Boolean used for loop control

EXTERNAL ROUTINE
	OPCOM_INIT		: NOVALUE,	! OPCOM initialization
	TIME_STAMP		: NOVALUE,	! Does periodic timestamp
	!
	! Various message handlers for old format messages.
	!
	UNKNOWN_HANDLER		: NOVALUE,	! Unknown message type handler
	DEVICE_HANDLER		: NOVALUE,	! Device online/offline message handler
	TERME_HANDLER		: NOVALUE,	! Enable operator message handler
	LOGI_HANDLER		: NOVALUE,	! Init logfile message handler
	RQST_HANDLER		: NOVALUE,	! Request handler
	RPLY_HANDLER		: NOVALUE,	! Reply handler
	CNCL_HANDLER		: NOVALUE,	! Cancel handler
	STS_HANDLER		: NOVALUE,	! Status handler
	!
	! The following are message handlers for the new format messages.
	!
	OPRENABLE_HANDLER	: NOVALUE,	! Operator enable handler
	LOGFILE_HANDLER		: NOVALUE,	! Logfile control handler
	REQUEST_HANDLER		: NOVALUE,	! Request handler
	REPLY_HANDLER		: NOVALUE,	! Reply handler
	CANCEL_HANDLER		: NOVALUE,	! Cancel handler
	STATUS_HANDLER		: NOVALUE,	! Status handler
	SHUTDOWN_HANDLER	: NOVALUE;	! Shutdown handler

EXTERNAL

	GLOBAL_STATUS	: BITVECTOR,		! Global status bits
	OPER_MBX_CHAN	: WORD;			! Operator mailbox channel

EXTERNAL LITERAL

	TIMESTAMP_PENDING,			! Global status bit
	BUSY;					! Global status bit

LOCAL

	RDB		: REF BBLOCK,		! RDB control structure
	IOSB		: BBLOCK [8],		! I/O status block
	REQUEST_BUFFER	: BBLOCK [OPC$K_MAXREAD], ! Request receive buffer
	REQUEST_DESC	: BBLOCK [DSC$K_S_BLN],	! Request buffer descriptor
	STATUS		: LONG;

!
! Perform the necessary initialization.
!
OPCOM_INIT ();

!
! Initialize the request buffer descriptor.
!
REQUEST_DESC [DSC$B_DTYPE] = 0;
REQUEST_DESC [DSC$B_CLASS] = 0;
REQUEST_DESC [DSC$A_POINTER] = REQUEST_BUFFER;

!
! Enter the main loop.
!
WHILE NOT .FINISHED DO
    BEGIN
    !
    ! If a timestamp is pending and OPCOM is not busy with
    ! a request, then do the timestamp.
    !
    GLOBAL_STATUS [BUSY] = FALSE;			! OPCOM is not busy
    IF .GLOBAL_STATUS [TIMESTAMP_PENDING]
    THEN
	TIME_STAMP ();

    !
    ! Issue a read request to the operator mailbox.
    ! An event flag other the 0 must be specified so
    ! that the event flag does not get clobbered when
    ! the timestamp AST is delivered.
    !
    IF NOT (STATUS = $QIOW(FUNC = IO$_READVBLK,
			   CHAN = .OPER_MBX_CHAN,
			   IOSB = IOSB,
			   EFN  = EVENT_FLAG,
			   P1 = REQUEST_BUFFER,
			   P2 = OPC$K_MAXREAD
			 ))
    THEN
	$EXIT (CODE = .STATUS);

    !
    ! Check the status of the read.
    !
    IF NOT (STATUS = .IOSB [0,0,16,0])
    THEN
	$EXIT (CODE = .STATUS);

    !
    ! Since OPCOM now has a request to service, set the BUSY bit.
    ! This serves as an interlock to prevent the asynchronous
    ! timestamp function from going off at an inappropriate time.
    !
    GLOBAL_STATUS [BUSY] = TRUE;

    !
    ! Set the request buffer length in the descriptor.
    !
    REQUEST_DESC [DSC$W_LENGTH] = .IOSB [2,0,16,0];

    !
    ! Dispatch the request to the proper handler.
    ! Some messages do not come through $SNDOPR,
    ! and require special treatment.  For example,
    ! device on/offline messages are sent via a 
    ! call to EXE$SNDEVMSG, and are in a different
    ! format from most of the other known message types.
    !
    SELECTONEU .REQUEST_BUFFER [MESSAGE_TYPE] OF
	SET
	[MSG$_DEVOFFLIN]	: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DEVONLIN]		: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DEVOFFLINX]	: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_WRONGVOL]		: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DEVWRTLCK]	: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_MVCOMPLETE]	: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_MVABORTED]	: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_UDA50MVER]	: DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DUPUNITNO]	: DEVICE_HANDLER (REQUEST_DESC);

	[MSG$_OPRQST]		: BEGIN
				  !
				  ! Dispatch the request to the proper handler.
				  !
				  SELECTONEU .REQUEST_BUFFER [REQUEST_TYPE] OF
				      SET
				      !
				      ! The following request types are in the old format.
				      !
				      [OPC$_RQ_TERME]	: TERME_HANDLER (REQUEST_DESC);
				      [OPC$_RQ_LOGI]	: LOGI_HANDLER (REQUEST_DESC);
				      [OPC$_RQ_RQST]	: RQST_HANDLER (REQUEST_DESC);
				      [OPC$_RQ_REPLY]	: RPLY_HANDLER (REQUEST_DESC);
				      [OPC$_RQ_CANCEL]	: CNCL_HANDLER (REQUEST_DESC);
				      [OPC$_RQ_STATUS]	: STS_HANDLER (REQUEST_DESC);
				      !
				      ! The following request types are in the new format.
				      !
				      [OPC$_X_OPRENABLE]: OPRENABLE_HANDLER (REQUEST_DESC);
				      [OPC$_X_LOGFILE]	: LOGFILE_HANDLER (REQUEST_DESC);
				      [OPC$_X_REQUEST]	: REQUEST_HANDLER (REQUEST_DESC);
				      [OPC$_X_REPLY]	: REPLY_HANDLER (REQUEST_DESC);
				      [OPC$_X_CANCEL]	: CANCEL_HANDLER (REQUEST_DESC);
				      [OPC$_X_STATUS]	: STATUS_HANDLER (REQUEST_DESC);
				      [OPC$_X_SHUTDOWN]	: SHUTDOWN_HANDLER (REQUEST_DESC);
				      !
				      ! If none of the above, it is an unknown request type.
				      ! Let the unknown message handler figure out what to
				      ! do with it.
				      !
				      [OTHERWISE]	: UNKNOWN_HANDLER (REQUEST_DESC);
				      TES;
				  END;

	[OTHERWISE]		: BEGIN
				  !
				  ! This is an unknown message type.
				  ! Let the unknown message handler
				  ! figure out what to do with it.
				  !
				  UNKNOWN_HANDLER (REQUEST_DESC);
				  END;
	TES;
   END;
END;						! End of OPCOM_MAIN

END
ELUDOM						! End of OPCOMMAIN
