MODULE	OPCOMOLD	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V03-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the old format message handlers.
!	These routines merely reformat the request into the
!	new format, and call the correct handler to service
!	the request.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
! V02-002	STJ0223		Steven T. Jeffreys,	17-Feb-1982
!		Make all operators temporary by default.
!
!
!--

BEGIN						! Start of OPCOMOLD

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:OPCOMDEF.REQ';

FORWARD ROUTINE
	!
	! Various message handlers for old format messages.
	!
	CNCL_HANDLER		: NOVALUE,	! Cancel handler
	LOGI_HANDLER		: NOVALUE,	! Init logfile message handler
	RPLY_HANDLER		: NOVALUE,	! Reply handler
	RQST_HANDLER		: NOVALUE,	! Request handler
	STS_HANDLER		: NOVALUE,	! Status handler
	TERME_HANDLER		: NOVALUE;	! Enable operator message handler


GLOBAL ROUTINE CNCL_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all CNCL messages received by OPCOM.
!	This message is in the old format, and must be converted to the new
!	format before it can be processed.  Once this is done, the new format
!	message handler is called to process the reformatted request.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CNCL_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR;			! Global status flags

EXTERNAL LITERAL
	OLD_FORMAT_MSG;					! Global flag

EXTERNAL ROUTINE
	CANCEL_HANDLER	: NOVALUE;			! New format msg handler

LOCAL

	OLD_MSG		: REF BBLOCK,			! Pointer to start of old message
	NEW_MSG		: REF BBLOCK,			! Pointer  to start of new message
	REFORMAT_BUFFER	: BBLOCK [OPC$K_MAXREAD],	! Buffer to hold the reformatted message
	REFORMAT_DESC	: BBLOCK [DSC$K_S_BLN];		! Descriptor for the REFORMAT_BUFFER

!
! Make sure the message is big enough.  If not, it
! cannot possibly be a valid message, and OPCOM will
! simply ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + 8)
THEN
    RETURN;

!
! Copy the commom header provided by $SNDOPR to the new buffer
!
CH$MOVE (OPC$K_COMHDRSIZ, .BUFFER_DESC [DSC$A_POINTER] , REFORMAT_BUFFER);

!
! Zero the remainder of the REFORMAT_BUFFER.
!
CH$FILL (0, (OPC$K_MAXREAD - OPC$K_COMHDRSIZ), (REFORMAT_BUFFER + OPC$K_COMHDRSIZ));

!
! Move the old message fields into their corresponding places in the new message format.
!
OLD_MSG = .BUFFER_DESC [DSC$A_POINTER] + OPC$K_COMHDRSIZ;
NEW_MSG = REFORMAT_BUFFER + OPC$K_COMHDRSIZ;
NEW_MSG [OPC$B_RQSTCODE] = .OLD_MSG [OPC$B_MS_TYPE];
NEW_MSG [OPC$B_SCOPE] = OPC$K_SYSTEM;
NEW_MSG [OPC$L_ATTNMASK1] = .OLD_MSG [$BYTEOFFSET (OPC$B_MS_TARGET),0,24,0];
NEW_MSG [OPC$L_RQSTID] = .OLD_MSG [OPC$L_MS_RQSTID];

!
! Create a descriptor for the reformatted message.
!
REFORMAT_DESC [DSC$W_LENGTH]  = OPC$K_COMHDRSIZ + OPC$K_HDR_SIZE;
REFORMAT_DESC [DSC$B_DTYPE]   = 0;
REFORMAT_DESC [DSC$B_CLASS]   = 0;
REFORMAT_DESC [DSC$A_POINTER] = REFORMAT_BUFFER;

!
! Call the new-message handler to finish processing the message.
!
GLOBAL_STATUS [OLD_FORMAT_MSG] = TRUE;		! Mark this as an old format msg
CANCEL_HANDLER (REFORMAT_DESC);
GLOBAL_STATUS [OLD_FORMAT_MSG] = FALSE;

END;						! End of CNCL_HANDLER

GLOBAL ROUTINE LOGI_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all LOGI messages received by OPCOM.
!	This message is in the old format, and must be converted to the new
!	format before it can be processed.  Once this is done, the new format
!	message handler is called to process the reformatted request.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of LOGI_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,			! Global status flags
	OPR_DEV_FAO	: BBLOCK;			! FAO control string

EXTERNAL LITERAL
	OLD_FORMAT_MSG;					! Flag bit

EXTERNAL ROUTINE
	LOGFILE_HANDLER	: NOVALUE;			! New format msg handleR

LOCAL

	OLD_MSG		: REF BBLOCK,			! Pointer to start of old message
	NEW_MSG		: REF BBLOCK,			! Pointer to start of new message
	OUT_LENGTH	: WORD,				! Length of formatted operator device name
	DEV_DESC	: BBLOCK [DSC$K_S_BLN],		! Operator device name descriptor
	REFORMAT_BUFFER	: BBLOCK [OPC$K_MAXREAD],	! Buffer to hold the reformatted message
	REFORMAT_DESC	: BBLOCK [DSC$K_S_BLN];		! Descriptor for the REFORMAT_BUFFER

!
! Make sure the message is big enough.  If not, it
! cannot possibly be a valid message, and OPCOM will
! simply ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + 13)
THEN
    RETURN;

!
! Copy the commom header provided by $SNDOPR to the new buffer
!
CH$MOVE (OPC$K_COMHDRSIZ, .BUFFER_DESC [DSC$A_POINTER] , REFORMAT_BUFFER);

!
! Zero the remainder of the REFORMAT_BUFFER.
!
CH$FILL (0, (OPC$K_MAXREAD - OPC$K_COMHDRSIZ), (REFORMAT_BUFFER + OPC$K_COMHDRSIZ));

!
! Move the old message fields into their corresponding places in the new message format.
!
OLD_MSG = .BUFFER_DESC [DSC$A_POINTER] + OPC$K_COMHDRSIZ;
NEW_MSG = REFORMAT_BUFFER + OPC$K_COMHDRSIZ;
NEW_MSG [OPC$B_RQSTCODE] = .OLD_MSG [OPC$B_MS_TYPE];		! Set request type
NEW_MSG [OPC$B_SCOPE] = OPC$K_SYSTEM;				! Force SYSTEM request
IF .OLD_MSG [OPC$L_MS_RQSTID] EQL 0
THEN
    BBLOCK [NEW_MSG [OPC$L_RQ_OPTIONS], OPC$V_INITLOG] = TRUE	! INITLOG function
ELSE
    BBLOCK [NEW_MSG [OPC$L_RQ_OPTIONS], OPC$V_CLOSELOG] = TRUE;	! CLOSELOG function
!
! Build the operator device name from the ASCIC device string
! and the device unit number.  Build the FAO OUTBUF descriptor
! to point to the correct spot within NEW_MSG to save a copy.
!
DEV_DESC [0,0,32,0] = 20;					! Allow for  a large device name
DEV_DESC [DSC$A_POINTER] = .NEW_MSG + $BYTEOFFSET (OPC$T_LOGFILE_OPR) + 1;
$FAO (OPR_DEV_FAO, OUT_LENGTH, DEV_DESC, OLD_MSG [OPC$T_MS_ONAME], .OLD_MSG [OPC$W_MS_OUNIT]);
NEW_MSG [$BYTEOFFSET (OPC$T_LOGFILE_OPR),0,8,0] = .OUT_LENGTH;

!
! Create a descriptor for the reformatted message.
!
REFORMAT_DESC [DSC$W_LENGTH]  = OPC$K_COMHDRSIZ + OPC$K_HDR_SIZE + .OUT_LENGTH + 1;
REFORMAT_DESC [DSC$B_DTYPE]   = 0;
REFORMAT_DESC [DSC$B_CLASS]   = 0;
REFORMAT_DESC [DSC$A_POINTER] = REFORMAT_BUFFER;

!
! Call the new-message handler to finish processing the message.
!
GLOBAL_STATUS [OLD_FORMAT_MSG] = TRUE;		! Mark this as an old format msg
LOGFILE_HANDLER (REFORMAT_DESC);
GLOBAL_STATUS [OLD_FORMAT_MSG] = FALSE;

END;						! End of LOGI_HANDLER

GLOBAL ROUTINE RPLY_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all RPLY messages received by OPCOM.
!	This message is in the old format, and must be converted to the new
!	format before it can be processed.  Once this is done, the new format
!	message handler is called to process the reformatted request.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of RPLY_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,			! Global status flags
	OPR_DEV_FAO	: BBLOCK;			! FAO control string

EXTERNAL LITERAL
	OLD_FORMAT_MSG;					! Global flag

EXTERNAL ROUTINE
	REPLY_HANDLER	: NOVALUE;			! New format msg handler

LOCAL

	OLD_MSG_LEN	: LONG,				! Length of old message
	NEW_MSG_LEN	: LONG,				! Length of new message
	OLD_MSG		: REF BBLOCK,			! Pointer to start of old message
	NEW_MSG		: REF BBLOCK,			! Pointer to start of new message
	OUT_LENGTH	: WORD,				! Length of formatted operator device name
	DEV_DESC	: BBLOCK [DSC$K_S_BLN],		! Operator device name descriptor
	REFORMAT_BUFFER	: BBLOCK [OPC$K_MAXREAD],	! Buffer to hold the reformatted message
	REFORMAT_DESC	: BBLOCK [DSC$K_S_BLN];		! Descriptor for the REFORMAT_BUFFER

!
! Make sure the message is big enough.  If not, it
! cannot possibly be a valid message, and OPCOM will
! simply ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + 13)
THEN
    RETURN;

!
! Copy the commom header provided by $SNDOPR to the new buffer
!
CH$MOVE (OPC$K_COMHDRSIZ, .BUFFER_DESC [DSC$A_POINTER] , REFORMAT_BUFFER);

!
! Zero the remainder of the REFORMAT_BUFFER.
!
CH$FILL (0, (OPC$K_MAXREAD - OPC$K_COMHDRSIZ), (REFORMAT_BUFFER + OPC$K_COMHDRSIZ));

!
! Move the old message fields into their corresponding places in the new message format.
!
OLD_MSG = .BUFFER_DESC [DSC$A_POINTER] + OPC$K_COMHDRSIZ;	! Set pointer to request text
NEW_MSG = REFORMAT_BUFFER + OPC$K_COMHDRSIZ;			! Set pointer to start of new message.
NEW_MSG [OPC$B_RQSTCODE] = .OLD_MSG [OPC$B_MS_TYPE];		! Set message type
NEW_MSG [OPC$B_SCOPE] = OPC$K_SYSTEM;				! Force to SYSTEM reply
NEW_MSG [OPC$L_RQSTID] = .OLD_MSG [OPC$L_MS_RPLYID];		! Set reply number
NEW_MSG [OPC$L_RQ_OPTIONS] = .OLD_MSG [OPC$W_MS_STATUS] + OPC$_FACILITY^16;	! Set reply status
!
! Build the operator device name from the ASCIC device string
! and the device unit number.  Build the FAO OUTBUF descriptor
! to point to the correct spot within NEW_MSG to save a copy.
!
DEV_DESC [0,0,32,0] = 20;					! Allow for  a large device name
DEV_DESC [DSC$A_POINTER] = .NEW_MSG + $BYTEOFFSET (OPC$T_REPLY_OPR) + 1;
$FAO (OPR_DEV_FAO, OUT_LENGTH, DEV_DESC, OLD_MSG [OPC$T_MS_ONAME], .OLD_MSG [OPC$W_MS_OUNIT]);
NEW_MSG [$BYTEOFFSET (OPC$T_REPLY_OPR),0,8,0] = .OUT_LENGTH;
OLD_MSG_LEN = OPC$K_COMHDRSIZ + $BYTEOFFSET (OPC$L_MS_OTEXT);
NEW_MSG_LEN = $BYTEOFFSET (OPC$T_REPLY_OPR) + .OUT_LENGTH + 1;
!
! Check for the presence of some REPLY text.
!
IF .BUFFER_DESC [DSC$W_LENGTH] GTR .OLD_MSG_LEN
THEN
    BEGIN
    !
    ! There is some reply text present.  Copy it to
    ! the new message buffer.
    !
    CH$MOVE ( (.BUFFER_DESC [DSC$W_LENGTH] - .OLD_MSG_LEN),
	      OLD_MSG [$BYTEOFFSET (OPC$L_MS_OTEXT),0,0,0],
	      NEW_MSG [.NEW_MSG_LEN + 2,0,0,0]
	    );
    NEW_MSG [.NEW_MSG_LEN,0,16,0] = .BUFFER_DESC [DSC$W_LENGTH] - .OLD_MSG_LEN;
    NEW_MSG_LEN = .NEW_MSG_LEN + .NEW_MSG [.NEW_MSG_LEN,0,16,0];
    END;
NEW_MSG_LEN = .NEW_MSG_LEN + 2;

!
! Create a descriptor for the reformatted message.
!
REFORMAT_DESC [DSC$W_LENGTH]  = .NEW_MSG_LEN + OPC$K_COMHDRSIZ;
REFORMAT_DESC [DSC$B_DTYPE]   = 0;
REFORMAT_DESC [DSC$B_CLASS]   = 0;
REFORMAT_DESC [DSC$A_POINTER] = REFORMAT_BUFFER;

!
! Call the new-message handler to finish processing the message.
!
GLOBAL_STATUS [OLD_FORMAT_MSG] = TRUE;		! Mark this as an old format msg
REPLY_HANDLER (REFORMAT_DESC);
GLOBAL_STATUS [OLD_FORMAT_MSG] = FALSE;

END;						! End of RPLY_HANDLER

GLOBAL ROUTINE RQST_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all RQST messages received by OPCOM.
!	This message is in the old format, and must be converted to the new
!	format before it can be processed.  Once this is done, the new format
!	message handler is called to process the reformatted request.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of RQST_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR;			! Global status flags

EXTERNAL LITERAL
	OLD_FORMAT_MSG;					! Flag bit

EXTERNAL ROUTINE
	REQUEST_HANDLER	: NOVALUE;			! New format msg handler

LOCAL

	OLD_MSG_LEN	: LONG,				! Length of old message
	OLD_MSG		: REF BBLOCK,			! Pointer to start of old message
	NEW_MSG		: REF BBLOCK,			! Pointer to start of new message
	REFORMAT_BUFFER	: BBLOCK [OPC$K_MAXREAD],	! Buffer to hold the reformatted message
	REFORMAT_DESC	: BBLOCK [DSC$K_S_BLN];		! Descriptor for the REFORMAT_BUFFER

!
! Make sure the message is big enough.  If not, it
! cannot possibly be a valid message, and OPCOM will
! simply ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + 8)
THEN
    RETURN;

!
! Copy the commom header provided by $SNDOPR to the new buffer
!
CH$MOVE (OPC$K_COMHDRSIZ, .BUFFER_DESC [DSC$A_POINTER] , REFORMAT_BUFFER);

!
! Zero the remainder of the REFORMAT_BUFFER.
!
CH$FILL (0, (OPC$K_MAXREAD - OPC$K_COMHDRSIZ), (REFORMAT_BUFFER + OPC$K_COMHDRSIZ));

!
! Move the old message fields into their corresponding places in the new message format.
!
OLD_MSG = .BUFFER_DESC [DSC$A_POINTER] + OPC$K_COMHDRSIZ;
NEW_MSG = REFORMAT_BUFFER + OPC$K_COMHDRSIZ;
NEW_MSG [OPC$B_RQSTCODE] = .OLD_MSG [OPC$B_MS_TYPE];		! Set message code
NEW_MSG [OPC$B_SCOPE] = OPC$K_SYSTEM;				! Force SYSTEM request
NEW_MSG [OPC$L_ATTNMASK1] = .OLD_MSG [$BYTEOFFSET (OPC$B_MS_TARGET),0,24,0];
NEW_MSG [OPC$L_RQSTID] = .OLD_MSG [OPC$L_MS_RQSTID];
OLD_MSG_LEN = OPC$K_COMHDRSIZ + $BYTEOFFSET (OPC$L_MS_TEXT);
!
! Copy the request text, if any, to the new message buffer.
!
IF .BUFFER_DESC [DSC$W_LENGTH] GTR .OLD_MSG_LEN
THEN
    BEGIN
    NEW_MSG [OPC$W_REQUEST_LENGTH] = .BUFFER_DESC [DSC$W_LENGTH] - .OLD_MSG_LEN;
    CH$MOVE (.NEW_MSG [OPC$W_REQUEST_LENGTH], OLD_MSG [OPC$L_MS_TEXT], NEW_MSG [OPC$T_REQUEST_TEXT]);
    END;

!
! Create a descriptor for the reformatted message.
!
REFORMAT_DESC [DSC$W_LENGTH]  = OPC$K_COMHDRSIZ + OPC$K_HDR_SIZE + .NEW_MSG [OPC$W_REQUEST_LENGTH] + 2;
REFORMAT_DESC [DSC$B_DTYPE]   = 0;
REFORMAT_DESC [DSC$B_CLASS]   = 0;
REFORMAT_DESC [DSC$A_POINTER] = REFORMAT_BUFFER;

!
! Call the new-message handler to finish processing the message.
!
GLOBAL_STATUS [OLD_FORMAT_MSG] = TRUE;		! Mark this as an old format msg
REQUEST_HANDLER (REFORMAT_DESC);
GLOBAL_STATUS [OLD_FORMAT_MSG] = FALSE;

END;						! End of RQST_HANDLER

GLOBAL ROUTINE STS_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all STS messages received by OPCOM.
!	This message is in the old format, and must be converted to the new
!	format before it can be processed.  Once this is done, the new format
!	message handler is called to process the reformatted request.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of STS_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,			! Global status flags
	OPR_DEV_FAO	: BBLOCK;			! FAO control string

EXTERNAL LITERAL
	OLD_FORMAT_MSG;					! Global flag

EXTERNAL ROUTINE
	STATUS_HANDLER	: NOVALUE;			! New format msg handler

LOCAL

	OLD_MSG		: REF BBLOCK,			! Pointer to start of old message
	NEW_MSG		: REF BBLOCK,			! Pointer to start of new message
	OUT_LENGTH	: WORD,				! Length of formatted operator device name
	DEV_DESC	: BBLOCK [DSC$K_S_BLN],		! Operator device name descriptor
	REFORMAT_BUFFER	: BBLOCK [OPC$K_MAXREAD],	! Buffer to hold the reformatted message
	REFORMAT_DESC	: BBLOCK [DSC$K_S_BLN];		! Descriptor for the REFORMAT_BUFFER

!
! Make sure the message is big enough.  If not, it
! cannot possibly be a valid message, and OPCOM will
! simply ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + 7)
THEN
    RETURN;

!
! Copy the commom header provided by $SNDOPR to the new buffer
!
CH$MOVE (OPC$K_COMHDRSIZ, .BUFFER_DESC [DSC$A_POINTER] , REFORMAT_BUFFER);

!
! Zero the remainder of the REFORMAT_BUFFER.
!
CH$FILL (0, (OPC$K_MAXREAD - OPC$K_COMHDRSIZ), (REFORMAT_BUFFER + OPC$K_COMHDRSIZ));

!
! Move the old message fields into their corresponding places in the new message format.
!
OLD_MSG = .BUFFER_DESC [DSC$A_POINTER] + OPC$K_COMHDRSIZ;
NEW_MSG = REFORMAT_BUFFER + OPC$K_COMHDRSIZ;
NEW_MSG [OPC$B_RQSTCODE] = .OLD_MSG [OPC$B_MS_TYPE];
NEW_MSG [OPC$B_SCOPE] = OPC$K_SYSTEM;
!
! Build the operator device name from the ASCIC device string
! and the device unit number.  Build the FAO OUTBUF descriptor
! to point to the correct spot within NEW_MSG to save a copy.
!
DEV_DESC [0,0,32,0] = 20;					! Allow for  a large device name
DEV_DESC [DSC$A_POINTER] = .NEW_MSG + $BYTEOFFSET (OPC$T_STATUS_OPR) + 1;
$FAO (OPR_DEV_FAO, OUT_LENGTH, DEV_DESC, OLD_MSG [OPC$T_MS_ONAME], .OLD_MSG [OPC$W_MS_OUNIT]);
NEW_MSG [$BYTEOFFSET (OPC$T_STATUS_OPR),0,8,0] = .OUT_LENGTH;


!
! Create a descriptor for the reformatted message.
!
REFORMAT_DESC [DSC$W_LENGTH]  = OPC$K_COMHDRSIZ + OPC$K_HDR_SIZE + .OUT_LENGTH + 1;
REFORMAT_DESC [DSC$B_DTYPE]   = 0;
REFORMAT_DESC [DSC$B_CLASS]   = 0;
REFORMAT_DESC [DSC$A_POINTER] = REFORMAT_BUFFER;

!
! Call the new-message handler to finish processing the message.
!
GLOBAL_STATUS [OLD_FORMAT_MSG] = TRUE;		! Mark this as an old format msg
STATUS_HANDLER (REFORMAT_DESC);
GLOBAL_STATUS [OLD_FORMAT_MSG] = FALSE;

END;						! End of STS_HANDLER

GLOBAL ROUTINE TERME_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all TERME messages received by OPCOM.
!	This message is in the old format, and must be converted to the new
!	format before it can be processed.  Once this is done, the new format
!	message handler is called to process the reformatted request.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of TERME_HANDLER

MAP

	BUFFER_DESC	: REF BBLOCK;

EXTERNAL ROUTINE
	OPRENABLE_HANDLER : NOVALUE;			! New format message handler

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,			! Global status flags
	OPR_DEV_FAO	: BBLOCK;			! FAO control string

EXTERNAL LITERAL
	OLD_FORMAT_MSG;					! Flag bit

LOCAL

	OLD_MSG		: REF BBLOCK,			! Pointer to start of old message
	NEW_MSG		: REF BBLOCK,			! Pointer to start of new message
	OUT_LENGTH	: WORD,				! Length of formatted operator device name
	DEV_DESC	: BBLOCK [DSC$K_S_BLN],		! Operator device name descriptor
	REFORMAT_BUFFER	: BBLOCK [OPC$K_MAXREAD],	! Buffer to hold the reformatted message
	REFORMAT_DESC	: BBLOCK [DSC$K_S_BLN];		! Descriptor for the REFORMAT_BUFFER

!
! Make sure the message is big enough.  If not, it
! cannot possibly be a valid message, and OPCOM will
! simply ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + 13)
THEN
    RETURN;

!
! Copy the commom header provided by $SNDOPR to the new buffer
!
CH$MOVE (OPC$K_COMHDRSIZ, .BUFFER_DESC [DSC$A_POINTER] , REFORMAT_BUFFER);

!
! Zero the remainder of the REFORMAT_BUFFER.
!
CH$FILL (0, (OPC$K_MAXREAD - OPC$K_COMHDRSIZ), (REFORMAT_BUFFER + OPC$K_COMHDRSIZ));

!
! Move the old message fields into their corresponding places in the new message format.
!
OLD_MSG = .BUFFER_DESC [DSC$A_POINTER] + OPC$K_COMHDRSIZ;	! Set pointer to request text
NEW_MSG = REFORMAT_BUFFER + OPC$K_COMHDRSIZ;			! Set pointer to start of new message.
NEW_MSG [OPC$B_RQSTCODE] = .OLD_MSG [OPC$B_MS_TYPE];		! Set message type code
NEW_MSG [OPC$B_SCOPE] = OPC$K_SYSTEM;				! Force this to a SYSTEM enable
BBLOCK [NEW_MSG [OPC$L_RQ_OPTIONS], OPC$V_PERMOPER] = FALSE;	! Force this to a TEMPORARY enable
IF .OLD_MSG [$BYTEOFFSET (OPC$B_MS_ENAB),0,24,0] EQL 0
THEN
    BEGIN
    BBLOCK [NEW_MSG [OPC$L_RQ_OPTIONS], OPC$V_DISABLE] = TRUE;	! This is a DISABLE request
    BBLOCK [NEW_MSG [OPC$L_RQ_OPTIONS], OPC$V_PERMOPER] = FALSE;! Clear the PERMOPR bit
    END;
NEW_MSG [OPC$L_ATTNMASK1] = .OLD_MSG [OPC$L_MS_MASK];		! Set the enable/disable mask.
!
! Create an operator device name from the device name ASCIC
! string and the device unit #.  Just assume that FAO succeeded.
! Set up the OUTBUF descriptor so it points to the correct spot
! in NEW_MSG.  This will save a copy operation.
!
DEV_DESC [0,0,16,0] = 20;					! Allow for a large device name
DEV_DESC [DSC$A_POINTER] = .NEW_MSG + $BYTEOFFSET (OPC$T_OPRENABLE_OPR) + 1;
$FAO (OPR_DEV_FAO, OUT_LENGTH, DEV_DESC, OLD_MSG [OPC$T_MS_ONAME], .OLD_MSG [OPC$W_MS_OUNIT]);
NEW_MSG [$BYTEOFFSET (OPC$T_OPRENABLE_OPR),0,8,0] = .OUT_LENGTH;

!
! Create a descriptor for the reformatted message.
!
REFORMAT_DESC [DSC$W_LENGTH]  = OPC$K_COMHDRSIZ + OPC$K_HDR_SIZE + .OUT_LENGTH + 1;
REFORMAT_DESC [DSC$B_DTYPE]   = 0;
REFORMAT_DESC [DSC$B_CLASS]   = 0;
REFORMAT_DESC [DSC$A_POINTER] = REFORMAT_BUFFER;

!
! Call the new-message handler to finish processing the message.
!
GLOBAL_STATUS [OLD_FORMAT_MSG] = TRUE;		! Mark this as an old format msg
OPRENABLE_HANDLER (REFORMAT_DESC);
GLOBAL_STATUS [OLD_FORMAT_MSG] = FALSE;

END;						! End of TERME_HANDLER

END						! End of OPCOMOLD
ELUDOM
