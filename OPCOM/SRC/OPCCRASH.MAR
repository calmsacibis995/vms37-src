	.TITLE	OPCCRASH -- CRASH SYSTEM IMAGE
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;++
;
; FACILITY:
;
;	VAX/VMS OPERATOR COMMUNICATIONS PROCESS
;
; ABSTRACT:
;
; 	CRASH SYSTEM WITH BUG CHECK
;
; AUTHOR: R.HEINEN 12-JUN-78 (V06)
;
; MODIFIED BY:
;
;	V02-011	PHL0031		Peter H. Lipman		15-Feb-1982
;		Fix interlock with the Modified Page Writer thread of
;		the Swapper so that this code really waits for the
;		modified page writer to complete.
;
;		Make sure that the code executed when IPL is raised is
;		resident.
;
;	V02-010	STJ0142		Steven T. Jeffreys	16-Nov-1981
;		- Created the GET_FLAG subroutine.
;		- If the logical name OPC$REBOOT is TRUE (according
;		  to the DCL rules for boolean symbols), then set
;		  the system reboot flag.  Otherwise clear it.
;		- General cleanup.
;
;	V02-009	STJ0131		Steven T. Jeffreys	19-Oct-1981
;		Added 2 second delay in modified page count sampling
;		loop.  This will prevent OPCCRASH from blocking the
;		modified page writer when OPCCRASH is run from a
;		real-time process.
;
;	V02-008	KTA0014		Kerbey T. Altmann	15-Apr-1981
;		Changed some code to accommodate changed IOC$FFCHAN.
;
;	V0007	ACG0079		Andrew C. Goldstein,	12-Nov-1979  11:37
;		Add dismount of system disk to flush ACP caches
;
;--
	$CCBDEF				; DEFINE CCB STRUCTURE
	$DEVDEF				; DEFINE DEVICE CHARACTEROSTICS
	$IODEF				; DEFINE I/O FUNCTION CODES
	$IPLDEF				; DEFINE IPL LEVELS
	$RVTDEF				; DEFINE RVT STRUCTURE
	$UCBDEF				; DEFINE UCB STRUCTURE
	$VCBDEF				; DEFINE VCB STRUCTURE
	.PAGE
	.SBTTL CRASH SYSTEM ROUTINE
	.PSECT	OPCOM_CRASH,NOWRT
;++
; THIS IMAGE IS RUN TO CRASH THE SYSTEM WITH A BUGCHECK
;
; FUNCTIONAL DESCRIPTION:
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	NONE
;--
	.PSECT	OPCOM_CODE,PAGE
	.ALIGN PAGE
;
; MESSAGE TO PRINT
;
TIMER_FLAG = 1				; Timer event flag
DELAY_TIME:	.LONG	<-2 * 10000000>	; Delta time for $SETIMR call
		.LONG	-1
CRASH_MESSAGE:	.ASCIC	/Operator requested system shutdown/
CHANNEL:	.BLKL	1		; channel number for dismount QIO's
UNLOAD:		.ASCID	'OPC$UNLOAD'	; logical name of unload flag
REBOOT:		.ASCID	'OPC$REBOOT'	; logical name of reboot flag
NAMDESC:	.LONG	4		; descriptor for result string
		.ADDRESS NAMBUF
NAMBUF	:	.BLKL	1		; buffer for unload flag



	.ENTRY CRASH,^M<>
	$CMKRNL_S	10$		; GOTO KERNEL MODE
	RET


10$:	.WORD	^M<>
;
; We must cause the caches for the system disk(s) to be flushed. This is
; done by assigning a channel, marking the volume for dismount, and issuing
; a dismount QIO. We also set the unload bit in each UCB according to the
; unload flag provided from the shutdown procedure. If the system disk is a
; volume set, do this for all the volumes. The channel is assigned by hand,
; to circumvent any logical name screw-ups that could get in the way.
;
	JSB	G^IOC$FFCHAN		; get an available channel number
	BLBS	R0,20$			; if no channel, tough luck
	BRW	80$
20$:	MOVW	R1,CHANNEL		; store channel number
	MOVB	#1,CCB$B_AMOD(R2)	; and mark in use
	MOVAQ	UNLOAD,R0		; get address of OPC$UNLOAD string
	BSBW	GET_FLAG		; get the boolean value of OPC$UNLOAD
	MOVL	R0,R10			; save the value in R10
	MOVL	G^EXE$GL_SYSUCB,R1	; get system UCB address
	MOVL	UCB$L_VCB(R1),R0	; get VCB address...
	MOVL	VCB$L_RVT(R0),R3	; to get RVT address
	MOVL	#1,R5			; assume 1 volume
	CLRL	R4			; clear loop and RVT index
	CMPL	R1,R3			; if RVT eql UCB,
	BEQL	40$			; then this is not a volume set
	MOVZBL	RVT$B_NVOLS(R3),R5	; get count of volumes
30$:	MOVL	RVT$L_UCBLST(R3)[R4],R1 ; get next UCB address
	BEQL	70$			; branch if not mounted
40$:	INSV	R10,#UCB$V_UNLOAD,#1,-	; set the unload bit accordingly
		UCB$W_STS(R1)		;
	MOVL	R1,CCB$L_UCB(R2)	; "assign" the channel
	BBSS	#DEV$V_DMT,UCB$L_DEVCHAR(R1),60$ ; mark volume for dismount
60$:	$QIOW_S	CHAN=CHANNEL,FUNC=#IO$_ACPCONTROL!IO$M_DMOUNT
70$:	AOBLSS	R5,R4,30$		; loop through RVT
;
;	SET THE REBOOT FLAG DEPENDING ON THE BOOLEAN VALUE OF OPC$REBOOT.
;
80$:	MOVAQ	REBOOT,R0		; get lognam descriptor address
	BSBW	GET_FLAG		; get the value of OPC$REEBOT
	INSV	R0,#EXE$V_BUGREBOOT,#1,-; set the system reboot flag accordingly
		G^EXE$GL_FLAGS		;
;
; WRITE MODIFIED PAGE LIST
;
	CLRL	G^SCH$GL_MFYLIM		; FORCE SWAPPER ACTIVITY
	CLRL	G^SCH$GL_MFYLOLIM	;
;
; WAIT FOR IT TO COMPLETE
;
90$:	TSTL	G^SCH$GL_MFYCNT		; TEST MODIFIED PAGE COUNT
	BNEQ	95$			; IF NON-ZERO THEN WAIT
	BBC	S^#SCH$V_MPW,G^SCH$GB_SIP,100$ ; BR IF MODIFIED PAGE WRITER INACTIVE
95$:	$SETIMR_S	EFN=#TIMER_FLAG, DAYTIM=DELAY_TIME
	BLBC	R0,90$			; TRY IT AGAIN
	$WAITFR_S	EFN=#TIMER_FLAG	; WAIT FOR THE EVENT FLAG TO BE SET
	BRB	90$			; LOOP
;
; BUG CHECK SYSTEM
;
100$:	SETIPL	B^110$			; LOCK OUT INTERRUPTS
	BUG_CHECK OPERATOR,TYPE=FATAL	; CRASH THE SYSTEM
110$:	.BYTE	IPL$_POWER		; END OF CODE THAT RUNS AT ELEVATED IPL

;++
; GET_FLAG
;
; Functional description:
;
;	This routine will translate a given logical name, and return a
;	status code that will reflect whether the logical name was set
;	to the DCL equivalent of the boolean condtion TRUE.  To wit, if
;	the logical name translates to a string that begins with a "T",
;	"Y", or "1", then return a success status.
;
; Input:
;
;	R0 = address of the logical name descriptor
;
; Output:
;
;	None.
;
; Implicit output:
;
;	The output buffer described by the RSLBUF parameter to the $TRNLOG
;	system service will contain the (possibly truncated) translation of
;	the input logical name.  Only the first character is significant.
;
; Routine value:
;
;	The low bit of R0 will reflect the boolean value of the logical name.
;	Note that if the logical name is not defined, then the value is false.
;--

GET_FLAG:
	$TRNLOG_S	LOGNAM=(R0),-	; Translate the logical name
			RSLBUF=NAMDESC	; (only the first 4 bytes are returned)
	BLBC	R0,13$			; Exit if error
	CMPW	#SS$_NOTRAN,R0		; Did the name translate?
	BEQL	13$			; Exit if no translation
	MOVL	#1,R0			; Assume TRUE
	MOVZBL	NAMBUF,R1		; Get the first byte of the string
	CMPB	#^A/Y/,R1		; Is it a "Y"?
	BEQL	14$			;
	CMPB	#^A/y/,R1		; Is it a "y"?
	BEQL	14$			;
	CMPB	#^A/T/,R1		; Is is a "T"?
	BEQL	14$			;
	CMPB	#^A/t/,R1		; Is it a "t"?
	BEQL	14$			;
	CMPB	#^A/1/,R1		; Is it a "1"?
	BEQL	14$			;
13$:	CLRL	R0			; Indicate FALSE
14$:	RSB				; Return

	.END	CRASH
