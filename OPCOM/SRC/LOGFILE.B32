MODULE	LOGFILE	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V03-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the specialized logic to service
!	a particular type of request sent by a user to OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!	V02-002	STJ0082		Steven T. Jeffreys,		02-Aug-1981
!		Changed default logfile name to SYS$MANGER:OPERATOR.LOG
!
!--

BEGIN						! Start of LOGFILE

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:OPCOMDEF.REQ';

FORWARD ROUTINE
	LOGFILE_HANDLER	: NOVALUE;

BUILTIN

	INSQUE,					! Insert entry onto a queue
	REMQUE;					! Remove entry from a queue

GLOBAL ROUTINE LOGFILE_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all LOGFILE messages received by OPCOM.
!
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containig the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of LOGFILE_HANDLER

MAP
	BUFFER_DESC	: REF BBLOCK;

OWN	DEFAULT_LOGFILE	: DESCRIPTOR ('SYS$MANAGER:OPERATOR.LOG'); !***DEBUG
EXTERNAL
	LOGFILE_FAB	: BBLOCK,		! System logfile FAB
	LOGFILE_RAB	: BBLOCK,		! System logfile RAB
	GLOBAL_STATUS	: BITVECTOR;

EXTERNAL LITERAL
	OLD_FORMAT_MSG,				! Global status bit
	LAST_LOG_FAILED,			! Global status bit
	LOGGING_ENABLED,			! Global status bit
	LOGFILE_CLOSED;				! Global status bit

EXTERNAL ROUTINE
	CHECK_REQUEST,				! Common sanity checks
	DEALLOCATE_RQCB	: NOVALUE,		! Dispose of an RQCB
	FIND_OPERATOR,				! Find a given operator
	FORMAT_MESSAGE,				! Format a message and build an MCB
	LOG_MESSAGE,				! Write a message to a logfile
	NOTIFY_OPERATOR,			! Send a message to an operator
	NOTIFY_LISTED_OPERATORS,		! Send a msg to a list of operators
	VALID_OPERATOR;				! See if an operator device is valid

LOCAL
	MESSAGE_VECTOR	: VECTOR [5,LONG],	! Message info
	FOUND		: LONG,			! Booleand
	MESSAGE		: LONG,			! Output message code
	OPER_RQCB	: REF BBLOCK,		! Known operator RQCB
	RQCB		: REF BBLOCK,		! Requestor operator RQCB
	STATUS		: LONG;


!
! If the request does not contain enough data,
! then it cannot be processed.  Ignore it.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_LOGFILE_MIN_SIZE + OPC$K_COMHDRSIZ)
THEN
    RETURN;
!
! Call a special routine that does some sanity
! checking and startup code for all request handlers.
!
IF NOT (STATUS = CHECK_REQUEST (.BUFFER_DESC, RQCB))
THEN
    RETURN;
!
! Check the specified device and see if it is a
! valid operator device.  This routine will also
! format the operator device name and create a
! device name descriptor within the RQCB.
!
IF NOT VALID_OPERATOR (.BUFFER_DESC, .RQCB)
THEN
    BEGIN
    DEALLOCATE_RQCB (.RQCB);
    RETURN;
    END;
!
! Determine if this is a known operator.
!
FOUND = FIND_OPERATOR (.RQCB, OPER_RQCB);
!
! Do some sanity checking before granting the request.
! For the request to be granted, the following must be true:
!	- The operator must be known to OPCOM.
!	- The operator must have the proper privilege.
!	- Both the INITLOG and CLOSELOG functions must not be requested.
!
IF  (NOT .FOUND)
OR ((.RQCB [RQCB_B_SCOPE] EQL OPC$K_SYSTEM) AND (NOT .BBLOCK [RQCB [RQCB_L_PRIVMASK1], PRV$V_OPER]))
OR ((.RQCB [RQCB_B_SCOPE] EQL OPC$K_GROUP) AND NOT ((.BBLOCK [RQCB [RQCB_L_PRIVMASK1], PRV$V_OPER]) OR
						    (.BBLOCK [RQCB [RQCB_L_PRIVMASK1], PRV$V_GROUP])))
OR  ((.BBLOCK [RQCB [RQCB_L_RQ_OPTIONS], OPC$V_INITLOG]) AND
     (.BBLOCK [RQCB [RQCB_L_RQ_OPTIONS], OPC$V_CLOSELOG]))
THEN
    BEGIN
    MESSAGE_VECTOR [0] = OPC$_ILLRQST;
    MESSAGE_VECTOR [1] = 0;
    FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
    NOTIFY_OPERATOR (.RQCB);
    DEALLOCATE_RQCB (.RQCB);
    RETURN;
    END;
!
! Service the request.
!
IF .BBLOCK [RQCB [RQCB_L_RQ_OPTIONS], OPC$V_INITLOG]
THEN
    BEGIN
    !
    ! Init the operator logfile.
    !
    GLOBAL_STATUS [LAST_LOG_FAILED] = TRUE;	! Assume failure
    MESSAGE_VECTOR [0] = OPC$_LOGFAIL;		! Set failure message
    MESSAGE_VECTOR [1] = 0;
    MESSAGE_VECTOR [2] = RQCB [RQCB_L_OPER_LEN];
    MESSAGE_VECTOR [3] = DEFAULT_LOGFILE;
    $CLOSE (FAB=LOGFILE_FAB);			! Close the logfile
    IF $CREATE (FAB=LOGFILE_FAB)		! Open a new logfile
    THEN
	IF $CONNECT (RAB=LOGFILE_RAB)
	THEN
	    BEGIN
	    GLOBAL_STATUS [LOGFILE_CLOSED] = FALSE;
	    GLOBAL_STATUS [LAST_LOG_FAILED] = FALSE;
	    MESSAGE_VECTOR [0] = OPC$_LOGINIT;
	    MESSAGE_VECTOR [1] = 0;
	    MESSAGE_VECTOR [2] = RQCB [RQCB_L_OPER_LEN];
	    MESSAGE_VECTOR [3] = DEFAULT_LOGFILE;
	    END;
    END;

IF .BBLOCK [RQCB [RQCB_L_RQ_OPTIONS], OPC$V_CLOSELOG]
THEN
    BEGIN
    !
    ! Close the logfile.
    !
    GLOBAL_STATUS [LOGFILE_CLOSED] = TRUE;
    MESSAGE_VECTOR [0] = OPC$_LOGCLOS;
    MESSAGE_VECTOR [1] = 0;
    MESSAGE_VECTOR [2] = RQCB [RQCB_L_OPER_LEN];
    MESSAGE_VECTOR [3] = DEFAULT_LOGFILE;
    $CLOSE (FAB=LOGFILE_FAB);
    END;
!
! Report the request status and dismiss the request.
! The message is sent to all CENTRAL operators.
! Set the BRD bit to insure that the requestor is notified.
!
FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
BBLOCK [RQCB [RQCB_L_STATUS], HDR_V_BRD] = TRUE;
RQCB [RQCB_L_ATTNMASK1] = OPC$M_NM_CENTRL;
RQCB [RQCB_L_ATTNMASK2] = 0;
NOTIFY_LISTED_OPERATORS (.RQCB);
LOG_MESSAGE (.RQCB);
DEALLOCATE_RQCB (.RQCB);

END;						! End of LOGFILE_HANDLER

END						! End of LOGFILE
ELUDOM
