MODULE $cdbdef;				/* Class Descriptor Block

/*
/*+
/*
/* Data structures for Monitor utility
/*
/*-
/*
/*	Version 'V03-002'
/*
/****************************************************************************
/*									    *
/*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
/*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
/*  ALL RIGHTS RESERVED.						    *
/* 									    *
/*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
/*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
/*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
/*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
/*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
/*  TRANSFERRED.							    *
/* 									    *
/*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
/*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
/*  CORPORATION.							    *
/* 									    *
/*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
/*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
/* 									    *
/****************************************************************************

/*
/*++
/* FACILITY:  MONITOR Utility 
/*
/* ABSTRACT:  Data Structure Definitions
/*		
/* ENVIRONMENT:	Non-executable.
/*
/* AUTHOR:  Thomas L. Cafarella, April, 1981
/*

/*
/* MODIFIED BY:
/*
/*	V03-001	TLC0014		Thomas L. Cafarella	01-Apr-1982	13:00
/*		Correct attached processor time reporting for MODES.
/*
/*	V03-002	TLC1012		Thomas L. Cafarella	30-Mar-1982	13:00
/*		Display user's comment string on screen line 5.
/*
/*	V03-001	TLC1009		Thomas L. Cafarella	29-Mar-1982	01:00
/*		Get current time when other times are converted.
/*
/*--
/*

/*
/* Define Class Descriptor Block offsets.  There is a Class Descriptor
/* Block for each class of performance data.
/*

AGGREGATE cdb	STRUCTURE PREFIX cdb$ ;	/* Class Descriptor Block
	faoctr		LONGWORD;		/* Length of FAO control string
	faoctr		ADDRESS;		/* Address of FAO control string
	title		ADDRESS;		/* Address of title cstring
	count		LONGWORD;		/* Number of items in this class (STD)
						/* Number of TOP items in PROCESSES class (non-STD)
	itmstr		ADDRESS;		/* Address of item token string (STD)
						/* 0 for non-STD class
	blklen		WORD;			/* Length of a block
	precoll		ADDRESS;		/* Address of pre-collection routine (0 if none)
	postcoll	ADDRESS;		/* Address of post-collection routine (0 if none)
	buffers		LONGWORD;		/* Length of collection buffer block
	buffers		ADDRESS;		/* Address of block of collection buffers (STD)
						/* Address of block consisting of collection buffer
						/*   and display buffer (non-STD)
	min		LONGWORD;		/* Minimum value
	range		LONGWORD;		/* Value range (max-min)
	st		BYTE;			/* Code for form of statistical display
	st_def		BYTE;			/* Default ST code
	flags		STRUCTURE TAG l;	/* Flags for cdb
	ctpres		BITFIELD LENGTH 1 MASK;	/* Count present can be YES or NO
	swapbuf		BITFIELD LENGTH 1 MASK;	/* Swap buffers bit is flip-flopped 
	uniform		BITFIELD LENGTH 1 MASK;	/* Uniform can be YES or NO
						/* Uniform = YES => This class is strictly made up of items
						/*                  which can be expressed as percentages of
						/*                  a whole.
	percent		BITFIELD LENGTH 1 MASK;	/* Percent = YES => User has requested all data be displayed
						/*                  as percent values.
	pcent_def	BITFIELD LENGTH 1 MASK; /* Default setting for PERCENT
	cpu		BITFIELD LENGTH 1 MASK;	/* Cpu = YES => User has requested MODES to be displayed
						/*              in CPU-specific format
	cpu_def		BITFIELD LENGTH 1 MASK; /* Default setting for CPU
	cpu_exp		BITFIELD LENGTH 1 MASK; /* YES => expand item count while collecting
	std		BITFIELD LENGTH 1 MASK; /* Standard can be YES or NO
						/* YES => this is a standard class
	disable		BITFIELD LENGTH 1 MASK; /* YES => Do not allow this class to be requested
	kunits		BITFIELD LENGTH 1 MASK; /* YES => Bar graph headings displayed in K units
	filler		BITFIELD LENGTH 32-^;	/* Fill out remainder of longword
	END flags;
	#cdbsize = .;				/* Size of cdb					
	END cdb;

CONSTANT size EQUALS #cdbsize PREFIX cdb$ ;	/* Declare constant for cdb size		

END_MODULE $cdbdef;

MODULE $idbdef;				/* Item Descriptor Block
/*
/* Define Item Descriptor Block (IDB) offsets. There is one Item Descriptor
/* Block for each unique data item. Generally, a data item is defined for
/* only one class, although there are some instances of data items which
/* are defined for several classes (Page Fault Rate, for example).
/*

AGGREGATE idb	STRUCTURE PREFIX idb$ ;		/* Item Descriptor Block
	sname		ADDRESS;		/* Address of short name cstring
	lname		ADDRESS;		/* Address of long name cstring
	isize		WORD;			/* Code indicating size of data item 
	type		WORD;			/* Code indicating type of data item 
						/* NOTE -- Size and Type codes are defined
						/*         in module MONDAT.MAR
	addr		ADDRESS;		/* Address of data item (initialized by
						/*         BLDIDB macros in module MONDAT.MAR
	#idbsize = .;				/* Size of IDB
	END idb;

CONSTANT ilength	EQUALS #idbsize PREFIX idb$ ; /* Constant for IDB size

END_MODULE $idbdef;

MODULE $mrbdef;				/* Monitor Request Block
/*
/* Define Monitor Request Block (MRB) offsets. There is one Monitor Request
/* Block for each monitor request. A monitor request is defined as
/* one MONITOR command invocation.
/*

AGGREGATE mrb	STRUCTURE PREFIX mrb$ ;		/* Monitor Request Block
	beginning	QUADWORD;		/* Beginning time of request in system time units
	ending		QUADWORD;		/* Ending time of request in system time units
	interval	LONGWORD;		/* Interval value in seconds
	viewing_time	LONGWORD;		/* Viewing time for a screen in seconds
	input		ADDRESS;		/* Address of input file descr (0 if input not requested)
	display		ADDRESS;		/* Address of display file descr (0 if display not requested)
	record		ADDRESS;		/* Address of record file descriptor (0 if record not requested)
	summary		ADDRESS;		/* Address of summary file descriptor (0 if summary not requested)
	comment		ADDRESS;		/* Address of comment string descriptor
	classct		WORD;			/* Count of classes requested
	classbits	OCTAWORD UNSIGNED;	/* Bit string of requested classes
	flags		STRUCTURE TAG w;	/* Flags for MRB
	display		BITFIELD LENGTH 1 MASK;	/* YES => user requested /DISPLAY
	record		BITFIELD LENGTH 1 MASK;	/* YES => user requested /RECORD
	summary		BITFIELD LENGTH 1 MASK;	/* YES => user requested /SUMMARY
	playback	BITFIELD LENGTH 1 MASK;	/* YES => user requested /INPUT
	indefend	BITFIELD LENGTH 1 MASK;	/* YES => ending time is indefinite
	disp_to_file	BITFIELD LENGTH 1 MASK;	/* YES => user specified a filename on /DISPLAY
	filler		BITFIELD LENGTH 16-^;	/* Fill out rest of word
	END flags;
	#mrbsize = .;				/* Size of mrb					
	END mrb;

CONSTANT size 		EQUALS #mrbsize PREFIX mrb$ ; /* Constant for mrb size		

END_MODULE $mrbdef;

MODULE $mcadef;				/* Monitor Communication Area
/*
/* This "structure" consists of unrelated variables used by the various
/* routines of the MONITOR utility. They have been placed in a based
/* structure for ease of reference across separately compiled PL/I
/* and MACRO-32 modules.
/*

AGGREGATE mca	STRUCTURE PREFIX mca$ ;		/* Monitor Communication Area
	input_len	LONGWORD;		/* Length of current input file record
	input_ptr	ADDRESS;		/* Address of current input file record
	intticks	LONGWORD;		/* Interval calculation (in 10ms ticks)
	collcnt		LONGWORD;		/* Count of collections completed
	dispcnt		LONGWORD;		/* Count of displays completed
	int_mult	LONGWORD;		/* Interval multiple (For playback, # of intervals
						/* ... to advance before recording or displaying)
	proc_disp	LONGWORD;		/* Number of processes to display (PROCESSES class)
	mpaddr		ADDRESS;		/* Address of MP (multiprocessing) code
	curr_time	QUADWORD;		/* Current time in system time units
	lastcoll	QUADWORD;		/* Time stamp of latest collection
	firstc		BYTE;			/* Class number of first requested class
	lastc		BYTE;			/* Class number of last requested class
	flags		STRUCTURE TAG w;	/* Flags
	"entry"		BITFIELD LENGTH 1;	/* Type of entry -- can be COMMAND or UTILITY
	future		BITFIELD LENGTH 1;	/* YES => monitor request begins in future
	multfnd		BITFIELD LENGTH 1;	/* Multiple found can be YES or NO
	eof		BITFIELD LENGTH 1;	/* YES => EOF (end-of-file) on /INPUT file
	video		BITFIELD LENGTH 1;	/* YES => Display terminal is a video device
	graphics	BITFIELD LENGTH 1;	/* YES => Display terminal is a VT55 
	era_scrl	BITFIELD LENGTH 1;	/* YES => PROCESSES scrolling region must be erased
	top_disp	BITFIELD LENGTH 1;	/* YES => At least one TOP display event has occured
	refresh		BITFIELD LENGTH 1;	/* YES => Screen refresh request received (CTRL-R, CTRL-W)
	filler		BITFIELD LENGTH 16-^;	/* Fill out rest of word
	END flags;
	#mcasize = .;				/* Size of MCA					
	END mca;

CONSTANT size 		EQUALS #mcasize PREFIX mca$ ; /* Constant for MCA size		

END_MODULE $mcadef;

MODULE $mbpdef;				/* Monitor Buffer Pointers
/*
/* This structure consists of ten pointers to MONITOR collection and
/* statistics buffers. The pointers themselves are located at the
/* beginning of a block of space consisting of the pointers followed
/* immediately by the buffers.
/*
/* For the non-standard class PROCESSES (regular display), there are
/* only 2 buffers:
/*
/* 	Buffera, which is the collection buffer, and
/*	Bufferb, which is the display (FAO stack) buffer.
/*
/* For the non-standard class PROCESSES (TOP display), there are still
/* ten buffers, but their names are different from those of the standard
/* classes.
/*

AGGREGATE mbp	STRUCTURE PREFIX mbp$ ;		/* Monitor Buffer Pointers
	buffera		ADDRESS;		/* Pointer to collection buffer A
	bufferb		ADDRESS;		/* Pointer to collection buffer B
						/* The above two pointers may not be moved !!
	stats		ADDRESS;		/* Pointer to statistics buffer
	min		ADDRESS;		/* Pointer to buffer containing min values
	max		ADDRESS;		/* Pointer to buffer containing max values
	sum		ADDRESS;		/* Pointer to sum buffer
	pcstats		ADDRESS;		/* Pointer to percent statistics buffer
	pcmin		ADDRESS;		/* Pointer to buff with min percent values
	pcmax		ADDRESS;		/* Pointer to buff with max percent values
	pcsum		ADDRESS;		/* Pointer to percent sum buffer
	END mbp;


AGGREGATE mbp2	STRUCTURE PREFIX mbp$ ;		/* Monitor Buffer Pointers for PROCESSES/TOP class
	buffa		ADDRESS;		/* Pointer to collection buffer A
	buff1st		ADDRESS;		/* Pointer to 1st collection buffer of MONITOR request
	data		ADDRESS;		/* Pointer to DATA array
	diff		ADDRESS;		/* Pointer to DIFF array
	order		ADDRESS;		/* Pointer to ORDER array
	pid		ADDRESS;		/* Pointer to PID array
	addr		ADDRESS;		/* Pointer to ADDR array
	END mbp2;

END_MODULE $mbpdef;

MODULE $mondef;					/* Monitor Recording File Definitions
/*
/* These definitions describe data items in MONITOR Recording File records.
/* The record types include: recording file header record, system information
/* record, class header portion of class record and prefix portion of
/* PROCESSES class record.
/*

#comlen = 60;					/* Length of user comment string
#faosize = 4*18;				/* Number of bytes for FAO stack (display buffer)
						/*   for a single process (PROCESSES class)

AGGREGATE file_hdr	STRUCTURE PREFIX mnr_hdr$ ; /* Monitor File Header Record
	type		BITFIELD LENGTH 8 TAG b; /* Unsigned record type
	flags		STRUCTURE TAG l;	/* Flags
	filler		BITFIELD LENGTH 32-^;	/* Fill out rest of longword
	END flags;
	beginning	QUADWORD;		/* Beginning time of request in system time units
	ending		QUADWORD;		/* Ending time of request in system time units
	interval	LONGWORD;		/* Interval value in seconds
	classbits	OCTAWORD UNSIGNED;	/* Bit string of requested classes
	recct		LONGWORD;		/* Count of all records in the file (incl header)
	level		CHARACTER LENGTH 8;	/* MONITOR Recording File structure level identification
	comment		CHARACTER LENGTH #comlen; /* User comment string
	comlen		WORD;			/* Actual length of user comment string
	#flhsize = .;				/* Size of file header					
	END file_hdr;

CONSTANT size		EQUALS #flhsize PREFIX mnr_hdr$ ; /* Constant for file header size		
CONSTANT comlen		EQUALS #comlen	PREFIX mnr_hdr$ ; /* Constant for user comment string size

AGGREGATE sys_info	STRUCTURE PREFIX mnr_syi$ ; /* Monitor System Information Record
						/* Contains VAX/VMS system info about the monitored system
	type		BITFIELD LENGTH 8 TAG b; /* Unsigned record type
	flags		STRUCTURE TAG w;	/* Flags
	filler		BITFIELD LENGTH 16-^;	/* Fill out rest of word
	END flags;
	boottime	QUADWORD;		/* Absolute system boot time in system time units
	maxprcct	WORD;			/* MAXPROCESSCNT SYSGEN parameter
	mpcpus		BYTE;			/* Number of multiprocessing CPUs
	#syisize = .;				/* Size of sys info record					
	END sys_info;

CONSTANT size		EQUALS #syisize PREFIX mnr_syi$ ; /* Constant for sys info record size		

AGGREGATE class_hdr	STRUCTURE PREFIX mnr_cls$ ; /* Monitor Class Record Header
	type		BYTE;			/* Unsigned record type
	flags		STRUCTURE TAG w;	/* Flags
	cont		BITFIELD LENGTH 1;	/* The data for this interval continues in next record
	filler		BITFIELD LENGTH 16-^;	/* Fill out rest of word
	END flags;
	stamp		QUADWORD;		/* System time of collection
	reserved	WORD;			/* Reserved to DIGITAL
	#clhsize = .;				/* Size of class header					
	END class_hdr;

CONSTANT hsize	EQUALS #clhsize PREFIX mnr_cls$ ; /* Constant for class header size		

AGGREGATE pro_class_pre	STRUCTURE PREFIX mnr_pro$ ; /* PROCESSES Class Prefix
	pctrec		LONGWORD;		/* Count of processes in this record
	pctint		LONGWORD;		/* Count of processes for this interval
	#ppfsize = .;				/* Size of PROCESSES prefix					
	END pro_class_pre;

CONSTANT psize	EQUALS #ppfsize PREFIX mnr_pro$ ; /* Constant for PROCESSES prefix size		

AGGREGATE process_class	STRUCTURE PREFIX mnr_pro$ ; /* PROCESSES Class Data Block
	pid		LONGWORD;		/* PID
	uic		LONGWORD;		/* UIC (Member is low-order word)
	state		WORD;			/* State value
	pri		BYTE;			/* Priority (negative value)
	lname		OCTAWORD;		/* Process name (counted string)
	gpgcnt		WORD;			/* Global page count
	ppgcnt		WORD;			/* Process page count
	sts		LONGWORD;		/* PCB Status Vector
						/*   (PCB$V_RES bit clear => swapped out)
	diocnt		LONGWORD;		/* Direct I/O count
	pageflts	LONGWORD;		/* Page fault count
	cputim		LONGWORD;		/* Accumulated CPU time (in ticks)
	biocnt		LONGWORD;		/* Buffered I/O count
	#pdbsize = .;				/* Size of process data block
	END process_class;

CONSTANT dsize	EQUALS #pdbsize PREFIX mnr_pro$ ; /* Constant for process data block size		
CONSTANT fsize	EQUALS #faosize	PREFIX mnr_pro$ ; /* Constant for FAOSTK (display buffer) size		

END_MODULE $mondef;
