MODULE TEMPLATE (
		IDENT = 'V03-002',
		ADDRESSING_MODE(EXTERNAL=GENERAL,
				NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: VAX/VMS MONITOR Utility
!
! ABSTRACT:
!
!	The TEMPLATE module contains the routines to create
!	templates for the various display screens.
!
! ENVIRONMENT:
!
!	Unprivileged, user mode.
!
! AUTHOR: Henry M. Levy	, CREATION DATE: 28-April-1977
!
! MODIFIED BY:
!
!	V03-002	TLC1010		Thomas L. Cafarella	29-Mar-1982	15:00
!		Eliminate lower-case "a" strings from summary bar graphs.
!
!	V03-001	TLC1005		Thomas L. Cafarella	25-Mar-1982	17:00
!		Alter vertical spacing for classes with 13 items.
!
!--


!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	OUTPUT ,		! output a counted string to the SCRPKG
	POSITION ,		! call SCRPKG to position cursor
	TEMPLATE ;		! build and output display templates


!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB.L32';	! system service macros and user definitions
REQUIRE 'MONDEFREQ';		! private MONITOR control block definitions
REQUIRE 'DSPDEFREQ';		! item numbers defined here

BUILTIN EMUL ;			! define EMUL VAX hardware function

!
! MACROS:
!

MACRO

!
! Counted ascii string macro
!
CSTRING[] = (UPLIT BYTE(%CHARCOUNT(%STRING(%REMAINING)),
		%STRING(%REMAINING)) )%;

!
! EQUATED SYMBOLS:
!

LITERAL

	BELL = 7 ,
	ESC = 27 ,
	ALTSET = ('F' ^ 8) + ESC,	! alternate graphics set
	CR = 13 ,			! carriage return
	CURSOR = ('Y' ^ 8) + ESC,	! position cursor command
	ERASE = ('J' ^ 8) + ESC,	! erase entire screen
	ERASEEOL = ('K' ^ 8) + ESC,	! erase to end of line
	FALSE = 0 ,
	HOME = ('H' ^ 8) + ESC,		! return cursor to top
	LF = 10 ,			! line feed
	REGSET = ('G' ^ 8) + ESC,	! normal graphics set
	TRUE = 1 ;

!
! OWN STORAGE:
!

OWN
	TOPSTR10: VECTOR[45,BYTE] 
		  INITIAL (BYTE(44),BYTE(' [!3OW,!3OW]  !16AC!AC!5<!#UL!>!AC'),
			 BYTE(ESC),BYTE('F!#*a'),BYTE(ESC),BYTE('G'),BYTE(ESC),BYTE('K')) ;

!
! Table of bit vectors which "illustrate" the pattern of data line
! spacing within the data portion of the display screen. There is
! one bit vector for each possible number of data items (24). Each
! bit vector contains 24 bits representing the lines in the data
! portion of the display screen. A "1" bit means this is a data line;
! a "0" bit means this is a space. The bits read from right to left;
! so, for example, the bit representing line 1 is the right-most.
!


OWN
	SCR_PATTERN:	VECTOR[24,LONG] INITIAL (

		LONG(%B'000000000100000000000000'),	! 1 data item
		LONG(%B'000000001010000000000000'),	! 2 data items
		LONG(%B'000000100100100000000000'),	! 3 data items
		LONG(%B'000000101010100000000000'),	! 4 data items
		LONG(%B'000001010101010000000000'),	! 5 data items
		LONG(%B'000010100101001010000000'),	! 6 data items
		LONG(%B'000010101010101010000000'),	! 7 data items
		LONG(%B'001010101010101010000000'),	! 8 data items
		LONG(%B'000011100111001110000000'),	! 9 data items
		LONG(%B'000110110110110110000000'),	! 10 data items
		LONG(%B'000110111011101110000000'),	! 11 data items
		LONG(%B'001110111011101110000000'),	! 12 data items
		LONG(%B'001111011111011110000000'),	! 13 data items
		LONG(%B'001111111011111110000000'),	! 14 data items
		LONG(%B'001111111111111110000000'),	! 15 data items
		LONG(0),				! 16 data items
		LONG(0),				! 17 data items
		LONG(0),				! 18 data items
		LONG(0),				! 19 data items
		LONG(0),				! 20 data items
		LONG(0),				! 21 data items
		LONG(0),				! 22 data items
		LONG(0),				! 23 data items
		LONG(0) );				! 24 data items

!
! One of the above longword elements is moved to the 24-bit vector 
! below, based on the number of items in the display. The bit vector
! is then used to determine whether a line in the data portion of the
! screen is to be a space (0) or is to contain data (1).
!

OWN
	SCR_DATA_LINE:	BITVECTOR[24];

!
! Messages
!

BIND

TABSTR = CSTRING(' !7UL.!2ZL !7UL.!2ZL !7UL.!2ZL !7UL.!2ZL'),
TABSTR_PC = CSTRING('  !7UL.!1ZL  !7UL.!1ZL  !7UL.!1ZL  !7UL.!1ZL'),
COUNTSTR = UPLIT BYTE ('!7<!#UL!>'),
CRSTR = CSTRING(%CHAR(CR)),
CLRSTR = CSTRING(%CHAR(ESC),'H',%CHAR(ESC),'J'),
DELSTR = CSTRING(%CHAR(ESC),'J'),
GRAPHICS_ON = CSTRING( %CHAR(ESC) , '1' ),
GRAPHICS_OFF = CSTRING( %CHAR(ESC) , '2' ) ,
HOMESTR = CSTRING(%CHAR(ESC),'H'),

LFSTR = CSTRING(%CHAR(LF)),                                                     
NLSTR = CSTRING(%CHAR(CR),%CHAR(LF)),
REPTSTR = UPLIT BYTE('!#*'),
SETVT55 = CSTRING( %CHAR(ESC) , '1' , 'A' , %CHAR(%O'77') , 'I' ,
	 %CHAR(%O'57') , %CHAR(ESC) , '2' ),
TOPSTR20 = CSTRING(%CHAR(ESC),'K'),                                           
VHSTSTR20 = CSTRING( '!UL' );

!
! Table of counted strings for Process States
!

GLOBAL BIND

STATELIST = UPLIT ( 	CSTRING('BAD') ,
			CSTRING('COLPG') ,
			CSTRING('MWAIT') ,
			CSTRING('CEF') ,
			CSTRING('PFW') ,
			CSTRING('LEF') ,
			CSTRING('LEFO') ,
			CSTRING('HIB') ,
			CSTRING('HIBO') ,
			CSTRING('SUSP') ,
			CSTRING('SUSPO') ,
			CSTRING('FPG') ,
			CSTRING('COM') ,
			CSTRING('COMO') ,
			CSTRING('CUR')
			);

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	BARCHAR: BYTE ,		! character to repeat to form bar graphs
	DISPLAYING: BYTE,	! low bit set => display is active
	FAOSTK: VECTOR[,LONG] ,	! fao parameter space
	NAMESTR ,		! fao string for output of long names
	NORMAL ,		! MONITOR normal return status
	PERFTABLE: VECTOR[,LONG] , ! list of performance item descriptors
	SCH$GL_MAXPIX: ADDRESSING_MODE(LONG_RELATIVE) , ! max process index
	SCH$GL_PCBVEC: ADDRESSING_MODE(LONG_RELATIVE) , ! address of PCB pointer list
	VT55XINCR ;		! incr from bar to bar

EXTERNAL LITERAL
	ALL_STAT ,		! statistic code indicating all stats requested
	FAOCTR_SIZE ,		! size of FAO control string
	FIRST_DATA_LINE,	! line number of first data line on screen
	LAST_DATA_LINE,		! line number of last data line on screen
	MAXBARS ,		! max characters on horizontal histogram
	VT55CWIDTH,		! max characters on bottom axis
	VTHEIGHT,		! height of screen
	VTWIDTH ;		! width of screen

EXTERNAL ROUTINE
	PUT_TO_SCREEN ,		! rtn to xlate & annex a string to SYS$OUTPUT buffer
	LIB$GET_VM ,		! rtn to acquire virtual memory
	SCR$SET_CURSOR ;	! rtn to annex a cursor positioning esc seq to SYS$OUTPUT


GLOBAL ROUTINE TEMPLATE( DCDB )  =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine formats and displays the name strings for tabular
!	and bar graph displays of current, average, min and max values.
!	It also builds the FAO control string for the actual data on the
!	first call per class.
!
! INPUTS:
!
!	DCDB   - address of class descriptor block for class being displayed.
!
! IMPLICIT INPUTS:
!
!	PERFTABLE - address of table of contiguous IDB's.
!
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	Name string for each item in the display for this class sent
!	directly to screen package (via call to PUT_TO_SCREEN).
!
!	On first call to this routine for this class, a buffer is
!	obtained for the FAO control string to output the data values.
!	It is filled with the necessary FAO control information and
!	its address and length are stored in the CDB$A_FAOCTR and
!	CDB$L_FAOCTR fields, respectively.
!
! ROUTINE VALUE:
!
!	NORMAL, or possible failing status from LIB$GET_VM.
!
! SIDE EFFECTS:
!
!	none
!--

LOCAL
	I,					! data item index
	ITEMS,					! count of data items
	ITMSTR,					! pointer to first item token
	NAME_COL ,				! column to put name string
	POINTER,				! pointer into fao control string buffer
	STATUS,					! return status
	XPOS,					! column address
	YPOS;					! row address
MAP
	DCDB: REF BLOCK[,BYTE] ,		! address CDB structure
	ITMSTR: REF VECTOR[,BYTE] ;		! item byte string


ITEMS = .DCDB[CDB$L_COUNT] ;			! number of items to output
SCR_DATA_LINE = .(SCR_PATTERN[.ITEMS-1])<0,24> ; ! get data spacing pattern

!
! Output name string for each item in this class
!

IF .DCDB[CDB$B_ST] EQL ALL_STAT			! if this is a tabular display,
    THEN  NAME_COL = 5				!   start the names at column 5
    ELSE  NAME_COL = 2;				!   else start at 2 for bar graph
I = 0 ;						! initialize data item index
ITMSTR = .DCDB[CDB$A_ITMSTR] ;			! get address of item byte string

INCR YPOS FROM FIRST_DATA_LINE TO LAST_DATA_LINE ! loop once for each line in
DO						! ... data portion of screen
    BEGIN

    !
    ! Find the IDB for this item.  Output the long name
    ! string, preceded by the correct cursor positioning
    ! sequence to space them out evenly.
    !

    LOCAL
	DIDB: REF BLOCK[,BYTE] ,
	NAME ,
	NEXT ;
    IF .SCR_DATA_LINE[.YPOS-1]				! if this is a data line,
    THEN
	BEGIN
	NEXT = .ITMSTR[.I] ;				! get next token
	DIDB = PERFTABLE[ .NEXT * (IDB$K_ILENGTH/4) ] ;	! addr of IDB
	NAME = .DIDB[IDB$A_LNAME] ;			! address of name string
	POSITION( .YPOS , .NAME_COL ) ;			! position to this item
	OUTPUT( .NAME ) ;				! output name string
	I = .I + 1 ;					! point index to next data item
	END;

    END;

!
! If this is the first time thru for this class,
! obtain and build the FAO control string to insert
! the data values for the items at data display time.
!

IF .DCDB[CDB$A_FAOCTR] EQL 0  OR  NOT .DISPLAYING		! if no fao control string yet
THEN								! ... OR in summary processing
    BEGIN
    LOCAL
        FAOCSIZE ;						! holds faoctr size
    IF .DCDB[CDB$A_FAOCTR] EQL 0				! if no control string buffer yet,
    THEN
	BEGIN
	FAOCSIZE = FAOCTR_SIZE ;				! initialize its size
	STATUS = LIB$GET_VM(FAOCSIZE,DCDB[CDB$A_FAOCTR]);	! get the memory for it
	IF NOT .STATUS THEN RETURN .STATUS ;			! return if error
	END;

    POINTER = .DCDB[CDB$A_FAOCTR] ;				! start pointer at beg of FAO buffer

    IF .DCDB[CDB$B_ST] EQL ALL_STAT				! if this is a tabular display,
    THEN							!   set up control string accordingly
	BEGIN
	LOCAL
	    CUR_TABSTR ;					! holds addr of FAO control string segment
	XPOS = 32 ;						! starting column

	IF .DCDB[CDB$V_PERCENT]					! if this is a percent display,
	    THEN  CUR_TABSTR = TABSTR_PC			!   get the appropriate FAO control str segment
	    ELSE  CUR_TABSTR = TABSTR;				!   else get the other one

	INCR YPOS FROM FIRST_DATA_LINE TO LAST_DATA_LINE	! loop once for each line in
	DO							! ... data portion of screen
	    BEGIN
	    IF .SCR_DATA_LINE[.YPOS-1]				! if this is a data line,
	    THEN
	        BEGIN
		(.POINTER)<0,16> = CURSOR ;			! insert position command
		( POINTER = .POINTER + 2 )<0,8> = .YPOS ;	! insert row number
		( POINTER = .POINTER + 1 )<0,8> = .XPOS ;	! insert column number
		POINTER = .POINTER + 1 ;			! update to skip last inserted byte
		CH$MOVE( .(.CUR_TABSTR)<0,8> , (.CUR_TABSTR)+1 , .POINTER ) ; ! move conversion control string
		POINTER = .POINTER + .(.CUR_TABSTR)<0,8> ;	! update pointer
		END;
	    END;

	END

    ELSE						! bar graph display -- set up ctrl string for it
	BEGIN
	!
	! Now build the fao control string to output a bar graph
	! at run time.  The control string contains for each line:
	!	position row and column to left of grid                                 
	!	write count                                                             
	!	re-position row and column inside grid                                  
	!	output 'n' bar characters                                               
	!	delete to end of line
	!
	LOCAL
	    XPOSBAR ,					! column number of beg of bar
	    XPOSCOUNT ;					! column number of count field

	XPOSCOUNT = 30 ;				! starting column of count field
	XPOSBAR = 39 ;					! starting column of bar field  
	(.POINTER) <0,16> = ALTSET ;			! start filling ctrl string (alternate graphics)
	POINTER = .POINTER + 2 ;			! skip to next position

	INCR YPOS FROM FIRST_DATA_LINE TO LAST_DATA_LINE ! loop once for each line in
	DO						! ... data portion of screen
	    BEGIN
	    IF .SCR_DATA_LINE[.YPOS-1]				! if this is a data line,
	    THEN
	        BEGIN
		(.POINTER)<0,16> = CURSOR ;			! insert position command
		(POINTER = .POINTER + 2 )<0,8> = .YPOS ;	! next Y position
		(POINTER = .POINTER + 1 )<0,8> = .XPOSCOUNT ;	! X position for count        
		POINTER = .POINTER + 1 ;			! next buffer position          
		CH$MOVE( 9 , COUNTSTR , .POINTER ) ;		! move count directive          
		(POINTER = .POINTER+9)<0,16> = CURSOR ;		! insert control to position to 
		(POINTER = .POINTER+2)<0,8> = .YPOS ;		! stay in same row              
		(POINTER = .POINTER+1)<0,8> = .XPOSBAR ;	! column for bar field          
		POINTER = .POINTER + 1 ;			! next buffer position          
		CH$MOVE( 3 , REPTSTR , .POINTER ) ;		! move repeat control
		(POINTER = .POINTER + 3)<0,8> = .BARCHAR ;	! insert literal character to use for graph
		(POINTER = .POINTER+1)<0,16> = ERASEEOL ;	! delete rest of line
		POINTER = .POINTER + 2 ;			! next buffer position          
		END;                                                                        
	    END;

	(.POINTER)<0,16> = REGSET ;			! restore normal char set
	POINTER = .POINTER + 2 ;			! update position
	END;

    !
    ! Insert length of created string into CDB
    !

    DCDB[CDB$L_FAOCTR] = .POINTER - .DCDB[CDB$A_FAOCTR] ;
    END ;
RETURN .NORMAL ;					! return with no errors
END;

GLOBAL ROUTINE OUTPUT( STRING ) =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Routine to output counted string with no carriage control.
!
! INPUTS:
!
!	STRING - address of counted ascii string.
!
! OUTPUTS:
!
!	none
!++

PUT_TO_SCREEN (.(.STRING)<0,8>, .STRING+1)
END;


ROUTINE POSITION( YPOS , XPOS ) =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Routine to call SCRPKG to position screen for characters.
!
! INPUTS:
!
!	YPOS - y position ( row number , one origin)
!	XPOS - x position ( column number , one origin)
!
! OUTPUTS:
!
!	none
!--

SCR$SET_CURSOR (.YPOS, .XPOS) ; ! set cursor to the requested position
END;


END				!End of module
ELUDOM
