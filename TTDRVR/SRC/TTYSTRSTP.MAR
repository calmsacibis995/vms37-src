	.TITLE	TTYSTRSTP - Terminal driver start/stop I/O routines
	.IDENT	'V03-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:
;
;	VAX/VMS TERMINAL DRIVER
;
; ABSTRACT:
;
;	THIS MODULE CONTAINS ROUTINES PERTAINING TO STARTING AND COMPLETING
;	I/O REQUESTS.
;
; AUTHOR:
;
;	R.HEINEN 10-OCT-1977
;
; Revision history:
;
;	V03-002	ROW0077		Ralph O. Weber		27-MAR-1982
;		Change TTY$WRITEDONE to insure that eventhough UCB$W_TT_CURSOR 
;		can now be bigger than UCB$W_DEVBUFSIZ, i.e. eventhough our 
;		internal cursor position marker can virtually be beyond the 
;		right-hand edge of the screen, the cursor-position value 
;		returned in IOSB will never exceed the width of the screen.
;
;	V03-001	JLV0202		Jake VanNoy		23-MAR-1982
;		Change MODHANGUP from NOMOD to PRIV_TO_MOD in Set
;		Mode/Char logic.
;		Correct alternate class name lookup.
;
;	V02-045	RKS0045		RICK SPITZ		22-FEB-1982
;		Repair diagnostic function code logic.
;
;	V02-044	RKS0044		RICK SPITZ		16-FEB-1982
;		Enhance broadcast logic to allow delay prior to
;		forcing output. Move setting of controls pending
;		to STOP2 timeout. This way user ^s can be distinquished
;		from terminal xoff.
;		Save R3 prior to forking to create typeahead on read.
;
;	V02-043	RKS0043		RICK SPITZ		11-FEB-1982
;		Zero fork byte in TWP to allow DMA of broadcast.
;		Prevent XON characteristic from being permantly set.
;
;	V02-042	RKS0042		Rick Spitz		8-FEB-1982
;		Repair Alternate typeahead logic to allow setting
;		Permanent from users terminal.
;		Allocate typeahead buffer when starting read, if not already
;		done. This is needed for lines which are used for communications
;		on DMF-32 async lines.
;
;	V02-041	ROW0066		Ralph O. Weber		31-JAN-1982
;		Enhance alternate class driver setup to relocate address in 
;		alternate class driver vector table.  Correct use of 
;		unrelocateable .ASCID directive.
;
;	V02-040	RKS0040		RICK SPITZ		24-JAN-1982
;		USE INPUT VALUE FOR READ FIELD OFFSET.
;		ADD LOGIC TO BIND TO ALTERNATE DRIVER.
;
;	V02-039	RKS0039		RICK SPITZ		15-DEC-1981
;		FIX MAINTENANCE DISPATCH LOGIC.
;		DISALLOW SETTING ALT TYPEAHEAD IF ONE ALREAY EXISTS.
;		REMOVE LOGIO REQUIREMENT FOR PARITY ENABLE.
;		FIX WRTSTARTIO RETURN ADDRESSING.
;		ALLOW NOECHO READ TO NOT BLOCK WRITES.
;		ADD WRITE POST ROUTINE TO REPLACE INSPOST LOGIC, THIS
;		CORRECTS RACE CONDITION IN HALF DUPLEX WRITE COMPLETIONS.
;		ADD SUPPORT FOR ALTERNATE CLASS DRIVER.
;
;	V02-038	JLV0126		Jake VanNoy		1-Dec-1981
;		Add local echo logic and set speed privilege checking.
;
;	V02-037	JLV0102		Jake VanNoy		27-Oct-1981
;		Changed TTYDEFS to $TTYDEFS.
;
;	V02-036	JLV0070		Jake VanNoy			28-Aug-1981
;		Added UCB$L_TT_DEVDP1 checking and no refresh on broadcast.
;
;	V02-035	RKS035		RICK SPITZ			26-AUG-1981
;		ADD MAINT ENABLE BIT
;
;	V02-034	RKS034		RICK SPITZ			20-AUG-1981
;		ADD SUPPORT FOR ESCAPE MODIFIER ON READ.
;
;	V02-033	RKS033		RICK SPITZ			12-AUG-1981
;		RESET DMA ABORT STATE IN WRITE DONE LOGIC.
;		RESET CONTROLS STATE FOR MAINTENANCE FUNCTIONS.
;
;	V02-032	RKS032		RICK SPITZ			27-JULY-1981
;		SEVERAL ENHANCEMENTS HAVE BEEN ADDED TO SUPPORT REVISIONS
;		TO THE UCB STRUCTURE INCLUDING SPLIT SPEED, AND QUADWORD STATE
;		AND DEVDEPEND FIELDS.
;		SUPPORT FOR DIAGNOSTIC FUNCTIONS AND ENHANCED MODEM PROCESSING
;		HAS BEEN ADDED. SEVERAL CHANGES TO SUPPORT THE CLASS/PORT
;		STRUCTURE AS WELL AS ENHANCEMENTS TO ALLOW TERMINAL 
;		INITIATED CONTROL S AND Q DURING BROADCAST HAVE ALSO BEEN
;		ADDED.
;
;	V02-031	RKS031		RICK SPITZ			26-FEB-1981
;		REMOVE V2.0 AUDIT TRAILS
;

	.SBTTL	Declarations

;
; EXTERNAL SYMBOLS
;
	$ARBDEF				; DEFINE ACCESS RIGHTS BLOCK
;	$CADEF				; DEFINE CONDITIONAL ASSEMBLY PARAMETERS.
	$CRBDEF				; DEFINE CRB
	$DPTDEF				; DEFINE DPT OFFSETS
	$IODEF				; DEFINE I/O FUNCTION CODES
	$IPLDEF				; DEFINE IPL'S
	$IRPDEF				; DEFINE IRP
	$PRDEF				; DEFINE PROCESSOR REGISTERS
	$PRVDEF				; DEFINE PRIVILEGE MASK BITS
	$SSDEF				; Define system status codes
	$TTDEF				; DEFINE TERMINAL CHARACTERISTICS
	$TT2DEF				; DEFINE TERMINAL CHARACTERISTICS
	$TTYDEF				; DEFINE TERMINAL DRIVER SYMBOLS
	$UCBDEF				; DEFINE UCB
	$VECDEF				; DEFINE CRB VECTOR OFFSETS
	$TTYMACS			; DEFINE TERMINAL MACROS
	$TTYDEFS			; DEFINE TERMINAL DEFINITIONS
	$TTYMODEM			; DEFINE TERMINAL MODEM DEFINITIONS
 
	.PSECT	$$$115_DRIVER,LONG	; DEFINE NON-PAGED PSECT

	.SBTTL	TTY$STARTIO - START I/O OPERATION ON TERMINAL
;++
; TTY$STARTIO - START I/O OPERATION ON TERMINAL
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS ENTERED WHEN THE UNIT IS IDLE AND THERE IS A PACKET TO PROCESS.
;
; INPUTS:
;
;	I/O PACKET FORMATTED AS DESCRIBED IN TTYFDT.
;
;	R3 = I/O PACKET ADDRESS
;	R5 = UCB ADDRESS
;
; OUTPUTS:
;
;	NONE
;--
TTY$STARTIO::				; START TERMINAL I/O
	BSBW	TTY$LOCK		; SETUP IPL AND REGISTERS
	BICW3	#^C<IO$M_FCODE>,IRP$W_FUNC(R3),R4; GET INTERNAL FUNCTION CODE
	CASE	R4,TYPE=B,<DO_READ,DO_WRITE,DO_SETM,DO_SETC,DO_SETC>
;
; SET MODE OPERATION - 
;
DO_SETM:

;
; DO SET CHARACTERISTICS
;
DO_SETC:				; DO PRIVILEGED SET
;
; PROCESS HANGUP SUBFUNCTION - ACTUAL HANGUP OCCURS AT TIMER
;
	BBC	#IO$V_HANGUP,IRP$W_FUNC(R3),4$; BR IF NOT HANGUP FUNCTION
	MOVL	UCB$L_TT_PORT(R5),R0	; ADDRESS PORT VECTOR TABLE
	PUSHR	#^M<R3,R4,R5>		; SAVE REGISTERS
	JSB	@PORT_DISCONNECT(R0)	; DISCONNECT UNIT
	POPR	#^M<R3,R4,R5>		; RESTORE REGITERS
	CLRL	R1			; SET STATUS
	MOVZWL	#SS$_NORMAL,R0		;
	REQCOM
;
; CHECK MAINTENANCE FUNCTIONS
;
4$:
	BITW	#<IO$M_MAINT>,IRP$W_FUNC(R3)	; MAINT FUNCTION
	BEQL	5$			; NO
	BRW	DO_MAINT		; YES, PROCESS IT.

;
; CHECK FOR ALTERNATE DRIVER ENABLE
;
5$:
	BITW	#<IO$M_ENABL_ALT!IO$M_DSABL_ALT>,-
		IRP$W_FUNC(R3)		
	BEQL	6$			; NO
	BRW	DO_ALT			; YES, PROCESS IT.
	
;
; PROCESS CHANGE OF CHARACTERISTICS AND MODE
;
; CHANGE BASIC MODE BITS IN UCB$L_DEVDEPEND
;
6$:	XORL3	IRP$Q_TT_STATE(R3),UCB$L_DEVDEPEND(R5),R4; GET MODIFIED BITS
	BBCC	#TT$V_REMOTE,R4,8$	; DISALLOW CLEARING REMOTE BIT
	BICL	#TT$M_REMOTE,IRP$Q_TT_STATE(R3)
					; DISALLOW SETTING REMOTE BIT
8$:
	BICL	R4,UCB$L_DEVDEPEND(R5)	; CLEAR THE CHANGED BITS
	BISL	IRP$Q_TT_STATE(R3),UCB$L_DEVDEPEND(R5);
	MOVB	IRP$L_MEDIA+1(R3),UCB$B_DEVTYPE(R5); INSERT NEW TERMINAL TYPE
;
;	DEVDP1 BIT CHECKING
;
	MOVL	IRP$Q_TT_STATE+4(R3),R0	; GET SECOND DEVDEPEND WORD
	XORL3	R0,UCB$L_TT_DEVDP1(R5),R1 ; GET MODIFIED BITS

	NOSET	DMA			; DON'T ALLOW SETTTING DMA
	NOMOD	ALTYPEAHD		; DISALLOW CHANGING TYPE AHEAD
	
	BBS	#TT2$V_MODHANGUP,-
		UCB$L_TT_DEVDP1(R5),10$	; BRANCH IF MODIFY HANGUP ALLOWED

	PRIV_TO_MOD HANGUP		; REQUIRE PRIV TO MODIFY HANGUP
10$:	PRIV_TO_MOD SETSPEED		; REQUIRE PRIV TO MODIFY SET SPEED
	PRIV_TO_MOD MODHANGUP		; REQUIRE PRIV TO MODIFY MODHANGUP

	BBC	#TT2$V_XON,R0,15$	; BRANCH IF NO XON REQUESTED
	BICL	#TT2$M_XON,R0		; RESET XON BIT.
	MOVL	UCB$L_TT_PORT(R5),R1	; GET ADDRESS OF PORT VECTORS
	JSB	@PORT_RESUME(R1)	; CALL RESUME

15$:
	MOVL	R0,UCB$L_TT_DEVDP1(R5) ; SET SECOND DEVDEPENDENT WORD

;
; ENTER OR EXIT HOLDSCREEN - NOTE THAT FOR NON-VT5X TERMINALS THIS IS GARBAGE
;
	BBC	#TT$V_HOLDSCREEN,R4,25$	; BR IF HOLD SCREEN DID NOT CHANGE
	MOVAB	W^TTY$A_HLDSCREEN,UCB$L_TT_MULTI(R5); ASSUME ENTER HOLD SCREEN
	BBS	#TT$V_HOLDSCREEN,IRP$Q_TT_STATE(R3),20$; BR IF ENTERING
	MOVAB	W^TTY$A_RLSCREEN,UCB$L_TT_MULTI(R5); SET TO RELEASE SCREEN
20$:	SET_STATE MULTI			;
;
; SET UP WIDTH
;
25$:	MOVW	IRP$L_MEDIA+2(R3),UCB$W_DEVBUFSIZ(R5); INSERT NEW CARRIAGE WIDTH
;
; SET UP SPEED
;
	MOVZWL	IRP$W_TT_PRMPT(R3),R1	; GET NEW SPEED
	BEQL	30$			; IF EQL THEN NO CHANGE
;
; SET SPEED PRIVILEGE CHECK
;
	CMPB	R1,UCB$W_TT_SPEED(R5)	; IS LOW ORDER BYTE OF SPEED CHANGING?
	BEQL	28$			; BRANCH IF NOT

	BBC	#TT2$V_SETSPEED,-
		UCB$L_TT_DEVDP1(R5),28$	; BRANCH IF SET SPEED ALLOWED
	BITL	#<<1@PRV$V_LOG_IO>! -	; DOES PROCESS HAVE LOG_IO
		<1@PRV$V_PHY_IO>>, -	; OR PHY_IO PRIVILEGE?
		@IRP$L_ARB(R3)		; CHECK ACCESS RIGHTS BLOCK
	BNEQ	28$			; BRANCH IF PRIVILEGED
	BRW	NOPRIV_EXIT		; PRIV FAILURE

;
; PROCESS PARITY SETTINGS
;
28$:	MOVW	R1,UCB$W_TT_SPEED(R5); INSERT LINE SPEED
30$:	BBC	#TT$V_ALTRPAR,IRP$L_MEDIA(R3),35$; BR IF PARITY SHOULD NOT BE ALTERED
	BICB	#^C<TT$M_PARITY!TT$M_ODD>,IRP$L_MEDIA(R3); RESET BITS
	BICB	#TT$M_PARITY!TT$M_ODD,UCB$B_TT_PARITY(R5); CLEAR CURRENT PARITY
	BISB	IRP$L_MEDIA(R3),UCB$B_TT_PARITY(R5); INSERT NEW VALUE
;
; SET UP CHARACTER SIZE AND STOP BITS
;
35$:
	BBC	#TT$V_PARITY,-
		UCB$B_TT_PARITY(R5),40$	; IF NO PARITY, USE 8 BIT
	BBS	#TT$V_EIGHTBIT,-
		UCB$L_DEVDEPEND(R5),40$	; USE 8 BIT SIZE	
	BICB	#UCB$M_TT_LEN,UCB$B_TT_PARITY(R5)	; RESET CHARACTER FRAME
	BISB	#^X10,UCB$B_TT_PARITY(R5) 	; SET 7 BIT CHARACTER FRAME
	BRB	42$
40$:
	BISB	#UCB$M_TT_LEN,UCB$B_TT_PARITY(R5)	; SET 8 BIT CHARACTER FRAME
42$:
	CMPB	UCB$W_TT_SPEED(R5),#4		; SPEED <= 150 BAUD?
	BGTR	44$				; NO
	BISB	#UCB$M_TT_STOP,UCB$B_TT_PARITY(R5)	; FLAG 2 STOP BITS
	BRB	46$
44$:
	BICB	#UCB$M_TT_STOP,UCB$B_TT_PARITY(R5)	; FLAG 1 STOP BIT
;
; PROCESS FILL DATA
;
46$:
	CLRL	R0			; ASSUME NEW VALUE IS 0
	BBC	#TT$V_CRFILL,UCB$L_DEVDEPEND(R5),50$; CR FILL ON?
	MOVZBL	IRP$W_TT_PRMPT+2(R3),R0	; GET NEW VALUE
	BBS	#TT$V_CRFILL,R4,50$	; CHANGE?
	BEQL	60$			; IF NEQ EQL 0 THEN NO CHANGE
50$:	MOVB	R0,UCB$B_TT_CRFILL(R5)	; RESET VALUE
	BNEQ	60$			; IF NEQ THEN OK
	BBCC	#TT$V_CRFILL,UCB$L_DEVDEPEND(R5),60$; SET OFF
60$:	CLRL	R0			; ASSUME NEW VALUE IS 0
	BBC	#TT$V_LFFILL,UCB$L_DEVDEPEND(R5),65$; LF FILL ON?
	MOVZBL	IRP$W_TT_PRMPT+3(R3),R0	; GET NEW VALUE
	BBS	#TT$V_LFFILL,R4,65$	; CHANGE?
	BEQL	75$			; IF NEQ EQL 0 THEN NO CHANGE
65$:	MOVB	R0,UCB$B_TT_LFFILL(R5)	; RESET VALUE
	BNEQ	75$			; IF NEQ THEN OK
	BBCC	#TT$V_LFFILL,UCB$L_DEVDEPEND(R5),75$; SET OFF
;
; CHECK FOR CHANGE IN STATUS OF MODEM
;
75$:
	BBC	#TT$V_MODEM,R4,80$	; NO CHANGE IN MODEM STATUS
	PUSHR	#^M<R0,R1,R2,R3,R4>	; SAVE VOLITAL REGISTERS
	MOVZBL	#MODEM$C_INIT,R1	; ASSUME MODEM INIT
	BBS	#TT$V_MODEM,UCB$L_DEVDEPEND(R5),-
		77$			; IT IS INIT
	MOVZBL	#MODEM$C_SHUTDWN,R1	; NO, SHUT DOWN
77$:
	JSB	TRANSITION		; DECLARE MODEM TRANSITION
	POPR	#^M<R0,R1,R2,R3,R4>

;
; COPY OVER PASSALL AND NOECHO TO CURRENT STATE
;
80$:	BICB3	#^C<TT$M_PASSALL!TT$M_NOECHO>,UCB$L_DEVDEPEND(R5),R4
	INSV	R4,#TTY$V_ST_PASALL,#2,4(R2); INSERT IN STATE VECTOR
	EXTV	#TT$V_ESCAPE,#1,UCB$L_DEVDEPEND(R5),R4	; GET CURRENT SETTING
	INSV	R4,#TTY$V_ST_ESCAPE,#1,4(R2)		; UPDATE IN STATE
	
;
; INIT THE UNIT TO CHANGE THE SPEED AND PARITY
;
	MOVL	UCB$L_TT_PORT(R5),R4	; GET PORT VECTOR TABLE
	JSB	@PORT_SET_LINE(R4)	; INIT LINE SPEED AND PARITY
;
; IF MULTI IS SET THEN THE I/O MUST BE STARTED
;
100$:	IF_NOT_STATE MULTI,110$		; BR IF MULTI NO SET
	BSBW	TTY$STARTOUTPUT		; START THE MULTIPLE OUTPUT
;
; CHECK FOR SET CHARACTERISTICS AND RETURN IOSB DATA
;
110$:	MOVL	UCB$L_IRP(R5),R3	; GET CURRENT PACKET ADDRESS
	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,IRP$W_FUNC(R3),#TTY$C_FC_SETC; SET CHAR?
	BNEQ	120$			; IF NEQ THEN NO
	MOVL	UCB$W_TT_SPEED(R5),UCB$W_TT_DESPEE(R5); RESET PERM SPEED
	BBC	#TT2$V_AUTOBAUD,-
		UCB$L_TT_DEVDP1(R5),115$ ; BRANCH IF NOAUTOBAUD
	MOVZBW	#TT$C_BAUD_9600,-
		UCB$W_TT_DESPEE(R5)	; SET PERMANENT 9600 BAUD FOR AUTOBAUD
115$:	MOVB	UCB$B_TT_PARITY(R5),UCB$B_TT_DEPARI(R5); RESET PERM PARITY
	MOVL	UCB$B_DEVTYPE(R5),UCB$B_TT_DETYPE(R5); RESET TYPE AND WIDTH
	BICL3	#TT$M_REMOTE,UCB$L_DEVDEPEND(R5),UCB$L_TT_DECHAR(R5); RESET PERM CHARACTERISTICS
	MOVL	UCB$L_TT_DEVDP1(R5),UCB$L_TT_DECHA1(R5)	;UPDATE SECOND CHAR WORD

	BBC	#TT2$V_ALTYPEAHD,IRP$Q_TT_STATE+4(R3),120$; SKIP IF ALTERNATE
							 ; TYPEAHEAD NOT SPECIFIED
	BBSS	#TT2$V_ALTYPEAHD,UCB$L_TT_DECHA1(R5),120$ ; ONLY ALLOW SETTING
							 ; AS PERM CHARACTERISTIC
120$:

DO_EXIT:
	MOVL	UCB$W_TT_SPEED-2(R5),R0; RETURN SPEED
	BICL3	#^C<<UCB$M_TT_PARTY!UCB$M_TT_ODD>@16>,UCB$B_TT_PARITY-2(R5),R1;
	MOVW	UCB$B_TT_CRFILL(R5),R1	; INSERT FILL DATA
	MOVW	#SS$_NORMAL,R0		; SET STATUS
	REQCOM

NOPRIV_EXIT:
	MOVL	#SS$_NOPRIV,R0		; SET NO PRIV
	CLRL	R1			; CLEAR R1
	REQCOM				; COMPLETE REQUEST

;
; PROCESS MAINTENANCE FUNCTIONS
;
DO_MAINT:
	BBS	#TT$V_MODEM,-			; DISALLOW IF MODEM LINE
		UCB$L_DEVDEPEND(R5),30$
	MOVL	UCB$L_TT_PORT(R5),R4		; ACCESS PORT VECTOR
	BBS	#IO$V_SET_MODEM,-		; BRANCH IF SET MODEM FUNCTION
		IRP$W_FUNC(R3),20$
	EXTZV	#IO$V_LOOP,#<IO$V_LOOP_EXT-IO$V_LOOP+1>,-
		IRP$W_FUNC(R3),R0		; GET MAINT SUBMODIFIERS
	BISB	R0,UCB$B_TT_MAINT(R5)		; PASS TO PORT
	CLRL	R0				; ASSUME ERROR, FOR NULL POST ROUTINE
	JSB	@PORT_MAINT(R4)			; INVOKE PORT DRIVER TO DO FUNCTION
	BICB	#^C<UCB$M_TT_DSBL>,-		; RESET ALL BUT DISABLE
		UCB$B_TT_MAINT(R5)
	BLBC	R0,30$				; FAILURE
	MOVL	UCB$L_TT_PORT(R5),R0		; GET PORT VECTOR ADDRESS
	JSB	@PORT_RESUME(R0)		; RESET ANY CONTROLS STATE
	BRB	DO_EXIT				; SUCCESS
20$:						; PROCESS SET MODEM SIGNALS
	MOVZWL	IRP$L_MEDIA+2(R3),R2		; GET SET/RESET MODEM MASK
	BICB	#^C<TT$M_DS_DTR!-		; CLEAR ALL BUT MODEM OUTPUT
		TT$M_DS_SECTX!-			; BITS
		TT$M_DS_RTS>,R2
	PUSHL	R3				; SAVE VOLITAL REGISTER
	JSB	@PORT_DS_SET(R4)		; SET /RESET SPECIFIED SIGNALS
	POPL	R3				; RESTORE REGISTER
	BRW	DO_EXIT				; SUCCESS EXIT
30$:
	MOVW	#SS$_ABORT,R0			; ERROR EXIT 
	REQCOM

;
; PROCESS ALTERNATE CLASS DRIVER ENABLE/DISABLES
;
DO_ALT:
	BBS	#IO$V_ENABL_ALT,-		; BRANCH IF ENABLE
		IRP$W_FUNC(R3),10$
	CLRL	UCB$L_TT_ALTDRV(R5)		; RESET ALTERNATE DRIVER
	BRB	20$
						; ENABLE ALTERNATE DRIVER
10$:
	MOVAB	ALT_NAME,R1			; Setup pointer to name.
	BSBW	FIND_DRIVER			; Locate alternate driver.
	BLBC	R0, 25$				; Branch if none found.
	MOVZWL	DPT$W_VECTOR(R1), R0		; Get vector table offset.
	ADDL3	R0, R1, R2			; Compute actual address.
	MOVL	R2, UCB$L_TT_ALTDRV(R5)		; Save vetor table address.

						; RELOCATE VECTOR TABLE
15$:	TSTL	(R2)				; Reached end of table?
	BEQL	20$				; Branch if at the end.
	ADDL3	(R2), R1, R0			; Relocate this address.
	BLSS	17$				; Branch if relocation needed.
	SUBL	R1, R0				; Undo unneeded relocation.
17$:	MOVL	R0, (R2)+			; Store relocated address.
	BRB	15$				; Go do next entry.	

20$:	MOVZWL	#SS$_NORMAL,R0
22$:	REQCOM	

25$:	MOVZWL	#SS$_ABORT,R0
	BRB	22$

ALT_NAME:
	.ASCIC	/TTRDVFY/

;
; WRITE OPERATION
;
DO_WRITE:				;
;
; Control only comes here in the case of half duplex writes.  Full
; duplex writes use the TTY$WRTSTARTIO entry point.
;
	MOVL	IRP$L_SVAPTE(R3), R3	; Get addr of write block
	PUSHAB	TTY$STARTOUTPUT		; if write is started, control
					; will return to STARTOUTPUT
	BSBW	WRTSTARTIO		; if queued, control will return
	RSB				; here.  Return to caller.
;
; READ OPERATION
;
DO_READ:				; 
	BISL	IRP$Q_TT_STATE(R3),(R2)	; Set the read state bits.
	BISL	IRP$Q_TT_STATE+4(R3),4(R2)

	MOVL	IRP$W_TT_PRMPT(R3),-	; Save size of prompt string.
		UCB$W_BOFF(R5)		; and load initial read offset

	CLRL	IRP$L_MEDIA(R3)		; Set up storage for the read
					; terminator.
	BICW	#UCB$M_TT_NOTIF,-	; Set the "user has not been
		UCB$W_DEVSTS(R5)	; notified" bit.
	BBC	#IO$V_PURGE,-		; Branch forward if purge type-
		IRP$W_FUNC(R3),10$	; ahead not requested.
	BSBW	TTY$PURGE_AHEAD		; Otherwise, purge buffer.
					; the write completes.
10$:
	TSTL	UCB$L_TT_TYPAHD(R5)	; Type ahead buffer allocated?
	BEQL	30$			; Not yet

12$:	BSBW	TTY$SETUP_READ		; Set up the UCB for a read
					; operation.

;
; CHECK FOR LINE FEED NEEDED
;
;
	IF_STATE -			; Skip if passall, or
	<PASALL,NL,WRAP>,20$		; if already did line feed.

	IF_NOT_STATE NOECHO,15$		; Branch if echo
	BBC	#TT2$V_LOCALECHO,-	; Branch if not local echo
		UCB$L_TT_DEVDP1(R5),20$

15$:	TSTW	UCB$W_TT_CURSOR(R5)	; CURSOR AT 0?
	BNEQ	20$			; If no, send no line feed.
	CMPB	UCB$B_TT_LASTC(R5),-	; Was the last character also a
		#TTY$C_CR		; carriage return?
	BNEQ	20$			; No. Don't send free linefeed.
	SET_STATE <SENDLF,SKIPLF>	; SEND A LINE FEED FIRST

20$:
	BRW	TTY$STARTOUTPUT		; Go start the read.
30$:
	; Allocate typeahead buffer

	PUSHL	R3			; SAVE IRP ADDRESS
	CLRL	R3			; INDICATE NO DATA
	MOVL	#TTY$V_ST_GETAHD,R4	; ASK FOR TYPEAHD FORK
	BSBW	TTY$CRE_FORK		; GO ALLOCATE BUFFER
	POPL	R3			; RESTORE IRP ADDRESS
	BRB	12$			; CONTINUE PROCESSING


	.SBTTL	TTY$WRTSTARTIO - Starts or queues a write operation

;++
;
; Functional description:
;
;	If called from an FDT routine (or from EXE$BRDCST),
;	TTY$WRTSTARTIO first raises to device IPL, and then calls the
;	internal routine. All other code enters through the WRTSTARTIO
;	entry point.
;
;	If a write is occurring, the routine queues the write buffer.
;	If a read is occurring, but the buffer header specifies
;		write-breakthrough, the routine starts the write.
;	If a read is occurring, but no characters have been received
;		yet, the routine starts the write.
;	Otherwise, the routine queues the write buffer.
;
;	To start the write operation, the routine writes the address
;	of the buffer in UCB$L_TT_WRTBUF, sets and clears various
;	state bits, and returns.
;
;	To queue the buffer, the routine inserts the buffer address at
;	the end of the queue unless the header specfies write-
;	breakthrough. In the latter case, the buffer address is inserted
;	after the last write-breakthrough request in the queue.
;
;	Returning from WRTSTARTIO is odd. The routine assumes that 0(SP)
;	is the address to return to if the write is to start now.
;	If the routine instead queues the write, the routine pops this
;	start-write address of the stack, and returns to the real
;	caller.
;
; Inputs:
;
;	R3	- address of the write buffer
;	R5	- address of the UCB
;
; Implicit inputs:
;
;	The write buffer consists of a header, and an optional message
;	buffer. For broadcast messages, the message buffer is absent.
;	TTY$L_WB_FR3 is 0 for a normal broadcast and 1 for and ANSI
;	broadcast or one that specified norefresh.
;
; Outputs:
;
;	If the broadcast message is rejected, the TTY$L_WB_END field
;	of the write packet is zeroed.
;
;	R0	- preserved
;	R1	- scratch
;	R2	- address of UCB state bits
;	R3	- address of buffer
;	R4	- if packet is started, address of IRP or 0
;		- if packet is queued, scratch
;	R5	- address of UCB
;
; Implicit outputs:
;
;	Buffer may be entered in queue.
;
;	If write operation is started,
;	UCB$L_TT_WRTBUF	- address of buffer
;	UCB$Q_TT_STATE	- write bit, and other bits from IRP are set
;			  control-O may be canceled
;	UCB$L_DEVDEPEND	- mailbox may be enabled
;
;--

TTY$WRTSTARTIO::			; Start or queue write.
	TSTL	TTY$L_WB_IRP(R3)	; Is this a broadcast?
	BNEQ	10$			; No. Proceed.
	BITL	#TT$M_PASSALL!-		; Test for passall and/or
		TT$M_NOBRDCST,-		; nobroadcast modes set in the
		UCB$L_DEVDEPEND(R5)	; term's UCB (ignore NOECHO).
	BEQL	10$			; Continue if not set.
	CLRL	TTY$L_WB_END(R3)	; Zero end address to indicate
					; failure to EXE$BRDCST.
	RSB				; And return to EXE$BRDCST.

10$:					; Acceptable packet.
	BSBW	TTY$LOCK		; Raise to DIPL, get states.
	PUSHAB	TTY$STARTOUTPUT		; Set up return address to
					; start the output.
	BSBB	WRTSTARTIO		; Start or queue the packet.
	RSB				; If packet queued, control
					; returns here, so return to
					; caller.

WRTSTARTIO:				; Checks for start or queue.

;
; Inputs:
;
;	R2	- address of state bits longword
;	R3	- address of write packet
;	R5	- address of the device's UCB
;
;	0(SP)	- address to return if write is queued
;	4(SP)	- address to return to if write is started
;

	PUSHR	#^M<R0>			; Save a register.
	MOVAB	UCB$L_TT_WFLINK(R5),R0	; Get address of write queue.
	MOVL	TTY$L_WB_IRP(R3),R4	; Get address of IRP.
	IF_STATE -			; If writing is in progress,
		WRITE,QUEUE_PKT		; just queue the packet.
	TSTL	R4			; See if the packet has an IRP.
	BEQL	START_PKT		; If not, just start the packet.
	IF_NOT_STATE -			; If not in a read state,
		READ,START_PKT		; go ahead and start the packet.
	IF_STATE -			; If noecho read, no blocking
		NOECHO,START_PKT	; so start the write
	ASSUME TTY$L_RB_NXT EQ 0	; NXT is 1st field in read block.
	SUBL3	UCB$L_SVAPTE(R5), -	; Get offset from start of read
		@UCB$L_SVAPTE(R5), -	; block to next character to be
		R1			; echoed.
	CMPL	#TTY$L_RB_DATA,R1	; If no chars have been echoed,
	BEQL	START_PKT		; go start the packet.
	BRB	QUEUE_LAST		; Otherwise, queue packet at end
					; of queue.

QUEUE_PKT:
	TSTL	R4			; If an IRP is associated,
	BNEQ	QUEUE_LAST		; queue packet at end of queue.
	BBC	#TTY$V_ST_CTRLS,(R2),5$	; Output stopped?
	SET_STATE -			; If stopped, set
		<BRDP>			; BRDP to prevent any race
	MOVL	UCB$L_TT_PORT(R5),R1	; Access port vector
	JSB	@PORT_STOP2(R1)		; Continue any stopped port output
5$:
	SET_STATE -
		BRDP			; Signal braodcast pending
	MOVL	R0,R4			; Make a copy of queue head.

10$:
	MOVL	TTY$L_WB_FLINK(R4),R1	; Get first queue entry.
	CMPL	R1,R0			; See if at end of queue.
	BEQL	QUEUE_LAST		; If yes, put at end of queue.
	TSTL	TTY$L_WB_IRP(R1)	; Else, see if this entry has an
					; associated IRP.
	BNEQ	INSERT_PKT		; If yes, branch to insert
					; packet before it.
	MOVL	R1,R4			; Otherwise, go on to next
	BRB	10$			; entry in queue.

QUEUE_LAST:				; Queue at end of queue.
	MOVL	TTY$L_WB_BLINK(R0),R4	; Get back pointer.

INSERT_PKT:
	INSQUE	TTY$L_WB_FLINK(R3),-	; Insert new packet in the
		TTY$L_WB_FLINK(R4)	; queue.
	POPR	#^M<R0>			; Remove saved register and
	MOVL	(SP),R1			; get queued address
	ADDL	#8,SP			; clean stack
	JMP	(R1)			; return to queued address

START_PKT:				; Start the packet.
	MOVL	R3,UCB$L_TT_WRTBUF(R5)	; Point to packet from UCB.
	SET_STATE -			; Set the write state.
		WRITE
	TSTL	R4			; If this write does not have an
	BEQL	20$			; IRP, don't check IRP fields.
	BISL	IRP$Q_TT_STATE(R4),(R2)	; Set write state bits.
	BISL	IRP$Q_TT_STATE+4(R4),4(R2)	; Set write state bits.
	CLRL	IRP$L_MEDIA(R4)		; Set up IRP for completion.
	BBC	#IO$V_ENABLMBX,-	; Branch if enable-mailbox
		IRP$W_FUNC(R4),10$	; is not requested.
	BBCC	#TT$V_MBXDSABL,-	; Otherwise, clear the mailbox
		UCB$L_DEVDEPEND(R5),10$	; disabled bit.

10$:
	BBC	#IO$V_CANCTRLO,-	; Branch if cancel control-O
		IRP$W_FUNC(R4),30$	; is not requested.
	CLR_STATE -			; Clear control-O state.
		CTRLO
	BRB	30$			; And start the output.

;
; Start a broadcast packet.
;

20$:
	BBC	#TTY$V_ST_CTRLS,(R2),25$; Output stopped?
	SET_STATE -			; If CTRL-S was active, set
		<BRDP>			; BRDP to prevent race.
	MOVL	UCB$L_TT_PORT(R5),R1	; Access port vector
	JSB	@PORT_STOP2(R1)		; Continue any port output
25$:
	SET_STATE -			; Turn on broadcast, 
		<BRDCST,BRDP>		; broadcast and broadcast pending.
	CLRB	TTY$B_WB_FIPL(R3)	; Indicate block free to fork (for DMA)
	BLBC	TTY$L_WB_FR3(R3),27$	; Branch if ANSI broadcast or norefresh
	SET_STATE -
		<REFRSH>		; Set refresh read

27$:	BBC	#TT$V_HOLDSCREEN,-	; If not in holdscreen mode,
		UCB$L_DEVDEPEND(R5),30$	; branch.
	MOVAB	W^TTY$A_RLSCREEN,-	; Set up multiecho sequence
		UCB$L_TT_MULTI(R5)	; to release the screen.
					; (this cancels control-O too).
	SET_STATE -			; Set to multiecho state.
		MULTI

30$:					; Go output buffer.
	POPR	#^M<R0,R1>		; Restore saved register 
					; and queued address.
	RSB				; And return to caller.

	.SBTTL	TTY$STARTOUTPUT - START OUTPUT OPERATION ON UNIT

;++
; TTY$STARTOUTPUT - START OUTPUT ON UNIT
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS USED TO INITIATE OUTPUT ON A UNIT. THIS OPERATION STARTS
; THE FLOW OF DATA EVEN IN THE CASE OF READS. THE ACTION IS TO TEST THE
; STATE OF INTERRUPT EXPECTED. IF AN INTERRUPT IS EXPECTED, THEN NOTHING NEED BE DONE
; BECAUSE A SUBSEQUENT INTERRUPT WILL CONTINUE APPROP. WITH THE CURRENT STATE.
; IF NO INTERRUPT IS EXPECTED, THEN THE TTY$GETNEXTCHAR ROUTINE IS ENTERED TO RETURN
; THE NEXT CHARACTER(S) FOR THE UNIT. THEN IF AVAILABLE THE PORT DRIVER
; STARTIO ROUTINE IS ENTERED. 
; THIS OPERATION IS IDENTICAL TO THE OPERATION OF AN OUTPUT READY INTERRUPT.
;
; INPUTS:
;
;	R2 = ADDRESS OF THE UNIT STATE VECTOR
;	R5 = UCB ADDRESS
;
; OUTPUTS:
;
;	NONE
;--
TTY$STARTOUTPUT::			; START OUTPUT
	BBS	#UCB$V_INT,UCB$W_STS(R5),100$; LEAVE HERE IF INTERRUPT EXPECTED
	MOVL	UCB$L_TT_PORT(R5),R0	; GET THE PORT VECTOR TABLE ADDRESS
	BSBW	TTY$GETNEXTCHAR		; GET NEXT CHARACTER FOR UNIT
	BEQL	100$			; LEAVE IF NOTHING TO OUTPUT
	JMP	@PORT_STARTIO(R0)	; START OUTPUT ON LINE
100$:	RSB				; RETURN

	.SBTTL	TTY$READONE - READ OPERATION DONE
;++
; TTY$READONE - READ I/O OPERATION DONE
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS ENTERED TO COMPLETE THE CURRENT READ OPERATION.
; THE ACTION IS TO RESET THE STATE OF THE UNIT TO REFLECT THE CHANGE AND TO
; FORK ON THE IRP TO COMPLETE THE PROCESSING.
;
; INPUTS:
;
;	R2 = ADDRESS OF THE UNIT STATE VECTOR
;	R5 = UCB ADDRESS
;
;		UCB$W_BOFF = STATUS WORD
;		UCB$W_BCNT = COUNT OF TRANSFER
;
;	IRP$L_MEDIA(CURRENT PACKET) = TERMINATOR AND TERMINATOR SIZE
;
; OUTPUTS:
;
;
;	NONE
;--
TTY$READONE::				; READ I/O DONE
	BBC	#TT$V_READSYNC,UCB$L_DEVDEPEND(R5),10$; BR IF NOT READSYNC
	MOVL	UCB$L_TT_PORT(R5),R1	; ACCESS PORT VECTOR
	JSB	@PORT_XOFF(R1)		; SEND XOFF
10$:	BICW	#UCB$M_TT_TIMO,UCB$W_DEVSTS(R5); CLEAR TIMEOUT ENABLED
;
; SET UP ERRORS ON ESCAPE SEQUENCES
;
	IF_NOT_STATE ESC,15$		; IF NOT ESCAPE THEN BR
	MOVW	#SS$_PARTESCAPE,UCB$W_BOFF(R5); ASSUME PARTIAL ESCAPE SEQUENCE
15$:	IF_NOT_STATE BADESC,20$		; ESCAPE SYNTAX CORRECT?
	MOVW	#SS$_BADESCAPE,UCB$W_BOFF(R5); SET STATUS FOR IMPROPER ESCAPE SEQ
;
; RESET PASSALL AND NOECHO IF MODES
;
20$:

	.IF DF	CA$_MEASURE_IOT

	BLBC	G^PMS$GL_DOSTATS,25$	; IF FLAG SET, BYPASS STATISTICS CODE
	BBC	#TT$V_PASSALL,UCB$L_DEVDEPEND(R5),25$; BR IF NOT PASSALL
	INCL	G^PMS$GL_PASSALL	; INCREMENT PASSALL COUNT

	.ENDC

25$:	BICB3	#^C<TT$M_PASSALL!TT$M_NOECHO>,UCB$L_DEVDEPEND(R5),R4;
	INSV	R4,#TTY$V_ST_PASALL,#2,4(R2)		; RESET PASSALL AND NOECHO
	EXTV	#TT$V_ESCAPE,#1,UCB$L_DEVDEPEND(R5),R4	; GET CURRENT SETTING
	INSV	R4,#TTY$V_ST_ESCAPE,#1,4(R2)		; UPDATE IN STATE

	CLR_STATE -			; Clear state bits relevant to
		<READ,DEL,EOL,-		; a read (this does not include
		PROMPT,CTRLR,NOFLTR,-	; the write bits).
		ESC,ESC_O,BADESC,-
		REFRSH>
	MOVL	UCB$L_IRP(R5),R3	; ADDRESS CURRENT PACKET
	MOVZWL	IRP$W_TT_PRMPT(R3),@UCB$L_SVAPTE(R5); INSERT DATA ADDRESS
	ADDL	UCB$L_SVAPTE(R5),@UCB$L_SVAPTE(R5);
	MOVL	IRP$L_PID(R3),IRP$L_TT_TERM(R3); SAVE DATA FOR FORK BLOCK
	MOVB	IRP$B_RMOD(R3),IRP$W_TT_PRMPT(R3);
	MOVB	UCB$B_FIPL(R5),IRP$B_RMOD(R3); SET FORK IPL
	MOVL	UCB$W_BOFF(R5),IRP$W_BOFF(R3); SAVE TRANSFER SIZE AND STATUS
	PUSHR	#^M<R2,R5>		;
	MOVL	R3,R5			; SET UP FORK BLOCK ADDRESS
	MOVQ	IRP$L_AST(R3),R3	; GET PARAMS FOR FORK
	PUSHAB	B^TTY$GETNXTWRITE	; FORCE RETURN TO RESTORE UCB ADDRESS
	FORK				; CREATE FORK PROCESS
;
; I/O DONE FORK PROCESS
;
	MOVL	R5,R3			; RESTORE PACKET AND UCB ADDRESSES

	.IF DF	CA$_MEASURE_IOT
;
;ACCUMULATE STATISTICS ON NUMBER OF CHARACTERS AND I/OS TO TERMINALS.
;
	BSBW	TTSTATS			; CALL STATISTICS ROUTINE.

	.ENDC

	MOVL	IRP$L_UCB(R3),R5	;
	MOVL	IRP$W_BOFF(R3),R0	; GET STATUS AND TRANSFER SIZE
	ADDW	IRP$L_MEDIA+2(R3),IRP$W_BCNT(R3) ; CALC TOTAL TRANSFER SIZE
	MOVL	IRP$L_MEDIA(R3),R1	; SET TERMINATOR DATA
	MOVL	IRP$L_TT_TERM(R3),IRP$L_PID(R3); RETURN IRP DATA
	MOVB	IRP$W_TT_PRMPT(R3),IRP$B_RMOD(R3);
	MOVL	IRP$L_SVAPTE(R3),R4	; GET ADDRESS OF THE BUFFER BLOCK
	MOVW	TTY$W_RB_SIZE(R4),IRP$W_BOFF(R3); MAKE IT QUOTA
	REQCOM				; COMPLETE REQUEST

	.SBTTL	TTY$GETNXTWRITE - Start next write or restart read

;++
;
; Functional description:
;
;	This routine gains control at device IPL on return from the
;	VMS fork queuing routine. The routine tries to restart a
;	suspended but now active read, or to dequeue and start the
;	next write request vis WRTSTARTIO.
;
;	The routine always returns to the caller of TTY$WRITEDONE,
;	TTY$READONE, or BRDCST in TTYCHARO. This caller is usually
;	GETNEXTCHAR, so setting states causes the driver to go on
;	echoing and outputting.
;
; Inputs:
;
;	0(SP)	- address of the UCB state vector
;	4(SP)	- address of the UCB
;
; Outputs:
;
;	R2	- address of the UCB state vector
;	R3	- address of a write buffer if writing is to begin
;	R5	- address of the UCB
;
;	The 2 named inputs are removed from the stack.
;
;--

TTY$GETNXTWRITE::			; Check for a new write.
	POPR	#^M<R2,R5>		; Restore UCB state address and
					; UCB address.
	IF_STATE -			; If currently broadcasting,
		BRDCST,30$		; don't dequeue anything.
	IF_NOT_STATE -			; If not in a read state, just
		READ,10$		; branch forward.
	IF_STATE -			; If noecho, don't block writes
		NOECHO,10$
	TSTW	UCB$W_BCNT(R5)		; Otherwise, see if any input
					; has been received.
	BNEQ	20$			; If yes, go restart read.

10$:					; Otherwise, look for a write.
	REMQUE	@UCB$L_TT_WFLINK(R5),R3	; Get a new write buffer.
	BVS	20$			; Branch if no buffers exist.
	PUSHAB	30$			; Save a write start return
					; address.
	BSBW	WRTSTARTIO		; Start the write.
	RSB				; Return to GETNEXTCHAR.

20$:
	BSBW	TTY$RESTARTIO		; Restart the read, if any.

30$:					; Joint read/write return.
	RSB				; Return.

	.SBTTL	TTY$WRITEDONE - Complete a write operation

;++
; TTY$WRITEDONE - WRITE OPERATION DONE
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine creates a fork process to complete the write, and
;	checks for another write packet to start up.
;
; INPUTS:
;
;	R2 = ADDRESS OF THE UNIT STATE VECTOR
;	R5 = UCB ADDRESS
;
;	TTY$W_WB_STATUS	- status of operation
;	TTY$W_WB_BCNT	- number of bytes transferred
;
; OUTPUTS:
;
;	R2,R5 ARE PRESERVED.

;--

TTY$WRITEDONE::				; Complete write operation.

;
; This routine used to start by clearing a whole raft of state bits.
; I only turn off write-related bits, and I do that in TTY$GETNXTWRITE.
; The bits I no longer modify are:
;
;	READ, DEL, XON, EOL, PROMPT, CTRLR, NOFLTR, ESC, ESC_O, and
;	BADESC
;


	PUSHR	#^M<R2,R5>		; Save state and UCB address.
	MOVL	UCB$L_TT_WRTBUF(R5),R3	; Get address of write buffer.
	IF_STATE DMA,5$			; IF DMA ACTIVE, DON'T DEALLOCATE
	TSTB	TTY$B_WB_FIPL(R3)	; TWP IN USE BY FORK?
	BEQL	10$			; NO, OK TO COMPLETE
5$:
	BRW	TTY$GETNXTWRITE		; PROCESS NEXT REQUEST

10$:
	CLR_STATE -			; Clear the write bits.
		<WRITE,WRTALL,DMAABO>
	PUSHAB	TTY$GETNXTWRITE		; Return address after queuing fork

WRITEPOST:

	MOVB	UCB$B_FIPL(R5),-	; Set up fork IPL in the buffer
		TTY$B_WB_FIPL(R3)	; block.
	MOVL	TTY$L_WB_IRP(R3),R4	; Get address of associated IRP.
	PUSHL	R5			; Save ucb address
	MOVL	R3,R5			; Setup fork block address.
	POPL	R3			; Get ucb address in R3
	FORK				; Create a fork process.

;
; This is the write completion fork process. Registers are as follows:
;
;	R3	- address of UCB
;	R4	- address of IRP
;	R5	- address of write buffer
;

	MOVL	R4,R3			; Need IRP in R3 for I/O post.

	.IF DF	CA$_MEASURE_IOT
;
;ACCUMULATE STATISTICS ON NUMBER OF CHARACTERS AND I/OS TO TERMINALS.
;
	BSBB	TTSTATS			; CALL STATISTICS ROUTINE.

	.ENDC

	MOVL	R5,R4			; Put buffer address in R4.
	MOVL	IRP$L_UCB(R3),R5	; Regain UCB address.
;
; NOTE: IRP$L_MEDIA = IRP$L_IOST1
; NOTE: terminal position is 0-based; interface position is 1-based
;
	MOVW	IRP$L_MEDIA(R3),-	; number of lines output for the
		IRP$L_IOST2(R3)		; write QIO
	MOVL	TTY$W_WB_STATUS(R4),-	; move status and count of bytes
		IRP$L_IOST1(R3)		; transferred into IOSB
	CMPW	UCB$W_TT_CURSOR(R5),-	; Is cursor marker beyond the right-
		UCB$W_DEVBUFSIZ(R5)	; hand edge of screen?
	BGEQU	12$			; Branch if cursor has gone too far.
	ADDW3	UCB$W_TT_CURSOR(R5),-	; Else return cursor column position, 
		#1,IRP$L_IOST2+2(R3)	; adjusted for zero offset, in IOSB.
	BRB	14$			; Continue building IOSB.
12$:	MOVW	UCB$W_DEVBUFSIZ(R5),-	; If necessary, return cursor column
		IRP$L_IOST2+2(R3)	; position in IOSB as right-hand edge.
14$:	ADDB3	UCB$B_TT_LINE(R5),-	; move line position into IOSB
		#1,IRP$L_IOST2+3(R3)	;
	MOVW	TTY$W_WB_SIZE(R4),-	; Move size of buffer into IRP
		IRP$W_BOFF(R3)		; to record quota used.
	BBS	#TT$V_HALFDUP, -	; Branch if half duplex write.
		UCB$L_DEVDEPEND(R5),30$	;
20$:	JMP	G^COM$POST		; Full duplex: complete write
30$:					; Half duplex:
	CMPL	R3,UCB$L_IRP(R5)	; Is this the current write in
					; the half-duplex queue?
	BNEQ	20$			; Branch if no.
	MOVQ	IRP$L_MEDIA(R3),R0	; Load IOST1 and IOST2 in R0,R1
	REQCOM				; Complete request and get next
					; entry in system queue.
	.PAGE
	.SBTTL	TTY$WRITEPOST - QUEUE A WRITE COMPLETION

;++
; TTY$WRITEPOST - QUEUE A WRITE COMPLETION
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE FORKS ON A TWP TO COMPLETE A QUEUED WRITE OPERATION
;	BOTH HALF AND FULL DUPLEX.
;
; INPUTS:
;
;	R4 = TWP ADDRESS
;	R5 = UCB ADDRESS
;
;	UCB$W_BOFF - STATUS OF OPERATION
;
; OUTPUTS:
;
;	R0,R1,R2,R3,R5 ARE PRESERVED
;--

TTY$WRITEPOST::

	PUSHR	#^M<R3,R5>		; SAVE REGISTERS
	MOVL	R4,R3			; TWP ADDRESS
	CLRW	TTY$W_WB_BCNT(R3)	; NONE TRANSFERED
	MOVW	UCB$W_BOFF(R5),-	; SAVE COMPLETION STATUS
		TTY$W_WB_STATUS(R3)
	JSB	WRITEPOST		; QUE THE FORK
	POPR	#^M<R3,R5>
	RSB




	.IF DF	CA$_MEASURE_IOT
;
;	Subroutine to accumulate statistics on the number of
;	the number of characters read and written to terminals
;
TTSTATS:BLBC	G^PMS$GL_DOSTATS,40$	; IF FLAG SET, BYPASS STATISTICS CODE
	MOVZWL	IRP$W_BCNT(R3),R1	; GET # CHARACTERS TRANSFERRED.
	DIVL3	#5,R1,R0		; STATISTICS ARE KEPT IN INCREMENTS
					;      OF 5 CHARACTERS.
	CMPL	#9,R0			; LAST ENTRY IN TABLE IS FOR I/OS
					;     OF >= 45 CHARACTERS.
	BGEQ	10$
	MOVL	#9,R0
10$:	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,IRP$W_FUNC(R3),#TTY$C_FC_READ
					; CHECK IF JUST FINISHED A READ OR WRITE.
	BNEQ	20$			; BRANCH FOR WRITE
;
; COMPILE STATISTICS FOR READ
;
	INCL	G^PMS$AL_READTBL[R0]	; INCREMENT APPROPRIATE RANGE.
	INCL	G^PMS$GL_TREADS		; INCREMENT READ COUNT
	ADDL2	R1,G^PMS$GL_READCNT	; INCREMENT TOTAL COUNT FOR CHARACTERS
	BRB	40$
;
; COMPILE STATISTICS FOR WRITE
;
20$:	INCL	G^PMS$AL_WRITETBL[R0]	; INCREMENT APPROPRIATE RANGE.
	INCL	G^PMS$GL_TWRITES	; INCREMENT WRITE COUNT
	ADDL2	R1,G^PMS$GL_WRTCNT	; INCREMENT TOTAL COUNT FOR CHARACTERS
					;      WRITTEN.
40$:	RSB				; RETURN TO CALLER.

	.ENDC

	.SBTTL	End of module

	.END
