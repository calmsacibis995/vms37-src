;
;	Version 'V03-012'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Revision history:
;
;	V03-012	RKS0012		RICK SPITZ		05-APR-1982
;		CONVERT SPARE BYTE INTO  CURRENT OUTPUT ESCAPE RULE
;
;	V03-011	RKS0011		RICK SPITZ		11-JAN-1981
;		ADD EXTENSION REGION FOR READ BUFFER HEADER
;
;	V03-010	RKS0010		RICK SPITZ		15-DEC-1981
;		ADD NEW CONTROL DEFINITION FOR CHARACTER TYPE TABLE.
;		MOVE LOWER CASE DEFINITION BIT FOR TYPE TABLE.
;		ADD ALTERNATE DRIVER LOCATION IN UCB.
;		ADD MAP,ALTLEN,SPARE IN UCB.
;		MOVE LINE DISABLE BIT IN MAINT FIELD.
;		ADD IDB FIELD DEFINITION FOR DZ32.
;
;	V03-009	BLS0116		Benn Schreiber		 2-Dec-1981
;		Correct IF_NOT_STATE macro
;
;	V03-008 JLV0125		Jake VanNoy		28-Oct-1981
; 		Add NOSET, NOCLEAR, NOMOD, PRIV_TO_MOD to $TTYMACS.
;		Also, add one bit checking to IF_STATE and IF_NOT_STATE.
;
;	V03-007 JLV0103		Jake VanNoy		28-Oct-1981
;		Changed TTYDEFS to $TTYDEFS. Move $TTYDEF from SYSDEF
;		to this module. 
;
;	V03-006	PHL0020		Peter H. Lipman		27-Oct-1981
;		Moved TT_DEVDP1 to fixed portion of UCB.  It is a
;		synonym for the new DEVDEPND2 cell.
;
;	V03-005	JLV0089		Jake VanNoy		9-Sep-1981
;		Added AUTOP, autobaud pending timout.
;
;	V03-004	RKS004		RICK SPITZ		26-AUG-1981
;		MOVE RDUE EARLIER IN UCB TO ALLOW EASIER EXTENSION OF UCB
;
;	V03-003	RKS0003		RICK SPITZ		20-AUG-1981
;		ADD NEW STATE BIT DEFINITIONS
;		ADD OUT OF BAND SUMMARY MASK AND QUE HEAD.
;
;	V03-002	RKS0002		Rick Spitz		27-JULY-1981
;		Restructure device dependent portion of UCB and
;		add new UCB fields for modem control,split speed
;		and output optimizations
;		Redefine IF_STATE,GTSBITS Macros to allow quadword
;		state field.
;		Add modem definitions for DEC052 modem control
;
;	V03-001	RKS0001		RICK SPITZ		13-NOV-1980
;		Revise Ucb extensions for terminal driver
;
;
;--

;
; TERMINAL DRIVER MACROS
;

; THESE MACROS ARE USED  TO GENERATE CODE FOR IF_STATE MACROS.
; THEY GENERATE A SEQUENCE OF ONE OR TWO BIT(?) / BRANCH
; OR BIS(?) INSTRUCTION  COMBINATIONS DEPENDING ON THE SEPERATION OF THE 
; BITS BEING TESTED IN THE STATE QUADWORD.

	.MACRO	$TTYMACS

	.MACRO	GTSBITS	BITS,MODE,TARGET,BRANCH,?L1
	F=0
	Z0=3
	X0=0
	W0=0
	Z1=3
	X1=0
	W1=0
	.IRP	Y,<BITS>
	T=TTY$V_SX_'Y
	.IF	LE	32-T
	X1=T-32@-3
	.IF	LT	X1-Z1
	Z1=X1
	.ENDC
	W1=<TTY$M_ST_'Y>!W1
	.ENDC
	.IF	GT	32-T
	X0=T@-3
	.IF	LT	X0-Z0
	Z0=X0
	.ENDC
	W0=<TTY$M_ST_'Y>!W0
	.ENDC
	.ENDR
	.IF	NE	W0
	GTSBITS1 	Z0,W0,MODE,0
	.IF	NB	TARGET
	.IF	IDN	BRANCH,BEQL
	.IF	NE	W1
	F=1
	BNEQ	L1
	.IFF
	BEQL	TARGET
	.ENDC
	.ENDC
	.IF	DIF	BRANCH,BEQL
	BNEQ	TARGET
	.ENDC
	.ENDC
	.ENDC
	.IF	NE	W1
	GTSBITS1	Z1,W1,MODE,4
	.IF	NB	TARGET
	BRANCH	TARGET
	.ENDC
	.ENDC
	.IF	NE	F
L1:
	.ENDC
	.ENDM	GTSBITS


	.MACRO	GTSBITS1	Z,WX,MODE,BIAS
	WX=WX@-<Z*8>
	X=WX@-8
	.IF	EQ	X
	BI'MODE'B	#WX,BIAS+Z(R2)
	.IFF
	X=WX@-16
	.IF	EQ	X
	BI'MODE'W	#WX,BIAS+Z(R2)
	.IFF
	BI'MODE'L	#WX,BIAS+Z(R2)
	.ENDC
	.ENDC
	.ENDM	GTSBITS1

	.MACRO	SET_STATE	NAME
	GTSBITS	<NAME>,S
	.ENDM	SET_STATE

	.MACRO	CLR_STATE	NAME
	GTSBITS	<NAME>,C
	.ENDM	CLR_STATE

	.MACRO	IF_STATE	NAME,TARGET
	CNT = 0
	.IRP	Y,<NAME>
	CNT = CNT + 1
	.ENDR

	.IF EQUAL CNT - 1
	ONE_BIT	<NAME>,S,TARGET
	.IFF
	GTSBITS <NAME>,T,TARGET,BNEQ
	.ENDC
	.ENDM	IF_STATE


	.MACRO	IF_NOT_STATE	NAME,TARGET
	CNT = 0
	.IRP	Y,<NAME>
	CNT = CNT + 1
	.ENDR

	.IF EQUAL CNT - 1
	ONE_BIT	<NAME>,C,TARGET
	.IFF
	GTSBITS <NAME>,T,TARGET,BEQL
	.ENDC
	.ENDM	IF_NOT_STATE


	.MACRO	ONE_BIT	BIT,BRANCH,TARGET
	BB'BRANCH'	#TTY$V_SX_'BIT',(R2),'TARGET'
	.ENDM	ONE_BIT

;
; Bit checking for setmode/char changes to DEVDEPND2. Assumes
; R0 = input, R1 = Bits changing, R3 = IRP, R5 = UCB.
; 

	.MACRO	NOSET	BIT,?L1
	BBC	#TT2$V_'BIT',R1,L1
	BICL	#TT2$M_'BIT',R0
L1:
	.ENDM	NOSET

	.MACRO	NOCLEAR	BIT,?L1
	BBC	#TT2$V_'BIT',R1,L1
	BISL	#TT2$M_'BIT',R0
L1:
	.ENDM	NOCLEAR

	.MACRO	NOMOD	BIT,?L1
	BBC	#TT2$V_'BIT',R1,L1
	XORL2	#TT2$M_'BIT',R0
L1:
	.ENDM	NOMOD

	.MACRO	PRIV_TO_MOD	BIT,ERROR = NOPRIV_EXIT,?L1
	BBC	#TT2$V_'BIT',R1,L1
	BITL	#<<1@PRV$V_LOG_IO>!-
		<1@PRV$V_PHY_IO>>,-
		@IRP$L_ARB(R3)
	BNEQ	L1		
	BRW	'ERROR'
L1:
	.ENDM	PRIV_TO_MOD

	.MACRO	$TTYMACS
	.ENDM	$TTYMACS

	.ENDM	$TTYMACS

;
; TERMINAL DRIVER DEFINITIONS
;

	.MACRO	$TTYDEFS $GBL

	$UCBDEF
	$DEFINI	TTYDEFS,$GBL


; THESE DEFINITIONS DEFINE THE DEVICE DEPENDENT EXTENSIONS OF THE UCB.
; CERTAIN PORTIONS OF THE UCB ARE ASSUMED TO BE CONTIGUOUS AND MUST NOT
; BE SPLIT. THESE AREAS ARE DOCUMENTED IN THE FOLLOWING DEFINITIONS.

			.BLKB	UCB$C_LENGTH

					; SKIP STANDARD UCB INFORMATION

$DEF	UCB$Q_TT_STATE		 	; CURRENT UNIT STATE VECTOR
			.BLKQ	1
$DEF	UCB$L_TT_MULTI		 	; CURRENT MULTIECHO BUFFER ADDRESS
			.BLKL	1

; READ TIMEOUT CONTROL


$DEF	UCB$L_TT_RDUE		 	; ABSTIME WHEN READ TIMEOUT DUE
			.BLKL	1
$DEF	UCB$L_TT_RTIMOU		 	; ADDRESS OF READ TIMEOUT ROUTINE
			.BLKL	1	; (CALLED BY SYSTEM TIMER SERVICE)

; OUT OF BAND HANDLING


$DEF	UCB$L_TT_CTRLY		 	; CONTROL Y AST BLOCK LIST HEAD
			.BLKL	1
$DEF	UCB$L_TT_CTRLC		 	; CONTROL C AST BLOCK LIST HEAD
			.BLKL	1
$DEF	UCB$L_TT_OUTBAND		; OUT OF BAND CHARACTER MASK
			.BLKL	1
$DEF	UCB$L_TT_BANDQUE		; OUT OF BAND AST QUEUE
			.BLKL	1

; TYPE AHEAD CONTROL


$DEF	UCB$L_TT_TYPAHD		 	; TYPEAHEAD BUFFER ADDRESS
			.BLKL	1
$DEF	UCB$W_TT_INAHD		 	; NUMBER OF CHARACTERS IN TYPEAHEAD
			.BLKW	1

; PORT SPECIFIC OUTPUT CONTROL


$DEF	UCB$W_TT_HOLD		 	; UNIT HOLDING TANK AND PORT DISPATCH
			.BLKW	1
	$VIELD	TTY,0,<-
		<TANK_CHAR,8,M>-	; CHARACTER
		<TANK_XOFF,1,M>-	; SEND XOFF
		<TANK_XON,1,M>-		; SEND XON
		<TANK_STOP,1,M>-	; STOP OUTPUT
		<TANK_STOP2,1,M>-	; ALTERNATE STOP
		<TANK_HOLD,1,M>-	; CHAR IN TANK
		<TANK_BURST,1,M>-	; BURST ACTIVE
		>


; CURRENT CURSOR AND LINE POSITION FOR FORMATTED OPERATIONS


$DEF	UCB$W_TT_CURSOR			; CURRENT CURSOR POSITION
			.BLKW	1
$DEF	UCB$B_TT_LINE		 	; CURRENT LINE ON PAGE
			.BLKB	1
$DEF	UCB$B_TT_LASTC		 	; LAST FORMATTED OUTPUT CHARACTER
			.BLKB	1

; DEFAULT CHARACTERISTICS


$DEF	UCB$L_TT_DECHAR		 	; DEFAULT DEVICE CHARACTERISTICS
			.BLKL	1
$DEF	UCB$L_TT_DECHA1			; DEFAULT DEVICE CHAR EXTENSIONS
			.BLKL	1

; WRITE QUEUE POINTERS


$DEF	UCB$L_TT_WFLINK			; Write queue forward link.
			.BLKL	1
$DEF	UCB$L_TT_WBLINK			; Write queue backward link.
			.BLKL	1
$DEF	UCB$L_TT_WRTBUF			; Current write buffer block.
			.BLKL	1

; PORT / CLASS VECTOR POINTERS


$DEF	UCB$L_TT_GETNXT			; ADDRESS OF CLASS INPUT ROUTINE
			.BLKL	1
$DEF	UCB$L_TT_PUTNXT			; ADDRESS OF CLASS OUTPUT ROUTINE
			.BLKL	1
$DEF	UCB$L_TT_CLASS			; ADDRESS OF CLASS VECTOR
			.BLKL	1
$DEF	UCB$L_TT_PORT			; ADDRESS OF PORT VECTOR
			.BLKL	1
$DEF	UCB$L_TT_OUTADR			; ADDRESS OF OUTPUT  CURRENT STREAM
			.BLKL	1
$DEF	UCB$W_TT_OUTLEN			; LENGTH OF OUTPUT STREAM
			.BLKW	1

; MODEM CONTROL DEFINITIONS


$DEF	UCB$B_TT_DS_RCV			; CURRENT RECEIVE MODEM
			.BLKB	1
$DEF	UCB$B_TT_DS_TX			; CURRENT TRANSMIT MODEM
			.BLKB	1
$DEF	UCB$W_TT_DS_ST			; CURRENT MODEM STATE
			.BLKW	1
$DEF 	UCB$W_TT_DS_TIM			; CURRENT MODEM TIMEOUT
			.BLKW	1


; SPEED, FILL, PARITY (MUST BE CONTIGUOUS)

;++ *****************************************************************

$DEF	UCB$W_TT_SPEED		 	; SPEED CODES (SPLIT SPEED)
			.BLKW	1
	$VIELD	UCB,0,<- 		; BREAKUP OF TT_SPEED
		<TT_TSPEED,8,M>- 	; TRANSMIT SPEED
		<TT_RSPEED,8,M>- 	; RECEIVE SPEED
		>


$DEF	UCB$B_TT_CRFILL		 	; NUMBER FILLS TO OUTPUT ON CR
			.BLKB	1
$DEF	UCB$B_TT_LFFILL		 	; NUMBER FILLS TO OUTPUT ON LF
			.BLKB	1
					;
$DEF	UCB$B_TT_PARITY			; PARITY AND CHARACTER SIZE DEFINITIONS
			.BLKB	1
	$VIELD	UCB,3,<- 		; BREAKUP OF PARITY
		<TT_LEN,2,M>-		; CHARACTER LENGTH
		<TT_STOP,1,M>-		; STOP BITS
		<TT_PARTY,1,M>- 	; PARITY ENABLED
		<TT_ODD,1,M>- 		; ODD PARITY
		>
;-- ******************************************************************


$DEF	UCB$B_TT_FILL		 	; CURRENT FILL COUNT
			.BLKB	1



; DEFAULT SPEED, FILL ,PARITY (MUST BE CONTIGUOUS)

;++ *******************************************************************

$DEF	UCB$W_TT_DESPEE		 	; DEFAULT SPEED
			.BLKW	1
$DEF	UCB$B_TT_DECRF		 	; DEFAULT CR FILL
			.BLKB	1
$DEF	UCB$B_TT_DELFF		 	; DEFAULT LF FILL
			.BLKB	1
					;
$DEF	UCB$B_TT_DEPARI			; DEFAULT PARITY/CHAR SIZE
			.BLKB	1
;-- **********************************************************************


; DEFAULT TERMINAL TYPE AND SIZE (MUST BE CONTIGUOUS)

;++  ***********************************************************************

$DEF	UCB$B_TT_DETYPE		 	; DEFAULT TERMINAL TYPE
			.BLKB	1
$DEF	UCB$W_TT_DESIZE		 	; DEFAULT LINE SIZE
			.BLKW	1
			.BLKB		; SPARE BYTE MUST FOLLOW
;-- **********************************************************************


$DEF	UCB$B_TT_MAINT			; MAINTENANCE PARAMETERS
			.BLKB	1
	$VIELD	UCB,0,<-		; FIELD DEFINITIONS
		<,7,>,-			; SKIP FIELD
		<TT_DSBL,1,M>-		; LINE DISABLED
		>

$DEF	UCB$L_TT_ALTDRV			; ADDRESS OF ALTERNATE DRIVER DPT
			.BLKL	1
$DEF	UCB$L_TT_MAP			; UNIBUS MAP REGISTERS
			.BLKL	1

$DEF	UCB$W_TT_ALTLEN			; ALTERNATE LENGTH OUTPUT
			.BLKW	1	; (USED WITH ALTERNATE DRIVER)

$DEF	UCB$B_TT_ESC		 	; CURRENT  READ ESCAPE SYNTAX STATE
			.BLKB	1

$DEF	UCB$B_TT_ESC_O			; OUPUT ESCAPE STATE

			.BLKB	1

$DEF	UCB$C_TT_LENGTH			; Length of terminal UCB
$DEF	UCB$K_TT_LENGTH			; Length of terminal UCB



	. = 0				;CLASS DRIVER VECTORS
$DEF	CLASS_GETNXT
			.BLKL	1
$DEF	CLASS_PUTNXT
			.BLKL	1
$DEF	CLASS_SETUP_UCB
			.BLKL	1
$DEF	CLASS_DS_TRAN
			.BLKL	1
$DEF	CLASS_DDT
			.BLKL	1
$DEF	CLASS_READERROR
			.BLKL	1

	. = 0				;PORT DRIVER VECTORS
$DEF	PORT_STARTIO
			.BLKL	1
$DEF	PORT_DISCONNECT
			.BLKL	1
$DEF	PORT_SET_LINE
			.BLKL	1
$DEF	PORT_DS_SET
			.BLKL	1
$DEF	PORT_XON
			.BLKL	1
$DEF	PORT_XOFF
			.BLKL	1
$DEF	PORT_STOP
			.BLKL	1
$DEF	PORT_STOP2
			.BLKL	1
$DEF	PORT_ABORT
			.BLKL	1
$DEF	PORT_RESUME
			.BLKL	1
$DEF	PORT_SET_MODEM
			.BLKL	1
$DEF	PORT_START_DMA
			.BLKL	1
$DEF	PORT_MAINT
			.BLKL	1

	. = 0

$DEF	TTY$L_RB_NXT		 	; READ BUFFER - NEXT CHARACTER
			.BLKL	1
$DEF	TTY$L_RB_UVA		 	; READ BUFFER - USER VIRTUAL ADDR
			.BLKL	1
$DEF	TTY$W_RB_SIZE		 	; READ BUFFER - BLOCK SIZE
			.BLKW	1
				 	;
			.BLKB	1
				 	;
			.BLKB	1
$DEF	TTY$W_RB_ORGHOR		 	; READ BUFFER - ORIGIONAL HORIZON
			.BLKW	1
$DEF	TTY$W_RB_TIMOS		 	; READ BUFFER - TIMEOUT SECONDS
			.BLKW	1
$DEF	TTY$L_RB_EXTEND			; EXTENSION FIELD
			.BLKL	1
$DEF	TTY$L_RB_DATA		 	; READ BUFFER  - DATA
			.BLKL	1

	. = 0

$DEF	TTY$L_TA_PUT		 	; TYPEAHEAD BUFFER - PUT POINTER
			.BLKL	1
$DEF	TTY$L_TA_GET		 	; TYPEAHEAD BUFFER - GET POINTER
			.BLKL	1
$DEF	TTY$W_TA_SIZE		 	; TYPEAHEAD BUFFER - BLOCK SIZE
			.BLKW	1
$DEF	TTY$B_TA_TYPE		 	;
			.BLKB	1
				 	;
			.BLKB	1
$DEF	TTY$L_TA_END		 	; TYPEAHEAD BUFFER - END ADDRESS
			.BLKL	1
$DEF	TTY$L_TA_DATA		 	; TYPEAHEAD BUFFER - DATA START
			.BLKL	1

	$VIELD	TTY,0,<- 		;
		<ST_CTRLS,,M>-
		<ST_FILL,,M>-
		<ST_CURSOR,,M>-
		<ST_SENDLF,,M>-
		<ST_MULTI,,M>-
		<ST_DMA,,M>-
		<ST_WRITE,,M>- 		; Write state
		<ST_BRDCST,,M>- 	; Broadcast state
		<ST_EOL,,M>-
		<ST_CTRLR,,M>-
		<ST_READ,,M>-
		>
	$VIELD	TTY,0,<-
		<ST_CTRLO,,M>-
		<ST_DEL,,M>-
		<ST_PASALL,,M>-
		<ST_NOECHO,,M>-
		<ST_WRTALL,,M>-
		<ST_PROMPT,,M>-
		<ST_NOFLTR,,M>-
		<ST_ESC,,M>-
		<ST_BADESC,,M>-
		<ST_NL,,M>- 		; New line must directly precede
		<ST_REFRSH,,M>- 	; refresh, or all breaks.
		<ST_ESCAPE,,M>-
		<ST_TYPFUL,,M>-
		<ST_SKIPLF,,M>-
		<ST_GETAHD,,M>-
		<ST_UNSOL,,M>-
		<ST_ESC_O,,M>-
		<ST_CTRLSP,,M>-
		<ST_WRAP,,M>-
		<ST_BRDP,,M>-
		<ST_DMAABO,,M>-
		<ST_OVRFLO,,M>-
		<ST_AUTOP,,M>-
		>
	$VIELD	TTY,0,<- 		;
		<SX_CTRLS>-
		<SX_FILL>-
		<SX_CURSOR>-
		<SX_SENDLF>-
		<SX_MULTI>-
		<SX_DMA>-
		<SX_WRITE>- 		; Write state
		<SX_BRDCST>- 	; Broadcast state
		<SX_EOL>-
		<SX_CTRLR>-
		<SX_READ>-
		>
	$VIELD	TTY,0,<-
		<A,32>-
		<SX_CTRLO>-
		<SX_DEL>-
		<SX_PASALL>-
		<SX_NOECHO>-
		<SX_WRTALL>-
		<SX_PROMPT>-
		<SX_NOFLTR>-
		<SX_ESC>-
		<SX_BADESC>-
		<SX_NL>- 	; New line must directly precede
		<SX_REFRSH>- 	; refresh, or all breaks.
		<SX_ESCAPE>-
		<SX_TYPFUL>-
		<SX_SKIPLF>-
		<SX_GETAHD>-
		<SX_UNSOL>-
		<SX_ESC_O>-
		<SX_CTRLSP>-
		<SX_WRAP>-
		<SX_BRDP>-
		<SX_DMAABO>-
		<SX_OVRFLO>-
		<SX_AUTOP>-
		>

$EQULST TTY$C_,,0,1,<-
		<CTRLC,3>-
		<BELL,7>-
		<BS,8>-
		<TAB,9>-
		<LF,10>-
		<VT,11>-
		<FF,12>-
		<CR,13>-
		<CTRLO,15>-
		<CTRLQ,17>-
		>
$EQULST TTY$C_,,,1,<-
		<XON,17>-
		<CTRLR,18>-
		<CTRLS,19>-
		<XOFF,19>-
		<CTRLU,21>-
		<CTRLX,24>-
		<CTRLY,25>-
		<CTRLZ,26>-
		<ESCAPE,27>-
		<BLANK,32>-
		<DOLLAR,36>-
		>
$EQULST TTY$C_,,,1,<-
		<PLUS,43>-
		<ZERO,48>-
		<ONE,49>-
		<SCRIPT,96>-
		<LOWA,97>-
		<LOWZ,123>-
		<DELETE,127>-
		<NL,128>-
		>

$EQULST TTY$C_,,0,1,<-
		<MAXPAGLEN,255>-
		<MAXPAGWID,511>-
		<HIGHIPL,22>-
		>


$EQULST TTY$C_,,0,1,<- 		; INTERNAL FUNCTION CODES
		<FC_READ>-
		<FC_WRITE>-
		<FC_SETM>-
		<FC_SETC>-
		<FC_N_SET>-
		>

	$VIELD	TTY,0,<- 		; CHARACTER CHARACTERISTICS
		<,3,M>-
		<CH_LOWER,,M>-
		<CH_SPEC,,M>-
		<CH_CTRL,,M>-
		<CH_CTRL3,,M>-
		<CH_CTRL2,,M>-
		>

$DEFEND	UCB


;	Define terminal specific usage of CRB

	$CRBDEF				; DEFINE CRB,IDB OFFSETS

crb$l_tt_modem		=	crb$l_timelink	;modem control timer thread
crb$l_dz_modem		=	crb$l_duetime	;dz-11 modem transition 
						;  detection timer thread
crb$b_tt_timmask	=	crb$l_toutrout+3;lines with active modem timers
crb$b_tt_ring		=	crb$l_toutrout	;last sampled ring for dz-11
crb$b_tt_carrier	=	crb$l_toutrout+1;last sampled carrier for dz-11
crb$b_tt_dtr		=	crb$l_toutrout+2;last output DTR for dz-11
crb$b_tt_type		=	crb$b_type+1	;controller type(DZ11,DZ32)

IDB$B_TT_ENABLE		=	^X0E		;DZ32 LINE ENABLE FIELD

	.ENDM	$TTYDEFS

	.MACRO	$TTYMODEM

	.MACRO	STO_TQE	OFFSET,SIZE,VALUE,BASE
$$$$$$	=	.
.	=	OFFSET+BASE
	.'SIZE	VALUE
.	=	$$$$$$
	.ENDM	STO_TQE


;	Modem control state table definitions
;

;	state entry definitions
;
modem$b_st_onmask	=	0			;output signals to activate
modem$b_st_offmask	=	1			;output signals to disable
modem$w_st_timer	=	2			;timer amount to init
modem$w_st_routine	=	4			;action routine
modem$c_st_length	=	6			;length of state entry

;	transition definitions
;
modem$b_tran_type	=	0			;element type
modem$w_tran_nstate	=	2			;next state offset from root
modem$b_tran_offmask	=	4			;input signals test on
modem$b_tran_onmask	=	5			;input signals test off
modem$c_tran_length	=	6			;length of transition element


;	transition type codes
;
modem$c_tran_time	=	1			;timer
modem$c_tran_dataset	=	0			;dataset
modem$c_tran_end	=	2			;end of transition list
modem$c_tran_dialtype	=	3			;test for sysgen parameter
modem$c_tran_dz11	=	4			;controller = DZ11
modem$c_tran_nomodem	=	5			;line not enabled 
							; for modem
;
;	 arguement type codes
;
modem$c_timer	=	4				;timer expiration
modem$c_dataset =	3				;dataset interrupt
modem$c_init	=	0				;init line
modem$c_shutdwn	=	1				;hangup command
modem$c_null	=	2				;null, for detecting preset conditions

modem$m_enable =^x8000				;mask enable



	$VIELD	TIMCTRL,0,<-			;DEFINE TIMCTRL BITS
		<CANCEL,,M>,-			;CANCEL TIMER REQUEST
		<ACTIVE,,M>,-			;TIMER CURRENTLY ACTIVE
		>


	.ENDM	$TTYMODEM


 	.MACRO	$TTYDEF,$GBL		;

 	$DEFINI	TTY,$GBL

 $DEF	TTY$L_WB_FLINK	.BLKL
 $DEF	TTY$L_WB_BLINK	.BLKL
 $DEF	TTY$W_WB_SIZE	.BLKW
 $DEF	TTY$B_WB_TYPE	.BLKB
 $DEF	TTY$B_WB_FIPL	.BLKB
 $DEF	TTY$L_WB_FPC	.BLKL
 $DEF	TTY$L_WB_FR3	.BLKL
 $DEF	TTY$L_WB_FR4	.BLKL
 $DEF	TTY$L_WB_MAP	.BLKL
 $DEF	TTY$L_WB_NEXT	.BLKL
 $DEF	TTY$L_WB_END	.BLKL
 $DEF	TTY$L_WB_IRP	.BLKL
 $DEF	TTY$W_WB_STATUS	.BLKW
 $DEF	TTY$W_WB_BCNT	.BLKW
 $DEF	TTY$L_WB_RETADDR .BLKL
 $DEF	TTY$C_WB_HDRLEN
 $DEF	TTY$K_WB_HDRLEN
 $DEF	TTY$L_WB_DATA	.BLKL

 	$DEFEND	TTY,$GBL,DEF

 	.ENDM	$TTYDEF

	.END

