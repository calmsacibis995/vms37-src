	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	.TITLE	LIOSUB780 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	.TITLE	LIOSUB750 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	.TITLE	LIOSUB730 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	EXECUTIVE, I/O CONTROL ROUTINES
;
; ABSTRACT:
;
; I/O SUBROUTINES WHICH CONTAIN PROCESSOR DEPENDENCIES.
;
; AUTHOR:
;
;	N. KRONENBERG, JANUARY 12, 1979.
;
; MODIFIED BY:
;
;	V08	TCM0002		Trudy C. Mathews	29-Jul-1981
;		Changed all "7ZZ"s to "730"s.
;
;	V07	TCM0001		Trudy C Matthews	28-Feb-1980
;		Changed IOC$PURGDATAP for NEBULA so that it logs
;		the Unibus Error Summary register itself when there
;		are Unibus errors reported.
;
;	V06	NPK0002		N. KRONENBERG		4-DEC-1979
;		REPLACED IOC$PURGDATAP FOR NEBULA
;
;	V05	NPK0001		N. KRONENBERG		23-AUG-1979
;		CORRECTED 11/750 CHECK FOR PURGE DONE.
;
;	V04	TCM0001		Trudy C. Matthews	3-Jul-1979
;	Modified IOC$PURGDATAP for NEBULA.
;
;--

;
; MACRO LIBRARY CALLS:
;
	$ADPDEF				;DEFINE ADP OFFSETS
	$CRBDEF				;DEFINE CRB OFFSETS
	$EMBETDEF			; Define error types.
	$EMBUEDEF			; Define Unibus Error buffer.
	$IDBDEF				;DEFINE IDB OFFSETS
	$PRDEF				;DEFINE IPR'S
	$UBADEF				;DEFINE UBA OFFSETS
	$UBIDEF				;DEFINE UBI OFFSETS
	$UCBDEF				;DEFINE UCB OFFSETS
	$VECDEF				;DEFINE CRB/VEC OFFSETS

	.SBTTL	PURGE DATAPATH
;+
; IOC$PURGDATAP - PURGE DATAPATH
;
; THIS ROUTINE PURGES THE CALLER'S BUFFERED DATAPATH, AND CLEARS ANY
; DATAPATH ERRORS.  IF THERE WAS A DATAPATH ERROR, THIS FACT IS 
; RETURNED TO THE CALLER.
;
; INPUTS:
;
;	R5 = UCB ADDRESS
;
; OUTPUTS:
;
;	R0-R3 ALTERED
;	OTHER REGISTERS PRESERVED
;	R0 LOW BIT CLEAR/SET IF TRANSMISSION ERROR/SUCCESS
;	R1 = DPR CONTENTS AFTER PURGE (FOR REGISTER DUMP BY CALLER)
;	R2 = ADDRESS OF START OF ADAPTER MAP REGISTERS (FOR REG DUMP BY CALLER)
;	R3 = CRB ADDRESS
;-

	.PSECT	WIONONPAGED

	.ENABL	LSB

IOC$PURGDATAP::				;
	PUSHR	#^M<R4>			;SAVE REGISTER
	MOVL	UCB$L_CRB(R5),R3	;GET CRB ADDR
	MOVL	@CRB$L_INTD+VEC$L_ADP(R3),R2 ;GET START OF ADAPTER
					     ; REGISTER SPACE

	EXTZV	#VEC$V_DATAPATH,-	;EXTRACT DATAPATH #
		#VEC$S_DATAPATH,-	; FROM CRB
		CRB$L_INTD+VEC$B_DATAPATH(R3),R1


	.IF	EQ,CPU_TYPE-PR$_SID_TYP780 ;VAX 11/780:
	MOVAL	UBA$L_DPR(R2)[R1],R4	;GET ADDR OF DPR
	ASHL	#UBA$V_DPR_BNE,#1,(R4)	;PURGE DATAPATH
	MOVL	(R4),R1			;GET DPR CONTENTS
	BBC	#UBA$V_DPR_XMTER,R1,20$	;BRANCH IF NO ERROR
	ASHL	#UBA$V_DPR_XMTER,#1,(R4) ;CLEAR ERROR IN DPR
	CLRL	R0			;SET TO RETURN XFER ERROR
	BRB	30$			;JOIN COMMON CODE
20$:	MOVZBL	#1,R0			;SET TO RETURN XFER SUCCESS
30$:	MOVAL	UBA$L_MAP(R2),R2	;RETURN ADDR OF 1ST MAP REG
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750 ;VAX 11/750:
	MOVAL	UBI$L_DPR(R2)[R1],R4	;GET ADDR OF DPR
	ASHL	#UBI$V_DPR_PUR,#1,(R4)	;PURGE DATAPATH
	MOVL	#UBI$C_PURCNT,R0	;GET MAX # OF TRIES FOR
					; PURGE DONE TEST
10$:	MOVL	(R4),R1			;GET DPR CONTENTS
	BBC	#UBI$V_DPR_PUR,R1,15$	;BRANCH IF PURGE DONE
	SOBGTR	R0,10$			;BRANCH IF MORE TRIES ALLOWED
	BUG_CHECK BDPPURGERR,FATAL	;ELSE, FATAL ERROR (PURGE STATE
					; STUCK ON)
15$:	BBC	#UBI$V_DPR_ERROR,R1,20$	;BRANCH IF NO ERROR
	MCOML	#0,(R4)			;CLEAR DPR ERROR(S)
	CLRL	R0			;SET TO RETURN XFER ERROR
	BRB	30$			;JOIN COMMON CODE
20$:	MOVZBL	#1,R0			;SET TO RETURN XFER SUCCESS
30$:	MOVAL	UBI$L_MAP(R2),R2	;RETURN ADDR OF 1ST MAP REG
	.ENDC


;
; THE VAX 11/730 HAS NO REAL DATAPATH REGISTERS, SO NO ACTUAL
; PURGE IS DONE.  THE 11/730 MAINTAINS A SHARED UNIBUS ERROR
; REGISTER, WHICH IS CHECKED HERE.  IF AN ERROR IS SHOWN
; IN THE SHARED ERROR REGISTER, IT IS LOGGED AS A NEBULA UNIBUS ERROR.
; NOTE, HOWEVER, THAT SINCE THE ERROR REGISTER IS SHARED, THE ERROR
; COULD POSSIBLY BELONG TO ANOTHER DEVICE DOING A TRANSFER
; CONCURRENTLY.  THE ERROR WILL SHOW UP TWICE IN THE ERRORLOG; ONCE
; AS A UNIBUS ERROR AND ONCE AS AN NXM IN A DEVICE REGISTER FOR THE
; DEVICE THAT REALLY HAD THE ERROR.
;

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MOVL	UBI$L_SR(R2),R4		; Get Unibus Error Summary reg.
	BITL	#<UBI$M_SR_UWE!-	; Any UB errors? (write error,
		UBI$M_SR_MRPE!-		;	map parity error,
		UBI$M_SR_NXM!-		;	non-existent memory,
		UBI$M_SR_UCE>,R4	; or uncorrected read error.)
	BEQL	30$			; Branch if no errors.
;
; The shared Unibus error register indicates an error.  Log it.
;
	PUSHL	R2			; Save addr of adaptor reg space
	MOVZBL	#EMB$C_UE_LENGTH,R1	; Set length of error buffer.
	JSB	G^ERL$ALLOCEMB		; Get a message buffer.
	BLBC	R0,20$			; Branch if unsuccessful.
	MOVL	R4,EMB$L_UE_UBERR(R2)	; Put error register in buffer.
	MOVZBL	#EMB$C_UE, -		; Set entry type in buffer.
		EMB$W_UE_ENTRY(R2)	;
	JSB	G^ERL$RELEASEMB		; Release buffer to errorlogger.
20$:	POPR	#^M<R2>			; Restore addr of adaptor regs.
;
; Set up outputs from PURGDATAP.
;
30$:	MOVL	#1,R0			; Set success always.
	CLRL	R1			; No DPR contents.
	MOVAL	UBI$L_MAP(R2),R2	; Return addr of 1st map reg.
	.ENDC


	POPR	#^M<R4>			;RESTORE REGISTER
	RSB				;RETURN

	.DSABL	LSB





	.END
