	.TITLE	MPSCHED - MULTIPROCESSOR SCHEDULER
	.IDENT	'V03-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract:  Multi-processing scheduler routines 
;
; Environment: MODE=Kernel 
;
; Author:  RICHARD I. HUSTVEDT, Creation date:  15-MAY-1979
;
; Modified by:
;
;	V03-002	KDM0083		Kathleen D. Morse	31-Mar-1982
;		Rename routines to following multi-processing naming
;		conventions for hooks and routines.  Also, fixed some
;		incorrect comments.
;
;	V03-001	KDM0080		Kathleen D. Morse	31-Mar-1982
;		Assembly switch the debugging and performance measurement
;		code.
;
;	V02-012	KDM0033		Kathleen D. Morse	02-Sep-1981
;		Remove priority decrement for a process that is
;		scheduled to run on the secondary and for processes
;		that are re-scheduled onto the secondary via the
;		AST trick.
;
;	V02-011	KDM0032		Kathleen D. Morse	27-Aug-1981
;		Add test for PHD$L_MPINHIBIT, so that processes with a
;		non-zero field are not scheduled onto the secondary.
;
;	V02-010	KDM0029		Kathleen D. Morse	20-Aug-1981
;		Do not schedule processes with ASTs pending onto the
;		secondary.
;
;	V02-009	KDM0012		Kathleen D. Morse	08-Jun-1981
;		Add power fail logic.
;
;	V02-008	KDM0010		Kathleen D. Morse	06-Apr-1981
;		Move AST delivery code to new module, MPAST.
;		Add checks for decision to cause rescheduling AST, so
;		that no AST's are queued and there is another process to
;		run other than the null process.
;
;	V02-007	KDM0009		Kathleen D. Morse	28-Mar-1981
;		Add loadable code for AST delivery to check if process
;		should be rescheduled, perhaps onto the secondary.
;
;	V02-006	KDM0008		Kathleen D. Morse	28-Mar-1981
;		Set ASTLVL processor register to executive mode if
;		the secondary is idle and the primary schedules a
;		process for himself.
;
;	V02-005	KDM0006		Kathleen D. Morse	27-Mar-1981
;		Add INIT and STOP states for secondary processor.
;
;	V02-004	KDM0005		Kathleen D. Morse	25-Mar-1981
;		Add code to do interlocked instruction before accessing
;		locations modified by both processors, to flush cached values.
;
;	V02-003	KDM0002		Kathleen D. Morse	09-Sep-1980
;		Make source fixes for patches.
;
;	V02-002	KDM0001		Kathleen D. Morse	04-Sep-1980
;		Replace copyright.
; 01	- 
;--

;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	$DYNDEF				; Structure type code definitions
	$IPLDEF				; Interrupt priority level definitions
	$LCKDEF				; Interlock bit definitions
	$MPSDEF				; Secondary processor state definitions
	$PCBDEF				; PCB definitions
	$PHDDEF				; PHD definitions
	$PRDEF				; Processor register definitions
	$PSLDEF				; Program status longword definitions
	$STATEDEF			; State definitions

;
; OWN STORAGE:
;

;++
;
; IPL Usages:
;
;	Primary Processor		Secondary Processor
;	----------------		-------------------
;
;	 0 - Unused			 0 - Unused
;	 1 - Unused			 1 - Unused
;	 2 - AST delivery		 2 - AST delivery
;	 3 - Rescheduling		 3 - Rescheduling
;	 4 - IO posting			 4 - Unused
;	 5 - Multi-processor interrupt	 5 - Xdelta
;	 6 - Fork			 6 - Unused
;	 7 - Software timer interrupt	 7 - Quantum end software interrupt
;	 8 - Fork 			 8 - Unused
;	 9 - Fork 			 9 - Unused
;	10 - Fork 			10 - Unused
;	11 - Fork 			11 - Unused
;	12 - Unused			12 - Unused
;	13 - Unused			13 - Unused
;	14 - Unused			14 - Unused
;	15 - Xdelta			15 - Unused
;	16 - Unused			16 - Unused
;	17 - Unused			17 - Unused
;	18 - Unused			18 - Unused
;	19 - Unused			19 - Unused
;	20 - Device interrupt		20 - Unused
;	21 - Device interrupt		21 - Unused
;	22 - Device interrupt		22 - Unused
;	23 - Device interrupt		23 - Unused
;	24 - Timer interrupt		24 - Timer interrupt
;	25 - Unused			25 - Unused
;	26 - Unused			26 - Unused
;	27 - Unused			27 - Unused
;	28 - Unused			28 - Unused
;	29 - Unused			29 - Unused
;	30 - Unused			30 - Unused
;	31 - Unused			31 - Unused
;
;--
	.PSECT	AEXENONPAGED,LONG	; Nonpaged exec
	.PAGE
	.SBTTL	MPS$RESCHEDIPL5 - MP RESCHEDULING (MA780) INTERRUPT HANDLER
;++
; MPS$RESCHEDIPL5 - MULTI-PROCESSOR RESCHEDULING (MA780) INTERRUPT HANDLER
;
; This routine is entered via the IPL 5 rescheduling interrupt.
; The vector for this interrupt is coded to cause execution
; on the interrupt stack.
;
; ENVIRONMENT:
;
;	IPL=5 MODE=kernel IS=1
;
;	Executed by the primary processor.
;
; INPUT:
;
;	00(SP)=PC at reschedule interrupt
;	04(SP)=PSL at interrupt
;
;--
	.ENABL	LSB
	.ALIGN	LONG			; Interrupt handlers must be
					;  longword aligned
MPS$RESCHEDIPL5::			; Interrupt handler for
					;  multi-processor reschedule interrupt
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save needed registers

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_RESCHD		; Gather performance measurement data
	.ENDC

	BSBB	MPS$SCHSCND		; Schedule secondary

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_SCHDSUC		; Gather performance measurement data
	.ENDC

	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers
	REI				; Return from interrupt

PFAIL_EXIT:				; Exit when secondary is in powerfail
	MOVL	#MPS$K_INITSTATE,W^MPS$GL_STATE ; Set state for restart
	BRB	1$			; Done with rescheduling
MPS$EXIT:				;
	CMPL	W^MPS$GL_STATE,#MPS$K_BUSYSTATE ; Check for powerfail window
	BNEQ	1$			; where secondary was set busy after it
	TSTL	W^MPS$GL_PFAILTIM	; saw the powerfail occur. In this case,
	BNEQ	7$			; go drop the process owned by secondary
1$:	RSB				; All done rescheduling secondary
MPS$SCHSCND::				; Schedule secondary processor
	SETIPL	#IPL$_SYNCH		; Synch scheduler with event reporting
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,5$ ; Flush cache queue
	ASSUME MPS$K_IDLESTATE LT MPS$K_DROPSTATE
	ASSUME MPS$K_BUSYSTATE GT MPS$K_DROPSTATE
	ASSUME MPS$K_INITSTATE GT MPS$K_BUSYSTATE
	ASSUME MPS$K_STOPSTATE GT MPS$K_BUSYSTATE
5$:	CMPL	W^MPS$GL_STATE,#MPS$K_DROPSTATE ; Is state already idle?
	BLSS	MPS$SCHEDIPL5		; Yes, just schedule a new one
	BGTR	MPS$EXIT		; Br if busy
;
; The primary processor takes the process that the secondary can
; no longer execute and puts it back on the appropriate scheduler queue.
;
7$:	MOVL	W^MPS$GL_CURPCB,R1	; Get address of current PCB
	MOVZBL	PCB$B_PRI(R1),R2	; Current priority
	BBSS	R2,G^SCH$GL_COMQS,10$	; Mark queue non-empty
10$:	MOVW	#SCH$C_COM,PCB$W_STATE(R1) ; Set state to resident computable
	MOVAQ	G^SCH$AQ_COMT[R2],R3	; Compute address of queue
	INSQUE	(R1),@(R3)+		; Insert at tail of queue
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,15$ ; Flush cache queue
15$:	TSTL	W^MPS$GL_PFAILTIM	; Is secondary in power fail?
	BNEQ	PFAIL_EXIT		; Br if yes, power fail in progress
	MOVL	#MPS$K_IDLESTATE,W^MPS$GL_STATE ; Set secondary's state to idle
	SOFTINT	#IPL$_SCHED		; Reschedule primary processor
	.DSABL	LSB

;+
; MPS$SCHEDIPL5 - SCHEDULE NEW PROCESS FOR EXECUTION
;
; In this routine, the primary processor selects the highest priority
; executable process and places it in the hands of the secondary
; processor.  It then tells the secondary processor to exit its idle
; loop and start executing, by altering MPS$GL_STATE.
;
; ENVIRONMENT:
;
;	Executed by the primary processor.
;
;-
MPS$SCHEDIPL5::				; Schedule for execution
	TSTL	W^MPS$GL_PFAILTIM	; Has secondary taken powerfail?
	BNEQ	PFAIL_EXIT		; Br on yes, must set state to
					; INIT so that he can restart.
	FFS	#0,#32,G^SCH$GL_COMQS,R2 ; Find first full state
	BEQL	MPS$IDLE		; No executable process?
NEXTQ:	MOVAQ	G^SCH$AQ_COMH[R2],R3	; Compute queue head address
	MOVL	R3,R4			; Get head of queue
QLOOP:	MOVL	(R4),R4			; Get next in queue
	CMPL	R3,R4			; Check for end of queue
	BEQL	QEMPT			; Br if yes
	MOVL	PCB$L_PHD(R4),R5	; Get process header address
	EXTZV	#PSL$V_CURMOD,#PSL$S_CURMOD,PHD$L_PSL(R5),R0 ;Get current mode
	BEQL	QLOOP			; Br if yes, can't run on secondary
	CMPB	R0,PHD$B_ASTLVL(R5)	; Is there an AST pending for process?
	BGEQ	QLOOP			; Br on yes, don't sched for secondary
	TSTL	PHD$L_MPINHIBIT(R5)	; Any reason not to run on secondary?
	BNEQ	QLOOP			; Br on yes, don't sched for secondary
	REMQUE	(R4),R4			; Remove from queue
	BNEQ	20$			; Queue not empty
	BBCC	R2,G^SCH$GL_COMQS,20$	; Set queue empty
20$:					;
	MOVW	#SCH$C_CUR,PCB$W_STATE(R4) ; Set state to current
	MOVL	R4,W^MPS$GL_CURPCB	; Note current PCB loc

	.IF	DF,MPPFMSWT
	BSBW	W^MPS$PFM_EXCHG		; Collect perf meas data
	BSBW	W^MPS$PFM_ASTSC		; Collect perf meas data
	.ENDC

	MOVL	#MPS$K_BUSYSTATE,W^MPS$GL_STATE ; Set state to busy

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_CTXSW		; Gather performance measurement data
	.ENDC

	RSB				; Normal return

QEMPT:	INCL	R2			; Next queue
	SUBL3	R2,#32,R1		; Compute number of remaining queues
	BLEQ	MPS$IDLE		; Br if none left
	FFS	R2,R1,G^SCH$GL_COMQS,R2 ; Find next active state
	BNEQ	NEXTQ			; Continue if another non-empty state
MPS$IDLE:				; No active, executable process
	MOVAB	G^SCH$GL_NULLPCB,W^MPS$GL_CURPCB ; Set to null PCB
	RSB				; And return

	.PAGE
	.SBTTL	MPS$RESCHED - RESCHEDULING INTERRUPT HANDLER
;++
; MPS$RESCHED - RESCHEDULING INTERRUPT HANDLER
;
; This routine is entered via the IPL 3 rescheduling interrupt.
; the vector for this interrupt is coded to cause execution on
; the kernel stack.
;
; This routine replaces SCH$RESCHED in a vanilla VMS system.
;
; ENVIRONMENT:
;
;	IPL=3 MODE=kernel IS=0
;
;	Executed by the primary processor.
;
; INPUT:
;
;	00(SP)=PC at reschedule interrupt
;	04(SP)=PSL at interrupt
;
;--
	.ALIGN	LONG			; Align interrupt handler
MPS$RESCHED::				; Reschedule interrupt handler
	SETIPL	#IPL$_SYNCH		; Synch scheduler with event reporting
	SVPCTX				; Save context of process
	MOVL	G^SCH$GL_CURPCB,R1	; Get address of current PCB
	MOVZBL	PCB$B_PRI(R1),R2	; Current priority
	BBSS	R2,G^SCH$GL_COMQS,10$	; Mark queue non-empty
10$:	MOVW	#SCH$C_COM,PCB$W_STATE(R1) ; Set state to resident computable
	MOVAQ	G^SCH$AQ_COMT[R2],R3	; Compute address of queue
	INSQUE	(R1),@(R3)+		; Insert at tail of queue

;+
; MPS$SCHED - SCHEDULE NEW PROCESS FOR EXECUTION
;
; This routine selects the highest priority executable process
; and places it in execution.
;
; This routine replaces SCH$SCHED in a vanilla VMS system.
;
; ENVIRONMENT:
;
;	Executed by the primary processor.
;
;-

SCH$IDLE:
	SETIPL	#IPL$_SCHED
	MOVB	#32,G^SCH$GB_PRI
	BRW	MPS$SCHED		; And try again

QEMPTY:
	BUG_CHECK	QUEUEMPTY,FATAL

MPS$SCHED::				; Schedule for execution
	SETIPL	#IPL$_SYNCH		; Synch scheduler with event reporting
	BSBW	MPS$SCHSCND		; Schedule secondary
	FFS	#0,#32,G^SCH$GL_COMQS,R2 ; Find first full state
	BEQL	SCH$IDLE		; No executable process?
	MOVAQ	G^SCH$AQ_COMH[R2],R3	; Compute queue head address
	REMQUE	@(R3)+,R4		; Get head of queue
	BVS	QEMPTY			; Br if queue was empty (bugcheck)
	BNEQ	20$			; Queue not empty
	BBCC	R2,G^SCH$GL_COMQS,20$	; Set queue empty
20$:					;
	CMPB	#DYN$C_PCB,PCB$B_TYPE(R4) ; Must be a process control block
	BNEQ	QEMPTY			; Otherwise fatal error
	MOVW	#SCH$C_CUR,PCB$W_STATE(R4) ; Set state to current
	MOVL	R4,G^SCH$GL_CURPCB	; Note current PCB location
	MTPR	PCB$L_PHYPCB(R4),#PR$_PCBB ; Set PCB base physical address
	LDPCTX				; Restore context
	PUSHL	R4			; Save register
	MOVL	G^SCH$GL_CURPCB,R4	; Get address of current PCB
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,40$ ; Flush cache queue
40$:	CMPL	W^MPS$GL_STATE,#MPS$K_IDLESTATE ; Is secondary idle?
	BNEQ	50$			; Br on no, already running a process
	MFPR	#PR$_ASTLVL,-(SP)	; Get PR ASTLVL
	TSTL	(SP)+			; Is ASTLVL = KERNEL?
	BEQL	50$			; Br on yes, dont cause reschedule
	BITL	#^X7FFFFFFF,G^SCH$GL_COMQS ; Is any process other than null COM?
	BEQL	50$			; Br on no, nothing else can run
	PUSHAB	PCB$L_ASTQFL(R4)	; Are there any AST's outstanding
	CMPL	(SP)+,PCB$L_ASTQFL(R4)	; for this process?  If so, don't
	BNEQ	50$			; cause a reschedule AST.
	MOVL	PCB$L_PHD(R4),R4	; Get address of PHD
	TSTL	PHD$L_MPINHIBIT(R4)	; Any reason not to run on secondary?
	BNEQ	45$			; Br on yes, don't cause reschedule AST
	MTPR	#PSL$C_EXEC,#PR$_ASTLVL	; Cause reschedule of process when it
					; exits from kernel mode on primary
	MOVL	G^SCH$GL_CURPCB,R4	; Get address of current PCB
	BRB	60$			; Don't decrement priority
45$:	MOVL	G^SCH$GL_CURPCB,R4	; Get address of current PCB
50$:	CMPB	PCB$B_PRIB(R4),PCB$B_PRI(R4) ; Check for base
	BEQL	60$			; Br if Priority=current
	BBC	#4,PCB$B_PRI(R4),60$	; Don't float real time priority
	INCB	PCB$B_PRI(R4)		; Move toward base priority
60$:	MOVB	PCB$B_PRI(R4),G^SCH$GB_PRI ; Set global priority
	POPL	R4			; Restore register
	REI				; Normal return

	.PAGE
	.SBTTL	MPS$MPSCHED - SECONDARY PROCESSOR SCHEDULING
;++
; FUNCTIONAL DESCRIPTION:
;
; MPS$MPSCHED is entered to drop the current process running
; in the secondary processor and select a new one.
;
; ENVIRONMENT:
;
;	Executed by the secondary processor.
;
;--
	.ALIGN	LONG
MPS$MPSCHED::				;
	SETIPL	#IPL$_SYNCH		; Synchronize with other events
	BITL	#PSL$M_CURMOD,4(SP)	; Check for kernel
	BEQL	GETOUT			; If so, exit already in progress

MPS$MPSCHED2::

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_SVPCTX		; Gather performance measurement data
	.ENDC

	SVPCTX				; Save current process context
	MOVL	#MPS$K_DROPSTATE,W^MPS$GL_STATE ; Indicate process being dropped

MPS$MPSCHED1::				; Init entry point for startup

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_INTP		; Gather performance measurement data
	.ENDC

	BSBW	MPS$INTPRIM		; Interrupt primary processor
;
; Now invalidate the system half of the translation buffer because
; the secondary is going into a busy-waiting loop until the primary
; gives it something to do.  The primary may request that the secondary
; invalidate certain system addresses from its translation buffer while
; it is waiting.  Since the secondary won't have these addresses in its
; translation buffer, it just keeps telling the primary that it has done
; the request, i.e., by clearing MPS$GL_INVALID.  (If this clear was not
; in the loop, the primary would wait indefinitely for the secondary, who
; in turn was waiting indefinitely for the primary.)
;
	INVALID				; Invalidate translation buffer
10$:	CLRL	W^MPS$GL_INVALID	; Acknowledge TB invalidate request
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,20$ ; Flush cache queue
20$:	CMPL	#MPS$K_BUSYSTATE,W^MPS$GL_STATE ; Is state set to busy?
	BNEQ	10$			; No, loop
;
; The primary has scheduled a process for the secondary to execute.
; The secondary need only load up the new PCB and being executing.
;
	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_RSCH		; Gather performance measurement data
	.ENDC

	SETIPL	#IPL$_POWER		; Disable powerfail interrupts
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,30$ ; Flush cache queue
30$:	MOVL	W^MPS$GL_CURPCB,R4	; Get current PCB address
	MOVL	PCB$L_PHYPCB(R4),R2	; Get physical PCB address
	MTPR	R2,#PR$_PCBB		; Set PCB base address

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_LDPCTX		; Gather performance measurement data
	.ENDC

	LDPCTX				; Load process context
	MOVL	#MPS$K_EXECSTATE,W^MPS$GL_STATE ; Indicate LDPCTX is done
GETOUT:	REI				; And execute
	.END
