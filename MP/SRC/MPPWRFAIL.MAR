	.TITLE	MPPWRFAIL - POWER FAIL INTERRUPT HANDLER
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract: POWERFAIL contains the code necessary to handle a power failure
;	    interrupt on the secondary processor.  The secondary is set
;	    to a state in which it restart with the normal initialization
;	    code.
;
; Environment: MODE=Kernel , IPL=31
;
; Author:  KATHLEEN D. MORSE, Creation date:  08-JUN-1981
;
; Modified by:
;
;
;--

;
; Include files:
;

;
; MACROS:
;

;
; Equated Symbols:
;
	$IPLDEF				; Interrupt priority level definitions
	$LCKDEF				; Interlock bit definitions
	$MPSDEF				; Secondary processor states
	$PCBDEF				; Process control block definitions
	$PHDDEF				; Process header block definitons
	$PRDEF				; Processor register definitions
	$PSLDEF				; Processor status longword definitions

	.PSECT	$AEXENONPAGED,LONG	; Interrupt routines must be
					; longword aligned
	.PAGE
	.SBTTL	EXE$POWERFAIL - POWER FAIL INTERRUPT SERVICE ROUTINE
;++
;
; Functional Description:
;
;	EXE$POWERFAIL is entered with IPL=31 as a result of a power fail
;	interrupt.  The objective is to fold up the current process and
;	get into a state from which the secondary can be re-initialized
;	as quickly as possible.
;
;	The secondary must be in the INIT state in order to re-initalize.
;	The primary processor must have exclusive rights over setting
;	the secondary into this state, to avoid various race conditions.
;	Thus, the scheduling code must check the powerfail flag and
;	force the primary into a state so that it can restart.
;
;	There are two possible ways in which the powerfail interrupt
;	can work.  Once the interrupt occurs, it can either be dismissed
;	or it can remain active (i.e., if an REI is issued, it will
;	re-occur).  This code will handle both cases.  However, it
;	appears that the 11/780 hardware is the former case.
;
;	When a powerfail occurs, the secondary may be in any of
;	its possible states:  INIT, STOP, BUSY, EXEC, IDLE, or DROP.
;	The following describes the flow of execution for the secondary
;	in each case.
;
;		INIT - Go to self-branch in powerfail code.
;		       In this case, the primary will not need to
;		       set the state of the secondary to INIT.
;
;		STOP - Go to self-branch in powerfail code.
;		       In this case, the primary must not set
;		       the state of the secondary to INIT as the
;		       secondary had been stopped with an explicit
;		       user command.
;
;		       (Restart will make secondary do busy-loop in
;		       EXE$MPSTART, waiting to be set to INIT state.)
;
;		BUSY - Set IPL of PSL on stack to 31 and REI.  This will
;		       return the secondary to the scheduling code which
;		       will make him do a LDPCTX and go into EXEC state.
;		       When the REI is done (following the LDPCTX), the
;		       software timer interrupt will occur and the
;		       secondary will fold up the process and execute
;		       the busy-loop in the scheduling code.
;
;		IDLE - Set IPL of PSL on stack to 31 and REI.  This will
;		       return the secondary to the scheduling code where
;		       it will loop until the restart occurs.  The primary
;		       will notice the powerfail flag when it next tries to
;		       schedule the secondary and set him to INIT state.
;
;		       (The secondary may or may not busy-loop in
;		       EXE$MPSTART when the restart occurs, depending
;		       upon when the primary sets him to the INIT state.)
;
;		DROP - Set IPL of PSL on stack to 31 and REI.  This will
;		       cause the primary to take back the process, and the
;		       secondary to return to the scheduling code, to loop
;		       until the restart occurs.  If the primary doesn't see
;		       the powerfail flag, then the secondary will go BUSY
;		       and then EXEC, and then get the software timer
;		       interrupt after the REI (following the LDPCTX).  The
;		       secondary will fold up the process and loop in the
;		       Scheduling code until restart occurs.
;
;		EXEC - If current mode of PSL on stack is Kernel, then
;		       set IPL of PSL on stack to 31 and REI.  This will
;		       return the secondary to the particular interrupt
;		       code that he had been executing (MA780, scheduling,
;		       hardware clock, etc.).  When that particular interrupt
;		       code finishes, the software timer interrupt will occur.
;		       Now the secondary will fold up the process, and
;		       wait in the busy-loop in the scheduling code for
;		       the restart.
;
;		       If current mode of PSL on stack is NOT Kernel, then
;		       the secondary folds up the process and interrupts the
;		       primary to take back the process.  The secondary then
;		       executes the self-branch in the powerfail code.
;
; Environment:
;
;	Executed by secondary processor.
;
; Calling Sequence:
;
;	Powerfail interrupt through Vector at offset 12 in the SCB.
;
; Input Parameters:
;
;	00(SP) - PC at time of powerfail interrupt
;	04(SP) - PSL at time of powerfail interrupt
;
; Implicit Inputs:
;
;	MPS$GL_STATE - state of secondary processor
;
;--

	.ALIGN	LONG			; Exception and Interrupt routines must 
					; be longword aligned
MPS$POWERFAIL::				;
	.LIST ME
	MFPR	#PR$_TODR,W^MPS$GL_PFAILTIM ; Indicate powerfail occurred
	.NLIST ME
	SOFTINT	#IPL$_TIMER		; Force rescheduling to occur after
					; the powerfail logic occurs
	ASSUME	MPS$K_INITSTATE GT MPS$K_EXECSTATE
	ASSUME	MPS$K_STOPSTATE GT MPS$K_EXECSTATE
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,10$ ; Flush cache queue
10$:	CMPL	W^MPS$GL_STATE,#MPS$K_EXECSTATE ; Has a LDPCTX been done?
	BGTR	40$			; Br if STOP or INIT state
	BNEQ	60$			; Br if no LDPCTX has been done
	BITB	#<PSL$M_CURMOD@-24>,7(SP) ; Was kernel mode code interrupted?
	BEQL	60$			; Br if yes, can't fold up process now
	SVPCTX				; Fold up the processs
	MOVL	#MPS$K_DROPSTATE,W^MPS$GL_STATE ; Prepare to reschedule
	BSBW	W^MPS$INTPRIM		; Request primary take the process back
40$:	BRB	40$			; Wait for power off halt
					; This loop is to avoid halting
					; and confusing the console
					; by inadvertently triggering an
					; automatic restart too soon.
60$:	SETIPL	#IPL$_POWER		; Prevent reserved operand fault on REI
	BISB	#<PSL$M_IPL@-16>,6(SP)	; Force saved IPL to 31
	REI

	.END				;
