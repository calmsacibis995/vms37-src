	.TITLE	MPINIT - SECONDARY PROCESSOR INITIALIZATION
	.IDENT	'V03-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract:  MPS$INIT contains the routine MPS$START that initializes
;	     a secondary processor.
;
; Environment:  MODE=Kernel , IPL=31
;
; Author:  RICHARD I. HUSTVEDT, Creation date:  15-May-1979
;
; Modified by:
;
;	V03-002	KDM0089		Kathleen D. Morse	5-Apr-1982
;		Add checks for hardware and firmware version and revision
;		levels of secondary processor (must match primary processor).
;
;	V03-001	KDM0080		Kathleen D. Morse	31-Mar-1982
;		Assembly switch the debug and performance measurement
;		code.
;
;	V02-013	KDM0036		Kathleen D. Morse	19-Jan-1982
;		Move MPS$GL_ISP, MPS$GL_STRTVA, and MPS$GL_SCBB into same
;		physical page as the secondary's initialization code that
;		is executed without memory management enabled.
;
;	V02-012	KDM0021		Kathleen D. Morse	21-Jul-1981
;		Change macro used for secondary bugchecks to SECBUG_CHECK.
;
;	V02-011	KDM0018		Kathleen D. Morse	09-Jul-1981
;		Add code to log secondary startup messages.
;
;	V02-010	KDM0017		Kathleen D. Morse	08-Jul-1981
;		Move all multi-processing data base locations to a new
;		module:  MPDAT.
;
;	V02-009	KDM0016		Kathleen D. Morse	07-Jul-1981
;		Add secondary request longword.
;
;	V02-008	KDM0015		Kathleen D. Morse	29-Jun-1981
;		Increase MPS$AL_MPMBASE to a vector of addresses so
;		that error bits can be cleared for all MA780s.
;
;	V02-007	KDM0012		Kathleen D. Morse	08-Jun-1981
;		Add code for power failure of secondary.
;
;	V02-006	KDM0006		Kathleen D. Morse	27-Mar-1981
;		Add INIT and STOP states for secondary processor.
;
;	V02-005	KDM0005		Kathleen D. Morse	25-Mar-1981
;		Add longword to be used as interlock for flushing cache.
;
;	V02-004	KDM0004		Kathleen D. Morse	26-Feb-1981
;		Add code for bugcheck handling and enable warm restart.
;
;	V02-003	KDM0003		Kathleen D. Morse	22-Sep-1980
;		Add code for XDELTA software interrupt routine.
;
;	V02-002	KDM0001		Kathleen D. Morse	04-Sep-1980
;		Replace copyright.
;
; 01	- 
;--

	.PAGE
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	$IPLDEF				; Define interrupt priority levels
	$LCKDEF				; Lock bit definitions
	$MPMDEF				; Define MA780 registers
	$MPSDEF				; Secondary processor states
	$PRDEF				; Define processor register numbers
	$RPBDEF				; Define restart parameter block offsets

TCSR		=	0		; Offset to terminal transmitter CSR
TDBR		=	2		; Offset to terminal transmitter DBR

CONTROL_S	=	19		; Decimal equivalent for cntl-S
CONTROL_Q	=	17		; Decimal equivalent for cntl-Q
CR		=	13		; Decimal equivalent of carriage-return
LF		=	10		; Decimal equivalent of line-feed

FPLA_VLOC	=	^O155		; Offset to FPLA version number location
PCS_VLOC	=	^O152		; Offset to PCS version number location
WCSP_VLOC	=	^O153		; Offset to WCS primary version location
WCSS_VLOC	=	^O154		; Offset to WCS secondary version loc

RESTRT_POWERUP	=	3		; Power recovery restart code
RESTRT_IVLISTK	=	4		; Interrupt stack not valid
RESTRT_DBLERR	=	5		; Double error restart code
RESTRT_HALT	=	6		; Halt restart code
RESTRT_ILLVEC	=	7		; Illegal vector code
RESTRT_NOUSRWCS	=	8		; No user WCS restart code
RESTRT_ERRHALT	=	9		; Error halt restart code
RESTRT_CHM	=	10		; CHMx with IS=1 restart code
 
	.LIST	MEB			; Show macro expansions
	.PAGE				;
	.SBTTL	EXE$MPSTART - Initialize secondary processor
;++
; Functional Description:
;
;	EXE$MPSTART is given control by the boot or restart command file
;	for a secondary processor startup.
;	Initial entry to EXE$MPSTART is made with memory
;	management disabled IPL=31 with the stack pointer set to the high
;	end of the page containing the restart control block.
;
; Calling Sequence:
;
;	JMP	@RPB$L_MPSTART-^X200(SP)
;
; Input Parameters:
;
;	SP - Address of RPB+^x200
;
;--

	.PSECT	$AAEXENONPAGED,PAGE	; Must be in page aligned psect
EXE$MPSTART::				; Initial entry point
5$:	MFPR	#PR$_TXCS,R6		; Get console transmitter status
	BBC	#7,R6,5$		; Wait until ready
	MTPR	#^XF03,#PR$_TXDB	; Send code to clear warmstart inhibit
6$:	MFPR	#PR$_TXCS,R6		; Get console transmitter status
	BBC	#7,R6,6$		; Wait until console accepts request
	MOVAB	W^VERSVECT,R5		; Get address of version vector
	MOVAB	W^MPS$GB_CPUDATA,R6	; Get address of secondary's cpu data
	MFPR	#PR$_SID,(R6)+		; Get system ID for secondary
10$:	MOVZBL	(R5)+,R1		; Get offset to version code
	BEQL	30$			; 0 ends the list of version codes
20$:	BSBW	GETCONLOC		; Ask console for value
	MOVB	R0,(R6)+		; Store it away
	BRB	10$			; Repeat for next version code
30$:	MOVAB	-512(SP),R5		; Compute base of RPB
	MOVL	RPB$L_SBR(R5),R4	; Get base of SPT
	MTPR	R4,#PR$_SBR		; Set SPT base register
	MTPR	RPB$L_SLR(R5),#PR$_SLR	;  and length register
;	MTPR	RPB$L_SISR(R5),#PR$_SISR; Restore Software interrupt state
	MTPR	W^MPS$GL_SCBB,#PR$_SCBB	; Restore pointer to System Control Block
;	MTPR	RPB$L_PCBB(R5),#PR$_PCBB; Restore pointer to current PCB
	MOVL	RPB$L_SVASPT(R5),R3	; Get virtual address of SPT
	MOVL	W^MPS$GL_STRTVA,R1	; VA in this physical page
	BICL	#^X80000000,R1		; Clear system bit
	ASHL	#-9,R1,R1		; and convert to VPN
	MOVAB	EXE$MPSTART,R0		; Physical address of EXE$MPSTART
	ASHL	#-9,R0,R0		; Convert to physical page number
	SUBL	R0,R1			; Compute delta VPN-PFN
	MOVAL	(R3)[R1],R3		; Now compute base address for P0PT
	MTPR	#^X10000,#PR$_P0LR	; Set dummy P0 length
	MTPR	R3,#PR$_P0BR		; Set base for P0 page table
	MOVL	W^MPS$GL_ISP,R6		; Get Saved interrupt stack pointer
	INVALID				; Clear translation buffer
	MTPR	#1,#PR$_MAPEN		; Enable memory management
	JMP	@W^MPS$GL_STRTVA	; Set PC to system space

MPS$STRTVA::				;
	MOVL	R6,SP			; Now restore correct stack pointer

	.IF	DF,MPDBGSWT
	BSBW	INI$BRK			;***** Initial secondary breakpoint
	.ENDC

9$:	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,10$ ; Flush cache queue
10$:	CMPL	W^MPS$GL_STATE,#MPS$K_INITSTATE ; Is secondary ready for init?
	BNEQ	9$			; Loop until primary sets 2ndary ready

	MOVAB	G^EXE$GB_CPUDATA+4,R5	; Point past SID field for primary
	MOVAB	W^MPS$GB_CPUDATA+4,R6	; Point past SID field for secondary
	CMPB	(R5)+,(R6)+		; Check FPLA version number
	BEQL	12$			; Br if secondary does matches primary
	CLRL	R11			; Indicate console terminal
	MOVAB	FPLA_MISMATCH,R1	; Get address of error message
	BSBW	MPS$OUTZSTRING		; Output message to secondary console
12$:	CMPB	(R5)+,(R6)+		; Check PCS version number
	BEQL	13$			; Br if secondary does matches primary
	CLRL	R11			; Indicate console terminal
	MOVAB	PCS_MISMATCH,R1		; Get address of error message
	BSBW	MPS$OUTZSTRING		; Output message to secondary console
13$:	CMPW	(R5)+,(R6)+		; Check WCS version number
	BEQL	14$			; Br if secondary does matches primary
	CLRL	R11			; Indicate console terminal
	MOVAB	WCS_MISMATCH,R1		; Get address of error message
	BSBW	MPS$OUTZSTRING		; Output message to secondary console
14$:	CMPB	W^MPS$GB_CPUDATA+3,#1	; Check that secondary is an 11/780
	BEQL	15$			; Br if secondary is an 11/780
	CLRL	R11			; Indicate console terminal
	MOVAB	CPU_NOT_780,R1		; Get address of error message
	BSBW	MPS$OUTZSTRING		; Output message to secondary console
15$:
	MTPR	#-<10*1000>,S^#PR$_NICR	; Load next interval register
	MTPR	#^X800000D1,S^#PR$_ICCS	; Clear error and start clock
	BSBW	MPS$MAINIT		; Initialze multi-port memory
 	MOVL	W^MPS$AL_MPMBASE,R0	; Get base for MA780 registers
	MOVL	MPM$L_CSR(R0),R1	; Fetch configuration register
	EXTZV	#MPM$V_CSR_PORT,-	; Get port number
		#MPM$S_CSR_PORT,R1,R1	;
	ASHL	R1,#^X1111,R2		; Generate proper trigger mask
	ASHL	#MPM$V_IIR_CTL,R2,W^MPS$GL_SCNDMSKT ; Align and store it
	MULL	#4,R1			; Compute interrupt enable bit #
	ASHL	R1,#^XF,W^MPS$GL_SCNDMSKC ; Generate clear mask
	MOVL	W^MPS$AL_MPMBASE,R0	; Get base adr of MA780 registers
	MOVL	W^MPS$GL_SCNDMSKC,MPM$L_IIR(R0) ; Clear any pending interrupt
	SETIPL	#IPL$_SYNCH		; Lower IPL for a short time
	SETIPL	#IPL$_POWER		; so that waiting powerfails can occur
	CMPL	W^MPS$GL_SAVEDAP,#RESTRT_POWERUP ; Is this a power recovery?
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,18$ ; Flush cache
18$:	BBC	#MPS$V_STOPREQ,W^MPS$GL_STOPFLAG,19$ ; Halt if STOP/CPU request
	HALT
19$:
	BEQL	110$			; Br if yes, power recovery
	BLSS	120$			; Br if normal cold startup
	CASE	W^MPS$GL_SAVEDAP,<-	; Else switch on restart code
		20$,-			; 4 => Interrupt stack not valid
		30$,-			; 5 => CPU double error halt
		40$,-			; 6 => Halt instruction
		50$,-			; 7 => Illegal I/E vector
		60$,-			; 8 => No user WCS
		70$,-			; 9 => Error pending on Halt
		80$,-			;10 => CHM on ISTK halt
		90$,-			;11 => CHM vector <1:0> .NE. 0
		100$,-			;12 => SCB physical read error
		>,LIMIT=#RESTRT_IVLISTK	;
	SECBUG_CHECK	MPUNKRSTRT,FATAL ; Unknown restart code
20$:	SECBUG_CHECK	MPIVLISTK,FATAL	; Invalid interrupt stack
30$:	SECBUG_CHECK	MPDBLERR,FATAL	; Double error halt
40$:	SECBUG_CHECK	MPHALT,FATAL	; Halt instruction
50$:	SECBUG_CHECK	MPILLVEC,FATAL	; Illegal Vector code
60$:	SECBUG_CHECK	MPNOUSRWCS,FATAL ; No user WCS for vector
70$:	SECBUG_CHECK	MPERRHALT,FATAL	; Error pending on halt
80$:	SECBUG_CHECK	MPCHMONIS,FATAL	; CHM on interrupt stack
90$:	SECBUG_CHECK	MPCHMVEC,FATAL	; CHM vector <1:0> .NE. 0
100$:	SECBUG_CHECK	MPSCBRDERR,FATAL ; SCB physical read error.
110$:	BSBW	MPS$WARMSTART		; Log power recovery in the error log
	BRB	130$			; Continue with common code
120$:	BSBW	MPS$COLDSTART		; Log normal boot of secondary
130$:	CLRL	W^MPS$GL_PFAILTIM	; Indicate no power fail in progress
	SETIPL	#IPL$_SYNCH		; Drop IPL
	MOVL	#MPS$K_IDLESTATE,W^MPS$GL_STATE ; Indicate ready for work
	BRW	MPS$MPSCHED1		; Go ask for something to do
;
; These data fields are accessed by the secondary initialization
; routine before it has memory management enabled.  They MUST reside
; in the same physical page as the code, since non-paged pool is not
; guaranteed to be physically contiguous.
;
MPS$GL_STRTVA::				; Virtual address of starting instr
	.LONG	MPS$STRTVA		;
MPS$GL_ISP::				; Start of interrupt stack
	.LONG	MPS$AL_INTSTK		;
MPS$GL_SCBB::				; Physical address of SCB base
	.LONG	0			;
MPS$GB_CPUDATA::			; Secondary processor cpu data
	.LONG	0			;  SID
CPUVERS:
	.LONG	0			;  FPLA, PCS, WCS versions
CPUVERSLEN=.-CPUVERS
	.PAGE
	.SBTTL	GETCONLOC - Routine to read console information location
;++
;
; Functional Description:
;
;	GETCONLOC is used to access the locations in console memory containing
;	values such as WCS and FPLA version numbers.
;
; Input Parameters:
;
;	R1 - Location code
;
; Output Parameters:
;
;	R0 - Value contained in console cell
;--
GETCONLOC:				;
	MOVAB	^X300(R1),R1		; Set code to read console memory
10$:	MFPR	#PR$_TXCS,R0		; Get transmit status register
	BBC	#7,R0,10$		; Wait for done
	MTPR	R1,#PR$_TXDB		; Request data from console
20$:	MFPR	#PR$_TXCS,R0		; Read transmit status register
	BBC	#7,R0,20$		; Wait for done
30$:	MFPR	#PR$_RXCS,R0		; Get receiver status
	BBC	#7,R0,30$		; And wait for done
	MFPR	#PR$_RXDB,R0		; Now read data value
	CMPZV	#8,#4,R0,#3		; Is this a valid response?
;	BNEQ	10$			; No, try again
	NOP				;****TEMP
	NOP				;****TEMP, until 780 console works
	MOVZBL	R0,R0			; Zero extend data
	RSB				;
VERSVECT:				; Vector of version offsets
	.BYTE	FPLA_VLOC		; FPLA Version offset
	.BYTE	PCS_VLOC		; PCS Version offset
	.BYTE	WCSS_VLOC		; WCS Secondary version offset
	.BYTE	WCSP_VLOC		; WCS Primary version offset
VERSVECLEN=.-VERSVECT
	ASSUME VERSVECLEN EQ CPUVERSLEN
	.BYTE	0			; End of list
ONE_PAGE:
	ASSUME <ONE_PAGE - EXE$MPSTART> LE 512
	.PAGE
	.SBTTL MPS$OUTCHAR - Output character
;+
;
; Functional Description:
;
;	This routine is called via a JSB to output a character to a
;	specified device.
;
; Inputs:
;
;	R0 = Character to output
;	R11 = Output CSR address (0 implies console terminal)
;
; OUTPUTS:
;
;	Character is output to the specified device.  If the character
;	is a carriage return and the output device is the console terminal,
;	then a sufficient number of fill characters are also output.
;-
 
MPS$OUTCHAR::				; Output a character
	PUSHL	R1			; Get a scratch register
	TSTL	R11			; Is this the console terminal?
	BNEQ	20$			; Br if not console terminal
	MFPR	#PR$_RXCS,R1		; Read receive control register
	BBS	#7,R1,80$		; Branch if received a character
10$:
	MFPR	#PR$_TXCS,R1		; Read transmit control register
	BBC	#7,R1,10$		; Loop until ready
	BEQL	10$			; Br if not ready
	MTPR	R0,#PR$_TXDB		; Output character
	BRB	30$			;
20$:	BITW	#^X080,TCSR(R11)	; Is device ready?
	BEQL	20$			; Br if not ready
	MOVB	R0,TDBR(R11)		; Output character
30$:	CMPB	#CR,R0			; Is this a carriage return?
	BNEQ	60$			; Br if not
	TSTL	R11			; Is this the console terminal?
	BNEQ	60$			; Br if not
40$:	CLRL	R0			; Set fill character
	PUSHL	#2			; Set fill count
50$:	BSBB	MPS$OUTCHAR		; Output a fill character
	SOBGTR	(SP),50$		; Any more fills to output?
	TSTL	(SP)+			; Clean stack
60$:	POPL	R1			; Restore scratch register
	RSB
;
; Received an input character while output was taking place.  Check to see
; if it was an XOFF (Control-S) character.
;
80$:
	MFPR	#PR$_RXDB,R1		; Get the character
	CMPZV	#0,#7,R1,#CONTROL_S	; Is it a control-S?
	BNEQ	10$			; Br on not, to output
;
; Received an XOFF (Control-S) character.  Wait until receiving an XON
; before continuing.  Throw away any input characters that arrive before
; the XON (Control-Q).
;
90$:
	MFPR	#PR$_RXCS,R1		; Have we received a character?
	BBC	#7,R1,90$		; Br on no, loop until we have
	MFPR	#PR$_RXDB,R1		; Get the input character
	CMPZV	#0,#7,R1,#CONTROL_Q	; Is it a control-Q?
	BNEQ	90$			; Br on no, go wait for another char
	BRB	10$			; Got it.  Now continue output
	.PAGE
	.SBTTL	 MPS$OUTZSTRING - OUTPUT ZERO TERMINATED STRING
;+
;
; Functional Description:
;
;	This routine is called via a JSB to output a string that
;	is terminated by a zero byte.
;
; Inputs:
;
;	R1 = Address of zero terminated string
;	R11 = Output device CSR address
;
; OUTPUTS:
;
;	Characters from the specified string are output until a
;	zero byte is encountered.
;-
 
MPS$OUTZSTRING::			; Output zero terminated string
	MOVZBL	#255,R2			; Set maximum allowable string length
10$:	MOVZBL	(R1)+,R0		; Get next character from input string
	BEQL	20$			; Br if end of string
	BSBB	MPS$OUTCHAR		; Output character
	SOBGTR	R2,10$			; Any more characters to output?
20$:	RSB				;
	.PAGE
	.SBTTL	Secondary processor's error messages
;
; This is the ascii text for all error messages output to by
; the secondary processor, on its console terminal.
;
FPLA_MISMATCH:
	.ASCII	<CR><LF>
	.ASCIZ	\%MP-F-FPLA, FPLA mismatch with primary processor\
PCS_MISMATCH:
	.ASCII	<CR><LF>
	.ASCIZ	\%MP-F-PCS, PCS mismatch with primary processor\
WCS_MISMATCH:
	.ASCII	<CR><LF>
	.ASCIZ	\%MP-F-WCS, WCS mismatch with primary processor\
CPU_NOT_780:
	.ASCII	<CR><LF>
	.ASCIZ	\%MP-F-WCS, secondary processor is not an 11/780\
	.PAGE
	.SBTTL	INI$BRK Initial Breakpoint
;++
; FUNCTIONAL DESCRIPTION:
;
;	INI$BRK is a routine to give control to XDELTA for debugging purposes.
;--

INI$BRK::				; Initial breakpoint
	BPT				;
	RSB				;




;++
; FUNCTIONAL DESCRIPTION:
;
; MPS$XDELTAINT is a routine to allow XDELTA to get control
; via the software interrupt ^XF.
;
;--

	.ALIGN	LONG
MPS$XDELTAINT::				; XDELTA software interrupt routine
	BSBB	INI$BRK			; Call breakpoint routine
	REI				; Return from software interrupt
	.END
