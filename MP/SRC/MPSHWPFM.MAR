	.TITLE MPSHWPFM
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Multi-processor performance measurement display tool
;
; Abstract:  This program displays the multi-processor performance measurements.
;
; Environment: MODE=Kernel 
;
; Author:  Kathleen D. Morse, Creation date:  27-Aug-1981
;
; Modified by:
;
;	V03-001	KDM0088		Kathleen D. Morse	5-Apr-1981
;		Fix performance measurement display to work with new
;		secondary null time accumulation method.
;
;--

;
; Include files:
;

;
; MACROS:
;

;
; Equated Symbols:
;
	$PCBDEF					;Process control block
	$PHDDEF					;Process header block

;
; Histogram offsets
;

HST_L_CELLCOUNT = 0				;Count of cells in histogram
HST_L_CELLWIDTH = 4				;Width of each cell in histo
HST_Q_OVRFLOW = 8				;Offset to overflow accumulator
HST_L_FIRSTCELL = 16				;Offset to first cell in histo

	.PSECT	RW_DATA LONG,WRT,NOEXE

PFM_DATA::
	.BLKL	^X0ACC				;Performance data area
CPU2TIME_DATA::					;Secondary CPU time spent in
	.BLKL	6				; each mode (K,E,S,U,I,C)
CPU2_NULLTIME:					;Secondary CPU null clock ticks
	.LONG	0				;
CPU1TIME_DATA::					;Primary CPU time spent in
	.BLKL	6				; each mode (K,E,S,U,I,C)
NULL_JOB_TIME::					;Clock ticks for null job
	.LONG	0
NULL_JOB_TIME_D::				;Clock ticks for null job
	.LONG	0				; in double format

TEMP::
	.LONG	0
	.LONG	0
TEMP1::
	.LONG	0
	.LONG	0
TEMP2::
	.LONG	0
	.LONG	0
TWO_32::
	.LONG	2@32
HISTO_TOTAL::					;Accumulator for histogram
	.LONG	0				; used for % calculations
	.LONG	0

HISTO_PERCENTS::				;Array to hold histogram
	.BLKL	208				; percentages - 100 dbl values

TIME_SAMPLE::					;Total amount of clock ticks
	.LONG	0				; accumulated in this sample
	.LONG	0

TIME1_SAMPLE_D::				;Total accum clock ticks
	.LONG	0				; in this sample for primary
	.LONG	0				; in double format

TIME2_SAMPLE_D::				;Total accum of clock ticks
	.LONG	0				; in this sample for secondary
	.LONG	0				; in double format

CPU1TIME_PERCENTS::				;Percentage of cpu time spent
	.BLKL	14				; in each mode (K,E,S,U,I,C)
CPU2TIME_PERCENTS::				;Percentage of cpu time spent
	.BLKL	14				; in each mode (K,E,S,U,I,C)


ASCTIM_LENGTH::	.LONG	0			;Length of ascii time

ASCTIM_BUFFER::
	.BLKB	50

ASCTIM_BUFFER_DSC::
	.LONG	50
	.ADDRESS	ASCTIM_BUFFER

ASCTIM_DSC_PTR::
	.ADDRESS	ASCTIM_BUFFER_DSC

ASCII1_LENGTH::	.LONG	0			;Length of ascii text

ASCII1_BUFFER::
	.BLKB	50

ASCII1_BUFFER_DSC::
	.LONG	50
	.ADDRESS	ASCII1_BUFFER

ASCII1_DSC_PTR::
	.ADDRESS	ASCII1_BUFFER_DSC

ASCII2_LENGTH::	.LONG	0			;Length of ascii text

ASCII2_BUFFER::
	.BLKB	50

ASCII2_BUFFER_DSC::
	.LONG	50
	.ADDRESS	ASCII2_BUFFER

ASCII2_DSC_PTR::
	.ADDRESS	ASCII2_BUFFER_DSC

OUTPUT_LENGTH::	.LONG	0

OUTPUT_BUFFER::
	.BLKB	200

OUTPUT_BUFFER_DSC::
	.LONG	200
	.ADDRESS	OUTPUT_BUFFER

HISTO_1_FAO_PTR::
	.LONG	0


	.PSECT	RO_DATA LONG,NOWRT,NOEXE

HISTO_RSCH_DSC::
	.ASCID	\!/!/TIME SECONDARY SPENT WAITING FOR RESCHEDULE TO COMPLETE!/\

HISTO_TIME_DSC::
	.ASCID	\!/!/TIME PROCESSES SPENT ON SECONDARY!/\

HISTO_SRV_DSC::
	.ASCID	\!/!/SYSTEM SERVICE REQUESTED WHILE ON SECONDARY!/\

HISTO_CTX_DSC::
	.ASCID	\!/!/REASONS FOR CONTEXT SWITCH OFF SECONDARY!/\

HISTO_RSCH_HDR::
	.ADDRESS	HISTO_RSCH_DSC
	.ADDRESS	HISTO_1_SUBTITLE3
	.ADDRESS	HISTO_1_SUBTITLE4

HISTO_TIME_HDR::
	.ADDRESS	HISTO_TIME_DSC
	.ADDRESS	HISTO_1_SUBTITLE
	.ADDRESS	HISTO_1_SUBTITLE2
HISTO_SRV_HDR::
	.ADDRESS	HISTO_SRV_DSC
HISTO_CTX_HDR::
	.ADDRESS	HISTO_CTX_DSC

HIST_DSC_PTR::
	.ADDRESS	HISTO_COUNT
	.ADDRESS	HISTO_WIDTH
HIST_LIN_PTR::
	.ADDRESS	HISTO_LINE
HIST_OVR_PTR::
	.ADDRESS	HISTO_OVERFLOW

HISTO_COUNT::
	.ASCID	\!/    Number of histogram cells:  !ZL \

HISTO_WIDTH::
	.ASCID	\!/    Width of histogram cell:   !ZL \

HISTO_LINE::
	.ASCID	\!_!AC!_!ZL\

HISTO_OVERFLOW::
	.ASCID	\Overflow cell!_!ZL!_!AS\

CPUTIM_DSC_TOT::
	.ASCID	\!/!_Total elapsed time in sample interval = !AS\

HISTO_1_SUBTITLE::
	.ASCID	\    Cell              Cell        Accum        Pgfl    CHMK    Other      Last \

HISTO_1_SUBTITLE2::
	.ASCID	\   Limits            Count          %           cnt     cnt     cnt     Sys Srv!/\

HISTO_1_SUBTITLE3::
	.ASCID	\    Cell              Cell        Accum\

HISTO_1_SUBTITLE4::
	.ASCID	\   Limits            Count          %!/\

TIME_DSC_PTR::
	.ADDRESS	CPUTIM_DSC_TOT

TITLE::
	.ASCID	\!_MULTI-PROCESSING PERFORMANCE MEASUREMENTS ON SECONDARY PROCESSOR!/\

TITLE_PTR::
	.ADDRESS	TITLE

CPUTIM_DSC_K::
	.ASCID	\!/!_Kernel mode!_!_!AS!_!AS\
CPUTIM_DSC_E::
	.ASCID	\!_Exec mode!_!_!AS!_!AS\
CPUTIM_DSC_S::
	.ASCID	\!_Super mode!_!_!AS!_!AS\
CPUTIM_DSC_U::
	.ASCID	\!_User mode!_!_!AS!_!AS\
CPUTIM_DSC_I::
	.ASCID	\!_On interrupt Stack!_!AS!_!AS\
CPUTIM_DSC_C::
	.ASCID	\!_Compatability mode!_!AS!_!AS\
CPUTIM_DSC_N::
	.ASCID	\!_Idle!_!_!_!AS!_!AS\

TIME_ARRAY_PTR::
	.ADDRESS	TIME_1_DSC
	.ADDRESS	TIME_2_DSC

TIME_1_DSC::
	.ASCID	\!/!/     !_Time spent in different processor modes\
TIME_2_DSC::
	.ASCID	\!/!_    Mode!_!_ Primary!_ Secondary\

CPUTIM_DSC_PTR::
	.ADDRESS	CPUTIM_DSC_K
	.ADDRESS	CPUTIM_DSC_E
	.ADDRESS	CPUTIM_DSC_S
	.ADDRESS	CPUTIM_DSC_U
	.ADDRESS	CPUTIM_DSC_I
	.ADDRESS	CPUTIM_DSC_C
	.ADDRESS	CPUTIM_DSC_N

CNT_CTXSW_DSC::
	.ASCID	\!/!/!_Number of context switches on secondary = !ZL\
CNT_RESCHD_DSC::
	.ASCID	\!_Number of reschedule requests made by secondary = !ZL\
CNT_SCHDS_DSC::
	.ASCID	\!_Number of successful reschedule requests = !ZL\
CNT_EXCHG_DSC::
	.ASCID	\!_Number of exchanges from primary to secondary = !ZL\
CNT_ASTSC_DSC::
	.ASCID	\!_Number of reschedules done via exec mode AST = !ZL\
CNT_INVAL_DSC::
	.ASCID	\!_Number of invalidates requested = !ZL\
CNT_IVWAIT_DSC::
	.ASCID	\!_Number of invalidate wait loops executed = !ZL\

CNTRS_DSC_PTR::
	.ADDRESS	CNT_CTXSW_DSC
	.ADDRESS	CNT_RESCHD_DSC
	.ADDRESS	CNT_SCHDS_DSC
	.ADDRESS	CNT_EXCHG_DSC
	.ADDRESS	CNT_ASTSC_DSC
	.ADDRESS	CNT_INVAL_DSC
	.ADDRESS	CNT_IVWAIT_DSC

CLRAST:	.ASCIC	\ none \
ADJSTK:	.ASCIC	\ADJSTK\
ADJWSL:	.ASCIC	\ADJWSL\
ALCDNP:	.ASCIC	\ALCDNP\
ALLOC:	.ASCIC	\ALLOC\
ASCEFC:	.ASCIC	\ASCEFC\
ASSIGN:	.ASCIC	\ASSIGN\
CANCEL:	.ASCIC	\CANCEL\
CANTIM:	.ASCIC	\CANTIM\
CANWAK:	.ASCIC	\CANWAK\
CRMPSC:	.ASCIC	\CRMPSC\
CLRPAR:	.ASCIC	\CLRPAR\
CMKRNL:	.ASCIC	\CMKRNL\
CLREF:	.ASCIC	\CLREF\
CNTREG:	.ASCIC	\CNTREG\
GETPTI:	.ASCIC	\GETPTI\
CRELOG:	.ASCIC	\CRELOG\
CREMBX:	.ASCIC	\CREMBX\
CREPRC:	.ASCIC	\CREPRC\
CRETVA:	.ASCIC	\CRETVA\
DACEFC:	.ASCIC	\DACEFC\
DALLOC:	.ASCIC	\DALLOC\
DASSGN:	.ASCIC	\DASSGN\
DCLAST:	.ASCIC	\DCLAST\
DCLEXH:	.ASCIC	\DCLEXH\
DELLOG:	.ASCIC	\DELLOG\
DELMBX:	.ASCIC	\DELMBX\
DELPRC:	.ASCIC	\DELPRC\
DELTVA:	.ASCIC	\DELTVA\
DGBLSC:	.ASCIC	\DGBLSC\
DLCDNP:	.ASCIC	\DLCDNP\
DLCEFC:	.ASCIC	\DLCEFC\
UPDSEC:	.ASCIC	\UPDSEC\
SNDERR:	.ASCIC	\SNDERR\
EXIT:	.ASCIC	\EXIT\
EXPREG:	.ASCIC	\EXPREG\
FORCEX:	.ASCIC	\FORCEX\
GETJPP:	.ASCIC	\GETJPP\
GTCHAN:	.ASCIC	\GTCHAN\
HIBER:	.ASCIC	\HIBER\
LCKPAG:	.ASCIC	\LCKPAG\
LKWSET:	.ASCIC	\LKWSET\
MGBLSC:	.ASCIC	\MGBLSC\
PURGWS:	.ASCIC	\PURGWS\
QIO:	.ASCIC	\QIO\
READEF:	.ASCIC	\READEF\
RESUME:	.ASCIC	\RESUME\
RUNDWN:	.ASCIC	\RUNDWN\
SCHDWK:	.ASCIC	\SCHDWK\
SETAST:	.ASCIC	\SETAST\
SETEF:	.ASCIC	\SETEF\
SETEXV:	.ASCIC	\SETEXV\
SETPRN:	.ASCIC	\SETPRN\
SETPRA:	.ASCIC	\SETPRA\
SETIMR:	.ASCIC	\SETIMR\
SETPRI:	.ASCIC	\SETPRI\
SETPRT:	.ASCIC	\SETPRT\
SETRWM:	.ASCIC	\SETRWM\
SETSFM:	.ASCIC	\SETSFM\
SETSWM:	.ASCIC	\SETSWM\
SUSPND:	.ASCIC	\SUSPND\
TRNLOG:	.ASCIC	\TRNLOG\
ULKPAG:	.ASCIC	\ULKPAG\
ULWSET:	.ASCIC	\ULWSET\
WAITFR:	.ASCIC	\WAITFR\
WAKE:	.ASCIC	\WAKE\
WFLAND:	.ASCIC	\WFLAND\
WFLOR:	.ASCIC	\WFLOR\
BRDCST:	.ASCIC	\BRDCST\
DCLCMH:	.ASCIC	\DCLCMH\
SETPFM:	.ASCIC	\SETPFM\
DERLMB:	.ASCIC	\DERLMB\
CANEXH:	.ASCIC	\CANEXH\
GETCHN:	.ASCIC	\GETCHN\
GETDEV:	.ASCIC	\GETDEV\
GETJPI:	.ASCIC	\GETJPI\
SETIME:	.ASCIC	\SETIME\
SETPRV:	.ASCIC	\SETPRV\
ENQ:	.ASCIC	\ENQ\
DEQ:	.ASCIC	\DEQ\
SETSSF:	.ASCIC	\SETSSF\
SETSTK:	.ASCIC	\SETSTK\

HIST_SRV_PTR::
	.ADDRESS	CLRAST
	.ADDRESS	ADJSTK
	.ADDRESS	ADJWSL
	.ADDRESS	ALCDNP
	.ADDRESS	ALLOC
	.ADDRESS	ASCEFC
	.ADDRESS	ASSIGN
	.ADDRESS	CANCEL
	.ADDRESS	CANTIM
	.ADDRESS	CANWAK
	.ADDRESS	CRMPSC
	.ADDRESS	CLRPAR
	.ADDRESS	CMKRNL
	.ADDRESS	CLREF
	.ADDRESS	CNTREG
	.ADDRESS	GETPTI
	.ADDRESS	CRELOG
	.ADDRESS	CREMBX
	.ADDRESS	CREPRC
	.ADDRESS	CRETVA
	.ADDRESS	DACEFC
	.ADDRESS	DALLOC
	.ADDRESS	DASSGN
	.ADDRESS	DCLAST
	.ADDRESS	DCLEXH
	.ADDRESS	DELLOG
	.ADDRESS	DELMBX
	.ADDRESS	DELPRC
	.ADDRESS	DELTVA
	.ADDRESS	DGBLSC
	.ADDRESS	DLCDNP
	.ADDRESS	DLCEFC
	.ADDRESS	UPDSEC
	.ADDRESS	SNDERR
	.ADDRESS	EXIT
	.ADDRESS	EXPREG
	.ADDRESS	FORCEX
	.ADDRESS	GETJPP
	.ADDRESS	GTCHAN
	.ADDRESS	HIBER
	.ADDRESS	LCKPAG
	.ADDRESS	LKWSET
	.ADDRESS	MGBLSC
	.ADDRESS	PURGWS
	.ADDRESS	QIO
	.ADDRESS	READEF
	.ADDRESS	RESUME
	.ADDRESS	RUNDWN
	.ADDRESS	SCHDWK
	.ADDRESS	SETAST
	.ADDRESS	SETEF
	.ADDRESS	SETEXV
	.ADDRESS	SETPRN
	.ADDRESS	SETPRA
	.ADDRESS	SETIMR
	.ADDRESS	SETPRI
	.ADDRESS	SETPRT
	.ADDRESS	SETRWM
	.ADDRESS	SETSFM
	.ADDRESS	SETSWM
	.ADDRESS	SUSPND
	.ADDRESS	TRNLOG
	.ADDRESS	ULKPAG
	.ADDRESS	ULWSET
	.ADDRESS	WAITFR
	.ADDRESS	WAKE
	.ADDRESS	WFLAND
	.ADDRESS	WFLOR
	.ADDRESS	BRDCST
	.ADDRESS	DCLCMH
	.ADDRESS	SETPFM
	.ADDRESS	DERLMB
	.ADDRESS	CANEXH
	.ADDRESS	GETCHN
	.ADDRESS	GETDEV
	.ADDRESS	GETJPI
	.ADDRESS	SETIME
	.ADDRESS	SETPRV
	.ADDRESS	ENQ
	.ADDRESS	DEQ
	.ADDRESS	SETSSF
	.ADDRESS	SETSTK

SCB_000:	.ASCIC	\Unused, Reserved to Digital\
SCB_004:	.ASCIC	\Machine check handler\
SCB_008:	.ASCIC	\Kernel stack not valid halt\
SCB_00C:	.ASCIC	\Power fail interrupt\
SCB_010:	.ASCIC	\Reserved/privileged instruction fault\
SCB_014:	.ASCIC	\Customer reserved instruction fault\
SCB_018:	.ASCIC	\Reserved operand fault/halt\
SCB_01C:	.ASCIC	\Reserved addressing mode fault\
SCB_020:	.ASCIC	\Access control violation fault\
SCB_024:	.ASCIC	\Translation not valid fault\
SCB_028:	.ASCIC	\Tbit fault\
SCB_02C:	.ASCIC	\Breakpoint fault\
SCB_030:	.ASCIC	\Compatibility fault\
SCB_034:	.ASCIC	\Arithmetic trap\
SCB_038:	.ASCIC	\Unused - offset 38\
SCB_03C:	.ASCIC	\Unused - offset 3C\
SCB_040:	.ASCIC	\CHMK trap\
SCB_044:	.ASCIC	\CHME trap\
SCB_048:	.ASCIC	\CHMS trap\
SCB_04C:	.ASCIC	\CHMU trap\
SCB_050:	.ASCIC	\Unused - offset 50\
SCB_054:	.ASCIC	\Cpu-dependent fault\
SCB_058:	.ASCIC	\Cpu-dependent fault\
SCB_05C:	.ASCIC	\Cpu-dependent fault\
SCB_060:	.ASCIC	\Cpu-dependent fault\
SCB_064:	.ASCIC	\Unused - offset 64\
SCB_068:	.ASCIC	\Unused - offset 68\
SCB_06C:	.ASCIC	\Unused - offset 6C\
SCB_070:	.ASCIC	\Unused - offset 70\
SCB_074:	.ASCIC	\Unused - offset 74\
SCB_078:	.ASCIC	\Unused - offset 78\
SCB_07C:	.ASCIC	\Unused - offset 7C\
SCB_080:	.ASCIC	\Unused - offset 80\
SCB_084:	.ASCIC	\Software level 1 interrupt\
SCB_088:	.ASCIC	\Software level 2 interrupt - AST delivery\
SCB_08C:	.ASCIC	\Software level 3 interrupt\
SCB_090:	.ASCIC	\Software level 4 interrupt\
SCB_094:	.ASCIC	\Software level 5 interrupt\
SCB_098:	.ASCIC	\Software level 6 interrupt\
SCB_09C:	.ASCIC	\Software level 7 interrupt - Quantum end\
SCB_0A0:	.ASCIC	\Software level 8 interrupt\
SCB_0A4:	.ASCIC	\Software level 9 interrupt\
SCB_0A8:	.ASCIC	\Software level 10 interrupt\
SCB_0AC:	.ASCIC	\Software level 11 interrupt\
SCB_0B0:	.ASCIC	\Software level 12 interrupt\
SCB_0B4:	.ASCIC	\Software level 13 interrupt\
SCB_0B8:	.ASCIC	\Software level 14 interrupt\
SCB_0BC:	.ASCIC	\Software level 15 interrupt\
SCB_0C0:	.ASCIC	\Interval timer\
SCB_0C4:	.ASCIC	\Unused - offset C4\
SCB_0C8:	.ASCIC	\Unused - offset C8\
SCB_0CC:	.ASCIC	\Unused - offset CC\
SCB_0D0:	.ASCIC	\Unused - offset D0\
SCB_0D4:	.ASCIC	\Unused - offset D4\
SCB_0D8:	.ASCIC	\Unused - offset D8\
SCB_0DC:	.ASCIC	\Unused - offset DC\
SCB_0E0:	.ASCIC	\Unused - offset E0\
SCB_0E4:	.ASCIC	\Unused - offset E4\
SCB_0E8:	.ASCIC	\Unused - offset E8\
SCB_0EC:	.ASCIC	\Unused - offset EC\
SCB_0F0:	.ASCIC	\Unused - offset F0\
SCB_0F4:	.ASCIC	\Unused - offset F4\
SCB_0F8:	.ASCIC	\Console interrupt for input\
SCB_0FC:	.ASCIC	\Console interrupt for output\

HIST_CTX_PTR::
	.ADDRESS	SCB_000
	.ADDRESS	SCB_004
	.ADDRESS	SCB_008
	.ADDRESS	SCB_00C
	.ADDRESS	SCB_010
	.ADDRESS	SCB_014
	.ADDRESS	SCB_018
	.ADDRESS	SCB_01C
	.ADDRESS	SCB_020
	.ADDRESS	SCB_024
	.ADDRESS	SCB_028
	.ADDRESS	SCB_02C
	.ADDRESS	SCB_030
	.ADDRESS	SCB_034
	.ADDRESS	SCB_038
	.ADDRESS	SCB_03C
	.ADDRESS	SCB_040
	.ADDRESS	SCB_044
	.ADDRESS	SCB_048
	.ADDRESS	SCB_04C
	.ADDRESS	SCB_050
	.ADDRESS	SCB_054
	.ADDRESS	SCB_058
	.ADDRESS	SCB_05C
	.ADDRESS	SCB_060
	.ADDRESS	SCB_064
	.ADDRESS	SCB_068
	.ADDRESS	SCB_06C
	.ADDRESS	SCB_070
	.ADDRESS	SCB_074
	.ADDRESS	SCB_078
	.ADDRESS	SCB_07C
	.ADDRESS	SCB_080
	.ADDRESS	SCB_084
	.ADDRESS	SCB_088
	.ADDRESS	SCB_08C
	.ADDRESS	SCB_090
	.ADDRESS	SCB_094
	.ADDRESS	SCB_098
	.ADDRESS	SCB_09C
	.ADDRESS	SCB_0A0
	.ADDRESS	SCB_0A4
	.ADDRESS	SCB_0A8
	.ADDRESS	SCB_0AC
	.ADDRESS	SCB_0B0
	.ADDRESS	SCB_0B4
	.ADDRESS	SCB_0B8
	.ADDRESS	SCB_0BC
	.ADDRESS	SCB_0C0
	.ADDRESS	SCB_0C4
	.ADDRESS	SCB_0C8
	.ADDRESS	SCB_0CC
	.ADDRESS	SCB_0D0
	.ADDRESS	SCB_0D4
	.ADDRESS	SCB_0D8
	.ADDRESS	SCB_0DC
	.ADDRESS	SCB_0E0
	.ADDRESS	SCB_0E4
	.ADDRESS	SCB_0E8
	.ADDRESS	SCB_0EC
	.ADDRESS	SCB_0F0
	.ADDRESS	SCB_0F4
	.ADDRESS	SCB_0F8
	.ADDRESS	SCB_0FC

HIST_TIME_DSC::
	.ASCID	\!ZL to !ZL microsec  !_!ZL!_!AS!_!ZL!_!ZL!_!ZL!_!AC\

HIST_RSCH_DSC::
	.ASCID	\!ZL to !ZL microsec  !_!ZL!_!AS\

	.PSECT	CODE BYTE,NOWRT,EXE
SHWPFM::
	.ENABL	LSB
	.WORD	0
	$CMKRNL_S	GETDATA
	BLBS	R0,10$
	BRW	ERROR
;
; GETDATA - This routine goes into kernel mode and copies the performance
; data into a local buffer.
;
GETDATA::
	.WORD	^M<R2,R3,R4,R5,R6>
	CLRL	R0				;Assume failure
	MOVL	G^EXE$GL_MP,R6			;Get adr of loaded MP code
	BEQL	ERR_EXIT			;Br if MP not loaded
	ADDL3	#PFM$L_START,R6,R0		;Find start of perf meas data
	MOVL	(R0),R1				;Get size of performance data
	MOVC3	R1,(R0),PFM_DATA		;Copy perf meas data to buffer
	ASSUME	CPU2_NULLTIME EQ <CPU2TIME_DATA + 24>
	ADDL3	#MPS$AL_CPUTIME,R6,R0		;Get adr of cpu time mode % vec
	MOVZBL	#28,R1				;Seven longwords of data
	MOVC3	R1,(R0),CPU2TIME_DATA		;Copy cpu time mode % data
	MOVC3	#24,G^PMS$GL_KERNEL,CPU1TIME_DATA ;Get cpu time mode % data
	MOVAB	G^SCH$GL_NULLPCB,R0		;Get address of null job's pcb
	MOVL	PCB$L_PHD(R0),R0		;Get address of null job's phd
	MOVL	PHD$L_CPUTIM(R0),NULL_JOB_TIME	;Copy accum null job cpu time
	MOVZBL	#1,R0				;Set success status
ERR_EXIT:
	RET
;
; NOW FORMAT AND OUTPUT DATA.
;
10$:
	MOVZBL	#1,R7				;Number of one liners to output
	MOVAB	TITLE_PTR,R8			;Address of FAO cmd descriptor
	MOVAB	PFM_DATA,R9			;Address of data to output
	BSBW	OUTPUT_LINE			;Call to output one line

	ASSUME	CPU2_NULLTIME EQ <CPU2TIME_DATA + 24>
	ASSUME	NULL_JOB_TIME EQ <CPU1TIME_DATA + 24>
	MOVZBL	#5,R0				;Get number of cpu time cells
	CLRD	TIME1_SAMPLE_D			;Initialize cpu1 time sample
	CLRD	TIME2_SAMPLE_D			;Initialize cpu2 time sample
	MOVAB	CPU1TIME_DATA,R4		;Address of cpu time data
	MOVAB	CPU2TIME_DATA,R5		;Address of cpu time data
	MOVAB	CPU1TIME_PERCENTS,R8		;Address for % data
	MOVAB	CPU2TIME_PERCENTS,R9		;Address for % data
30$:	ADDL	(R5)[R0],TIME_SAMPLE		;Accumulate total time measured
	CVTLD	(R4)[R0],(R8)[R0]		;Convert time to double format
	CVTLD	(R5)[R0],(R9)[R0]		;Convert time to double format
	ADDD	(R9)[R0],TIME1_SAMPLE_D		;Accum cpu1 sample time in dbl
	ADDD	(R8)[R0],TIME2_SAMPLE_D		;Accum cpu2 sample time in dbl
	SOBGEQ	R0,30$				;Once per mode: K,E,S,U,I,C,Null

	CVTLD	(R4)[R0],(R8)[R0]		;Convert cpu1 null time
	CVTLD	(R5)[R0],(R9)[R0]		;Convert cpu2 null time

	MOVZBL	#6,R0				;Get index to idle time cell
	MOVZBL	#4,R1				;Get index to interrupt time
	SUBD2	(R9)[R0],(R8)[R0]		;Subtract secondary idle time
	SUBD2	(R8)[R0],(R8)			;Subtract idle from kernel time
	SUBD2	(R9)[R0],(R9)[R1]		;Subtract idle from interrupt

	MOVZBL	#6,R0				;Get number of cpu time cells
40$:	MULD2	#100,(R8)[R0]			;Amount of time * 100
	MULD2	#100,(R9)[R0]			;Amount of time * 100
	DIVD2	TIME1_SAMPLE_D,(R8)[R0]		;Compute % of cpu time
	TSTL	TIME2_SAMPLE_D			;Is secondary active at all?
	BNEQ	45$				;Br on active
	CLRD	(R9)[R0]			;Indicate nothing to display
	BRB	46$				;Continue
45$:	DIVD2	TIME2_SAMPLE_D,(R9)[R0]		;Compute % of cpu time
46$:	SOBGEQ	R0,40$				;Once per mode (K,E,S,U,I,C)

	CLRL	ASCTIM_LENGTH
	MOVL	#50,ASCTIM_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	EMUL	#100000,TIME_SAMPLE,#0,TIME_SAMPLE
	$ASCTIM_S	TIMLEN=ASCTIM_LENGTH,-
		TIMBUF=ASCTIM_BUFFER_DSC,-
		TIMADR=TIME_SAMPLE,-
		CVTFLG=#1
	BLBS	R0,50$
	BRW	ERROR
50$:	MOVL	ASCTIM_LENGTH,ASCTIM_BUFFER_DSC
	MOVZBL	#1,R7				;Number of one liners to output
	MOVAB	TIME_DSC_PTR,R8			;Address of FAO cmd descriptor
	MOVAB	ASCTIM_DSC_PTR,R9		;Address of data to output
	BSBW	OUTPUT_LINE			;Call to output one line

	MOVZBL	#2,R7				;Number of one liners to output
	MOVAB	TIME_ARRAY_PTR,R8		;Address of FAO cmd descriptor
	MOVAB	PFM_DATA,R9			;Dummy address to make rtn work
	BSBW	OUTPUT_LINE			;Call to output one line

	MOVZBL	#7,R7				;Number of one liners to output
	MOVAB	CPUTIM_DSC_PTR,R8		;Address of FAO cmd descriptors
	MOVAB	CPU1TIME_PERCENTS,R9		;Address of data to output
	MOVAB	CPU2TIME_PERCENTS,R10		;Address of data to output
	BSBW	OUTPUT_LINE_2			;Call to output one liners

	MOVZBL	#7,R7				;Number of one liners to output
	MOVAB	PFM_DATA+<PFM$L_CNT_CTXSW-PFM$L_START>,R9 ;Point past data size
	MOVAB	CNTRS_DSC_PTR,R8		;Address of FAO cmd descriptors
	BSBW	OUTPUT_LINE			;Call to output one liners

	MOVAB	PFM_DATA+<PFM$A_HIST_TIME-PFM$L_START>,R9 ;Point past data size

	MOVL	HST_L_CELLCOUNT(R9),R0		;Index to overflow accumulator
	MOVAB	HISTO_PERCENTS,R7		;Address of percentage array
	CVTLD	HST_Q_OVRFLOW(R9),(R7)[R0]	;Convert overflow accumulator
	BGEQ	60$				;Br if bit 31 not set
	MNEGD	(R7)[R0],(R7)[R0]		;Negate as bit 31 was set
	ADDD2	#<2@31>,(R7)[R0]		;Add in bit 31 count
60$:	CVTLD	HST_Q_OVRFLOW+4(R9),TEMP	;Convert high bits of overflow
	MULD2	TWO_32,TEMP			;Raise to appropriate power
	ADDD2	TEMP,(R7)[R0]			;Add in high order longword acc
	MOVD	(R7)[R0],HISTO_TOTAL		;Add in overflow
	SUBL3	#1,HST_L_CELLCOUNT(R9),R0	;Index into histogram
	CVTLD	HST_L_CELLWIDTH(R9),TEMP1	;Remember cell width
	CVTLD	HST_L_CELLCOUNT(R9),TEMP2	;Get count of cells
	MULD2	TEMP1,TEMP2			;Get high limit of largest cell
	CVTLD	HST_L_CELLWIDTH(R9),TEMP1	;Get width of one cell
	DIVD3	#2,TEMP1,TEMP1			;Get median of cell width
	SUBD2	TEMP1,TEMP2			;Get median of last cell
	CVTLD	HST_L_CELLWIDTH(R9),TEMP1	;Get width of one cell
70$:	CVTLD	HST_L_FIRSTCELL(R9)[R0],(R7)[R0] ;Convert number to float dbl
	CVTLD	TEMP2,R2
	CVTLD	TEMP1,R1
	MULD2	TEMP2,(R7)[R0]			;Multiply by median cell value
	ADDD2	(R7)[R0],HISTO_TOTAL		;Accumulate total for % calc
	ADDL3	#1,R0,R1			;Get index to next cell
	ADDD2	(R7)[R1],(R7)[R0]		;Add sum of other cells to this
	SUBD2	TEMP1,TEMP2			;Get median of next cell
	SOBGEQ	R0,70$				;Repeat for each cell

	MOVL	HST_L_CELLCOUNT(R9),R0		;Index into histogram
	MOVAB	HISTO_PERCENTS,R7		;Address of percentage array
80$:	MULD2	#100,(R7)[R0]			;Get ready to calculate %
	DIVD2	HISTO_TOTAL,(R7)[R0]		;Calculate % time
	SOBGEQ	R0,80$				;Repeat for each cell & ovrflw

	MOVAB	HISTO_TIME_HDR,R8		;Address of FAO cmd descriptors
	MOVZBL	#3,R7				;Number of one liners to output
	BSBW	OUTPUT_LINE			;Call to output one liners
	MOVAB	HIST_TIME_DSC,HISTO_1_FAO_PTR ;Address of FAO cmd descriptors
	MOVAB	PFM_DATA+<PFM$A_HIST_TIME-PFM$L_START>,R2 ;Skip past local indic
	MOVAB	HISTO_PERCENTS,R3		;Address of second FAO argument
	MOVAB	PFM_DATA+<PFM$A_HIST_PGFL-PFM$L_START>,R4 ;Skip past local indic
	MOVAB	PFM_DATA+<PFM$A_HIST_CHMK-PFM$L_START>,R5 ;Skip past local indic
	MOVAB	PFM_DATA+<PFM$A_HIST_OTHR-PFM$L_START>,R6 ;Skip past local indic
	MOVAB	PFM_DATA+<PFM$A_HIST_SSRV-PFM$L_START>,R7 ;Skip past local indic
	BSBW	OUTPUT_HISTO_1			;Output an entire histogram

	MOVAB	PFM_DATA+<PFM$A_HIST_SRV-PFM$L_START>,R9 ;Skip past local indic
	MOVAB	HISTO_SRV_HDR,R8		;Address of FAO cmd descriptors
	MOVZBL	#1,R7				;Number of one liners to output
	BSBW	OUTPUT_LINE			;Call to output one liners
	MOVAB	PFM_DATA+<PFM$A_HIST_SRV-PFM$L_START>,R9 ;Skip past local indic
	MOVAB	HIST_SRV_PTR,R10		;Address of second FAO argument
	BSBW	OUTPUT_HISTO			;Output an entire histogram

	MOVAB	PFM_DATA+<PFM$A_HIST_SRV-PFM$L_START>,R9;Skip past local indic
	MOVAB	HISTO_CTX_HDR,R8		;Address of FAO cmd descriptors
	MOVZBL	#1,R7				;Number of one liners to output
	BSBW	OUTPUT_LINE			;Call to output one liners
	MOVAB	PFM_DATA+<PFM$A_HIST_CTX-PFM$L_START>,R9 ;Skip past local indic
	MOVAB	HIST_CTX_PTR,R10		;Address of second FAO argument
	BSBW	OUTPUT_HISTO			;Output an entire histogram

	MOVAB	PFM_DATA+<PFM$A_HIST_RSCH-PFM$L_START>,R9 ;Point past data size

	MOVL	HST_L_CELLCOUNT(R9),R0		;Index to overflow accumulator
	MOVAB	HISTO_PERCENTS,R7		;Address of percentage array
	CVTLD	HST_Q_OVRFLOW(R9),(R7)[R0]	;Convert overflow accumulator
	BGEQ	90$				;Br if bit 31 not set
	MNEGD	(R7)[R0],(R7)[R0]		;Negate as bit 31 was set
	ADDD2	#<2@31>,(R7)[R0]		;Add in bit 31 count
90$:	CVTLD	HST_Q_OVRFLOW+4(R9),TEMP	;Convert high bits of overflow
	MULD2	TWO_32,TEMP			;Raise to appropriate power
	ADDD2	TEMP,(R7)[R0]			;Add in high order longword acc
	MOVD	(R7)[R0],HISTO_TOTAL		;Add in overflow
	SUBL3	#1,HST_L_CELLCOUNT(R9),R0	;Index into histogram
	CVTLD	HST_L_CELLWIDTH(R9),TEMP1	;Remember cell width
	CVTLD	HST_L_CELLCOUNT(R9),TEMP2	;Get count of cells
	MULD2	TEMP1,TEMP2			;Get high limit of largest cell
	CVTLD	HST_L_CELLWIDTH(R9),TEMP1	;Get width of one cell
	DIVD3	#2,TEMP1,TEMP1			;Get median of cell width
	SUBD2	TEMP1,TEMP2			;Get median of last cell
	CVTLD	HST_L_CELLWIDTH(R9),TEMP1	;Get width of one cell
100$:	CVTLD	HST_L_FIRSTCELL(R9)[R0],(R7)[R0] ;Convert number to float dbl
	CVTLD	TEMP2,R2
	CVTLD	TEMP1,R1
	MULD2	TEMP2,(R7)[R0]			;Multiply by median cell value
	ADDD2	(R7)[R0],HISTO_TOTAL		;Accumulate total for % calc
	ADDL3	#1,R0,R1			;Get index to next cell
	ADDD2	(R7)[R1],(R7)[R0]		;Add sum of other cells to this
	SUBD2	TEMP1,TEMP2			;Get median of next cell
	SOBGEQ	R0,100$				;Repeat for each cell

	MOVL	HST_L_CELLCOUNT(R9),R0		;Index into histogram
	MOVAB	HISTO_PERCENTS,R7		;Address of percentage array
110$:	MULD2	#100,(R7)[R0]			;Get ready to calculate %
	DIVD2	HISTO_TOTAL,(R7)[R0]		;Calculate % time
	SOBGEQ	R0,110$				;Repeat for each cell & ovrflw

	MOVZBL	#3,R7				;Number of one liners to output
	MOVAB	HISTO_RSCH_HDR,R8		;Address of FAO cmd descriptors
	MOVAB	PFM_DATA,R9			;Dummy address to make rtn work
	BSBW	OUTPUT_LINE			;Call to output one liners
	MOVAB	HIST_RSCH_DSC,HISTO_1_FAO_PTR	;Address of FAO cmd descriptors
	MOVAB	PFM_DATA+<PFM$A_HIST_RSCH-PFM$L_START>,R2 ;Skip past local indic
	MOVAB	HISTO_PERCENTS,R3		;Address of second FAO argument
	BSBW	OUTPUT_HISTO_2			;Output an entire histogram

	MOVZBL	#1,R0
ERROR:
	$EXIT_S	R0


;
; R7 - Number of one liners to output
; R8 - Address of FAO command descriptors
; R9 - Address of list of arguments (one per FAO command descriptor)
;
OUTPUT_LINE::
	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	$FAO_S	CTRSTR=@(R8),-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=(R9)
	BLBS	R0,300$
	BRW	ERROR
300$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,310$
	BRW	ERROR
310$:	ADDL	#4,R8				;Point to next FAO cmd dsc
	ADDL	#4,R9				;Point to next argument
	SOBGTR	R7,OUTPUT_LINE
	RSB


;
; R9 - Address of first FAO argument for each output line
; R10 - Address of second FAO argument for each output line
;
OUTPUT_HISTO::
;	MOVAB	HIST_DSC_PTR,R8
;	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R9,R10>
;	MOVZBL	#2,R7
;	ASSUME	HST_L_CELLCOUNT EQ 0
;	ASSUME	HST_L_CELLWIDTH EQ <HST_L_CELLCOUNT + 4>
;	BSBW	OUTPUT_LINE
;	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R9,R10>
	MOVL	HST_L_CELLCOUNT(R9),R7		;Count of lines to output
	MOVAB	HIST_LIN_PTR,R8
	MOVAB	HST_L_FIRSTCELL(R9),R9		;Get address of first histo cell
NXT_LINE:
	TSTL	(R9)				;Is this cell empty?
	BEQL	410$				;Br if empty, don't output line
	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;Initialize output buffer dsc
	$FAO_S	CTRSTR=@(R8),-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=(R10),-
		P2=(R9)
	BLBS	R0,400$
	BRW	ERROR
400$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	 OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,410$
	BRW	ERROR
410$:	ADDL	#4,R9				;Point to next argument
	ADDL	#4,R10				;Point to next argument
	SOBGTR	R7,NXT_LINE
	RSB

;
;
; This outputs a histogram with descriptions that are the start and
; end of each cell, instead of a specific text.
;
; R2 - Address of first FAO argument for each output line
; R3 - Address of second FAO argument for each output line
; R4 - Address of third FAO argument for each output line
; R5 - Address of fourth FAO argument for each output line
; R6 - Address of fifth FAO argument for each output line
; R7 - Address of sixth FAO argument for each output line
; R8 - Address of FAO command descriptor
;
OUTPUT_HISTO_1::
;	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>
;	MOVL	R2,R9
;	MOVAB	HIST_DSC_PTR,R8
;	MOVZBL	#2,R7
;	ASSUME	HST_L_CELLCOUNT EQ 0
;	ASSUME	HST_L_CELLWIDTH EQ <HST_L_CELLCOUNT + 4>
;	BSBW	OUTPUT_LINE
;	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	HST_L_CELLWIDTH(R2),R9		;Remember cell width
	CLRL	R10				;Initialize cell boundary
	SUBL3	#1,R9,R11			;Initialize cell boundary
	MOVL	HST_L_CELLCOUNT(R2),R8		;Count of lines to output
	MOVAB	HST_L_FIRSTCELL(R2),R2		;Get address of first histo cell
	MOVAB	HST_L_FIRSTCELL(R4),R4		;Get address of first histo cell
	MOVAB	HST_L_FIRSTCELL(R5),R5		;Get address of first histo cell
	MOVAB	HST_L_FIRSTCELL(R6),R6		;Get address of first histo cell
	MOVAB	HST_L_FIRSTCELL(R7),R7		;Get address of first histo cell
NXT_LINE_1:
	MOVL	#8,ASCTIM_BUFFER_DSC		;Set number of output characters
	PUSHL	#0				;Number of digits in exponent
	PUSHL	#3				;Number of digits in integer
	PUSHL	#0				;No scale factor
	PUSHL	#4				;Number of digits in fraction
	PUSHAB	ASCTIM_BUFFER_DSC		;Address of output string dsc
	PUSHL	R3				;Address of value to convert
	CALLS	#6,G^FOR$CVT_D_TF
	BLBS	R0,500$
	BRW	ERROR
500$:	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	MOVL	HISTO_1_FAO_PTR,R0
	MOVL	(R7),R1				;Get number of system service
	MOVL	HIST_SRV_PTR[R1],R1		;Get name of system service
	$FAO_S	CTRSTR=(R0),-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=R10,-
		P2=R11,-
		P3=(R2),-
		P4=ASCTIM_DSC_PTR,-
		P5=(R4),-
		P6=(R5),-
		P7=(R6),-
		P8=R1
	BLBS	R0,510$
	BRW	ERROR
510$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,520$
	BRW	ERROR
520$:	ADDL	#4,R2				;Point to next argument
	ADDL	#8,R3				;Point to next argument
	ADDL	#4,R4				;Point to next argument
	ADDL	#4,R5				;Point to next argument
	ADDL	#4,R6				;Point to next argument
	ADDL	#4,R7				;Point to next argument
	ADDL	R9,R10				;Next cell boundary
	ADDL	R9,R11				;Next cell boundary
	SOBGTR	R8,530$
	BRB	540$
530$:	BRW	NXT_LINE_1
540$:	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R9,R10>
	MOVL	#8,ASCTIM_BUFFER_DSC		;Set number of output characters
	PUSHL	#0				;Number of digits in exponent
	PUSHL	#3				;Number of digits in integer
	PUSHL	#0				;No scale factor
	PUSHL	#4				;Number of digits in fraction
	PUSHAB	ASCTIM_BUFFER_DSC		;Address of output string dsc
	PUSHL	R3				;Address of value to convert
	CALLS	#6,G^FOR$CVT_D_TF
	BLBS	R0,550$
	BRW	ERROR
550$:	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	MOVL	HISTO_1_FAO_PTR,R0
	$FAO_S	CTRSTR=HISTO_OVERFLOW,-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=(R2),-
		P2=ASCTIM_DSC_PTR
	BLBS	R0,560$
	BRW	ERROR
560$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,570$
	BRW	ERROR
570$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R9,R10>
	RSB

;
; R7 - Number of one liners to output
; R8 - Address of FAO command descriptors
; R9 - Address of list of first argument (one per FAO command descriptor)
; R10 - Address of list of first argument (one per FAO command descriptor)
;
OUTPUT_LINE_2::
	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	MOVL	#8,ASCII1_BUFFER_DSC		;Set number of output characters
	PUSHL	#0				;Number of digits in exponent
	PUSHL	#3				;Number of digits in integer
	PUSHL	#0				;No scale factor
	PUSHL	#4				;Number of digits in fraction
	PUSHAB	ASCII1_BUFFER_DSC		;Address of output string dsc
	PUSHL	R9				;Address of value to convert
	CALLS	#6,G^FOR$CVT_D_TF
	BLBS	R0,600$
	BRW	ERROR
600$:	MOVL	#8,ASCII2_BUFFER_DSC		;Set number of output characters
	PUSHL	#0				;Number of digits in exponent
	PUSHL	#3				;Number of digits in integer
	PUSHL	#0				;No scale factor
	PUSHL	#4				;Number of digits in fraction
	PUSHAB	ASCII2_BUFFER_DSC		;Address of output string dsc
	PUSHL	R10				;Address of value to convert
	CALLS	#6,G^FOR$CVT_D_TF
	BLBS	R0,610$
	BRW	ERROR
610$:	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	$FAO_S	CTRSTR=@(R8),-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=ASCII1_DSC_PTR,-
		P2=ASCII2_DSC_PTR
	BLBS	R0,620$
	BRW	ERROR
620$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,630$
	BRW	ERROR
630$:	ADDL	#4,R8				;Point to next FAO cmd dsc
	ADDL	#8,R9				;Point to next argument
	ADDL	#8,R10				;Point to next argument
	SOBGTR	R7,640$
	RSB
640$:	BRW	OUTPUT_LINE_2

;
;
; This outputs a histogram with descriptions that are the start and
; end of each cell, instead of a specific text.
;
; R2 - Address of first FAO argument for each output line
; R3 - Address of second FAO argument for each output line
;
OUTPUT_HISTO_2::
;	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>
;	MOVL	R2,R9
;	MOVAB	HIST_DSC_PTR,R8
;	MOVZBL	#2,R7
;	ASSUME	HST_L_CELLCOUNT EQ 0
;	ASSUME	HST_L_CELLWIDTH EQ <HST_L_CELLCOUNT + 4>
;	BSBW	OUTPUT_LINE
;	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	HST_L_CELLWIDTH(R2),R9		;Remember cell width
	CLRL	R10				;Initialize cell boundary
	SUBL3	#1,R9,R11			;Initialize cell boundary
	MOVL	HST_L_CELLCOUNT(R2),R8		;Count of lines to output
	MOVAB	HST_L_FIRSTCELL(R2),R2		;Get address of first histo cell
NXT_LINE_2:
	MOVL	#8,ASCTIM_BUFFER_DSC		;Set number of output characters
	PUSHL	#0				;Number of digits in exponent
	PUSHL	#3				;Number of digits in integer
	PUSHL	#0				;No scale factor
	PUSHL	#4				;Number of digits in fraction
	PUSHAB	ASCTIM_BUFFER_DSC		;Address of output string dsc
	PUSHL	R3				;Address of value to convert
	CALLS	#6,G^FOR$CVT_D_TF
	BLBS	R0,700$
	BRW	ERROR
700$:	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	MOVL	HISTO_1_FAO_PTR,R0
	$FAO_S	CTRSTR=(R0),-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=R10,-
		P2=R11,-
		P3=(R2),-
		P4=ASCTIM_DSC_PTR
	BLBS	R0,710$
	BRW	ERROR
710$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,720$
	BRW	ERROR
720$:	ADDL	#4,R2				;Point to next argument
	ADDL	#8,R3				;Point to next argument
	ADDL	R9,R10				;Next cell boundary
	ADDL	R9,R11				;Next cell boundary
	SOBGTR	R8,730$
	BRB	740$
730$:	BRW	NXT_LINE_2
740$:	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R9,R10>
	MOVL	#8,ASCTIM_BUFFER_DSC		;Set number of output characters
	PUSHL	#0				;Number of digits in exponent
	PUSHL	#3				;Number of digits in integer
	PUSHL	#0				;No scale factor
	PUSHL	#4				;Number of digits in fraction
	PUSHAB	ASCTIM_BUFFER_DSC		;Address of output string dsc
	PUSHL	R3				;Address of value to convert
	CALLS	#6,G^FOR$CVT_D_TF
	BLBS	R0,750$
	BRW	ERROR
750$:	CLRL	OUTPUT_LENGTH
	MOVL	#200,OUTPUT_BUFFER_DSC		;INITIALIZE OUTPUT BUFFER DSC
	MOVL	HISTO_1_FAO_PTR,R0
	$FAO_S	CTRSTR=HISTO_OVERFLOW,-
		OUTLEN=OUTPUT_LENGTH,-
		OUTBUF=OUTPUT_BUFFER_DSC,-
		P1=(R2),-
		P2=ASCTIM_DSC_PTR
	BLBS	R0,760$
	BRW	ERROR
760$:	MOVL	OUTPUT_LENGTH,OUTPUT_BUFFER_DSC
	PUSHAQ	OUTPUT_BUFFER_DSC
	CALLS	#1,G^LIB$PUT_OUTPUT
	BLBS	R0,770$
	BRW	ERROR
770$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R9,R10>
	RSB

	.END	SHWPFM
