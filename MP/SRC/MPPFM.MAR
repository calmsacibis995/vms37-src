	.TITLE	MPPFM - Multi-processing Performance Measurement Routines
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive, Multi-processing performance measuring
;
; Abstract:  This module contains performance measurement routines
;		for gathering data on context switches.
;
; Environment: MODE=Kernel 
;
; Author:  Kathleen D. Morse, Creation date:  05-Aug-1981
;
; Modified by:
;
; 01	- 
;--
	.PAGE

;
; Include files:
;

;
; Macros:
;
;
; This macro generates a table of longwords that is used to
; collect histogram data.
;
	.MACRO	HISTO	NAME,CELLCNT,CELLWIDTH

	PFM$A_HIST_'NAME'::
		.LONG	CELLCNT
		.LONG	CELLWIDTH
		.LONG	0
		.LONG	0
		.REPT	CELLCNT
		.LONG	0
		.ENDR
		.LONG	0

	.ENDM

;
; Equated Symbols:
;

	$IPLDEF				; Define interrupt priority levels
	$MPSDEF				; Define secondary processor states
	$PCBDEF				; Define process control block
	$PHDDEF				; Define process header block
	$PRDEF				; Define processor register numbers


;
; Histogram offsets
;

HST_L_CELLCOUNT = 0			; Count of cells in this histogram
HST_L_CELLWIDTH = 4			; Width of each cell in histogram
HST_Q_OVRFLOW = 8			; Accumulation of overflow values
HST_L_FIRSTCELL = 16			; Offset to first cell in histogram
	.PAGE
;
; Data Area:
;

	.PSECT	MPPFM,LONG

PFM$L_START::				; Size of MP perf. meas data
	.LONG	<PFM$L_END-PFM$L_START>	;

PFM$L_CNT_CTXSW::			; Count of number of context switches
	.LONG	0			;  done on secondary

PFM$L_CNT_RESCH::			; Count of number of reschedule
	.LONG	0			;  requests made by secondary

PFM$L_CNT_SCHDS::			; Count of number of successful
	.LONG	0			;  reschedules of secondary

PFM$L_CNT_EXCHG::			; Number of times a process was
	.LONG	0			;  exchanged between primary & secondary

PFM$L_CNT_ASTSC::			; Number of times an EXEC mode AST
	.LONG	0			;  was used to cause a reschedule

PFM$L_CNT_INVAL::			; Number of invalidates requested by
	.LONG	0			;  primary processor

PFM$L_CNT_IWAIT::			; Number of times primary looped waiting
	.LONG	0			;  for secondary to answer invalid req

PFM$L_WHY_CTXSW::			; Reason for the next context switch
	.LONG	0			; (This value is the offset into the
					;  SCB, for which a request occurred.)

PFM$L_WHAT_SRV::			; Reason for the next context switch
	.LONG	0			; (This is the number specified
					;  in the CHMK instruction.)

PFM$L_RUN_TIME::			; Accumulator for length of time
	.LONG	0			;  process has been running on secondary

PFM$L_RSCH_TIME::			; Accumulator for length of time
	.LONG	0			;  secondary waits for reschedule

	HISTO	TIME,100,50		; Histogram of compute time on secondary
					; (PFM$L_RUN_TIME values)
					; Cell width = 50 microseconds
					; Cell count = 100

	HISTO	SRV,82,1		; Histogram of system services requested
					; (PFM$L_WHAT_SRV values)
					; (One cell for each system service)

	HISTO	CTX,64,4		; Histogram of reasons for context
					;  switches (PFM$L_WHY_CTXSW values)
					; (One cell for each SCB vector)

	HISTO	PGFL,100,50		; Histogram of # pagefaults on secondary
					;  per PFM$L_RUN_TIME value
					; Cell width = 50 microseconds
					; Cell count = 100

	HISTO	CHMK,100,50		; Histogram of system services on
					;  secondary per PFM$L_RUN_TIME value
					; Cell width = 50 microseconds
					; Cell count = 100

	HISTO	OTHR,100,50		; Histogram of other reasons on
					;  secondary per PFM$L_RUN_TIME value
					; Cell width = 50 microseconds
					; Cell count = 100

	HISTO	SSRV,100,50		; Histogram of last system service on
					;  secondary per PFM$L_RUN_TIME value
					; Cell width = 50 microseconds
					; Cell count = 100

	HISTO	RSCH,50,10		; Histogram of wait time on secondary
					;  for reschedule to occur
					; (PFM$L_RSCH_TIME values)
					; Cell width = 10 microseconds
					; Cell count = 50

PFM$L_END::
	.PAGE				;
	.SBTTL	MPS$PFM_RUNTIME - Increment Run Time Accumulator	
;++
; Functional Description:
;
; This routine is called from the hardware clock interrupt service
; routine.  It increments the amount of run time that a process has
; accumulated while running on the secondary processor.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_RUNTIME
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor.
;
;--


MPS$PFM_RUNTIME::
	ADDL2	#10000,W^PFM$L_RUN_TIME ; Update run time accumulator
	ADDL2	#10000,W^PFM$L_RSCH_TIME ; Update run time accumulator
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_CTXSW - Increment Context Switch Accumulator	
;++
; Functional Description:
;
; This routine is called from the primary's reschedule interrupt service
; routine.  It increments the number off times that the secondary has
; been scheduled to run a process.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_CTXSW
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on primary processor.
;
;--


MPS$PFM_CTXSW::
	INCL	W^PFM$L_CNT_CTXSW	; Update context switch accumulator
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_RESCHD - Increment Reschedule Request Accumulator	
;++
; Functional Description:
;
; This routine is called from the primary's reschedule interrupt service
; routine.  It increments the number off times that the secondary has
; requested a reschedule event.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_RESCHD
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on primary processor.
;
;--


MPS$PFM_RESCHD::
	INCL	W^PFM$L_CNT_RESCH	; Update reschedule request accumulator
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_SCHDSUC - Increment Successful Reschedule Accumulator	
;++
; Functional Description:
;
; This routine is called from the primary's reschedule interrupt service
; routine.  It increments the number off times that the secondary has
; been successfully rescheduled.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_SCHDSUC
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on primary processor.
;
;--


MPS$PFM_SCHDSUC::
	CMPL	W^MPS$GL_STATE,#MPS$K_IDLESTATE ; Was reschedule successful?
	BEQL	10$			; Br if not successful, sec still idle
	INCL	W^PFM$L_CNT_SCHDS	; Inc successful reschedule accumulator
10$:	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_EXCHG - Increment Accumulator of Process Exchanges
;++
; Functional Description:
;
; This routine is called from the routine that schedules a process for
; the secondary.  It counts the number of times a process moves from
; the primary to the secondary.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_EXCHG
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on primary processor.
;
;--


MPS$PFM_EXCHG::
	CMPL	G^SCH$GL_CURPCB,W^MPS$GL_CURPCB ; Was process exchanged?
	BNEQ	10$			; Br if not exchanged
	INCL	W^PFM$L_CNT_EXCHG	; Inc exchanged process accumulator
10$:	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_ASTSC - Increment Accumulator of Exec AST Reschedules
;++
; Functional Description:
;
; This routine is called from the code that determines if a process
; running on the primary should be forced onto the secondary as
; soon as it exits from kernel mode.  It counts the number of times
; an AST interrupt is scheduled to occur, causing a rescheduling
; event as soon as the process exits from kernel mode.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_ASTSC
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on primary processor.
;
;--


MPS$PFM_ASTSC::
	INCL	W^PFM$L_CNT_ASTSC	; Inc exchanged process accumulator
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_UNEXP - Set Unexpected Interrupt Indicators
;++
; Functional Description:
;
; This routine is called from the unexpected interrupt service
; routine.  It sets indicators for the reason of the interrupt,
; which will be recorded later on in histograms.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_UNEXP
;
; Input Parameters:
;
;	 (SP) - Return address
;	4(SP) - Vector offset within SCB
;	8(SP) - Optional parameters, if CHMK then numerical argument
;	?(SP) - PC at time of exception
;	?(SP) - PSL at time of exception
;
; Environment:
;
;	Executes on secondary processor.
;
;--


MPS$PFM_UNEXP::
	MOVL	4(SP),W^PFM$L_WHY_CTXSW	; Remember offset into PCB (reason
					;  for this interrupt)
	CMPL	W^PFM$L_WHY_CTXSW,#^X40	; Is this a CHMK request?
	BNEQ	10$			; Br if not a CHMK request
	MOVL	8(SP),W^PFM$L_WHAT_SRV	; Remember the number argument to CHMK
10$:	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_ASTDEL - Set AST Delivery Indicator
;++
; Functional Description:
;
; This routine is called from the AST delivery interrupt service
; routine.  It sets an indicator for the reason of the interrupt,
; which will be recorded later on in a histogram.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_ASTDEL
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor.
;
;--

MPS$PFM_ASTDEL::
	MOVL	#^X88,W^PFM$L_WHY_CTXSW	; Indicator is offset in SCB to
					;  AST delivery routine
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_MCHK - Set Machine Check Indicator
;++
; Functional Description:
;
; This routine is called from the machine check interrupt service
; routine.  It sets an indicator for the reason of the interrupt,
; which will be recorded later on in a histogram.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_MCHK
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor.
;
;--

MPS$PFM_MCHK::
	MOVL	#^X04,W^PFM$L_WHY_CTXSW	; Indicator is offset in SCB to
					;  machine check routine
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_QEND - SetQuantum End Indicator
;++
; Functional Description:
;
; This routine is called from the quantum end interrupt service
; routine.  It sets an indicator for the reason of the interrupt,
; which will be recorded later on in a histogram.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_QEND
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor.
;
;--

MPS$PFM_QEND::
	MOVL	#^X9C,W^PFM$L_WHY_CTXSW	; Indicator is offset in SCB to
					;  software timer interrupt routine
					; (i.e., quantum end)
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_SVPCTX - Save Process Context Measurement Routine
;++
; Functional Description:
;
; This routine is called from the scheduling routine for the secondary
; processor, at the time it folds up a process and hands it back
; to the primary.  It is used to compute the actual run time accumulated
; by the process while it was running on the secondary, and store this
; value in a histogram.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_SVPCTX
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor, at IPLs SYNCH and HWCLK.
;
;--

MPS$PFM_SVPCTX::
	PUSHR	#^M<R0,R1,R2,R3>	; Save registers
	SETIPL	#IPL$_HWCLK		; Lock out secondary clock interrupts
	MFPR	#PR$_ICR,R0		; Get usec offset from 10 milsec marker
	MFPR	#PR$_ICCS,R1		; Get status register
	MOVL	W^PFM$L_RUN_TIME,R2	; Get run time accumulator
	SETIPL	#IPL$_SYNCH		; Enable secondary clock interrupts
	BBC	#7,R1,10$		; If BC, no overflow
	CMPL	#-5000,R0		; Overflow after read ?
	BLSS	10$			; If LSS, yes.  Correction not needed
	ADDL	#10000,R2		; Correct run time accumulator
10$:
	ADDL2	#10000,R0		; (10^4 - X)
	ADDL2	R0,R2			; Total run time (usec)

;
; Increment delta time histogram and compute index into this histogram
;
	MOVAB	W^PFM$A_HIST_TIME,R3	; Get address of histogram
	MOVL	R2,R1			; Remember amount in case of overflow
	DIVL2	HST_L_CELLWIDTH(R3),R2	; Compute the histogram index
	CMPL	HST_L_CELLCOUNT(R3),R2	; Out of range ?
	BGEQU	20$			; If GEQ, no
	MOVL	HST_L_CELLCOUNT(R3),R2	; Set index to overflow cell
	ADDL	R1,HST_Q_OVRFLOW(R3)	; Add to overflow accumulator
	ADWC	#0,HST_Q_OVRFLOW+4(R3)	;  in quadword arithmetic
20$:
	INCL	HST_L_FIRSTCELL(R3)[R2] ; Update histogram

;
; Increment histogram of reasons why context switch occurred --
; (one for each SCB entry)
;
	MOVL	W^PFM$L_WHY_CTXSW,R1	; Get offset into SCB (reason for ctxsw)
	MOVAB	W^PFM$A_HIST_CTX,R3	; Get address of histogram
	DIVL2	HST_L_CELLWIDTH(R3),R1	; Compute the histogram index
	CMPL	HST_L_CELLCOUNT(R3),R1	; Out of range ?
	BGEQU	30$			; If GEQ, no
	MOVL	HST_L_CELLCOUNT(R3),R1	; Set index to overflow cell
30$:
	INCL	HST_L_FIRSTCELL(R3)[R1] ; Update histogram

;
; If reason was a CHMK #n, then increment the histogram of which system
; service was requested.
;
	CMPL	W^PFM$L_WHY_CTXSW,#^X40	; Is this a CHMK request?
	BNEQ	50$			; Br if not a CHMK request
	MOVL	W^PFM$L_WHAT_SRV,R1	; Get the argument to the CHMK instr
	MOVAB	W^PFM$A_HIST_SRV,R3	; Get address of histogram
	DIVL2	HST_L_CELLWIDTH(R3),R1	; Compute the histogram index
	CMPL	HST_L_CELLCOUNT(R3),R1	; Out of range ?
	BGEQU	40$			; If GEQ, no
	MOVL	HST_L_CELLCOUNT(R3),R1	; Set index to overflow cell
40$:
	INCL	HST_L_FIRSTCELL(R3)[R1] ; Update histogram

;
; Increment system service histogram that corresponds to the
; delta time histogram.
;
	MOVAB	W^PFM$A_HIST_CHMK,R3	; Get address of histogram
	INCL	HST_L_FIRSTCELL(R3)[R2]	; Update histogram

; Set indicator histogram cell, showing last system service in this
; delta time interval.  This corresponds to the delta time histogram.
;
	MOVAB	W^PFM$A_HIST_SSRV,R3	; Get address of histogram
	MOVL	W^PFM$L_WHAT_SRV,HST_L_FIRSTCELL(R3)[R2] ; Record latest srv
	BRB	100$

;
; If reason was a pagefault, increment pagefault histogram that
; corresponds to the delta time histogram.
;
50$:
	CMPL	W^PFM$L_WHY_CTXSW,#^X24	; Is this a pagefault request?
	BNEQ	60$			; Br if not a CHMK request
	MOVAB	W^PFM$A_HIST_PGFL,R3	; Get address of histogram
	INCL	HST_L_FIRSTCELL(R3)[R2] ; Update histogram
	BRB	100$

;
; This was neither pagefault or CHMK reason, increment histogram of
; other reasons that corresponds to delta time histogram.
;
60$:
	MOVAB	W^PFM$A_HIST_OTHR,R3	; Get address of histogram
	INCL	HST_L_FIRSTCELL(R3)[R2] ; Update histogram

100$:	POPR	#^M<R0,R1,R2,R3>	; Restore registers
	RSB				; Return
	.PAGE
	.SBTTL	MPS$PFM_LDPCTX - Load Process Context Measurement Routine
;++
; Functional Description:
;
; This routine is called from the scheduling routine for the secondary
; processor, at the time it starts executing a new process.  It is
; used to initialize accumulators used in computing the amount of run time
; accumulated by the process while it was running on the secondary.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_LDPCTX
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor, at IPLs SYNCH and HWCLK.
;
;--

MPS$PFM_LDPCTX::
	MOVQ	R0,-(SP)		; Save registers
	SETIPL	#IPL$_HWCLK		; Lock out secondary clock interrupts
	MFPR	#PR$_ICR,R0		; (-X)
	MFPR	#PR$_ICCS,R1		; Clock status register
	BBC	#7,R1,10$		; If BC, no overflow
	CMPL	#-5000,R0		; Overflow after read ?
	BLSS	10$			; If LSS, yes.  Correction not needed
	ADDL2	#10000,R0		; Correct for pending clock interrupt
10$:	ADDL2	#10000,R0		; (10^4 - X)
	MNEGL	R0,PFM$L_RUN_TIME	; CPU = CPU - (10^4 - X)
	SETIPL	#IPL$_SYNCH		; Enable secondary clock interrupts
	MOVQ	(SP)+,R0		; Restore registers
	RSB				; Return
	.PAGE				;
	.SBTTL	MPS$PFM_RSCH - Save Time Secondary Waited for Reschedule
;++
; Functional Description:
;
; This routine is called from the scheduling code in which the
; secondary finds that it has been given a process to execute.
; It records the time that the secondary waited in its idle
; loop for each reschedule.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_RSCH
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor, at IPLs SYNCH and HWCLK.
;
;--

MPS$PFM_RSCH::
	PUSHR	#^M<R0,R1,R2,R3>	; Save registers
	SETIPL	#IPL$_HWCLK		; Lock out secondary clock interrupts
	MFPR	#PR$_ICR,R0		; Get usec offset from 10 milsec marker
	MFPR	#PR$_ICCS,R1		; Get status register
	MOVL	W^PFM$L_RSCH_TIME,R2	; Get run time accumulator
	SETIPL	#IPL$_SYNCH		; Enable secondary clock interrupts
	BBC	#7,R1,10$		; If BC, no overflow
	CMPL	#-5000,R0		; Overflow after read ?
	BLSS	10$			; If LSS, yes.  Correction not needed
	ADDL	#10000,R2		; Correct run time accumulator
10$:
	ADDL2	#10000,R0		; (10^4 - X)
	ADDL2	R0,R2			; Total run time (usec)

;
; Increment delta time histogram and compute index into this histogram
;
	MOVAB	W^PFM$A_HIST_RSCH,R3	; Get address of histogram
	MOVL	R2,R1			; Remember amount in case of overflow
	DIVL2	HST_L_CELLWIDTH(R3),R2	; Compute the histogram index
	CMPL	HST_L_CELLCOUNT(R3),R2	; Out of range ?
	BGEQU	20$			; If GEQ, no
	MOVL	HST_L_CELLCOUNT(R3),R2	; Set index to overflow cell
	ADDL	R1,HST_Q_OVRFLOW(R3)	; Add to overflow accumulator
	ADWC	#0,HST_Q_OVRFLOW+4(R3)	;  in quadword arithmetic
20$:
	INCL	HST_L_FIRSTCELL(R3)[R2] ; Update histogram
	POPR	#^M<R0,R1,R2,R3>	; Restore registers
	RSB				; Return
	.PAGE
	.SBTTL	MPS$PFM_INTP - Remember Time Interrupted Primary for Reschedule
;++
; Functional Description:
;
; This routine is called from the scheduling code for the secondary
; processor, at the time that it requests the primary to reschedule it.
; It is used to initialize accumulators used in computing the amount
; of run time accumulated by the process while it was running on
; the secondary.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_INTP
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor, at IPLs SYNCH and HWCLK.
;
;--

MPS$PFM_INTP::
	MOVQ	R0,-(SP)		; Save registers
	SETIPL	#IPL$_HWCLK		; Lock out secondary clock interrupts
	MFPR	#PR$_ICR,R0		; (-X)
	MFPR	#PR$_ICCS,R1		; Clock status register
	BBC	#7,R1,10$		; If BC, no overflow
	CMPL	#-5000,R0		; Overflow after read ?
	BLSS	10$			; If LSS, yes.  Correction not needed
	ADDL2	#10000,R0		; Correct for pending clock interrupt
10$:	ADDL2	#10000,R0		; (10^4 - X)
	MNEGL	R0,PFM$L_RSCH_TIME	; CPU = CPU - (10^4 - X)
	SETIPL	#IPL$_SYNCH		; Enable secondary clock interrupts
	MOVQ	(SP)+,R0		; Restore registers
	RSB				; Return
	.PAGE
	.SBTTL	MPS$PFM_CLRDATA - Clear All Performance Measurement Data
;++
; Functional Description:
;
; This routine is called from the initialization code for the secondary
; processor.  It is used to initialize accumulators used so that both
; the primary and secondary times can be displayed.
;
; Calling Sequence:
;
;	BSBW	MPS$PFM_CLRDATA
;
; Input Parameters:
;
;	None
;
; Environment:
;
;	Executes on secondary processor.
;
;--

MPS$PFM_CLRDATA::
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6>
	MOVL	G^EXE$GL_MP,R6			;Get adr of loaded MP code
5$:	MOVZBL	#5,R1
10$:	CLRL	G^MPS$AL_CPUTIME[R1]
	SOBGEQ	R1,10$

	MOVZBL	#5,R1
20$:	CLRL	G^PMS$GL_KERNEL[R1]
	SOBGEQ	R1,20$

	MOVAB	G^SCH$GL_NULLPCB,R0
	MOVL	PCB$L_PHD(R0),R0
	CLRL	PHD$L_CPUTIM(R0)

	CLRL	G^PFM$L_CNT_CTXSW
	CLRL	G^PFM$L_CNT_RESCH
	CLRL	G^PFM$L_CNT_SCHDS
	CLRL	G^PFM$L_CNT_INVAL
	CLRL	G^PFM$L_CNT_IWAIT
	CLRL	G^PFM$L_CNT_EXCHG
	CLRL	G^PFM$L_CNT_ASTSC

	MOVAB	W^PFM$A_HIST_TIME,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cell
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_SRV,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cell
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_CTX,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cell
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_PGFL,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cell
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_CHMK,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cell
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_OTHR,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cell
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_SSRV,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cells
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data

	MOVAB	W^PFM$A_HIST_RSCH,R0		;Get address of histogram
	MULL3	HST_L_CELLCOUNT(R0),#4,R1
	ADDL	#12,R1				;Add in overflow cells
	ADDL	#HST_Q_OVRFLOW,R0		;Point past cell count and size
	MOVC5	#0,(R0),#0,R1,(R0)		;Clear performance meas data
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6>
	RSB					;Return

	.END
