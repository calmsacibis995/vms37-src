	.TITLE	MPAST - MULTIPROCESSOR AST ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive, Scheduler
;
; Abstract:  Primitives for AST queueing and delivery.
;
; Environment: MODE=Kernel 
;
; Author:  RICHARD I. HUSTVEDT, Creation date:  15-MAY-1979
;
; Modified by:
;
;	V02-009	KDM0032		Kathleen D. Morse		27-Aug-1981
;		Don't do rescheduling AST if process can not run on
;		secondary due to non-zero PHD$L_MPINHIBIT.
;
;	V02-008	KDM0015		Kathleen D. Morse	12-Jun-1981
;		Add use of hook MPH$QEMPTYCONT.
;
;	V02-007	KDM0011		Kathleen D. Morse	29-Apr-1981
;		Integrate a new performance-improved AST delivery routine.
;		Use new exec labels for hooks:  MPH$<name>.
;
;	V02-006	KDM0010		Kathleen D. Morse	06-Apr-1981
;		Only cause rescheduling AST if there is some other
;		process to run (not null) and there are no AST's
;		queued to this process, in addition to other checks.
;
;	V02-005	KDM0009		Kathleen D. Morse	06-Apr-1981
;		Add new routines, MPS$ASTNEWLVL and MPS$ASTSCHEDCHK,
;		that used to be in module, MPSCHED.  Rename module
;		to be MPAST.
;
;	V02-004	KDM0008		Kathleen D. Morse	01-Apr-1981
;		Set ASTLVL processor register to executive mode if
;		the secondary is idle and the PHD ASTLVL > PR ASTLVL.
;
;	V02-003	KDM0003		Kathleen D. Morse	15-Sep-1980
;		Make changes to run on VMS V2.0.
;
;	V02-002	KDM0001		Kathleen D. Morse	04-Sep-1980
;		Replace copyright.
;
; 01	- 
;--


	.PAGE
	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	$ACBDEF				; AST control block definitions
	$IPLDEF				; IPL definitions
	$LCKDEF				; Interlock bit definitions
	$MPSDEF				; Secondary processor states
	$PCBDEF				; PCB definitions
	$PHDDEF				; PHD definitions
	$PRDEF				; Processor register definitions
	$PRIDEF				; Priority increment class defs
	$PSLDEF				; PSL field definitions
	$SSDEF				; Status code definitions
	$STATEDEF			; Define state values

ASTEXIT = 0				; AST exit change mode code

;
; OWN STORAGE:
;
	.PSECT	A$EXENONPAGED,LONG

	.PAGE
	.SBTTL	MPS$QAST - ENQUEUE AST CONTROL BLOCK FOR PROCESS

;++
;
; FUNCTIONAL DESCRIPTION:
;
; MPS$QAST inserts the AST control block supplied in the proper
; position by access mode in the AST queue of the process specified
; by the PID field of the AST control block.  An AST arrival event
; is then reported for the process to reactivate from a wait state
; if appropriate.  The AST control block will be released immediately
; if the PID specifies a non-existent process.
;
; ENVIRONMENT:
;
;	Executed by the primary processor.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	MPS$QAST
;
; INPUT PARAMETERS:
;
;	R2 - Priority increment class
;	R5 - Pointer to AST control block
;
; IMPLICIT INPUTS:
;
;	PCB of process identified by PID field
;
; OUTPUT PARAMETERS:
;
;	R0 - Completion status code
;	R4 - PCB address of process for which AST was queued
;
; SIDE EFFECTS:
;
;	The process identified by the PID in the AST control block
;	will be made executable if not suspended.
;
; COMPLETION CODES:
;
;	SS$_NORMAL  - Normal successful completion status
;	SS$_NONEXPR - Non-existent process
;
;--

	.ENABL	LSB
QNONEXPR:				;
	MOVL	R5,R0			; RELEASE AST CONTROL BLOCK
	JSB	G^EXE$DEANONPAGED	; IF NO SUCH PROCESS
	MOVZWL	#SS$_NONEXPR,R0		; SET ERROR STATUS CODE
	BRB	QEXIT			; AND EXIT

MPS$QAST::				; ENQUEUE AST FOR PROCESS
	MOVZWL	ACB$L_PID(R5),R0	; GET PROCESS INDEX FOR AST TARGET
	DSBINT	#IPL$_SYNCH		; DISABLE SYSTEM EVENTS
	MOVL	G^SCH$GL_PCBVEC,R4	; GET ADDRESS OF VECTOR
	MOVL	(R4)[R0],R4		; LOOK UP PCB ADDRESS
	CMPL	ACB$L_PID(R5),PCB$L_PID(R4) ; CHECK FOR MATCH IN PID
	BNEQ	QNONEXPR		; PID MISMATCHES
	CLRL	R0			; ASSUME KERNEL MODE AND CLEAR HIGH BITS
	INSQUE	(R5),PCB$L_ASTQFL(R4)	; ASSUME QUEUE IS EMPTY AND ATTEMPT INSERT
	BNEQ	50$			; BR IF IT WAS NOT EMPTY
	TSTB	ACB$B_RMOD(R5)		; CHECK FOR SPECIAL KERNEL AST
	BLSS	10$			; BR IF YES
	BICB3	#^C<3>,ACB$B_RMOD(R5),R0; GET AST MODE
;
; THE PROCESS HEADER ADDRESS IS ALWAYS A SYSTEM SPACE ADDRESS (NEGATIVE NUMBER)
; WHILE THE PROCESS HEADER IS RESIDENT.  DURING THE OUTSWAP TRANSITION IT IS
; THE BALANCE SLOT INDEX, A SMALL POSITIVE NUMBER.  FINALLY, AFTER OUTSWAP IT
; IS SET TO ZERO.  HENCE, THE FOLLOWING TEST COMBINES THE FETCH OF THE PHD
; ADDRESS WITH THE TEST FOR PROCESS RESIDENCE.
;
10$:	MOVL	PCB$L_PHD(R4),R1	; POINT TO PROCESS HEADER
	BGEQ	25$			; DON'T SET ASTLVL IF NOT RESIDENT
	MOVB	R0,PHD$B_ASTLVL(R1)	; SET ASTLVL IN PROCESS HEADER
20$:	CMPW	#SCH$C_CUR,PCB$W_STATE(R4) ; IS PROCESS A CURRENT PROCESS?
	BNEQ	25$			; BR ON NO, NOT A CURRENT PROCESS
	CMPL	G^SCH$GL_CURPCB,R4	; IS PROCESS ON PRIMARY?
	BEQL	40$			; YES,
	BSBW	MPS$INTSCND		; INTERRUPT SECONDARY PROCESSOR
	.LIST MEB
;25$:	RPTEVT	AST			; REPORT AST ARRIVAL
25$:	JSB	G^SCH$RSE		; REPORT AST ARRIVAL
	.BYTE	EVT$_AST		; EVENT CODE
30$:	MOVZWL	#SS$_NORMAL,R0		; SET SUCCESS STATUS CODE
QEXIT:	ENBINT				; ENABLE INTERRUPTS
	RSB				; AND RETURN
;
; IF THE AST IS BEING ENQUEUED FOR THE CURRENT PROCESS, THEN THE REPORTING
; OF THE AST EVENT CAN BE BYPASSED AND THE ASTLVL PROCESSOR REGISTER MUST BE
; SET INSTEAD.
;
40$:	MTPR	R0,#PR$_ASTLVL		; ALSO SET ASTLVL REGISTER
	BRB	30$			;
;
; THE AST QUEUE WAS NOT EMPTY (ITS USUAL CONDITION) AND THE PROPER
; POSITION FOR THE NEW AST MUST BE LOCATED.  SINCE THE AST CONTROL
; BLOCK HAS BEEN ERRONEOUSLY INSERTED ON THE QUEUE, IT MUST BE REMOVED
; FIRST.
;
50$:	REMQUE	(R5),R5			; ELSE CORRECT MISTAKE
	MOVAL	PCB$L_ASTQFL(R4),R1	; POINT TO QUEUE HEADER
	MOVL	(R1),R3			; AND GET FIRST ENTRY
	TSTB	ACB$B_RMOD(R5)		; CHECK FOR SPECIAL KERNEL AST
	BGEQ	70$			; BR IF NOT
;
; THE NEW AST IS A SPECIAL KERNEL AST.  IT WILL GO AFTER ALL OTHER SPECIAL
; KERNEL ASTS OR AT THE HEAD OF THE QUEUE IF THERE ARE NONE.
;
60$:	CMPL	R1,R3			; CHECK FOR END OF QUEUE
	BEQL	110$			; BR IF NOT
	TSTB	ACB$B_RMOD(R3)		; CHECK FOR SPECIAL KERNEL IN QUEUE
	BGEQ	110$			; BR IF NOT
	MOVL	(R3),R3			; FLINK ON TO NEXT ACB.
	BRB	60$			;
;
; THE NEW AST IS A NORMAL AST.  IT WILL GO AFTER ALL SPECIAL KERNEL ASTS
; AND ASTS WITH LOWER ACCESS MODE.
;
70$:	BICB3	#^C<3>,ACB$B_RMOD(R5),R0; GET AST MODE
80$:	CMPL	R1,R3			; CHECK FOR END OF QUEUE
	BEQL	110$			; INSERT IF AT END
	CMPZV	#ACB$V_MODE,#ACB$S_MODE,-
		ACB$B_RMOD(R3),R0	; COMPARE ACCESS MODES
	BGTR	100$			; IF GTR AT RIGHT PLACE
90$:	MOVL	(R3),R3			; FLINK ON TO NEXT ACB
	BRB	80$			;
100$:	TSTB	ACB$B_RMOD(R3)		; IS THIS ENTRY A SPECIAL KAST?
	BLSS	90$			; YES, MUST GO AFTER THIS
;
; NOW THE CORRECT POSITION HAS BEEN LOCATED.  INSERT THE AST CONTROL BLOCK
; ON THE QUEUE AND COMPUTE THE NEW VALUE FOR ASTLVL BY INTERROGATING THE
; MODE OF THE AST CONTROL BLOCK AT THE HEAD OF THE QUEUE.
;
110$:	INSQUE	(R5),@ACB$L_ASTQBL(R3)	; INSERT AFTER PREVIOUS
	CLRL	R0			; ASSUME KERNEL MODE
	MOVL 	PCB$L_ASTQFL(R4),R1	; GET HEAD OF AST QUEUE
	TSTB	ACB$B_RMOD(R1)		; IS IT KAST?
	BLSS	10$			; BR IF YES TO SET ASTLVL
	BICB3	#^C<3>,ACB$B_RMOD(R1),R0; GET AST MODE FOR HEAD OF QUEUE
	BRW	10$			; GO SET ASTLVL

	.DSABL LSB
	ASSUME	ACB$V_MODE EQ 0
	ASSUME	ACB$S_MODE EQ 2
	ASSUME	ACB$V_KAST EQ 7

	.PAGE
	.SBTTL	MPS$ASTSCHEDCHK - CHECK FOR RESCHEDULE AT AST DELIVERY
;++
; FUNCTIONAL DESCRIPTION:
;
; MPS$ASTSCHEDCHK is entered to check whether the process that the
; primary was running, should be rescheduled to run on the secondary.
;
; ENVIRONMENT:
;
;	Executed by the primary processor.
;	Hooked in at MPH$ASTDELHK and sometimes returns to MPH$ASTDELCONT.
;
;--

	.ALIGN	LONG
MPS$ASTSCHEDCHK::
	REMQUE	@PCB$L_ASTQFL(R4),R5	; Remove head of queue
	BVS	20$			; Br if queue empty
10$:	JMP	@#MPH$ASTDELCONT	; Return to normal code
20$:	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,30$ ; Flush cache queue
30$:	CMPL	W^MPS$GL_STATE,#MPS$K_IDLESTATE ; Is secondary idle?
	BNEQ	40$			; Br on no, dont bother to reschedule
	SOFTINT	#3			; Request a reschedule interrupt
40$:	JMP	@#MPH$QEMPTYCONT	; Go set null ast level
	.PAGE
	.SBTTL	MPS$ASTNEWLVL - CHECK FOR SETTING NEW ASTLVL
;++
; FUNCTIONAL DESCRIPTION:
;
; MPS$ASTNEWLVL is entered to check whether a new AST level should
; be placed in the processor ASTLVL register.  If the AST level is kernel,
; it should be left alone.  Otherwise, the special indication of an idle
; secondary may be used.
;
; ENVIRONMENT:
;
;	Executed by the primary processor.
;	Hooked in at MPH$NEWLVL, replaces code from hook to end of routine.
;
;--

	.ALIGN	LONG
MPS$ASTNEWLVL::
	MTPR	R2,#PR$_ASTLVL		; Set ASTLVL register
	BEQL	20$			; If kernel, dont change it
	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,10$ ; Flush cache queue
10$:	CMPL	W^MPS$GL_STATE,#MPS$K_IDLESTATE ; Is secondary idle?
	BNEQ	20$			; Br on no, dont change ASTLVL
	BITL	#^X7FFFFFFF,G^SCH$GL_COMQS ; Is any process other than null COM?
	BEQL	20$			; Br on no, nothing else can run
	PUSHAB	PCB$L_ASTQFL(R4)	; Are there any AST's outstanding
	CMPL	(SP)+,PCB$L_ASTQFL(R4)	; for this process?  If so, don't
	BNEQ	20$			; cause a reschedule AST.
	TSTL	PHD$L_MPINHIBIT(R0)	; Any reason not to run on secondary?
	BNEQ	20$			; Br on yes, don't cause reschedule AST
	MTPR	#PSL$C_EXEC,#PR$_ASTLVL	; Set ASTLVL to cause reschedule
20$:	MOVB	R2,PHD$B_ASTLVL(R0)	; Set ASTLVL in PHD
	ENBINT				; Enable system events again
	RSB				; Return
 
	.END
