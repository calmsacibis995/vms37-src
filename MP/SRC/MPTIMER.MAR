	.TITLE	MPTIMER - MP TIMER INTERRUPT HANDLER
	.IDENT	'V03-003'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract:  Timer interrupt handler for secondary processor
;
; Environment: MODE=Kernel 
;
; Author:  RICHARD I. HUSTVEDT, Creation date:  15-MAY-1979
;
; Modified by:
;
;	V03-003	KDM0085		Kathleen D. Morse	02-Apr-1982
;		Fix increment of cpu time array.
;
;	V03-002	KDM0080		Kathleen D. Morse	31-Mar-1982
;		Assembly switch the debug and performance measurement
;		code.
;
;	V03-001	KDM0079		Kathleen D. Morse	31-Mar-1982
;		Accumulate null cpu time in MPS$GL_NULLCPU for secondary
;		instead of in null process' PCB.
;
;	V02-006	KDM0020		Kathleen D. Morse	20-Jul-1981
;		Add code to increment performance measurement array
;		for time spent in different modes.
;
;	V02-005	KDM0012		Kathleen D. Morse	08-Jun-1981
;		Prevent powerfail window that would cause a process
;		to get lost if the secondary powerfailed.
;
;	V02-004	KDM0003		Kathleen D. Morse	15-Sep-1980
;		Make multi-processing run on VMS V2.0.  Fix quantum end
;		on secondary processor.
;
;	V02-003	KDM0002		Kathleen D. Morse	09-Sep-1980
;		Make source fixes for patches.
;
;	V02-002	KDM0001		Kathleen D. Morse	04-Sep-1980
;		Replace copyright.
;
; 01	- 
;--

;
; MACRO LIBRARY CALLS
;
 
	$CADEF				; Define conditional assembly parameters
	$IPLDEF				; Define interrupt priority levels
	$MPSDEF				; Secondary processor state definitions
	$PCBDEF				; Define PCB offsets
	$PHDDEF				; Define PHD offsets
	$PRDEF				; Define processor registers
	$PRIDEF				; Define priority increments
	$PSLDEF				; Define processor status fields
	.PAGE
	.SBTTL	HARDWARE CLOCK INTERRUPTS
;+
; EXE$HWCLKINT - HARDWARE CLOCK INTERRUPT
;
; This routine is automatically vectored to when the clock count register
; overflows.  The accounting integral of the current process in incremented,
; and the quantum of the current process is incremented.  If the process quantum
; transists to zero then a software interrupt is requested on the timer level.
; The clock interrupt is then dismissed.
;
; INPUTS:
;
;	(SP) - PC at time of interrupt
;      4(SP) - PSL at time of interrupt
;
; ENVIRONMENT:
;
;	Executes on secondary processor.
; The routine executes at IPL ^X18.
;
;-
 
	.PSECT	A$EXENONPAGED,LONG
EXE$HWCLKINT::				; Hardware clock interrupt routine
	MOVQ	R0,-(SP)		; Save register R0 and R1
	MTPR	#^X800000C1,#PR$_ICCS	; Clr err & intrpt and re-enable

	.IF NE	CA$_MEASURE
	CVTBL	15(SP),R0		; Get upper byte of saved PSL
	BLSS	50$			; Br if CM bit set
10$:	BICB	#^XF8,R0		; Convert extended byte to index
	INCL	W^MPS$AL_CPUTIME[R0]	; Increment statistics vector
	.ENDC

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_RUNTIME		; Gather performance measurement data
	.ENDC

	CMPL	W^MPS$GL_STATE,#MPS$K_IDLESTATE ; Is a process actually running?
	BEQL	40$			; Br on no, go accumulate null time
	CMPL	W^MPS$GL_STATE,#MPS$K_EXECSTATE ; Is a process actually running?
	BNEQ	20$			; Br on no, don't accumulate time in PHD
	MOVL	W^MPS$GL_CURPCB,R0	; Get address of current process PCB
	MOVL	PCB$L_PHD(R0),R0	; Get address of process header
	INCL	PHD$L_CPUTIM(R0)	; Increment accounting integral
	INCW	PHD$W_QUANT(R0)		; Increment time quantum
	BGEQ	30$			; If EQL quantum ran out
20$:	MOVQ	(SP)+,R0		; Restore R0 and R1
	REI				;

30$:	SOFTINT	#IPL$_TIMER		; Request software int on timer level
	BRB	20$			; Join common code

40$:	INCL	W^MPS$GL_NULLCPU	; Accumulate null cpu time for secondary
	MOVAB	G^SCH$GL_NULLPCB,R0	; Get address of PCB for null process
	MOVL	PCB$L_PHD(R0),R0	; Get address of process header
	INCL	PHD$L_CPUTIM(R0)	; Increment accounting integral
	BRB	20$			; Join common code

	.IF NE	CA$_MEASURE
50$:	MOVZBL	#5,R0			; Insert CM index
	BRB	10$			; Joint common code
	.ENDC
	.PAGE
	.SBTTL	SOFTWARE TIMER INTERRUPTS
;+
; EXE$SWTIMINT - SOFTWARE TIMER INTERRUPTS
;
; This routine is automatically vectored to when a software interrupt
; is requested on the timer level.  Timer interrupts are requested when
; the current process has exceeded its cpu time quantum.
;
; A kernel mode PSL and a PC pointing to MPS$QEND are placed on the kernel
; stack so that the primary will continue executing quantum end for this
; process.
;
; INPUTS:
;
;	(SP) - PC at time of interrupt
;      4(SP) - PSL at time of interrupt
;
; ENVIRONMENT:
;
;	Executes on secondary processor.
; This routine executes at IPL 7.
;
;-
 
	.ENABL	LSB
	.ALIGN	LONG
EXE$SWTIMINT::				; Software timer interrupts
	BITB	#<<PSL$M_CURMOD> -	; Check if this interrupt
		@-<PSL$V_CURMOD>>, -	;  occurred during
		4+<PSL$V_CURMOD@-3>(SP)	;  kernel mode execution
	BEQL	20$			; Br if kernel mode, forget interrupt
	PUSHL	R0			; Save register
	MOVL	W^MPS$GL_CURPCB,R0	; A second check for quantum must be
	MOVL	PCB$L_PHD(R0),R0	;  done here in case the process found
	SETIPL	#IPL$_POWER		; Prevent powerfail window here
	TSTL	W^MPS$GL_PFAILTIM	; Check if powerfail occured
	BNEQ 5$				; Br if it did, always give process back
	TSTW	PHD$W_QUANT(R0)		;  by the hardware clock routine was
	BLSS	30$			;  rescheduled before this interrupt.
5$:	MOVL	(SP),R0			; Restore register
	CLRL	(SP)			; Make PSL look like kernel mode

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_QEND		; Gather performance measurement data
	.ENDC

	BSBW	MPS$MPSCHED2		; Go return process to primary
					;  and make primary start execution at
					;  MPS$QEND, which must follow this line



;+
; MPS$QEND - QUANTUM END PERFORMED BY PRIMARY ON BEHALF OF SECONDARY
;
; This routine is the place that the primary starts executing when the
; secondary passes a process to it that has just finished its quantum.
; 
; ENVIRONMENT:
;
;	Executed by primary processor.
;
;-

MPS$QEND:
	SETIPL	#IPL$_SYNCH		; Synch scheduler with other reporting
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers R0 through R5
	MOVL	G^SCH$GL_CURPCB,R4	; Get current process PCB address
	MOVL	PCB$L_PHD(R4),R5	; Get address of process header
	JSB	G^SCH$QEND		; Perform normal quantum end
10$:	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers R0 thru R5
20$:	REI				; Return from interrupt

30$:	MOVL	(SP)+,R0		; Restore register
	REI
 
 
	.END
