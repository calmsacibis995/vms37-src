	.TITLE	MPLOG - Multi-processor event logger
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract:  This module contains an event logger that may be called
;		to log scheduling information.
;
; Environment: MODE=Kernel 
;
; Author:  Kathleen D. Morse, Creation date:  08-Apr-1981
;
; Modified by:
;
;  , Version  ,
; 01	- 
;--

;
; Include files:
;
	$PCBDEF				; Process control block
	$PHDDEF				; Process header

;
; MACROS:
;

;
; Equated Symbols:
;
ONE_ENTRY = 5				; # of longwords in one log entry
 
;
; Data Area
;
	.PSECT	LOGGER,LONG		; Event logger
MPS$GL_LOGIND::				;
	.LONG	0			; Indicator whether or not to log info
MPS$GL_LOGPTR::				;
	.LONG	0			; Pointer to next free byte in log bufr
MPS$GL_LOG::				;
	.BLKL	<ONE_ENTRY*100>		; Log buffer
MPS$GL_LOGEND::				; End of log buffer
	.LIST	MEB			; Show macro expansions
	.PAGE				;
	.SBTTL	MPS$LOGFOUND - Log scheduling decision result
;++
; Functional Description:
;
; This module is used to log scheduling information as processes as
; scheduled for the secondary.  It is a debugging tool for the
; multi-processing code.
;
; Calling Sequence:
;
;	BSBW	MPS$LOGFOUND
;
; Input Parameters:
;
;	None
;
; Output Parameters:
;
;	None
;
; Implicit Inputs:
;
;	MPS$GL_CURPCB - address of current process on secondary
;	MPS$GL_LOGIND - log indicator, LBS = log info, LBC = don't log info
;	MPS$GL_LOGPTR - pointer to next free byte in log buffer
;	MPS$GL_LOG - beginning of log buffer
;	MPS$GL_LOGEND - end of log buffer
;
; Implicit Outputs:
;
;	Logging data may be entered into the log buffer.
;
;--

MPS$LOGFOUND::				;
	BBC	#0,W^MPS$GL_LOGIND,20$	; Is logging requested?
	PUSHR	#^M<R0,R1,R2,R3>	; Save registers
	MOVAB	W^MPS$GL_LOGEND,R3	; Adr of end of log buffer
	MOVL	W^MPS$GL_LOGPTR,R0	; Adr of next free byte in log buffer
	MOVAB	<ONE_ENTRY*4>(R0),R1	; Adr of next byte past this log entry
	CMPL	R1,R3			; Entry to large to fit in buffer?
	BGEQU	30$			; Br on yes, go turn off event logging
	MOVL	W^MPS$GL_CURPCB,R1	; Adr of current PCB on secondary
	MOVL	PCB$L_PHD(R1),R2	; Adr of current PHD on secondary
	MOVL	G^SCH$GL_COMQS,(R0)+	; Log compute queue states
	MOVL	PCB$L_PID(R1),(R0)+	; Log PID of current process
	MOVL	PHD$L_PC(R2),(R0)+	; Log PC of current process
	MOVL	PHD$L_PSL(R2),(R0)+	; Log PSL of current process
	MOVZBL	PCB$B_PRI(R1),(R0)+	; Log priority of current process
	MOVL	R0,W^MPS$GL_LOGPTR	; Update pointer to next free byte
10$:	POPR	#^M<R0,R1,R2,R3>	; Restore registers
20$:	RSB				; Return to caller

;
; Turn off event logging as buffer is full.
;
30$:	BBCCI	#0,W^MPS$GL_LOGIND,40$	; Turn off event logging, buffer full
40$:	BRB	10$			; Continue with common code
	.LIST	MEB			; Show macro expansions
	.PAGE				;
	.SBTTL	MPS$LOGCHOOSE - Log scheduling decision making data	
;++
; Functional Description:
;
; This module is used to log scheduling information as processes as
; examined for scheduling on the secondary.  It is a debugging tool for the
; multi-processing code.
;
; Calling Sequence:
;
;	BSBW	MPS$LOGCHOOSE
;
; Input Parameters:
;
;	R4 - PCB address of scheduling candidate
;	R5 - PHD address of scheduling candidate
;
; Output Parameters:
;
;	None
;
; Implicit Inputs:
;
;	MPS$GL_LOGIND - log indicator, LBS = log info, LBC = don't log info
;	MPS$GL_LOGPTR - pointer to next free byte in log buffer
;	MPS$GL_LOG - beginning of log buffer
;	MPS$GL_LOGEND - end of log buffer
;
; Implicit Outputs:
;
;	Logging data may be entered into the log buffer.
;
;--

MPS$LOGCHOOSE::			;
	BBC	#0,W^MPS$GL_LOGIND,20$	; Is logging requested?
	PUSHR	#^M<R0,R1,R2,R3>	; Save registers
	MOVAB	W^MPS$GL_LOGEND,R3	; Adr of end of log buffer
	MOVL	W^MPS$GL_LOGPTR,R0	; Adr of next free byte in log buffer
	MOVAB	<ONE_ENTRY*4>(R0),R1	; Adr of next byte past this log entry
	CMPL	R1,R3			; Entry to large to fit in buffer?
	BGEQU	30$			; Br on yes, go turn off event logging
	MOVL	G^SCH$GL_COMQS,(R0)+	; Log compute queue states
	MOVL	PCB$L_PID(R4),(R0)+	; Log PID of current process
	MOVL	PHD$L_PC(R5),(R0)+	; Log PC of current process
	MOVL	PHD$L_PSL(R5),(R0)+	; Log PSL of current process
	MOVZBW	PCB$B_PRI(R4),(R0)+	; Log priority of current process
	MOVZBW	#1,(R0)+		; Log indicator for decision process
	MOVL	R0,W^MPS$GL_LOGPTR	; Update pointer to next free byte
10$:	POPR	#^M<R0,R1,R2,R3>	; Restore registers
20$:	RSB				; Return to caller

;
; Turn off event logging as buffer is full.
;
30$:	BBCCI	#0,W^MPS$GL_LOGIND,40$	; Turn off event logging, buffer full
40$:	BRB	10$			; Continue with common code
	.END
