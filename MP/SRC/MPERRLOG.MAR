	.TITLE	MPERRLOG - MULTI-PROCESSING ERROR LOG SUPPORT ROUTINES
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract:  Error logging routines used by secondary processor.
;
; Environment: MODE=Kernel 
;
; Author:  Kathleen D. Morse, Creation date:  07-Jul-1981
;
; Modified by:
;
;	V03-001	KDM0086		Kathleen D. Morse	02-Apr-1982
;		Make the reference to EXE$GQ_SYSTIME synchronize with
;		the primary processor's asynchronous modification of
;		that field.
;
;  , Version  ,
; 01	- 
;--
	.PAGE
;
; Macro Library Calls
;
 
	$EMBDEF	<SU>			;Error log message offsets
	$MPSDEF				;Define secondary request bits
	$PRDEF				;Processor register definitions

;
; Equated Symbols
;

;
; Local Data
;

	.PSECT	WIONONPAGED
	.PAGE
	.SBTTL MPS$ALLOCEMB - Allocate secondary error message buffer
;+
; MPS$ALLOCEMB - Allocate secondary error message buffer
;
; This routine is called by the secondary processor to allocate
; the error log buffer.  There is currently only one buffer, which
; must be emptied by the primary before it can be re-used.
;
;
; INPUTS:
;
;	R1 - Size of message buffer required
;
; OUTPUTS:
;
;	R0 - Low bit clear if allocation failure
;	   - Low bit set if successful allocation
;	R1 - Secondary error log sequence number
;	R2 - Address of error log buffer, if successful allocation
;
;-
 
MPS$ALLOCEMB::				;Allocate secondary error message buffer
	INCL	W^MPS$GL_ERLSEQNUM	;Record another error log attempt
	CMPL	R1,#MPS$K_ERLBUFSIZ	;Is secondary buffer large enough?
	BGTRU	20$			;Br if not, return error
	BBSSI	#MPS$V_ERLBUFBSY,W^MPS$GL_ERLBUFIND,20$ ;Br if buffer busy
	MOVAB	W^MPS$AL_ERLBUFADR,R2	;Get address of error log buffer
	MOVW	R1,EMB$W_SIZE(R2)	;Set size of this error message
	MOVL	W^MPS$GL_ERLSEQNUM,R1	;Secondary error log sequence # for msg
	MOVW	R1,EMB$W_HD_ERRSEQ(R2)	;Set secondary error log sequence #
10$:	MOVQ	G^EXE$GQ_SYSTIME,EMB$Q_HD_TIME(R2) ;Get system time
	CMPL	G^EXE$GQ_SYSTIME,EMB$Q_HD_TIME(R2) ;Verify that the time
	BNEQ	10$				   ; acquired is valid and
	CMPL	G^EXE$GQ_SYSTIME+4,EMB$Q_HD_TIME+4(R2) ; is not being modified
	BNEQ	10$				   ; by the primary.
	MFPR	#PR$_SID,EMB$L_HD_SID(R2) ;Set system ID for this processor
	MOVZBL	#1,R0			;Indicate successful allocation
	RSB				;Return
20$:	CLRL	R0			;Indicate failure to allocate buffer
	RSB				;Return
	.PAGE
	.SBTTL MPS$RELEASEMB - Release secondary error message buffer
;+
; MPS$RELEASEMB - Release secondary error message buffer
;
; This routine is called by the secondary when the error log buffer
; contains a completed error message.  The primary processor is interrupted,
; with a request to enter the error log message for the secondary.
;
; INPUTS:
;
;	None
;
; OUTPUTS:
;
;	The primary processor is interrupted to log the secondary's message.
;
;-
 
MPS$RELEASEMB::				;Release error message buffer
	BBSSI	#MPS$V_SECERRLOG,W^MPS$GL_SECREQFLG,10$ ;Error log message ready
10$:	BSBW	W^MPS$INTPRIM		;Interrupt primary to log message
	RSB				;
	.PAGE
	.SBTTL	MPS$COLDSTART/MPS$WARMSTART - Build secondary error log messages
;+
; MPS$COLDSTART - log coldstart (system boot)
;
; This routine is called by SYSINIT after correctly setting the system
; time to log the booting of the system.
;
; MPS$WARMSTART - Log warmstart (power recovery)
;
; This routine is called by powerfail after correcting the system time
; to log the power failure and recovery.
;
; INPUTS:
;
;	None
;
; OUTPUTS:
;
;	The error log buffer is allocated and filled with the appropriate
;	message if possible.
;-
	.ENABL	LSB
MPS$COLDSTART::				;
	MOVZWL	#EMB$C_CS,R3		;Set type of message to coldstart
	BRB	10$			;
MPS$WARMSTART::				;
	MOVZWL	#EMB$C_WS,R3		;Set type of message to warmstart
10$:	MOVZWL	#EMB$C_SU_LENGTH,R1	;Set size of message to allocate
	BSBB	B^MPS$ALLOCEMB		;Allocate secondary error log buffer
	BLBC	R0,20$			;Br if not available
	MFPR	#PR$_TODR,EMB$L_SU_DAYTIM(R2) ;Log time of day clock
	MOVW	R3,EMB$W_SU_ENTRY(R2)	;Set message type
	BSBB	B^MPS$RELEASEMB		;Release buffer
20$:	RSB				;
	.DSABL	LSB
	.END
