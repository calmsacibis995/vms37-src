	.TITLE	CBTA
	.IDENT	/V03000/
                                                                                ;**-1
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; VERSION 04.3
;                                                                               ;**-1
; D. N. CUTLER/C. MONIA 06-APR-74
;                                                                               ;**NEW**
; MODIFICATIONS:                                                                ;**NEW**
;                                                                               ;**NEW**
; NO.		DATE		PROGRAMMER                                      ;**NEW**
; ---		----		----------                                      ;**NEW**
;                                                                               ;**NEW**
; 030		07-JAN-75	C. MONIA                                        ;**NEW**
; 044		10-DEC-75	C. MONIA
; EB067		24-JUL-77	E. BAATZ
;		22-SEP-77	A. GOLDSTEIN
; 050		15-DEC-77	E. MARISON
;
; BINARY TO ASCII CONVERSION
;
; LOCAL MACROS
;
; SETUP CONVERSION CONTROL WORD ON STACK
;
; STCVT	RADIX,WIDTH,SIGNED,COMPR,BLANKS
;
; WHERE:
;
;	RADIX=NUMERIC VALUE SPECIFYING CONVERSION RADIX
;	WIDTH=NUMERIC VALUE FROM 1 TO 7 SPECIFYING FIELD WIDTH
;	SIGNED=SIGN OR MAGNITUDE FLAG. ASCII STRING 'SIGN' SPECI-
;	       FIES SIGNED CONVERSION. ANYTHING ELSE SPECIFIES MAGNI-
;	       TUDE.
;
;	COMPR=COMPRESS LEADING ZEROS FLAG. ASCII STRING 'COMPRES' SPE-
;	     CIFIES COMPRESSION OF LEADING ZEROS. ANYTHING ELSE MEANS
;	     INCLUDE LEADING ZEROS OR SPACES IN CONVERSION.
;
;	BLANK=REPLACE LEADING ZEROS WITH BLANKS (SPACES). ASCII STRING
;	       'BLANKS' MEANS BLANK REPLACEMENT IF ZERO COMPRESS IS DIS-
;	        ABLED. ANYTHING ELSE SPECIFIES ZERO PADDING
;

	.MACRO	STCVT	RADIX,WIDTH,SIGN,COMPR,BLANK
$$$BLK=0
$$$SGN=0
$$$SUP=1*1000
	.IF IDN	<BLANK>,<BLANKS>
$$$BLK=1*2000
	.ENDC
	.IF IDN	<SIGN>,<SIGNED>
$$$SGN=1*400
	.ENDC
	.IF IDN	<COMPR>,<COMPRES>
$$$SUP=0*1000
	.ENDC
	MOV	#<WIDTH*4000>!$$$BLK!$$$SGN!$$$SUP!RADIX,-(SP)
	.ENDM

; ++50
	.IIF	NDF,R$$DVN,R$$DVN=0	; 0 = OCTAL VERSION #
					; 1 = DECIMAL VERSION #
; ++50
;+
; **-$CBDAT-CONVERT DATE TO TWO DIGIT DECIMAL MAGNITUDE
; **-$CBDMG-CONVERT BINARY TO DECIMAL MAGNITUDE
; **-$CBDSG-CONVERT BINARY TO DECIMAL SIGNED
; **-$CBOMG-CONVERT BINARY TO OCTAL MAGNITUDE
; **-$CBVER-CONVERT BINARY TO VERSION NUMBER RADIX (R$$DVN=0 OCTAL,R$$DVN=1 DECIMAL)
; **-$CBTA-GENERAL PURPOSE BINARY TO ASCII CONVERSION
; **-$CBOSG-CONVERT BINARY TO OCTAL SIGNED
; **-$CBTMG-CONVERT BINARY BYTE TO OCTAL MAGNITUDE
;
; INPUTS:
;
;	R0=ADDRESS TO STORE FIRST BYTE IN OUTPUT STRING.
;	R1=NUMBER TO BE CONVERTED.
;	R2=ZERO SUPPRESSION INDICATOR.
;		IF R2 EQ 0, THEN SUPPRESS ZEROS.
;		IF R2 NE 0, THEN DO NOT SUPPRESS ZEROS.
;
; IF $CBTA IS CALLED THEN R2 MUST CONTAIN THE FOLLOWING INFORMATION
;
;	LOW BYTE=CONVERSION RADIX (2-10.)
;	BIT 8=MAGNITUDE/SIGNED CONVERSION (1=SIGNED)
;
;	BIT 9=ZERO COMPRESS FLAG (0=COMPRESS LEADING ZEROS)
;
;	BIT 10=BLANK FILL FLAG (1=REPLACE LEADING ZEROS WITH BLANKS
;	       IF ZERO COMPRESS DISABLED, 0=ZERO FILL).
;
;	BITS 11-15=FIELD WIDTH (1-32)
;
;
; OUTPUTS:
;
;	R0=ADDRESS OF NEXT BYTE AFTER LAST DIGIT STORED.
;
;	IF THE CONVERTED DIGIT EXCEEDS 9, THE RESULT IS BIASED TO FALL
;	IN THE RANGE  A - Z
;
;-

;
; CONVERT TWO-DIGIT DATE TO ASCII
;

	.ENABL	LSB

$CBDAT::			;
	STCVT	10.,2.,MAGN,NOCOMP,NOBLANK ; PUSH CONVERSION PARAMETERS
	BR	10$		; CONVERT NUMBER

;
; CONVERT 5-DIGIT UNSIGNED DECIMAL TO ASCII
;

	.IF	EQ,R$$DVN-1		; ++50
$CBVER::			; ++50
	.ENDC				; ++50
$CBDMG::			;
	STCVT	10.,5.,MAGN,NOCOMP,NOBLANK ; PUSH CONVERSION PARAMETERS
	BR	10$		; CONVERT TO ASCII

;
; CONVERT 5-DIGIT SIGNED DECIMAL TO ASCII
;

$CBDSG::			;
	STCVT	10.,5.,SIGNED,NOCOMP,NOBLANK ; PUSH CONVERSION PARAMETERS
	BR	10$		;

;
; CONVERT BINARY TO OCTAL MAGNITUDE
;

	.IF	EQ,R$$DVN		; ++50
$CBVER::			; ++50
	.ENDC				; ++50
$CBOMG::			;
	STCVT	8.,6.,MAGN,NOCOMP,NOBLANK ; PUSH CONVERSION PARAMETERS
	BR	10$		; CONVERT TO ASCII

;
; CONVERT BINARY TO OCTAL SIGNED
;

$CBOSG::			;
	STCVT	8.,6.,SIGNED,NOCOMP,NOBLANK ; PUSH CONVERSION PARAMETERS
	BR	10$		; CONVERT TO ASCII

;
; CONVERT BINARY BYTE TO OCTAL MAGNITUDE
;

$CBTMG::			;
	BIC	#177400,R1	; ENSURE THAT HIGH BYTE IS CLEAR
	STCVT	8.,3.,MAGN,NOCOMP,NOBLANK ; PUSH CONVERSION PARAMETERS

;
; SET OR CLEAR ZERO SUPPRESS FLAG
;

10$:				;
	TST	R2		; SUPPRESS ZEROS?
	BNE	20$		; IF NE NO
	BIC	#1*1000,(SP)	; ENABLE ZERO SUPPRESS
20$:				;
	MOV	(SP)+,R2	; SET CONTROL WORD

	.DSABL	LSB

;
; GENERAL BINARY TO ASCII CONVERSION
;


$CBTA::				;
	SAVRG			; SAVE THE NON-VOLATILE REGISTERS
	MOVB	R2,R5		; COPY RADIX BYTE
	CLRB	R2		; CLEAR BITS THAT SHIFT INTO FIELD WIDTH	; EB067
	SWAB	R2		; POSITION REMAINING DATA TO LOW BYTE
	ASR	R2		; SHIFT OFF MAGNITUDE FLAG			; EB067
	BCC	10$		; IF C/C UNSIGNED CONVERSION			;**-1
	TST	R1		; POSITIVE VALUE?
	BPL	10$		; IF PL YES
	NEG	R1		; MAKE VALUE POSITIVE
	MOVB	#'-,(R0)+	; INSERT A MINUS SIGN
10$:				;
	MOV	R0,R4		; COPY STRING POINTER
	ROR	R2		; SHIFT OFF SUPPRESS FLAG			; EB067
	ROR	R2		; TRANSFER TO R2				;**-2
	ROR	R3		; GET BLANK/ZERO PAD FLAG
	CLRB	R3		; CLEAR COUNT BYTE
	BISB	R2,R3		; TRANSFER COUNT BYTE
	CLRB	R2		; CLEAR FILL BYTE
	BISB	#'0,R2		; SET FILL BYTE
	MOV	R1,R0		;DIVIDEND TO R0


	.IF	DF	V1145

1$:	MOV	R0,R1		;DIVIDEND TO R1
	CLR	R0		;CLEAR HIGH PART
	DIV	R5,R0		;DIVIDE EM UP

	.ENDC


	.IF	NDF	V1145

1$:	MOV	R5,R1		;SET CONVERSION RADIX
	CALL	$DIV		;DIVIDE EM UP

	.ENDC


	CMP	R1,#9.		; RESULT EXCEED NUMERICS?
	BLOS	15$		; IF LOS NO
	ADD	#7,R1		; BIAS TO FALL IN U/C ALPHABETIC
15$:				;
	ADD	R2,R1		; ADD CHARACTER BIAS
	MOV	R1,-(SP)	; SAVE CHARACTER
	DECB	R3		; DECREMENT CHARACTER COUNT
	BLE	3$		; IF LE NO DIGITS LEFT
	TST	R0		; ZERO QUOTIENT
	BNE	2$		; IF NE YES, GO AGAIN
	TST	R2		; SUPPRESS ZEROS
	BPL	3$		; IF PL YES, ALL DONE
	TST	R3		; SUBSTITUTE BLANKS?
	BPL	2$		; IF PL NO
	BIC	#20,R2		; CONVERT FILL TO BLANK
2$:	CALL	1$		;DIVIDE AGAIN
3$:				;
	MOVB	(SP)+,(R4)+	;STORE A DIGIT
	MOV	R4,R0		;STORE TERMINAL ADDRESS
	RETURN			;

	.END
