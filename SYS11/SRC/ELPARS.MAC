	$BEGIN	ELPARS,21.0,<EXECUTE SYSTEM PARSE DIRECTIVE>
; ALTERED BY:
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  8-SEP-77
;
; THIS ROUTINE IS USED TO INTERFACE FCS TO EXTENDED FILE NAME PROCESSING
; FACILITIES WHERE AVAILABLE IN A SUPPORTING SYSTEM. IT IN EFFECT BYPASSES
; THE FILE NAME PROCESSING BUILT INTO FCS AND ALLOWS THE SYSTEM
; DIRECTIVE TO PROCESS FILE NAME DATA FROM THE DSPT AND DEFAULT DATA
; INTO A FULLY PARSED FILE NAME BLOCK.
;
; ENTRY POINTS, NAMED ..ELP0 THRU ..ELP3 ARE PROVIDED TO FILL THE NEEDS
; OF, RESPECTIVELY, .PARSE, .PRSDV, .GTDID, AND .GTDIR.
;
; MODIFIED BY:
;
;	,21.0	ACG0034		Andrew C. Goldstein,  27-Mar-1979  17:15
;	FIX .GTDID BUG, ADD LONG DIRECTORY STRING BUFFER
;
;
; DEFINE PARSE MODES
;
PM.NOR	= 0			;NORMAL FCS MODE
PM.PDV	= 1			;PARSE DEVICE ONLY
PM.FNB	= 2			;PARSE FROM FNB

	.MCALL	DIR$

	.IF	EQ,R$$ELP-1
	.ENABL	LSB

;+
;	..ELP3	PARSE FOR .GTDIR
;
; INPUTS:
;	R0 = FDB
;	R1 = FNB
;	R2 = ADDR OF DIRECTORY DESCRIPTOR
;
; OUTPUTS:
;	C = 1 IF ERROR (STATUS IN F.ERR)
;	  = 0 IF SUCCESS OR UNSUPPORTED
;	Z = 1 IF DIRECTIVE UNSUPPORTED
;	  = 0 IF DIRECTIVE SUPPORTED AND SUCCESS
;
;-

..ELP3::
	CALL	DPB1		;BASIC DPB SETUP
	MOV	R2,(R5)+	;P5 = DIRECTORY DESCRIPTOR
	BR	20$		;PROCEED WITH COMMON CODE

;+
;	..ELP2	PARSE FOR .GTDID
;
; INPUTS:
;	R0 = FDB
;	R1 = FNB
;
; OUTPUTS:
;	C = 1 IF ERROR (STATUS IN F.ERR)
;	  = 0 IF SUCCESS OR UNSUPPORTED
;	Z = 1 IF DIRECTIVE UNSUPPORTED
;	  = 0 IF DIRECTIVE SUPPORTED AND SUCCESS
;
;-

..ELP2::
	CALL	DPB1		;BASIC DPB SETUP
	MOV	#-1,(R4)	;BASH DEFAULT DIR DESCRIPTOR			;ACG0034
	BR	12$		;PROCEED WITH COMMON CODE			;ACG0034
										;ACG0034
;+										;**-2
;	..ELP1	PARSE FOR .PRSDV
;
; INPUTS:
;	R0 = FDB
;	R1 = FNB
;	R2 = ADDR OF DATASET DESCRIPTOR
;	R3 = DFNB
;
; OUTPUTS:
;	C = 1 IF ERROR (STATUS IN F.ERR)
;	  = 0 IF SUCCESS OR UNSUPPORTED
;	Z = 1 IF DIRECTIVE UNSUPPORTED
;	  = 0 IF DIRECTIVE SUPPORTED AND SUCCESS
;
;-

..ELP1::
	CALL	DPB0		;BASIC DPB SETUP
	MOV	#PM.PDV,(R5)+	;P1 = PARSE DEVICE MODE
	CALL	10$		;CALL COMMON CODE
	BCC	2$		; BRANCH IF SUCCESS
	CMPB	F.ERR(R0),#IE.BAD ; IF BAD PARM THEN BRANCH
	BEQ	5$
	CMPB	F.ERR(R0),#IE.BDV ; IF BAD DEVICE BRANCH
	BEQ	5$
	MOV	#1,F.ERR(R0)	; ITS ALRIGHT NOTE SUCCESS
	BR	55$		; GO ASSIGN LUN AND RETURN
;
5$:	CLZ			; NOTE FAILURE Z = 0
	SEC			; C = 1
2$:	RETURN

;+
;	..ELP0	PARSE FOR .PARSE
;
; INPUTS:
;	R0 = FDB
;	R1 = FNB
;	R2 = ADDR OF DATASET DESCRIPTOR
;
;	R3 = DFNB
; OUTPUTS:
;	C = 1 IF ERROR (STATUS IN F.ERR)
;	  = 0 IF SUCCESS OR UNSUPPORTED
;	Z = 1 IF DIRECTIVE UNSUPPORTED
;	  = 0 IF DIRECTIVE SUPPORTED AND SUCCESS
;
;-

..ELP0::
	CALL	DPB0		;BASIC DPB SETUP
	MOV	#PM.NOR,(R5)+	;P1 = NORMAL PARSE MODE
10$:	MOVB	F.LUN(R0),(R5)+	;P2 = LUN
	CLRB	(R5)+
	MOV	R2,(R5)+	;P3 = DATASET DESCRIPTOR
	MOV	R3,(R5)+	;P4 = DFNB

12$:	MOV	R4,-(SP)							;ACG0034
	ADD	#A.EXDS-A.DFDR,(SP) ;COMPUTE ADDR OF EXTENDED DIR BUFFER	;ACG0034
	MOV	(SP),-(SP)	;COPY THE ADDRESS				;ACG0034
	ADD	#A.DFDR+4-A.EXDS,(SP) ;GET ADDR OF OLD DIR STRING BUFFER	;ACG0034
	CMP	(SP)+,2(R4)	;SEE IF DESCRIPTOR POINTS TO OLD BUFFER		;ACG0034
	BNE	13$		;BRANCH IF NOT					;ACG0034
	MOV	(SP),2(R4)	;IF SO, FIX UP TO BE LONG BUFFER		;ACG0034
13$:	CMP	#-1,(R4)	;SEE IF DIRECTORY STRING IS UNITIALIZED		;ACG0034
	BNE	15$		;BRANCH IF NOT					;ACG0034
	MOV	(SP),2(R4)	;YES - INIT POINTER (COUNT IS DONE BELOW)	;**-4
15$:	CMP	(SP)+,2(R4)	;SEE IF USER HAS WRITTEN A DIRECTORY STRING
	BEQ	30$		;BRANCH IF NOT
	MOV	R4,(R5)+	;YES - P5 = DEFAULT DIRECTORY STRING
20$:	CLR	R4		;INDICATE NO DIRECTORY STRING RETURN
	BR	40$

30$:	CLR	(R5)+		;P5 = 0 TO USE PROCESS DEFAULT DIRECTORY
40$:	MOV	R1,(R5)+	;P6 = FNB TO PARSE INTO
	MOV	R4,(R5)+	;P7 = ADDR OF RETURN DIRECTORY DESCRIPTOR
	BEQ	50$		;BRANCH IF NONE
	MOV	#80.,(R4)	;SET BUFFER LENGTH OF 80 BYTES 			;ACG0034
	MOV	#-1,D.DFUN(R4)	;SMASH DEFAULT DID UNIT TO PREVENT CONFUSION	;ACG0034
										;**-2
50$:	SUB	#16.,R5		;POINT TO START OF DPB
	DIR$	R5		;EXECUTE THE DIRECTIVE
	BCS	60$		;BRANCH IF ERROR
55$:	CALL	.ASLUN		;ASSIGN THE LUN (RETURNS C BIT ON FAILURE)
	CLZ			;CLEAR Z BIT TO INDICATE REAL SUCCESS
	RETURN

60$:	TST	R4		; DID WE ASK FOR DIRECTORY STRING
	BEQ	65$		; BRANCH IF NO
	MOV	#-1,(R4)	; YES - FLAG DEF DIR STRG NEEDED TO BE INIT'ED
65$:	CMP	@#$DSW,#IE.SDP	;SEE IF DIRECTIVE UNSUPPORTED
	BEQ	70$		;BRANCH IF YES. NOTE! C=0, Z=1
	SEC			;ELSE REAL ERROR
	MOV	@#$DSW,F.ERR(R0) ; NOTE REASON WHY WE FAILED
70$:	RETURN

	.DSABL	LSB

;
; SUBROUTINE TO DO INITIAL SETUP OF DPB
;
; OUTPUTS:
;	R4 = ADDRESS OF A.DFDR IN FSR2
;	R5 = ADDRESS OF P1 OF DPB IN FSR2
;

DPB0:	MOV	@#.FSRPT,R5	;GET ADDRESS OF FSR2
	MOV	R5,R4
	ADD	#A.DPB,R5	;GET ADDRESS OF DPB
	ADD	#A.DFDR,R4	;GET ADDRESS OF DEFAULT DIRECTORY DESCRIPTOR
	MOV	#<8.*256.>+145.,(R5)+ ;STORE DIC & DPB SIZE
	RETURN

;
; SUBROUTINE TO SECONDARY DPB SETUP FOR .GTDID AND .GTDIR PARSE
;
; OUTPUTS:
;	R4 = ADDRESS OF A.DFDR IN FSR2
;	R5 = ADDRESS OF P5 OF DPB IN FSR2
;

DPB1:	CALL	DPB0		;DO INITIAL SETUP
	MOV	#PM.FNB,(R5)+	;P1 = FNB MODE
	MOVB	F.LUN(R0),(R5)+	;P2 = LUN
	CLRB	(R5)+
	CLR	(R5)+		;P3 = 0 (DSPT)
	MOV	R1,(R5)+	;P4 = FNB (DFNB)
	RETURN

	.IFF
;
; DUMMY ROUTINES WHICH INDICATE PARSE FAILURE DUE TO NO SUPPORT
;
..ELP3::
..ELP2::
..ELP1::
..ELP0::

	CLC			; CLEAR C-BIT
	SEZ			; SET THE Z-BIT
	RETURN			; AND RETURN


	.ENDC

;
;
	$END	ELPARS
;
;
	.END
