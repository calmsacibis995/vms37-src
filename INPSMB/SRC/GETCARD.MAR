	.TITLE	GETCARD - INPUT SYMBIONT ROUTINE TO GET A CARD
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  VAX/VMS INPUT SYMBIONT
;
; ABSTRACT:	THIS MODULE CONTAINS THE ROUTINES TO READ,
;		DOUBLE BUFFERING, FROM THE CARD READER (SYS$INPUT).
;
;
; ENVIRONMENT:	USER MODE
;
;
; AUTHOR:	LEN KAWELL, CREATION DATE: 8-MAR-78
;
; MODIFIED BY:
;
;  , VERSION  ,
; 01	- 
;--

;
; INCLUDE FILES:
;
;	[INPSMB.SRC]PREFIX.MAR
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PAGE
	.SBTTL	GET NEXT CARD FROM READER
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	WAITS FOR PREVIOUS QIO TO COMPLETE, PASSES THE ADDRESS OF
;	THAT DATA TO THE CALLER, TOGGLES THE BUFFER INDEX, AND
;	QUEUES ANOTHER READ QIO.
;
; CALLING SEQUENCE:
;
;	BSB	INP$GETCARD
;	BSB	INP$STARTCARD		(USED IF JUST STARTING READING)
;
; INPUT PARAMETERS:
;
;	R2 CONTAINS INDEX INTO BUFFER ADDRESS VECTOR (ONLY FOR INP$STARTCARD)
;	R11 CONTAINS ADDRESS OF INP$G_DATA
;
; IMPLICIT INPUTS:
;
;	ID_Q_TIMEOUT(R11) CONTAINS TIMEOUT TIME
;	ID_B_INBUF_INDX(R11) CONTAINS INDEX INTO BUFFER ADDRESS VECTOR
;
; OUTPUT PARAMETERS:
;
;	R6 CONTAINS BYTE COUNT OF DATA
;	R7 CONTAINS ADDRESS OF DATA
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES
;
;	R0 CONTAINS QIO COMPLETION STATUS (0 IF IT TIMED-OUT)
;
; SIDE EFFECTS:
;
;	ANOTHER REQUEST IS QUEUED FOR READER
;
;--

	PURE_SECTION

INP$GETCARD::

	$SETIMR_S #INP$K_TIMEFN,-	;SET TIMEOUT TIMER
		ID_Q_TIMEOUT(R11)
	$WFLOR_S #INP$K_CREFN,-		;WAIT FOR COMPLETION/TIMEOUT
		#<INP$K_CREFN!INP$K_TIMEFN>@1
	$CANTIM_S			;CANCEL THE TIMER QUEUE REQUEST
	MOVZBL	ID_B_INBUF_INDX(R11),R2	;GET INPUT BUFFER INDEX
	MOVL	INP$G_INBUF_ADD[R2],R7	;SET BUFFER ADDRESS
	MOVZBL	ID_Q_IOSB+2(R11),R6	;SET BYTE COUNT
	BBC	#FLAG_V_NOTRAIL,ID_L_FLAGS(R11),GET_STATUS ;BR IF NOT TRAILING BLANK REMOVAL
					;ELIMINATE TRAILING BLANKS
	MOVAB	(R7)[R6],R1		;GET ADDR OF END OF CARD
10$:	CMPB	-(R1),#^A\ \		;IS CHARACTER A BLANK?
	BNEQU	GET_STATUS		;BR IF NOT - BLANKS ELIMINATED
	SOBGTR	R6,10$			;DECREMENT BYTE COUNT - TRY NEXT

GET_STATUS:
	MOVZWL	ID_Q_IOSB(R11),-(SP)	;GET COMPLETION STATUS
	BEQL	10$			;BR IF TIMED-OUT
	CMPW	#SS$_ENDOFFILE,(SP)	;END-OF-FILE CARD?
	BEQLU	10$			;BF IF YES
	BSBW	INP$EOJ			;IS CARD $EOJ?
	BLBC	R0,20$			;BR IF NOT
10$:	$QIO_S	FUNC=#IO$_SETMODE,-	;RESET TRANSLATION MODE
		CHAN=ID_W_CRCHAN(R11),-	;
		P1=ID_T_CHAN_INFO+4(R11)
	TSTL	(SP)			;PREVIOUS READ TIME-OUT?
	BEQL	30$			;BR IF YES
20$:	BSBW	INP$STARTCARD		;START READING THE NEXT CARD
30$:	MOVL	(SP)+,R0		;RESTORE STATUS OF LAST CARD
	RSB				;RETURN

;
; START NEXT READ
;
INP$STARTCARD::
	XORL	#1,R2			;TOGGLE BUFFER INDEX
	MOVB	R2,ID_B_INBUF_INDX(R11)	;SAVE NEW INDEX
	MOVL	W^INP$G_INBUF_ADD[R2],R2 ;GET ADDRESS OF NEXT BUFFER
	$QIO_S	EFN=#INP$K_CREFN,-	;EVENT FLAG NUMBER
		CHAN=ID_W_CRCHAN(R11),-	;CHANNEL NUMBER
		FUNC=#IO$_READVBLK,-	;READ FUNCTION
		IOSB=ID_Q_IOSB(R11),-	;I/O STATUS BLOCK
		P1=(R2),-		;BUFFER ADDRESS
		P2=#80			;80 BYTES
	RSB				;RETURN

	.END
