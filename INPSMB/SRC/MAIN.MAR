	.TITLE	MAIN - INPUT SYMBIONT MAIN ROUTINE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  VAX/VMS INPUT SYMBIONT
;
; ABSTRACT:	THIS MODULE CONTAINS THE MAIN LINE ROUTINE FOR
;		THE CARD READER INPUT SYMBIONT.
;
;
; ENVIRONMENT:	USER MODE
;
;
; AUTHOR:	LEN KAWELL, CREATION DATE: 8-MAR-78
;
; MODIFIED BY:
;
;	01.04	LMK0001		Len Kawell	8-Feb-1980
;		Increased non-jobcard timeout from 2 minutes to 5 minutes.
;
;	01.03	CNH0025		Chris Hume	14-Dec-1979	 8:00
;		Fixed LOGIN to handle passwords users can SET.  Restricted
;		password syntax to Symbolic strings under 32 characters long.
;		([LOGIN]LOGIN.MAR 01.10, [CLIUTL]SETPWD.B32 01.03,
;		[DCL]CLIMSG.MDL 01.06, [UAF]UAFMAIN.B32 02.06,
;		UAFPARSE.B32 01.03, [INPSMB]PARSECMD.MAR 01.03)
;
;	01.02	CNH0019		Chris Hume	16-Oct-1979	11:00
;		Allow dollar signs ($) and underscores (_) in usernames on $JOB
;		cards.  Restrict AUTHORIZE ADD command to legal usernames.
;		(PARSECMD 01.01, [UAF]UAFMAIN.B32 02.03)
;
;	01.01	CNH0005		Chris Hume	22-May-1979	13:00
;		Use the correct record size when accessing SYSUAF.DAT
;		also correct obscure error reporting bug.
;		(PREFIX.MAR 01.01)
;--

;
; INCLUDE FILES:
;
;	[INPSMB.SRC]PREFIX.MAR

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	$UAFDEF				;USER ACCESS FILE DEFINITIONS
	$SMRDEF				;SYMBIONT MANAGER MESSAGES
	$PCBDEF				;PROCESS CONTROL BLOCK OFFSETS
	$JBCMSGDEF			;JOB CONTROLLER MESSAGES
	$SHRDEF				;SHARED MESSAGES
;
; OWN STORAGE:
;
	PURE_SECTION

;
; DESCRIPTOR TO UAF BUFFER
;
UAFBUF_DESC:
	.LONG	UAF$C_LENGTH		;UAF BUFFER SIZE
	.LONG	INP$T_UAFBUF		;ADDRESS OF BUFFER

;
; READ TIMEOUT TIMES
;
JOB_TIMEOUT:
	.LONG	-15*10000000,-1		;WHILE LOOKING FOR $JOB CARD
DEF_TIMEOUT:
 	.LONG	-5*60*10000000,-1	;WHILE READING ANYTHING ELSE

;
; INPUT LOGICAL NAME DESCRIPTOR
;
INPUT_NAME:
	STRING_DESC	<SYS$INPUT>	;ASSIGNED BY SYMBIONT MANAGER

;
; INPUT BUFFER ADDRESS VECTOR
;
INP$G_INBUF_ADD::
	.LONG	INBUF0			;ADDRESS OF BUFFER 0
	.LONG	INBUF1			;ADDRESS OF BUFFER 1

;
; SYMBIONT DEFAULT USERNAME/ACCOUNT NAME
;
SYS_UNAME: STRING_DESC <SYSTEM>		;USERNAME/ACCOUNT NAME

;
; PARAMETER LIST FOR RESETTING THE SYMBIONT ACCOUNT/UIC
;
SYS_ACCNT::
	.LONG	SYS_UNAME		;ADDR OF ACCOUNT NAME DESCIPTOR
	.LONG	1@16+4			;UIC [1,4]

	IMPURE_DATA
;
; GLOBAL IMPURE DATA VECTOR
;
INP$G_DATA::
	.BLKB	ID_K_SIZE		;SYMBIONT DATA BASE

;
; COMMAND FILE RMS DATA BASE
;
	.ALIGN	LONG
INP$G_FAB::
	$FAB	ORG=SEQ,-		;SEQUENTIAL ORGANIZATION
		RFM=VAR,-		;VARIABLE LENGTH RECORDS
		DNM=<BATCH.COM>,-	;DEFAULT FILE NAME
		NAM=INP$G_NAM,-		;ADDRESS OF NAME BLOCK
		RAT=CR			;CR/LF CARRIAGE CONTROL

INP$G_RAB::
	$RAB	FAB=INP$G_FAB,-		;ADDRESS OF FAB
		ROP=WBH			;WRITE BEHIND

INP$G_NAM::
	$NAM	ESS=NAM$C_MAXRSS	;EXPANDED STRING BUFFER SIZE
EXPANDED_DESC:
	.BLKL	1			;EXPANDED STRING SIZE
	.LONG	EXPANDED		;EXPANDED STRING ADDRESS
EXPANDED:
	.BLKB	NAM$C_MAXRSS		;EXPANDED STRING BUFFER

;
; SYMBIONT MANAGER MESSAGE BUFFER VECTOR
;
SYMMSG_DESC:	.BLKL	1		;LENGTH OF MESSAGE
		.LONG	INP$G_SYMMSG	;START OF MESSAGE
INP$G_SYMMSG::	.BLKB	SM_K_SIZE

;
; INPUT BUFFERS
;
INBUF0:	.BLKB	80
INBUF1:	.BLKB	80

;
; USER ACCESS FILE RECORD BUFFER
;
INP$T_UAFBUF::
	.BLKB	UAF$C_LENGTH


	.PAGE
	.SBTTL	MAIN ROUTINE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	ASSIGNS THE INPUT CHANNEL, GETS THE JOB/PASSWORD CARDS,
;	VALIDATES THE USER'S ACCESS, OPENS THE OUTPUT FILE, READS THE
;	REST OF THE COMMAND DECK TO THE OUTPUT FILE, CLOSES THE OUTPUT
;	FILE, AND SENDS THE SYMBIONT MANAGER A MESSAGE TO QUEUE THE
;	OUTPUT FILE FOR EXECUTION.
;
;
; CALLING SEQUENCE:
;
;	MAIN ENTRY POINT
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	SYS$INPUT IS ASSIGNED TO THE CARD READER
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	JOB WILL BE ENTERED IN BATCH QUEUE
;
;--

	PURE_SECTION


INP_START:				;INITIAL ENTRY POINT
	.WORD	0			;ENTRY MASK
	MOVAL	W^INP$HANDLER,(FP)	;SET ADDRESS OF COND HANDLER
	MOVAL	W^INP$G_FAB,R9		;SET ADDRESS OF FAB
	MOVAL	W^INP$G_RAB,R10		;SET ADDRESS OF RAB
	MOVAL	W^INP$G_DATA,R11	;SET ADDRESS OF IMPURE DATA VECTOR
;
; CREATE A MAILBOX FOR SYMBIONT MANAGER MESSAGES
;
	$CREMBX_S CHAN=ID_W_MBCHAN(R11),MAXMSG=#8
	IF_ERROR JBC$_MBASGN		;CHECK FOR ERRORS
;
; ASSIGN CHANNEL TO CARD READER AND INITIALIZE INPUT
;
	$ASSIGN_S W^INPUT_NAME,ID_W_CRCHAN(R11)
	IF_ERROR JBC$_INPASGN,#0,R0	;ERRORS?
	PUSHAL	ID_T_CHAN_INFO(R11)	;CREATE CHANNEL INFO BUFFER
	PUSHL	#3*4			; DESCRIPTOR
	MOVL	SP,R1			;GET ADDRESS OF DESCRIPTOR
	$GETCHN_S ID_W_CRCHAN(R11),,(R1);GET CHANNEL INFO
	CLRL	R2			;INIT INPUT BUFFER INDEX
	BSBW	INP$STARTCARD		;START THE CARD READER
	IF_ERROR JBC$_INPREAD,#0,R0	;CHECK FOR ERRORS
	SETBIT	FLAG_V_INITOK,ID_L_FLAGS(R11) ;SET SYMBIONT INIT'ED OK
;
; GET THE JOB CARD
;
;	**ALSO THE UNWIND ENTRY-POINT FOR ALL ERRORS**
;
INP$GET_JOB::
	BBC	#FLAG_V_INITOK,ID_L_FLAGS(R11),10$ ;BR IF NOT INITED YET
	MOVQ	W^JOB_TIMEOUT,ID_Q_TIMEOUT(R11) ;SET TIMEOUT TIME
	BSBW	INP$GETCARD		;GET THE $JOB CARD
	BLBS	R0,START_JOB		;BR IF NO ERROR
10$:	MOVL	#1,R0			;SET SUCCESS
	RET				;...STOP THE SYMBIONT IMAGE

;
; START NEXT JOB: PARSE JOB AND PASSWORD CARDS
;
START_JOB:
	CLRBIT	FLAG_V_CREATED,ID_L_FLAGS(R11) ;OUTPUT NOT CREATED YET
	BBCC	#FLAG_V_NAME,ID_L_FLAGS(R11),10$ ;BR IF NO $JOB YET
	$CMKRNL_S W^INP$SET_UNAME,W^SYS_UNAME ;RESET USER NAME
	$CMKRNL_S W^INP$SET_ACCNT,W^SYS_ACCNT ;RESET ACCOUNT/UIC

10$:	BSBW	INP$PARSE_JOB		;PARSE THE JOB CARD
	BLBC	R0,INP$GET_JOB		;BR IF INVALID JOB CARD
	MOVQ	W^DEF_TIMEOUT,ID_Q_TIMEOUT(R11) ;SET TIMEOUT TIME
	BSBW	INP$GETCARD		;GET THE $PASSWORD CARD
	BLBC	R0,INP$GET_JOB		;BR IF ERROR OR EOF
	BSBW	INP$PARSE_PASS		;PARSE THE PASSWORD CARD
;
; VALIDATE THE USER'S ACCESS
;
	PUSHAL	UAFBUF_DESC		;USER DATA BUFFER DESCRIPTOR
	PUSHAL	ID_Q_PASSW_DESC(R11)	;PASSWORD DESCRIPTOR
	PUSHAL	ID_Q_UNAME_DESC(R11)	;USER NAME DESCRIPTOR
	CALLS	#3,W^LGI$VALIDATE		;LOOKUP USER NAME AND VALIDATE
	BLBS	R0,30$			;BR IF VALIDATED OK
	TSTL	R0			;WAS ERROR OPENING ACCESS FILE?
	BGEQ	20$			;BR IF YES
	SIGNAL	JBC$_USERVAL		;SIGNAL INVALID USER ACCESS
20$:	SIGNAL	JBC$_UAFOPN,#0,R0	;SIGNAL ERROR OPENING ACCESS FILE
	
;
; SET SYMBIONT PROCESS ACCOUNT AND UIC TO USER'S
;
30$:
	PUSHL	W^UAF$L_UIC+INP$T_UAFBUF ;UIC IS 2ND PARAMETER
	PUSHAL	ID_Q_ACCNT_DESC(R11)	;ADDR OF ACCNT DESC IS 1ST PARAM
	PUSHL	SP			;ADDRESS OF PARAMETERS
	PUSHAL	W^INP$SET_ACCNT		;ADDRESS OF SET ROUTINE
	CALLS	#4,SYS$CMKRNL		;CHANGE MODE TO KERNAL TO SET
;
; SET QUEUE PRIORITY IN MESSAGE
;

	MOVAL	W^INP$T_UAFBUF,R8	;GET ADDR OF USER RECORD
	MOVB	W^SM_T_OPTIONS+INP$G_SYMMSG+1,R1 ;WAS A PRIORITY SPECIFIED?
	BEQL	50$			;BR IF NO
	CMPB	R1,UAF$B_PRI(R8)	;IS PRIORITY VALID?
	BLEQ	60$			;BR IF YES
50$:	MOVB	UAF$B_PRI(R8),-		;SET PRIORITY TO BASE PRIORITY
		W^SM_T_OPTIONS+INP$G_SYMMSG+1
;
; SETUP DEFAULT DIRECTORY AND FILE TYPE
;
60$:
	MOVAL	ID_T_DEF_DIR(R11),FAB$L_DNA(R9) ;SET ADDR OF DEFAULT DIR
	ADDB3	UAF$T_DEFDIR(R8),UAF$T_DEFDEV(R8),- ;COMPUTE STRING SIZE
		FAB$B_DNS(R9)
	ADDB	#4,FAB$B_DNS(R9)
	MOVZBL	UAF$T_DEFDEV(R8),R7	;GET DIRECTORY STRING SIZE
	MOVC3	R7,UAF$T_DEFDEV+1(R8),- ;CONCATENATE DEVICE
		ID_T_DEF_DIR(R11)
	MOVZBL	UAF$T_DEFDIR(R8),R7
	MOVC3	R7,UAF$T_DEFDIR+1(R8),(R3) ; WITH DIRECTORY
	MOVL	#^A\.COM\,(R3)	      ; WITH FILE TYPE
;
; CREATE COMMAND FILE AND CONNECT RAB
;
	MOVB	ID_Q_JOBNM_DESC(R11),FAB$B_FNS(R9) ;SET LENGTH OF NAME
	MOVL	ID_Q_JOBNM_DESC+4(R11),FAB$L_FNA(R9) ;SET ADDRESS OF NAME
	MOVAB	W^EXPANDED,W^NAM$L_ESA+INP$G_NAM ;SET EXPANDED NAME BUFF ADDR
	$CREATE	(R9)			;CREATE THE FILE
	MOVZBL	W^NAM$B_ESL+INP$G_NAM,W^EXPANDED_DESC ;SET EXPANDED STRING SIZE
	IF_ERROR SHR$_OPENOUT!<4@16>,-	;CHECK FOR ERRORS
		#1,#EXPANDED_DESC,R0,FAB$L_STV(R9)
	$CONNECT (R10)			;CONNECT THE RAB
	IF_ERROR SHR$_OPENOUT!<4@16>,-	;CHECK FOR ERRORS
		#1,#EXPANDED_DESC,R0,RAB$L_STV(R10)
	SETBIT	FLAG_V_CREATED,ID_L_FLAGS(R11) ;INDICATE CREATED OK
;
; READ INPUT DECK FROM READER AND WRITE IT TO THE COMMAND FILE
;
READ_LOOP:
	BSBW	INP$GETCARD		;GET THE NEXT CARD
	BLBS	R0,10$			;BR IF NO ERROR
	TSTL	R0			;DID IT TIME-OUT?
	BEQL	CLOSE			;BR IF YES
	CMPW	#SS$_ENDOFFILE,R0	;END-OF-FILE CARD?
	BEQLU	CLOSE			;BR IF YES
	SIGNAL	JBC$_INPREAD,#0,R0	;SIGNAL AN ERROR
10$:	BSBW	INP$EOJ_JOB		;CHECK IF $EOJ OR $JOB CARD
	BLBS	R0,CLOSE		;BR IF YES
	MOVL	R7,RAB$L_RBF(R10)	;SET RECORD ADDRESS
	MOVW	R6,RAB$W_RSZ(R10)	;SET RECORD SIZE
	$PUT	(R10)			;PUT THE RECORD IN THE FILE
	IF_ERROR SHR$_WRITEERR!<4@16>,- ;CHECK FOR ERRORS
		#1,#EXPANDED_DESC,R0,RAB$L_STV(R10)
	BRB	READ_LOOP		;GET NEXT CARD
;
; CLOSE THE COMMAND FILE AND PASS IT TO THE SYMBIONT MANAGER
;
CLOSE:
	$DISCONNECT (R10)		;DISCONNECT RAB
	$CLOSE	(R9)			;CLOSE THE FILE
	MOVAL	W^INP$G_SYMMSG,R8	;SET ADDRESS OF MESSAGE BUFFER
	MOVW	#SMR$K_ENTER,SM_W_REQUEST(R8) ;SET REQUEST TYPE
	ASSUME	NAM$W_FID EQ NAM$T_DVI+16
	ASSUME	NAM$W_DID EQ NAM$W_FID+6
	MOVC3	#16+6+6,W^NAM$T_DVI+INP$G_NAM,- ;SET DEV, FILEID, DIR ID
		SM_T_DEVNAME(R8)
	MOVB	ID_Q_JOBNM_DESC(R11),SM_T_FILENAME(R8) ;JOB NAME LENGTH
	MOVC3	ID_Q_JOBNM_DESC(R11),@ID_Q_JOBNM_DESC+4(R11),- ;JOB NAME
		SM_T_FILENAME+1(R8)
	SUBL3	W^SYMMSG_DESC+4,ID_L_OPT_PTR(R11),- ;SET MESSAGE LENGTH
		W^SYMMSG_DESC
	$SNDSMB_S MSGBUF=SYMMSG_DESC,-	;SEND MESSAGE TO SYMBIONT MANGR
 		  CHAN=ID_W_MBCHAN(R11)
	BLBC	R0,10$			;BR IF ERROR
	MOVAQ	-(SP),R0		;CREATE A MAILBOX MESSAGE BUFFER
	$QIOW_S	CHAN=ID_W_MBCHAN(R11),-	;MAILBOX CHANNEL
		FUNC=#IO$_READVBLK,-	;READ FUNCTION
		P1=(R0),-		;BUFFER ADDRESS
		P2=#8			;8 BYTES
	MOVL	(SP)+,R1		;GET MESSAGE CODE / JOB NUMBER
	MOVL	(SP)+,R0		;GET STATUS
10$:	MOVAB	SM_T_QUEUE(R8),R1	;CHECK FOR ERRORS
	IF_ERROR JBC$_ENTQUE,#1,R1,R0

	BRW	START_JOB		;START NEXT JOB

	.PAGE
	.SBTTL	SET_ACCNT/UNAME - SET PROCESS ACCOUNT OR USERNAME
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	KERNAL ACCESS MODE ROUTINE TO SET THE INPUT SYMBIONT'S 
;	ACCOUNT/UIC OR USERNAME
;
; CALLING SEQUENCE:
;
;	CALLS/CALLG INP$SET_ACCNT
;	CALLS/CALLG INP$SET_UNAME
;
; INPUT PARAMETERS:
;
;	FOR SET_ACCNT:	(AP) = ADDRESS OF ACCOUNT DESCRIPTOR
;		       4(AP) = UIC
;	FOR SET_UNAME:	(AP) = USERNAME DESCRIPTOR
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	PROCESS ACCOUNT/UIC OR USERNAME WILL BE ALTERED
;
;--

	PURE_SECTION

INP$SET_ACCNT::
	.WORD	^M<R2,R3,R4,R5>
	MOVL	(AP)+,R0		;GET ADDR OF ACCOUNT DESCRIPTOR
	MOVC5	(R0),@4(R0),#^A\ \,-	;SET PROCESS ACCOUNT NAME
		#8,@#CTL$T_ACCOUNT
	MOVL	@#SCH$GL_CURPCB,R0	;GET ADDRESS OF PCB
	MOVL	(AP),PCB$L_UIC(R0)	;SET PROCESS UIC
	MOVL	#1,R0			;SET ROUTINE STATUS OK
	RET				;RETURN TO USER MODE

INP$SET_UNAME::
	.WORD	^M<R2,R3,R4,R5>
	MOVC5	(AP),@4(AP),#^A\ \,-	;SET PROCESS USERNAME
		#12,@#CTL$T_USERNAME
	MOVL	#1,R0			;SET ROUTINE STATUS OK
	RET				;RETURN TO USER MODE


	.END	INP_START
