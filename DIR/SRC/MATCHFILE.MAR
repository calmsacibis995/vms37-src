	.TITLE	MATCHFILE	File specification matching
	.IDENT	'V03-000'
;---
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; TIM HALVORSEN	7-SEP-1978
;
; MODIFIED BY:
;
;---

	.SBTTL	DEFINITIONS

	.PSECT	$CODE$,EXE,NOWRT

	.SBTTL	MATCH_FILE, Match file name
;----
;
; This routine is called with a resultant name string and a target name
; string to see if the file matches the target, where the target may 
; contain the "*" indicating an arbitary string.
;
; INPUTS:
;
;	4(AP) = Address of descriptor for input file name.
;	8(AP) = Address of desciptor for the target name.
;
; OUTPUTS:
;
;	R0 low bit set indicates names match
;
; NOTES:
;
;	The input string may be a fully qualified file specification,
;	however, only the file name part is checked.
;
;	The target name of "*" or "*.*" are all equivalent.
;	That is, "*" is truely an arbitrary string spaning ".".
;
;	If the target string does not contain a version represented in
;	the ";n" form, the version on the input is ignored.
;----
 
	.ENTRY	FMG$MATCH_FILE,^M<R2,R3,R4,R5>
 
	MOVQ	@4(AP),R2		; Get descriptor of input string
	MOVZWL	R2,R2			; Truncate length to a word
;
;	Remove the device and directory portions from the input
;	file name string.  Only the file name, type and version
;	is matched against the pattern.
;
	LOCC	#^A']',R2,(R3)		; Look for end of directory
	BNEQ	20$			; Branch if found
	LOCC	#^A'>',R2,(R3)		; Check for alternate syntax
	BNEQ	20$			; Branch if found
10$:	LOCC	#^A':',R2,(R3)		; If no directory, skip device
	BEQL	30$			; Branch if none found
	MOVAB	-(R0),R2		; Strip up to the colon
	MOVAB	1(R1),R3
	BRB	10$			; Remove up to last colon
20$:	MOVAB	-(R0),R2		; Set final length of name
	MOVAB	1(R1),R3
;
;	If the version is not explicitly given in the pattern, then
;	remove the version from both the input file string and the
;	pattern.
;
30$:	MOVQ	@8(AP),R4		; Get target name string
	MOVZWL	R4,R4			; Truncate length to a word
	LOCC	#^A/;/,R4,(R5)		; Target have a version field
	BNEQ	35$			; Branch if found
	LOCC	#^A/./,R4,(R5)		; Check for alternate syntax
	BEQL	40$			; Branch if not found
	DECL	R0
	LOCC	#^A/./,R0,1(R1)		; Alternate syntax = 2 dots
	BEQL	40$			; Branch if not found
35$:	CMPL	R0,#1			; and test for none/null field
	BLEQ	40$			; Branch if none or null
	CMPB	#^A/0/,1(R1)		; Check if explicit ";0"
	BNEQ	50$			; Branch if not
40$:	SUBL	R0,R4			; Remove version (if any)
	LOCC	#^A/;/,R2,(R3)		; Find version in input name
	BNEQ	45$			; Branch if found
	LOCC	#^A/./,R2,(R3)		; Check for alternate syntax
	BEQL	50$			; Branch if not found
	DECL	R0
	LOCC	#^A/./,R0,1(R1)		; Alternate syntax = 2 dots
	BEQL	50$			; Branch if not found
45$:	SUBL	R0,R2			; Remove version from input
;
;	Check if the input file name matches the pattern.
;
50$:	BSBB	140$			; Match the names
	RET				;
 
	.PAGE
;
; local subroutine to match strings
;	R2/R3 = File name being tested
;	R4/R5 = File name match string
;
 
100$:	MOVZBL	(R5)+,R0		; Get next character in match string
	CMPB	R0,#^A/*/		; Check for wild string
	BNEQ	120$			; Branch if not
	TSTL	R4			; Target string null after "*"?
	BEQL	150$			; "*" at end of target matches all.
110$:	PUSHR	#^M<R2,R3,R4,R5>	; Save descriptors for strings
	BSBB	140$			; Attempt match at current place
	POPR	#^M<R2,R3,R4,R5>	; Restore descriptors
	BLBS	R0,160$			; Branch if strings matched
	INCL	R3			; Advance 1 place in input string
	SOBGTR	R2,110$			; If anything left, try match there
	BRB	170$			; Else the match has failed
120$:	DECL	R2			; Input string exhaused?
	BLSS	170$			; Branch if yes - no match!
	CMPB	R0,(R3)+		; Check target against input
	BEQL	140$			; Branch if match
	CMPB	R0,#^A/%/		; Check if single wildcard match
	BEQL	140$			; Branch if match
	CMPB	-1(R3),#^A/;/		; If input = ';'
	BNEQ	170$
	CMPB	R0,#^A/./		; and pattern = '.'
	BNEQ	170$			; then match alternate syntax
140$:	SOBGEQ	R4,100$			; Target string exhaused?
	TSTL	R2			; Input string exhaused?
	BNEQ	170$			; If no - no match
150$:	MOVL	#1,R0			; Names match
160$:	RSB				;
170$:	CLRL	R0			; Names do not match
	RSB				;

 
	.END
