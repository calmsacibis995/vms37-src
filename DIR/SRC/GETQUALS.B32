MODULE getquals (
		IDENT='V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DIRECTORY Command
!
! ABSTRACT:
!
!	This utility displays file directory information.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Dec 1978
!
! Modified by:
!
!	V03-003	LMP43457	L. Mark Pilant,		20-Jan-1982  12:07
!		Give an error message if the number of versions is less
!		than one.
!
!	V03-002	SHZ0001		Stephen H. Zalewski,	19-Nov-1981  15:49
!		Added ADDRESSING_MODE(EXTERNAL=GENERAL) to module header
!
!	V001	TMH0001		Tim Halvorsen	15-Aug-1981
!		Add /DATE:BACKUP
!		Reference CLIMSG.B32 (CLI$_CONFQUAL) from SHRLIB$
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VMS common definitions

LIBRARY 'SYS$LIBRARY:CLIMAC.L32';	! CLI definitions

REQUIRE 'SRC$:DIRDEF.REQ';		! DIRECTORY definitions

REQUIRE 'SHRLIB$:CLIMSG.B32';		! Get CLI$_CONFQUAL message

!
! Table of contents
!

FORWARD ROUTINE
    get_quals		: NOVALUE,	! Get command qualifiers
    cli_error		: NOVALUE,	! Handler CLI errors
    date_parse		: NOVALUE,	! Parse /BEFORE, /SINCE values
    number_parse	: NOVALUE,	! Parse /VERSIONS,/COLUMNS value
    exclude_parse	: NOVALUE,	! Parse /EXCLUDE value
    show_date_parse	: NOVALUE,	! Parse /DATE value
    size_parse		: NOVALUE;	! Parse /SIZE value

!
! External routines
!

EXTERNAL ROUTINE
    lib$get_vm,				! Virtual memory allocation
    lib$cvt_time;			! Convert time to 64-bit format

!
! External references
!

EXTERNAL LITERAL
    max_columns;			! Maximum number of columns allowed

!
! Global definitions
!

GLOBAL
    dir$cli_util,			! Address of CLI service routine
    dir$flags		: BITVECTOR[32]	! Qualifier presence bitmap
	INITIAL(0),			! Initially none present
    dir$before_date	: BLOCK[2],	! Contains /BEFORE value
    dir$since_date	: BLOCK[2],	! Contains /SINCE value
    dir$columns,			! Contains /COLUMNS value
    dir$versions,			! Contains /VERSIONS value
    dir$show_date,			! Contains /DATE value
    dir$show_size,			! Contains /SIZE value
    dir$excl_list,			! Contains /EXCLUDE file list
    dir$cli_work:
	VECTOR [cli$c_workarea,BYTE];	! CLI work area

!
! Define lookup tables for /SIZE and /DATE qualifier values
!

OWN
    show_date_keys: $lib_key_table(
	(all,show_all),			! DATE:ALL
	(created,show_created),		! DATE:CREATED
	(expired,show_expired),		! DATE:EXPIRED
	(modified,show_modified),	! DATE:MODIFIED
	(backup,show_backup)),		! DATE:BACKUP

    show_size_keys: $lib_key_table(
	(all,show_all),			! SIZE:ALL
	(allocation,show_alloc),	! SIZE:ALLOCATION
	(used,show_used));		! SIZE:USED


!
! Define DIRECTORY command qualifiers
!

    $CLIQUALCODES (directory,
			before,
			brief,
			columns,
			creation,
			date,
			exclude,
			expiration,
			full,
			heading,
			modified,
			owner,
			printer,
			protection,
			since,
			size,
			total,
			trailing,
			versions);

!
! CLI control blocks and work areas
!

OWN

    before_desc:
	$CLIQUALDESC(QDCODE = before,
		     SETLST = qual_before,
		     TRUACT = date_parse),

    brief_desc:
	$CLIQUALDESC(QDCODE = brief,
		     SETLST = qual_brief),

    columns_desc:
	$CLIQUALDESC(QDCODE = columns,
		     SETLST = qual_columns,
		     TRUACT = number_parse),

    creation_desc:
	$CLIQUALDESC(QDCODE = creation,
		     SETLST = qual_creation),

    date_desc:
	$CLIQUALDESC(QDCODE = date,
		     SETLST = qual_date,
		     TRUACT = show_date_parse),

    exclude_desc:
	$CLIQUALDESC(QDCODE = exclude,
		     SETLST = qual_exclude,
		     TRUACT = exclude_parse),

    expiration_desc:
	$CLIQUALDESC(QDCODE = expiration,
		     SETLST = qual_expiration),

    full_desc:
	$CLIQUALDESC(QDCODE = full,
		     SETLST = qual_full),

    heading_desc:
	$CLIQUALDESC(QDCODE = heading,
		     SETLST = qual_heading),

    modified_desc:
	$CLIQUALDESC(QDCODE = modified,
		     SETLST = qual_modified),

    owner_desc:
	$CLIQUALDESC(QDCODE = owner,
		     SETLST = qual_owner),

    printer_desc:
	$CLIQUALDESC(QDCODE = printer,
		     SETLST = qual_printer),

    protection_desc:
	$CLIQUALDESC(QDCODE = protection,
		     SETLST = qual_protection),

    since_desc:
	$CLIQUALDESC(QDCODE = since,
		     SETLST = qual_since,
		     TRUACT = date_parse),

    size_desc:
	$CLIQUALDESC(QDCODE = size,
		     SETLST = qual_size,
		     TRUACT = size_parse),

    total_desc:
	$CLIQUALDESC(QDCODE = total,
		     SETLST = qual_total),

    trailing_desc:
	$CLIQUALDESC(QDCODE = trailing,
		     SETLST = qual_trailing),

    versions_desc:
	$CLIQUALDESC(QDCODE = versions,
		     SETLST = qual_versions,
		     TRUACT = number_parse),

    end_of_quals:
	$CLIQUALEND;

GLOBAL
    initial_desc:			! CLI initialization descriptor
	$CLIREQDESC(RQTYPE = initprs,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    qual_desc:				! Parse all command qualifiers
	$CLIREQDESC(RQTYPE = getqual,
		    RQFLGS = absadr,
		    ERRACT = cli_error,
		    QUALST = before_desc),

    output_desc:			! Get primary output file
	$CLIREQDESC(RQTYPE = output1,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    input_desc:				! Get input file specification
	$CLIREQDESC(RQTYPE = input1,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    cleanup_desc:			! CLI cleanup request
	$CLIREQDESC(RQTYPE = endprm1,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    string_desc:			! Get ASCII string value
	$CLIREQDESC(RQTYPE = asciival,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    number_desc:
	$CLIREQDESC(RQTYPE = numerval,	! Get numeric value
		    RQFLGS = absadr,
		    ERRACT = cli_error);

GLOBAL ROUTINE get_quals : NOVALUE =

!----
!
! Functional description
!
!	This routine calls CLI to obtain the command line and
!	then all command qualifiers.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	dir$flags	= Bitmap indicating which qualifiers are present
!	dir$versions	= Number of versions to display
!	dir$columns	= Number of columns used for files
!	dir$since_date	= Date after which files should be matched
!	dir$before_date	= Date before which files should be matched
!
!----

BEGIN

!
!	Initialize CLI for result parsing
!

(.dir$cli_util)(initial_desc,		! Request result parsing
	dir$cli_work,
	dir$flags);

!
!	Parse the command qualifiers
!

(.dir$cli_util)(qual_desc,		! Parse command qualifiers
	 dir$cli_work,			! with a work area, and
	 dir$flags);			! the address of a bitmap

(.dir$cli_util)(output_desc,		! Get output file name
		dir$cli_work,
		dir$flags);

!
!	Ensure that /CREATION, /MODIFIED, /EXPIRATION qualifiers
!	are mutually exclusive.
!

CASE .dir$flags[qual_creation]
   + .dir$flags[qual_modified]
   + .dir$flags[qual_expiration] FROM 0 TO 1 OF SET

    [0]: dir$flags[qual_creation] = 1;	! Default /CREATION
    [1]: ;
    [OUTRANGE]: write_message(cli$_confqual);
    TES;

END;

ROUTINE cli_error (cli_block,error): NOVALUE =

!----
!
! Functional description
!
!	This routine is called as an error handler for
!	CLI errors.
!
! Input parameters
!
!	cli_block = Address of CLI request block
!	error = CLI error message
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP cli_block: REF BBLOCK;		! Define CLI request block

write_message(msg$_syntax,1,cli_block[cli$q_rqdesc],.error);
RETURN;

END;

ROUTINE date_parse(qual_desc_block): NOVALUE =

!----
!
! Functional description
!
!	This routine parses the value on the /SINCE and /BEFORE
!	qualifiers.  It converts the ASCII value of the qualifier
!	into 64-bit system date format.  The value can be a date
!	string (such as dd-mmm-yyyy hh:mm:ss.s) or the keywords
!	YESTERDAY or TODAY.
!
! Input parameters
!
!	qual_desc_block = Address of the qualifier descriptor block.
!
! Output parameters
!
!	dir$since_date = Date if /SINCE specified.
!	dir$before_date = Date if /BEFORE specified.
!
!----

BEGIN

MAP qual_desc_block: REF BBLOCK;	! Define block format

LOCAL
    status;				! Status return value

(.dir$cli_util)(string_desc,		! Get value of descriptor
	 dir$cli_work,
	 .qual_desc_block);		! using same request block

!
!	Convert the ASCII string into 64-bit system time format.
!

status = lib$cvt_time(string_desc[cli$q_rqdesc],
	IF .qual_desc_block[cli$b_qdcode] EQL cli$k_dire_sinc
	THEN
	    dir$since_date		! Store here if /SINCE
	ELSE
	    dir$before_date);		! Else here if /BEFORE

IF NOT .status				! If error in conversion,
THEN
    SIGNAL_STOP(.status);		! then output error message

END;

ROUTINE number_parse (qual_desc_block): NOVALUE =

!----
!
! Functional description
!
!	This routine is called from CLI to parse the value
!	on the /COLUMNS and /VERSIONS qualifiers.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	dir$columns = Value if /COLUMNS specified.
!	dir$versions = Value if /VERSIONS specified.
!
!----

BEGIN

MAP qual_desc_block: REF BBLOCK;	! Define block format

LOCAL
    desc:	VECTOR [2];		! Descriptor of value

desc [0] = .qual_desc_block [cli$w_qdvalsiz];
desc [1] = .qual_desc_block [cli$a_qdvaladr];

(.dir$cli_util)(number_desc,		! Get value from CLI
	 dir$cli_work,
	 .qual_desc_block);		! using original request block

IF .qual_desc_block[cli$b_qdcode] EQL cli$k_dire_colu
THEN
    BEGIN
    IF .number_desc [cli$l_rqvalu] GTR max_columns ! If /COLUMNS too big,
    THEN
	BEGIN
	write_message(msg$_syntax,1,	! Signal syntax error
	    desc);			! with invalid qualifier
	RETURN;
	END;
	
    dir$columns = .number_desc [cli$l_rqvalu];	! If /COLUMNS, store here
    END
ELSE
    IF .number_desc [cli$l_rqvalu] lss 1	! If /VERSIONS less than 1
    THEN
	BEGIN
	write_message(msg$_syntax,1,	! Signal syntax error
	    desc);			! with invalis qualifier
	RETURN;
	END
    ELSE
    	dir$versions = .number_desc[cli$l_rqvalu];	! If /VERSIONS, store here

END;

ROUTINE exclude_parse(qual_desc_block): NOVALUE =

!----
!
! Functional description
!
!	This routine parses the value on the /EXCLUDE qualifier.
!	The value can be a list of strings separated by commas
!	and optionally enclosed with parenthesis if more than
!	one string is specified.  Each string will be stored in
!	dynamic virtual memory chained together.
!
! Input parameters
!
!	qual_desc_block = Qualifier descriptor block
!
! Output parameters
!
!	dir$excl_list = Address of header of linked chain
!
!----

BEGIN

MAP
    qual_desc_block: REF BBLOCK;	! Define parameter format

LOCAL
    status,				! Holds status returns
    buffer_size,			! Buffer size for LIB$GET_VM
    buffer_ptr;				! Address of buffer


string_desc [cli$v_morevals] = true;	! Setup for first time in loop

WHILE .string_desc [cli$v_morevals]
DO
    BEGIN

    (.dir$cli_util)(string_desc,	! Get ASCII value from CLI
	 dir$cli_work,
	 .qual_desc_block);		! using original request block

    IF CH$FIND_CH(.string_desc [cli$w_rqsize],
		.string_desc [cli$a_rqaddr], ':') NEQ 0
	OR CH$FIND_CH(.string_desc [cli$w_rqsize],
		.string_desc [cli$a_rqaddr], ']') NEQ 0
    THEN
	BEGIN
	write_message(msg$_syntax,1,	! Signal syntax error
	    string_desc[cli$q_rqdesc]);	! with invalid keyword
	RETURN;
	END;
    buffer_size = exc$c_length;			! Length of exclude buffer
    status = LIB$GET_VM(buffer_size,buffer_ptr);! Get virtual memory
    IF NOT .status				! If unsuccessful,
    THEN
	BEGIN
	write_message(.status);			! Explain why
	dir$flags [qual_exclude] = false;	! and ignore qualifier
	RETURN;
	END;

    BEGIN
    BIND
	excbuf = .buffer_ptr: BBLOCK;		! Address the block

    excbuf [exc$l_link] = .dir$excl_list;	! Put at head of chain
    dir$excl_list = excbuf;			! Make head point here
    excbuf [exc$w_fns] = .string_desc [cli$w_rqsize];
    excbuf [exc$l_fna] = excbuf [exc$a_filename];
    CH$MOVE(.string_desc [cli$w_rqsize],	! Copy filespec
	.string_desc [cli$a_rqaddr],
	excbuf [exc$a_filename]);
    END;
    END;

END;

ROUTINE show_date_parse(qual_desc_block): NOVALUE =

!----
!
! Functional description
!
!	This routine is called to parse the /DATE qualifier.
!	The following values may be used:	ALL
!						CREATED
!						EXPIRED
!						MODIFIED
!
!	If no value is given, default is CREATED.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	dir$show_date = Number indicating one of the above keywords.
!
!----

BEGIN

EXTERNAL ROUTINE
    lib$lookup_key;			! Keyword lookup routine

LOCAL
    status;				! Holds status returns

MAP
    qual_desc_block: REF BBLOCK;	! Define parameter format


!
!	If no value was specified on /DATE, assume /DATE:CREATED
!

IF .qual_desc_block[cli$w_qdvalsiz] EQL 0
THEN
    BEGIN
    dir$show_date = show_created;	! Indicate /DATE:CREATED
    RETURN;
    END;

(.dir$cli_util)(string_desc,		! Get ASCII value from CLI
	 dir$cli_work,
	 .qual_desc_block);		! using original request block

status = lib$lookup_key(		! Lookup the keyword
		string_desc[cli$q_rqdesc],
		show_date_keys,		! Table of valid keywords
		dir$show_date);		! and store index here
IF NOT .status				! If no match was found,
THEN
    write_message(msg$_syntax,1,	! Signal syntax error
	string_desc[cli$q_rqdesc],	! with invalid keyword
	.status,1,			! also signal lookup error
	string_desc[cli$q_rqdesc]);	! with invalid keyword

END;

ROUTINE size_parse(qual_desc_block): NOVALUE =

!----
!
! Functional description
!
!	This routine is called to parse the /SIZE qualifier.
!	The following values may be used:	ALL
!						ALLOCATION
!						USED
!
!	If no value is given, default is USED.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	dir$show_size = Number indicating one of the above keywords.
!
!----

BEGIN

EXTERNAL ROUTINE
    lib$lookup_key;			! Keyword lookup routine

LOCAL
    status;				! Holds status returns

MAP
    qual_desc_block: REF BBLOCK;	! Define parameter format


!
!	If no value was specified on /SIZE, assume /SIZE:USED
!

IF .qual_desc_block[cli$w_qdvalsiz] EQL 0
THEN
    BEGIN
    dir$show_size = show_used;		! Indicate /SIZE:USED
    RETURN;
    END;

(.dir$cli_util)(string_desc,		! Get ASCII value from CLI
	 dir$cli_work,
	 .qual_desc_block);		! using original request block

status = lib$lookup_key(		! Lookup the keyword
		string_desc[cli$q_rqdesc],
		show_size_keys,		! Table of valid keywords
		dir$show_size);		! and store index here

IF NOT .status				! If no match was found,
THEN
    write_message(msg$_syntax,1,	! Signal syntax error
	string_desc[cli$q_rqdesc],	! with invalid keyword
	.status,1,			! also signal lookup error
	string_desc[cli$q_rqdesc]);	! with invalid keyword

END;

END
ELUDOM
