MODULE display (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DIRECTORY Command
!
! ABSTRACT:
!
!	This utility displays file directory information.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Dec 1978
!
! Modified by:
!
!	V03-001	KFH0001		Ken Henderson		17-Mar-1982
!		Modified SHOW_FULL to output Global Buffer Count and to
!		correct the seperate showing of Contiguous and CBT.
!
!	V02-015	KFH0003		Ken Henderson		 8-Jan-1982
!		Modified SHOW_FULL to output Prologue Version Number along
!		with number of Keys (for indexed files). Fixed test of
!		number of keys to be NEQ instead of GTR. Fixed display of
!		bucket size to say max bucket size for indexed files.
!		Added display of number of areas for indexed files (SHOW_FULL).
!
!	V02-014	KRM0033		Karl Malik		29-Dec-1981
!		Modified LIST_FILE to fix bug in display of magtape
!		files.
!
!	V02-013	LMP0005		L. Mark Pilant,		 1-Dec-1981  15:40
!		/DATE=ALL now gives all the dates.
!
!	V012	KRM0030		Karl Malik		01-Dec-1981
!		Modified LIST_FILE & SHOW_FULL to display the filename
!		on a separate line (rather than truncate) when it is
!		greater than 19 characters.
!
!	V011	KRM0029		Karl Malik		01-Nov-1981
!		Modified LIST_FILE to allow brackets in access strings
!		(i.e., STAR"[1,2] psw"::). Also misc. changes to LIST_FILE
!		and SHOW_FULL to improve display when information is
!		unavailable.
!
!	V010	ROW0034		Ralph O. Weber		23-OCT-1981
!		Alter display of number of keys in /FULL to display a value 
!		only if it is non-zero.  Zero indicates that the information 
!		was unavailable.
!
!	V009	TMH0009		Tim Halvorsen		15-Aug-1981
!		Display backup date/time in both /FULL and /DATE:BACKUP.
!		Show <None specified> or <No backup done> if the quadword
!		date/time is zero for revision, expiration and backup dates
!		in both the /FULL display and /DATE:xxx displays.
!		In addition, make an incompatible change which shows
!		creation/revision/backup dates on /DATE:ALL, rather than
!		creation/revision/expiration dates (since the expiration
!		date is pretty useless).
!
!	V02-008	RAS0022		Ron Schaefer		14-Aug-1981
!		Add stream record format code text.
!
!	V02-007	SHZ0002		Stephen H. Zalewski,	28-Jul-1981  18:34
!		Prevented the padding used to line up columns when /NOHEADING 
!		qualifier is invoked by itself.
!
!	V02-006	SHZ0001		Stephen H. Zalewski,	8-Jul-1981  13:56
!		Lined up output columns when /NOHEADING switch
!		is invoked.
!
!	005	TMH0005		Tim Halvorsen	10-Mar-1980
!		Add GLOBAL LITERAL max_columns for range check
!		of /COLUMNS in getquals.  Allow variable number
!		of digits on DIR/FULL as well as DIR/SIZE (V003)
!
!	004	TMH0004		T. Halvorsen	22-Feb-1980
!		Allow for result name string without a directory
!		specification (such as magtape).
!
!	003	TMH0003		T. Halvorsen	04-Jan-1980
!		Allow variable number of digits if the number of
!		digits exceeds the fixed size of the output field
!		(especically for the # blocks to allow for RM05's)
!
!	002	TMH0002		T. Halvorsen	16-Jan-1980
!		Do not issue No files found message if error
!		detected.  Set worst_error to FNF if no files
!		found for CLI command procedures.
!
!	001	TMH0001		T. Halvorsen	14-Jan-1980
!		Display full filespecs even if non-wild dir and /NOHEAD
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions

REQUIRE 'SRC$:DIRDEF.REQ';		! Command definitions

!
! Table of contents
!

FORWARD ROUTINE
    list_file:		NOVALUE,	! Display file information
    show_full:		NOVALUE,	! Display full file info.
    write_trailing:	NOVALUE,	! Write trailing information
    parse_prot:		NOVALUE,	! Parse protection into strings
    put_output:		NOVALUE;	! Write to the output file

!
! External routines
!

EXTERNAL ROUTINE
    output_error:	NOVALUE;	! RMS output error handler

!
! Storage definitions
!

LITERAL
    max_output = 256;			! Maximum size of output record
GLOBAL LITERAL
    max_columns = max_output/20;	! Maximum number of columns

MACRO
    write(string) =
	put_output(descriptor(string)
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)%,

    append(string) =
	append_strings(outdesc,descriptor(string)
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)%;

OWN
    output_buffer: VECTOR[max_output,BYTE],	! Output buffer
    outdesc:	VECTOR[2]		! Descriptor of output buffer
		INITIAL(0,output_buffer),
    column,				! Current column in line
    versions,				! Versions seen so far
    name_desc:	VECTOR[2],		! Descriptor of name to display
    short_name,				! True if file name part only

    total_dirs:		INITIAL(0),	! Total directories displayed
    total_files:	INITIAL(0),	! Total files in directory
    total_blocks:	INITIAL(0),	! Total blocks in directory
    total_alloc:	INITIAL(0),	! Total blocks allocated
    grand_files:	INITIAL(0),	! Grand total files
    grand_blocks:	INITIAL(0),	! Grand total blocks
    grand_alloc:	INITIAL(0);	! Grand total blocks allocated

EXTERNAL
    output_rab:		BBLOCK,		! Output file RAB
    worst_error,			! Worst error encountered
    dir$flags:		BITVECTOR,	! CLI qualifier bitmap
    dir$columns,			! Value on /COLUMNS
    dir$versions,			! Value on /VERSIONS
    dir$show_size,			! Value on /SIZE
    dir$show_date;			! Value on /DATE

ROUTINE put_output(ctrstr,args): NOVALUE =

!----
!
! Functional description
!
!	This routine accepts an FAO control string and any
!	number of arguments and outputs the resulting string
!	to the output file as a single record.
!
! Input parameters
!
!	ctrstr = Descriptor of FAO control string
!	args = Address of FAO additional argument list
!
!----

BEGIN

LOCAL
    desc:	VECTOR[2],			! Result descriptor
    buffer:	VECTOR[max_output,BYTE];	! Output buffer

desc[0] = max_output;			! Set up result descriptor
desc[1] = buffer;

$FAOL(ctrstr=.ctrstr,outlen=desc,outbuf=desc,prmlst=args);

IF .desc[0] EQL 0 AND .output_rab[rab$w_rsz] EQL 0
THEN
    RETURN;				! Do not issue 2 blank lines

output_rab[rab$w_rsz] = .desc[0];	! Setup to output record
output_rab[rab$l_rbf] = .desc[1];

$RMS_PUT(RAB = output_rab, ERR = output_error);

END;

ROUTINE append_strings (result, string, args): NOVALUE =

!----
!
! Functional description
!
!	This routine appends an FAO result string to another
!	string.  The second argument is used as an FAO control
!	string with the following arguments used as parameters.
!	The result of the FAO operation is appended to the end
!	of the string described by the first operand and the
!	descriptor is updated.
!
! Input parameters
!
!	result = Address of descriptor of string to be appended
!	string = FAO control string
!	args = 0 to n FAO arguments
!
! Output parameters
!
!	result = Updated descriptor of appended string
!
!----

BEGIN

BIND
    newdesc = .result: VECTOR;		! Address the descriptor

LOCAL
    desc:	VECTOR[2];		! FAO result string descriptor

desc[0] = max_output - .newdesc[0];	! Setup descriptor for FAO
desc[1] = .newdesc[1] + .newdesc[0];

$FAOL(ctrstr=.string,outlen=desc,outbuf=desc,prmlst=args);

newdesc[0] = .newdesc[0] + .desc[0];	! Update string length

END;

GLOBAL ROUTINE list_file (file_data): NOVALUE =

!----
!
! Functional description
!
!	This routine displays user-specified information
!	about the currently open file.
!
! Input parameters
!
!	file_data = Address of block holding file information
!	dir$flags = bitmap of qualifiers requested
!	dir$columns = Number of columns to generate
!	dir$show_date = Types of dates to display
!	dir$show_size = Types of sizes to display
!
! Output parameters
!
!	None
!
!---

BEGIN

MAP
    file_data:		REF BBLOCK;	! Address file info

LOCAL
    prot_table:		VECTOR[4],	! Pointers to protection strings
    ptr,				! Search pointer result
    file_len,				! Length of file w/o version
    dir_len;				! Length of device/directory

OWN
    prev_dir_len:	INITIAL(0),	! Length of previous directory
    prev_dir:	VECTOR[128,BYTE],	! Buffer for previous directory
    prev_file_len:	INITIAL(0),	! Length of previous file name
    prev_file:	VECTOR[128,BYTE];	! Buffer for previous file name


name_desc[0] = .file_data [dsp$b_fns];
name_desc[1] = file_data [dsp$a_filename];

!
! Determine the directory heading length from the various $NAM block
! lengths (obtained during the $SEARCH).
!

dir_len = .file_data[dsp$b_node] +
	  .file_data[dsp$b_dev] +
	  .file_data[dsp$b_dir];

IF .dir_len EQL 0 THEN RETURN;

!
! If /HEADING specified and we have reached a new directory,
! display the directory heading information.
!

IF CH$NEQ(				! If new directory
	.prev_dir_len,prev_dir,
	.dir_len,.name_desc[1],0)
THEN
    BEGIN
    IF .total_files GTR 0
    THEN
        write_trailing();
    CH$MOVE(.dir_len,.name_desc[1],prev_dir);
    prev_dir_len = .dir_len;
    IF .dir$flags [qual_heading]	! If headings requested,
    THEN
	BEGIN
	write('');
	write('Directory !AD',		! Show the directory name
		.dir_len,.name_desc[1]);
	write('');
	END;
    total_dirs = .total_dirs + 1;
    total_files = 0;
    total_blocks = 0;
    total_alloc = 0;
    outdesc[0] = 0;			! Initialize output buffer
    column = 0;
    prev_file_len = 0;			! Do not carry over directories
    END;

!
! If there are multiple versions of the file, then only print
! as many as requested in /VERSIONS qualifier.
!

IF .dir$flags [qual_versions]		! If /VERSIONS specified,
THEN
    BEGIN
    ptr = CH$FIND_CH(.name_desc[0],.name_desc[1],';');
    IF CH$FAIL(ptr)
    THEN
        BEGIN				! Check for alternate syntax
	ptr = CH$FIND_CH(.name_desc[0],.name_desc[1],'.');
	ptr = CH$FIND_CH(.name_desc[0]-CH$DIFF(.ptr,.name_desc[1])-1,
		CH$PLUS(.ptr,1),'.');
	END;
    file_len = CH$DIFF(.ptr,.name_desc[1]);

    IF CH$NEQ(				! If not same file as last time,
	.prev_file_len, prev_file,
	.file_len, .name_desc[1], 0)
    THEN
	BEGIN				! Reset for new file
	CH$MOVE(.name_desc[0],.name_desc[1],prev_file);
	prev_file_len = .file_len;
	versions = 0;			! Indicate no versions seen
	END;

    IF .versions GEQ .dir$versions	! If hit specified limit,
    THEN
        RETURN;				! then skip this version
    versions = .versions + 1;		! Increment versions seen
    END;

!
! Do not strip the device and directory information from the
! file name if the user has requested /NOHEADING.
!

IF .dir$flags [qual_heading]		! If /HEADING requested
THEN
    BEGIN				! Strip the device/directory
    name_desc[0] = .name_desc[0] - .dir_len;
    name_desc[1] = .name_desc[1] + .dir_len;
    short_name = TRUE;			! Indicate only file name
    END
ELSE
    short_name = FALSE;			! Indicate full file spec.

!
! Record statistics about the file for the totals.
!

total_files = .total_files + 1;
total_blocks = .total_blocks + .file_data [dsp$l_blocks];
total_alloc = .total_alloc + .file_data [dsp$l_alloc];

!
! If /TOTAL was requested, do not display the file information
! but just return with statistics taken.
!

IF .dir$flags [qual_total]	! If /TOTAL requested,
THEN
    RETURN;			! Skip displaying the file information

!
! Display the file information.  The information is appended to
! the output buffer for each display option requested.
!

IF .dir$flags [qual_full]	! If /FULL requested,
THEN
    BEGIN
    show_full(.file_data);	! Display full file information
    RETURN;			! and skip the following code
    END;

!
! If the display can be done in columns, do it now.
!

IF .short_name AND NOT (.dir$flags [qual_size] OR .dir$flags [qual_date]
    OR .dir$flags [qual_owner] OR .dir$flags [qual_protection])
THEN
    BEGIN
    column = .column + 1;
    IF .column GEQ .dir$columns
    THEN
	BEGIN
	IF outdesc[0] NEQ 0
	THEN
	    write('!AS!AS',outdesc,name_desc)
	ELSE
	    BEGIN
	    output_rab [rab$w_rsz] = name_desc [0];
	    output_rab [rab$l_rbf] = name_desc [1];
	    $PUT (RAB = output_rab, ERR = output_error);
	    END;
	outdesc[0] = 0;			! Setup for next line
	column = 0;
	END
    ELSE
	append('!19<!AS!> ',name_desc);
    RETURN;
    END;


outdesc[0] = 0;			! Initialize result record descriptor

IF .short_name
THEN
    IF .name_desc[0] GTR 19	! If filename is too big to fit in 19 char
    THEN			! field then put it on a separate line.
      append('!AS!/!19* ',name_desc)
    ELSE
      append('!19<!AS!>',name_desc)
ELSE
    IF (.name_desc[0] LEQ 40)				! Line up /NOHEAD columns if possible
    AND ((.dir$flags AND (1^qual_full OR 1^qual_before OR 1^qual_since
      OR 1^qual_date OR 1^qual_size OR 1^qual_owner
      OR 1^qual_protection)) NEQ 0)
    THEN
        append('!40<!AS!>',name_desc)
    ELSE
        append('!AS',name_desc);

IF .file_data [dsp$v_locked]		! If file locked,
THEN
    BEGIN
    write('!AS   *** LOCKED ***',outdesc);
    RETURN;
    END;

IF NOT .file_data [dsp$l_status]	! If some error reading header,
THEN
    BEGIN
    LOCAL
        desc: VECTOR [2],		! Descriptor of message string
        buffer: VECTOR [128,BYTE];	! Buffer to hold message text
    desc [0] = 128;			! Set length of buffer
    desc [1] = buffer;			! Set address of buffer
    $GETMSG( MSGID = .file_data [dsp$l_status],
	     FLAGS = %B'0001',		! Get only message text
	     BUFADR = desc, MSGLEN = desc);
    write('!AS   !AS',outdesc,desc);	! Write error message
    RETURN;
    END;

IF .dir$flags [qual_size]
THEN
    BEGIN
    LOCAL digits;
    IF .file_data [dsp$l_blocks] GTR 99999	! If larger than 5 digits
	OR .file_data [dsp$l_alloc] GTR 99999
    THEN
	digits = 10			! then make output totally variable
    ELSE
	digits = 5;			! else use fixed field size
    CASE .dir$show_size FROM show_all TO show_alloc OF SET
        [show_all]:	append(' !#UL/!#<!UL!>',
				.digits,
				.file_data [dsp$l_blocks],
				.digits,
				.file_data [dsp$l_alloc]);
	[show_used]:	append(' !#UL      ',.digits,.file_data [dsp$l_blocks]);
	[show_alloc]:	append(' !#UL      ',.digits,.file_data [dsp$l_alloc]);
	TES;
    END;

IF .dir$flags [qual_date]
THEN
    CASE .dir$show_date FROM show_all TO show_backup
    OF
	SET
	[show_all]:
		IF NOT .dir$flags [qual_size]
		    AND NOT .dir$flags [qual_owner]
		    AND NOT .dir$flags [qual_protection]
		THEN
		    BEGIN
		    IF .file_data [dsp$l_cdt0] NEQ 0
		    THEN
		        append(' !17%D', file_data [dsp$q_credate])
		    ELSE
			append('   <None specified> ');
		    IF .file_data [dsp$l_rdt0] NEQ 0
		    THEN
			append('   !17%D', file_data [dsp$q_revdate])
		    ELSE
			append('   <None specified> ');
		    IF .file_data [dsp$l_edt0] NEQ 0
		    THEN
			append('   !17%D', file_data [dsp$q_expdate])
		    ELSE
			append('   <None specified> ');
		    IF .file_data [dsp$l_bdt0] NEQ 0
		    THEN
			append('   !17%D', file_data [dsp$q_bakdate])
		    ELSE
			append('   <No backup done>');
		    END;

	[show_created]:
		    IF .file_data [dsp$l_cdt0] NEQ 0
		    THEN
		        append(' !17%D', file_data [dsp$q_credate])
		    ELSE
			append('   <None specified> ');
	[show_modified]:
		    IF .file_data [dsp$l_rdt0] NEQ 0
		    THEN
			append(' !17%D', file_data [dsp$q_revdate])
		    ELSE
			append(' <None specified> ');
	[show_expired]:
		    IF .file_data [dsp$l_edt0] NEQ 0
		    THEN
			append(' !17%D', file_data [dsp$q_expdate])
		    ELSE
			append(' <None specified> ');
	[show_backup]:
		    IF .file_data [dsp$l_bdt0] NEQ 0
		    THEN
			append(' !17%D', file_data [dsp$q_bakdate])
		    ELSE
			append(' <No backup done> ');
	TES;

IF .dir$flags [qual_owner]
THEN
    append(' [!3OW,!3OW]',
	.file_data [dsp$w_grp],
	.file_data [dsp$w_mem]);


IF .dir$flags [qual_protection]
THEN
    BEGIN
    parse_prot(prot_table,.file_data [dsp$w_prot]);
    append(' (!AS,!AS,!AS,!AS)',
	.prot_table[0],
	.prot_table[1],
	.prot_table[2],
	.prot_table[3]);
    END;

output_rab [rab$w_rsz] = .outdesc[0];
output_rab [rab$l_rbf] = .outdesc[1];
$RMS_PUT(RAB = output_rab, ERR = output_error);

IF .dir$flags [qual_date] AND .dir$show_date EQL show_all
    AND (.dir$flags [qual_size] OR .dir$flags [qual_protection]
	OR .dir$flags [qual_owner])
THEN
    write('!19* !17%D   !17%D   !17%D   !17%D',
	file_data [dsp$q_credate],
	file_data [dsp$q_revdate],
	file_data [dsp$q_expdate],
	file_data [dsp$q_bakdate]);
END;

ROUTINE show_full (file_data): NOVALUE =

!----
!
! Functional description
!
!	This routine shows the /FULL file information display.
!
! Input parameters
!
!	file_data = Address of block holding file information
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP
    file_data:		REF BBLOCK;	! Address file data

LOCAL
    digits,				! Number of digits needed for file size
    prot_table:		VECTOR[4];	! Protection string table


IF NOT .file_data [dsp$l_status]	! If error getting information,
THEN
    BEGIN
    LOCAL
        desc: VECTOR [2],		! Descriptor of message string
        buffer: VECTOR [128,BYTE];	! Buffer to hold message text
    desc [0] = 128;			! Set length of buffer
    desc [1] = buffer;			! Set address of buffer
    $GETMSG( MSGID = .file_data [dsp$l_status],
	     FLAGS = %B'0001',		! Get only message text
	     BUFADR = desc, MSGLEN = desc);
    IF .short_name			! If short file name,
    THEN
        write('!21AS !AS',name_desc,desc)
    ELSE
        write('!AS      !AS',name_desc,desc);
    write('');
    RETURN;
    END;

IF .file_data [dsp$l_blocks] GTR 99999	! If larger than 5 digits
	OR .file_data [dsp$l_alloc] GTR 99999
THEN
    digits = 10				! then make output totally variable
ELSE
    digits = 5;				! else use fixed field size

IF (NOT .short_name) OR (.name_desc [0] GEQ 22)! If either /NOHEAD or
THEN                                           ! if long filename
  IF .file_data [dsp$l_cdt0] NEQ 0
  THEN
    BEGIN
    write('!AS',name_desc);		! Display name on first line
    write('!22* Size:   !#UL/!#<!UL!>     Created: !17%D',
	.digits,
	.file_data [dsp$l_blocks],
	.digits,
	.file_data [dsp$l_alloc],
	file_data [dsp$q_credate]);
    END
  ELSE
    BEGIN
    write('!AS',name_desc);		! Display name on first line
    write('!22* Size:   !#UL/!#<!UL!>     Created: <None specified>',
	.digits,
	.file_data [dsp$l_blocks],
	.digits,
	.file_data [dsp$l_alloc]);
    END

ELSE
  IF .file_data [dsp$l_cdt0] NEQ 0
  THEN
    write('!21AS Size:   !#UL/!#<!UL!>     Created: !17%D',
	name_desc,
	.digits,
	.file_data [dsp$l_blocks],
	.digits,
	.file_data [dsp$l_alloc],
	file_data [dsp$q_credate])
  ELSE
    write('!21AS Size:   !#UL/!#<!UL!>     Created: <None specified>',
	name_desc,
	.digits,
	.file_data [dsp$l_blocks],
	.digits,
	.file_data [dsp$l_alloc]);

IF .file_data [dsp$l_rdt0] EQL 0
THEN
    write('!22* Owner:    [!3OW,!3OW]     Revised: <None specified>',
	.file_data [dsp$w_grp],
	.file_data [dsp$w_mem])
ELSE
    write('!22* Owner:    [!3OW,!3OW]     Revised: !17%D (!UL)',
	.file_data [dsp$w_grp],
	.file_data [dsp$w_mem],
	file_data [dsp$q_revdate],
	.file_data [dsp$w_rvn]);

IF .file_data [dsp$l_edt0] EQL 0
THEN
    IF ((.file_data [dsp$w_fid_num] EQL 0) AND
        (.file_data [dsp$w_fid_seq] EQL 0) AND
        (.file_data [dsp$w_fid_rvn] EQL 0))
    THEN
    write('!22* File ID:  <Unknown>     Expires: <None specified>')
    ELSE
    write('!22* File ID: !14<(!UL,!UL,!UL)!> Expires: <None specified>',
	.file_data [dsp$w_fid_num],
	.file_data [dsp$w_fid_seq],
	.file_data [dsp$w_fid_rvn])
ELSE
    IF ((.file_data [dsp$w_fid_num] EQL 0) AND
        (.file_data [dsp$w_fid_seq] EQL 0) AND
        (.file_data [dsp$w_fid_rvn] EQL 0))
    THEN
    write('!22* File ID:  <Unknown>     Expires: !17%D',
	file_data [dsp$q_expdate])
    ELSE
    write('!22* File ID: !14<(!UL,!UL,!UL)!> Expires: !17%D',
	.file_data [dsp$w_fid_num],
	.file_data [dsp$w_fid_seq],
	.file_data [dsp$w_fid_rvn],
	file_data [dsp$q_expdate]);

IF .file_data [dsp$l_bdt0] NEQ 0
THEN
    write('!46* Backup:  !17%D', file_data [dsp$q_bakdate])
ELSE
    write('!46* Backup:  <No backup done>');

parse_prot(prot_table,.file_data [dsp$w_prot]);
write('  File protection:    System:!AS, Owner:!AS, Group:!AS, World:!AS',
	.prot_table[0],
	.prot_table[1],
	.prot_table[2],
	.prot_table[3]);

outdesc[0] = 0;				! Setup for appending strings
append('  File organization:  ');
SELECTONEU .file_data [dsp$b_org] OF SET
    [fab$c_seq]: append('Sequential');
    [fab$c_rel]: append('Relative, maximum record number = !UL',
			.file_data [dsp$l_mrn]);
    [fab$c_idx]: BEGIN
		 append('Indexed');
		 IF .file_data [dsp$b_nokeys] NEQ 0
		 THEN
		    BEGIN
		    append(
			    ', Prologue = !UL, using !UL key!%S',
			    .file_data [dsp$w_pvn],
			    .file_data [dsp$b_nokeys]);
		    IF .file_data [dsp$b_noareas] GTRU 1
		    THEN
			append(', in !UL areas',.file_data [dsp$b_noareas]);
		    END;
		 END;
    [OTHERWISE]: append('Unknown type = !UL',
			.file_data [dsp$b_org]);
    TES;
write('!AS',outdesc);			! Output actual line

outdesc[0] = 0;				! Setup for appending strings
append('  File attributes:    Allocation = !UL, Extend = !UL',
	.file_data [dsp$l_alloc],
	.file_data [dsp$w_extend]);
IF .file_data [dsp$b_bkt] NEQ 0		! If non-zero bucket size,
THEN
    BEGIN
    IF .file_data [dsp$b_org] EQL fab$c_idx ! b_bkt is a max for idx files
    THEN
	append(', maximum')
    ELSE
	append(',');

    append(' bucket size = !UL', .file_data [dsp$b_bkt]);
    END;

write('!AS',outdesc);			! Output actual line

outdesc[0] = 0;				! Setup for appending strings
append('                      Global Buffer Count = !UL',
				.file_data [dsp$w_gbc]);

IF .file_data [dsp$v_contigb]		! If contiguous best try,
THEN
    append(', Contiguous-best-try');
IF .file_data [dsp$v_contig]	! If file is contiguous,
THEN
    append(', Contiguous');
IF .file_data [dsp$v_locked]		! If file is access locked,
THEN
    append(', Locked');

write('!AS',outdesc);			! Output actual line

outdesc[0] = 0;				! Setup for appending strings
append('  Record format:      ');
SELECTONEU .file_data [dsp$b_rfm] OF SET
    [fab$c_fix]: append('Fixed length !UL byte records',
			.file_data [dsp$w_recsize]);
    [fab$c_var]: append('Variable length');
    [fab$c_vfc]: append('VFC, !UL byte header',
			.file_data [dsp$b_vfcsize]);
    [fab$c_udf]: append('Undefined');
    [fab$c_stm]: append('Stream');
    [fab$c_stmlf]: append('Stream_LF');
    [fab$c_stmcr]: append('Stream_CR');
    [OTHERWISE]: append('Unknown type = !UL',
			.file_data [dsp$b_rfm]);
    TES;
IF .file_data [dsp$b_rfm] NEQ fab$c_fix	! If not fixed length,
    AND .file_data [dsp$w_recsize] NEQ 0
THEN
    append(', maximum !UL byte!%S',.file_data [dsp$w_recsize]);

write('!AS',outdesc);		! Output actual line

outdesc[0] = 0;			! Setup for appending strings
append('  Record attributes:  ');

IF (.file_data [dsp$b_rat] AND fab$m_cr) NEQ 0
THEN
    append('Carriage return')
ELSE
    IF (.file_data [dsp$b_rat] AND fab$m_ftn) NEQ 0
    THEN
	append('Fortran carriage control')
    ELSE
	IF (.file_data [dsp$b_rat] AND fab$m_prn) NEQ 0
	THEN
	    append('Print file format');

IF .file_data [dsp$b_rat] EQL fab$m_blk
THEN
    append('Non-spanned')
ELSE
    IF (.file_data [dsp$b_rat] AND fab$m_blk) NEQ 0
    THEN
	append(', Non-spanned');

IF .file_data [dsp$b_rat] NEQ 0
THEN
    write('!AS',outdesc)
ELSE
    write('!ASNone',outdesc);

write('');

END;

ROUTINE parse_prot (table, protection): NOVALUE =

!----
!
! Functional description
!
!	This routine fills a given VECTOR with the addresses of
!	strings corresponding to a given protection word.
!
! Input parameters
!
!	table = Address of the table to be filled in.
!	protection = Protection word.
!
! Output parameters
!
!	table has been filled in with the addresses of descriptors
!	of strings describing each type of user (SYS,OWN,GRP,WORLD).
!
!----

BEGIN

BIND
    prot_table = .table: VECTOR[4];	! Table of addresses

OWN
    prot_values: VECTOR[16] INITIAL(	! Protection descriptions
	descriptor('RWED'),
	descriptor('WED'),
	descriptor('RED'),
	descriptor('ED'),
	descriptor('RWD'),
	descriptor('WD'),
	descriptor('RD'),
	descriptor('D'),
	descriptor('RWE'),
	descriptor('WE'),
	descriptor('RE'),
	descriptor('E'),
	descriptor('RW'),
	descriptor('W'),
	descriptor('R'),
	descriptor(''));

INCR index FROM 0 TO 3 DO
    prot_table[.index] = .prot_values [.protection<.index*4,4>];

END;

GLOBAL ROUTINE write_trailing: NOVALUE =

!----
!
! Functional description
!
!	This routine writes the trailing information following
!	all the files in a directory listing.
!
! Input parameters
!
!	total_files = Total number of files displayed in directory.
!	total_blocks = Total number of blocks in files displayed.
!
! Output parameters
!
!	grand_files, grand_blocks, grand_alloc totals are updated.
!
!----

BEGIN

IF .column NEQ 0			! If columnar display,
THEN
    write('!AS',outdesc);		! Write last row of listing

IF .dir$flags [qual_trailing]
THEN
    BEGIN
    output_rab [rab$v_cco] = true;	! Cancel control/o now
    write('');
    output_rab [rab$v_cco] = false;	! Allow control/o again
    IF .total_blocks EQL 0		! If blocks not recorded
    THEN
        write('Total of !UL file!%S.',
	    .total_files)
    ELSE
	IF .dir$show_size EQL show_all OR .dir$flags [qual_full]
	THEN
	    write('Total of !UL file!%S, !UL/!UL block!%S.',
		.total_files,
		.total_blocks,
		.total_alloc)
	ELSE
            write('Total of !UL file!%S, !UL block!%S.',
	        .total_files,
		(IF .dir$show_size EQL show_alloc
		THEN
		    .total_alloc
		ELSE
		    .total_blocks));
    END;

grand_files = .grand_files + .total_files;
grand_blocks = .grand_blocks + .total_blocks;
grand_alloc = .grand_alloc + .total_alloc;

END;

GLOBAL ROUTINE grand_totals: NOVALUE =

!----
!
! Functional description
!
!	This routine writes the final grand totals after
!	all files have been processed and we are about to
!	exit.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	None
!
!----

BEGIN

IF .grand_files EQL 0 AND .total_dirs EQL 0	! If no files listed
THEN
    BEGIN
    IF .worst_error				! If no errors detected yet,
    THEN
        BEGIN
        write('  No files found.');		! Issue informational message
        worst_error = (RMS$_FNF AND NOT sts$m_severity OR sts$k_warning)
			OR sts$m_inhib_msg;	! Return FNF(warning) to CLI
        END;
    END
ELSE
    write_trailing();

IF .dir$flags [qual_trailing] AND .total_dirs GTR 1
THEN
    BEGIN
    write('');
    IF .grand_blocks EQL 0		! If blocks not recorded
    THEN
        write('Grand total of !UL directories, !UL file!%S.',
	    .total_dirs,
	    .grand_files)
    ELSE
	IF .dir$show_size EQL show_all OR .dir$flags [qual_full]
	THEN
	    write('Grand total of !UL directories, !UL file!%S, !UL/!UL block!%S.',
		.total_dirs,
		.grand_files,
		.grand_blocks,
		.grand_alloc)
        ELSE
            write('Grand total of !UL directories, !UL file!%S, !UL block!%S.',
	        .total_dirs,
	        .grand_files,
		(IF .dir$show_size EQL show_alloc
		THEN
		    .grand_alloc
		ELSE
		    .grand_blocks));
    END;

END;

END
ELUDOM
