MODULE dir (IDENT = 'V03-000', MAIN = directory) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DIRECTORY Command
!
! ABSTRACT:
!
!	This utility displays file directory information.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Dec 1978
!
! Modified by:
!
!	V02-018	LMP0015		L. Mark Pilant,		17-Mar-1982  11:20
!		Give an error message if doing a directory of a device
!		mounted foreign.  Also, add support for the Global Buffer
!		Count.
!
!	V02-017	RPG0017 	Bob Grosso		05-Feb-1982
!		Correct addressing mode of lib$file_scan.
!
!	V02-016	RPG0016		Bob Grosso		04-Feb-1982
!		Use lib$file_scan instead of fmg$file_scan.
!
!	V02-015	LMP43398	L. Mark Pilant		19-Jan-1982  10:30
!		Correct problem with the protection displayed with and
!		without the BYPASS privilege.
!
!	V014	KFH0002		Ken Henderson	 7-Jan-1982
!		Modified MOVE_RMS_INFO to fetch W_PVN and B_NOA from XABSUM
!		(prologue version number and number of areas)
!
!	V013	KRM0032		Karl Malik	29-Dec-1981
!		Modified DO_FILE to save NODE, DEV and DIR
!		lengths after a $SEARCH in the DSP block. Also
!		removed PARSE_EXNAME, PARSE_FAB and PARSE_NAM.
!
!	V012	KRM0028		Karl Malik	13-Nov-1981
!		Add PARSE_EXNAME to OWN storage and PARSE_FAB and
!		PARSE_NAM to GLOBAL storage (used in LIST_FILE to
!		$PARSE the filespec). Also, returned INPUT_NAM to
!		OWN storage (see KRM0027).
!
!	V011	ROW0033		Ralph O. Weber	23-OCT-1981
!		Lengthen attribute control block storage definition to include
!		final, zero, longword.  This will eliminate errors on the 
!		IO$_ACCESS QIO and thus eliminate several spurious errors.
!
!	V010	KRM0027		Karl Malik	16-Sep-1981
!		Moved INPUT_NAM from OWN to GLOBAL so that it could
!		be accessed from LIST_FILE.
!
!	V009	TMH0009		Tim Halvorsen	14-Aug-1981
!		Obtain backup date, so that it can be displayed.
!
!	V008	TMH0008		Tim Halvorsen	09-Aug-1981
!		Make /PRINTER send output to temporary file in SYS$SCRATCH.
!		Get F11DEF from SHRLIB$ rather than LIB$.
!		Fix MOVE_RMS_INFO to be NOVALUE, since it doesn't return
!		any value.
!
!	V007	KRM0011		Karl Malik	25-Feb-1981
!		Modified DO_FILE to allow proper error path on
!		failure to locate a nonwild network spec.
!
!	V006	TMH0006		Tim Halvorsen	16-Sep-1980
!		Force creation of temporary file for /PRINTER even if
!		/OUTPUT was defaulted true.  That is, /PRINTER overrides
!		/OUTPUT.
!
!	V005	TMH0005		Tim Halvorsen	06-May-1980
!		Call SEARCH once if we get a nonwild network spec
!		back from filescan.  This is needed because filescan
!		will not SEARCH to avoid unnecessary invocations
!		of FAL on the remote node just to get the full file
!		name when the OPEN follows by the caller.
!		Set SQO bit on the output device for optimized output
!		if the listing goes over the network.
!
!	V004	TMH0004		Tim Halvorsen	11-Mar-1980
!		Report network errors detected while attempting
!		to read the file attributes on the remote side.
!		They are sent back in STV with an STS of success.
!
!	V003	TMH0003		Tim Halvorsen	31-Jan-1980
!		Fix bind of XABSUM in move_rms_info.  Was getting
!		bad number of keys by looking at the wrong XAB.
!
!	V002	TMH0002		Tim Halvorsen	14-Jan-1980
!		Use XABDAT fields rather than XABRDT fields
!		in get_rms_info	for network support.  Set CTX
!		as a special case for networks to enable XAB
!		retrieval over the network.  Rearrange main
!		loop to allow for immediate information retrieval
!		rather than deferred (for networks).
!
!	V001	TMH0001		Tim Halvorsen	08-Nov-1979
!		Zero FAB$W_DEQ before RMS open because RMS
!		overrides DEQ with input value if non-zero.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions

LIBRARY	'SYS$LIBRARY:CLIMAC';		! CLI macros

REQUIRE 'SHRLIB$:F11DEF.B32';		! Files-11 definitions

SWITCHES LIST(REQUIRE);			! Print require file
REQUIRE 'SRC$:DIRDEF';			! Command definitions

!
! Table of contents
!

FORWARD ROUTINE
    directory,				! Main directory routine
    get_input_file,			! Get next file from input list
    do_file:		NOVALUE,	! Process each wildcard file
    get_file_info:	NOVALUE,	! Read input file information
    init_header_qio,			! Initiate read header QIO
    copy_acp_info:	NOVALUE,	! Get info from file header
    copy_rms_info:	NOVALUE,	! Open and get RMS file info
    move_rms_info:	NOVALUE,	! Copy info from XAB blocks
    check_match,			! Check file qualifications
    check_date,				! Check date qualifications
    handler,				! Condition handler
    input_error:	NOVALUE,	! RMS input error handler
    close_error:	NOVALUE,	! RMS close error handler
    output_error:	NOVALUE;	! RMS output error handler

!
! External routines
!

EXTERNAL ROUTINE
    list_file:	NOVALUE,	! Display file information
    grand_totals:	NOVALUE,	! Write final grand totals
    lib$file_scan : ADDRESSING_MODE (GENERAL),	! Search wildcard specifications
    fmg$match_file,			! File matching routine
    get_quals;				! Get command qualifiers

!
! Storage definitions
!

OWN
    file_data:	BBLOCK[dsp$c_length],	! File display info block
    iosb:	VECTOR[4,WORD],		! I/O status block
    fib_desc:	BBLOCK[8],		! Descriptor of FIB
    fib:	BBLOCK[fib$c_accdata],	! FIB to interface with ACP
    atr:	BLOCKVECTOR[10,8,BYTE],	! Attribute control block
    filatr:	BBLOCK[atr$s_recattr],	! File attributes
    credate:	BBLOCK[atr$s_credate],	! Creation date (from header)
    revdate:	BBLOCK[atr$s_revdate],	! Revision date
    expdate:	BBLOCK[atr$s_expdate],	! Expiration date
    bakdate:	BBLOCK[atr$s_bakdate],	! Backup date
    statblk:	BBLOCK[atr$s_statblk],	! Statistics block
    channel:	WORD INITIAL(0),	! Channel of device
    protection:	WORD,			! File protection
    uic,				! File owner UIC
    uchar:	BYTE,			! File characteristics

    input_name:				! File name after open
		VECTOR [nam$c_maxrss,BYTE],
    input_exname:			! File name after parse
		VECTOR [nam$c_maxrss,BYTE],

    rel_nam:	$NAM(			! Dummy NAM for stickyness
	RSA = input_exname),

    input_nam:	$NAM(			! File name block
	RSA = input_name,		! File name after open
	RSS = nam$c_maxrss,
	ESA = input_exname,		! File name before open
	ESS = nam$c_maxrss,
	RLF = rel_nam),			! Related name block

    input_xabsum: $XABSUM(),		! Define XAB indexed summary block

    input_xabpro: $XABPRO(		! Define XAB protection info
		NXT = input_xabsum),

    input_xabdat: $XABDAT(		! Define XAB date/time info
		NXT = input_xabpro),

    input_xabfhc: $XABFHC(		! Define XAB file header info
		NXT = input_xabdat),

    input_fab:	$FAB(			! Define input FAB
	DNA = UPLIT('*.*;*'),		! Default name string
	DNS = 5,
	NAM = input_nam,		! Address of NAM block
	XAB = input_xabfhc),		! Address of XABFHC block

    output_name:			! Result file name
		VECTOR [nam$c_maxrss,BYTE],

    output_nam: $NAM(			! Output file name block
	RSA = output_name,		! File name after open
	RSS = nam$c_maxrss),

    output_fab:	$FAB(			! FAB for output listing
	DNA = UPLIT('DIRECTORY.LIS'),	! Default output type
	DNS = 13,
	RAT = CR,			! Append LF/CR on each line
	FOP = SQO,			! Sequential output only
	FAC = PUT,			! Open for output
	NAM = output_nam);		! Address of NAM block


GLOBAL
    worst_error: BBLOCK[4]		! Worst error encountered
		INITIAL(ss$_normal),	! Initially normal status

    output_rab: $RAB(			! RAB for output listing
	FAB = output_fab,
	ROP = WBH,			! Overlap I/O if possible
	RSZ = 1);			! Non-zero for dir$put_output

EXTERNAL
    dir$cli_util,			! Address of CLI utility routine
    dir$cli_work:	BBLOCK,		! Address of CLI work area
    dir$flags:		BITVECTOR,	! CLI qualifier bitmap
    dir$before_date:	BBLOCK,		! /BEFORE value
    dir$since_date:	BBLOCK,		! /SINCE value
    dir$excl_list:	REF BBLOCK,	! Exclude list header
    input_desc:		BBLOCK,		! Input CLI request descriptor
    output_desc:	BBLOCK,		! Output CLI request descriptor
    cleanup_desc:	BBLOCK;		! Cleanup CLI request

ROUTINE directory =			! DIRECTORY Main routine

!++
! Functional description
!
!	This is the main control routine for the directory command.
!	It is called from the command language interpreter to display
!	and/or search for a specified list of file specifications.
!
! Calling sequence
!
!	directory() from the Command Language Interpreter
!
! Input parameters
!
!	AP = Address of argument list passed from CLI
!
! Output parameters
!
!	None
!
! Routine value
!
!	Worst error encountered during processing or SS$_NORMAL.
!
!----

BEGIN

LOCAL
    status;				! Status return

BUILTIN
    AP,					! Define register AP
    FP;					! Define register FP

BIND cli_params = AP: REF BBLOCK;	! Define parameter block

!
!	Declare signal handler in order to record the most severe
!	error message issued, to be returned on exit of image.
!
.fp = handler;				! Set condition handler
!
!	Save the address of the CLI call-back service routine
!
dir$cli_util = .cli_params[cli$a_utilserv];

!
!	Parse command qualifiers
!

get_quals();				! Get command qualifiers

!
!	Open output file for directory listing
!

IF .dir$flags [qual_printer]		! If /PRINTER requested,
THEN
    BEGIN
    output_fab [fab$v_spl] = true;	! Spool listing when done
    output_fab [fab$v_dlt] = true;	! Delete temp file when printed
    output_fab [fab$l_fna] = UPLIT BYTE('SYS$SCRATCH'); ! Use scratch area
    output_fab [fab$b_fns] = 11;
    END
ELSE IF .output_desc[cli$w_rqsize] NEQ 0 ! Else, if /OUTPUT has a value,
THEN
    BEGIN
    output_fab[fab$l_fna] = .output_desc[cli$a_rqaddr];
    output_fab[fab$b_fns] = .output_desc[cli$w_rqsize];
    END
ELSE					! Else, default to SYS$OUTPUT
    BEGIN
    output_fab[fab$l_fna] = UPLIT BYTE('SYS$OUTPUT');
    output_fab[fab$b_fns] = 10;
    END;

$CREATE(FAB=output_fab,ERR=output_error);
$CONNECT(RAB=output_rab,ERR=output_error);

output_fab [fab$v_nam] = TRUE;		! Use NAM block for result name

!
!	Initialize ACP QIO parameters for file header information.
!

fib [fib$l_acctl] = 0;			! No special options

fib_desc[dsc$w_length] = fib$c_accdata;
fib_desc[dsc$a_pointer] = fib;		! Address of storage

atr [0,atr$w_type] = atr$c_recattr;	! Read file attributes
atr [0,atr$w_size] = atr$s_recattr;	! Size of buffer
atr [0,atr$l_addr] = filatr;		! Address of storage
atr [1,atr$w_type] = atr$c_credate;	! Get creation date
atr [1,atr$w_size] = atr$s_credate;
atr [1,atr$l_addr] = credate;
atr [2,atr$w_type] = atr$c_revdate;	! Get revision date
atr [2,atr$w_size] = atr$s_revdate;
atr [2,atr$l_addr] = revdate;
atr [3,atr$w_type] = atr$c_expdate;	! Get expiration date
atr [3,atr$w_size] = atr$s_expdate;
atr [3,atr$l_addr] = expdate;
atr [4,atr$w_type] = atr$c_statblk;	! Read statistics block
atr [4,atr$w_size] = atr$s_statblk;
atr [4,atr$l_addr] = statblk;
atr [5,atr$w_type] = atr$c_uic;		! Get owner UIC
atr [5,atr$w_size] = atr$s_uic;
atr [5,atr$l_addr] = uic;
atr [6,atr$w_type] = atr$c_fpro;	! Get file protection
atr [6,atr$w_size] = atr$s_fpro;
atr [6,atr$l_addr] = protection;
atr [7,atr$w_type] = atr$c_uchar;	! Get file characteristics
atr [7,atr$w_size] = atr$s_uchar;
atr [7,atr$l_addr] = uchar;
atr [8,atr$w_type] = atr$c_bakdate;	! Get backup date
atr [8,atr$w_size] = atr$s_bakdate;
atr [8,atr$l_addr] = bakdate;
atr [9,0,0,32,0] = 0;			! Zero trailing longword

CH$FILL(0,dsp$c_length,file_data);	! Zero the file data block

IF (.dir$flags AND (1^qual_full OR 1^qual_before OR 1^qual_since
    OR 1^qual_date OR 1^qual_size OR 1^qual_owner
    OR 1^qual_protection)) NEQ 0
THEN
    input_fab [fab$l_ctx] = 'XABS';	! If a network spec, pass back
					! info in XAB's   ** kludge **

!
!	Initialize for file processing loop
!

input_desc[cli$v_concatinp] = true;	! Initialize get_file routine

!
!	Process each file in the input list
!

WHILE get_input_file() DO		! For each input file
    BEGIN
    lib$file_scan(input_fab,		! Match all wildcard files
		do_file,		! and here if file found
		input_error,		! calling here if error occurs
		0);			! no directory action routine
    IF .channel NEQ 0			! If channel assigned,
    THEN
	BEGIN
	$WAITFR(EFN=1);				!
	status = $DASSGN(CHAN = .channel);	! Deassign channel
	IF NOT .status				! If unsuccessful,
	THEN
	    write_warning(.status);		! Show reason
	channel = 0;			! Set to reASSIGN next pass
	END;
    END;

IF .file_data [dsp$v_qio_out]		! If QIO outstanding,
THEN
    BEGIN
    get_file_info();			! Save file info from last file
    IF check_match(file_data)		! If it matches the conditions,
    THEN
        list_file(file_data);		! then display the information
    END;

grand_totals();				! Output grand totals

$CLOSE (FAB = output_fab, ERR = output_error);	! Close output file

RETURN .worst_error;
END;

ROUTINE get_input_file =

!----
! Functional Description
!
!	Obtain the next file specification from the input file
!	list and perform the initial parsing to ensure legality.
!
! Input Parameters
!
!	dir$cli_util = Address of CLI call-back routine
!
! Output Parameters
!
!	input_fab = FAB initialized for current file name
!	input_nam = NAM block associated with FAB
!	rel_nam = related name block
!
!----

BEGIN

!
!	If the input file list is depleted, then call back
!	CLI to perform cleanups and exit without filename.
!

IF NOT .input_desc[cli$v_concatinp]
THEN
    BEGIN
    (.dir$cli_util)(cleanup_desc,
		    dir$cli_work,
		    dir$flags);
    RETURN false;
    END;

!
!	Get the next input file from CLI
!

(.dir$cli_util)(input_desc,
		dir$cli_work,
		dir$flags);

!
!	Initialize the FAB for initial parsing
!

input_fab[fab$l_fna] = .input_desc[cli$a_rqaddr];
input_fab[fab$b_fns] = .input_desc[cli$w_rqsize];

RETURN true;

END;

ROUTINE do_file: NOVALUE =

!----
!
! Functional description
!
!	This routine is called as an action routine
!	from the directory wildcard searching process.
!	It is given a FAB containing the full name
!	of the file to be processed.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	None
!
!----

BEGIN

LOCAL
    status;				! Status return value


IF NOT .input_fab [$FAB_DEV(dir)]	! If not directory-type device,
    AND NOT .input_nam [nam$v_node]	! and not network spec
THEN
    BEGIN
    input_fab [fab$l_sts] = ss$_notfiledev;	! Set error code
    input_fab [fab$l_stv] = 0;
    input_error (input_fab);		! Report error
    RETURN;
    END;

IF .file_data [dsp$v_qio_out]		! If QIO outstanding from last file,
THEN
    BEGIN
    get_file_info();			! Save file info from last file
    IF check_match(file_data)		! If it matches the conditions,
    THEN
        list_file(file_data);		! then display the information
    END;

IF .input_nam [nam$v_node]		! If network spec,
THEN
    BEGIN
    status = false;			! then skip ACP QIO
    IF NOT .input_nam [nam$v_wildcard]	! If nonwild network spec,
    THEN
	IF NOT $SEARCH (FAB = input_fab,! then search once to get the full name
			ERR= input_error)! and XAB information
	THEN RETURN;			! Exit if error locating file
    END					
ELSE
    status = init_header_qio();		! Initiate file header read for file
					! just found by filescan using input_nam

IF .STATUS EQL SS$_DEVFOREIGN
THEN
    BEGIN
    INPUT_FAB [FAB$L_STS] = SS$_DEVFOREIGN;	! Set the primary error
    INPUT_FAB [FAB$L_STV] = 0;		! No secondary error
    INPUT_ERROR (INPUT_FAB);		! Report the error
    RETURN;
    END;

!
! Set up DSP block for file just $SEARCHed
!
CH$FILL(0,dsp$c_length,file_data);	! Zero the block
CH$MOVE(nam$c_dvi,input_nam [nam$t_dvi], file_data [dsp$t_dvi]);
file_data [dsp$b_fns] = .input_nam [nam$b_rsl];
CH$MOVE(.input_nam [nam$b_rsl], .input_nam [nam$l_rsa],
	file_data [dsp$a_filename]);
file_data [dsp$w_fid_num] = .input_nam [nam$w_fid_num];
file_data [dsp$w_fid_seq] = .input_nam [nam$w_fid_seq];
file_data [dsp$w_fid_rvn] = .input_nam [nam$w_fid_rvn];
file_data [dsp$v_wild_dir] = .input_nam [nam$v_wild_dir];
file_data [dsp$b_node] = .input_nam [nam$b_node];
file_data [dsp$b_dev] = .input_nam [nam$b_dev];
file_data [dsp$b_dir] = .input_nam [nam$b_dir];
file_data [dsp$v_sqd] = .input_fab [$FAB_DEV(sqd)];
file_data [dsp$l_status] = .status;	! Set header read status

IF NOT .status				! If error issuing QIO,
THEN
    BEGIN
    IF .input_nam [nam$v_node]		! If network filespec,
    THEN
	!	If the STS is success and the STV is an error, then
	!	return with the status of STV.  This happens on network
	!	directory only and is the method by which RMS/FAL passes
	!	back any errors while attempting to obtain the file attributes.
	IF .input_fab [fab$l_sts]	! If STS=success and STV=error,
	    AND .input_fab [fab$l_stv] NEQ 0
	    AND NOT .input_fab [fab$l_stv]
	THEN				! then copy error status
	    file_data [dsp$l_status] = .input_fab [fab$l_stv]
	ELSE
	    move_rms_info(input_fab)	! if net ok, get info from filescan fab
    ELSE
	get_file_info();		! Else get file info using RMS

    IF check_match(file_data)		! If it matches the conditions,
    THEN
        list_file(file_data);		! then display the information
    END
ELSE
    file_data [dsp$v_qio_out] = true;	! Mark QIO outstanding for data

END;

ROUTINE init_header_qio =

!----
!
! Functional description
!
!	This routine initiates an ACP read of the file header
!	for the current file.  Later, we will check the results
!	of this read to obtain the file display information.
!
! Inputs:
!
!	input_fab = FAB for current file
!	input_nam = NAM for current file
!
! Outputs:
!
!	Routine value is TRUE if successful, else FALSE.
!
!----

BEGIN

LOCAL
    status,				! Status return
    dev_desc:	BBLOCK[8];		! Descriptor for device string


!
! Perform the read ONLY if needed.
!

IF (.dir$flags AND (1^qual_full OR 1^qual_before OR 1^qual_since
    OR 1^qual_date OR 1^qual_size OR 1^qual_owner
    OR 1^qual_protection)) EQL 0
THEN
    RETURN true;			! Exit if no info needed

!
!	Assign channel to access device if not already done.
!

IF .channel EQL 0			! If channel not assigned yet
THEN
    BEGIN
    dev_desc [dsc$w_length] = .input_nam [nam$b_rsl];
    dev_desc [dsc$a_pointer] = .input_nam [nam$l_rsa];

    status = $ASSIGN( DEVNAM = dev_desc,	! Assign channel
		      CHAN = channel);

    IF NOT .status			! If unsuccessful,
    THEN
        BEGIN
        write_warning(.status);		! Write reason why we failed
        RETURN .status;			! Indicate to use RMS instead
        END;
    END;

!
!	Initiate ACP QIO for file information.
!

fib [fib$w_fid_num] = .input_nam [nam$w_fid_num];
fib [fib$w_fid_seq] = .input_nam [nam$w_fid_seq];
fib [fib$w_fid_rvn] = .input_nam [nam$w_fid_rvn];

status = $QIO(	FUNC = IO$_ACCESS,	! Read the file header info
		CHAN = .channel,	! Channel of device
		EFN = 1,		! Set event flag 1 when done
		IOSB = iosb,		! Address of I/O status block
		P1 = fib_desc,		! Address of FIB descriptor
		P5 = atr);

IF NOT .status				! If unsuccessful,
THEN
    BEGIN
    write_warning(.status);		! Output reason why we failed
    RETURN .status;			! Indicate to use RMS instead
    END;

RETURN true;				! Indicate success

END;

ROUTINE get_file_info: NOVALUE =

!----
!
! Functional description
!
!	This routine saves the file display information into
!	the file display block.  It first waits for the ACP
!	file header read to complete.  If an error is encountered,
!	fall back on RMS to obtain the information.  If no
!	error, obtain the information from the file header.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	file_data is filled in with file display information.
!
!----

BEGIN

!
! Read the file header ONLY if needed.
!

IF (.dir$flags AND (1^qual_full OR 1^qual_before OR 1^qual_since
    OR 1^qual_date OR 1^qual_size OR 1^qual_owner
    OR 1^qual_protection)) EQL 0
THEN
    RETURN;				! Exit if no info needed

IF .dir$flags [qual_full]		! If full display, 
    AND NOT .file_data [dsp$v_sqd]	! and not using tapes,
THEN
    BEGIN
    copy_rms_info();			! Call RMS for complete info
    IF NOT .file_data [dsp$l_status]	! If no read access,
	OR .file_data [dsp$v_locked]	! or file locked,
    THEN
	BEGIN				! settle for what ACP can give
	file_data [dsp$l_status] = ss$_normal;	! (incomplete, but)
        copy_acp_info();		! Copy ACP info
	END
    END
ELSE
    BEGIN
    copy_acp_info();			! Read/save results of ACP read
    IF NOT .file_data [dsp$l_status]	! If error encountered,
    THEN
        copy_rms_info();		! then call RMS for info
    END;

END;

ROUTINE copy_acp_info: NOVALUE =

!----
! Functional description
!
!	This routine fills in the file display block with the
!	results from a ACP file access operation.
!
! Input parameters
!
!	header = File header as read via the ACP
!	file_data = File display block
!
! Output parameters
!
!	file_data is filled in.
!
!----

BEGIN

LOCAL
    status;				! Status return

MACRO					! Define statistics block
    stb$w_efblkh	= 4,0,16,0%,	! High order file size
    stb$w_efblkl	= 4,16,16,0%;	! Low order file size


IF NOT .file_data [dsp$l_status]	! If error in header read QIO
THEN
    RETURN;				! Then return leaving status set

$WAITFR(EFN = 1);			! Wait for QIO to complete

IF NOT .iosb[0]				! If ACP failed,
THEN
    BEGIN
    file_data [dsp$l_status] = .iosb[0];! Save status return
    write_warning(.iosb[0]);		! Write reason
    RETURN false;			! Use RMS instead
    END;

IF .uchar <$BITPOSITION(fh2$v_contig),1>  ! If file is contiguous,
THEN
    file_data [dsp$v_contig] = true;

IF .uchar <$BITPOSITION(fh2$v_contigb),1> ! If contiguous best try,
THEN
    file_data [dsp$v_contigb] = true;

IF .uchar <$BITPOSITION(fh2$v_locked),1>  ! If file is access locked,
THEN
    file_data [dsp$v_locked] = true;

file_data [dsp$l_uic] = .uic;		! Copy UIC of file owner
file_data [dsp$w_prot] = .protection;	! Copy file protection

file_data [dsp$b_rat] = .filatr [fat$b_rattrib];
file_data [dsp$b_rfm] = .filatr [fat$b_rtype] AND %B'00001111';
file_data [dsp$b_org] = .filatr [fat$b_rtype] AND %B'11110000';
IF (file_data [dsp$b_vfcsize] = .filatr [fat$b_vfcsize]) EQL 0
THEN
    file_data [dsp$b_vfcsize] = 2;
file_data [dsp$w_extend] = .filatr [fat$w_defext];
file_data [dsp$l_alloc] =
		(.filatr [fat$w_hiblkh] ^ 16) + .filatr [fat$w_hiblkl];
file_data [dsp$l_blocks] =
		(.filatr [fat$w_efblkh] ^ 16) + .filatr [fat$w_efblkl];
IF .file_data [dsp$l_blocks] EQL 0
THEN
    file_data [dsp$l_blocks] = .file_data [dsp$l_alloc]
ELSE
    IF .filatr [fat$w_ffbyte] EQL 0
    THEN
        file_data [dsp$l_blocks] = .file_data [dsp$l_blocks] - 1;
IF .file_data [dsp$v_sqd]		! If sequential device (tapes),
THEN
    BEGIN				! must get blocks from statblk
    file_data [dsp$l_blocks] =
	(.statblk [stb$w_efblkh] ^ 16) + .statblk [stb$w_efblkl];
    file_data [dsp$l_alloc] = .file_data [dsp$l_blocks];
    END;
file_data [dsp$b_bkt] = .filatr [fat$b_bktsize];
IF .filatr [fat$w_rsize] EQL 0
THEN
    file_data [dsp$w_recsize] = .filatr [fat$w_maxrec]
ELSE
    file_data [dsp$w_recsize] = .filatr [fat$w_rsize];

file_data [dsp$l_cdt0] = .credate [0,0,32,0];
file_data [dsp$l_cdt4] = .credate [4,0,32,0];
file_data [dsp$l_rdt0] = .revdate [0,0,32,0];
file_data [dsp$l_rdt4] = .revdate [4,0,32,0];
file_data [dsp$l_edt0] = .expdate [0,0,32,0];
file_data [dsp$l_edt4] = .expdate [4,0,32,0];
file_data [dsp$l_bdt0] = .bakdate [0,0,32,0];
file_data [dsp$l_bdt4] = .bakdate [4,0,32,0];

END;

ROUTINE copy_rms_info: NOVALUE =

!----
! Functional description
!
!	This routine uses RMS to fill the file display block.
!	It creates the necessary XABs and calls RMS with the
!	file ID saved in the file display block.  The rest of
!	the block is filled if the RMS $OPEN is successful.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	file_data is filled in.
!
!----

BEGIN

LOCAL
    status;				! Status return from RMS

OWN
    xabsum:	$XABSUM(),		! Define XAB summary block

    xabpro:	$XABPRO(NXT = xabsum),	! Define XAB protection block

    xabdat:	$XABDAT(NXT = xabpro),	! Define XAB date block

    xabfhc:	$XABFHC(NXT = xabdat),	! Define XAB file header block

    nam:	$NAM(),			! Define NAM block

    fab:	$FAB(			! Define FAB block
			FOP = NAM,	! Use FID in NAM block
			NAM = nam,	! Address of NAM block
			XAB = xabfhc);	! Address of XAB chain

!
! First open the current file to get the XAB fields.
! If the OPEN fails, signal a message, and return.
!

nam [nam$b_rsl] = .file_data [dsp$b_fns];
nam [nam$l_rsa] = file_data [dsp$a_filename];
nam [nam$w_fid_num] = .file_data [dsp$w_fid_num];
nam [nam$w_fid_seq] = .file_data [dsp$w_fid_seq];
nam [nam$w_fid_rvn] = .file_data [dsp$w_fid_rvn];
CH$MOVE(nam$c_dvi, file_data [dsp$t_dvi], nam [nam$t_dvi]);

fab [fab$w_deq] = 0;			! Zero because this is INPUT
					! to RMS if non-zero value

status = $OPEN(FAB = fab);		! Get the XAB information

IF NOT .status				! If error
THEN
    IF .fab [fab$l_stv] EQL ss$_filelocked	! If file is locked,
    THEN
	BEGIN
        file_data [dsp$v_locked] = true;	! Mark file locked
	RETURN;
	END
    ELSE
        BEGIN
        file_data [dsp$l_status] = .fab [fab$l_stv];	! Save status
        RETURN;				! and exit immediately
        END
ELSE					! If OPEN was successful,
    BEGIN
    fab[fab$l_xab] = 0;			! No XAB modification upon closing
    $CLOSE(	FAB = fab,		! Close the file too.
		ERR = close_error);
    fab[fab$l_xab] = xabfhc;		! Put XABs back into the list
    END;

move_rms_info(fab);			! Move data from fab/xab to file_data

END;

ROUTINE move_rms_info (fab): NOVALUE =

!---
!
!	This routine moves the data from the specified
!	FAB (and associated XAB's) to the file_data block.
!
! Inputs:
!
!	fab = Address of FAB containing XAB's in the
!		following order: FHC, DAT, PRO, SUM.
!
! Outputs:
!
!	file_data is filled in.
!
!----

BEGIN

MAP
    fab:	REF BBLOCK;		! Address of FAB

BIND
    xabfhc = .fab [fab$l_xab]:		BBLOCK,
    xabdat = .xabfhc [xab$l_nxt]:	BBLOCK,
    xabpro = .xabdat [xab$l_nxt]:	BBLOCK,
    xabsum = .xabpro [xab$l_nxt]:	BBLOCK;

file_data [dsp$v_contig] = .fab [fab$v_ctg];
file_data [dsp$v_contigb] = .fab [fab$v_cbt];

file_data [dsp$l_uic] = .xabpro [xab$l_uic];
file_data [dsp$w_prot] = .xabpro [xab$w_pro];

file_data [dsp$b_rat] = .fab [fab$b_rat];
file_data [dsp$b_rfm] = .fab [fab$b_rfm];
file_data [dsp$b_org] = .fab [fab$b_org];
file_data [dsp$w_extend] = .fab [fab$w_deq];
file_data [dsp$l_alloc] = .fab [fab$l_alq];
file_data [dsp$b_vfcsize] = .fab [fab$b_fsz];
IF .file_data [dsp$b_vfcsize] EQL 0
THEN
    file_data [dsp$b_vfcsize] = 2;
file_data [dsp$b_bkt] = .fab [fab$b_bks];
file_data [dsp$l_mrn] = .fab [fab$l_mrn];
file_data [dsp$w_recsize] = .fab [fab$w_mrs];
file_data [dsp$w_gbc] = .fab[fab$w_gbc];

file_data [dsp$l_blocks] = .xabfhc [xab$l_ebk];
IF .file_data [dsp$l_blocks] EQL 0
THEN
    file_data [dsp$l_blocks] = .file_data [dsp$l_alloc]
ELSE
    IF .xabfhc [xab$w_ffb] EQL 0
    THEN
        file_data [dsp$l_blocks] = .file_data [dsp$l_blocks] - 1;

file_data [dsp$b_nokeys] = .xabsum [xab$b_nok];
file_data [dsp$b_noareas] = .xabsum [xab$b_noa];
file_data [dsp$w_pvn] = .xabsum [xab$w_pvn];

file_data [dsp$l_cdt0] = .xabdat [xab$l_cdt0];
file_data [dsp$l_cdt4] = .xabdat [xab$l_cdt4];
file_data [dsp$l_rdt0] = .xabdat [xab$l_rdt0];
file_data [dsp$l_rdt4] = .xabdat [xab$l_rdt4];
file_data [dsp$l_edt0] = .xabdat [xab$l_edt0];
file_data [dsp$l_edt4] = .xabdat [xab$l_edt4];
file_data [dsp$l_bdt0] = .xabdat [xab$l_bdt0];
file_data [dsp$l_bdt4] = .xabdat [xab$l_bdt4];
file_data [dsp$w_rvn] = .xabdat [xab$w_rvn];

file_data [dsp$l_status] = ss$_normal;	! Set successful operation

END;

ROUTINE check_match (file_data) =

!----
! Functional description
!
!	This routine decides whether a file should be displayed by
! 	checking the various attributes associated with the current
!	file against the values specified in the command qualifiers.
!
!	The qualifiers /EXPIRATION, /CREATION and /MODIFIED specifies
!	which of the dates should be checked against the dates given
!	by the /SINCE and /BEFORE qualfiers.
!
! Input parameters
!
!	file_data	- Address of block holding file information.
!	dir$excl_list	- Address of exclude list header
!
! Routine value
!
!	TRUE	- file is to be displayed
!	FALSE	- file is not to be displayed
!
!--

BEGIN

MAP
    file_data:	REF BBLOCK;		! Address file info block

LOCAL
    file_desc:	VECTOR[2],		! File specification to check
    ptr; 				! Exclude list pointer


!
! Check the file specification against the list of filespecs
! specifically excluded via the /EXCLUDE qualifier.
!

IF .dir$flags [qual_exclude]		! If /EXCLUDE requested,
THEN
    BEGIN
    ptr = .dir$excl_list;		! Get list header

    WHILE .ptr NEQ 0
    DO
        BEGIN
        BIND
            excbuf = .ptr: BBLOCK;	! Address the block
        file_desc[0] = .file_data [dsp$b_fns];
        file_desc[1] = file_data [dsp$a_filename];
        IF fmg$match_file(		! If file matches,
		file_desc,
		excbuf [exc$w_fns])
        THEN
	    RETURN false;		! Then do NOT process it
        ptr = .excbuf [exc$l_link];	! Skip to next in chain
        END;
    END;

!
! For each date that the user said to check, decide whether
! the file's related date value indicates that the file should
! be displayed.
!

IF NOT .dir$flags [qual_since] AND NOT .dir$flags [qual_before]
THEN
    RETURN true;			! Match ok if no dates

SELECT true OF
    SET

    [.dir$flags [qual_creation]]:
	IF NOT check_date (file_data [dsp$l_cdt0])
	THEN
	    RETURN false;

    [.dir$flags [qual_modified]]:
	IF NOT check_date (file_data [dsp$l_rdt0])
	THEN
	    RETURN false;

    [.dir$flags [qual_expiration]]:
	IF NOT check_date (file_data [dsp$l_edt0])
	THEN
	    RETURN false;

    TES;

RETURN true;				! Matches if all dates ok

END;

ROUTINE check_date (date) =

!----
!
! Functional description
!
!	This routine checks a single date against the /SINCE
!	and /BEFORE qualifiers and returns whether the file
!	matches the date specification or not.
!
! Input parameters
!
!	date		- Address of date to check
!	dir$before_date	- Date specified on /BEFORE qualifier
!	dir$since_date	- Date specified on /SINCE qualifier
!
! Routine value
!
!	True if dates match, else false.
!
!----

BEGIN

MAP
    date:	REF BBLOCK;		! Date to check against

LOCAL
    earlier,				! Boolean, says /BEFORE was true
    later;				! Boolean, says /SINCE was true

MACRO
    high_date	= 4, 0, 32, 0%,		! High-bits in specified date
    low_date	= 0, 0, 32, 0%;		! Low-bits in specified date


earlier = NOT .dir$flags [qual_before];	! Assume no matches
later = NOT .dir$flags [qual_since];	! for both /BEFORE and /SINCE.

!
! If the user said /BEFORE, and the file's creation date
! is previous to the specified date, then set Boolean indicator
! that /BEFORE was satisfied.
!

IF .dir$flags [qual_before]		! If /BEFORE was specified,
THEN
    IF (.date [high_date]		! and dates are LSSU
            LSSU .dir$before_date [high_date])
        OR ((.date [high_date]
            EQLU .dir$before_date [high_date])
            AND (.date [low_date]
            LSSU .dir$before_date [low_date]))
        THEN
            earlier = TRUE;		! Set /BEFORE satisfed.

!
! If the user said /SINCE, and the file's creation date
! is later than the specified date, then set the Boolean
! indicator that /SINCE was satisifed.

IF .dir$flags [qual_since]		! If /SINCE was specified,
THEN
    IF (.date [high_date]		! and dates are GTRU
            GTRU .dir$since_date [high_date])
        OR ((.date [high_date]
            EQLU .dir$since_date [high_date])
            AND (.date [low_date]
            GTRU .dir$since_date [low_date]))
        THEN
            later = TRUE;		! Set /SINCE satisfied.

RETURN .earlier and .later;		! True only if both true

END;
ROUTINE handler (signal_args, mechanism_args) =

!---
!
!	This condition handler gets control on any signalled
!	condition in order to save the highest severity error
!	to be returned by exit from the image.
!
! Inputs:
!
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Outputs:
!
!	worst_error is updated with highest severity error.
!
!---

BEGIN

MAP
    signal_args: REF BBLOCK,			! Address of signal arg list
    mechanism_args: REF BBLOCK;			! Address of mechanism arg list

LOCAL
    code: BBLOCK [LONG];			! Condition code (longword)

code = .signal_args [chf$l_sig_name];		! Get condition code

IF .code [sts$v_severity] GTR .worst_error [sts$v_severity]
THEN
    worst_error = .code OR sts$m_inhib_msg;	! Set new worst error

ss$_resignal					! Continue signalling

END;

GLOBAL ROUTINE input_error (fab) : NOVALUE =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS function call concerning the
!	primary input file.
!
! Input parameters
!
!	fab = Address of block used in the RMS call.
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP fab: REF BBLOCK;			! Define RMS block format
BIND nam = .fab[fab$l_nam]: BBLOCK;	! Define name block

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF .fab [fab$l_sts] EQL rms$_fnf	! If error is file not found,
THEN
    RETURN;				! don't bother to report it

IF .nam[nam$b_rsl] NEQ 0		! If result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded string nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(msg$_OPENIN,1,DESC,	! Output error message
		.fab[fab$l_sts],	! with RMS error code
		.fab[fab$l_stv]);	! and secondary code

RETURN;

END;

GLOBAL ROUTINE output_error (fab) : NOVALUE =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS function call concerning the
!	output file.
!
! Input parameters
!
!	fab = Address of block used in the RMS call.
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP fab: REF BBLOCK;			! Define RMS block format

!
!	Output error message for primary output file
!

write_message(msg$_openout,1,output_desc[cli$q_rqdesc],
		.fab[fab$l_sts],	! with RMS error code
		.fab[fab$l_stv]);	! and secondary code

RETURN;

END;

GLOBAL ROUTINE close_error (fab) : NOVALUE =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS close operation concerning the
!	input file.
!
! Input parameters
!
!	fab = Address of block used in the RMS call.
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP
    fab: REF BBLOCK;			! Define RMS block format

BIND
    nam = .fab[fab$l_nam]: BBLOCK;	! Describe NAM block

LOCAL
    desc: VECTOR[2];			! Local string descriptor

!
!	Setup string descriptor describing current input file.
!

desc[0] = .nam[nam$b_rsl];		! Result file name length
desc[1] = .nam[nam$l_rsa];		! Result file name address

!
!	Output error message for primary output file
!

write_message(msg$_closedel,1,desc,
		.fab[fab$l_sts],	! with RMS error code
		.fab[fab$l_stv]);	! and secondary code

RETURN;

END;

END
ELUDOM
