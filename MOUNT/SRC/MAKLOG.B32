MODULE MAKLOG (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Levels 1 & 2
!
! ABSTRACT:
!
!	These routines allocate and hook up the logical name and mounted
!	volume list entries.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Oct-1977  19:30
!
! MODIFIED BY:
!
!	V03-001	STJ0248		Steven T. Jeffreys,	31-Mar-1982
!		- Allow for ASCII "A" characters in a volume name.
!
!	V02-006	STJ0205		Steven T. Jeffreys,	07-Feb-1982
!		Create a local copy of the user specified logical name
!		to prevent it from being stepped on.
!
!	V02-005	LMP0006		L. Mark Pilant,		29-Dec-1981 12:00
!		Interlock the mount list to avoid potential disasters.
!
!	V02-004	ACG0219		Andrew C. Goldstein,	23-Oct-1981  10:48
!		Add concealed device support in MOUNT
!
!	V02-003	STJ0122		Steven T. Jeffreys,	10-Sep-1981
!		Fixed references to the logical name descriptor to use
!		the symbolic offsets.  This ensures that references to
!		the logical name length will be WORD context.
!
!	V02-002	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:38
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';



LITERAL
	PHYS_LENGTH	= 15;		! longest allowable physical name

FORWARD ROUTINE
	LABEL_LENGTH;			! return the length of a volume label

GLOBAL ROUTINE ALLOC_LOGNAME (MODE) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates the logical name and mounted volume list
!	entries from the appropriate storage pools.
!
!
! CALLING SEQUENCE:
!	ALLOC_LOGNAME ()
!
! INPUT PARAMETERS:
!	MODE: 0 to use user-specified logical name
!	      1 to force use of volume name
!
! IMPLICIT INPUTS:
!	MOUNT parser database
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	LOG_ENTRY: address of logical name block
!	MTL_ENTRY: address of MTL block
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	SIZE,				! size of logical name block
	AREA,				! area to allocate from
	UIC;				! process UIC

EXTERNAL
	MOUNT_OPTIONS	: BITVECTOR,	! command options
	LOG_NAME	: BBLOCK,	! user logical name descriptor
	LOG_ENTRY	: REF BBLOCK,	! logical name block
	MTL_ENTRY	: REF BBLOCK;	! MTL block

EXTERNAL ROUTINE
	GET_UIC,			! get process UIC
	ALLOCATE_MEM;			! allocate dynamic memory


! Compute the size of the logical name entry that will be needed.
!

IF .MOUNT_OPTIONS[OPT_LOG_NAME]
AND NOT .MODE
THEN SIZE = .LOG_NAME[DSC$W_LENGTH] + PHYS_LENGTH + 3 + LOG$C_LENGTH + 7 AND NOT 7
ELSE SIZE = VCB$S_VOLNAME+5 + PHYS_LENGTH + 3 + LOG$C_LENGTH + 7 AND NOT 7;

IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
THEN AREA = 1
ELSE AREA = 2;

LOG_ENTRY = ALLOCATE_MEM (.SIZE, .AREA);

LOG_ENTRY[LOG$B_TYPE] = DYN$C_LOG;
LOG_ENTRY[LOG$B_TABLE] =
    (
    IF .MOUNT_OPTIONS[OPT_SYSTEM]
    THEN LOG$C_SYSTEM
    ELSE IF .MOUNT_OPTIONS[OPT_GROUP]
    THEN LOG$C_GROUP
    ELSE LOG$C_PROCESS
    );
UIC = GET_UIC ();
IF .MOUNT_OPTIONS[OPT_GROUP]
THEN LOG_ENTRY[LOG$W_GROUP] = .UIC<16,16>;

! Now allocate the mounted volume list entry.
!

MTL_ENTRY = ALLOCATE_MEM (MTL$C_LENGTH, .AREA);

MTL_ENTRY[MTL$B_TYPE] = DYN$C_MTL;
MTL_ENTRY[MTL$L_LOGNAME] = .LOG_ENTRY;

END;					! end of routine ALLOC_LOGNAME

GLOBAL ROUTINE ENTER_LOGNAME (UCB, VCB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine completes the logical name and mounted volume list
!	entries. It builds the logical name and equivalence strings
!	and hooks up the entries in the appropriate lists.
!
!
! CALLING SEQUENCE:
!	ENTER_LOGNAME (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: UCB of volume being mounted
!	ARG2: VCB of volume being mounted
!
! IMPLICIT INPUTS:
!	MOUNT parser data base
!	LOG_ENTRY: address of logical name block
!	MTL_ENTRY: address of MTL block
!	SLOG_ENTRY: address of logical name block for volume set
!	SMTL_ENTRY: address of MTL block for volume set
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	logical name and MTL entry entered
!
!--

BEGIN

MAP
	UCB		: REF BBLOCK,	! UCB being mounted
	VCB		: REF BBLOCK;	! VCB being mounted

BUILTIN
	INSQUE;

LINKAGE
	LOG_INSLOGN	= JSB (REGISTER = 4, REGISTER = 5) :
			NOPRESERVE (2, 3);

LOCAL
	P,				! string pointer
	C,				! string count
	NAME_DESC	: BBLOCK [DSC$K_S_BLN],	! internal logical name descriptor
	LOG_BUFFER	: VECTOR [63,BYTE], ! logical name buffer
	RVX		: REF BBLOCK,	! pointer to RVT extension
	MOUNT_LIST	: REF BBLOCK;	! address of mount list tail

EXTERNAL
	MOUNT_OPTIONS	: BITVECTOR,	! command options
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	DEVICE_COUNT,			! number of devices specified
	LOG_NAME	: VECTOR,	! logical name descriptor
	PHYS_NAME	: VECTOR,	! physical device name descriptor
	LOG_ENTRY	: REF BBLOCK,	! logical name block
	MTL_ENTRY	: REF BBLOCK,	! MTL block
	SLOG_ENTRY	: REF BBLOCK,	! logical name block for volume set
	SMTL_ENTRY	: REF BBLOCK,	! MTL block for volume set
	SCH$GL_CURPCB	: REF BBLOCK ADDRESSING_MODE (GENERAL),
					! address of our PCB
	IOC$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (GENERAL),
					! system mounted volume list head
	CTL$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (GENERAL),
					! process mounted volume list head
	EXE$GL_FLAGS	: BITVECTOR ADDRESSING_MODE (GENERAL);
					! exec flags longword

EXTERNAL LITERAL
	EXE$V_CONCEALED	: UNSIGNED (6);	! concealed device flag

EXTERNAL ROUTINE
	LOCK_IODB,			! lock the I/O data base
	UNLOCK_IODB,			! unlock the I/O data base
	LOG$INSLOGN	: LOG_INSLOGN ADDRESSING_MODE (ABSOLUTE);
					! insert logical name


! First build the volume logical name table entry.
! Use logical name from command unless:
!	- There is no logical name
!	- It is a disk volume set
!	- More than one device is being mounted, and they are not magtapes.
!
! Get the logical name; either from the command or from the volume label.
!

! Copy the user-specified logical name to local storage.
!

CH$MOVE (.LOG_NAME[0], .LOG_NAME[1], LOG_BUFFER);
NAME_DESC [DSC$W_LENGTH] = .LOG_NAME [0];
NAME_DESC [DSC$B_DTYPE] = 0;
NAME_DESC [DSC$B_CLASS] = 0;
NAME_DESC [DSC$A_POINTER] = LOG_BUFFER;

IF NOT .MOUNT_OPTIONS[OPT_LOG_NAME]
OR .SLOG_ENTRY NEQ 0
OR (.DEVICE_COUNT NEQ 1 AND (NOT .DEVICE_CHAR[DEV$V_SQD]))
THEN
    BEGIN
    IF .DEVICE_CHAR[DEV$V_SQD]
    THEN P = UPLIT BYTE ('TAPE$')
    ELSE P = UPLIT BYTE ('DISK$');

    C = LABEL_LENGTH (VCB$S_VOLNAME, VCB[VCB$T_VOLNAME]);
    NAME_DESC[DSC$W_LENGTH]  = .C + 5;
    NAME_DESC[DSC$A_POINTER] = LOG_BUFFER;
    CH$COPY (5, .P, .C, VCB[VCB$T_VOLNAME], 0, .C+5, LOG_BUFFER);
    END;

! Now build the logical and physical names in the logical name block as
! counted strings.
!

C = .PHYS_NAME[0]+1;
IF .EXE$GL_FLAGS[EXE$V_CONCEALED]
THEN
    CH$COPY (1, NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$A_POINTER],
	     1, C, 1, UPLIT ('_'), .PHYS_NAME[0], .PHYS_NAME[1],
	     0, .NAME_DESC[DSC$W_LENGTH] + PHYS_LENGTH + 3, LOG_ENTRY[LOG$T_NAME])
ELSE
    CH$COPY (1, NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$A_POINTER],
	     1, PHYS_NAME[0], .PHYS_NAME[0], .PHYS_NAME[1],
	     0, .NAME_DESC[DSC$W_LENGTH] + PHYS_LENGTH + 3, LOG_ENTRY[LOG$T_NAME]);

! Hook up the entries. We point the UCB pointer in the logical name block
! such that it points to an offset preceding the logical name pointer in the
! MTL block which is the same as the offset location of the logical name pointer
! in a mailbox UCB. (Got that?) This causes the logical name deletion logic
! to clear the MTL's logical name pointer if the logical name is deleted,
! just as it does when a mailbox logical name is deleted.
!

LOG_ENTRY[LOG$L_MBXUCB] = .MTL_ENTRY - $BYTEOFFSET (UCB$L_LOGADR)
				     + $BYTEOFFSET (MTL$L_LOGNAME);
MTL_ENTRY[MTL$L_UCB] = .UCB;
LOG$INSLOGN (.SCH$GL_CURPCB, .LOG_ENTRY);

LOCK_IODB ();				! lock the mount list

IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
THEN MOUNT_LIST = IOC$GQ_MOUNTLST[1]
ELSE MOUNT_LIST = CTL$GQ_MOUNTLST[1];
INSQUE (.MTL_ENTRY, ..MOUNT_LIST);

UNLOCK_IODB ();				! unlock the mount list

! Now build the volume set logical name if we are mounting volume 1 of a
! disk volume set.
!

IF .SLOG_ENTRY NEQ 0
THEN
    BEGIN

! Get the logical name; either from the command or from the volume label.
!

    ! Copy the user-specified logical name to local storage.
    !

    CH$MOVE (.LOG_NAME[0], .LOG_NAME[1], LOG_BUFFER);
    NAME_DESC [DSC$W_LENGTH] = .LOG_NAME [0];
    NAME_DESC [DSC$B_DTYPE] = 0;
    NAME_DESC [DSC$B_CLASS] = 0;
    NAME_DESC [DSC$A_POINTER] = LOG_BUFFER;

    IF NOT .MOUNT_OPTIONS[OPT_LOG_NAME]
    THEN
	BEGIN
	IF .DEVICE_CHAR[DEV$V_SQD]
	THEN P = UPLIT BYTE ('TAPE$')
	ELSE P = UPLIT BYTE ('DISK$');

	RVX = .BBLOCK [.VCB[VCB$L_RVT], RVT$L_RVX];
	C = LABEL_LENGTH (RVX$S_STRUCNAME, RVX[RVX$T_STRUCNAME]);
	NAME_DESC[DSC$W_LENGTH] = .C + 5;
	NAME_DESC[DSC$A_POINTER] = LOG_BUFFER;
	CH$COPY (5, .P, .C, RVX[RVX$T_STRUCNAME], 0, .C+5, LOG_BUFFER);
	END;

! Now build the logical and physical names in the logical name block as
! counted strings.
!

    C = .PHYS_NAME[0]+1;
    IF .EXE$GL_FLAGS[EXE$V_CONCEALED]
    THEN
	CH$COPY (1, NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$A_POINTER],
		 1, C, 1, UPLIT ('_'), .PHYS_NAME[0], .PHYS_NAME[1],
		 0, .NAME_DESC[DSC$W_LENGTH] + PHYS_LENGTH + 3, SLOG_ENTRY[LOG$T_NAME])
    ELSE
	CH$COPY (1, NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$W_LENGTH], .NAME_DESC[DSC$A_POINTER],
		 1, PHYS_NAME[0], .PHYS_NAME[0], .PHYS_NAME[1],
		 0, .NAME_DESC[DSC$W_LENGTH] + PHYS_LENGTH + 3, SLOG_ENTRY[LOG$T_NAME]);

! Hook up the entries. We point the UCB pointer in the logical name block
! such that it points to an offset preceding the logical name pointer in the
! MTL block which is the same as the offset location of the logical name pointer
! in a mailbox UCB. (Got that?) This causes the logical name deletion logic
! to clear the MTL's logical name pointer if the logical name is deleted,
! just as it does when a mailbox logical name is deleted.
!

    SLOG_ENTRY[LOG$L_MBXUCB] = .SMTL_ENTRY - $BYTEOFFSET (UCB$L_LOGADR)
				 	+ $BYTEOFFSET (MTL$L_LOGNAME);
    SMTL_ENTRY[MTL$L_UCB] = .UCB;
    SMTL_ENTRY[MTL$V_VOLSET] = 1;	! identify as a volume set entry
    LOG$INSLOGN (.SCH$GL_CURPCB, .SLOG_ENTRY);

    LOCK_IODB ();			! lock the mount list

    IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
    THEN MOUNT_LIST = IOC$GQ_MOUNTLST[1]
    ELSE MOUNT_LIST = CTL$GQ_MOUNTLST[1];
    INSQUE (.SMTL_ENTRY, ..MOUNT_LIST);

    UNLOCK_IODB ();			! unlock the mount list

    END;

END;					! end of routine ENTER_LOGNAME

ROUTINE LABEL_LENGTH (STR_LENGTH, STR_TEXT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine will return the length of a given string.
!	Trailing blanks at the end of the string are not counted
!	as part of the string.
!
!	NOTE THAT NO VOLUME MAY HAVE A VOLUME LABEL WITH TRAILING BLANKS.
!
!
! CALLING SEQUENCE:
!	LABEL_LENGTH (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: Input string length
!	ARG2: Input string address
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	STR_TEXT	: REF VECTOR [,BYTE];	! Input string

LOCAL
	PTR		: LONG;			! Pointer to current char.

! Starting at the end of the string, decrement the string length
! until a nonblank character is found, or the beginning of the string
! is encountered.
!

PTR = .STR_LENGTH;
WHILE (.PTR GTR 0) AND (.STR_TEXT [.PTR-1] EQL %ASCII' ') DO
    PTR = .PTR - 1;

RETURN (.PTR)
END;

END
ELUDOM
