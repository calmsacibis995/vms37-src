MODULE ALLOCM (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Levels 1 & 2
!
! ABSTRACT:
!
!	This routine allocates dynamic memory from the selected allocation pool.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  19-Oct-1977 8:49
!
! MODIFIED BY:
!
!	V02-001	ACG0175		Andrew C. Goldstein,	4-Jun-1980  20:16
!		Release I/O database lock before error exit
!
!	V02-000	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:37
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';

GLOBAL ROUTINE ALLOCATE_MEM (SIZE_NEEDED, AREA) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates dynamic memory from the selected allocation pool.
!
!
! CALLING SEQUENCE:
!	ALLOCATE_MEM (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: size needed in bytes
!	ARG2: code of area to allocate from:
!		0 = non-paged system pool
!		1 = paged system pool
!		2 = process allocation region
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of block allocated
!
! SIDE EFFECTS:
!	memory allocated, zeroed, and size word inited
!
!--

BEGIN

BUILTIN
	TESTBITSC;

LINKAGE
	EXE_ALLOC0	= JSB :
			NOPRESERVE (3, 4, 5)
			GLOBAL (SIZE = 1, ADDRESS = 2),

	EXE_ALLOC1	= JSB (REGISTER = 3) :
			NOPRESERVE (4, 5)
			GLOBAL (SIZE = 1, ADDRESS = 2);

LOCAL
	STATUS,				! status return of allocator
	BLOCK_SIZE,			! local copy of size allocated
	BLOCK_ADDRESS	: REF VECTOR [,WORD]; ! local copy of address

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CTL$GQ_ALLOCREG	: ADDRESSING_MODE (ABSOLUTE);
					! process allocation region listhead

EXTERNAL ROUTINE
	UNLOCK_IODB;			! unlock I/O data base

BEGIN					! nested block to avoid scope conflicts

GLOBAL REGISTER
	SIZE		= 1,		! rounded up allocation size
	ADDRESS		= 2 : REF VECTOR [,WORD]; ! address returned by exec routines

EXTERNAL ROUTINE
	EXE$ALONONPAGED	: EXE_ALLOC0 ADDRESSING_MODE (ABSOLUTE),
	EXE$ALOPAGED	: EXE_ALLOC0 ADDRESSING_MODE (ABSOLUTE),
	EXE$ALLOCATE	: EXE_ALLOC1 ADDRESSING_MODE (ABSOLUTE);


! Simply compute the size needed rounded up to the next quadword and call the
! appropriate exec allocation routine.
!

SIZE = .SIZE_NEEDED;

STATUS = (
CASE .AREA FROM 0 TO 2 OF
SET
    [0]:	EXE$ALONONPAGED ();
    [1]:	EXE$ALOPAGED ();
    [2]:	EXE$ALLOCATE (CTL$GQ_ALLOCREG);
TES
);

! Copy the block size and address into locals to dodge the MOVC5.
!

BLOCK_SIZE = .SIZE;
BLOCK_ADDRESS = .ADDRESS;
END;

IF NOT .STATUS
THEN
    BEGIN
    IF TESTBITSC (CLEANUP_FLAGS[CLF_UNLOCKDB])
    THEN UNLOCK_IODB ();
    ERR_EXIT (SS$_INSFMEM);
    END;

CH$FILL (0, .BLOCK_SIZE, .BLOCK_ADDRESS);
BLOCK_ADDRESS[4] = .BLOCK_SIZE;
RETURN .BLOCK_ADDRESS;

END;					! end of routine ALLOCATE_MEM

GLOBAL ROUTINE DEALLOCATE_MEM (ADDRESS, AREA) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates dynamic memory to the selected allocation pool.
!
!
! CALLING SEQUENCE:
!	DEALLOCATE_MEM (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of block to deallocate
!	ARG2: code of area to deallocate to:
!		0 = non-paged system pool
!		1 = paged system pool
!		2 = process allocation region
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	memory deallocated
!
!--

BEGIN

MAP
	ADDRESS		: REF VECTOR [,WORD];

LINKAGE
	EXE_DEALLOC0	= JSB (REGISTER = 0) :
			NOPRESERVE (2, 3, 4, 5),

	EXE_DEALLOC1	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 3) :
			NOPRESERVE (2, 4, 5);

EXTERNAL
	CTL$GQ_ALLOCREG	: ADDRESSING_MODE (ABSOLUTE);
					! process allocation region listhead

EXTERNAL ROUTINE
	EXE$DEANONPAGED	: EXE_DEALLOC0 ADDRESSING_MODE (ABSOLUTE),
	EXE$DEAPAGED	: EXE_DEALLOC0 ADDRESSING_MODE (ABSOLUTE),
	EXE$DEALLOCATE	: EXE_DEALLOC1 ADDRESSING_MODE (ABSOLUTE);


! Just return the block to the appropriate area.
!

CASE .AREA FROM 0 TO 2 OF
SET
    [0]:	EXE$DEANONPAGED (ADDRESS[0]);
    [1]:	EXE$DEAPAGED (ADDRESS[0]);
    [2]:	EXE$DEALLOCATE (ADDRESS[0], .ADDRESS[4], CTL$GQ_ALLOCREG);
TES;
END;					! end of routine DEALLOCATE_MEM

END
ELUDOM
