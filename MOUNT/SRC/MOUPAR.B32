MODULE MOUPAR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-003'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Level 1
!
! ABSTRACT:
!
!	This module contains the data base and utilities used to acquire the
!	MOUNT command line from the CLI parser.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-Sep-1977  16:58
!
! MODIFIED BY:
!
!	V03-003	STJ0260	Steven T. Jeffreys,	14-Apr-1982
!		Removed the device list inspection code added in update V02-016
!
!	V03-002	STJ0250		Steven T. Jeffreys,	01-Apr-1982
!		- Check for invalid device name status from $GETDEV.
!
!	V03-001	STJ0238		Steven T. Jeffreys,	17-Mar-1982
!		- Check for CMKRNL privilege if /PROCESSOR=<filename> specified.
!
!	V02-018	STJ0230		Steven T. Jeffreys,	01-Mar-1982
!		- If user is trying to access a non-existant drive,
!		  return a status to indicate such.  This is an improvement
!		  to update #16 to this module.
!		- Close buffer probe protection hole.
!
!	V02-017	STJ0225		Steven T. Jeffreys,	17-Feb-1982
!		Fix incorrect probe of the users input parameters.
!
!	V02-016	STJ0217		Steven t. Jeffreys,	15-Feb-1982
!		Sweep through the device list to make sure that each
!		specified device exists and is file-oriented.
!
!	V02-015	STJ0200		Steven T. Jeffreys,	11-Feb-1982
!		Add support for the /COMMENT qualifier.
!
!	V02-014	STJ0185		Steven T. Jeffreys,	25-Jan-1982
!		- Removed privilege restirctions for /MOUNT_VERIFICATION.
!		- Zero GLOBAL and OWN storage to guaranty restartability.
!
!	V02-013	STJ0173		Steven T. Jeffreys,	13-Jan-1982
!		Modified to use the new $MOUNT interface.
!
!	V02-012	STJ0157		Steven T. Jeffreys,	04-Jan-1982
!		Added support for the /OVERRIDE=LOCK, /NOCACHE, and /MOUNTVER
!		qualifiers.  Changed reference of OPT_SIGNAL to OPT_MESSAGE.
!
!	V02-011	STJ0152		Steven T. Jeffreys,	02-Jan-1981
!		Extensive rewrite to support the $MOUNT system service.
!
!	V02-010	STJ0148		Steven T. Jeffreys,	16-Dec-1981
!		Add a "." to the front of the VOLSET parameter reference.
!
!	V02-009	BLS0080		Benn Schreiber		14-Sep-1981
!		Reference 'BIND' rather than 'VOLSET' for /BIND qualifier
!
!	V02-008	STJ0109		Steven T. Jeffreys,	28-Aug-1981
!		Liberal rewrite as part of $MOUNT support.
!
!	V02-007	STJ0036		Steven T. Jeffreys,	11-May-1981
!		Added support for /ASSIST qualifier.
!
!	V02-006	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:38
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';
LIBRARY	'SYS$LIBRARY:CLIMAC.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';

!+
!
! Impure data area. This area contains the MOUNT parameters extracted from
! the command line by the associated parsing routines.
!
!-


GLOBAL
	GLOBAL_START	: VECTOR [0],	! mark start of global storage
	MOUNT_OPTIONS	: BITVECTOR [64], ! option flags
	PROTECTION,			! value of /PROTECTION switch
	OWNER_UIC,			! value of /OWNER_UIC switch
	USER_UIC,			! value of /USER_UIC switch
	EXTENSION,			! value of /EXTENSION switch
	WINDOW,				! value of /WINDOW switch
	ACCESSED,			! value of /ACCESSED switch
	BLOCKSIZE,			! value of /BLOCK switch
	RECORDSZ,			! value of /RECORD switch
	FID_CACHE,			! space to allocate for file ID cache
	EXT_CACHE,			! space to allocate for extent cache
	QUO_CACHE,			! space to allocate for quota cache
	EXT_LIMIT,			! limit of disk free space to cache
	DEVICE_COUNT,			! number of devices specified
	LABEL_COUNT,			! number of volume labels specified
	VID_STRING	: VECTOR [2],	! descriptor of VISUAL_ID string
	COMMENT_STRING	: VECTOR [2],	! descriptor of COMMENT string
	ACP_STRING	: VECTOR [2],	! descriptor of ACP device or name string
	LOG_NAME	: VECTOR [2],	! descriptor of logical name string
	STRUCT_NAME	: VECTOR [2],	! descriptor of volume set name
					! (value of /BIND qualifier)
	DRIVE_COUNT	: VECTOR [DEVMAX], ! value of /DRIVES switch
	DEVICE_STRING	: VECTOR [DEVMAX*2], ! descriptors of device name strings
	LABEL_STRING	: VECTOR [LABMAX*2], ! descriptors of volume label strings
	GLOBAL_END	: VECTOR [0];	! Mark end of global storage

LITERAL
	COMMENT_SIZE	= 80,			! maximum length of a user comment
	BUFFER_SIZE	= 63,			! maximum length of a string buffer
	ITEM_SIZE	= 12;			! length of each item descriptor

OWN
	OWN_START	: VECTOR [0],			! Mark start of OWN storage
	DEVICE_BUFFER	: BBLOCK [BUFFER_SIZE*DEVMAX],	! Buffer for all device names
	LABEL_BUFFER	: BBLOCK [BUFFER_SIZE*DEVMAX],	! Buffer for all volume labels
	LOG_NAME_BUFFER	: BBLOCK [BUFFER_SIZE],		! Buffer for the volume logical name
	ACP_NAME_BUFFER	: BBLOCK [BUFFER_SIZE],		! Buffer for the user-specified ACP name
	VOLSET_BUFFER	: BBLOCK [BUFFER_SIZE],		! Buffer for the volume set name
	COMMENT_BUFFER	: BBLOCK [COMMENT_SIZE],	! Buffer for the user comment
	TPARSE_BLOCK	: BBLOCK [TPA$K_LENGTH0],	! TPARSE control block
	OWN_END		: VECTOR [0];			! Mark end of OWN storage

LITERAL
	!
	! Define the lengths of the GLOBAL and OWN storage areas.
	!
	GLOBAL_LENGTH	= GLOBAL_END - GLOBAL_START,
	OWN_LENGTH	= OWN_END - OWN_START;

FORWARD ROUTINE
	COPY_ITEM;				! Copy an item to iternal storage

EXTERNAL
	DEVCHAR_DESC	: VECTOR,
	DEVICE_CHAR	: BBLOCK,
	NEWLINE		: BBLOCK,
	CTL$GL_PHD	: ADDRESSING_MODE (GENERAL);

FORWARD
	ACP_KTB		: VECTOR [0],		! TPARSE table label.
	ACP_STB		: VECTOR [0];		! TPARSE table label.

MACRO
	!
	! Symbolic offsets into an item descriptor
	!
	LENGTH		= 0, 0, 16, 0%,		! length of item (in bytes)
	CODE		= 2, 0, 16, 0%,		! item code
	ADDRESS		= 4, 0, 32, 0%,		! item address
	UNUSED		= 8, 0, 32, 0%;		! reserved for future use


GLOBAL ROUTINE CHECK_PARAMS (ITEM_LIST) =
!++
! Functional description:
!
!	This routine is responible for validating the parameters passed
!	by the $MOUNT system service call, and copyin them to internal
!	storage areas.  The validation consits of:
!
!		- Probing each parameter for read access.
!		- Copying each parameter to an internal area.
!		- Sanity checks on the parameter values.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Mount's internal data storage is initialized.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	SS$_NORMAL	: Normal successful completion
!	SS$_ACCVIO	: A parameter was not readable
!	SS$_BADPARAM	: Bad parameter value
!	MOUN$_CONFQUAL	: The command has conflicting qualifiers
!
!--

BEGIN

BUILTIN
	AP,					! Arguement pointer
	PROBER;					! Probe for read access

EXTERNAL ROUTINE
	LIB$TPARSE	: ADDRESSING_MODE (GENERAL);	! Finite state parser

LOCAL
	PHD		: REF BBLOCK,		! Process PHD
	ITEM		: REF BBLOCK,		! Pointer to item list
	PTR		: LONG,			! Temporary storage
	STR_DESCRIPTOR	: REF BBLOCK,		! Temporary descriptor
	MOUNT_FLAGS	: BBLOCK [4],		! Mount option flags
	DENSITY		: LONG,			! Tape volume density
	STATUS		: LONG;			! Store routine status code

!
! Zero the GLOBAL and OWN storage ares to guaranty the
! restartablity of the code.
!
CH$FILL (0, GLOBAL_LENGTH, GLOBAL_START);
CH$FILL (0, OWN_LENGTH, OWN_START);

!
! Initialize the TPARSE control block.
!
TPARSE_BLOCK [TPA$L_COUNT]	= TPA$K_COUNT0;
TPARSE_BLOCK [TPA$L_OPTIONS]	= (TPA$M_BLANKS OR TPA$M_ABBREV);


!***********************************************************************!
!									!
! Interpret each item in the item list.  After doing some		!
! sanity checks for each parameter, copy it to the internal		!
! storage area.  This is done to protect the data from corruption	!
! by malicious users.  The item list is terminated by an item		!
! descriptor with an item code of 0.  Items with a zero length are	!
! rejected.								!
!									!
! Since a given item may appear in the list more than once, we must be	!
! careful to reset any item context for each version of the item.  A	!
! good example of where this is necessary is for the MNT$_DENSITY item.	!
!									!
!***********************************************************************!

MOUNT_OPTIONS = MOUNT_OPTIONS+4 = 0;
STATUS = 1;
DEVICE_COUNT = 0;
LABEL_COUNT = 0;
ITEM = .ITEM_LIST;
IF NOT PROBER (%REF (0), %REF (4), ITEM [0, 0, 32, 0])	! The first 4 bytes must be readable
THEN
    RETURN (SS$_ACCVIO);

WHILE .STATUS AND (.ITEM [CODE] NEQ 0) DO
    BEGIN
    !
    ! PROBE the next 12 bytes, which includes the remainder of this item
    ! descriptor and the first longword of the next one.  If duplicate
    ! items are declared, then the value last encountered will be used.
    ! The exception to this are device names and volume labels.
    !
    ! As new items are defined, a corresponding entry must be made in
    ! the select table defined below.
    !
    IF NOT PROBER (%REF (0), %REF (ITEM_SIZE), .ITEM)
    THEN
	STATUS = SS$_ACCVIO
    ELSE
	BEGIN
	STATUS = (SELECTONE .ITEM [CODE] OF
		      SET
		      !
		      ! The following items are character strings.
		      !
		      [MNT$_DEVNAM]	:(IF .DEVICE_COUNT LSS DEVMAX
					  THEN
					      BEGIN
					      MOUNT_OPTIONS [OPT_DEVICE] = 1;
					      DEVICE_COUNT = .DEVICE_COUNT + 1;
					      DEVICE_STRING [(.DEVICE_COUNT-1)*2] = MIN (.ITEM [LENGTH], BUFFER_SIZE);
					      DEVICE_STRING [((.DEVICE_COUNT-1)*2)+1] = DEVICE_BUFFER+(BUFFER_SIZE*.DEVICE_COUNT);
					      COPY_ITEM (.ITEM, BUFFER_SIZE, .DEVICE_STRING [((.DEVICE_COUNT-1)*2)+1])
					      END
					  ELSE
					      MOUN$_MAXDEV);

		      [MNT$_VOLNAM]	:(IF .LABEL_COUNT LSS DEVMAX
					  THEN
					      BEGIN
					      MOUNT_OPTIONS [OPT_LABEL] = 1;
					      LABEL_COUNT = .LABEL_COUNT + 1;
					      LABEL_STRING [(.LABEL_COUNT-1)*2] = MIN (.ITEM [LENGTH], BUFFER_SIZE);
					      LABEL_STRING [((.LABEL_COUNT-1)*2)+1] = LABEL_BUFFER + (BUFFER_SIZE*.LABEL_COUNT);
					      COPY_ITEM (.ITEM, BUFFER_SIZE, .LABEL_STRING [((.LABEL_COUNT-1)*2)+1])
					      END
					  ELSE
					      MOUN$_MAXLAB);

		      [MNT$_LOGNAM]	: BEGIN
					  MOUNT_OPTIONS [OPT_LOG_NAME] = 1;		! Mark the logical name present
					  LOG_NAME [0] = MIN (.ITEM [LENGTH], BUFFER_SIZE);
					  LOG_NAME [1] = LOG_NAME_BUFFER;
					  STATUS = COPY_ITEM (.ITEM, BUFFER_SIZE, LOG_NAME_BUFFER);
					  !
 					  ! Scan for a trailing or imbedded colon.  If found,
					  ! use the string preceding the colon.
					  !
					  PTR = CH$FIND_CH (.LOG_NAME [0], .LOG_NAME [1], ':');
					  IF NOT CH$FAIL (.PTR)
					  THEN
					      LOG_NAME [0] = .PTR - .LOG_NAME [1];
					  .STATUS
					  END;

		      [MNT$_PROCESSOR]	: BEGIN
					  ACP_STRING [0] = MIN (.ITEM [LENGTH], BUFFER_SIZE);
					  ACP_STRING [1] = ACP_NAME_BUFFER;
					  COPY_ITEM (.ITEM, BUFFER_SIZE, ACP_NAME_BUFFER)
					  END;

		      [MNT$_VOLSET]	: BEGIN
					  STRUCT_NAME [0] = MIN (.ITEM [LENGTH], BUFFER_SIZE);
					  STRUCT_NAME [1] = VOLSET_BUFFER;
					  MOUNT_OPTIONS [OPT_BIND] = 1;
					  COPY_ITEM (.ITEM, BUFFER_SIZE, VOLSET_BUFFER)
					  END;
		      !
		      ! The following items are integer values,
		      ! and are all longwords (4 bytes in length).
		      !

		      [MNT$_FLAGS]	: COPY_ITEM (.ITEM, 4, MOUNT_FLAGS);

		      [MNT$_ACCESSED]	: BEGIN
					  MOUNT_OPTIONS [OPT_ACCESSED] = 1;
					  COPY_ITEM (.ITEM, 4, ACCESSED)
					  END;

		      [MNT$_BLOCKSIZE]	: BEGIN
					  MOUNT_OPTIONS [OPT_BLOCKSIZE] = 1;
					  IF (STATUS = COPY_ITEM (.ITEM, 4, BLOCKSIZE))
					  THEN
					      IF .BLOCKSIZE GTR 65534
					      THEN
						  STATUS = MOUN$_SZTOOBIG;
					  .STATUS
					  END;

		      [MNT$_DENSITY]	: BEGIN	
					  MOUNT_OPTIONS [OPT_DENSITY] = 1;
					  MOUNT_OPTIONS [OPT_DENS_800] = 0;
					  MOUNT_OPTIONS [OPT_DENS_1600] = 0;
					  IF (STATUS = COPY_ITEM (.ITEM, 4, DENSITY))
					  THEN
					      SELECTONE .DENSITY OF
						  SET
						  [800]		: MOUNT_OPTIONS [OPT_DENS_800] = 1;
						  [1600]	: MOUNT_OPTIONS [OPT_DENS_1600] = 1;
						  [6250]	: 1;
						  [OTHERWISE]	: STATUS = MOUN$_BADDENS;
						  TES;
					  .STATUS
					  END;

		      [MNT$_EXTENT]	: BEGIN
					  STATUS = COPY_ITEM (.ITEM, 4, EXT_CACHE);
					  MOUNT_OPTIONS [OPT_NOEXT_C] = 0;
					  MOUNT_OPTIONS [OPT_CACHE] = 0;
					  IF .EXT_CACHE LEQ 0
					  THEN
					      MOUNT_OPTIONS [OPT_NOEXT_C] = 1
					  ELSE
					      MOUNT_OPTIONS [OPT_CACHE] = 1;
					  .STATUS
					  END;

		      [MNT$_FILEID]	: BEGIN
					  STATUS = COPY_ITEM (.ITEM, 4, FID_CACHE);
					  MOUNT_OPTIONS [OPT_NOFID_C] = 0;
					  MOUNT_OPTIONS [OPT_CACHE] = 0;
					  IF .FID_CACHE LEQ 1
					  THEN
					      MOUNT_OPTIONS [OPT_NOFID_C] = 1
					  ELSE
					      MOUNT_OPTIONS [OPT_CACHE] = 1;					  
					  .STATUS					  
					  END;

		      [MNT$_LIMIT]	: COPY_ITEM (.ITEM, 4, EXT_LIMIT);

		      [MNT$_OWNER]	: BEGIN
					  MOUNT_OPTIONS [OPT_OWNER_UIC] = 1;
					  COPY_ITEM (.ITEM, 4, OWNER_UIC)
					  END;

		      [MNT$_VPROT]	: BEGIN
					  MOUNT_OPTIONS [OPT_PROTECTION] = 1;
					  COPY_ITEM (.ITEM, 4, PROTECTION)
					  END;

		      [MNT$_QUOTA]	: BEGIN
					  STATUS = COPY_ITEM (.ITEM, 4, QUO_CACHE);
					  MOUNT_OPTIONS [OPT_NOQUO_C] = 0;
					  MOUNT_OPTIONS [OPT_CACHE] = 0;
					  IF .QUO_CACHE LEQ 0
					  THEN
					      MOUNT_OPTIONS [OPT_NOQUO_C] = 1
					  ELSE
					      MOUNT_OPTIONS [OPT_CACHE] =1;
					  .STATUS
					  END;

		      [MNT$_RECORDSIZ]	: BEGIN
					  MOUNT_OPTIONS [OPT_RECORDSZ] = 1;
					  IF (STATUS = COPY_ITEM (.ITEM, 4, RECORDSZ))
					  THEN
					      IF .RECORDSZ GTR 65534
					      THEN
						  STATUS = MOUN$_SZTOOBIG;
					  .STATUS
					  END;

		      [MNT$_WINDOW]	: BEGIN
					  MOUNT_OPTIONS [OPT_WINDOW] = 1;
					  COPY_ITEM (.ITEM, 4, WINDOW)
					  END;

		      [MNT$_EXTENSION]	: BEGIN
					  MOUNT_OPTIONS [OPT_EXTENSION] = 1;
					  COPY_ITEM (.ITEM, 4, EXTENSION)
					  END;

		      [MNT$_COMMENT]	: BEGIN
					  !
					  ! Append a newline (<cr><lf>) to the front of the comment string.
					  !
					  MOUNT_OPTIONS [OPT_COMMENT] = 1;
					  COMMENT_STRING [0] = MIN (.ITEM [LENGTH], COMMENT_SIZE) + .NEWLINE [DSC$W_LENGTH];
					  COMMENT_STRING [1] = COMMENT_BUFFER;
					  CH$MOVE (.NEWLINE [DSC$W_LENGTH], .NEWLINE [DSC$A_POINTER], COMMENT_BUFFER);
					  COPY_ITEM (.ITEM,
						      COMMENT_SIZE-.NEWLINE [DSC$W_LENGTH],
						      COMMENT_BUFFER+.NEWLINE [DSC$W_LENGTH]
						    )
					   END;

		      [OTHERWISE]	: SS$_BADPARAM;
		      TES
		 );
	ITEM = .ITEM + ITEM_SIZE;	! Point to the next item in the list.
	END;
    END;

!
! If something went awry, stop right now.
!
IF NOT .STATUS
THEN
    RETURN (.STATUS);
!

!***********************************************************************!
!									!
! Now perform some additional sanity checks on each of the parameters.	!
! The ordering of the processing is not important.  Note that some	!
! privilege checking is done here, and explicit "no xxxx privilege"	!
! status codes are returned to make $MOUNT more friendly.		!
!									!
!***********************************************************************!

!
! Set the appropriate mount option flags.
!
MOUNT_OPTIONS [OPT_SYSTEM]	= .MOUNT_FLAGS [MNT$V_SYSTEM];
MOUNT_OPTIONS [OPT_GROUP]	= .MOUNT_FLAGS [MNT$V_GROUP];
MOUNT_OPTIONS [OPT_MOUNTVER]	= NOT .MOUNT_FLAGS [MNT$V_NOMNTVER];
MOUNT_OPTIONS [OPT_NOQUOTA]	= .MOUNT_FLAGS [MNT$V_NODISKQ];
MOUNT_OPTIONS [OPT_NOHDR3]	= .MOUNT_FLAGS [MNT$V_NOHDR3];
MOUNT_OPTIONS [OPT_SHARE]	= .MOUNT_FLAGS [MNT$V_SHARE];
MOUNT_OPTIONS [OPT_WRITE]	= NOT .MOUNT_FLAGS [MNT$V_NOWRITE];
MOUNT_OPTIONS [OPT_NOCACHE]	= .MOUNT_FLAGS [MNT$V_NOCACHE];
MOUNT_OPTIONS [OPT_OVR_LOCK]	= .MOUNT_FLAGS [MNT$V_OVR_LOCK];
MOUNT_OPTIONS [OPT_MESSAGE]	= .MOUNT_FLAGS [MNT$V_MESSAGE];
MOUNT_OPTIONS [OPT_READCHECK]	= .MOUNT_FLAGS [MNT$V_READCHECK];
MOUNT_OPTIONS [OPT_WRITECHECK]	= .MOUNT_FLAGS [MNT$V_WRITECHECK];
MOUNT_OPTIONS [OPT_WTHRU]	= .MOUNT_FLAGS [MNT$V_WRITETHRU];
MOUNT_OPTIONS [OPT_ASSIST]	= NOT .MOUNT_FLAGS [MNT$V_NOASSIST];
MOUNT_OPTIONS [OPT_FOREIGN]	= .MOUNT_FLAGS [MNT$V_FOREIGN];
MOUNT_OPTIONS [OPT_OVR_EXP]	= .MOUNT_FLAGS [MNT$V_OVR_EXP];
MOUNT_OPTIONS [OPT_OVR_ID]	= .MOUNT_FLAGS [MNT$V_OVR_IDENT];
MOUNT_OPTIONS [OPT_OVR_SETID]	= .MOUNT_FLAGS [MNT$V_OVR_SETID];
MOUNT_OPTIONS [OPT_OVR_ACC]	= .MOUNT_FLAGS [MNT$V_OVR_ACCESS];
MOUNT_OPTIONS [OPT_BLOCK]	= 1;

!++
! Parse the ACP name, if one was provided.
!--

IF .ACP_STRING NEQ 0
THEN
    BEGIN
    !
    ! Call TPARSE to interpret this parameter.  All the work
    ! is done by the action routine.
    !
    STR_DESCRIPTOR = ACP_STRING;
    TPARSE_BLOCK [TPA$L_STRINGCNT] = .STR_DESCRIPTOR [DSC$W_LENGTH];
    TPARSE_BLOCK [TPA$L_STRINGPTR] = .STR_DESCRIPTOR [DSC$A_POINTER];
    IF NOT (STATUS = LIB$TPARSE (TPARSE_BLOCK, ACP_STB, ACP_KTB))
    THEN
	RETURN (.STATUS);
    !
    ! If the ACP string is a device or file name, copy it to internal storage.
    !
    IF .MOUNT_OPTIONS [OPT_SAMEACP]
    OR .MOUNT_OPTIONS [OPT_FILEACP]
    THEN
	BEGIN
	ACP_STRING [0] = .STR_DESCRIPTOR [DSC$W_LENGTH];
	ACP_STRING [1] = .STR_DESCRIPTOR [DSC$A_POINTER];
	END;

    END;


!
! If the volume is not being mounted SHARE, GROUP, or SYSTEM,
! then assume that the volume is being mounted NOSHARE (the default).
!
IF  (NOT .MOUNT_OPTIONS [OPT_SHARE])
AND (NOT .MOUNT_OPTIONS [OPT_GROUP])
AND (NOT .MOUNT_OPTIONS [OPT_SYSTEM])
THEN
     MOUNT_OPTIONS [OPT_NOSHARE] = 1;

!
! If the volume is being mounted GROUP, then it 
! cannot be mounted SHARE, or SYSTEM.
!
IF  .MOUNT_OPTIONS [OPT_GROUP]
AND (.MOUNT_OPTIONS [OPT_SHARE] OR .MOUNT_OPTIONS [OPT_SYSTEM])
THEN
    RETURN (MOUN$_CONFQUAL);

!
! If the volume is being mounted SYSTEM, then it 
! cannot be mounted SHARE, or GROUP.
!
IF  .MOUNT_OPTIONS [OPT_SYSTEM]
AND (.MOUNT_OPTIONS [OPT_SHARE] OR .MOUNT_OPTIONS [OPT_GROUP])
THEN
    RETURN (MOUN$_CONFQUAL);

!
! If the volume is being mounted SHARE then it 
! cannot be mounted SYSTEM or GROUP.
!
IF  .MOUNT_OPTIONS [OPT_SHARE]
AND (.MOUNT_OPTIONS [OPT_SYSTEM] OR .MOUNT_OPTIONS [OPT_GROUP])
THEN
    RETURN (MOUN$_CONFQUAL);

!
! Do not allow user to override volume identification if requesting
! a SYSTEM, GROUP or SHARE mount.
!
IF  .MOUNT_OPTIONS [OPT_OVR_ID]
AND (.MOUNT_OPTIONS [OPT_SYSTEM] OR
     .MOUNT_OPTIONS [OPT_GROUP]  OR
     .MOUNT_OPTIONS [OPT_SHARE])
THEN
    RETURN (MOUN$_CONFQUAL);

!
! If no device names have been seen,
! reject the mount request.
!
IF NOT .MOUNT_OPTIONS [OPT_DEVICE]
THEN
    RETURN (SS$_BADPARAM);

!
! If no volume label seen, make sure the user has
! done this on purpose.  If not, exit.
!
IF  NOT .MOUNT_OPTIONS [OPT_LABEL] 		! Indicate volume label seen
AND NOT (.MOUNT_OPTIONS [OPT_OVR_ID]	OR
	 .MOUNT_OPTIONS [OPT_FOREIGN])
THEN
    RETURN (SS$_BADPARAM);

!
! If the device is being mounted /FOREIGN, then many of
! the qualifiers having to do with FILES-11 are not legal.
!
IF  .MOUNT_OPTIONS [OPT_FOREIGN]
AND (.MOUNT_OPTIONS [OPT_ACCESSED]	OR
     .MOUNT_OPTIONS [OPT_UNIQUEACP]	OR
     .MOUNT_OPTIONS [OPT_FILEACP]	OR
     .MOUNT_OPTIONS [OPT_SAMEACP]	OR
     .MOUNT_OPTIONS [OPT_BIND]		OR
     .MOUNT_OPTIONS [OPT_CACHE]		OR
     .MOUNT_OPTIONS [OPT_WINDOW]	OR
     .MOUNT_OPTIONS [OPT_EXTENSION]
    )
THEN
    RETURN (MOUN$_CONFQUAL);

!+
! Perform some preliminary privilege checks.
!-

PHD = .CTL$GL_PHD;					! Get the process header address

IF  .MOUNT_OPTIONS [OPT_GROUP]				! If /GROUP, user must have GRPNAM
AND  NOT .BBLOCK [PHD [PHD$Q_PRIVMSK], PRV$V_GRPNAM]
THEN
    RETURN (SS$_NOGRPNAM);

IF  .MOUNT_OPTIONS [OPT_SYSTEM]				! If /SYSTEM, user must have SYSNAM
AND NOT .BBLOCK [PHD [PHD$Q_PRIVMSK], PRV$V_SYSNAM]
THEN
    RETURN (SS$_NOSYSNAM);

IF  (.MOUNT_OPTIONS [OPT_UNIQUEACP]	OR		! This check must be performed AFTER the /PROCESSOR
     .MOUNT_OPTIONS [OPT_SAMEACP]	OR		! qualifier has been processed.
     .MOUNT_OPTIONS [OPT_FILEACP])
AND NOT .BBLOCK [PHD [PHD$Q_PRIVMSK], PRV$V_OPER]
THEN
    RETURN (SS$_NOOPER);

IF  .MOUNT_OPTIONS [OPT_FILEACP]			! Must have CMK to use
AND NOT .BBLOCK [PHD [PHD$Q_PRIVMSK], PRV$V_CMKRNL]	! a special ACP
THEN
    RETURN (SS$_NOCMKRNL);


!++
! If we get this far, the parameters have passed the
! preliminary checks.  Return a successful status.
!--

SS$_NORMAL

END;						! End of routine CHECK_PARAMETERS

ROUTINE COPY_ITEM (ITEM, DEST_SIZE, DEST_ADDR) =

!++
! Functional description:
!
!	Given an item descriptor block, this routine will copy the
!	data described by the descriptor block to an internal storage
!	area.  The item descriptor block is assumed to already have been
!	probed for read access, and this routine is responsible for
!	probing the actual data for read access before copying it.
!
! Input:
!
!	ITEM		: Address of an ITEM descriptor block.
!	DEST_SIZE	: The size, measured in bytes, of the internal storage area.
!	DEST_ADDR	: The address of the internal storage area.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	SS$_ACCVIO	: The data item could not be read accessed.
!	SS$_BADPARAM	: The data item had a zero length.
!	SS$_BUFFEROVF	: The internal storage area was not large enough
!			  to contain the entire data item.
!	SS$_NORMAL	: The data was successfully copied.
!--

BEGIN						! Start of COPY_ITEM

MAP
	ITEM		: REF BBLOCK;		! Item descriptor block

BUILTIN
	PROBER;					! MACRO-32 PROBE instruction

LOCAL
	LOCAL_LENGTH,
	LOCAL_ADDRESS;

!
! Copy the item length and address to internal storage.
! Reject items with a length of zero or length greater than 512.
!
LOCAL_ADDRESS = .ITEM [ADDRESS];
LOCAL_LENGTH = .ITEM [LENGTH];
IF (.LOCAL_LENGTH LEQ 0) OR (.LOCAL_LENGTH GTR 512)
THEN
    RETURN (SS$_BADPARAM);

!
! Probe the data area for read access.
!
IF NOT PROBER (%REF (0), LOCAL_LENGTH, .LOCAL_ADDRESS)
THEN
    RETURN (SS$_ACCVIO);

!
! Copy the data to the internal storage area. If the data item
! is too large it will be truncated, if it is too small, it will
! be zero-padded to fill the internal storge area.
!
CH$COPY (.LOCAL_LENGTH, .LOCAL_ADDRESS, 0, .DEST_SIZE, .DEST_ADDR);

!
! If the data item was too long to be copied in its entirety,
! return a status code to indicate such.
!
IF .LOCAL_LENGTH GTR .DEST_SIZE
THEN
    RETURN (SS$_BUFFEROVF);

SS$_NORMAL					! Normal exit value

END;						! End of COPY_ITEM

!++
! What follows are the TPARSE table definitions.
!--

!
! Parse /PROCESSOR options, set bits and store name.
!
$INIT_STATE (ACP_STB, ACP_KTB);

$STATE	(,
	('UNIQUE',,,	1^OPT_UNIQUEACP, MOUNT_OPTIONS),
	((DEVICENAME),,,1^OPT_SAMEACP,	 MOUNT_OPTIONS),
	((FILENAME),,,	1^OPT_FILEACP, 	 MOUNT_OPTIONS)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);
!
! Syntax definition for a file name.
!
$STATE	(FILENAME,
	(TPA$_SYMBOL, FILENAME),
	('.', FILENAME),
	(';', FILENAME),
	(TPA$_LAMBDA, TPA$_EXIT)
	);
!
! Syntax definition for a device name.
!
$STATE	(DEVICENAME,
	(TPA$_SYMBOL)
	);

$STATE	(,
	(':')
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);
END
ELUDOM
