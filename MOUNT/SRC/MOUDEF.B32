!
! Require file for MOUNT utility
!
!	Version 'V03-001'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Level 1
!
! ABSTRACT:
!
!	This file contains definitions common to the modules that make up
!	the MOUNT utility.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-Sep-1977  16:27
!
! MODIFIED BY:
!
!	V03-001	STJ0245		Steven T. Jeffreys	04-Apr-1982
!		- Add TIMER_EFN and MOUNT_EFN definitions.
!		- Add DO_IO keyword macro.
!
!	V02-017	STJ0155		Steven T. Jeffreys	02-Jan-1982
!		Added OPT_NOCACHE, OPT_OVR_LOCK, OPT_MESSAGE, OPT_MOUNTVER
!		bit definitons.
!
!	V02-016	STJ0016		Steven T. Jeffreys	30-Aug-1981
!		Added OPT_SIGNAL bit definitions.
!
!	V02-015	STJ0086		Steven T. Jeffreys	05-Aug-1981
!		Changed ERR_EXIT macro to use LIB$STOP.
!
!	V02-014	STJ0035		Steven T. Jeffreys	11-May-1981
!		Added support for the /ASSIST qualifier.
!
!	V02-013	STJ0006		Steven T. Jeffreys	08-Apr-1981
!		Change ERR_EXIT to SIGNAL rather than SIGNAL_STOP.
!		Necessary for operator assisted mount.
!
!	V02-012	ACG35282	Andrew C. Goldstein,	23-Jan-1981  14:12
!		Clean up SCB after ACP start failure
!
!	V02-011	ACG0175		Andrew C. Goldstein,	23-May-1980  14:39
!		Add I/O database lock cleanup flag
!
!	V02-010	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:38
!		Previous revision history moved to MOUNT.REV
!**


!
! Definitions of the option bits produced by the command parser.
!
LITERAL
$EQULST (OPT_,GBL,0,1
	,(DENSITY,)		! /DENSITY switch seen
	,(DENS_800,)		! /DENSITY:800 switch seen
	,(VID,)			! /VISUAL_IDENTIFICATION switch seen
	,(COMMENT,)		! /COMMENT switch seen
	,(NOSHARE,)		! /NOSHARE switch seen
	,(EXPSHARE,)		! /SHARE or /NOSHARE seen explicitly
	,(SHARE,)		! /SHARE switch seen
	,(GROUP,)		! /GROUP switch seen
	,(SYSTEM,)		! /SYSTEM switch seen
	,(WRITE,)		! /WRITE switch seen
	,(UNLOCK,)		! /UNLOCK switch seen
	,(FOREIGN,)		! /FOREIGN switch seen
	,(NOLABEL,)		! /NOLABEL switch seen
	,(EBC_DATA,)		! /EBCDIC:DATA seen
	,(EBC_LABELS,)		! /EBCDIC:LABELS seen
	,(BLOCK,)		! /BLOCK switch seen
	,(BLOCKSIZE,)		! block size specified
	,(PROTECTION,)		! /PROTECTION switch seen
	,(OWNER_UIC,)		! /OWNER_UIC switch seen
	,(USER_UIC,)		! /USER_UIC switch seen
	,(OVR_EXP,)		! /OVERRIDE:EXPIRATION switch seen
	,(OVR_SETID,)		! /OVERRIDE:SETID switch seen
	,(OVR_ID,)		! /OVERRIDE:IDENTIFICATION switch seen
	,(EXTENSION,)		! /EXTENSION switch seen
	,(WINDOW,)		! /WINDOW switch seen
	,(ACCESSED,)		! /ACCESSED switch seen
	,(UNIQUEACP,)		! /PROCESSOR:UNIQUE switch seen
	,(SAMEACP,)		! /PROCESSOR:SAME switch seen
	,(FILEACP,)		! /PROCESSOR:filename switch seen
	,(LOG_NAME,)		! logical name specified
	,(DEVICE,)		! device name seen
	,(LABEL,)		! volume label seen
	,(OVR_PRO,)		! user is overriding volume protection
	,(IS_FILES11,)		! volume is found to be Files-11
	,(IS_FILES11B,)		! volume is found to be Files-11 Structure level 2
	,(READCHECK,)		! /DATACHECK:READ switch seen
	,(WRITECHECK,)		! /DATACHECK:WRITE switch seen
	,(RECORDSZ,)		! /RECORD:value switch seen
	,(OVR_ACC,)		! /OVERRIDE:ACCESSIBILITY
	,(DRIVES,)		! /DRIVES:value switch seen
	,(BIND,)		! /BIND:structure_name switch seen
	,(DO_BIND,)		! volume must be bound into set
	,(NOQUOTA,)		! /NOQUOTA switch seen
	,(DENS_1600,)		! /DENSITY:1600 switch seen
	,(NOHDR3,)		! /NOHDR3 switch seen
	,(CACHE,)		! /CACHE=(EXTENT:n,FILE_ID:n,QUOTA:n) seen
	,(WTHRU,)		! /CACHE=WRITETHROUGH seen
	,(NOEXT_C,)		! /CACHE=NOEXTENT seen
	,(NOFID_C,)		! /CACHE=NOFILE_ID seen
	,(NOQUO_C,)		! /CACHE=NOQUOTA seen
	,(ASSIST,)		! /ASSIST seen
	,(MESSAGE,)		! /MESSAGE seen
	,(NOCACHE,)		! /NOCACHE seen
	,(OVR_LOCK,)		! /OVERRIDE=LOCK seen
	,(MOUNTVER,)		! /MOUNT_VERIFICATION seen
	);
!
! Masks of options legal for disk and tape.
!
LITERAL
	DISK_OPTIONS1 =		! qualifiers legal for disk
	1^OPT_VID		! /VISUAL_IDENTIFICATION switch seen
	OR 1^OPT_COMMENT	! /COMMENT switch seen
	OR 1^OPT_NOSHARE	! /NOSHARE switch seen
	OR 1^OPT_EXPSHARE	! /SHARE or /NOSHARE seen explicitly
	OR 1^OPT_SHARE		! /SHARE switch seen
	OR 1^OPT_GROUP		! /GROUP switch seen
	OR 1^OPT_SYSTEM		! /SYSTEM switch seen
	OR 1^OPT_WRITE		! /WRITE switch seen
	OR 1^OPT_UNLOCK		! /UNLOCK switch seen
	OR 1^OPT_FOREIGN	! /FOREIGN switch seen
	OR 1^OPT_BLOCK		! /BLOCK switch seen
	OR 1^OPT_PROTECTION	! /PROTECTION switch seen
	OR 1^OPT_OWNER_UIC	! /OWNER_UIC switch seen
	OR 1^OPT_USER_UIC	! /USER_UIC switch seen
	OR 1^OPT_OVR_ID		! /OVERRIDE:IDENTIFICATION switch seen
	OR 1^OPT_EXTENSION	! /EXTENSION switch seen
	OR 1^OPT_WINDOW		! /WINDOW switch seen
	OR 1^OPT_ACCESSED	! /ACCESSED switch seen
	OR 1^OPT_UNIQUEACP	! /PROCESSOR:UNIQUE switch seen
	OR 1^OPT_SAMEACP	! /PROCESSOR:SAME switch seen
	OR 1^OPT_FILEACP	! /PROCESSOR:filename switch seen
	OR 1^OPT_LOG_NAME	! logical name specified
	OR 1^OPT_DEVICE		! device name seen
	OR 1^OPT_LABEL,		! volume label seen

	DISK_OPTIONS2 =		! qualifiers legal for disk, second long word
	   1^(OPT_READCHECK-32)	! /DATACHECK:READ switch seen
	OR 1^(OPT_WRITECHECK-32) ! /DATACHECK:WRITE switch seen
	OR 1^(OPT_BIND-32)	! /BIND:structure_name switch seen
	OR 1^(OPT_DO_BIND-32)	! volume must be bound into set
	OR 1^(OPT_NOQUOTA-32)	! /NOQUOTA switch seen
	OR 1^(OPT_CACHE-32)	! /CACHE=(EXTENT:n,FILE_ID:n,QUOTA:n)seen
	OR 1^(OPT_WTHRU-32)	! /CACHE=WRITETHROUGH seen
	OR 1^(OPT_NOEXT_C-32)	! /CACHE=NOEXTENT seen
	OR 1^(OPT_NOFID_C-32)	! /CACHE=NOFILE_ID seen
	OR 1^(OPT_NOQUO_C-32)	! /CACHE=NOQUOTA seen
	OR 1^(OPT_ASSIST-32)	! /ASSIST seen
	OR 1^(OPT_MESSAGE-32)	! /MESSAGE seen
	OR 1^(OPT_NOCACHE-32)	! /NOCACHE seen
	OR 1^(OPT_OVR_LOCK-32)	! /OVERRIDE=LOCK seen
	OR 1^(OPT_MOUNTVER-32),	! /MOUNT_VERIFICATION seen

	TAPE_OPTIONS1 =		! qualifiers legal for tape
	1^OPT_DENSITY		! /DENSITY switch seen
	OR 1^OPT_DENS_800	! /DENSITY:800 switch seen
	OR 1^OPT_VID		! /VISUAL_IDENTIFICATION switch seen
	OR 1^OPT_COMMENT	! /COMMENT switch seen
	OR 1^OPT_NOSHARE	! /NOSHARE switch seen
	OR 1^OPT_EXPSHARE	! /SHARE or /NOSHARE seen explicitly
	OR 1^OPT_WRITE		! /WRITE switch seen
	OR 1^OPT_FOREIGN	! /FOREIGN switch seen
	OR 1^OPT_NOLABEL	! /NOLABEL switch seen
!	OR 1^OPT_EBC_DATA	! /EBCDIC:DATA seen
!	OR 1^OPT_EBC_LABELS	! /EBCDIC:LABELS seen
	OR 1^OPT_BLOCK		! /BLOCK switch seen
	OR 1^OPT_BLOCKSIZE	! block size specified
	OR 1^OPT_PROTECTION	! /PROTECTION switch seen
	OR 1^OPT_OWNER_UIC	! /OWNER_UIC switch seen
!	OR 1^OPT_USER_UIC	! /USER_UIC switch seen
	OR 1^OPT_OVR_EXP	! /OVERRIDE:EXPIRATION switch seen
	OR 1^OPT_OVR_SETID	! /OVERRIDE:SETID switch seen
	OR 1^OPT_OVR_ID		! /OVERRIDE:IDENTIFICATION switch seen
	OR 1^OPT_UNIQUEACP	! /PROCESSOR:UNIQUE switch seen
	OR 1^OPT_SAMEACP	! /PROCESSOR:SAME switch seen
	OR 1^OPT_FILEACP	! /PROCESSOR:filename switch seen
	OR 1^OPT_LOG_NAME	! logical name specified
	OR 1^OPT_DEVICE		! device name seen
	OR 1^OPT_LABEL,		! volume label seen

	TAPE_OPTIONS2 =		! qualifiers legal for tape, second long word
	   1^(OPT_READCHECK-32)	! /DATACHECK:READ switch seen
	OR 1^(OPT_WRITECHECK-32)! /DATACHECK:WRITE switch seen
	OR 1^(OPT_RECORDSZ-32)	! /RECORD: value switch seen
	OR 1^(OPT_DENS_1600-32)	! /DENSITY:1600 switch seen
	OR 1^(OPT_NOHDR3-32)	! /NOHDR3 switch seen
	OR 1^(OPT_OVR_ACC-32)	! /OVERRIDE:ACCESSIBILITY switch seen
!	OR 1^(OPT_DRIVES-32)	! /DRIVES:value switch seen
	OR 1^(OPT_ASSIST-32)	! /ASSIST seen
	OR 1^(OPT_MOUNTVER-32)	! /MOUNT_VERIFICATION seen
	OR 1^(OPT_MESSAGE-32);	! /MESSAGE seen
!
! Masks of option bits to reset at end of disk mount loop.
!

LITERAL
	RESET_OPTIONS1 =
	   0,			! none in first word
	RESET_OPTIONS2 =
	   1^(OPT_OVR_PRO-32)
	OR 1^(OPT_IS_FILES11-32)
	OR 1^(OPT_IS_FILES11B-32)
	OR 1^(OPT_DO_BIND-32);

!
! Option switches for DISMOUNT
!

LITERAL
	$EQULST (OPT_,GBL,0,1
	,(UNLOAD,)		! /UNLOAD switch seen
	,(UNIT,)		! /UNIT switch seen
	);

!
! Status bits used for exit processing.
!
LITERAL
	CLF_DEALLOCATE  = 1,	! DEALLOCATE DEVICE
	CLF_DELAQB	= 2,	! delete AQB
	CLF_DEASSMBX	= 3,	! deassign mailbox
	CLF_DEASSTEMP	= 4,	! deassign temporary channel
	CLF_RELOCK	= 5,	! restore index file write locks
	CLF_DISMOUNT	= 6,	! do full dismount to clean up
	CLF_CLEARVALID	= 7,	! clear volume valid bit on failure
	CLF_LOCKVOLUME	= 8,	! leave volume allocation locked
	CLF_REBUILD	= 9,	! rebuild volume bitmaps
	CLF_REBUILDQUO	= 10,	! rebuild volume set quota file
	CLF_UNLOCKDB	= 11,	! unlock I/O database
	CLF_CLEANSCB	= 12;	! clear dirty bits in SCB
!
! MAXIMUM VARIABLES
!
LITERAL
	DEVMAX	= 16,		!MAXIMUM NUMBER OF DEVICES IN COMMAND
	LABMAX	= 16;		!MAXIMUM NUMBER OF LABELS IN COMMAND

!
! DEFINE LENGTH OF NAME STRING BUFFER
!
LITERAL
	NAMEBUF_LEN = 32;	!LENGTH OF NAME STRING BUFFER
!
! Set processor IPL
!
MACRO
	SET_IPL (LEVEL) =
		BEGIN
		BUILTIN MTPR;
		MTPR (%REF (LEVEL), PR$_IPL)
		END
		%;
!
! Error exit macro.
!
MACRO
	ERR_EXIT (CODE) =
		SIGNAL_STOP (%IF NOT %NULL (CODE) %THEN CODE %ELSE 0 %FI
			     %IF NOT %NULL (%REMAINING) %THEN , %REMAINING %FI)
	%,

	ERR_MESSAGE [] =
		SIGNAL (%REMAINING)
	%;
!
! Macro used to signal fatal errors (internal consistency checks).
!
MACRO
	BUG_CHECK (CODE, TYPE, MESSAGE) =
		BEGIN
		BUILTIN BUGW;
		EXTERNAL LITERAL %NAME('BUG$_',CODE);
		BUGW (%NAME('BUG$_',CODE) OR 4)
		END
		%;
!
! Macro to call the change mode to kernel system service.
! Macro call format is "KERNEL_CALL (ROUTINE, ARG1, ARG2, ... )".
!
MACRO
	KERNEL_CALL (R) =
	    BEGIN
	    EXTERNAL ROUTINE SYS$CMKRNL : ADDRESSING_MODE (ABSOLUTE);
	    BUILTIN SP;
	    SYS$CMKRNL (R, .SP, %LENGTH-1
			%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)
	    END%;
!
! Macro to call the change mode to exec system service.
! Macro call format is "EXEC_CALL (ROUTINE, ARG1, ARG2, ... )".
!
MACRO
	EXEC_CALL (R) =
	    BEGIN
	    EXTERNAL ROUTINE SYS$CMEXEC : ADDRESSING_MODE (ABSOLUTE);
	    BUILTIN SP;
	    SYS$CMEXEC (R, .SP, %LENGTH-1
			%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)
	    END%;
!
! Macro to generate a string and descriptor.
!

MACRO
	DESCRIPTOR (STRING) =
	    UPLIT (%CHARCOUNT (STRING), UPLIT BYTE (STRING))%;

!
! Macro to declare parameter list for TPARSE action routines.
!
MACRO
	TPARSE_ARGS (NAME) =
		BUILTIN AP;
		BIND NAME = AP : REF BBLOCK;
		%;
!
! Structure for all MDL defined blocks.
!
STRUCTURE
	BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK+O)<P,S,E>,

	BBLOCKVECTOR [I, O, P, S, E; N, BS] =
		[N*BS]
		((BBLOCKVECTOR+I*BS)+O)<P,S,E>;

!
! Define a symbol to represent the common event flag that will be
! specified (if necessary) for any I/O done within the $MOUNT and
! $DISMOU system services.
!
LITERAL
	TIMER_EFN	= 25,		! A reserved, system event flag
	MOUNT_EFN	= 26;		! A reserved, system event flag

!
! Define a macro that will be used by any and all modules in $MOUNT that
! want to do synchronous I/O via a direct $QIO.  The macro is a convenient
! way to provide a $QIO-like interface to a routine that can tolerate some
! bizarre (mis)use of the event flags by the user.
!
KEYWORDMACRO
	DO_IO	(EFN    = MOUNT_EFN,	! Event flag to set on I/O completion (value)
		 CHAN   = 0,		! Channel to device (value)
		 FUNC   = 0,		! I/O function code (value)
		 IOSB   = 0,		! I/O status block  (address)
		 ASTADR = 0,		! Ast routine (address)
		 ASTPRM = 0,		! Ast parameter (value)
		 P1     = 0,		! Optional device/function parameter
		 P2	= 0,		!		ditto
		 P3	= 0,		!		ditto
		 P4	= 0,		!		ditto
		 P5	= 0,		!		ditto
		 P6	= 0		!		ditto
		) =
	BEGIN
	EXTERNAL ROUTINE
		COMMON_IO	: ADDRESSING_MODE (GENERAL);
	COMMON_IO (EFN,CHAN,FUNC,IOSB,ASTADR,ASTPRM,P1,P2,P3,P4,P5,P6)
	END
	%;
