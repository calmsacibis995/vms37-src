MODULE TBKBAS (	IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG (DBG)
!
!++
! FUNCTIONAL DESCRIPTION:
!	Does TRACEback when a program causes an exception of 
!	sufficiently high severity level and the exception
!	is not fielded by anyone else (namely by itself of
!	by DEBUG).
!
! Version:	1.01
!
! History:
!	Author:
!		Carol Peters, 11 January 1978 : Version 01
!
!	Modified by:
!		Dale Roedger, 15 June 1978: Version 17
!
! Revision history:
!
!	02	17-jan-78	KGP	-Changed call parameters, and
!					 added code to do the traceback
!					 in non-symbolic form.
!	03	18-jan-78	KGP	-Exception name is printed using
!					 system message formatter
!	04	19-JAN-78	KGP	-Output is now properly formatted.
!	05	26-jan-78	KGP	-Now TRACEBACK does not $EXIT
!					 under any circumstances.  This is
!					 so that we can SS$_RESIGNAL
!					 the original exception so that someone
!					 else (the 'catch-all' handler) has
!					 to ultimately decide what to do 
!					 about it.
!	06	22-feb-78	KGP	-Output is to SYS$..., not DBG$...
!					 We put out a separate message for
!					 "traceback follows...".
!	07	24-feb-78	KGP	-We always return the exception name
!					 now so that the EXIT/CONTINUE
!					 decision is made elsewhere.
!					-Some diddling to make the severity
!					 level of the TRACEBACK message the
!					 same as the level of the exception.
!	08	24-feb-78	KGP	-Formal parameter is now signal array
!					 address rather than exception name
!					 so we can PUT_MESSAGE rather than
!					 doing all that ourselves.
!	09	28-feb-78	KGP	-Changed all error returns in TRACE
!					 to be EXITs.  Now, if TRACE returns
!					 at all to the assembly-language TRACE
!					 code, all must have gone well.
!					-Added code to ensure that we don't
!					 try to 'trace' an overwritten stack.
!					-We don't re-map the symbol table
!					 on successive TRACEbacks.
!					-We now set up our output based on how
!					 PUTMSG did it since it looks after
!					 [not]creating the SYS$OUTPUT/SYS$ERROR
!					 files, etc.
!	10	01-mar-78	KGP	-Took out all initialization of
!					 FABs/RABs, and we now don't do OPEN or
!					 CONNECT.  We let PUTMSG setup everything.
!	11	2-mar-78	KGP	-Beginning exception_type for
!					 FTN PC correlation is now decided
!					 in BAS (is no longer local to DPC)
!	12	7-mar-78	KGP	-Exception_type is always forced to
!					 TRAP_EXC after the first stack
!					 frame symbolization.
!					-We now call TBK$PUTMSG to put out
!					 error messages.
!	13	8-mar-78	KGP	-FIND_DST now returns an indication of
!					 whether the traceback will be
!					 symbolic or not.
!					-All of TRACE is now separate from
!					 DEBUG.  It has its own REQUIRE files.
!	14	13-mar-78	KGP	-Took out fake messages now that
!					 TRACEMSG is installed into the system.
!					-We now subtract 2 from the given signal
!					 arg count field so that PUTMSG doesn't
!					 try to print messages that don't exist.
!	15	27-mar-78	KGP	-added IS_EXCEPTION so that we can now
!					 start off TBK$GL_EXC_TYPE correctly.
!					-TBK$PUTMSG changed to TBK$FAKE_MSG, and
!					 DEBUG's DBG$PUTMSG added, changed slightly,
!					 and renamed TBK$PUT_MSG.
!	16	26-APR-78	DAR	Modified require and library directives
!					for native mode.
!	17	15-JUN-78	DAR	Changed all DBG$ symbols to TBK$.
!	18	30-Oct-79	JBD	Removed the "Unknown DST record" message
!	19	3-DEC-79	JBD	Added stmt number support.
! 1.01	30-Jan-80	JBD	Made module and routine names longer than 15
!				characters appear on different lines
! 3.01	03-Mar-82	 RT	Passed in file channel number of image file
!				so it doesn't have to be opened again to
!				read the DST.
!--

! TABLE OF CONTENTS
!
FORWARD ROUTINE	IS_EXCEPTION,		! See if a given exception name
					! is TRAP_EXC or FAULT_EXC type.
		out_traceback : NOVALUE,! display line of traceback information
		TBK$DO_TRACEB;		! traceback user program after error

!
! REQUIRE FILES:
!
LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:TBKPCT.REQ';
REQUIRE 'SRC$:TBKRST.REQ';
REQUIRE 'SRC$:TBKGEN.REQ';
REQUIRE 'SRC$:TBKSER.REQ';
REQUIRE 'LIB$:TRACEMSG.REQ';

EXTERNAL
	TBK$GL_EXC_TYPE,		! Initial FAULT/TRAP type for PC correlation.
	TBK$MODULE_CS : CS_POINTER,
	TBK$ROUTINE_CS : CS_POINTER,
	TBK$GL_STMT,
	TBK$GL_LINE,
	TBK$REL_PC,
	TBK$MODULE_DST : REF DST_RECORD,

	tbk$gl_outprab: $RAB_DECL;		! RAB FOR 'OUTPUT'

EXTERNAL ROUTINE
	tbk$fake_msg : NOVALUE,		! write out fake traceback messages.
	tbk$put_msg,			! write out system-generated messages.
	tbk$fao_put,			! Format into output buffer.
	tbk$out_put : NOVALUE,		! Write out the output buffer.
	TBK$IO_SETUP,			! Set up for PUTMSG-type I/O.
	TBK$SYMBOLIZE : NOVALUE,
	tbk$find_dst;			! finds and maps in the DST for the image

!
! Diagnositic output control
!
LITERAL
	TBK_BAS1	= 0,		! print out input parameters
	TBK_BAS2	= 0,		! List off the entire DST.
	TBK_BAS3	= 0,		! Output during stack unwinding
	TBK_BAS4	= 0;		! Error messages.

%IF TBK_BAS2
%THEN
FORWARD ROUTINE
	pr_cs : novalue,
	LIST_DST;

EXTERNAL ROUTINE
	tbk$get_nxt_dst;		! Make successive DSTs available.
%FI

MACRO
	CFP$L_HANDLER	= 0, 0, 32, 0%,
	CFP$L_OLD_FP	= 12, 0, 32, 0%,
	CFP$L_RETURN_PC	= 16, 0, 32, 0%;

GLOBAL ROUTINE tbk$do_traceb (  imgfilchan,
				file_name,
				img_header_blk,
				symtab_sec_bnds,
				signal_array,
				first_fp,
				current_fp,
				current_pc) =

!++
! Functional description:
!	Call PUTMSG to output the reason why TRACE was called.
!	Then maps the DST into P0 space and used it so
!	give a symbolic stack dump of where the program
!	was when it 'faulted'.  
!	We then return leaving ourselves and the DST mapped
!	in so that on subsequent invocations of TRACE we can
!	avoid the re-mapping overhead.
!
!	All output is to SYS$ERROR and SYS$OUTPUT.
!
! Formal parameters:
!	imgfilchan	- the channel number that the image file is
!			  open on.
!	file_name	- a counted string to the file specification of
!			  the image file.
!	img_header_blk	- address of a byte block containing the image
!			  header data needed to find DST and GST data for
!			  the image.
!	symtab_sec_bnds	-address of a 2 longword vector (in the bootstrap)
!			 where the symbol table bounds are stored so that
!			 we don't need to map in the DST on successive TRACEbacks.
!	signal_array	-address of the 'signal array' generated for the
!			 exception that causes TRACEback.
!	first_fp	-FP of first frame NOT to be traced.
!			 (i.e. last frame we look at)
!	current_fp	- current value of user FP
!	current_pc	- current value of user PC
!
! Implicit inputs:
!	PUTMSG creates a process logical name (SYS$PUTMSG), 
!	the translation of which returns an encoding
!	of the ISI numbers for SYS$ERROR and SYS$OUTPUT.
!	We stuff these ISIs into our own RABs so that
!	we don't worry about the SYS$ERROR/SYS$OUTPUT distinction
!	and so that we avoid opening the channels on successive
!	invocations.
!
! Output parameters:
!	none
!
! Implicit outputs:
!	The 2-longword vector in the bootstrap which points to the
!	beginning and ending of the symbol table gets filled in
!	with the mapped addresses of where we map the symbol table.
!
! Routine value:
!	Either an EXIT is done, or this routine returns
!	the exception name which caused TRACEback in the first place.
!
! Side effects:
!	The DST is mapped into P0 space. A number of lines are output to
!	logical device SYS$OUTPUT.  If SYS$ERROR is different from
!	SYS$OUTPUT, the same output goes to SYS$ERROR.
!
!--

	BEGIN
	MAP
		symtab_sec_bnds : ref vector[,long],
		signal_array : ref vector[,long],
		FILE_NAME : REF VECTOR[,BYTE];
	MAP
		CURRENT_FP : REF BLOCK[,BYTE],
		CURRENT_PC : REF BLOCK[,BYTE];
	LOCAL
		symbolic,		! Flag.  1 => symbolic traceback,
					!  	 0 => non-symbolic.
		exceptn_name,
		blank : CS_POINTER,
		status;

	!++
	! Report on the cause of the exception, and
	! let PUTMSG open our output channel(s) for us.
	! If this fails, we must punt.
	!--

	status = tbk$put_msg(.signal_array);

	IF NOT .status
	THEN
		BEGIN
		$EXIT( code = .status);
		END;

	! Set up to do I/O by relying on the fact that
	! PUTMSG has already sorted out the problems
	! of where SYS$OUTPUT and SYS$ERROR actually go to.

	tbk$io_setup();

%if tbk_bas1
%then
	$fao_tt_out ('tracing back - we got this far...');
	$fao_tt_out('rab_isi has value !XW',.tbk$gl_outprab[rab$w_isi]);

	! Print out the input parameters.

	$FAO_TT_OUT('file_name is !UB: !AC',.file_name[0],.file_name);
	$FAO_TT_OUT('image header block starts at !XL',.img_header_blk);
	$fao_tt_out('current FP=!XL, PC=!XL, first FP=!XL',
		.current_fp,.current_pc,.first_fp);
	$fao_tt_out('signal array is at !XL',.signal_array);
	$FAO_TT_OUT('exception name is !XL',.signal_array[1]);
%FI

	! Try to locate and map in the DST.
	! If this doesn't work we
	! produce a non-symbolic TRACEback.

	symbolic = tbk$find_dst ( .imgfilchan,
			.file_name, .img_header_blk, .symtab_sec_bnds);

	! Pick the exception name out of the signal array
	! so that we then use its severity to print the
	! standard TRACEback message.  This is done so that
	! the levels of the first message and the "trace follows..."
	! message is the same - for consistency and so that
	! the two messages go to the same channel(s).
	! The message reflects the [non-]symbolic indication passed
	! back by FIND_DST.

	exceptn_name = .signal_array[1];

	! Pick up the message number and force the
	! severity level to match.

	symbolic = (if .symbolic then TBK$_TRACEBACK else TBK$_STACKDUMP);
	symbolic = .symbolic + .exceptn_name<0,3>;

	! Put out the message to SYS$ERROR and SYS$OUTPUT.

	tbk$fake_msg(.symbolic,0);

%IF TBK_BAS2
%THEN
	tbk$fao_put( uplit( %ascic '(%DEBUG-!XL-TRACEBACK, symbolic stack dump follows)'),.symbolic);
	tbk$out_put();
	LIST_DST();
%FI
	! See if there are any active call frames.
	! We can't TRACE anything if either the stack has
	! been overwritten or if the image has returned
	! to the bootstrap.

	IF( .FIRST_FP LEQA .CURRENT_FP )
	THEN
		tbk$fake_msg(TBK$_NOCALLS,0)
	ELSE
		BEGIN

		! Print the standard TRACE heading.

		tbk$fao_put (uplit (%ascic 
'module name     routine name                     line      rel PC    abs PC!/'));
		tbk$out_put();
		END;

	! For FORTRAN PC correlation, we need to set
	! TBK$GL_EXC_TYPE to either FAULT_EXC or TRAP_EXC
	! exception type so that DPC can come up with the best
	! %LINE symbolization for the PC.  We assume the latter
	! and let IS_EXCEPTION cover the exceptions.
  
	TBK$GL_EXC_TYPE = TRAP_EXC;
	IF( IS_EXCEPTION(.EXCEPTN_NAME) )
	THEN
		TBK$GL_EXC_TYPE = FAULT_EXC;

	! Loop printing out each active frame until we have
	! 'unwound' to the frame set up by the DEBUG bootstrap
	! when the user image was called in the first place.

	WHILE	(.first_fp GTRA .current_fp)
	DO	BEGIN

%IF TBK_BAS3
%THEN
	$fao_tt_out('FP = !XL, PC = !XL',.CURRENT_FP,.CURRENT_PC);
%FI
		TBK$SYMBOLIZE(.CURRENT_PC);

		! display current module/routine/line/PC
		!
		out_traceback	(.tbk$module_cs,
				 .tbk$routine_cs,
				 .tbk$gl_line,
				 .tbk$gl_stmt,
				 .tbk$rel_pc,
				 .current_pc
				);


		! For FORTRAN pc-to-line symbolizations, it never
		! makes sense for any frame other than the first
		! to be of 'match' type FAULT_EXC.

		TBK$GL_EXC_TYPE = TRAP_EXC;

		! Set FP and PC to that of previous frame, making
		! sure not to get fooled by an overwritten stack.
		! i.e. insist that the previous frame is 'above'
		! the supposed current one.

		IF( NOT .current_fp LSSA .current_fp[ CFP$L_OLD_FP ] )
		THEN
			BEGIN
			tbk$fake_msg(tbk$_badstack,0);
			EXITLOOP;
			END;

		current_pc = .current_fp[ cfp$l_return_pc ];
		CURRENT_FP = .CURRENT_FP[ CFP$L_OLD_FP ];
		END;

	! Only OK return point.
	! We return the exception name we were passed
	! so that the TRACE startup routine can
	! decide what to do about it.

	RETURN(.EXCEPTN_NAME);
	END;

ROUTINE	out_traceback	(mod_nam,
			 lab_nam,
			 line_num,
			 stmt_num,
			 rel_pc,
			 abs_pc) : NOVALUE =	! outputs a line of traceback
!++
!
!	Functional Description:
!
!		Outputs a line (or two) of traceback information.
!
!	Formal Parameters:
!
!		MOD_NAM:	address of module name counted string
!		LAB_NAM:	address of label (routine) name CS
!		LINE_NUM:	line number matching the PC
!		STMT_NUM:	statement number within the line
!		REL_PC:		PC relative to label (routine)
!		ABS_PC:		PC matching the line number
!
!	Implicit Inputs:
!
!		File(s) have been opened already....
!
!	Implicit Outputs:
!
!		Output to file(s)...
!
!	Routine Value:
!
!		NOVALUE
!
!	Side Effects:
!
!		Output via TBK$FAO_PUT and TBK$OUT_PUT.
!
!--

BEGIN	MAP	mod_nam	: CS_POINTER,
		lab_nam	: CS_POINTER;

	LOCAL	string_ptr    : CS_POINTER;
	
	BIND	null_string = UPLIT BYTE (0);


	! Print the module name, if we have one

	string_ptr = (IF .mod_nam NEQ 0 THEN .mod_nam ELSE null_string);

	tbk$fao_put (UPLIT (%ASCIC '!15AC '), .string_ptr);

	string_ptr = (IF .lab_nam NEQ 0 THEN .lab_nam ELSE null_string);

	IF .string_ptr[0] GTRU 31
	THEN	BEGIN	tbk$fao_put (UPLIT (%ASCIC '!64AC!/'), .string_ptr);
			tbk$fao_put (UPLIT (%ASCIC '!48* '));
		END
	ELSE	tbk$fao_put (UPLIT (%ASCIC '!32AC'), .string_ptr);

	IF	.line_num NEQ 0
	THEN	tbk$fao_put (UPLIT (%ASCIC '!5UL'), .line_num)
	ELSE	tbk$fao_put (UPLIT (%ASCIC '!5* '));

	IF	.stmt_num NEQ 0
	THEN	tbk$fao_put (UPLIT (%ASCIC '.!2ZL'), .stmt_num)
	ELSE	tbk$fao_put (UPLIT (%ASCIC '!3* '));

	tbk$fao_put (UPLIT (%ASCIC '!10XL!10XL'), .rel_pc, .abs_pc);

	tbk$out_put ();		! Cause the current buffer to be output.

END;

ROUTINE IS_EXCEPTION( EXC_NAME ) =

!++
! Functional Description:
!
!	Given an exception name - the longword which encodes the
!	type, etc, of an exception - deduce if this exception is
!	the so-called FAULT_EXC type.  This is for the PC_TO_LINE
!	translation - we have to know if the PC is on the instruction
!	which caused the exception, or if it is on the next instruction.
!
!	The answer to the question is simply whether
!	the given EXC_NAME is in our table of exceptions.  The only
!	trickery is that this routine makes sure only to look at
!	the part of the longword which encodes the error code - and
!	not at the rest of it since that may change.
!
! Formal Parameters:
!
!	EXC_NAME - the longword system-defined exception name.
!
! Routine Value:
!
!	TRUE or FALSE.  See above.
!
! Side Effects:
!	None.
!--

BEGIN
	MAP
		EXC_NAME	: BLOCK [ %UPVAL, BYTE ];
	BIND
			! The 0-ended list of exception codes.

		EXCEPTION_LIST 	= UPLIT WORD (
					SS$_ACCVIO,
					SS$_NOTRAN,
					SS$_RADRMOD,
					SS$_ROPRAND,
					SS$_OPCDEC,
					SS$_OPCCUS,
					SS$_BREAK,
					SS$_FLTOVF_F,
					SS$_FLTUND_F,
					SS$_FLTDIV_F,
					SS$_TBIT,
					SS$_COMPAT,
					0    )
				: VECTOR[, WORD ];

	! Simply loop thru the list checking each one,
	! ending when the 0 one is encountered.

	INCR I FROM 0
		DO
		BEGIN
		LOCAL
			LIST_ENTRY : BLOCK [ %UPVAL, BYTE ];

		IF( (LIST_ENTRY = .EXCEPTION_LIST[ .I ]) EQL 0 )
		THEN
			EXITLOOP;

		IF( .EXC_NAME[ STS$V_CODE ] EQL .LIST_ENTRY[ STS$V_CODE ] )
		THEN
			RETURN(TRUE);
		END;

	! Entry not found in the exception list.

	RETURN(FALSE);
END;

%IF TBK_BAS2
%THEN

GLOBAL ROUTINE LIST_DST =

!++
!--
BEGIN
	LOCAL
		nt_count,
		DST_REC_ID,
		DST_RECRD : REF DST_RECORD;
	$FAO_TT_OUT('listing off the DST');
	WHILE( (DST_RECRD = TBK$GET_NXT_DST( DST_REC_ID )) NEQ 0 )
		DO
		BEGIN

		! Process each record depending on its DST type.
%IF TBK_BAS2
%THEN
		! For diagnostic purposes we list out the entire record.

		IF( .DST_RECRD[DSTR_TYPE] EQL DSC$K_DTYPE_MOD)
		THEN
			BEGIN
			$FAO_TT_OUT('MC for module ');
			pr_cs(dst_recrd[dstr_name]);
			end;
		$FAO_TT_OUT( 'DST Rec Id=!XL, is at !XL, for !UD bytes.',
			.DST_REC_ID, .DST_RECRD, .DST_RECRD[ DSTR_SIZE ] );

		! Dump the reocrd in bytes.

		INCR I FROM 0 TO .DST_RECRD[ DSTR_SIZE ]
			DO
			$FAO_TT_OUT('!XB ',.DST_RECRD[ .I, 0, 8, 0 ] );

%FI

		CASE .DST_RECRD[ DSTR_TYPE ] FROM DST_DST_LOWEST TO DST_DST_HIGHEST OF

		    SET

		    [DSC$K_DTYPE_MOD]:	! Module Begin Record.

			BEGIN
			LOCAL
				NEW_PTR : REF MC_RECORD;
			END;

		    [DSC$K_DTYPE_EOM]:	! Module End Record.

			BEGIN

			END;

		    [DSC$K_DTYPE_RTN,		! Routine DSTs.
		     DSC$K_DTYPE_SLB]:		! Labels in FORTRAN and BLISS.

			BEGIN

			! Just tally up the needed statistics
			! so that we can build the other data 
			! structures later.

			NT_COUNT = .NT_COUNT +1;
			END;

		    [DSC$K_DTYPE_EOR,	! BLISS-only End-of-Routine.
		     DSC$K_DTYPE_FLD]:	! BLISS-only FIELD records.

			! We can safely ignore these for now.
			;

		    [DSC$K_DTYPE_LBL]:		! Label or Literal DSTs. (MARS only)

			BEGIN

			NT_COUNT = .NT_COUNT +1;
			END;

		    [DSC$K_DTYPE_PCT]:	! Psect DSTs.
			BEGIN
			BIND
			    PSECT_LENGTH
					=	! Pick up the field length, which
						! is after the NAME so must be
						! dynamically located.

					(.DST_RECRD[ DSTR_NAME ]	! The symbol-name count,
					+ DST_RECRD[ DSTR_NAME ]	!  plus its address,
					+ 1 ) : LONG;			!  addresses the LENGTH.

%IF tbk_bas2
%THEN
			$FAO_TT_OUT('PSECT begins: !XL, ends !XL',
				.DST_RECRD[ DSTR_VALUE ],
				.DST_RECRD[DSTR_VALUE]+.PSECT_LENGTH+1 );
%FI
			nt_count = .nt_count +1;
			END;
	
		    [INRANGE, OUTRANGE]:

			BEGIN

			! The only reason for not making the "SRM types"
			! part of the above CASE is because of the huge
			! case table which gets generated otherwise.

			IF( .DST_RECRD[ DSTR_TYPE ] EQL DSC$K_DTYPE_Z )
			THEN
				BEGIN

				! BLISS type ZERO records.
%IF TBK_bas2
%then
				$FAO_TT_OUT('ignoring Z record');
%FI
				! Whatever symbol this is, it contributes
				! a name, for sure, and either a literal
				! or a static.  We assume the worst!

				NT_COUNT = .NT_COUNT +1;
				END
			ELSE
			IF( .DST_RECRD[ DSTR_TYPE ] LEQ DST_TYP_HIGHEST )
			THEN
				BEGIN

				! These types are candidates for
				! the LVT and NT tables only.

				NT_COUNT = .NT_COUNT +1;
				END;

			END;
		    TES;

		! Go back and process the next DST record.

		END;

	$FAO_TT_OUT('DST listed OK');
	RETURN( 1 );
END;

%FI

%IF TBK_BAS2
%THEN
	! This routine is only used by DEBUGging output routines.

ROUTINE PR_CS( ADDR )  : NOVALUE =


!++
! Functional Description:
!	Print out a counted string in an
!	unambiguous way for debugging purposes.
!--

BEGIN
	MAP
		ADDR : REF VECTOR[,BYTE];

	! Don't get fooled!

	IF( .ADDR EQL 0 )
	THEN
		$FAO_TT_OUT( '**** PR_CS AT 0 **** ' )
	ELSE
		$FAO_TT_OUT( 'Name(!UB.): "!AC".  ' , .ADDR[0], ADDR[0] );
END;

%FI

END
ELUDOM
