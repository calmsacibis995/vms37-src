	.TITLE	TBKSTART
	.IDENT	'V03-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: TRACEBACK
;
; ABSTRACT: 
;	START UP MODULE FOR TRACEBACK FACILITY.
;
; ENVIRONMENT:
;	This startup routine is invoked by the DEBUG 'bootstrap'
;	when DEBUG is not running and when the user image has
;	caused an exception serious enough to warrant a traceback.
;	ROUTINE BEGINHERE CALLS TBK$DO_TRACE WITH THE SAME
;	ARGUMENT LIST THAT CLI SENT, except that rather than
;	one arg being the 'transfer vector' pointer, it is
;	the 'traceback arg list' pointer.
;
;	MODIFIED BY:
;		Dale Roedger, 20 July 1978:	07
; REVISION HISTORY:
;
;	000001	13-JAN-78	KGP	-Built this from DEBUG's DBGSTART
;	000002	23-feb-78	KGP	-Final polish to make traceback
;					 conform to spec.
;	000003	24-feb-78	KGP	-We now EXIT if the error was
;					 SEVERE (FATAL), CONTINUE otherwise.
;	000004	28-feb-78	KGP	-A 2 longword vector is statically
;					 maintained in DBGBOOT to contain the
;					 mapped address of the DST so that it
;					 can be used on successive TRACEs.
;	000005	8-mar-78	KGP	-P-sect names are now TBK... instead of
;					 overlapping with DEBUG's DBG... ones.
;	000006	15-JUN-78	DAR	PSECT attributes are changed to correspond
;					to the new building procedure.
;					TBK$CODE and TBK$PLIT are BYTE, NOWRT, EXE
;	07	20-JUL-78	DAR	Redefined PSECT's again this time for
;					the /SHARE option in the linker.
;--

	.SBTTL	DECLARATIONS

;+
; Invoke data definition macros.
;-
	$IFDDEF			; image file definitions
	$SSDEF			; system error codes
	$STSDEF			; signal naming field definitions

;+
; Equated symbols
;-
	buf_siz		=256	; length of getmsg, FAO, and $PUT buffers

;+
; Data Declarations
;-

;+
; Special vector that contains the beginning and end address of
; TRACE's writable storage area. The third value in the vector is
; the transfer address of TRACE that is in this module.
;-
	.PSECT	$TBK$ABS_ZERO LONG, PIC, SHR, EXE, NOWRT

	.ADDRESS writable_stor		; lowest writable storage location
	.ADDRESS writable_stor + ^X1FF	; highest writable location
	.LONG	 beginhere+2		; start address of mapped TRACEBACK

	.PSECT	TBK$GLOBAL  LONG, PIC, NOSHR, NOEXE

writable_stor:

	.sbttl	beginhere	- called by DBGBOOT

;++
; FUNCTIONAL DESCRIPTION:
;	This routine supplies the interface between the DEBUG
;	bootstrap and the BLISS routines which actually DO
;	TRACEBACK.  All we do here is accept the arguments
;	that we know DBGBOOT passes on, and pass them on to
;	TBK$DO_TRACE in the way that it expects them.
;
;	The real reason for the existence of this module is
;	because of the mucking with writable_stor, etc, above.
;	This setup is copied directly from DEBUG so that the
;	bootstrap can invoke us in the same way it invoked DEBUG.
;
;	The argument list from CLI/DBGBOOT looks as follows:
;
;	AP --->	----------------
;		|            4 |
;		----------------
;		|  address of  |
;		|  traceback   |
;		|   vector     |
;		----------------
;		| parsing info |
;		----------------
;		| image header |
;		|  information |
;		----------------
;		|  image file  |
;		|  information |
;		----------------
;
;	The traceback vector contains four parameters.
;	They are ordered as in the picture below:
;
;		----------------
;		| PC when fault|
;		| occurred     |
;		----------------
;		| FP when fault|
;		| occurred     |
;		----------------
;		| FP when user |
;		| prog called  |
;		| initially    |
;		----------------
;		|  address of  |
;		| signal array |
;		----------------
;		| symbol table |
;		| 'begin' addr |
;		----------------
;		| symbol table |
;		|  'end' addr  |
;		----------------
;
;
; CALLING SEQUENCE:
;	CALLS #4, beginhere
;
; INPUTS:
;	THE ARGUMENT LIST FROM CLI
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUTS:
;	R0, if we decide to RESIGNAL.
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	WHATEVER IS IN R0
;
; SIDE EFFECTS:
;	A TRACEback is produced.
;	The decision is made as to whether to EXIT back
;	to CLI or RESIGNAL the condition.
;--

	.PSECT	TBK$CODE BYTE, PIC, SHR, EXE, NOWRT

beginhere::
	.WORD	0
;+
; Note that the following few instructions write into the argument list
; passed to this routine from CLI. This disguises the fact that DEBUG
; is around.
;-

	MOVL	4(AP),R0		; Pick up address of traceback vector
	PUSHL	(R0)+			; Pass on PC when fault occurred
	PUSHL	(R0)+			; Pass on FP when fault occurred
	PUSHL	(R0)+			; Pass on initial FP of image
	PUSHL	(R0)+			; Pass on ptr to signal array
	PUSHL	R0			; Pass on address of 2 longword vector
					; where symbol table mapped addresses
					; are stored across TRACE invocations.
	PUSHL	12(AP)			; push the address of the
					; image header information prepared
					; by the image activator.
	MOVL	16(AP), R0		; get the address of the image file
	MOVZWL	ifd$w_filnamoff(R0),R1
	ADDL3	R0,R1,-(SP)		; and push onto stack
	MOVZWL	ifd$w_chan(R0),-(SP)	; push the channel number also
	CALLS	#6, TBK$DO_TRACEB	; and do TRACEBACK.

;+
; DO_TRACEB returns the same exception name we passed
; it, above.  Now we force an EXIT if the condition
; severity level was SEVERE (or FATAL), or return
; so that the bootstrap can allow the image to CONTINUE,
; otherwise.  (by simply passing on our SS$_CONTINUE)
;-

	CMPZV	#STS$V_SEVERITY,#STS$S_SEVERITY,R0,#STS$K_SEVERE
	BEQL	FORCE_EXIT
	MOVZWL	#SS$_CONTINUE,R0	; The bootstrap will arrange to have
	RET				;  the image continue running.

FORCE_EXIT:
	BISL2	#^X10000000,R0		;  Set 'already printed' bit in exception
	$EXIT_S	R0			;  name and exit with that as code.

.END	BEGINHERE


