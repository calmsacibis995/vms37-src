
	.TITLE	NETOPCOM - OPERATOR COMMUNICATIONS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	NETWORK ACP
;
; ABSTRACT:
;	THIS MODULE IS USED TO SEND INFORMATIONAL MESSAGES TO THE NETWORK OPERATOR
;
; ENVIRONMENT:
;	MODE = EXEC
;--

	.SBTTL	HISTORY
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 13-APR-1980
;
; MODIFIED BY:
;
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CNFDEF
	$CNRDEF
	$NFBDEF
	
	$MSGDEF
	$NDBDEF
	$OPCDEF

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
TEXT_LTH = 256
ERRMSG_LTH = 256

;
; OWN STORAGE:
;
	.PSECT	NET_PURE,NOWRT,NOEXE

;
; MESSAGES
;
START_MSG:	.ASCIC	/starting/
MAINT_MSG:	.ASCIC	/entered maintenance mode/
DOWN_MSG:	.ASCIC	/went down/
NGINI_MSG:	.ASCIC	/INIT message protocol error/
OKINI_MSG:	.ASCIC	/received a valid node init/
SHUT_MSG:	.ASCIC	/shutting down/
DSRCH_MSG:	.ASCIC	/had a DSR on-to-off transition/
LOOPB_MSG:	.ASCIC	/incorrectly looped back/
DCHK_MSG:	.ASCIC	/exceeded error threshold/
NUMRANGE_MSG:	.ASCIC	/node address out of range/
NUMDUPL_MSG:	.ASCIC	/node address duplicated/
NUMMISMATCH_MSG:	.ASCIC	/node address does not match node name/
NAMEDUPL_MSG:	.ASCIC	/node name duplicated/
NONAME_MSG:	.ASCIC	/node name not in database/
VFYERROR_MSG:	.ASCIC	/VFY message protocol error/
BADPWD_MSG:	.ASCIC	/node password incorrect/

MSG_ARRAY:				; MESSAGE ADDRESSES
	.LONG	START_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_START

	.LONG	MAINT_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_MAINT

	.LONG	DOWN_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_DOWN

	.LONG	NGINI_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_NGINI

	.LONG	OKINI_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_OKINI

	.LONG	SHUT_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_SHUT

	.LONG	DSRCH_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_DSRCH

	.LONG	LOOPB_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_LOOPB


	.LONG	DCHK_MSG
MSGNUM=<.-MSG_ARRAY>/4
	ASSUME	MSGNUM EQ NDB$C_MSG_DCHK

	.ADDRESS	NUMRANGE_MSG
	.ADDRESS	NUMDUPL_MSG
	.ADDRESS	NUMMISMATCH_MSG
	.ADDRESS	NAMEDUPL_MSG
	.ADDRESS	NONAME_MSG
	.ADDRESS	VFYERROR_MSG
	.ADDRESS	BADPWD_MSG

	.PSECT	NET_IMPURE,WRT,NOEXE

NET$GB_OPCCODE::	.BLKB	1	; For holding OPCOM msg code
MSG_BUFFER:
	.LONG	MSG$_OPRQST		; MSG TYPE + MAILBOX CHANNEL
	.LONG	-1			; PRIVILEGES
	.LONG	-1			; MORE PRIVILEGES
	.LONG	0			; UIC
	.ASCII	/NETACP      /		; MY NAME
	.ASCII	/        /		; ACCOUNT - NULL
	.WORD	0			; PRIORITY + FILL BYTE
	.LONG	OPC$_RQ_RQST!-		; SET UP BUFFER HEADER
	<<OPC$M_NM_NTWORK>@8>
	.LONG	0			; NO MESSAGE NO. FOR REPLY

TEXT:
	.BLKB	TEXT_LTH		; FOR REST OF TEXT
TEXT_Q_DESC:	.BLKL	1		; LTH OF TEXT BFR
	.LONG	TEXT			; BFR ADDR

LINE_Q_DESC:	.LONG	LINE_LTH	; LINE MESSAGE DESCRIPTOR
		.LONG	LINE_CTRSTR	;
LINE_CTRSTR:	.ASCII	/DECnet line /
LINE_NAME:	.BLKL	1		; FOR JAMMING LINE NAME
		.ASCII	/: !AC/		; REST OF CONTROL STRING
LINE_LTH=.-LINE_CTRSTR

NODE_Q_DESC:	.LONG	NODE_LTH	; NODE MESSAGE DESCRIPTOR
		.LONG	NODE_CTRSTR	;
NODE_CTRSTR:	.ASCII	/DECnet !AC/	;
NODE_LTH=.-NODE_CTRSTR

ERROR_Q_DESC:	.LONG	ERROR_LTH	; ERROR MESSAGE DESCRIPTOR
		.LONG	ERROR_CTRSTR	;
ERROR_CTRSTR:	.ASCII	/DECnet line /
LINE_NAME1:	.BLKL	1		; FOR STUFFING LINE NAME
		.ASCII	': failed to start:    !AS'
ERROR_LTH=.-ERROR_CTRSTR
ERRMSG_Q_DESC:	.BLKL	1		; For translating the system error msg
		.ADDRESS	ERRMSG	; Buffer address
ERRMSG:	.BLKB	ERRMSG_LTH		; Buffer for system error message
INIT_Q_DESC:	.LONG	INIT_LTH	; Descriptor for node init info
	.ADDRESS	INIT_CTRSTR	;
INIT_CTRSTR:	.ASCII	/DECnet line /
INIT_LINE:	.BLKL	1		; Save space for line
	.ASCII	?: !AC from address: !UW, name: !AC!AC?
INIT_LTH=.-INIT_CTRSTR

NET$GW_INITNUM::	.BLKW	1	; Node number in INIT msg
NET$GL_INITNAME::	.BLKA	1	; Address of counted node name string
NET$GT_INITPWD::	.ASCIC	/, password: /
NET$C_PWDMSGLTH == .-NET$GT_INITPWD+8	; Length of total password output
NET$GT_PASSWORD::	.BLKB	128	;! Save 128 character password

INIT_PWD:	.ADDRESS	NET$GT_INITPWD ; For FAO

	.PSECT	NET_CONTROL,NOWRT,EXE
;++
;
; GET_LINE_NAME - This routine gets the name of the line and stores it in
;		a string for printing
;
; INPUTS:
;	R0 - Address of longword to store 4 chars of line name
;	R10 - CRI CNF pointer
;
;--

GET_LINE_NAME:
	PUSHR	#^M<R6,R7,R8,R9,R10,R11> ; Save regs
	PUSHL	R0			; Save address for line name
	$CNFFLD	cri,s,nam,R9		; Set to find name
	BSBW	CNF$GET_FIELD		; Get the field
	MOVL	(R8),@(SP)+		; Stuff the line name
	POPR	#^M<R6,R7,R8,R9,R10,R11> ; Restore regs
	RSB				; Done


	.SBTTL	NETWORK OPERATOR MESSAGE FORMATTING
;++
; FUNCTIONAL DESCRIPTION:
;
; NET$OPCOM_INIT - Output info on node initializations
; NET$OPCOM_ERROR - ERROR STARTING LINE
; NET$OPCOM_NODE - MESSAGE IS FOR LOCAL NODE, NOT A LINE
; NET$OPCOM - FORMAT AND SEND OPERATOR MESSAGE ABOUT A LINE
;
; CALLING SEQUENCE:
;
;	BSB	NET$OPCOM, ETC.
;
; INPUT PARAMETERS:
;
;	R0 - ERROR CODE (NET$OPCOM_ERROR)
;	R10 - CRI CNF pointer
;	NET$GB_OPCCODE - Message code
;	NET$GW_INITNUM - node address
;
; SIDE EFFECTS:
;
;	MESSAGE SENT TO NETWORK OPERATOR
;	R1 - destroyed
;	R2 - destroyed
;
;--

NET$OPCOM_INIT::
	MOVAB	W^INIT_Q_DESC,R1	; Point to FAO control string descriptor
	MOVAB	W^INIT_LINE,R0		; Get address for line name
	BSBB	GET_LINE_NAME		; Fetch the line name
	BRB	COMMON			; Go to common code

NET$OPCOM_ERROR::
	MOVAB	W^ERRMSG_Q_DESC,R2	; Point to system error message descriptor
	MOVZWL	#ERRMSG_LTH,(R2)	; Reset lth
	$GETMSG_S	-		; Translate the message
		MSGID=	R0-		; This is the message code
		MSGLEN=	(R2)-		; Address for actual lth
		BUFADR=	(R2)		; Address of buffer descriptor
	MOVL	R2,R0			; Make descriptor address the FAO parameter
	MOVAB	W^ERROR_Q_DESC,R1	; GET ADDRESS OF CONTROL STRING
	MOVAB	W^LINE_NAME1,R0		; Get address for line name
	BSBB	GET_LINE_NAME		; Fetch the line name
	BRB	COMMON1			; GO TO COMMON CODE

NET$OPCOM_NODE::
	MOVAB	W^NODE_Q_DESC,R1	; GET ADDRESS OF CONTROL STRING
	BRB	COMMON			; GO TO COMMON CODE
NET$OPCOM::
	MOVAB	W^LINE_NAME,R0		; Get address for line name
	BSBB	GET_LINE_NAME		; Fetch the line name
	MOVAB	W^LINE_Q_DESC,R1	; GET ADDRESS OF CONTROL STRING
COMMON:
	MOVZBL	W^NET$GB_OPCCODE,R0	; Get the OPCOM message code
	MOVL	W^MSG_ARRAY-4[R0],R0	; GET 1-ORIGIN ADDRESS OF TEXT STRING
COMMON1:
	PUSHR	#^M<R2,R3,R4,R5>	; SAVE REGS
	MOVZWL	#TEXT_LTH,W^TEXT_Q_DESC	; Reset the output bfr lth
	$FAO_S	CTRSTR=(R1),-		; FORMAT THE BUFFER
		OUTLEN=W^TEXT_Q_DESC,-	; STUFF THE BUFFER DESCRIPTOR
		OUTBUF=W^TEXT_Q_DESC,-	;
	P1= R0-				; Message address
	P2= W^NET$GW_INITNUM-		; Node number, maybe
	P3= W^NET$GL_INITNAME-		; Address of node name, maybe
	P4= W^INIT_PWD			; Password string, maybe
	PUSHAL	W^TEXT_Q_DESC		; SET UP FOR CALL
	CALLS	#1,L^EXE$NETSNDERL	; SEND THE MSG TO THE ERROR LOGGER
	MOVAB	L^SYS$GL_OPRMBX,R5	; GET MAILBOX UCB ADDRESS
	ADDL3	S^#TEXT-MSG_BUFFER,-	; LTH OF MBX MSG
		W^TEXT_Q_DESC,R3
	MOVAB	W^MSG_BUFFER,R4		; BUFFER ADDRESS
	JSB	L^EXE$WRTMAILBOX	; SEND THE MESSAGE
	POPR	#^M<R2,R3,R4,R5>	; RESTORE REGS
	RSB				; DONE

	.END
