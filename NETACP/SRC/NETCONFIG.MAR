	.TITLE	NETCONFIG - Local Configuration Data Base
	.IDENT	'V03-013'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

; FACILITY:	NETWORK ACP
;
; ABSTRACT:
;	THIS MODULE CONTAINS THE CONTROL BLOCKS FOR THE LOCAL NODE.
;
; ENVIRONMENT:
;	MODE = KERNEL
;--
	.SBTTL	HISTORY
;
; AUTHOR:	A. Eldridge	10-Jan-1980
;
; MODIFIED BY:
;
;	V013	TMH0013		Tim Halvorsen		21-Apr-1982
;		Change version from X3.0 to V3.0
;
;	V012	TMH0012		Tim Halvorsen		08-Mar-1982
;		Add HLD to the list of pre-defined objects.
;		Remove defaulting of executor default proxy access
;		and object proxy access.
;
;	V03-11	ADE0051		A.Eldridge		15-Feb-1982
;		Added 'pipeline quota' to the LNI database
;
;	V03-10	ADE0050		A.Eldridge		19-Jan-1982
;		Added support for applying defaults to individual CNF
;		entries as they are added to the database.
;
;	V03-09	ADE0034		A.Eldridge		06-Jan-1982
;		Removed the 'retransmit timer' (RTT) parameter from the 
;		circuit database.
;
;	V03-08	ADE0033		A.Eldridge		26-Dec-1981
;		Added NET$GW_X25_CHAN and NET$GQ_X25_DEV to prepare for
;		X25 integration.
;
;	V03-07	ADE0032		A.Eldridge		22-Dec-1981
;		Removed the $$$LICENSE psect.
;
;	V03-06	ADE0031		A.Eldridge		14-Dec-1981
;		Added support for PLVEC seconds since counters were last
;		zeroed.
;
;	V03-05	ADE0030		A.Eldridge		30-Nov-1981
;		Added support for proxy login to the OBI, NDI, and LNI
;		databases.
;	V03-04			A. Eldridge		24-Jul-1981
;		Update for circuit and line database.
;	V03-01			A. Eldridge		21-Apr-1981
;		Update for new database format format.
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DYNDEF
	$PRVDEF

	$NETSYMDEF

	$CNFDEF
	$CNRDEF
	$NFBDEF
	$NMADEF
	$CRIDEF
	$PLIDEF
	$EFIDEF
	$ESIDEF
	$LNIDEF
	$NDIDEF
	$OBIDEF
	$XWBDEF

	$WQEDEF
;
; MACROS:
;

;
;  The following macros build the buffers used to construct CNF blocks
;  during ACP initialization.
;
.MACRO	$BLDCNF_2  database,type,name,value	; Build list of parameters
	.CNFFLD	database,type,name		; Enter parameter i.d.
	.IF  DIF,S,type
		.BYTE	0			; Flag "not a string"
		.LONG	value			; Store the value
	.IFF
		.ASCIC	"value"			; Store counted string
	.ENDC
.ENDM	$BLDCNF_2

.MACRO	$BLDCNF	database,list			; Build CNF specifier
	.LONG	CNR_'database'			; Point to CNR block
	.IRP	entry,<list>			;
		$BLDCNF_2  entry		; Enter parameter list
	.ENDR
	.LONG	0				; Terminate with a zero
.ENDM	$BLDCNF


;
;  The following macros build the tables used to apply default values to
;  selected CNF parameters when CNF blocks are either added or modified.
;
.MACRO	$CNF_DEF_2  db,param,type,value

	.CNFFLD	db,type,param			; Enter parameter i.d.
	.LONG	value				; Store parameter default value

.ENDM	$CNF_DEF_2

.MACRO	$CNF_DEF  database,list

	_$CNF_DEF = .
	. = NET$AL_CNF_DFLT + <4*nfb$c_db_'database'>
	.LONG	_$CNF_DEF
	. = _$CNF_DEF

	.IRP  entry,<list>
	      $CNF_DEF_2  database,entry
	.ENDR
	.LONG	0

.ENDM	$CNF_DEF


;
; The following macro is used to build the field semantics.  Each field is
; defined by:
;
;	pref	Prefix code identify the component (e.g., LNI,OBI,NDI)
;
;	type	V  bit	 - uses no storage
;		L  longword
;		S  string
;
;	maxs	Maximum allowed parameter value or string size.  If the
;		'field' parameter is "L" (longword) then there is no
;		maximum, otherwize the default is 65535 implying that there
;		is no maximum.
;
;		The maximum and default size for the length of strings is 1023.
;
;	qual	One of the following qualifiers
;
;		for non-strings:	Z   the value zero is allowed.
;
;		for strings:		T   treat all characters transparently.
;					A   only upper case ascii and numeric
;					    characters are allowed.
;					F   parse the string as if it were a
;					    file specification.
;
;	access	Specifies the type of access allowed on that field:
;
;		blank	General read/write access.
;		W	General write access, read access only if the user
;			has "bypass" privilege.
;		R	Read-only access.
;		C	General read/write access if the NFB$C_'pref'_LCK bit
;			is clear, else read-only access.
;		E	External ready only.  Can't write field on behalf of a
;			QIO, but can be written for internal ACP use.
;
;	req	Controls data base integrity and consistency as follows:
;
;		blank	No special requirements.
;		M	Mandatory.  If this field is not active then the block
;			will not be inserted into the data base.
;		U	Unique.  The value of this field must be unique with
;			respect to the values of this same field for all other
;			blocks currently in the data base.
;		S	Signature.  This implies both M and S.
;
;	field	Specifies how the field is stored:
;
;		$	There is no actual field in the CNF block.  The
;			information must be found by calling an action
;			routine.
;		B	Byte.
;		W	Word.
;		L	Longword.  If the field is as string then this
;			the self-relative longword string descriptor.

.MACRO	$entsem  pref,type,name,maxs=65535,qual=T,access=RW,req,field

	;
	;   Initialize the semantic longword by setting the CNF offset to the
	;   field.
	;
	;    o	If the "field" is really a routine (field=$) then the CNR
	;   	action routine offset is used.  
	;    o	If the "field" is type "bit" then the bit offset from the top
	;	of the CNF to the bit in CNF$W_BOOLEAN is used.
	;    o	Else the byte offset from the top of the CNF is used.
	;
	;   The value of the semantic longword can never be zero since that is 
	;   the value used to indicate the field is undefined.   This is 
	;   enforced by never allowing the "offset" subfield to be zero unless
	;   the CNR$V_SEM_RT bit is set.
	;
	 ASSUME  cnr$v_sem_off  EQ  0

	.IF IDN,field,$
	  		   _$sem = _$actoff + <<1>@cnr$v_sem_rt>
	.IFF
	  .IIF IDN,type,L, _$sem = cnf$c_length + 'pref'$'field'_'name'
	  .IIF IDN,type,S, _$sem = cnf$c_length + 'pref'$L_S_'name'
	  .IF  IDN,type,V
	       .IF GT,16-_$maxbool
			   _$sem = cnf$w_boolean*8 + _$maxbool
			   _$maxbool = _$maxbool + 1
	       .IFF
		  .ERROR    0 			; too many boolean parameters
	       .ENDC
	  .ENDC
	.ENDC


	;
	;   Setup field type
	;
	.IIF IDN,type,V,   _$sem = _$sem + <<cnr$c_sem_bit    >@cnr$v_sem_typ>
	.IIF IDN,type,L,   _$sem = _$sem + <<cnr$c_sem_'field'>@cnr$v_sem_typ>
	.IIF IDN,type,S,   _$sem = _$sem + <<cnr$c_sem_str    >@cnr$v_sem_typ>


	;
	;  Setup maximum allowed value or string size
	;
	.IIF IDN,type,S,   _$sem = _$sem + <<1023&maxs>@cnr$v_sem_max>
	.IIF IDN,type,L,   _$sem = _$sem +      <<maxs>@cnr$v_sem_max>


	;
	;  Specify type of access allowed
	;
			   _$sem = _$sem + <<cnr$c_acc_'access'>@cnr$v_sem_acc>


	;
	;  Specify special qualifiers - zero value allowed if type 'L'
	;				parse table if type 'S'
	;
	.IIF IDN,type,S,   _$sem = _$sem + <<cnr$c_sem_'qual'>@cnr$v_sem_tab>
	.IIF IDN,qual,Z,   _$sem = _$sem + <<		    1>@cnr$v_sem_z>


	;
	;  Enter sematics into the table
	;
        _$offset = <<nfb$C_'pref'_'name'>&^XFFFF>*4	; Index of param i.d. 
							; is in low 16 bits
							;&define mask in $CNRDEF
	. = _$start + cnr$t_sem_tab + _$offset
	.LONG	_$sem


	;
	;  If the 'field' is actually a routine then setup its dispatch vector
	;
	.IF  IDN,field,$

	    .IF GT,CNR$L_END_ACT - _$actoff

		.   =  _$start + _$actoff
		.LONG  NET$'pref'_'type'_'name'
	    .IFF
		.ERROR    0 			; too many action routines
	    .ENDC
		_$actoff = _$actoff + 4
	.ENDC


	;
	;  If the parameter is mandatory then enter its i.d. into the list
	;
			 _$mand = 1
	.IIF IDN,req,M,  _$mand = 0
	.IIF IDN,req,S,  _$mand = 0
	.IF  EQ,_$mand

	    .IF GT,CNR$L_END_MAND - _$mandoff

		.   =	_$start + _$mandoff
		.CNFFLD pref,type,name
	    .IFF
		.ERROR    0 			; too many mandatory fields
	    .ENDC
		_$mandoff = _$mandoff + 4
	.ENDC


	;
	;  If the parameter must be unique then enter its i.d. into the list
	;
			 _$uniq = 1
	.IIF IDN,req,U,  _$uniq = 0
	.IIF IDN,req,S,  _$uniq = 0
	.IF  EQ,_$uniq

	    .IF GT,CNR$L_END_UNIQ - _$uniqoff

		.   =   _$start + _$uniqoff
		.CNFFLD pref,type,name
	    .IFF
		.ERROR    0 			; too many unique fields
	    .ENDC
		_$uniqoff = _$uniqoff + 4
	.ENDC

.ENDM


.MACRO	$DEFSEM    pre,typ,fldlist

	.IF DIF,typ,-1
	    .IRP	A,<fldlist>
			$entsem  pre,typ,A	; Enter semantics
	    .ENDR
	.ENDC
.ENDM						; slots for this segment

;
; The following macro builds the entire CNR structure
;
	ASSUME	CNR$L_FLINK	 EQ  0
	ASSUME	CNR$L_BLINK	 EQ  4+CNR$L_FLINK
	ASSUME	CNR$W_SIZE	 EQ  4+CNR$L_BLINK
	ASSUME	CNR$B_TYPE	 EQ  2+CNR$W_SIZE
	ASSUME	CNR$B_FLG	 EQ  1+CNR$B_TYPE
	ASSUME	CNR$W_SIZ_CNF	 EQ  1+CNR$B_FLG
	ASSUME	CNR$W_MAX_INX	 EQ  2+CNR$W_SIZ_CNF

	ASSUME	CNR$L_FLD_LOCK	 EQ  2+CNR$W_MAX_INX
	ASSUME	CNR$L_FLD_COLL	 EQ  4+CNR$L_FLD_LOCK

	ASSUME	CNR$L_ACT_QIO	 EQ  4+CNR$L_FLD_COLL
	ASSUME	CNR$L_ACT_SHOW	 EQ  4+CNR$L_ACT_QIO
	ASSUME	CNR$L_ACT_INSERT EQ  4+CNR$L_ACT_SHOW
	ASSUME	CNR$L_ACT_DELETE EQ  4+CNR$L_ACT_INSERT
	ASSUME  CNR$L_ACT_REMOVE EQ  4+CNR$L_ACT_DELETE

	ASSUME  CNR$L_SCANNER	 EQ  4+CNR$L_ACT_REMOVE

	ASSUME	CNR$L_VEC_ACT	 EQ  4+CNR$L_SCANNER
	ASSUME	CNR$L_VEC_MAND	 EQ  4+CNR$L_END_ACT
	ASSUME	CNR$L_VEC_UNIQ	 EQ  4+CNR$L_END_MAND
	ASSUME	CNR$T_SEM_TAB	 EQ  4+CNR$L_END_UNIQ


.MACRO	$DEFCNR	  prefix,typ1=-1,list1,typ2=-1,list2,typ3=-1,list3

.ALIGN LONG
_$START = .

	_$maxbool = 0
	_$actoff  = CNR$L_VEC_ACT
	_$mandoff = CNR$L_VEC_MAND
	_$uniqoff = CNR$L_VEC_UNIQ


CNR_'prefix'::
	.LONG	.				; Build queue header
	.LONG	.-4				;
	.WORD	1024				; Use entire page
	.BYTE	NFB$C_DB_'prefix'		; Setup database id
	.BYTE	CNF$M_FLG_CNR			; Mark as CNR block
	.WORD	CNF$C_LENGTH + 'prefix'$c_length; Total CNF size = CNF header
		              			;  plus fixed structure size
	.WORD	CNR$C_MAX_INX			;&update to "real" value
	.CNFFLD prefix,V,LCK			; Fld id of field used to guard
						; cond. writeable fields
	.CNFFLD	prefix,S,COL			; Fld id of field used to order
		  				; the CNR list

	.LONG	NET$PRE_QIO_'prefix'		; Pre-processor for QIO to
						; this database
	.LONG	NET$SHOW_'prefix'		; Pre-processor for QIO to a
						; specific CNF

	.LONG	NET$INSERT_'prefix'		; Pre-insert action routine
	.LONG	NET$DELETE_'prefix'		; Pre-mark-for-delete routine
	.LONG	NET$REMOVE_'prefix'		; Pre-remove action routine
	.LONG	NET$SCAN_'prefix'		; Database scanner co-routine

	.BYTE	0[CNR$L_VEC_MAND-CNR$L_VEC_ACT]	; Init action routine ptrs
	.BYTE   0[CNR$L_VEC_UNIQ-CNR$L_VEC_MAND]; Init mandatory field list
	.BYTE	0[CNR$T_SEM_TAB -CNR$L_VEC_UNIQ]; Init unique field list
	.LONG	0[CNR$C_MAX_INX]		; Init semantic table

	;
	; Build the semantic vector
	;
	$DEFSEM   prefix,typ1,list1
	$DEFSEM   prefix,typ2,list2
	$DEFSEM   prefix,typ3,list3


. = _$START + CNR$C_LENGTH			; Use two pages

.ENDM

;
; EQUATED SYMBOLS:
;
	$EQULST	NET$C_,GLOBAL,,,<-
		<LINE_CTRS,8>,-		; NO. OF PHYLK LINE ERROR COUNTERS
	>
	;
	;   Create short symbols to cleanup sematic (CNR) table format
	;
	MXNOD = NET$C_MAX_NODES		; Max node address supported by the ACP
	MXDLL = NET$C_MAX_LINES		; Max supported datalinks
	MXLNK = NET$C_MAXLNK		; Max supported logical links
	MXSRV = 10			;&Max line service state qualifier
	MAX_PLVEC = 33			; Maximum PLVEC index (allows for
					; 33-1=32 lines).
;
; OWN STORAGE:
;

	.PSECT	NET_IMPURE,LONG,NOEXE

NET$AL_NDI_VEC:: .BLKL	MXNOD+1		; Vector of ptrs to NDI CNFs
					;   (the +1 is for node #0)
NET$GQ_UTLDESC:: .LONG	NET$C_UTLBUFSIZ	; Uitility buffer descriptor
		 .LONG	NET$AB_UTLBUF

NET$AB_UTLBUF::	 .BLKB	NET$C_UTLBUFSIZ




	.PSECT	NET_LOCK_PURE,WRT,EXE,LONG	;! the EXE attribute is to keep
						;! the locked .psects contiguous

;
;    Setup the configuration data base root block pointers
;
NET$AL_CNR_TAB::			; The following pointers must be in the
					; order of there database indexes
	ASSUME	NFB$C_DB_LNI  EQ  1
	ASSUME	NFB$C_DB_NDI  EQ  2
	ASSUME	NFB$C_DB_OBI  EQ  3
	ASSUME	NFB$C_DB_CRI  EQ  4
	ASSUME	NFB$C_DB_PLI  EQ  5
	ASSUME	NFB$C_DB_EFI  EQ  6
	ASSUME	NFB$C_DB_ESI  EQ  7
	ASSUME	NFB$C_DB_LLI  EQ  8

		 .LONG	-1		; There is no CNR with index zero
NET$GL_CNR_LNI:: .LONG CNR_LNI		; Root of Local Node Info list
NET$GL_CNR_NDI:: .LONG CNR_NDI		; Root of common Node Info list
NET$GL_CNR_OBI:: .LONG CNR_OBI		; Root of network Object list
NET$GL_CNR_CRI:: .LONG CNR_CRI		; Root of Circuit Info list
NET$GL_CNR_PLI:: .LONG CNR_PLI		; Root of Physical Link Info list
NET$GL_CNR_EFI:: .LONG CNR_EFI		; Root of Event Filter Info list
NET$GL_CNR_ESI:: .LONG CNR_ESI		; Root of Event Sink Info list
NET$GL_CNR_LLI:: .LONG CNR_LLI		; Root of Logical Link Info list
		 .LONG 0		; End of list


BLD_VEC:				; Setup Data base init vector

		.LONG	BLD_LNI
		.LONG	BLD_NDI_LOC

		.LONG	BLD_OBI_TASK
		.LONG	BLD_OBI_NML
		.LONG	BLD_OBI_FAL
		.LONG	BLD_OBI_HLD
		.LONG	BLD_OBI_REMACP
		.LONG	BLD_OBI_MIRROR
		.LONG	BLD_OBI_EVL
		.LONG	BLD_OBI_MAIL
		.LONG	BLD_OBI_PHONE
		.LONG	BLD_OBI_DTR

;&		.LONG	BLD_ESI_TEST	;& debugging
;&		.LONG	BLD_EFI_TEST	;& debugging

		.LONG	0		; Terminate with a zero




	.PSECT	NET_LOCK_IMPURE,WRT,EXE,LONG	;! the EXE attribute is to keep
						;! the locked .psects contiguous
;
; Define storage for control QIO processing
;
NET$GL_PM_OUT::		.BLKL	1	; Value returned as the NFB 'parameter'
NET$GL_PM_IN::		.BLKL	1	; Value supplied as the NFB 'parameter'
NET$GL_SRCH_ID::	.LONG	0	; QIO "search" key field i.d.
NET$GQ_SRCH_KEY::	.QUAD	0	; Value/descriptor of the "search" key
NET$GL_STRT_ID::	.LONG	0	; QIO "start" key field i.d.
NET$GQ_STRT_KEY::	.QUAD	0	; Value/descriptor of the "start" key

;*****
;
;  The following 8 longwords must be together, in order.   The desciptors
;  are used to hold the original IO$_ACPCONTROL buffer descriptors.  They
;  are also used as the descriptors of the buffers used for the re-issuing
;  of the control QIOs to the X.25 ACP.
;
;*****

NET$GL_SIZ_P4::		.BLKL	1	; Length of result buffer
NET$GL_PTR_P4::		.BLKL	1	; Pointer to result buffer
NET$GL_SIZ_P3::		.BLKL	1	; Length of and pointer to field to rcv
NET$GL_PTR_P3::		.BLKL	1	; # of bytes returned P4 buffer
NET$GL_SIZ_P2::		.BLKL	1	; Length of input string
NET$GL_PTR_P2::		.BLKL	1	; Pointer to input string
NET$GL_SIZ_P1::		.BLKL	1	; Length of Net Function Block
NET$GL_PTR_P1::		.BLKL	1	; Pointer to Net Function Block
;
;
;    Storage for some often referenced local node parameters.
;    These values are also in the local node CNF.
;
NET$GB_STATE::		.LONG -1	; Local network state
NET$GW_LOC_ADD::	.LONG 0		; Local network address
;
;
;    Miscellaneous storage
;
NET$GL_DUM_NDI:: 	.LONG 0		; Pointer to the dummy NDI CNF
NET$GL_SAVE_IRP:: 	.LONG 0		; Holds current IRP
NET$GL_SAVE_UCB::	.LONG 0		; Holds current IRP's UCB address
NET$GQ_TMP_BUF::	.LONG .	        ; Queue of temporary work buffers
			.LONG .-4
NET$GL_PTR_AQB::	.LONG 0	        ; Ptr to ACP's AQB
NET$GL_PTR_VCB::	.LONG 0		; Ptr to ACP's VCB
NET$GL_PTR_UCB0::	.LONG 0	        ; Ptr to the Unit 0 UCB
NET$GL_PTR_ACR::	.LONG 0		; Address of Acp Communication Routine
NET$GL_NET_UCB::	.LONG 0		; Ptr to NET$GW_CHAN's UCB
NET$GL_PTR_LNI::	.LONG 0		; Ptr to the LNI CNF

NET$GQ_USR_STAT::	.BLKQ 1	        ; I/o status block to be returned
NET$GL_XWB_VEC::	.BLKL 1	        ; NETDRIVER'S exit notification vector
NET$GL_FLAGS::		.BLKL 1	        ; Internal control flags
NET$GW_NETCHAN::	.BLKL 1	        ; channel to _NET:
NET$GL_MY_PID::		.BLKL 1		; NETACP's process ID

NET$GW_X25_CHAN::	.BLKL 1		; Channel to the X25 ACP
NET$GQ_X25_DEV::	.ASCID "_NW:"	; X25 device name
			.ALIGN LONG


;
;  The PLVEC database is an extension of the PLI database.  There is an 
;  entry in each of these tables for each physical line controlled by
;  NETACP.
;
PLVEC$GB_MAX::		.LONG MAX_PLVEC-1   ; Maximum PLVEC index (-1 since the
					    ; vectors are zero-indexed)
PLVEC$AL_ABS_TIM::	.LONG 0[MAX_PLVEC]  ; Seconds since counters last zeroed
PLVEC$AL_UCB::		.LONG 0[MAX_PLVEC]  ; Device UCB
PLVEC$AW_CHAN::		.WORD 0[MAX_PLVEC]  ; NETACP I/O channel
			.ALIGN LONG	    ;
PLVEC$AB_REFC::		.BYTE 0[MAX_PLVEC]  ; PLVEC cell reference count
			.ALIGN LONG	    ;
PLVEC$AB_DEV::		.BYTE 0[MAX_PLVEC]  ; Device type
			.ALIGN LONG	    ;
PLVEC$AB_STATE::	.BYTE 0[MAX_PLVEC]  ; Line state
			.ALIGN LONG	    ;

;
; LOCAL NODE INFORMATION
;
$DEFCNR	LNI,-

   V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Clear only if the conditionally writable
	-			; fields are writeable
>>,L,<<-
	<ADD, MXNOD,Z,C,M,W>,-	; Node address
	<SAD,	   ,Z, , ,L>,-	; X.25 sub-address range
	<STA,	  4,Z, ,M,B>,-	; State
	-			;
	-			;  LNI$C_STA_INIT  NETACP starts in this state
	-			;		   Logical link connects are
	-			;		   allowed.
	-			;  LNI$C_STA_OFF   NETACP will allow privileged
	-			;		   connects.  If NETACP is set
	-			;		   to this state from any other
	-			;		   state then all links are
	-			;		   broken and NETACP exits
	-			;  LNI$C_STA_ON	   Network generally available
	-			;  LNI$C_STA_RSTR  connects initiates allowed,
	-			;		   connects confirms allowed if
	-			;		   privileged or if the connect
	-			;		   was initiated locally
	-			;  LNI$C_STA_SHUT  Only privileged connects
	-			;		   are allowed.  When the last
	-			;		   logical link disconnects,
	-			;		   NETACP exits.
	-			;
	<ETY,	  4,Z,E,M,B>,-	; Type	(routing, end-node, etc.)
	<DFA,   255, , ,M,B>,-	; Delay factor	    (see Note1)
	<DWE,   255,Z, ,M,B>,-	; Delay weight	    (see Note1)
	<RFA,	255, , ,M,B>,-	; Retransmit factor (see Note1)
	<DAC,	  3,Z, , ,B>,-	; Default access switch
	<DPX,	  3,Z, , ,B>,-	; Default proxy access switch
	<PIQ, 32767,Z, , ,W>,-	; Pipeline quota

	<ITI,	   , , ,M,W>,-	; Incoming timer    (see Note1)	(units = sec)
	<OTI,	   , , ,M,W>,-	; Outgoing timer    (see Note1)	(units = sec)
	<IAT,	   , , ,M,W>,-	; Inactivity timer  (see Note1)	(units = sec)
	<RTI,	   , , ,M,W>,-	; Routing timer			(units = sec)
	<RSI,	   ,Z, , ,W>,-	; Min routing delay interval	(units = sec)

	<MLN, MXDLL,Z,C,M,B>,-	; Maximum supported circuits
	<MLK, MXLNK, , ,M,W>,-	; Maximum supported logical links
	<MAD, MXNOD, , ,M,W>,-	; Maximum supported node address
	<MCO,  1023, , ,M,W>,-	; Maximum cost
	<MHO,	 31, , ,M,B>,-	; Maximum hops
	<MVI,	 63, , ,M,B>,-	; Maximum visits
	<MBU,	   , , ,M,W>,-	; Maximum buffers
	<BUS,  4096, ,C,M,W>,-	; Buffer size
	<ACL,	   , ,R, ,$>,-	; Currently active links
	<LPC,	   ,Z, , ,W>,-	; Default LOOP COUNT
	<LPL,	   ,Z, , ,W>,-	; Default LOOP LENGTH
	<LPD,	   ,Z, , ,B>,-	; Default LOOP data type
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; A fixed string		(see Note2)
	<IDE,	 32,T, , ,L>,-	; System identification
	<MVE,	  3,T,E, ,L>,-	; Network Management version
	<NVE,	  3,T,E, ,L>,-	; NSP version
	<RVE,	  3,T,E, ,L>,-	; Routing version
	<NAM,	  6,T,R, ,$>,-	; Local node name
	<CNT,	   ,T,R, ,$>,-	; Counters
>>



;
;	Note1:	Doesn't effect currently active logical links.  One reason for
;		this is that these parameters may, in future releases, be
;		overridden by values supplied by the user at the time of the
;		connect request.  Thus, once a link is in progress these
;		parameters should not be changed.
;
;	Note2:	Because this field is read-only, mandatory, and unique, it
;		is guarenteed that there will be only one LNI entry in the
;		data base.
;

;
; REMOTE NODE INFORMATION
;
$DEFCNR	  NDI,-

   V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
	-			; written.  If this is the local node, then
	-			; it is set only if the state is LNI$C_STA_OFF.
	-			; If the node is non-local then this bit is
	-			; if unreachable or phase III.
	<REA,	   , ,R, ,$>,-	; Set if the node is reachable
	<LOO,	   , ,R, ,$>,-	; Set if the node is a "loopback" nodename
>>,L,<<-
	<ADD, MXNOD,Z,C,M,W>,-	; Address
	<CTI,	   ,Z, , ,W>,-	; Counter delta timer	   (units = sec)
	<CTA,	   , ,E, ,L>,-	; Counter absolute timer   (units = sec)
	<DEL,	   , ,R, ,$>,-	; Average round trip delay (units = sec)
	<DCO,	   , ,R, ,$>,-	; Total cost to node
	<DTY,	   , ,R, ,$>,-	; Node type (routing, phase II, etc)
	<DHO,	   , ,R, ,$>,-	; Total hops to node
	<TAD,	   , ,R, ,$>,-	; Transformed node address
	<ACL,	   , ,R, ,$>,-	; Active links to the node
	<SDV,	   ,Z, , ,B>,-	; Service device code
	<CPU,	   ,Z, , ,B>,-	; CPU type code
	<STY,	   ,Z, , ,B>,-	; Software type code
	<ACC,	  3,Z, , ,B>,-	; Access switch (inbound, outbound, etc.)
	<PRX,	  3,Z, , ,B>,-	; Proxy login switch (inbound, outbound, etc.)
	<DAD,	   ,Z, , ,L>,-	; Dump address
	<DCT,	   ,Z, , ,L>,-	; Dump count
	<IHO, MXNOD,Z, , ,W>,-	; Default host (input)
	<OHO, MXNOD,Z, , ,W>,-	; Default host (output)
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; A variant on HAC used for collating.
	<NNA,	  6,A, ,U,L>,-	; Name
	<NLI,	 15,A, , ,L>,-	; Associate line if this is a "loopback" node
			     -	; (This is actually required to be unique but
			     -	;  its uniqueness falls out of its being used
      -;<NLI,	 15,A, ,U,L>,-	;  as part of "nfb$c_ndi_col".  If the loopnode
			     -	;  address could be anything but the local node
			     -	;  address then the "U" flag must be set.)
	<DLI,	 15,A, , ,$>,-	; Line used for normal traffic
	<PUS,	 39,T, , ,L>,-	; Priv user id
	<PAC,	 39,T, , ,L>,-	; Priv account
	<PPW,	 39,T,W, ,L>,-	; Priv password
	<NUS,	 39,T, , ,L>,-	; NonPriv  user id
	<NAC,	 39,T, , ,L>,-	; NonPriv  account
	<NPW,	 39,T,W, ,L>,-	; NonPriv  password
	<RPA,	  8,T,W, ,L>,-	; Receive  password
	<TPA,	  8,T,W, ,L>,-	; Transmit password
	<HAC,	   , ,R, ,$>,-	; A combination of the node address and 
	-			; loopback linename 
	<CNT,	   ,T,R, ,$>,-	; Counters
	<SLI,	 15,A, , ,L>,-	; Service line
	<SPA,	  8,T, , ,L>,-	; Service password
	<LOA,	128,F, , ,L>,-	; Load file
	<SLO,   128,F, , ,L>,-	; Secondary loader file
	<TLO,	128,F, , ,L>,-	; Tertiary loader file
	<SID,	128,F, , ,L>,-	; Software i.d.
	<DUM,	128,F, , ,L>,-	; Dumper
	<SDU,	128,F, , ,L>,-	; Secondary Dumper
>>

;
; CIRCUIT INFORMATION
;
$DEFCNR	CRI,-

  V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
	-			; be written - set if in the "off" state
	-			; state.
	<SER,	   ,Z, , , >,-	; Service		(clear if enabled)
	-			;
	-			;  This bit controls whether the line may enter
	-			;  a service state or substate - not whether it
	-			;  can remain there.  Thus setting this bit
	-			;  while in a service state will not cause any
	-			;  change in its actual state.
	<BLK,	  ,Z, , , >,-	; Set if blocking is allowed (X.25 circuits)
	<VER,	  ,Z, , , >,-	; Set if Transport verification requested
>>,L,<<-
	<OWPID,	   , ,E, ,L>,-	; Temporary service process PID
	<CTA,	   , ,E, ,L>,-	; Counter absolute timer	(seconds)
	<STA,	  2,Z, , ,B>,-	; State	set by user
	<SUB,	  3,Z,E, ,$>,-	; Substate - what the line is doing
	<LCT, 	   , , , ,W>,-	; Counter delta timer		(seconds)
	<PNA,	   , ,R, ,$>,-	; Partner's node address
	<BLO, 	   , ,R, ,$>,-	; Receive block size
	<COS,    25, , , ,B>,-	; Cost
	<HET,	   , , , ,W>,-	; Hello timer
	<LIT,	   , , , ,W>,-	; Listen timer
	<MRC,	   , , , ,B>,-	; Max recalls
	<RCT,	   , , , ,W>,-	; Recall timer
	<POL,	   ,Z, , ,B>,-	; Polling state
	<PLS,	   ,Z,R, ,B>,-	; Polling sub-state
	<USE,	   ,Z,C, ,B>,-	; X.25 usage (incoming, outgoing, permanent)
	<CHN,	   ,Z,R, ,B>,-	; X.25 channel
	<TYP,	  2,Z,C, ,B>,-	; Type (protocol)
	<MBL,	   , , , ,W>,-	; Maximum block
	<MWI,	   , , , ,B>,-	; Maximum window
	<TRI,   255,Z,C, ,B>,-	; Tributary station address 
	<BBT,	   , , , ,W>,-	; Babbel timer
	<TRT,	   , , , ,W>,-	; Transmit timer
	<MRB,	   , , , ,B>,-	; Maximum receive buffers
	<MTR,	   , , , ,B>,-	; Maximum transmits
	<ACB,	   , , , ,B>,-	; Active base
	<ACI,	   , , , ,B>,-	; Active increment
	<IAB,	   , , , ,B>,-	; Inactive base
	<IAI,	   , , , ,B>,-	; Inactive increment
	<IAT,	   , , , ,B>,-	; Inactive threshold
	<DYB,	   , , , ,B>,-	; Dying base
	<DYI,	   , , , ,B>,-	; Dying increment
	<DYT,	   , , , ,B>,-	; Dying threshold
	<DTH,	   , , , ,B>,-	; Dead threshold
	<MST,	   , ,R, ,$>,-	; Maintenance mode "state" (1 => Off, 0 => On)
	<XPT,	  2, ,C, ,B>,-	; Transport protocol
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; Collating field
	<VMSNAM,   ,A,R, ,$>,-	; VMS device name
	<NAM,	 15,A,E,S,L>,-	; Line name
	<CHR,	   ,T,R, ,$>,-	; Control QIO characteristics buffer
	<CNT,	   ,T,R, ,$>,-	; Counters
	-			; loopback nodename if line is in loopback)
	<LOO,	  6,A,R, ,$>,-	; Loopback name
	<PNN,	  6,A,E, ,$>,-	; Partner's node name
	<NUM,	 32,T, , ,L>,-	; X.25 Call number
	<DTE,	 32,T, , ,L>,-	; X.25 DTE
>>

;
; PHYSICAL LINK INFORMATION
;
$DEFCNR	PLI,-

  V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
	-			; be written - set if in the "off" state
	-			; state.
	<SER,	   ,Z, , , >,-	; Service		(clear if enabled)
	-			;
	-			;  This bit controls whether the line may enter
	-			;  a service state or substate - not whether it
	-			;  can remain there.  Thus setting this bit
	-			;  while in a service state will not cause any
	-			;  change in its actual state.
	<DUP,	   ,Z,C, , >,-	; Duplex		(set if halfduplex)
	<CON,	   ,Z,C, , >,-	; Controller		(set if loopback)
	<CLO,	   ,Z,C, , >,-	; Clock mode		(set if internal)
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; Collating field
	<VMSNAM,   ,T,R, ,$>,-	; VMS device name
	<NAM,	 15,A,E,S,L>,-	; Line name
	<CHR,	   ,T,R, ,$>,-	; Control QIO characteristics buffer
	<CNT,	   ,T,R, ,$>,-	; Counters
>>,L,<<-
	<CTA,	   , ,E, ,L>,-	; Counter absolute timer	(seconds)
	<STA,	  2,Z, , ,B>,-	; State	set by user
	<SUB,	 15,Z,E, ,$>,-	;&Substate - what the line is doing
	<LCT, 	   , , , ,W>,-	; Counter delta timer		(seconds)
	<PRO,	  5,Z,C, ,B>,-	; Type
	<STI, 	   , , , ,W>,-	; Service timer			(milli-sec)
	<HTI,	   , , , ,W>,-	; LAPB holdback timer
	<MBL,	   , , , ,W>,-	; LAPB maximum block
	<MRT,	   , , , ,B>,-	; LAPB maximum retransmits
	<MWI,	   , , , ,B>,-	; LAPB maximum window
	<SLT,	   , , , ,W>,-	; Scheduling timer
	<RTT,	   , , , ,W>,-	; Retransmit timer
	<DDT,	   , , , ,W>,-	; Dead timer
	<DLT,	   , , , ,W>,-	; Delay timer
	<SRT,	   , , , ,W>,-	; Stream timer
	<BFN, 	 32, ,C, ,B>,-	; Number of rcv buffers in pool	(2 is default)
	<BUS, 16384, ,R, ,$>,-	; Receive buffer size
	<PLVEC,    , ,R, ,$>,-	; Line's PLVEC index
>>

;
; NETWORK OBJECT INFORMATION
;
$DEFCNR	OBI,-

   V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
	-			; written.  Set if UCB field is active.
	<SET,	   ,Z,E, , >,-	; Set if the CNF was ever modified by a "set"
	-			; QIO and therefore not just a "declared"
	-			; object (note that it may also be declared).
>>,L,<<-
	<NUM,	255,Z,C,M,B>,-	; Object number
	<LPR,	   ,Z, , ,L>,-	; Low order privilege mask
	<HPR,	   ,Z, , ,L>,-	; High order privilege mask
	<UCB,	   , ,E, ,L>,-	; UCB associated with object if declared name
	<PID,	   , ,E, ,L>,-	; PID associated with object if declared name
	<CHN,	   , ,E, ,W>,-	; Channel "	  "	"     "	   "	  "
	<PRX,	  3,Z, , ,B>,-	; Proxy login switch (inbound, outbound, etc.)
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; Field used to collate the database
	<NAM,	 16,A,C,S,L>,-	; Name
	<FID,	 64,F, , ,L>,-	; File id 
	<USR,	 39,A, , ,L>,-	; User id
	<PSW,	 39,A,W, ,L>,-	; Password
	<ACC,	 39,A, , ,L>,-	; Account
	<ZNA,	   ,T,R,S,$>,-	; Set to make uniqueness check on zero obj+name
	<SFI,	   ,T,R, ,$>,-	; Parsed file i.d. with defaults applied
	<IAC,	   ,T,R, ,$>,-	; Concatenated inbound access control
	-			; - may get it from NDI CNF for local node
>>

;
; Event Sink Information
;
$DEFCNR	ESI,-

   V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
	-			; written.
>>,L,<<-
	<STA,	  2,Z, , ,B>,-	; Logging state
	-			;
	-			;	ESI$C_STA_ON	On
	-			;	ESI$C_STA_OFF	Off
	-			;	ESI$C_STA_HLD	Hold
	-			;
	<SNK,	  3, ,C,S,B>,-	; Sink type
	-			;
	-			;	ESI$C_SNK_CON	Console
	-			;	ESI$C_SNK_FIL	File
	-			;	ESI$C_SNK_MON	Monitor
	-			;
	<SP1,	   ,Z, , ,W>,-	; Spare
	<B1,	   ,Z,C, ,L>,-	; For user specified use
	<B2,	   ,Z, , ,L>,-	; For user specified use
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; Field used to collate the database
	<LNA,	255,A,C, ,L>,-	; Sink name 
	<SB1,	255,T, , ,L>,-	; For user specified use
	<SB2,	255,T, , ,L>,-	; For user specified use
	<SB3,	255,T,C, ,L>,-	; For user specified use
>>
;
; Event Filter Information
;
$DEFCNR	EFI,-

   V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
	-			; written.
>>,L,<<-
	<SIN, MXNOD,Z, ,S,W>,-	; Sink node address
	<SP1,	   ,Z, , ,W>,-	; Spare
	<B1,	   ,Z,C, ,L>,-	; For user specified use
	<B2,	   ,Z, , ,L>,-	; For user specified use
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; Field used to collate the database
	<EVE,  1023,T, ,M,L>,-	; Event list
	<SB1,	255,T, , ,L>,-	; For user specified use
	<SB2,	255,T, , ,L>,-	; For user specified use
	<SB3,	255,T,C, ,L>,-	; For user specified use
>>

;
; LOGICAL LINK INFORMATION
;
	;
	;  Define some symbols so that the semantic table can be built
	;
	LLI$W_DLY	= XWB$W_DELAY	; Round trip delay time
	LLI$B_STA	= XWB$B_STA	; State
	LLI$W_LLN	= XWB$W_LOCLNK	; Local link number
	LLI$W_RLN	= XWB$W_REMLNK	; Remote link number
	LLI$W_PNA	= XWB$W_REMNOD	; Partner node address
	LLI$L_PID	= XWB$L_PID	; Process id
	LLI$C_LENGTH	= XWB$C_COMLNG	; Structure size

$DEFCNR	LLI,-			; Build the semantic table

   V,<<-
	<NUL,	   ,Z,R, ,$>,-	; Null field -- always has value=1
	<LCK,	   ,Z,R, ,$>,-	; Set if conditionally writable fields may not
>>,L,<<-
	<PID,	   , ,E, ,L>,-	; Process I.D. of owner
	<DLY,	   , ,E, ,W>,-	; Round trip delay time
	<LLN,	   , ,E, ,W>,-	; Local link number
	<RLN,	   , ,E, ,W>,-	; Remote link number
	<PNA,	   , ,E, ,W>,-	; Partner node address
	<STA,	   , ,E, ,B>,-	; State
>>,S,<<-
	<COL,	 32, ,R,S,$>,-	; Field used to collate the database
	<USR,	 39, ,R, ,$>,-	; User id
	<PRC,	 39, ,R, ,$>,-	; Process name
	<PNN,	  6, ,R, ,$>,-	; Remote node name
	<RID,	   , ,E, ,$>,-	; Remote i.d. (PID, process name, username, etc)
>>
.ALIGN	LONG

LLICNF$AW_ACT_PRM::				; Build a table of LLI param
	.WORD	NFB$C_LLI_PID & NFB$M_INX	; indexes which correspond to 
	.WORD	NFB$C_LLI_DLY & NFB$M_INX	; the parameters for which no
	.WORD	NFB$C_LLI_LLN & NFB$M_INX	; action routines exist. These
	.WORD	NFB$C_LLI_RLN & NFB$M_INX	; parameters correspond directly
	.WORD	NFB$C_LLI_PNA & NFB$M_INX	; to XWB fields and are
	.WORD	NFB$C_LLI_STA & NFB$M_INX	; considered to be set for all
	.WORD	0				; LLI CNF's.  The table is 
						; terminated with a zero


.ALIGN	LONG


LLICNF$W_LAST_ID == CNF$C_LENGTH + XWB$C_COMLNG	; Define offset for end of PLI

NET$T_CNF_LLI::     .BLKB  LLICNF$W_LAST_ID + 4	; Define common PLI CNF block

.ALIGN	LONG



	.PSECT	NET_PURE,LONG,NOEXE,NOWRT


NET$AL_CNF_DFLT::  .LONG  0[NFB$C_DB_MAX+1]  ; Vector of tables used to supply
					     ; default database param values

$CNF_DEF LNI,-			; Local Node Default Parameter Settings

    <-
	<DAC,l, NMA$C_ACES_BOTH>,- ; Default access switch
	<ETY,l, NDI$C_DTY_PH3>,-   ; Type	

	<DFA,l,   64>,-		; Delay factor	
	<DWE,l,    2>,- 	; Delay weight	
	<RFA,l,   10>,-		; Retransmit factor 
	<ITI,l,   45>,-		; Incoming timer    		(units = sec)
	<OTI,l,   45>,-		; Outgoing timer    		(units = sec)
	<IAT,l,   60>,-		; Inactivity timer  		(units = sec)
	<RTI,l,  600>,-		; Routing timer			(units = sec)
	<RSI,l,    1>,-		; Min routing delay interval	(units = sec)
	<MLK,l,   32>,-		; Maximum supported logical links
	<MCO,l, 1023>,-		; Maximum cost
	<MHO,l,   31>,-		; Maximum hops
	<MVI,l,   63>,-		; Maximum visits
   >

$CNF_DEF  NDI,-			; Remote Node Default Parameter Settings
				; No default settings

$CNF_DEF  CRI,-			; Circuit Default Parameter Settings

   <-
	<STA,l, NMA$C_STATE_OFF>,- ; State set by user

	<SER,v,   0>,-		; Service		 (0 if enabled)
	<VER,v,   1>,-		; Transport verification (0 if requested)
	<COS,l,  25>,-		; Cost
	<HET,l,  13>,-		; Hello timer		 (seconds)
	<LIT,l,  30>,-		; Listen timer		 (seconds)
	<MRB,l, 255>,-		; Maximum receive buffers (255 => UNLIMITED)
   >

$CNF_DEF  PLI,-			; Physical Line Default Parameter Settings

   <-
	<STA,l, NMA$C_STATE_OFF>,- ; State set by user
-;	<PRO,l, NMA$C_LINPR_DMC>,- ; Type
	<DUP,v,  0>,-		; Duplex		(set if halfduplex)
	<CON,v,  0>,-		; Controller		(set if loopback)
	<BFN,l,  4>,-		; Number of rcv buffers in pool	
   >

$CNF_DEF  OBI,-			; Network Object Default Parameter Settings
				; No default settings

$CNF_DEF  ESI,-			; Event Sink default parameter settings
				; No default settings

$CNF_DEF  EFI,-			; Event Filter default parameter settings
				; No default settings

$CNF_DEF  LLI,-			; Logical-link default parameter settings
				; No default settings


	.PSECT	NET_IMPURE,LONG,NOEXE

;
;  Build the TASK OBI
;
BLD_OBI_TASK:	$BLDCNF obi,<-
			    <obi,s,nam, TASK>	-; Object name
			    <obi,l,num, 0>	-; Object number 
		>
BLD_OBI_FAL:	$BLDCNF obi,<-
			    <obi,s,nam, FAL>	-; Object name
			    <obi,l,num, 17>	-; Object number
		>
BLD_OBI_HLD:	$BLDCNF obi,<-
			    <obi,s,nam, HLD>	-; Object name
			    <obi,l,num, 18>	-; Object number
		>
BLD_OBI_NML:	$BLDCNF obi,<-
			    <obi,s,nam, NML>	-; Object name
			    <obi,l,num, 19>	-; Object number
		>
BLD_OBI_REMACP:	$BLDCNF obi,<-
			    <obi,s,nam, REMACP>	-; Object name
			    <obi,l,num, 23>	-; Object number
		>
BLD_OBI_MIRROR:	$BLDCNF obi,<-
			    <obi,s,nam, MIRROR>	-; Object name
			    <obi,l,num, 25>	-; Object number
		>
BLD_OBI_EVL:	$BLDCNF obi,<-
			    <obi,s,nam, EVL>	-; Object name
			    <obi,l,num, 26>	-; Object number
		>
BLD_OBI_MAIL:	$BLDCNF obi,<-
			    <obi,s,nam, MAIL>	-; Object name
			    <obi,l,num, 27>	-; Object number
		>
BLD_OBI_PHONE:	$BLDCNF obi,<-
			    <obi,s,nam, PHONE>	-; Object name
			    <obi,l,num, 29>	-; Object number
		>
BLD_OBI_DTR:	$BLDCNF obi,<-
			    <obi,s,nam, DTR>	-; Object name
			    <obi,l,num, 63>	-; Object number
		>
;
;  Build NDI block for the local node
;
BLD_NDI_LOC:	$BLDCNF ndi,<-
			    <ndi,l,ADD, 0>	-; Address is 0 at boot time
		>

;
;  Build the LNI block
;
BLD_LNI:	$BLDCNF lni,<-
			    <lni,l,sta, LNI$C_STA_INIT>	-; Local state

			    <lni,l,add, 0>	-; Local address
			    <lni,l,mln, 0>	-; Max lines	
			    <lni,l,mbu, 2>	-; Max buffers	
			    <lni,l,mad, 1>	-; Max node address
			    <lni,l,bus, 1000>	-; Buffer size	
			    <lni,s,nve, 320>	-; NSP version is 3.2.0	
			    <lni,s,rve, 130>	-; Routing version is 1.3.0
			    <lni,s,mve, 220>	-; Network Management version 
						-; is 2.2.0

			    <lni,s,ide, <DECnet-VAX V3.0,  VMS 12345678>> -
			>

.=.-12					; Backup in order to stuff version 
NET$GQ_VERSION:: .BYTE	0[8]		; of VMS
		 .LONG	0		; All $BLDCNF blocks are terminated by
					; a zero


			
		.ALIGN	LONG
		.PSECT	ZZZ_CONF_CODE,LONG,EXE
;+
; NET$INI_CONFIG - Init internal configuration data base
;
; FUNCTIONAL DESCRIPTION:
;
;-
NET$INI_CONFIG::  .WORD ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	CLRL	L^NET$GL_FLAGS		; Clear internal flags
	;
	;
	;   Fill the NDI vector table
	;
	MOVL	L^NET$GL_CNR_NDI,R11	; Setup NDI root
	JSB	L^CNF$INIT_UTL		; Init "utility buffer" as a CNF
	CLRL	R8			; Use harmless field value
	$CNFFLD	ndi,l,add,R9		; Stuff it into the CNF
	JSB	L^CNF$PUT_FIELD		;
	BLBS	R0,4$			; If LBS then okay
	BUG_CHECK  NETNOSTATE,FATAL	; Programming error
4$:	JSB	L^CNF$CLONE		; Clone a CNF copy from ACP pool
	BLBS	R0,6$			; If LBS then okay
	BUG_CHECK  NETNOSTATE,FATAL	; Programming error
6$:	BISB	#CNF$M_FLG_ACP,-	; Mark it as the catch-all CNF
		    CNF$B_FLG(R10)	;
	MOVL	R10,L^NET$GL_DUM_NDI	; Store it
	MOVL	#MXNOD,R8		; Setup the max node address
	MOVAL	L^NET$AL_NDI_VEC,R1	; Point to the CNF vector
8$:	MOVL	R10,(R1)+		; Fill the vector
	SOBGEQ	R8,8$			; Loop for each node (including node #0)
	;
	;
	;   Insert minimally required entries into data base
	;
	MOVAL	L^BLD_VEC,R6		; Setup vector pointer
10$:	MOVL	(R6)+,R5		; Get address of parameter buffer
	BEQL	100$			; Done if EQL
	MOVL	(R5)+,R11		; Get the CNR pointer
	JSB	L^CNF$INIT_UTL		; Init "utility buffer" as a CNF
	BLBS	R0,20$			; If LBS then okay
	BUG_CHECK NETNOSTATE,FATAL	; Else programming bug
20$:	MOVL	(R5)+,R9		; Get next field i.d.
	BEQL	50$			; If EQL then no more fields
	MOVZBL	(R5)+,R7		; Get size of string
	BEQL	30$			; If EQL then its not a string
	MOVAB	(R5),R8			; Point to string
	ADDL	R7,R5			; Advance past string
	BRB	40$			; Continue in common
30$:	MOVL	(R5)+,R8		; Get field value
40$:	JSB	L^CNF$PUT_FIELD		; Move the field to the CNF block
	BLBS	R0,20$			; If LBS then successful, loop
	BUG_CHECK NETNOSTATE,FATAL	; Else programming bug
50$:	;
	;
	;   Insert the CNF into the database
	;
	PUSHL	R6			; Save reg
	CLRL	R6			; Say "no former CNF to replace"
	JSB	L^CNF$INSERT		; Insert the CNF block
	POPL	R6			; Restore reg
	BLBS	R0,10$			; Loop if successful
	BUG_CHECK NETNOSTATE,FATAL	; Else a bug exists
	;
	;
	;   Done
	;
100$:	MOVL	#1,R0			; Indicate success
	RET				; Done

.END
