	.TITLE	NETCTLPH2- Process PH2 ACP control Qio's
	.IDENT	'V03-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY:	NETWORK ACP
;
; ABSTRACT:
;
;	This module performs the processing necessary to support the Phase II
;	Control QIO's for backward compatibility
;
; ENVIRONMENT:
;
;	MODE = KERNEL
;
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 19-Mar-1980
;
; MODIFIED BY:
;
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CNFDEF
	$CNRDEF
	$NETSYMDEF
	$NFDDEF
	$RCBDEF
	$NDCDEF
	$NDIDEF
	$LNIDEF				; Local Node Info
	$DLIDEF				; Data Link Info

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;


;
; OWN STORAGE:
;
	.PSECT	NET_IMPURE,WRT,NOEXE,LONG

TMP_W_COUNTER:	.BLKW	1		; To hold next phase II counter
PARAM_BUF:	.BLKB	32		; Space for holding original P1-P4
NODNAMS_P3_BUF:	.BLKW	1		; Resultant string length
NODNAMS_P3_LTH=.-NODNAMS_P3_BUF		; Size of P3 "buffer"

COUNT_B_BUFFER:	.BLKB	RCB$C_CNT_SIZE+NDC$C_LENGTH ; For local node ctrs

	.PSECT	NET_PURE,NOWRT,NOEXE,LONG
;
; Parameters to simulate GETNODNAMS function
;
NODNAMS_P1_BUF:				; P1 Descriptor
	.BYTE	NFD$C_SHOW_ALL		; Function code
	.LONG	NFD$C_PM_DLI		; Parameter
	.BYTE	0			; Spare byte
	.WORD	1			; 1 bitmask
	.LONG	<<dli$c_l_mask>@16>!-	; Looking for "TOTAL STATE"
		  dli$v_l_tot
	.LONG	-1			; Start from beginning
	.LONG	<<dli$c_s_mask>@16>!-	; Return line's phase II partner name
		  dli$v_s_p2p

NODNAMS_P1_LTH=.-NODNAMS_P1_BUF

NODNAMS_P2_BUF:				; P2 descriptor
	.LONG	<<dli$c_sub_run>@8>!-	; Looking for lines used for normal
		  dli$c_sta_on		; network traffic

NODNAMS_P2_LTH=.-NODNAMS_P2_BUF


NODNAMS_B_FAKE:				; Fake parameter descriptors - in order
	.LONG		NET$C_UTLBUFSIZ
	.ADDRESS	NET$AB_UTLBUF	; Use utility buffer for result
	.LONG		NODNAMS_P3_LTH
	.ADDRESS	NODNAMS_P3_BUF
	.LONG		NODNAMS_P2_LTH
	.ADDRESS	NODNAMS_P2_BUF
	.LONG		NODNAMS_P1_LTH
	.ADDRESS	NODNAMS_P1_BUF
;
; Parameters to simulate GETLINNAMS function
;
LINNAMS_P1_BUF:				; P1 Descriptor
	.BYTE	NFD$C_SHOW_ALL		; Function code
	.LONG	NFD$C_PM_DLI		; Parameter
	.BYTE	0			; Spare byte
	.WORD	1			; 1 bitmask
	.LONG	-1			; Match anything
	.LONG	-1			; Start from beginning
	.LONG	<<dli$c_l_mask>@16>!-	; Return line's phase II name
		  dli$v_l_ph2

LINNAMS_P1_LTH=.-LINNAMS_P1_BUF


LINNAMS_B_FAKE:				; Fake parameter descriptors - in order
	.LONG		NET$C_UTLBUFSIZ
	.ADDRESS	NET$AB_UTLBUF	; Use utility buffer for result
	.LONG		NODNAMS_P3_LTH
	.ADDRESS	NODNAMS_P3_BUF
	.LONG		0
	.ADDRESS	0
	.LONG		LINNAMS_P1_LTH
	.ADDRESS	LINNAMS_P1_BUF
;
; Parameters to simulate GETLOCCTRS function
;
LOCCTRS_P1_BUF1:			; P1 Descriptor
	.BYTE	NFD$C_SHOW		; Function code
	.LONG	NFD$C_PM_LNI		; Parameter
	.BYTE	0			; Spare byte
	.WORD	1			; 1 bitmask
	.LONG	-1			; Match anything
	.LONG	-1			; Start from beginning
	.LONG	<<lni$c_s_mask>@16>!-	; Return local counters
		  lni$v_s_cnt

LOCCTRS_P1_LTH1=.-LOCCTRS_P1_BUF1


LOCCTRS_B_FAKE1:			; Fake parameter descriptors - in order
	.LONG		NET$C_UTLBUFSIZ
	.ADDRESS	NET$AB_UTLBUF	; Use utility buffer for result
	.LONG		NODNAMS_P3_LTH
	.ADDRESS	NODNAMS_P3_BUF
	.LONG		0
	.ADDRESS	0
	.LONG		LOCCTRS_P1_LTH1
	.ADDRESS	LOCCTRS_P1_BUF1


LOCCTRS_P1_BUF2:			; P1 Descriptor
	.BYTE	NFD$C_SHOW		; Function code
	.LONG	NFD$C_PM_NDI		; Parameter
	.BYTE	0			; Spare byte
	.WORD	1			; 1 bitmask
	.LONG	<<ndi$c_l_mask>@16>!-	; Looking for node address
		  ndi$v_l_add
	.LONG	-1			; Start from beginning
	.LONG	<<ndi$c_s_mask>@16>!-	; Return node counters
		  ndi$v_s_cnt

LOCCTRS_P1_LTH2=.-LOCCTRS_P1_BUF2


LOCCTRS_P2_BUF2:			; P2 descriptor
	.LONG	0			; Looking for address 0

LOCCTRS_P2_LTH2=.-LOCCTRS_P2_BUF2

LOCCTRS_B_FAKE2:			; Fake parameter descriptors - in order
	.LONG		NET$C_UTLBUFSIZ
	.ADDRESS	NET$AB_UTLBUF	; Use utility buffer for result
	.LONG		NODNAMS_P3_LTH
	.ADDRESS	NODNAMS_P3_BUF
	.LONG		LOCCTRS_P2_LTH2
	.ADDRESS	LOCCTRS_P2_BUF2
	.LONG		LOCCTRS_P1_LTH2
	.ADDRESS	LOCCTRS_P1_BUF2

	.PSECT	NET_CONTROL,NOWRT,LONG,EXE

	.SBTTL	Obtain Data Link Information
;+
; NET$GET_LINNAMS - Return a counted list of line names
; NET$GET_NODNAMS - Return a counted list of node names
; NET$GET_LOC_CTR - Get local counters
;
; FUNCTIONAL DESCRIPTION:
;
; A counted list of names is returned via the P4 descriptor.
;
; INPUTS:	*** tbs ***
;
; OUTPUTS:	*** tbs ***
;
;		NOTE - See NET$MOV_CSTR and NET$MOV_STR
;		for more INPUTS and OUTPUTS
;-

NET$GET_LOC_CTR::			; Get local counters
	MOVAB	W^LOCCTRS_B_FAKE1,R6	; Get address of internal buffer
	BSBW	GET_PH2_INFO		; Get the LNI counters (phase III)
	MOVAB	W^NET$AB_UTLBUF,R6	; Point to result buffer
	MOVC3	#RCB$C_CNT_SIZE,10(R6),-; Save LNI counters - no time
		W^COUNT_B_BUFFER
	MOVAB	W^LOCCTRS_B_FAKE2,R6	; Get address of internal buffer
	BSBB	GET_PH2_INFO		; Get the NDI counters (phase III)
	MOVAB	W^NET$AB_UTLBUF,R6	; Point to result buffer
	MOVAB	W^COUNT_B_BUFFER,R9	; Point to counter buffer
	MOVC3	#NDC$C_LENGTH,6(R6),-	; Store the NDC counters for local node
		RCB$C_CNT_SIZE(R9)
	CLRL	W^NET$GL_PM_OUT		; Reset no. items found
	MOVW	#2,R7			; Get lth of each counter
	MOVAB	W^TMP_W_COUNTER,R8	; Point to location for holding ctr
;
; Use brute force to take LNI and NDC counters and convert them
; A table driven approach might be prettier, but coding is more complex
;
	MOVL	12(R9),R0		; 1. Seconds since last zeroed
	BSBB	PHASEII_COUNT		; Store it (NDC$L_ABS_TIM)
	MOVL	32(R9),R0		; 2.  Packets received
	BSBB	PHASEII_COUNT		; Store it (NDC$L_PRC)
	MOVL	36(R9),R0		; 3. Packets sent
	BSBB	PHASEII_COUNT		; Store it (NDC$L_PSN)
	BSBB	PHASEII_COUNT0		; 4. Extraneous msgs (ignored)
	BSBB	PHASEII_COUNT0		; 5. Routing format errors (ignored)
	MOVZBL	3(R9),R0		; 6. Packet format errors
	BSBB	PHASEII_COUNT		; Store it (RCB$B_CNT_PFE)
	MOVZWL	16(R9),R0		; 7. Resource errors
	BSBB	PHASEII_COUNT		; Store it (NDC$W_RSE)
	BSBB	PHASEII_COUNT0		; 8. Successful node inits (ignored)
	MOVZBL	5(R9),R0		; 9. Unsuccessful node inits
	BSBB	PHASEII_COUNT		; Store it (RCB$B_CNT_VER)
	BSBB	PHASEII_COUNT0		; 10. Currently active logical links(ignored)
	MOVZWL	10(R9),R0		; 11. Max links active
	BSBB	PHASEII_COUNT		; Store it (RCB$W_CNT_MLL)
	MOVZWL	22(R9),R0		; 12. Connects sent
	BSBB	PHASEII_COUNT		; Store it (NDC$W_CSN)
	MOVZWL	20(R9),R0		; 13. Connects received
	BSBB	PHASEII_COUNT		; Store it (NDC$W_CRC)
	RSB				; Done


;+
; PHASEII_COUNT - routine to keep counter in range < 32767 and store in bfr
; PHASEII_COUNT0 - Same, but stuff 0 for count
;
; INPUTS:	R0 - value
;		R7 - 2 (always two bytes to be stored)
;		R8 - address of where word value is to be stored
;
;-

PHASEII_COUNT0:
	CLRL	R0			; No counter provided

PHASEII_COUNT:
	CMPL	R0,#32767		; Within range?
	BLEQU	20$			; If LEQU yes
	MNEGL	#1,R0			; Latch the counts
20$:	MOVW	R0,(R8)			; Put value away
	BSBW	NET$MOV_STR		; Store counter in result buffer
	BLBS	R0,40$			; If LBS OK
	ADDL2	#4,SP			; Return to caller's caller
40$:	RSB

;+
;
; GET_PH2_INFO - This routine picks up information internally to simulate
;		operation of the Version 1 control QIO's
;
; INPUTS:	R6 - address of internal parameters descriptors
;
; OUTPUTS:	NET$GL_PTR_P4 - address of internal result buffer
;		R6 - preserved
;
;-
GET_PH2_INFO:
	BSBW	NET$GETUTLBUF		; Get access to utility buffer
	MOVC3	#32,W^NET$GL_SIZ_P4,-	; Squirrel away users parameters
		W^PARAM_BUF
	MOVC3	#32,(R6),W^NET$GL_SIZ_P4 ; Stuff the internal parameters
	PUSHL	R6			; Save pointer
	BSBW	NET$SHOW_ALL		; Get the information internally
	POPL	R6			; Restore the pointer
	MOVC3	#32,W^PARAM_BUF,-	; Restore the user's parameters
		W^NET$GL_SIZ_P4
	RSB				; Done


NET$GET_LINNAMS::			; Get counted list of linenames
	MOVAB	W^LINNAMS_B_FAKE,R6	; Get address of internal buffer
	BSBB	GET_PH2_INFO		; Get the names of active lines
	CLRL	W^NET$GL_PM_OUT		; Reset no. of names found
	MOVAB	W^NET$AB_UTLBUF,R8	; Point to result buffer
	MOVL	(R8)+,R11		; Get no. of items returned
	BEQL	30$			; If EQL none
10$:
	MOVW	#4,R7			; Get lth of next line name
	BSBW	NET$MOV_STR		; Store name in result buffer
	BLBC	R0,40$			; If LBC error
	MOVL	R1,R8			; Fix up pointer
	SOBGTR	R11,10$			; Loop
30$:	MOVZWL	S^#SS$_NORMAL,R0	; Indicate success
40$:	RSB


NET$GET_NODNAMS::			; Get counted list of nodenames
	MOVAB	W^NODNAMS_B_FAKE,R6	; Get address of internal buffer
	BSBB	GET_PH2_INFO		; Get the names of active nodes
	CLRL	W^NET$GL_PM_OUT		; Reset no. of names found
	MOVAB	W^NET$AB_UTLBUF,R8	; Point to result buffer
	MOVL	(R8)+,R11		; Get no. of items returned
	BEQL	30$			; If EQL none
10$:
	MOVW	(R8)+,R7		; Get lth of next node name
	BSBW	NET$MOV_CSTR		; Store name in result buffer
	BLBC	R0,40$			; If LBC error
	MOVL	R1,R8			; Fix up pointer
	SOBGTR	R11,10$			; Loop
30$:	MOVZWL	S^#SS$_NORMAL,R0	; Indicate success
40$:	RSB



.END
