MODULE inituser (IDENT = 'V03-002',
	ADDRESSING_MODE(EXTERNAL = GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Login
!
! ABSTRACT:
!
!	This module handles all user-specific and CLI initializations.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
! AUTHOR:  Tim Halvorsen, March 1981
!
! Modified by:
!
!	V03-01	GAS0076		Gerry Smith		23-Apr-1982
!		Get NFB definitions from SHRLIB$:NET.L32
!
!	V02-012	GAS0052		Gerry Smith		23-Feb-1982
!		Change the UIC from [10,40] to [1,4], since 10 is
!		not necessarily a system group-number.
!
!	V02-011	SPF0041		Steve Forgey		02-Dec-1981
!		Add routine to get remote node information.
!
!	V02-010	HRJ0032		Herb Jacobs		12-Nov-1981
!		Fix maximization of WSEXTENT field, set account name
!		in JIB, and set time of day restrictions in JIB.
!
!	V02-009	LJK0068		Lawrence J. Kenah	12-Nov-1981
!		Add initialization of PHD$B_AUTHPRI with new value
!		of base priority.
!
!	V02-008	TMH0008		Tim Halvorsen		27-Oct-1981
!		Remove code to initialize CLIREG to LOGIN module.
!		Remove code to store ORIGUIC to LOGIN module, since
!		it is now stored in the LGI area.
!		Add extra acmode argument to EXEC_CRELOG routine.
!
!	V02-007	TMH0007		Tim Halvorsen		12-Oct-1981
!		Update size of CLI OWN storage in P1 space using symbol
!		provided by SHELL rather than having the size hard-coded
!		here as well as in SHELL.
!
!	V02-006	LJK0063		Lawrence J. Kenah	16-Sep-1981
!		Change name of external procedure to LIB$P1_MERGE.
!
!	V02-005	SPF0032		Steve Forgey	16-Sep-1981
!		Use $GETDEV to get terminal name and unit number.
!
!	V02-004	SPF0031		Steve Forgey		15-Sep-1981
!		Create a routine to set the terminal name in the PCB.
!
!	V02-003	ROW0021		Ralph O. Weber		19-Aug-1981
!		Make changes for longword Buffered I/O Byte Limit Quota.  
!		INIT_KERNEL has been modified to copy UAF$L_BYTLM into 
!		JIB$L_BYTLM unless UAF$L_BYTLM is zero.  When UAF$L_BYTLM is 
!		zero, INIT_KERNEL copies UAF$W_BYTLM to JIB$L_BYTLM.  Thus 
!		INIT_KERNEL whether or not the UAF record contains a valid 
!		value in UAF$L_BYTLM (ie: it works properly for both old and 
!		new format UAF records).  (NB: the difference between the 
!		word, old style, and longword, new style, names).  All 
!		programs which operate on the User Authorization File 
!		(eg: AUTHORIZE and LOGINOUT) will be modified to first check 
!		UAF$L_BYTLM and if it is zero use UAF$W_BYTLM.
!
!	V02-002	HRJ0023		Herb Jacobs	16-Jul-1981
!		Initialize authorized working set extent field PHD$W_WSEXTENT.
!
!	V02-001	TMH0001		Tim Halvorsen	16-Jul-1981
!		Reference SHRLIB$ for shared require files.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions

REQUIRE 'SHRLIB$:UTILDEF';		! Common BLISS definitions

LIBRARY 'SHRLIB$:NET';			! Network definitions

REQUIRE 'LIB$:PPDDEF';			! Process permanent data region

!
! Table of contents
!

FORWARD ROUTINE
    init_user:		NOVALUE,	! Initialize user process quotas, etc.
    init_kernel:	NOVALUE,	! Initialize user in kernel mode
    init_cli:		NOVALUE,	! Initialize CLI image
    setup_login_proc:	NOVALUE,	! Setup login command procedure
    map_cli:		NOVALUE,	! Map the CLI image into P1 space
    execute_cli:	NOVALUE,	! Call the CLI image at its entry point
    map_imgact:		NOVALUE,	! Map image activator code segment
    set_p1_base,			! Set base address of control region
    set_account,			! Set account name in control region
    set_username,			! Set username string in control region
    set_nodename,			! Set remote node info in P1 space
    set_termname,			! Set terminal name in PCB
    set_uic,				! Set process UIC
    exec_crelog:	NOVALUE;	! Create an executive mode logical name

!
! External routines
!

EXTERNAL ROUTINE
    set_ppd_prot,			! Set page protection on PPD structure
    handler,				! Condition handler
    sys$setddir,			! Set default directory
    lgi$protect_cli,			! Read-protect CLI code
    execute_image:	NOVALUE,	! Chain to an image
    lib$p1_merge;			! Merge image into P1 space

!
! External storage
!

EXTERNAL
    uaf_record:		REF BBLOCK,	! Address of UAF record
    sys$input:		VECTOR,		! Translation of SYS$INPUT
    sys$output:		VECTOR,		! Translation of SYS$OUTPUT
    cli_name:		VECTOR,		! Descriptor of CLI to map
    disk_name:		VECTOR,		! Descriptor of initial default disk
    com_name:		VECTOR,		! Descriptor of procedure to execute
    com_negated:	BYTE,		! True if procedure inhibited
    subprocess:		BYTE,		! True if subprocess
    image_activate:	BYTE,		! True if image to be activated
    mmg$imghdrbuf,			! Image header buffer
    ctl$ag_climage,			! Address of CLI code in control region
    ctl$ag_clidata;			! Process permanent data region

BIND
    ppd = ctl$ag_clidata: BBLOCK;	! Address of PPD structure

!
! Define message codes
!

EXTERNAL LITERAL
    lgi$_clifail,
    lgi$_cliprot,
    lgi$_clisymtbl;

!
! Macro to create an executive mode logical name
!

MACRO
    create_logname (lognam, eqlnam, acmode) =
	BEGIN
	LOCAL arglist: VECTOR [4];
	arglist [0] = 3;
	arglist [1] = lognam;
	arglist [2] = eqlnam;
	arglist [3] = acmode;
	$CMEXEC(ROUTIN = exec_crelog,
		ARGLST = arglist);
	END%;

GLOBAL ROUTINE init_user: NOVALUE =

!---
!
!	Initialize all user context for the process.  All
!	information from the UAF record is set into the appropriate
!	places in the executive database, such as the UIC, privileges,
!	base priority, limits, quotas, account name, etc.
!
! Inputs:
!
!	uaf_record = Address of UAF record for user (must be non-zero)
!	disk_name = Descriptor of device name to be used as SYS$DISK
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    ptr,
    username:	VECTOR [2],		! Descriptor of username
    account:	VECTOR [2],		! Descriptor of account name
    device:	VECTOR [2],		! Descriptor of default device
    directory:	VECTOR [2];		! Descriptor of default directory

!
! Set base priority for process
!

IF NOT .ppd [ppd$v_mode]		! If not batch, network or detached,
THEN
    $SETPRI(PRI = .uaf_record [uaf$b_pri]); ! Set base priority

!
! Set default directory
!

directory [0] = CH$RCHAR(uaf_record [uaf$t_defdir]); ! Get descriptor of directory
directory [1] = uaf_record [$BYTEOFFSET(uaf$t_defdir)+1,0,0,0];

SYS$SETDDIR(directory, 0, 0);		! Set default directory

!
! Set default disk (logical name SYS$DISK)
!

IF .disk_name [0] EQL 0			! If no explicit disk specified
THEN
    BEGIN
    device [0] = CH$RCHAR(uaf_record [uaf$t_defdev]); ! Get UAF disk name
    device [1] = uaf_record [$BYTEOFFSET(uaf$t_defdev)+1,0,0,0];
    END
ELSE
    BEGIN
    device [0] = .disk_name [0];	! Else, use what user specifies
    device [1] = .disk_name [1];
    END;

IF .device [0] NEQ 0			! If device specified,
THEN
    create_logname(%ASCID 'SYS$DISK', device, psl$c_exec);

!
! Set the username string
!

ptr = CH$FIND_CH(uaf$s_username, uaf_record [uaf$t_username], ' ');

IF CH$FAIL(.ptr)			! If no space found,
THEN
    ptr = uaf_record [uaf$t_username] + uaf$s_username; ! Use entire thing

username [0] = CH$DIFF(.ptr, uaf_record [uaf$t_username]);
username [1] = uaf_record [uaf$t_username];

$CMKRNL(ROUTIN = set_username,		! Set username string
	ARGLST = username);

!
! Set the process UIC
!

$CMKRNL(ROUTIN = set_uic,		! Set the UIC
	ARGLST = .uaf_record [uaf$l_uic]);

!
! Set the account name for the process
!

account [0] = uaf$s_account;		! Setup descriptor of string
account [1] = uaf_record [uaf$t_account];

$CMKRNL(ROUTIN = set_account,		! Set account for process
	ARGLST = account);

!
! Set process name to username.  If this fails, the process name will be
! left to the orignal name, in the form _TTxx:
!

IF NOT .ppd [ppd$v_mode]		! If not batch, network or detached,
THEN
    $SETPRN(PRCNAM = username);		! Set process name (ignore errors)

!
! Perform kernel mode initialization
!

$CMKRNL(ROUTIN = init_kernel);		! Copy UAF fields into proper places

END;

ROUTINE init_kernel: NOVALUE =

!---
!
!	Initialize process context in kernel mode.
!
! Inputs:
!
!	Access mode is kernel.
!
!	sys$output = Descriptor of terminal name
!	uaf_record = Address of UAF record for user (must be non-zero)
!
! Outputs:
!
!	None
!---

BEGIN

EXTERNAL
    ctl$gl_pcb,				! Address of PCB
    ctl$gl_phd,				! Address of process header
    ctl$gl_wspeak,			! Peak working set size
    ctl$gl_virtpeak,			! Peak page file usage
    ctl$gq_procpriv,			! Process permanent privileges
    pfn$gl_phypgcnt,			! Total physical pages of memory
    sch$gl_freelim,
    sgn$gl_maxwscnt;			! SYSGEN parameter WSMAX

LOCAL
    pcb:	REF BBLOCK,		! Address of PCB
    phd:	REF BBLOCK,		! Address of PHD
    jib:	REF BBLOCK,		! Address of JIB
    arb:	REF BBLOCK,		! Address of ARB
    available_memory;			! Amount of available physical memory

ctl$gl_wspeak = 0;			! Initialize peak working set usage
ctl$gl_virtpeak = 0;			! Initialize peak page file usage

pcb = .ctl$gl_pcb;			! Get address of PCB
jib = .pcb [pcb$l_jib];			! Get address of JIB

pcb [pcb$w_biolm] = .uaf_record [uaf$w_biolm];
pcb [pcb$w_biocnt] = .uaf_record [uaf$w_biolm];
pcb [pcb$w_diolm] = .uaf_record [uaf$w_diolm];
pcb [pcb$w_diocnt] = .uaf_record [uaf$w_diolm];
jib [jib$l_bytcnt] = jib [jib$l_bytlm] =
			(if .uaf_record [uaf$l_bytlm] neq 0
				then .uaf_record [uaf$l_bytlm]
				else .uaf_record [uaf$w_bytlm]);
jib [jib$w_prclim] = .uaf_record [uaf$w_prccnt];
jib [jib$w_filcnt] = .uaf_record [uaf$w_fillm]
			+ (.jib [jib$w_filcnt] - .jib [jib$w_fillm]);
jib [jib$w_fillm] = .uaf_record [uaf$w_fillm];
jib [jib$b_daytypes] = .uaf_record [uaf$b_primedays];
jib [jib$l_pdayhours] = .uaf_record [uaf$l_pdayhours];
jib [jib$l_odayhours] = .uaf_record [uaf$l_sdayhours];

phd = .ctl$gl_phd;			! Get address of PHD

available_memory = MIN(.pfn$gl_phypgcnt - .sch$gl_freelim,
			.sgn$gl_maxwscnt);

phd [phd$w_wsquota] = .phd [phd$w_wslist]-1
		+ MIN(.uaf_record [uaf$w_wsquota], .available_memory);

phd [phd$w_wsextent] = .phd [phd$w_wslist]-1
		+ MIN(.uaf_record [uaf$w_wsextent], .available_memory);

phd [phd$w_wsextent] = MAX(.phd [phd$w_wsquota],.phd [phd$w_wsextent]);

phd [phd$w_wsauth] = .phd [phd$w_wsquota];

phd [phd$w_wsauthext] = .phd [phd$w_wsextent];

phd [phd$w_dfwscnt] = MIN(.phd [phd$w_wsauth],
		.phd [phd$w_wslist]-1 + .uaf_record [uaf$w_dfwscnt]);
jib [jib$l_pgflcnt] = .jib [jib$l_pgflcnt]
		+ (.uaf_record [uaf$l_pgflquota] - .jib [jib$l_pgflquota]);
jib [jib$l_pgflquota] = .uaf_record [uaf$l_pgflquota];

phd [phd$w_astlm] = .uaf_record [uaf$w_astlm];
pcb [pcb$w_astcnt] = .uaf_record [uaf$w_astlm];
jib [jib$w_tqlm] = .uaf_record [uaf$w_tqcnt];
jib [jib$w_tqcnt] = .uaf_record [uaf$w_tqcnt];
phd [phd$l_cpulim] = .uaf_record [uaf$l_cputim];
jib [jib$l_cpulim] = .uaf_record [uaf$l_cputim];
jib [jib$w_enqlm] = .uaf_record [uaf$w_enqlm];
jib [jib$w_enqcnt] = .uaf_record [uaf$w_enqlm];
jib [jib$w_shrflim] = .uaf_record [uaf$w_shrfillm];
jib [jib$w_shrfcnt] = .uaf_record [uaf$w_shrfillm];
jib [jib$l_pbytlim] = .uaf_record [uaf$l_pbytlm];
jib [jib$l_pbytcnt] = .uaf_record [uaf$l_pbytlm];

phd [phd$b_authpri] = .pcb [pcb$b_prib];    ! Reset authorized priority

arb = .pcb [pcb$l_arb];			! Get address of ARB

CH$MOVE(8, uaf_record [uaf$q_priv], phd [phd$q_authpriv]);
CH$MOVE(8, uaf_record [uaf$q_priv], arb [arb$q_priv]);
CH$MOVE(8, uaf_record [uaf$q_priv], ctl$gq_procpriv);

IF NOT .ppd [ppd$v_mode]		! If not batch, network or detached,
THEN set_termname();			! Then set terminal name in PCB

END;

GLOBAL ROUTINE init_cli: NOVALUE =

!---
!
!	Initialize the CLI by mapping it into P1 space and
!	setting up the communication region.  The logical
!	names PROC1-N are defined to specify initialization
!	command procedures that the CLI should execute.
!
! Inputs:
!
!	cli_name = Address of descriptor of CLI name
!	uaf_record = Address of UAF record for user, if any
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    buffer:	VECTOR [128,BYTE],
    desc:	VECTOR [2];

!
! Setup fields of the PPD communication region
!

IF .uaf_record NEQ 0			! If UAF record valid
    AND .uaf_record [uaf$v_disctly]	! and ctrl/y initially disabled,
THEN
    ppd [ppd$v_noctly] = true;		! then indicate that to CLI

!
! Setup system-wide command procedure, defined by logname SYS$SYLOGIN
!

desc [0] = 128;
desc [1] = buffer;

IF $TRNLOG(LOGNAM = %ASCID 'SYS$SYLOGIN', ! If translation exists,
	RSLBUF = desc,
	RSLLEN = desc,
	DSBMSK = 6)			! look only in system table
    EQL ss$_normal
    AND NOT .subprocess			! and not a subprocess
THEN
    setup_login_proc(desc);		! Tell CLI to execute it

!
! If not a subprocess, setup the initial command procedure to execute.
!

IF .com_name [0] EQL 0			! If no command procedure to execute
    AND NOT .com_negated		! and not explicitly negated,
    AND .uaf_record NEQ 0		! and if UAF record valid,
THEN
    BEGIN
    com_name [1] = uaf_record [$BYTEOFFSET(uaf$t_lgicmd)+1,0,0,0];
    com_name [0] = CH$RCHAR(uaf_record [uaf$t_lgicmd]);
	
    IF .com_name [0] EQL 0		! If no default in UAF
    THEN
	BEGIN
	com_name [1] = UPLIT BYTE('LOGIN');
	com_name [0] = 5;
	END;
    END;

IF .com_name [0] NEQ 0			! If user has login procedure,
    AND NOT .subprocess			! and not a subprocess
THEN
    setup_login_proc(com_name);		! Tell CLI to execute it

!
! Get name of CLI to map from authorization record or user parameter.
!

IF .uaf_record NEQ 0			! If UAF record valid,
THEN
    BEGIN
    desc [0] = 0;			! Preset null
    desc [1] = uaf_record [uaf$t_defcli];

    INCRU i FROM 0 TO uaf$s_defcli-1	! Scan each character of field
    DO
	IF CH$RCHAR(.desc [1] + .i) LEQU ' '
	THEN
	    EXITLOOP desc [0] = .i;	! Exit on first non-ascii character

    IF .cli_name [0] EQL 0		! If user didn't specify CLI,
	OR .uaf_record [uaf$v_defcli]	! or user not allowed to change CLI,
    THEN
	BEGIN
	cli_name [0] = .desc [0];	! then use CLI in authorization record
	cli_name [1] = .desc [1];
	END;
    END;

IF .cli_name [0] EQL 0			! If no default CLI,
    OR .uaf_record EQL 0		! or UAF record not even valid
THEN
    BEGIN
    cli_name [1] = UPLIT BYTE('DCL');	! then use DCL
    cli_name [0] = 3;
    END;

!
! Map the CLI image into the control region.
!

$CMEXEC(ROUTIN = map_cli);		! Map the CLI image

END;

ROUTINE setup_login_proc (desc): NOVALUE =

!---
!
!	Setup a login command procedure, to be executed initially
!	before starting interactive session.  The CLI will execute
!	the procedures in the order they are give to this routine.
!
! Inputs:
!
!	desc = Address of descriptor of command procedure
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    logbuf:	VECTOR [8,BYTE],	! Buffer for logical name 'PROC#'
    logdesc:	VECTOR [2];		! Descriptor of above buffer

logdesc [0] = 5;			! Setup descriptor of logical name
logdesc [1] = logbuf;

CH$MOVE(4, UPLIT BYTE('PROC'), logbuf);	! Create logical name string

ppd [ppd$b_nprocs] = .ppd [ppd$b_nprocs] + 1; ! Increment # of login procs

logbuf [4] = '0' + .ppd [ppd$b_nprocs];	! Set procedure index into logname

$CRELOG(LOGNAM = logdesc,		! Create PROC# = login file
	EQLNAM = .desc,
	TBLFLG = log$c_process,
	ACMODE = psl$c_user);

END;

ROUTINE map_cli: NOVALUE =

!---
!
!	Map the CLI into the control region.
!
! Inputs:
!
!	Access mode is executive.
!
!	cli_name = Address of descriptor of CLI name
!
! Outputs:
!
!	None
!---

BEGIN

BUILTIN FP;

EXTERNAL
    exe$gl_clitabl;			! SYSGEN parameter CLISYMTBL

BIND
    clisymtbl = ppd [ppd$q_clisymtbl]: VECTOR;	! Reference as 2 longwords

LOCAL
    status,
    prev_uic,				! Previous UIC on entry to routine
    range:	VECTOR [2],		! Range of CLI symbol table
    desc:	VECTOR [2],		! Descriptor of CLI name
    cli_image_header:	BBLOCK [512];	! Image header from $IMGACT

.fp = handler;				! Enable condition handler

prev_uic = $CMKRNL(ROUTIN = set_uic,	! Set the UIC to [1,4]
	ARGLST = (%O'1'^16) + %O'4');	! to prevent redirections via
					! group logical names of DCL

status = lib$p1_merge(cli_name,		! Map CLI into control region
	%ASCID 'SYS$SYSTEM:.EXE',	! Default filespec for CLI
	cli_image_header,		! Return image header buffer
	ctl$ag_climage);		! Return address range

$CMKRNL(ROUTIN = set_uic,		! Restore UIC
	ARGLST = .prev_uic);

IF NOT .status				! If error detected,
THEN
    SIGNAL_STOP(lgi$_clifail,1,cli_name,.status); ! then signal fatal error

desc [0] = 1;				! Setup argument list
desc [1] = ctl$ag_climage;

status = $CMKRNL(ROUTIN = lgi$protect_cli,	! Set CLI code to read-only
	ARGLST = desc);

IF NOT .status				! If error detected,
THEN
    SIGNAL_STOP(lgi$_cliprot,0,.status); ! then signal fatal error

status = $EXPREG(PAGCNT = .exe$gl_clitabl,	! Create symbol table space
		RETADR = range,
		ACMODE = psl$c_super,
		REGION = 1);

IF NOT .status				! If error detected,
THEN
    SIGNAL_STOP(lgi$_clisymtbl, 0, .status); ! then signal fatal error

$CMKRNL(ROUTIN = set_p1_base,		! Set new base of control region
	ARGLST = .range [1]);

clisymtbl [0] = .range [0] - .range [1] + 1;	! Setup descriptor of storage
clisymtbl [1] = .range [1];

END;

GLOBAL ROUTINE execute_cli: NOVALUE =

!---
!
!	This routine is called to transfer control to the CLI
!
! Inputs:
!
!	Access mode is executive.
!
! Outputs:
!
!	None
!---

BEGIN

BUILTIN FP;

MAP FP: REF BBLOCK;			! Address of call frame

EXTERNAL LITERAL
    exe$c_cmstksz;			! # bytes after $CMEXEC frame to PC/PSL

LOCAL
    prev_fp:	REF BBLOCK,		! Address of previous frame
    pcpsl:	REF VECTOR,		! Address of previous PC/PSL pair
    psl:	REF BBLOCK;		! Address of previous PSL

!
! Change the page protection on the PPD structure to allow only supervisor
! mode write access for the protection of the CLI data storage.
!

$CMEXEC(ROUTIN = set_ppd_prot,		! Set PPD page protection
	ARGLST = prt$c_ursw);

!
! Locate the PC/PSL in the $CMEXEC call frame and alter it to point
! to the CLI entry point and set the PSL to supervisor mode.
!

prev_fp = .fp [sf$l_save_fp];		! Get address of CMEXEC call frame
pcpsl = .prev_fp + exe$c_cmstksz;	! Point to PC/PSL after argument list
pcpsl [0] = .ctl$ag_climage;		! Set PC to CLI entry point
psl = pcpsl [1];			! Get address of PSL
psl [psl$v_curmod] = psl$c_super;	! Set access mode to supervisor
psl [psl$v_prvmod] = psl$c_super;	! and previous mode as well

!
! Now, on exit from the $CMEXEC system service, control will be transferred
! to the CLI in supervisor mode.
!

END;

GLOBAL ROUTINE map_imgact: NOVALUE =

!---
!
!	Map a code segment into P1 space which, when called, will
!	unmap the login program and activate a given image.
!
! Inputs:
!
!	Access mode is executive.
!
!	sys$input = Descriptor of image file specification
!
! Outputs:
!
!	ctl$ag_climage = Address of P1 code segment to do the work
!			(should be called in executive mode)
!---

BEGIN

LOCAL
    range:	VECTOR [2];		! Range of allocated space in P1

BIND
    image_desc = mmg$imghdrbuf: VECTOR;	! Pass image filespec in buffer

image_activate = true;			! Mark image activate to be done

image_desc [0] = .sys$input [0];	! Store filespec descriptor into buffer
image_desc [1] = image_desc [2];	! as well as string itself
CH$MOVE(.sys$input [0], .sys$input [1], .image_desc [1]);

$EXPREG(PAGCNT = 1,			! Allocate one page in P1 space
	RETADR = range,
	ACMODE = psl$c_super,
	REGION = 1);

$CMKRNL(ROUTIN = set_p1_base,		! Set new base of control region
	ARGLST = .range [1]);		! so that code stays after rundown

CH$MOVE(512, execute_image, .range [1]); ! Copy code into page (max. 1 page)

ctl$ag_climage = .range [1];		! Store address of code segment

END;

ROUTINE set_p1_base =

!---
!
!	This routine resets the base address of the fixed portion
!	of the control region.
!
! Inputs:
!
!	Access mode is kernel.
!
!	ap = New base address for fixed P1
!
! Outputs:
!
!	routine = status (not signaled)
!---

BEGIN

BUILTIN
    ap;

EXTERNAL
    ctl$gl_ctlbasva;			! Base address of permanent P1 space

ctl$gl_ctlbasva = .ap;			! Set new base of fixed P1 region

RETURN true;

END;

ROUTINE set_account =

!---
!
!	Set the account string.
!
! Inputs:
!
!	access mode = Kernel
!
!	ap = Address of account name descriptor
!
! Outputs:
!
!	routine = status (not signaled)
!---

BEGIN

BUILTIN AP;

MAP AP: REF VECTOR;			! Address of account descriptor

EXTERNAL
    ctl$gl_pcb:	REF BBLOCK,
    ctl$t_account;			! Account name string

LOCAL
    jib:	REF BBLOCK;		! Address of JIB

CH$COPY(.ap [0], .ap [1], 0,		! Copy new account string, null padded
	uaf$s_account, ctl$t_account);	! to control region

jib = .ctl$gl_pcb [pcb$l_jib];		! Get JIB address

CH$COPY(.ap [0], .ap [1] , 0,		! Copy it to JIB as well
    uaf$s_account, jib [jib$t_account]);

RETURN true;

END;

GLOBAL ROUTINE set_username =

!---
!
!	Set the username string.
!
! Inputs:
!
!	access mode = Kernel
!
!	ap = Address of username name descriptor
!
! Outputs:
!
!	routine = status (not signaled)
!---

BEGIN

BUILTIN AP;

MAP AP: REF VECTOR;			! Address of account descriptor

EXTERNAL
    ctl$gl_pcb:	REF BBLOCK,
    ctl$t_username;

LOCAL
    jib:	REF BBLOCK;		! Address of JIB

CH$COPY(.ap [0], .ap [1], ' ',		! Copy username string, space padded
    uaf$s_username, ctl$t_username);	! to control region

jib = .ctl$gl_pcb [pcb$l_jib];		! Get JIB address

CH$COPY(.ap [0], .ap [1] ,' ',		! Copy it to JIB as well
    uaf$s_username, jib [jib$t_username]);

RETURN true;

END;

GLOBAL ROUTINE set_nodename =

!---
!
!	Set the node name, node address, and remote ID strings.
!
! Inputs:
!
!	access mode = Kernel
!
!	ap = Address of local link number
!
! Outputs:
!
!	routine = status (not signaled)
!---

BEGIN

BUILTIN	AP;

EXTERNAL
	ctl$t_nodeaddr,
	ctl$t_nodename,
	ctl$t_remoteid;

OWN
	length,
	nfb:	bblock[nfb$k_length + (3*4)],
	key:	vector [2],
	buffer:	bblock [30];
LOCAL
	srclen,
	srcptr,
	chan,
	status,
	iosb: vector [2],
	nfb_desc: vector [2] initial (nfb$k_length + (3*4), nfb),
	key_desc: vector [2] initial (8, key[0]),
	buffer_desc: vector [2] initial (30, buffer);
!
! Set up NFB for ACP QIO
!
nfb [nfb$b_fct] = nfb$c_fc_show;
nfb [nfb$b_flags] = nfb$m_noupd;
nfb [nfb$b_database] = nfb$c_db_lli;
nfb [nfb$b_oper] = nfb$c_op_eql;
nfb [nfb$l_srch_key] = nfb$c_lli_lln;
nfb [nfb$l_strt_key] = nfb$c_wildcard;
(nfb [nfb$w_cell_size]) - 2 = 0;
nfb [nfb$w_cell_size] = 0;
nfb [nfb$l_fldid] = nfb$c_lli_pna;
(nfb [nfb$l_fldid]) + 4 = nfb$c_lli_pnn;
(nfb [nfb$l_fldid]) + 8 = nfb$c_lli_rid;
(nfb [nfb$l_fldid]) + 12 = nfb$c_endoflist;
!
! Store logical link number as key of reference
!
key [0] = 0;
key [1] = ..ap;
!
! Assign channel to network device
!
status = $ASSIGN(DEVNAM=$DESCRIPTOR('NET:'),CHAN=chan);
if not .status then return .status;
!
! Issue QIO to NETACP
!
status = $QIOW(	CHAN = .chan,
		FUNC = IO$_ACPCONTROL,
		IOSB = IOSB,
		P1 = NFB_DESC,
		P2 = KEY_DESC,
		P3 = LENGTH,
		P4 = BUFFER_DESC);
if not .status then return .status;
if not .(iosb [0])<0,16> then return .(iosb [0])<0,16>;
length = buffer + .length;
!
! Copy remote node address
!
srclen = 4;
srcptr = buffer;
if .srcptr GEQ .length then RETURN true;
ctl$t_nodeaddr <0,8> = .srclen;
CH$COPY(.srclen,.srcptr,0,6,ctl$t_nodeaddr + 1);
!
! Copy remote node name
!
srcptr = .srcptr + .srclen;
srclen = .(.srcptr)<0,16>;
srcptr = .srcptr + 2;
if .srcptr GEQ .length then RETURN true;
ctl$t_nodename <0,8> = .srclen;
CH$COPY(.srclen,.srcptr,0,6,ctl$t_nodename + 1);
!
! Copy remote id
!
srcptr = .srcptr + .srclen;
srclen = .(.srcptr)<0,16>;
srcptr = .srcptr + 2;
if .srcptr GEQ .length then RETURN true;
ctl$t_remoteid <0,8> = .srclen;
CH$COPY(.srclen,.srcptr,0,16,ctl$t_remoteid + 1);
RETURN true;

END;

GLOBAL ROUTINE set_termname =

!---
!
!	Set the terminal name in the PCB
!
! Inputs:
!
!	access mode = Kernel
!
!	sys$output = Descriptor of terminal name
!
! Outputs:
!
!	routine = status (not signaled)
!---

BEGIN

BUILTIN	mtpr;

LINKAGE
	IOLOCK = JSB(REGISTER=4): NOPRESERVE(2,3),
	IOSEARCH = JSB(REGISTER=4,REGISTER=1): NOPRESERVE(2,3);

EXTERNAL ROUTINE
	SCH$IOLOCKR:	IOLOCK,
	SCH$IOUNLOCK:	IOLOCK,
	IOC$SEARCHDEV:	IOSEARCH;

EXTERNAL
	ctl$gl_pcb;			! Address of PCB

REGISTER
	ucb = 1: REF BBLOCK,		! UCB address
	pcb = 4: REF BBLOCK;		! PCB address

OWN
	desc:	VECTOR [2],		! Buffer descriptor
	devbuf:	BBLOCK [dib$k_length],	! $GETDEV buffer
	nambuf:	VECTOR [2],		! Local device name buffer
	ddb:	REF BBLOCK,		! DDB address
	link;				! Logical link number

BIND
	control=$DESCRIPTOR('!AC!UW:');	! $FAO control string

desc[0] = dib$k_length;			! $GETDEV buffer length
desc[1] = devbuf;			! $GETDEV buffer address
$GETDEV(DEVNAM=sys$output,PRIBUF=desc);	! Get terminal name
pcb = .ctl$gl_pcb;			! PCB addess
desc[0] = 7;				! Max terminal name length
desc[1] = .pcb + $BYTEOFFSET(pcb$t_terminal) + 1;
					! Terminal name address
$FAO(control, desc [0], desc, devbuf + .devbuf[dib$w_devnamoff],
	.devbuf[dib$w_unit]);		! Create terminal name in PCB
pcb [$BYTEOFFSET(pcb$t_terminal),0,8,0] = .desc [0];
					! Counted ASCII string
nambuf [0] = .(.desc [1]);		! Copy term name to local buffer
nambuf [1] = .(.desc [1] + 4)<0,24>;
desc [1] = nambuf;			! Update descriptor
link = 0;				! Initialize logical link number
sch$iolockr(.pcb);			! Lock IO database for read
if ioc$searchdev(.pcb,desc) then	! Search for device UCB address
	BEGIN
	if .ucb[ucb$l_vcb] NEQ 0 then	! Mounted volume ?
		BEGIN
		ddb = .ucb [ucb$l_ddb];	! DDB address
		if .ddb [ddb$b_acpclass] EQL 3 then ! ACP class = remote ?
			BEGIN
			link = .(.ucb + ucb$k_length + 46)<0,16>;
					! UCB$W_RTT_LINK
			END;
		END;
	END;
sch$iounlock(.pcb);			! Unlock IO database
mtpr (%REF(0),pr$_ipl);			! Restore original IPL
if .link NEQ 0 then $CMKRNL (ROUTIN=set_nodename, ARGLST=link);
RETURN true;

END;

GLOBAL ROUTINE set_uic (new_uic) =

!---
!
!	Set the process UIC
!
! Inputs:
!
!	Access mode = Kernel
!
!	ap = New UIC
!
! Outputs:
!
!	routine = Previous UIC
!---

BEGIN

BUILTIN AP;

EXTERNAL
    ctl$gl_pcb:	REF BBLOCK;		! Address of PCB

LOCAL
    prev_uic;

prev_uic = .ctl$gl_pcb [pcb$l_uic];	! Save previous UIC

ctl$gl_pcb [pcb$l_uic] = .ap;		! Set UIC

RETURN .prev_uic;			! Return with previous UIC

END;

GLOBAL ROUTINE exec_crelog(logname, eqlname, acmode): NOVALUE =

!---
!
!	Create an executive or supervisor mode process logical
!	name.  This routine is called via $CMEXEC so that the
!	access mode of the logical name can be executive
!	or supervisor mode.
!
! Inputs:
!
!	Access mode is executive.
!
!	logname = Descriptor of logical name
!	eqlname = Descriptor of equivalence name
!	acmode = Access mode for logical name
!
! Outputs:
!
!	None
!---

BEGIN

$CRELOG(LOGNAM = .logname,		! Create logical name
	EQLNAM = .eqlname,
	TBLFLG = log$c_process,
	ACMODE = .acmode);

END;

END
ELUDOM
