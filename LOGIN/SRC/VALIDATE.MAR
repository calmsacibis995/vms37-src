	.TITLE	VALIDATE_USER - routine to validate user and return UAF record
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: System Subprogram
;
; ABSTRACT:
;
;	Lookup the supplied username in the authorization file.  Validate
;	the password, and return the record if so, else return the
;	default values.
;
; ENVIRONMENT:
;
; AUTHOR: Henry M. Levy	, CREATION DATE: 10-Sep-1977
;
; MODIFIED BY:
;
;	V03-001	GAS0057		Gerry Smith		22-Mar-1982
;		Fix FAB to disable all but system logical name
;		translation during open of SYSUAF.
;
;	V02-002	HRJ0031		Herb Jacobs		03-Nov-1981
;		Add a validate password entry point.
;
;	V001	TMH0001		Tim Halvorsen	09-Mar-1981
;		Enable all authorized privileges before accessing SYSUAF
;		file and restore current privileges on exit in case
;		the caller doesn't always run with all authorized
;		privileges enabled (i.e. LOGIN).
;--

	.SBTTL	DECLARATIONS
;
; MACROS:
;

	$FABDEF				; define FAB
	$RABDEF				; define RAB
	$RMSDEF				; define RMS status codes
	$SSDEF				; define system status codes
	$UAFDEF				; define authorization file offsets
	$LOGDEF				; define logical name masks

;
; EQUATED SYMBOLS:
;

	NAMEDSC = 4			; offset to username descriptor
	PWDDSC = 8			; offset to password string descriptor
	BUFDSC = 12			; offset to user buffer descriptor

	RETRY_RLK = 2			; number of retries if record is locked
	SLEEP_RLK = 75			; MS to sleep before retrying a GET
	RECSIZ = 80			; maximum length for password string

	UAF$_NORMAL = 1
	UAF$_INVUSR = -2
	UAF$_INVPWD = -4

	UAF$S_USERNAME = 12		; TEMP - fix MDL to produces this
	UAF$S_PWD = 8

;
; OWN STORAGE:
;
	.PSECT	$OWN$		LONG,NOEXE

PASSWORD_BUF:				; Buffer to upcase password into
	.BLKB	RECSIZ

ENCRYPT_BUF:				; Buffer to encrypt password into
	.BLKB	UAF$S_PWD

USERNAME_DSC:				; Username descriptor
	.WORD	UAF$S_USERNAME,0
	.BLKA	1

PASSWORD_DSC:				; Password descriptor
	.BLKW	2
	.ADDRESS PASSWORD_BUF

	.PSECT	_LIB$CODE	RD,NOWRT,PIC,SHR,BYTE,EXE
;
; UAF file name string
;

UAFNAME:	.ASCII	/SYSUAF/
UAFSIZE=.-UAFNAME

DEFNAME:	.ASCII	/SYS$SYSTEM:.DAT/
DEFSIZE=.-DEFNAME

;
; Default username
;

DEFUSER:	.ASCII /DEFAULT     /
	ASSUME . EQ DEFUSER+UAF$S_USERNAME

WAKEDELTA:
	.LONG	-10*1000*SLEEP_RLK,-1

ENCRYPT_DSC:				; Encrypted password descriptor
	.LONG	UAF$S_PWD
	.ADDRESS ENCRYPT_BUF

	.SBTTL	VALIDATE_USER - subroutine to lookup username

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Routine to lookup the username in the SYSUAF file, optionally 
;	validate the password, and return the UAF record.
;
; CALLING SEQUENCE:
;
;	CALLS OR CALLG
;
; INPUTS:
;
;	NAMEDSC - address of the string descriptor for the username string
;	PWDDSC - address of the string descriptor for the password string
;	BUFDSC - address of the buffer descriptor for the user's buffer
;		 to receive the UAF record.
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUTS:
;
;	The buffer described by BUFDSC receives the user's record if
;	the username string is found and the password is valid.  If
;	the username string is not found, then the default record is
;	returned.
;
; IMPLICIT OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	UAF$_NORMAL - username and password ok
;	UAF$_INVPWD - password not valid
;	UAF$_INVUSR - Username not valid
;	RMS error code - error on UAF file
;
; SIDE EFFECTS:
;
;	none
;--


;
; Register Usage:
;	R4 - username string address
;	R5 - user buffer address
;	R6 - FAB address
;	R7 - RAB address
;
	.ENABL	LSB
 
LGI$SEARCHUSER::			; find the user authorization record
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8> ; entry save amsk
	CLRL	-(SP)			; set search only flag
	BRB	5$			; enter common code
 
LGI$VALIDATE::				; find record and check password
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8> ; save mask
	PUSHL	#1			; set validate flag
5$:	MOVAB	-FAB$K_BLN(SP),R6	; allocate a FAB in the stack
	MOVAB	-RAB$K_BLN(R6),R7	; then a RAB
	MOVL	R7,SP			; now create the space
	MOVC5	#0,(SP),#0,#FAB$K_BLN+RAB$K_BLN,(SP) ; zero FAB and RAB
	ASSUME	FAB$B_BLN EQ FAB$B_BID+1 ; check for byte adjacency
	MOVW	#FAB$K_BLN@8!FAB$C_BID,- ; set block length and block ID-
		FAB$B_BID(R6)		; values into proper fields of FAB
	MOVAL	UAFNAME,FAB$L_FNA(R6)	; insert file name address
	MOVB	#UAFSIZE,FAB$B_FNS(R6)	; insert file name size
	MOVAL	DEFNAME,FAB$L_DNA(R6)	; insert default file name address
	MOVB	#DEFSIZE,FAB$B_DNS(R6)	; insert default name size
	MOVB	#<<1@LOG$C_GROUP>!<1@LOG$C_PROCESS>>,-
		FAB$B_DSBMSK(R6)	; disable process and group logical
					; name translation
	BBSS	#FAB$V_GET,FAB$B_FAC(R6),7$ ; get access only
7$:	MOVB	#FAB$M_GET!FAB$M_PUT!-	; share all operations
		FAB$M_UPD!FAB$M_DEL,FAB$B_SHR(R6)
	MOVB	#FAB$C_IDX,FAB$B_ORG(R6); indexed organization
	MOVB	#FAB$C_VAR,FAB$B_RFM(R6); variable length records
	ASSUME	RAB$B_BLN EQ RAB$B_BID+1; check for byte adjacency
	MOVW	#RAB$K_BLN@8!RAB$C_BID,-; set block length and block ID-
		RAB$B_BID(R7)		; values into proper fields of RAB
	MOVB	#RAB$C_KEY,RAB$B_RAC(R7); keyed access
	BBSS	#RAB$V_NLK,RAB$L_ROP(R7),8$ ; don't lock anbody's record
8$:	MOVB	#10,RAB$B_MBC(R7)	; multi-block reads
	MOVL	BUFDSC(AP),R5		; get user descriptor address
	MOVW	(R5),RAB$W_USZ(R7)	; user buffer size
	MOVL	4(R5),R5		; save buffer address in R5
	MOVL	R5,RAB$L_UBF(R7)	; put user buffer address in rab
	MOVAB	(R5),RAB$L_KBF(R7)	; username is copied just before GET
	MOVB	#UAF$S_USERNAME,RAB$B_KSZ(R7)
	MOVAL	(R6),RAB$L_FAB(R7)	; insert FAB address

;
; Enable all privileges that we are authorized to have just to enhance
; the possibility of accessing the SYSUAF file.
;

	MNEGL	#1,-(SP)		; Initialize a mask of all ones
	MNEGL	#1,-(SP)
	CLRQ	-(SP)			; Allocate quadword for previous privs
	MOVL	SP,R8			; Point to two quadwords
	$SETPRV_S ENBFLG=#1,-		; Enable SYSPRV
		PRVADR=8(R8),-
		PRVPRV=(R8)		; And save previous privilege mask
;
; Open the File and connect RAB
;

	$OPEN	FAB=(R6)
	BLBS	R0,14$
	CMPL	R0,#RMS$_SNE		; If sharing is not enabled try
	BEQL	10$			; accessing it without sharing.
	CMPL	R0,#RMS$_SPE		; The same goes for insufficient
	BEQL	10$			; dynamic memory problems.
	CMPL	R0,#RMS$_DME
	BNEQ	15$
10$:	CLRB	FAB$B_SHR(R6)
	$OPEN	FAB=(R6)
	BLBC	R0,15$			; exit on error
14$:	$CONNECT RAB=(R7)		; connect RAB to FAB
	BLBS	R0,16$			; exit on error
15$:	BRW	EXIT
16$:	MOVAQ	@NAMEDSC(AP),R4		; get username descriptor addr
	PUSHL	R5			; protect R5 for later (clobber R0-4)
	MOVC5	(R4),@4(R4),#^A\ \,#UAF$S_USERNAME,UAF$T_USERNAME(R5)
	POPL	R5

	ASSUME	UAF$S_USERNAME GT 0	; Loop entry can be optimized

	MOVL	#UAF$S_USERNAME-1,R0	; Upcase username
18$:	CMPB	UAF$T_USERNAME(R5)[R0],#^A\a\
	BLSSU	19$
	CMPB	UAF$T_USERNAME(R5)[R0],#^A\z\
	BGTRU	19$
	BICB2	#^O040,UAF$T_USERNAME(R5)[R0]
19$:	SOBGEQ	R0,18$

;
; Check for DEFAULT user name and deny access if a match occurs.
;

	CMPC3	#UAF$S_USERNAME,UAF$T_USERNAME(R5),DEFUSER
	BEQL	50$
	BSBW	GET_RECORD		; get the record
	BLBC	R0,40$			; exit on error
	TSTL	-4(FP)			; is this a validate of search?
	BEQL	20$			; br if search only
	PUSHL	R5			; set up user buffer descirptor
	PUSHL	PWDDSC(AP)		; set up the password descriptor
	CALLS	#1,VALIDATE_PASS	; validate for correct password
	BLBC	R0,EXIT			; branch if invalid password
20$:	MOVL	#UAF$_NORMAL,R0		; good return
	BRB	EXIT

40$:
	CMPL	R0,#RMS$_RNF		; non-existent user?
	BNEQ	EXIT			; take RMS error otherwise
50$:	MOVC3	#UAF$S_USERNAME,DEFUSER,(R5) ; load DEFAULT record
	BSBB	GET_RECORD
	BLBC	R0,EXIT			; take RMS error
	MOVL	#UAF$_INVUSR,R0		; load status code
EXIT:
	PUSHL	R0			; save status
	$DISCONNECT	RAB=(R7)	; clean up shop
	$CLOSE		FAB=(R6)	;
;
; Restore privileges which were current on entry to this routine
;
	$SETPRV_S ENBFLG=#0,-		; Disable all current privileges
		PRVADR=8(R8)
	$SETPRV_S ENBFLG=#1,-		; Restore privilege mask of caller
		PRVADR=(R8)
	POPL	R0
	RET				; return
	.DSABL	LSB

GET_RECORD:				; This routine will try to GET the user
					; record and retries if it is locked.
	MOVL	#RETRY_RLK,R3		; prepare for a number of retries
	BRB	20$
10$:	$SCHDWK_S DAYTIM=WAKEDELTA	; before retrying schedule wake up
	BLBC	R0,20$
	$HIBER_S			; if that worked we can take a nap
20$:	$GET	RAB=(R7)		; try to get the record
	CMPL	R0,#RMS$_RLK		; was it locked?
	BNEQ	30$
	SOBGEQ	R3,10$			; try again if it was
30$:	RSB


	.ENTRY	-
VALIDATE_PASS,	^M<R2,R3,R4,R5>
	MOVAL	PASSWORD_BUF,R2		; Copy and upcase password
	MOVAQ	@4(AP),R1		; Get address of password descriptor
	MOVL	8(AP),R5		; Get address of user record
	MOVZWL	(R1),R0
	CMPW	R0,#RECSIZ		; Protect against excessive length
	BLEQU	22$
	MOVW	#RECSIZ,R0
22$:	MOVW	R0,PASSWORD_DSC		; Fill in length in descriptor
	BRB	24$			; Enter loop
23$:	MOVB	@4(R1)[R0],(R2)[R0]
	CMPB	(R2)[R0],#^A\a\
	BLSSU	24$
	CMPB	(R2)[R0],#^A\z\
	BGTRU	24$
	BICB2	#^O040,(R2)[R0]
24$:	SOBGEQ	R0,23$

	MOVAL	UAF$T_USERNAME(R5),USERNAME_DSC+4 ; form username descriptor
	PUSHAQ	USERNAME_DSC		; pointer to username descriptor
	MOVZWL	UAF$W_SALT(R5),-(SP)	; push password salt
	MOVZBL	UAF$B_ENCRYPT(R5),-(SP)	; push encryption algorithm index
	PUSHAQ	PASSWORD_DSC		; pointer to password descriptor
	PUSHAQ	ENCRYPT_DSC		; pointer to encrypted output descriptor
	CALLS	#5,LGI$HPWD		; mash password
	CMPC3	#UAF$S_PWD,ENCRYPT_BUF,UAF$Q_PWD(R5) ; password's match?
	BNEQ	30$			; branch if bad password
	MOVL	#1,R0			; set success
	RET				; return
30$:	MOVL	#UAF$_INVPWD,R0		; bad password specified
	RET				; return

	.END
