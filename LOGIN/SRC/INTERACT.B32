MODULE interact (IDENT = 'V03-003',
	ADDRESSING_MODE(EXTERNAL = GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Login
!
! ABSTRACT:
!
!	This module handles all processing of interactive jobs.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
! AUTHOR:  Tim Halvorsen, March 1981
!
! Modified by:
!
!	V03-003	GAS0069		Gerry Smith	 1-Apr-1982
!		Add a password mask of overstriking characters
!		if SYS$INPUT is a local_echo terminal.  Also change
!		code to allow for no uaf record on interactive login.
!
!	V03-001	GAS0059		Gerry Smith	17-Feb-1982
!		Fix various auto-login problems.  Make sure that
!		a username of <login> is used until it is determined
!		that a valid UAF has been found.  Use only the system
!		logical name table to translate during open/creates.
!
!	V03-014	GAS0043		Gerry Smith	 5-Feb-1982
!		Change $CHARCOUNT to %CHARCOUNT.
!
!	V03-013	GAS0041		Gerry Smith	03-Feb-1982
!		Force a user-supplied CLI to be in SYS$SYSTEM.  
!		
!	V03-012	SPF0051		Steve Forgey	01-Jan-1981
!		Set initial interactive username (CTL$T_USERNAME) to
!		<login> instead of JOBCTL.
!
!	V03-011	GAS0028		Gerry Smith	30-Dec-1981
!		Zero the password field in the RMS area.  This is to
!		prevent knowledgeable users from gaining access to it
!		during login.
!
!	V03-010	HRJ0039		Herb Jacobs	19-Dec-1981
!		Allow for accounts without a password for auto-login while
!		not allowing these acoounts to be used interactively via
!		the authorization flag DISACNT.  Add flags in authorization
!		record to allow suppression on new mail and welcome messages.
!
!	V03-009	HRJ0037		Herb Jacobs	10-Dec-1981
!		Accept passwords in auto login, and handle new device name
!		syntax in SYSALF.DAT.
!
!	V008	PCG0001		Peter George	03-Dec-1981
!		Call CLI$END_PARSE after parsing login commmand.
!
!	V03-007	HRJ0032		Herb Jacobs	13-Nov-1981
!		Accept null passwords by using new validate_pass entry.
!
!	V006	TMH0006		Tim Halvorsen	22-Oct-1981
!		Add missing support for CAPTIVE UAF flag.
!
!	V005	SPF0030		Steve Forgey	15-Sep-1981
!		Set terminal name in PCB before validating username and
!		password.
!
!	V004	TMH0004		Tim Halvorsen	17-Jul-1981
!		Change the wording on the new mail message.
!
!	V003	TMH0003		Tim Halvorsen	16-Jul-1981
!		Display the actual number of new mail messages
!		when informing the user that new mail has arrived.
!
!	V002	TMH0002		Tim Halvorsen	17-Jun-1981
!		Clear purge-typeahead before password prompt.
!
!	V001	TMH0001		Tim Halvorsen	15-May-1981
!		Output blank line if no user announcement (SYS$ANNOUNCE)
!		message.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions

REQUIRE 'SHRLIB$:UTILDEF';		! Common BLISS definitions

REQUIRE 'LIB$:PPDDEF';			! Process permanent data region

!
! Table of contents
!

FORWARD ROUTINE
    init_interactive:	NOVALUE,	! Initialize interactive job
    auto_login,				! Check if automatic login enabled
    interactive_validation: NOVALUE,	! Perform interactive validation
    get_password,			! Acquire password from terminal
    write_announcement,			! Write user-supplied announcement msg
    announce:		NOVALUE,	! Announce successful login
    zero_password:	NOVALUE;	! Zero password in RMS buffer

!
! External routines
!

EXTERNAL ROUTINE
    open_input:		NOVALUE,	! Open primary input file
    open_output:	NOVALUE,	! Open primary output file
    get_uafrec:		NOVALUE,	! Read UAF record without validiation
    write_file:		NOVALUE,	! Write file to primary output
    write_output,			! Write to primary output stream
    write_fao:		NOVALUE,	! Write formatted message to output
    get_input:		NOVALUE,	! Get record from primary input stream
    set_username:	NOVALUE,	! Set username string in control region
    set_termname:	NOVALUE,	! Set terminal name in PCB
    set_sysprv:		NOVALUE,	! Set SYSPRV privilege
    clear_sysprv:	NOVALUE,	! Clear SYSPRV privilege
    validate_pass,			! Validate password against UAF record
    cli$dcl_parse,			! Parse DCL command
    cli$present,			! Check if entity present
    cli$get_value,			! Get value from command line
    cli$end_parse;			! Clean up after parsing

!
! External storage
!

EXTERNAL
    uaf_record:		REF BBLOCK,	! Address of UAF record
    sys$input:		VECTOR,		! Translation of SYS$INPUT
    sys$output:		VECTOR,		! Translation of SYS$OUTPUT
    input_rab:		BBLOCK,		! Input RAB
    ctl$ag_clidata;			! Process permanent data region

BIND
    ppd = ctl$ag_clidata: BBLOCK;	! Address of PPD structure

!
! Literals
!

LITERAL
    bell = 7,				! Ring bell
    cr = 13,				! Carriage return
    lf = 10;				! Line feed

EXTERNAL LITERAL
    lgi$_captive,
    lgi$_notvalid,			! invalid user authorization
    lgi$_userauth;			! invalid user authorization record

!
! OWN storage
!

GLOBAL
    cli_name_buffer: VECTOR [80,BYTE],
    disk_name_buffer: VECTOR [16,BYTE],
    com_name_buffer: VECTOR [64,BYTE],
    cli_name:	VECTOR [2]		! Descriptor of user CLI name
		INITIAL(0,cli_name_buffer),
    disk_name:	VECTOR [2]		! Descriptor of user disk name
		INITIAL(0,disk_name_buffer),
    com_name:	VECTOR [2]		! Descriptor of user login proc
		INITIAL(0,com_name_buffer),
    com_negated: BYTE INITIAL(false);	! True if /NOCOMMAND

GLOBAL ROUTINE init_interactive: NOVALUE =

!---
!
!	Initialize an interactive job by requesting the usename
!	and password from the terminal associated with the process.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	uaf_record = Address of UAF record for user
!			(may be zero if no UAF record read, but login ok)
!---

BEGIN

LOCAL
    desc : VECTOR[2];			! Temp descriptor

!
! Open the output and input files (will actually use the output stream)
!

$CMEXEC(ROUTIN = open_output);		! Open output file
$CMEXEC(ROUTIN = open_input);		! Open input file

!
! Set terminal name in PCB, and initial username of <login>
!

$CMKRNL(ROUTIN = set_termname);		! Set terminal name in PCB
$CMKRNL(ROUTIN = set_username,		! Set initial username of process
	ARGLST = $DESCRIPTOR('<login>'));

!
! Write the system announcement if it exists
!
IF NOT write_announcement(%ASCID 'SYS$ANNOUNCE') ! If no user announcement,
THEN
    BEGIN
    desc [0] = 0;
    write_output(desc);			! output blank line
    END;

!
! If interactive process, and no automatic login is requested for this
! terminal, then prompt for username & password and read UAF record.
!

IF NOT auto_login()			! If no automatic login requested,
THEN
    interactive_validation();		! Perform interactive validation

END;

ROUTINE auto_login =

!---
!
!	Check if any automatic login has been specified for the current
!	terminal in SYSALF.DAT.  If so, obtain the UAF record without
!	checking any passwords and proceed with the login.
!
! Inputs:
!
!	sysalf_fab/rab = FAB/RAB for SYSALF file
!	input_rab = RAB for terminal stream
!
! Outputs:
!
!	routine = True if automatic login enabled, else false
!
!	If automatic login enabled,
!
!	uaf_record = Address of user's UAF record, if automatic login enabled.
!	The typeahead buffer is cleared.
!---

BEGIN

MACRO
    alf$t_devname = 0,0,0,0%,		! Terminal name (63 bytes)
    alf$s_devname = 63%,
    alf$t_username = 63,0,0,0%,		! Username associated with terminal
    alf$c_length = 128%;		! Size of fixed length records

LOCAL
    status,
    username:	VECTOR [2],		! Descriptor of username string
    sysalf_fab:	BBLOCK [fab$c_bln],	! FAB for auto-login file
    sysalf_rab:	BBLOCK [rab$c_bln],	! RAB for auto-login file
    buffer:	BBLOCK [alf$c_length],	! SYSALF record buffer
    input_buffer: VECTOR [128,BYTE],	! Input buffer
    inputlen,				! for handling new __ device name
    inputaddr;				! syntax

BIND
    startchars = .sys$input [1]	: WORD;	! Allow access to start of input string

$FAB_INIT(FAB = sysalf_fab,
	FNM = 'SYSALF',			! Primary filespec
	DNM = 'SYS$SYSTEM:.DAT',	! Default filespec
	ORG = IDX);			! ISAM file
!
! Disable group and process logical name translation for the open.  This
! must be done manually, since $FAB_INIT doesn't know about DSBMSK.
!
sysalf_fab[fab$b_dsbmsk] = (1^log$c_process) OR (1^log$c_group);

$RAB_INIT(RAB = sysalf_rab,
	FAB = sysalf_fab,		! Address of associated FAB
	RAC = KEY,			! Keyed record access
	KRF = 0,			! Reference by key #0
	USZ = alf$c_length,		! Size of entire record
	UBF = buffer,			! Address of record buffer
	KSZ = alf$s_devname,		! Size of key field
	KBF = buffer [alf$t_devname]);	! Address of key field

set_sysprv();				! Enable SYSPRV so we can access file

IF NOT $OPEN(FAB = sysalf_fab)		! Open SYSALF file, if possible
THEN
    BEGIN
    clear_sysprv();			! Drop SYSPRV on exit
    RETURN false;
    END;

IF NOT $CONNECT(RAB = sysalf_rab)	! Connect to stream
THEN
    BEGIN
    $CLOSE(FAB = sysalf_fab);		! If error, close file
    clear_sysprv();			! Drop SYSPRV on exit
    RETURN false;			! and return unsuccessful
    END;

inputlen = .sys$input [0];		! set initial length
inputaddr = .sys$input [1];		! set initial address

IF .inputlen GTR 2
AND .startchars EQL '__'
THEN
    BEGIN
    inputlen = .inputlen - 1;		! Remove the extra _ from the length
    inputaddr = .inputaddr + 1;		! Bump past the extra _
    END;

CH$COPY(.inputlen, .inputaddr,		! Copy terminal name to key field
	' ', .sysalf_rab [rab$b_ksz], .sysalf_rab [rab$l_kbf]);

status = $GET(RAB = sysalf_rab);	! Read record keyed by terminal name

$CLOSE(FAB = sysalf_fab);		! Close file (error or not)

clear_sysprv();				! Drop SYSPRV on exit

IF NOT .status				! If no record found in file,
THEN
    RETURN .status;			! then return unsuccessful

input_rab [rab$b_tmo] = 0;		! Purge the input typeahead buffer
input_rab [rab$v_pmt] = 0;		! to get rid of unsolicited
$GET(RAB = input_rab);			! character that started the job
input_rab [rab$v_pmt] = 1;		! Restore prompt
input_rab [rab$b_tmo] = 15;		! and timeout period

username [0] = uaf$s_username;		! Setup descriptor of username
username [1] = buffer [alf$t_username];

get_uafrec(username);			! Get UAF record for user

IF .uaf_record EQL 0			! If no uaf record
THEN
    SIGNAL_STOP(lgi$_userauth);		! Signal error and exit

$CMKRNL(ROUTIN = set_username,		! Set username of process
	ARGLST = username);

input_rab [rab$w_usz] = 128;
input_rab [rab$l_ubf] = input_buffer;
status = get_password ();		! Acquire and validate the password

IF NOT .status				! If invalid password
THEN
    SIGNAL_STOP(lgi$_notvalid);		! Signal error and exit

RETURN true;				! Return successful

END;

ROUTINE interactive_validation: NOVALUE =

!---
!
!	Perform interactive user validation.  Prompt for the
!	username and password, validate them, and read UAF record.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	uaf_record = Address of UAF record
!---

BEGIN

EXTERNAL
    login_command;			! Tables describing LOGIN command

LOCAL
    status,
    desc:	VECTOR [2],		! descriptor
    string:	BBLOCK [8],		! Varying string descriptor
    buffer:	BBLOCK [2+128]		! Varying string buffer
		VOLATILE,
    input_buffer: VECTOR [128,BYTE],	! Input buffer
    username:	VECTOR [2];		! Username descriptor

CH$MOVE(6, UPLIT BYTE('LOGIN '), input_buffer);
input_rab [rab$w_usz] = 128 - 6;
input_rab [rab$l_ubf] = input_buffer + 6;

status = false;				! Preset parse status

string [dsc$b_class] = dsc$k_class_vs; ! Setup varying string descriptor
string [dsc$w_maxstrlen] = 16;
string [dsc$a_pointer] = buffer;

DO
    BEGIN
    WHILE true
    DO
	BEGIN
	get_input();			! Prompt for username
	IF .input_rab [rab$w_rsz] NEQ 0	! If non-null input line,
	THEN
	    EXITLOOP;			! then process the line
	END;

    desc [0] = .input_rab [rab$w_rsz] + 6;	! Setup descriptor of line
    desc [1] = .input_rab [rab$l_rbf] - 6;	! with LOGIN appended to front

    status = cli$dcl_parse(desc,login_command);	! Parse the LOGIN command line

    IF .status				! If successfully parsed,
    THEN
	BEGIN
	cli$get_value(%ASCID 'CLI', string);	! Get value of /CLI
	IF .buffer [0,0,16,0] NEQ 0		! If a CLI was specified
	THEN
	    BEGIN
	    CH$MOVE(%CHARCOUNT('SYS$SYSTEM:'),	! First put in SYS$SYSTEM:
		    UPLIT('SYS$SYSTEM:'),
		    cli_name_buffer);
	    CH$MOVE(.buffer [0,0,16,0],		! Then put in the CLI name
		    buffer+2,
		    cli_name_buffer[%CHARCOUNT('SYS$SYSTEM:')]);
	    cli_name[0] = %CHARCOUNT('SYS$SYSTEM:') + .buffer [0,0,16,0];
	    END;
	cli$get_value(%ASCID 'DISK', string);	! Get value of /DISK
	disk_name [0] = .buffer [0,0,16,0];
	CH$MOVE(.disk_name [0], buffer+2, .disk_name [1]);
	IF NOT cli$present(%ASCID 'COMMAND')	! If /NOCOMMAND,
	THEN
	    com_negated = true			! then disable login procedure
	ELSE
	    BEGIN
	    string [dsc$w_maxstrlen] = 64;	! Allow up to 64 char filespec
	    cli$get_value(%ASCID 'COMMAND', string); ! Get value of /COMMAND
	    com_name [0] = .buffer [0,0,16,0];
	    CH$MOVE(.com_name [0], buffer+2, .com_name [1]);
	    END;
	status = cli$get_value(%ASCID 'USERNAME',string); ! Get username string
	username [0] = .buffer [0,0,16,0];	! Make descriptor of username
	username [1] = buffer+2;		! (this is last so we don't
						! wipe out username in buffer)
	END;
    END
UNTIL .status;				! Loop until username obtained
cli$end_parse ();			! Clean up after command parsing

get_uafrec(username);			! Lookup the uaf record

status = get_password ();		! Acquire and validate the password

!
! The validity check is done after prompting for the password to accomplish
! same visible behavior as V1 and V2.
!

IF .uaf_record EQL 0			! If invalid username
AND .BBLOCK [ppd[ppd$l_lststatus], sts$v_fac_no] NEQ 1	! And not an RMS error
THEN
    SIGNAL_STOP(lgi$_notvalid);		! Signal error and exit

$CMKRNL(ROUTIN = set_username,		! Set username of process
	ARGLST = username);


IF (.BBLOCK [ppd[ppd$l_lststatus], sts$v_fac_no] NEQ 1
    AND NOT .status)			! If invalid password
THEN
    SIGNAL_STOP(lgi$_notvalid);		! Signal error and exit
IF .uaf_record NEQ 0
THEN IF .uaf_record [uaf$v_disacnt]	! If this user account is disabled
THEN
    SIGNAL_STOP(lgi$_notvalid);		! Signal error and exit

IF .uaf_record NEQ 0
THEN
IF .uaf_record [uaf$v_captive]		! If user not allowed to change things,
AND (.cli_name [0] NEQ 0		! and he changed either CLI name,
    OR .disk_name [0] NEQ 0		!   or DISK name,
    OR .com_name [0] NEQ 0		!   or procedure name,
    OR .com_negated)			!   or procedure negated,
THEN
    SIGNAL_STOP(lgi$_captive);		! then signal error and exit

RETURN true;

END;

ROUTINE get_password =

!---
!
!	Acquire a password if one needed and validate it, return
!	status is true if password check is successful.
!
! Inputs:
!
!	uaf_record
!
! Outputs:
!
!	routine = True if password validated or none needed, else false.
!---

BEGIN

LOCAL
    class,
    term2,
    status,
    fab: BBLOCK[fab$c_bln],
    rab: BBLOCK[rab$c_bln],
    dvi_list: BBLOCK[28],
    string: VECTOR[24,BYTE],
    password:	VECTOR [2];		! Password descriptor


IF .uaf_record NEQ 0			! If there is a uaf record and no
THEN
IF  .bblock [uaf_record [uaf$q_pwd],0,0,32,0] EQL 0 ! password is needed
AND .bblock [uaf_record [uaf$q_pwd],4,0,32,0] EQL 0
THEN
    RETURN true;			! Then return success without prompting

!
! Set up an item block to pass to $GETDVI, to get information about
! the SYS$INPUT device.
!
dvi_list[0,0,16,0] = 4;			! Set up for device class
dvi_list[2,0,16,0] = dvi$_devclass;
dvi_list[4,0,32,0] = class;
dvi_list[8,0,32,0] = 0;
dvi_list[12,0,16,0] = 4;		! Set up for secondary device 
dvi_list[14,0,16,0] = dvi$_devdepend2;	! dependent characteristics
dvi_list[16,0,32,0] = term2;
dvi_list[20,0,32,0] = 0;
dvi_list[24,0,32,0] = 0;		! Zero to show end of list

return_if_error	($GETDVI(ITMLST = dvi_list,
    			 DEVNAM = sys$input));

!
! If SYS$INPUT is a terminal, and is set to be local_echo,
! then ask for the password with an overstriking mask.
!
IF .class EQL dc$_term				! If a terminal
AND .term2<$BITPOSITION(tt2$v_localecho),1>	! with local_echo set
THEN
    BEGIN

    class = 1;					! Indicate that this is
    						! a localecho case
    $FAB_INIT(FAB = fab,			! Initialize local FAB
	      FNM = 'SYS$INPUT',		! to point to SYS$INPUT
	      FAC = (get,put));			! Read and write
    fab [fab$v_cr] = 0;				! Turn off carriage return
    $RAB_INIT(RAB = rab,			! Initialize local RAB
	      FAB = fab,
	      ROP = (pmt,cvt,tmo,rne,loc),	! Read with prompt and timeout,
	    					! convert to uppercase,
        					! read no echo, use locate mode
	      PBF = UPLIT BYTE(%X'0A', 'Password: ',
			       rep 15 of (%X'23'), rep 15 of (%X'08'),
			       rep 15 of (%X'58'), rep 15 of (%X'08')),
	      PSZ = 71,
	      UBF = string,
	      USZ = 24,
	      TMO = 15);

    return_if_error ($OPEN (FAB = fab));	! Open the file
    return_if_error ($CONNECT (RAB = rab));	! Connect 
    return_if_error ($GET (RAB = rab));		! Get the password

    password [0] = .rab[rab$w_rsz];	! Store password size
    password [1] = .rab[rab$l_rbf];	! and location

    rab[rab$l_rbf] = UPLIT BYTE (%X'0D', rep 10 of (%X'20'),
				 rep 15 of (%X'23'), rep 15 of (%X'08'),
				 rep 15 of (%X'58'));
    rab[rab$w_rsz] = 56;

    return_if_error ($PUT (RAB = rab));		! Overwrite again
    return_if_error ($CLOSE (FAB = fab));	! and close the file
    END
ELSE
    BEGIN				! Normal processing

    class = 0;				! Indicate normal processing

    input_rab [rab$l_pbf] = UPLIT BYTE('Password: ');
    input_rab [rab$b_psz] = 10;
    input_rab [rab$v_rne] = true;		! Read no-echo
    input_rab [rab$v_pta] = false;		! Clear purge-typeahead
    input_rab [rab$v_loc] = true;		! Use LOCATE mode

    get_input();				! Prompt for password

    password [0] = .input_rab [rab$w_rsz];	! Setup descriptor of password
    password [1] = .input_rab [rab$l_rbf];

    input_rab [rab$v_loc] = false;		! Turn off LOCATE mode

    END;

IF .uaf_record EQL 0			! If no uaf record
THEN					! return unconditional failure now that
    RETURN false;			! the prompt has been done


status = validate_pass(password,.uaf_record); ! Validate user password

$CMEXEC(ROUTIN = zero_password,		! Zero the password in the RMS area
	ARGLST = password);

RETURN .status				! Return success/failure

END;

ROUTINE write_announcement (logname) =

!---
!
!	Write an announcement message to the primary output stream.
!	If the logical name given has a translation, it may be of the
!	following two forms:
!
!		'@filespec'		Write contents of file
!		'string'		Write string literally
!
! Inputs:
!
!	logname = Address of descriptor of logical name
!
! Outputs:
!
!	routine = True if user-supplied message output, else false
!---

BEGIN

LOCAL
    null_desc:	VECTOR [2],		! Descriptor of null string
    desc:	VECTOR [2],
    buffer:	VECTOR [128,BYTE];

desc [0] = 128;				! Setup translation buffer descriptor
desc [1] = buffer;

IF $TRNLOG(LOGNAM = .logname,		! If translation exists,
	RSLBUF = desc,
	RSLLEN = desc)
    EQL ss$_normal
THEN
    BEGIN
    IF .buffer [0] EQL '@'		! If logname points to file,
    THEN
	BEGIN
	desc [0] = .desc [0] - 1;	! then remove '@'
	desc [1] = .desc [1] + 1;
	write_file(desc);		! and write file to output stream
	END
    ELSE IF .desc [0] NEQ 0		! Else if non-null string,
    THEN
	BEGIN
	null_desc [0] = 0;
	write_output(null_desc);	! output blank line
	write_output(desc);		! output translation of logname
	write_output(null_desc);	! output blank line
	END;
    RETURN true;			! return successful
    END;

RETURN false;				! return failure

END;

GLOBAL ROUTINE announce: NOVALUE =

!---
!
!	Issue message to interactive users announcing successful login
!
! Inputs:
!
!	None
!
! Outputs:
!
!	None
!---

BEGIN
	
EXTERNAL
    sys$gq_version;			! System version string

LOCAL
    length,				! String variables
    ptr:	REF VECTOR [,BYTE],
    msg_buffer:	VECTOR [128,BYTE],	! Buffer for announcement message
    null_desc:	VECTOR [2],		! Descriptor of null string
    bufdesc:	VECTOR [2];		! Buffer descriptor for above message

IF .uaf_record NEQ 0
THEN
IF .uaf_record [uaf$v_diswelcom] EQL 0	! If a welcome message allowed
THEN
    BEGIN
    IF NOT write_announcement(%ASCID 'SYS$WELCOME') ! If no user welcome
    THEN
	BEGIN
	ptr = CH$MOVE(28, UPLIT BYTE('	Welcome to VAX/VMS version '),
		      msg_buffer);
	ptr = CH$MOVE(4, sys$gq_version, .ptr);
	length = .ptr - msg_buffer;	! Set default length of message

	ptr = CH$MOVE(8, UPLIT BYTE(' on node'), .ptr);

	bufdesc [0] = 16;		! Setup buffer descriptor
	bufdesc [1] = .ptr;			

	IF $TRNLOG(LOGNAM=%ASCID 'SYS$NODE', ! Get value of SYS$NODE
		RSLBUF=bufdesc,
		RSLLEN=bufdesc)
	    EQL ss$_normal		! If successful,
	THEN
	    BEGIN
	    ptr [0] = ' ';		! Overwrite underscore with blank
					! Append node name minus ::
	    length = .ptr + .bufdesc [0] - 2 - msg_buffer;
	    END;

	bufdesc [0] = .length;		! Setup descriptor of message
	bufdesc [1] = msg_buffer;

	write_output(bufdesc);		! Write message
	END;
    END;
!
! If any new mail since last logged on, issue a message
!

IF .uaf_record NEQ 0			! If UAF record is valid
THEN
IF  .uaf_record [uaf$w_mail] NEQ 0	! and user has new mail,
AND .uaf_record [uaf$v_dismail] EQL 0	! and new mail message not disabled
THEN
    write_fao(UPLIT BYTE(%ASCIC %STRING(
	%CHAR(lf),
	'	      You have !UW new Mail message!%S.',
	%CHAR(bell),%CHAR(lf))), .uaf_record [uaf$w_mail]);

END;

ROUTINE zero_password : NOVALUE =

!---
!
!	Zero out the password in the RMS buffer.  This must be done in
!	executive mode, since the RMS buffer is not user-writeable.
!
! Inputs:
!
!	AP = address of password descriptor
!
! Outputs:
!
!	Password is zeroed
!---

BEGIN

BUILTIN AP;

MAP AP: REF VECTOR;			! Address of password descriptor

CH$FILL( 0, 10, .ap[1]);		! Fill password area with zeroes

RETURN;
END;

END
ELUDOM
