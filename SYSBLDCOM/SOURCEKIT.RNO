.lm 0
.rm 72
.sthl 7,0,0
.subtitle
.title The VAX/VMS Release 3 Source Kit
.c;The VAX/VMS Source Kit
.hl1	Introduction
Welcome to the wonderful world of the VMS system build! The VAX/VMS Source Kit
is a copy of the VMS master pack, from which the VMS Release 3 was
generated. The master pack contains all of the system sources and the command
procedures necessary to build the system from these sources. Some components of
VMS are acquired from other operating systems (notably RSX-11M); these are,
for the most part, present on the master pack in object form. Finally, the
master pack contains copies of the unbundled language products needed to build
the system:
.s 1
.lm 8
.nf
.nj
VAX-11 BLISS-16
VAX-11 BLISS-32
VAX-11 FORTRAN
VAX-11 PASCAL
VAX-11 PL/1
.f
.j
.lm 0
.note
One component of VAX/VMS, the EDT CAI system, is written in BASIC , which IS
NOT supplied with the source kit. If you do not have VAX-11 BASIC,
EDTCAI will be built from the object
files located on the master pack. If you do have VAX-11 BASIC, EDTCAI will be
built from the sources on the master pack.
.end note
.hl2	Structure of the VAX/VMS Source Kit
The VAX/VMS Source Kit is contained on three 2400 foot reels of magnetic tape.
The tapes are recorded at 1600 BPI using the VMS BACKUP utility. This allows
the most flexibility for building all or a portion of the components which make
up VAX/VMS.
.s 1
The BACKUP save sets on the Source Kit are of three types and are organized on
the tapes in the following format:
.s 1
.lm 16
.i -16
Save Set Name			Description
.s 1
.i -16
SYSBLDCOM	This save set is restored by the Source Kit installation
procedure. It contains all the command procedures necessary to build any or
all of the components in the Source Kit. Also it contains all of the
compilers and files copied from the [SYSEXE] directory needed to build a
running system.
.s 1
.i -16
SYSOBJ		This save set contains all of the object libraries necessary
to build a single component (without having to build the entire system first).
.s 1
.i -16
SYSTEM		This save set contains a collection of miscellaneous files from
various directories necessary for trial system builds ([SYSMGR], [SYSUPD],
etc.).
.s 1
.i -16
UPDATES		This save set contains the PATCH command files (they have the
file type .FIX) and command procedures changed after the sources on the
VMS Version 3.0 master pack were frozen (i.e., no more source fixes were
allowed).
.s 1
.i -16
the remaining	The remainder of the first tape and the entire second and third
tapes contain the sources for VMS broken down such that each save set contains
a single component of VMS.
.s 1
.lm 0
.hl1	The Source Master Pack
The VMS sources are organized into components (these are also referred to as
facilities in some the the system build files). Each component represents a
major functional part of the system. For example, the SYStem executive, RMS, the
DCL command interpreter, the COPY utility, etc. all represent components.
.hl2	Component Directory Structures
Each component is represented on the master pack by a well defined directory
tree. The top level directory (appearing in the MFD) has the name of the
component. The following subdirectiries appear below each top level directory:
.s 1
.lm 24
.i -24
[component.BUG]		Contains the update files for bug fixes for the
component. This directory of the master pack as supplied is empty.
.s 1
.i -24
[component.BUGCOM]	Contains the command files necessary to build the
component. (This is used when the command files undergo major changes, and the
new version if placed in the [.COM] directory.)
.s 1
.i -24
[component.BUGSRC]	Contains the source files that to which the update
files correspond. (This is used when a source file undergoes a major rewrite,
and the new version in placed in the [.SRC] directory.)
.s 1
.i -24
[component.COM]		Contains the command files necessary to build the
component.
.s 1
.i -24
[component.ENH]		Contains the update files for enhancements to the
component. This directory of the master pack as supplied is empty.
.s 1
.i -24
[component.LIS]		Receives the listing and map files generated during the
building of the component.
.s 1
.i -24
[component.OBJ]		Receives the object files, object libraries, executable
images, and symbol table files generated during the building of the component.
.s 1
.i -24
[component.PRMOBJ]	Contains pre-built object files for the components that
are not built entirely from the sources or for which there is no compiler
supplied on the Source Kit.
.s 1
.i -24
[component.SRC]		Contains the source files from which the component is
built.
.s 1
.i -24
[component.TMPSRC]	Receives the sources files generated by an in place
build (one in which the listings, object files, etc. for a component reside
on the same device as the sources for that component).
.lm 0
.hl3	The Command File Directory [component.COM]
Each [component.COM] directory contains a master build file for the
component, named componentBLD.COM. This file controls the building of the
component by the build command procedures (see section 4.0).
.s 1
This master build file relies, in almost all cases, upon the assembly parameter
file, named componentASM.DAT, to determine which files are assembled, compiled,
or otherwise worked over, which assembler or compiler is used, and what
libraries (if any) are used.
.s 1
Generally speaking, the subdirectories for the component contain all the files
necessary to build their respective component. This is not, however, always the
case. In the simplest case, one component links with routines from another
component (see also section 4.0). To determine if files from other components
are needed for linking, when building a single component, it is necessary
to examine the LINKER option file, named componentLNK.OPT (if there is one), or
the link command file, named componentLNK.COM. With some components, the linking
operation is controlled from within the build file (componentBLD.COM).
In the other case, some source files will reference parameter files, and the
like, that belong to other components. The only reliable way to resolve these
references is, unfortunately, by trial and error.
.hl2	Necessary System Directories
In addition to the component directory tree, the master pack contains several
other directories. Some of the directories present on a VMS system disk (such
as [SYSEXE], [SYSMGR], [SYSUPD], etc.) are also present on the master pack
and contain the files that are to be directly moved to a resulting VMS system
disk (see section 5.0).
.hl2	Source Kit Logical Names
To make modification and building of the VMS components as standardized as
possible, numerous logical names have been defined. These logical names are
used in all of the component build files and are defined by the LOGIN.COM
file for the SYSTEMBUILD account (see also section 3.1).
To get a general feel for the usage of these logical names, you should read
the comments contained in the LOGIN.COM file.
.hl1	Installing the VAX/VMS Source Kit
As is described in Appendix D of the VAX/VMS installation Guide, the source kit
is installed by invoking the command procedure [SYSBLDCOM]SRCINSTAL.COM from the
system manager account. This installation command file creates the SYSTEMBUILD
account on your system, and creates all the directories necessary to initiate a
complete or partial system build.
.hl2	The SYSTEMBUILD Account
The VMS system build takes place in a complex environment of logical names,
special command definitions, and special command procedures. This environment
allows a great deal of flexibility in controlling the system build, and permit
reference to the component directory trees in an orderly and logical manner.
By having the system builds run from a particular account, this environment can
be set up automatically without having to burden other users with its presence.
.s 1
The UIC of the SYSTEMBUILD account is [11,177]. Correspondingly, the master pack
and all the files on it are owned by [11,177]. If group 11 is a bad group, at
your site, for the owner of the source files, with a little work it may be
changed. Ideally you should first restore the entire VMS sources (although the
following may be done on a component by component basis). You should then give
yourself the SYSPRV privilege. Then issue the DCL command
.s 1
.lm 8
$ SET FILE/OWNER=[uic] device:[*...]*.*;*
.s 1
.i -8
or for a single component
.s 1
$ SET FILE/OWNER=[uic] device:[component...]*.;*
.s 1
.lm 0
(For more information on the SET FILE command, please refer to the VAX/VMS
Command Language Users Guide.) One last reminder, don't forget to change the
UIC of the SYSTEMBUILD account, and remove the SYSPRV privilege.
.hl3	SYSTEMBUILD Account Privileges
The SYSTEMBUILD account is created with the minimum set of privileges needed
to run system builds: TMPMBX, GRPNAM, GROUP, VOLPRO, and OPER. It is therefore
a moderately privileged account, capable of building private system disks, but
not modifying the running operating system. You may wish to give the account
additional privilege to give it control over the system you are running. If
you plan to have a group of people working with the source kit, you will
probably find it convenient to give each member of the group an [11,x] account
(or a member in the appropriate group if you have changed the SYSTEMBUILD UIC).
The files are writable by the owner ([11,177] or the UIC you changed it to)
only, readable by the SYSTEM and GROUP, with no access for the WORLD.
.hl2	Directories Created by the Installation
Installing the source kit creates several directories used in various aspects
of system building. They are all located on a disk that you designate as the
"work disk". It is generally referred to by the logical name WRKD$:. The
master pack is referred to by the logical name MASD$:.
.s 1
[SYSBLDCOM] is the default directory of the SYSTEMBUILD account. It contains all
of the command procedures needed to rebuild a single component or the entire
system, the command procedures necessary to restore any or all of the VMS
components and create a new (updated) copy of the master pack, and receives the
log files when the system builds (or component builds) are run.
.s 1
[SYS.SRC], [SYS.OBJ], and [SYS.LIS] are used for working copies of the system
executive modules. The presence of these directories is mandatory to handle the
exec version number module, which is automatically modified for each (complete)
system build. In addition, these directories may be used for incremental
modification of the exec.
.s 1
[SYSOBJ] is used to contain all of the system components in object library form.
These are used to relink single component of the source kit.
.s 1
The log files generated by a full system build occupy about 5000 blocks; you
should make sure that you have at least this much free space on the work disk
before starting a full system build. The standard contents of [SYSOBJ] occupy
another 18,600 blocks.
.hl2	Interaction With System Startup
The SYSTEMBUILD account is in bed with the system startup to some extent.
Installing the source kit appends to SYS$MANAGER:SYSTARTUP.COM an indirect
reference to the file [SYSBLDCOM]SBSTARTUP.COM (therefore, the file
SYS$MANAGER:SYSTARTUP.COM should not end with a $ EXIT; otherwise the system
build startup file will not be invoked). The command procedure SBSTARTUP.COM
serves two purposes: it mounts the disks currently involved in system builds
(the master pack and the current result disk), and it restarts the system
build if one was in progress when the system was last shut down (or crashed).
.s 1
Note that the file SBSTARTUP.COM is writable by the SYSTEMBUILD account, yet is
invoked during the system startup. This gives the SYSTEMBUILD account unlimited
(but detectable) ability to hack the system. If you do not trust the owner of
the SYSTEMBUILD account, you may wish to move SBSTARTUP.COM to the system
manager's account (and remove the reference to VMSACTBLD.COM). The disadvantages
to doing this are that you lose the flexibility in locating the system build
output on different disks and you lose the auto-restart feature of the build.
.hl1	Doing a Component or System Build
Before actually starting a complete or partial system build, it is necessary
to have the target disk (the disk on which the sources will reside) mounted and
to restore the necessary save sets from the Source Kit magtapes.  This
restoration is most
easily done by invoking the command procedure SRCRESTOR.COM via the command
RESTORE. This command
procedure is designed to restore, in the proper order from the magtapes, one
or more (or all) of the component save sets.
.s 1
If you are going to rebuild the entire system, you should respond with "ALL" as
the facility to restore. Depending on the speed of the magtape drive used to
read the Source Kit tapes and the access time of the target disk drive, the
time necessary to restore the entire source kit will range from about an hour
and a half to about four hours (the fastest restoration will be obtained by
using a TU77 or TU78 tape drive and an RP06 or RM05 disk drive; the slowest
using a TE16 and a volume set of RK07s).
.note
Because the entire Source Kit occupies about 150,000 blocks, it will be
necessary to use either an RP06 or RM05 if it is to be contained on one volume.
If an RM03 or RK07 is used, it will be necessary to use a volume set to hold
the entire source kit.
.end note
If you are only rebuild a single component directory, you should first
restore the desired component.  Because there
is a possibility that modules from other components may be needed, you should
examine both the componentLNK.COM and componentLNK.OPT (if there is one) files
in the [.COM] directory to verify whether or not other components should also
be restored. In addition, you should also restore the SYSOBJ save set if you
haven't already, so that you will not have to reassemble/recompile all the other
modules in the [.SRC] directory. (This also has the added benefit that you will
not have to check the componentLNK.COM and .OPT files for additional components
as they will already be there.)
.note
One special note on rebuilding single components: Occasionally the source
modules (usually written in BLISS) will reference source modules of other
components. In these cases, if you have not also restored those required
modules, you will get compilation errors. This is, unfortunately, something
that you will have to find out for yourself.
.end note
.hl2	The Structure of the System Build
The system build environment is organized into a matrix of component and
phases. Components have already been discussed in section 2.0. Each phase is a
step in transforming the sources on the master pack into the resulting
executable system images. The system build operates by running each phase to
completion for all the components, then initiating the next phase, etc. There
are many interdependencies (e.g., common libraries) that are made tractable
by this phasing process. The different phases of a system build are described
below:
.s 1
.lm 8
.i -8
INIT	The INIT phase is used to initialize the result disk for the desired
components. The directory tree for each component is created on the result
disk.
.s 1
.i -8
UPDATE	In the UPDATE phase, update files located in the [.BUG] and [.ENH]
directories are applied to their corresponding sources, producing the "real"
(or in other words, the most current) sources on the result disk. For most
components, however, the only files to be updated are prefix files and macro
library source files. The sources that are fed directly to a language processor
are generally updated during the ASSEM phase below. Sources which have no
corresponding update file are simply copied from the master pack to the result
disk.
.s 1
.i -8
SRCLIB	In the SRCLIB phase, the source libraries (e.g., macro libraries and
BLISS library files) are created.
.s 1
.i -8
ASSEM	This is the phase of the system build that actually does most of the
work. The sources are assembled or compiled by the appropriate language
processor. Most components are compiled by using the FASM.COM file. This is a
parameter driven command procedure that applies any necessary source updates
and assembles or compiles the source files. The file componentASM.DAT in the
[.COM] directory provides all the information necessary to process the source
files by the appropriate language processor; along with other necessary options.
For MACRO source files, FASM utilizes MACRO's ability to directly read and apply
the update files. For other languages, FASM create a temporary file with the
updates applied, runs the compiler, and then deletes the temporary source file.
.s 1
.i -8
OBJLIB	In the OBJLIB phase, the individual object modules are gathered into
object libraries (these are later moved into the [SYSOBJ] directory). Since
the OBJLIB phase deletes the object files after creating the object library,
a completed build cannot be restarted from the OBJLIB phase.
.s 1
.i -8
LNKLIB	In the LNKLIB phase, the various necessary sharable images are created.
.s 1
.i -8
LINK	In the LINK phase, all the components are linked from their object
libraries to form the final executable and sharable images that make up VMS.
.s 1
.i -8
RESULT	In the RESULT phase, the system components are gathered from their
various component directories and stored in their corresponding system
directory (e.g., [SYSEXE], [SYSLIB], etc.). It should be noted that this is
done by creating synonym files (multiple directory entries pointing to the same
file). This is done to minimize the amount of space required on the result
disk.
.s 1
.lm 0
The master command procedure for controlling the system build is
SYSBLDCOM$:VMSNEWBLD.COM. This command procedure reads and interprets the
component data file SYSBLDCOM$:VMSNEWBLD.DAT. Each record in the data file
is the name of a component to be built. It builds the component by calling
its component build file componentBLD.COM in the [.COM] directory. The
component build file is called once for each phase of the system build. In
each phase the DCL symbol PHASE is defined to be the name of the phase (e.g.,
INIT, UPDATE, etc.); the component build file internally dispatches to a
different section for each phase.
.s 1
If you are somewhat confused at this point by the description given above,
you may find it useful to read the build files for some component (COPY is
a good example). However, you should not try to understand this procedure by
reading either VMSNEWBLD.COM or FASM.COM; these command files contain a fair
amount of DCL magic and will most likely only confuse you further. You can
learn most of the details of what is going on by rummaging the various
command procedures and data files; most of them have comments imbedded in them
describing what is going on.
.hl2	Building a Single component
Building a single component of the source kit is a fairly simple procedure. It
will fall into one of two types: building the system executive, and building
everything else.
.hl3	Building the System Executive
To make modifications to the system executive, first copy the file
[SYSOBJ]SYS.OLB to a suitable work directory, with the necessary directory
tree (see section 2.1). If you are the only one making
changes you can use the previously created [SYS.OBJ] directory. Edit and
assemble the modules you wish to change, and replace them in SYS.OLB with the
Librarian. Then use the command procedure SYSBLDCOM$:TRIALSYS.COM to link the
system executive. You must specify to TRIALSYS the parent directory of the
[.OBJ] subdirectory in which SYS.OLB resides (this is usually SYS), and what
other components (if any) that you have modified. This command procedure then
will generate a new system version number, and then link the system executive
and all other components that link with the system symbol table (SYS.STB). (The
object libraries for these components are found in [SYSOBJ].) For further
details, read the comments at the start of SYSBLDCOM$:TRIALSYS.COM.
.note
Since TRIALSYS uses the component build files, there may be attempts to copy
updated files to SYS$LIBRARY:. These will fail, if you are logged in under an
unmodified SYSTEMBUILD account, with a privilege violation. THIS IS TO BE
EXPECTED. DO NOT run TRIALSYS from an account privileged to write the real
SYS$LIBRARY: or you will most certainly mung the real system files.
.end note
.hl4	Running With Your New System Executive
Now that you have a new system executive and all the necessary images have been
re-linked, you must create a suitable system disk to test out the changes you
made. This is done by first creating an unmodified system disk with the command
procedure SYS$UPDATE:VMSKITBLD.COM
(see also section 4.6). (This command procedure will prompt you
along the way for the information it needs to build the system disk.) Once you
have the unmodified system disk in your grubbies, you must update it with the
new system executive you built using the command procedure
SYSBLDCOM$:TRIALKIT.COM.
.note
TRIALKIT is not parameter driven, and may be slightly out of phase with the rest
of the system build; some "file not found" errors may occur which are harmless.
.end note
.hl3	Building Anything Else
When modifying other components, you may use the command procedure
SYSBLDCOM$:FACTSTBLD.COM to build that component without disturbing the
result disk. (If you want to modify the result disk, use the VMSGEN command
procedure as described in section 4.3.) To use this command procedure, you
must first build the necessary directory tree for the component on the work
disk WRKD$:. This may be done by issuing the following DCL commands:
.s 1
.lm 16
$ SET DEFAULT WRKD$:[component]
.br
$ @SYSBLDCOM$:CREATEDIR MASTER
.s 1
.lm 0
.note
If the directory tree already exists, and the above
commands are given, CREATEDIR will delete anything that existed in the directory
tree.
.end note
 You then copy the desired source files from the master pack to the work
disk and edit to your hearts content.
If you are a brave soul, you can copy the modified sources back to the master
pack and then run FACTSTBLD. But, if you are somewhat timid (paranoid) like the
rest of us, you should run FACTSTBLD specifying WRKD$: as the device with
the sources rather than MASD$:. The full details of how to use FACTSTBLD may be
obtained from the comments at the beginning of the command procedure.
.s 1
If the component links with the system executive and you are running with a
private version of the system executive, you must define the logical name EXSM
to be the device and directory containing the SYS.STB for your private system.
.s 1
Now that you have rebuilt the component, it is necessary to test it. This is
most easily done by creating a test system with the command procedure
SYS$UPDATE:VMSKITBLD.COM
(see also section 5.0); then copying the modified component (or components)
to this newly created system disk. It is also a good idea to test this system
on a stand-alone computer as most errors in privileged software have a high
probability of crashing the system.
.hl3	Updating the Object Library [SYSOBJ]
Now that you have a modified object library, you will need to put it (along
with the command procedures to link the component) in the directory [SYSOBJ].
By using this method, it not necessary to rebuild a component from the
beginning every time you make a simple (or not so simple) change. By invoking
the command procedure SYSBLDCOM$:RESULTCPY.COM, the desired object library and
the necessary link command procedures are copied to [SYSOBJ]. These object
libraries are also utilized by TRIALSYS (see section 4.2.1.1).
.hl2	Starting Up a Full System Build (or Multiple Components)
You start a system build by logging in to the SYSTEMBUILD account and typing the
command VMSGEN. This command invokes the command procedure SYSBLDCOM$:VMSGEN.COM
to interactively help you set up the parameters for the build. It asks for the
following information:
.s 1
.lm 8
.i -8
Do you want to delete the old log files?
.s 1
You may or may not want to delete the .LOG files from a previous build. You
should also be aware that if you answer YES to this question, ALL of the .LOG
files in [SYSBLDCOM] are deleted; not just the ones that may be re-generated
by the build you are about to start.
.s 1
.i -8
Enter the mounted SOURCE device name:
.s 1
Answer with the device name on which the master source pack is mounted. This is
usually a bit redundant as the master source pack is almost always in the same
place. However, it does allow for flexibility.
.s 1
.i -8
Is the TARGET disk a volume set?
.s 1
The minimum amount of disk space required for the results of a full system build
is 475,000 blocks (or in other words, you need either an RM05 or RP07 to have
all of the results fit on one volume). Alternatively (by answering YES to this
question), you may use a volume set of two disks to hold the results of the
system build.
.s 1
.i -8
Enter the TARGET device name (volume 1):
.s 1
Answer with the device name on which the result (output) disk is to be mounted.
.s 1
.i -8
Enter its volume label (volume 1):
.s 1
Answer with the desired volume label of the result disk. If the disk is not
mounted at this point, you will be asked if you want to initialize it. If you
answer YES to the initialization question, the disk will be initialized with
the volume label you gave and the necessary directories will be created. If you
answer NO, or the disk is already mounted, the disk is assumed to be properly
set up and only the volume label is checked.
.s 1
.lm 0
If you answer YES to having a volume set, the device name and volume label
questions are repeated for the second volume. At this point VMSGEN edits the
command file SBSTARTUP.COM to mount the result disk(s) that you specified.
.s 1
The next series of questions deal with the actual system build itself:
.s 1
.lm 8
.i -8
Do you wish to do all phases of a build?
.s 1
The meaning of YES is obvious. If you answer NO, you are asked for the starting
and ending phases of the build.
.s 1
.i -8
Do you wish the build to be restartable?
.s 1
If you answer YES, the system build will keep a checkpoint log of its progress.
Should the system crash, or go away for any other reason, the build will
automatically restart with the correct phase and component when the system has
finished rebooting.
.s 1
.i -8
Do you wish to do all components?
.s 1
Answering YES will rebuild all of the components in the component list;
answering NO will cause you to be asked for the first and last components of
a subset of the component list. A common use of the selective build is to deal
with a build failure of a component upon which other components depend.
For example: assume that a compilation failed. You then correct the source on
the master pack. Then, you must build that component starting from the ASSEM
phase (or UPDATE phase) and ending with the OBJLIB phase. Then, you must
build that component and its dependents starting with the LINK phase and
proceeding to the END.
.s 1
.i -8
Using the full VMS component list?
.s 1
Answering YES will cause VMSGEN to use the file SYSBLDCOM$:VMSNEWBLD.DAT as the
component list. You may specify another file you have created to selectively
build only a certain set of components. You only need specify the file name;
MASD$:[SYSBLDCOM].DAT is assumed.
.s 1
.lm 0
If you have requested a full system build, you are now told "Incrementing system
version number for build...". The module WRKD$:[SYS.SRC]VERSION.MAR is modified to
contain a new IDENT and system version number. If you attempt to run a program
linked against with the wrong system version, the CMKRNL and CMEXEC privileges
are removed, thus preventing you from potentially crashing your system. By
automatically changing the system version number, you are guaranteed that all
the systems that you build will be distinguishable.
.s 1
The system version number is the ASCII representation of the 4 character module
ident of VERSION.MAR. For systems generated by DIGITAL, this version number
always starts with X. In your source kit, the version number starts with S. The
remaining 3 characters are set to the radix 36 representation of the number of
hours since 1-Jan-1980. This algorithm provides the best guarantee of
distinguishability between systems you build, systems build by DIGITAL, and
systems build by other customers with source kits.
.s 1
Finally, VMSGEN displays the system build parameters you have selected and asks:
.s 1
.lm 8
.i -8
Are you satisfied to submit this job (Y/N)?
.s 1
Answer as you see fit. You are then asked:
.s 1
.i -8
Submit immediately?
.s 1
If you answer NO, you are given the current time and are asked for the time at
which the job should be started. You should give a time least likely to annoy
other users who dislike LARGE batch jobs.
.s 1
.lm 0
A full system build is a very large job. The command files are configured to
run optimally on a system with 2Mb of main memory. On such a system with an
RM03, RP06, or other suitably fast system disk,
the following table shows the spproximate times needed for a full system
build:
.s 1
.lm 16
11/782 - 13 hours
.br
11/780 - 24 hours
.br
11/750 - 33 hours
.s 1
.lm 0
Go home for the
evening, and read a good book. If you have a significantly smaller configuration,
consider taking a long weekend.
.s 1
Single component build, on the other hand, are usually very quick. They will
usually take from about an hour for some of the smaller components, to several
hours for the SYStem executive.
.hl2	Stopping a System Build Neatly
If it becomes necessary to stop the system build before it would normally,
issue the DCL command STOP__BUILD. This defines a group logical name that
VMSNEWBLD.COM looks for to neatly terminate the build. It should be noted,
however, that this will only occur when a phase has ended or a component has
finished a given phase. Thus, if you issue a STOP__BUILD while the RMS or SYS
components are being processed, it might be a while until everything comes to
a neat stop.
.hl2	Searching the .LOG Files for Errors
When the system (or component) build has finished, you must scan the resulting
 .LOG files for any errors that may have occurred. Because of the use of
parameter driven command procedures, the log files may be rather voluminous.
The SCAN utility is a most useful way of analyzing the log files and only
reporting significant errors. Attempts to delete non-existant files, references
to non-existant update files, etc., are ignored. Errors are displayed with the
component and phase names, the command that generated the error, and the error
message itself. The SCAN utility is invoked with the DCL command
.s 1
.c;$ SCAN filename
.s 1
 .LOG is assumed. The command procedure [SYSBLDCOM]SCANALL.COM contains commands
to scan all of the log files generated by the standard system build.
.s 1
There are several "errors" that will appear as part of a normal system build.
Assorted uses of the RSX-11M librarian will report module replacements in the
SRCLIB and OBJLIB phases. In the LINK phase of DMP, SOS, and UFD there are a number of
"multiply defined PSECT" messages; they are harmless. Also in the link phase,
the TKB module of the UTIL11 component will report multiple definitions for
the symbol ".CLOSE"; this is also harmless.
.hl1	Building a Test System
Once you have determined that everything built to your satisfaction, you will
need to build a test system to verify that your changes work as you intended.
To do this you must first get a scratch disk; an RK07 or anything larger will
be large enough to contain a runable system. Now, you must use the command
procedure SYS$UPDATE:VMSKITBLD.COM to build yourself a system disk. It will ask
you for the "source disk"; answer with the system build result disk (or the
current system disk if only single components, excluding the system executive,
were rebuilt).
For the target disk, give the device name, volume label, and top level
directory (if any) of the disk you are building (it should not be mounted at
this point, the command procedure will mount it). You are then asked if this is
a BUILD or COPY operation. A COPY operation updates an existing system disk; a
BUILD operation initializes the disk and builds a system disk from scratch.
.s 1
VMSKITBLD will inform you that you need some privileges you may not have;
CMKRNL and LOG__IO. These privileges determine whether you will build a "real"
system disk or a "private" system disk. If you have CMKRNL privilege, the
resulting system disk will be owned by UIC [1,4], like the standard system
distributed by DIGITAL. If you do not have CMKRNL privilege, you will see
several "no privilege" error messages, but the disk will be built anyway. The
disk and all the files on it will be owned by your UIC; i.e., it will be a 
private disk. (Note that when you boot this disk and log in under the SYSTEM
account, your UIC will be [1,4]. You may wish to change the UIC to be yours
for consistency.) If you lack the LOG__IO privilege, VMSKITBLD will not be
able to write a boot block on the disk. This won't be a problem unless you
intend to boot on a 11/750 processor; the 11/750 requires the boot block.
.s 1
Once you have built your system disk, find a time when you can take your
machine to boot your system stand-alone.
.hl2	Updating the Public System
After you are satisfied that your system works, and you have convinced the
system manager (potentially yourself) that it works, you can upgrade your
running system. FIRST, MAKE A BACKUP COPY OF YOUR CURRENT SYSTEM.
It is then necessary to boot the system from your new system. After it has
booted, update your public (current) system with VMSKITBLD, specifying a COPY
operation with the appropriate source and target devices.
.note
DO NOT DIRECTLY UPDATE YOUR RUNNING SYSTEM DISK.
.end note
The result will be your public system with all of your modifications installed.
Boot this system disk remembering to apply the SYSBOOT parameter file that
contains your configuration.
