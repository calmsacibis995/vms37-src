$ !
$ !	This is the interactive front end for a VMS build run.
$ !
$ !	It asks questions so as to set up the parameters with
$ !		which to submit VMSBUILD as a batch job  with
$ !		the <component>BLD.COM file for a specified VMS
$ !		component.
$ !	
$ MNT2 = 0
$ INITIT := "NO"
$ TARGDEV2:=""
$ TARGLABEL2:=""
$ OPTIONS = ""
$ ! Turn off STOP_BUILD if it is set.
$ IF F$LOG("STOP_BUILD") .NES. "" THEN DEASSIGN/GROUP STOP_BUILD
$ !
$ INPREC=""
$ INQUIRE REPLY "Do you want to delete the old log files? [NO]"
$ IF REPLY THEN DELETE SYS$LOGIN:*.LOG;*
$ASK_SOURCE:
$ INQUIRE SRCDEV "Enter the mounted SOURCE device name [MASD$:]"
$ IF SRCDEV .EQS. "" THEN SRCDEV:="MASD$"
$ On Warning Then Goto Ask_Source
$ SRCDEV = F$GETDVI(SRCDEV,"DEVNAM")
$ ON WARNING THEN CONTINUE
$
$ASK_VOLSET:
$ INQUIRE VOLSET "Is the TARGET disk a volume set? [NO]"
$ASK_TARGET:
$ VOLNUM := ""
$ IF VOLSET THEN VOLNUM := " (volume 1)"
$ INQUIRE TARGDEV "Enter the TARGET device name''VOLNUM'"
$ IF TARGDEV .EQS. "" THEN GOTO ASK_TARGET
$
$ On Warning Then Goto Ask_Target
$ TARGDEV = F$GETDVI(TARGDEV,"DEVNAM")
$ TARGVOL = F$GETDVI(TARGDEV,"VOLNAM")
$ ON WARNING THEN CONTINUE
$ TIME = F$TIME()
$ IF F$EXTRACT(0,1,TIME) .EQS. " " THEN TIME[0,1]:="0"
$ IF TARGVOL .EQS. "" THEN -
	TARGVOL = "RES" + F$EXTRACT(0,2,TIME) + F$EXTRACT(3,3,TIME)
$ TARGDEF = ""
$
$ INQUIRE TARGLABEL "Enter its volume label''VOLNUM' [''TARGVOL']"
$ IF TARGLABEL .eqs. "" .and. TARGVOL .nes. "" Then -
	TARGLABEL = TARGVOL
$ IF .not. F$GETDVI(TARGDEV, "MNT") .or. TARGVOL .eqs. TARGLABEL THEN -
	GOTO DSK1MNT
$ WRITE SYS$OUTPUT "Volume mounted on ''TARGDEV' is not ''TARGLABEL'
$ GOTO ASK_VOLSET
$
$DSK1MNT:
$ MNT1 = (F$GETDVI(TARGDEV,"VOLNAM").NES."")	! True if pack mounted
$
$ ! Get second volume label if needed
$
$ASK_TARGET2:
$ IF .NOT. VOLSET THEN GOTO ONE_DISK
$ INQUIRE TARGDEV2 "Enter the TARGET device name (volume 2)"
$ IF TARGDEV2 .EQS. "" THEN GOTO ASK_TARGET2
$
$ TARGDEV2 = F$GETDVI(TARGDEV2,"DEVNAM") 
$ TARGVOL  = F$GETDVI(TARGDEV2,"VOLNAM")
$ TARGDEF = ""
$ IF TARGVOL .nes. "" THEN TARGDEF = " [" + TARGVOL + "]"
$
$ INQUIRE TARGLABEL2 "Enter its volume label (different from volume 1)''TARGDEF'"
$ IF TARGLABEL2 .eqs. "" .and. TARGVOL .nes. "" Then TARGLABEL2 = TARGVOL
$ IF .not. F$GETDVI(TARGDEV2, "MNT") .or. TARGVOL .eqs. TARGLABEL2 THEN -
	GOTO DSK2MNT
$ WRITE SYS$OUTPUT "Volume mounted on ''TARGDEV2' is not ''TARGLABEL2'
$ GOTO ASK_VOLSET
$
$DSK2MNT:
$ MNT2 = (F$GETDVI(TARGDEV2,"VOLNAM").NES."")	! True if pack mounted
$TWO_DSK:
$ IF MNT2 .AND. MNT1 THEN GOTO 25
$ IF .NOT. MNT1 .AND. .NOT. MNT2 THEN GOTO TWO_INIT
$ WRITE SYS$OUTPUT "ERROR - Only one volume of set mounted"
$ GOTO ASK_VOLSET
$TWO_INIT:
$ INQUIRE INITIT "Do you wish to initialize ''TARGDEV' and ''TARGDEV2'?"
$ IF .NOT. INITIT THEN GOTO TWO_MNT
$ INIT /SYSTEM 'TARGDEV' 'TARGLABEL' -
	/CLUSTER_SIZE=1 -	! to conserve space on RL02 kits
	/OWNER_UIC=[11,177] -
	/FILE_PROTECTION=(S:RW,O:RWED,G:R,W) -
	/PROTECTION=(S:RW,O:RWED,G:RW,W)
$ INIT /SYSTEM 'TARGDEV2' 'TARGLABEL2' -
	/CLUSTER_SIZE=1 -
	/OWNER_UIC=[11,177] -
	/FILE_PROTECTION=(S:RW,O:RWED,G:R,W) -
	/PROTECTION=(S:RW,O:RWED,G:RW,W)
$TWO_MNT:
$ASK_VOLNAM:
$ INQUIRE VOLNAM "What is the volume set name?"
$ IF VOLNAM .EQS. "" THEN GOTO ASK_VOLNAM
$ CHKVOLNAM:=DISK$'VOLNAM
$ IF F$LOGICAL(CHKVOLNAM) .EQS. "" THEN GOTO GOT_VOLNAM
$ WRITE SYS$OUTPUT "Volume set name already in use"
$ GOTO ASK_VOLNAM
$GOT_VOLNAM:
$ MOUNT/NOQUOTA /BIND=('VOLNAM') 'TARGDEV','TARGDEV2' 'TARGLABEL','TARGLABEL2' -
	 /GROUP/ACCESS=12
$ IF .NOT. INITIT THEN GOTO 25
$ GOTO 15
$ONE_DISK:
$ IF MNT1 THEN GOTO 25
$ INQUIRE INITIT "Do you wish to initialize ''TARGDEV'? [NO]"
$ IF .NOT.  INITIT THEN GOTO ONE_MNT
$ INIT /SYSTEM 'TARGDEV' 'TARGLABEL' -
	/CLUSTER_SIZE=1 -	! to conserve space on RL02 kits
	/OWNER_UIC=[11,177] -
	/FILE_PROTECTION=(S:RW,O:RWED,G:R,W) -
	/PROTECTION=(S:RW,O:RWED,G:R,W)
$ONE_MNT:
$ MOUNT/NOQUOTA 'TARGDEV' 'TARGLABEL' /GROUP /ACCESS=12
$ IF .NOT. INITIT THEN GOTO 25
$ !
$ ! PUT THE SYSTEM DIRECTORIES ON THE TARGET DISK.
$ !
$15:
$ WRITE SYS$OUTPUT "Creating system directories for ",TARGDEV,"..."
$ CREATE/DIRECTORY 'TARGDEV'[SHRLIB]
$ CREATE/DIRECTORY 'TARGDEV'[SYSOBJ]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSEXE]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSLISTS]	
$ CREATE/DIRECTORY 'TARGDEV'[001001]	! SYSLIB synonym first
$ SET FILE /ENTER='TARGDEV'[0,0]SYSLIB.DIR;1 'TARGDEV'[0,0]001001.DIR;1
$ CREATE/DIRECTORY 'TARGDEV'[SYSTEST]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSMAINT]	
$ CREATE/DIRECTORY 'TARGDEV'[001002]	! SYSMSG synonym first
$ SET FILE /ENTER='TARGDEV'[0,0]SYSMSG.DIR;1 'TARGDEV'[0,0]001002.DIR;1
$ CREATE/DIRECTORY 'TARGDEV'[SYSMGR]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSHLP]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSHLP.EXAMPLES]
$ CREATE/DIRECTORY 'TARGDEV'[SYSERR]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSUPD]	
$ CREATE/DIRECTORY 'TARGDEV'[SYSCBI]
$ CREATE/DIRECTORY 'TARGDEV'[SYSBLDCOM]
$ CREATE/DIRECTORY 'TARGDEV'[CONSOLE.780]
$ CREATE/DIRECTORY 'TARGDEV'[CONSOLE.750]
$ CREATE/DIRECTORY 'TARGDEV'[CONSOLE.730]
$25:
$ DELETE/SYMBOL INPREC
$ IF SRCDEV .EQS. TARGDEV THEN GOTO 26
$ SET NOON
$ MUNG SYSBLDCOM$:EDITSBST,'TARGDEV''TARGLABEL','TARGDEV2''TARGLABEL2'
$ PURGE /NOLOG SYS$LOGIN:SBSTARTUP.COM
$ SET ON
$ GOTO 28
$26:
$ MUNG SYSBLDCOM$:EDITSBST,,'TARGDEV2''TARGLABEL2'
$ PURGE/NOLOG SYS$LOGIN:SBSTARTUP.COM
$ OPTIONS := 'OPTIONS'I
$28:
$ INQUIRE REPLY "Do you wish to do all PHASES of a build? [YES]"
$ IF REPLY .EQS. "" THEN REPLY:=Y
$ IF .NOT. REPLY THEN GOTO 30
$ BEGPHASE:="INIT"
$ ENDPHASE:="END"
$ GOTO 37
$30:
$ INQUIRE BEGPHASE "Enter initial phase name"
$ IF BEGPHASE .EQS. "INIT" THEN GOTO 31
$ IF BEGPHASE .EQS. "UPDATE" THEN GOTO 31
$ IF BEGPHASE .EQS. "SRCLIB" THEN GOTO 31
$ IF BEGPHASE .EQS. "ASSEM" THEN GOTO 31
$ IF BEGPHASE .EQS. "OBJLIB" THEN GOTO 31
$ IF BEGPHASE .EQS. "LNKLIB" THEN GOTO 31
$ IF BEGPHASE .EQS. "LINK" THEN GOTO 31
$ IF BEGPHASE .EQS. "RESULT" THEN GOTO 31
$ IF BEGPHASE .EQS. "END" THEN GOTO 31
$ GOTO 30
$31:
$ INQUIRE ENDPHASE "Enter final phase name (or END)"
$ IF ENDPHASE .EQS. "INIT" THEN GOTO 35
$ IF ENDPHASE .EQS. "UPDATE" THEN GOTO 35
$ IF ENDPHASE .EQS. "SRCLIB" THEN GOTO 35
$ IF ENDPHASE .EQS. "ASSEM" THEN GOTO 35
$ IF ENDPHASE .EQS. "OBJLIB" THEN GOTO 35
$ IF ENDPHASE .EQS. "LNKLIB" THEN GOTO 35
$ IF ENDPHASE .EQS. "LINK" THEN GOTO 35
$ IF ENDPHASE .EQS. "RESULT" THEN GOTO 35
$ IF ENDPHASE .EQS. "END" THEN GOTO 35
$ GOTO 31
$35:
$37:
$ INQUIRE REPLY "Do you wish to do all components? [YES]"
$ IF REPLY .EQS. "" THEN REPLY:=Y
$ IF .NOT. REPLY THEN GOTO 50
$ BEGIN:="BEGIN"
$ END:="END"
$ IF .NOT. (BEGPHASE .EQS. "INIT" .AND. ENDPHASE .EQS. "END" -
	.AND. .NOT. INITIT) THEN GOTO 60
$ TYPE SYS$INPUT
WARNING!  The result disk should be re-initialized on full builds.  To
initialize the result disk, dismount it before invoking this procedure.
$ EXIT
$ GOTO 60
$50:
$ INQUIRE BEGIN "Enter first component name"
$ INQUIRE END "Enter last component name [''BEGIN']"
$ IF END .EQS. "" THEN END:='BEGIN'
$
$60:
$ INQUIRE REPLY "Is this an ENH build? [YES]"
$ IF REPLY .EQS. "" THEN REPLY := "YES"
$ IF REPLY THEN GOTO 70
$ OPTIONS:='OPTIONS'B
$70:
$
$ INQUIRE REPLY "Do you want this build to be restartable? [YES]"
$ IF REPLY .EQS. "" THEN REPLY := "YES"
$ IF REPLY THEN OPTIONS:='OPTIONS'R
$
$ INQUIRE REPLY "What should be the process priority of the build? [4]"
$ IF REPLY .NES. "" THEN OPTIONS:='OPTIONS'P'REPLY'
$
$ INQUIRE BLDFIL "Component list? [SYSBLDCOM$:VMSNEWBLD.DAT]"
$ IF BLDFIL .EQS. "" THEN BLDFIL := SYSBLDCOM$:VMSNEWBLD.DAT
$
$ IF BEGPHASE .NES. "INIT" .OR. ENDPHASE .NES. "END" .OR. -
	BEGIN .NES. "BEGIN" .OR. END .NES. "END" THEN GOTO 80
$ WRITE SYS$OUTPUT "Incrementing system version number for build..."
$ SET NOON
$ @SYSBLDCOM$:NEXTVERS
$ COPY/LOG WRKD$:[SYS.SRC]VERSION.MAR 'SRCDEV'[SYS.SRC]
$ COPY/LOG WRKD$:[SYS.SRC]VERSION.MAR 'SRCDEV'[SYS.BUGSRC]
$ SET ON
$80:
$ DELETE/SYMBOL INITIT
$ DELETE/SYMBOL P1
$ DELETE/SYMBOL P2
$ DELETE/SYMBOL P3
$ DELETE/SYMBOL P4
$ DELETE/SYMBOL P5
$ DELETE/SYMBOL P6
$ DELETE/SYMBOL P7
$ DELETE/SYMBOL P8
$ DELETE/SYMBOL MNT1
$ DELETE/SYMBOL MNT2
$ DELETE/SYMBOL REPLY
$ DELETE/SYMBOL TARGLABEL
$ DELETE/SYMBOL TARGDEV2
$ DELETE/SYMBOL TARGLABEL2
$ DELETE/SYMBOL TARGDEF
$ DELETE/SYMBOL TARGVOL
$ DELETE/SYMBOL TIME
$ DELETE/SYMBOL VOLSET
$ DELETE/SYMBOL VOLNUM
$ SHOW SYMBOLS/ALL
$ INQUIRE REPLY "Are you satisfied to submit this job? [YES]"
$ IF REPLY .EQS. "" THEN REPLY:=Y
$ IF .NOT. REPLY THEN EXIT
$ !
$ !	SUBMIT THE SYSTEM BUILD BATCH JOB
$ !
$ TIMEARG := ""
$ INQUIRE REPLY "Submit immediately? [YES]"
$ IF REPLY .EQS. "" THEN REPLY:=Y
$ IF REPLY THEN GOTO SUBMIT
$ WRITE SYS$OUTPUT "The time is now ''F$TIME()'."
$ INQUIRE DELAY "Enter the time to start the job"
$ TIMEARG := "/AFTER=""''DELAY'"""
$SUBMIT:
$ IF 'F$LOC(OPTIONS,"R") .NE. 'F$LEN(OPTIONS) -
	.AND. BEGPHASE .NES. "INIT" -
	.AND. BEGIN .EQS. "BEGIN" -
	.AND. END .EQS. "END" THEN -
	DELETE /NOLOG 'TARGDEV'[*]PHASE.MKR;*
$ JOBNAME:="SYSBUILD"
$ IF BEGIN .EQS. END THEN JOBNAME := 'BEGIN'
$ IF OPTIONS .EQS. "" THEN OPTIONS = "X"	! MUST BE NON NULL
$ SUBMIT SYSBLDCOM$:VMSNEWBLD -
	/QUEUE=SYS$BUILD -
	'TIMEARG'/NAME='JOBNAME' -
	/PARAM=('BEGPHASE':'ENDPHASE','BEGIN','END', -
		'TARGDEV','SRCDEV','OPTIONS','BLDFIL')
