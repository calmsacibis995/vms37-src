	.TITLE	SETCCO - Set RAB$V_CCO for SCAN
	.IDENT	'V02-004'

;****************************************************************************
;*									    *
;*  Copyright (c) 1980                                                      *
;*  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
;* 									    *
;*  This software is furnished under a license and may be used and  copied  *
;*  only  in  accordance  with  the  terms  of  such  license and with the  *
;*  inclusion of the above copyright notice.  This software or  any  other  *
;*  copies  thereof may not be provided or otherwise made available to any  *
;*  other person.  No title to and ownership of  the  software  is  hereby  *
;*  transferred.							    *
;* 									    *
;*  The information in this software is subject to change  without  notice  *
;*  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
;*  Corporation.							    *
;* 									    *
;*  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
;*  software on equipment which is not supplied by DIGITAL.		    *
;*									    *
;****************************************************************************
; 2-001 - Split into three procedures:  CCOPEN remembers the RAB address,
;	  SETCCO sets RAB$V_CCO and CLRCCO clears it.  SBL 18-June-1980
; 2-002	- Add main entry point here.  Do wildcarding.  TMH 10-Aug-1980
; 2-003 - Always pass 128 character string as filespec to FORTRAN subroutine
;	  because FORTRAN can't handle variable length strings TMH 11-Sep-1980
; 2-004 - Use FNA in error message if no ESA.  SBL 28-Oct-1981
; 2-005 - Pass only correct length filename string to SCAN.  SBL 3-Nov-1981

	$DSCDEF
	$SHRDEF

FAB:	$FAB	DNM=<.LOG>,-	
		NAM=NAM,-
		SHR=<PUT,UPI>

NAM:	$NAM	ESA=ESBUF,ESS=NAM$C_MAXRSS,-
		RSA=RSBUF,RSS=NAM$C_MAXRSS
ESBUF:	.BLKB	NAM$C_MAXRSS
RSBUF:	.BLKB	NAM$C_MAXRSS

RAB:	.BLKL	1			; Output RAB address for SETCCO

	.PSECT	CODE,EXE,NOWRT,PIC

	.ENTRY START,^M<>
	CLRQ	-(SP)
	MOVB	#DSC$K_CLASS_D,DSC$B_CLASS(SP)
	PUSHL	SP
	CALLS	#1,G^LIB$GET_FOREIGN	; Get command line after verb
	MOVAB	FAB,R0
	MOVB	DSC$W_LENGTH(SP),FAB$B_FNS(R0)
	MOVL	DSC$A_POINTER(SP),FAB$L_FNA(R0)
	PUSHAB	SEARCH_ERROR
	PUSHAB	DO_FILE
	PUSHL	R0
	CALLS	#3,G^LIB$FILE_SCAN	; Call DO_FILE for each file
	MOVL	#1,R0			; Return with success
	RET

	.ENTRY	DO_FILE,^M<R2,R3,R4,R5>
	MOVL	4(AP),R0		; Get FAB address
	MOVL	FAB$L_NAM(R0),R0	; Get NAM address
	PUSHL	NAM$L_RSA(R0)		; Push descriptor of filespec
	MOVZBL	NAM$B_RSL(R0),-(SP)
	PUSHL	SP
	CALLS	#1,W^SCAN		; Call routine to scan for errors
	RET

	.ENTRY	SEARCH_ERROR,^M<>
	MOVL	4(AP),R1		; Get FAB address
	MOVL	FAB$L_NAM(R1),R0	; Get NAM address
	TSTB	NAM$B_RSL(R0)		; Any result filespec?
	BEQL	10$			; branch if not
	PUSHL	NAM$L_RSA(R0)		; Push descriptor of result filespec
	MOVZBL	NAM$B_RSL(R0),-(SP)
	BRB	50$
10$:	TSTB	NAM$B_ESL(R0)		; Any expanded filespec?
	BEQL	20$			; branch if not
	PUSHL	NAM$L_ESA(R0)		; Push descriptor of expanded filespec
	MOVZBL	NAM$B_ESL(R0),-(SP)
	BRB	50$
20$:	PUSHL	FAB$L_FNA(R1)		; Push descriptor of file name
	MOVZBL	FAB$B_FNS(R1), -(SP)
50$:	PUSHL	FAB$L_STV(R1)
	PUSHL	FAB$L_STS(R1)
	PUSHAB	8(SP)
	PUSHL	#1
	PUSHL	#SHR$_SEARCHFAIL!<3@16>
	CALLS	#5,G^LIB$SIGNAL		; Issue error message
	RET

	.ENTRY	CCOPEN,^M<>
	$CREATE FAB=@4(AP)
	BLBC	R0,10$
	MOVL	8(AP), RAB		; Scan output RAB address
	$CONNECT RAB=@8(AP)
10$:	RET

	.ENTRY	SETCCO,^M<>
	MOVL	RAB, R0
	INSV	#1, #RAB$V_CCO, #1, RAB$L_ROP(R0)
	RET

	.ENTRY	CLRCCO,^M<>
	MOVL	RAB, R0
	INSV	#0, #RAB$V_CCO, #1, RAB$L_ROP(R0)
	RET

	.END	START
