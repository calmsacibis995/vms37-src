MODULE delecli (   ! Declarations of CLI data structures for the DELETE and PURGE commands
                    LANGUAGE (BLISS32),
                    IDENT = 'V03-000'
                    ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	File Handling Utilities
!
! ABSTRACT:
!
!	This module contains declarations of the RMS data storage areas needed
!	for handling input file specifications.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
!--
!++
!
! AUTHOR:	Carol Peters,	CREATION DATE:	03 May 1978 09:59
!
! MODIFIED BY:
!
!	V02-003	ACG0184		Andrew C. Goldstein,	13-Jan-1981  22:32
!		Add /ERASE qualifier
!
!	V002	TMH0001		Tim Halvorsen	28-Mar-1980
!		Change default value of /SINCE to TODAY from YESTERDAY
!--

!
! Table of contents
!

FORWARD ROUTINE
    del$get_cmdqual	: NOVALUE,			! Retrieve command level qualifiers from CLI
    cli_error		: NOVALUE,			! CLI error routine
    date_parse		: NOVALUE,			! Retrieve and convert date specification
    keep_val_parse	: NOVALUE;			! Saves number specified for versions to retain.

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! Common system definitions

LIBRARY 'SYS$LIBRARY:CLIMAC.L32';			! CLI definitions

REQUIRE 'SRC$:DELETE.REQ';				! Common definitions for DELETE utility

REQUIRE 'SRC$:DELEMSG.REQ';				! Message reporting macros for DELETE utility

!
! External declarations
!

EXTERNAL
    del$cli_status	: BITVECTOR,			! Status bits for DELETE and PURGE commands
    del$before_date	: BLOCK [, BYTE],		! Holds /BEFORE date in 64-bit system format
    del$keepver_val,					! Number of most recent versions to retain.
    del$since_date	: BLOCK [, BYTE];		! Holds /SINCE date in 64-bit system format

EXTERNAL ROUTINE
    lib$cvt_time;					! Converts ASCII time to 64-bit system time format

!
! Global variables
!

GLOBAL

!
! CLI Control blocks and work areas used by both the DELETE and the PURGE commands.
!

    initial_desc:					! CLI initialization descriptor:
		$CLIREQDESC (rqtype = initprs,		!    Initialization indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    Address of error action routine

    cmd_name_desc:					! Command line request descriptor:
		$CLIREQDESC (rqtype = getcmd,		!    Command-line (i.e., name) indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    Address of error action routine

    cmd_desc:						! Command qualifiers request descriptor:
		$CLIREQDESC (rqtype = getqual,		!    Command-level qualifiers request
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error,	!    Address of error action routine
			     qualst = 0),		!    Address of qualifier descriptors
							!    supplied at execution time.

    infile_desc:					! Input file request descriptor:
		$CLIREQDESC (rqtype = input1,		!    Primary input indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error,	!    Address of error action routine
			     qualst = 0),		!    Address of qualifier descriptors
							!    supplied at execution time.

    cleanup_desc:					! Parameter "cleanup" request descriptor:
		$CLIREQDESC (rqtype = endprm1,		!    Parameter cleanup indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    CLI error action routine

    numb_parse_desc:					! Decimal value parse request descriptor:
		$CLIREQDESC (rqtype = numerval,		!    Numeric value parse indicator
			     rqflgs = <lastval, absadr>,!    Single value and absolute address indicators
			     erract = cli_error),	!    Address of error action routine

    str_parse_desc:					! ASCII string value parse request descriptor:
		$CLIREQDESC (rqtype = asciival,		!    ASCII string value parse indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    Address of error action routine

    cli_work_area:  VECTOR [cli$c_workarea, BYTE];	! CLI work area

!
! DELETE-specific Command Language Interpreter control Blocks
!

    $CLIQUALCODES (delete,				! Define the DELETE qualifier codes
                    before,
                    confirm,
                    create,
		    erase,
                    expire,
                    log,
                    modify,
                    since);

GLOBAL

!
! Command Qualifier Descriptors
!

    dele_befo_qual:					! before qualifier
                $CLIQUALDESC (qdcode = before,
                              truact = date_parse,
                              setlst = before_bit),

    dele_conf_qual:					! confirm qualifier
		$CLIQUALDESC (qdcode = confirm,
			      setlst = confirm_bit),

    dele_crea_qual:					! create qualifier
                $CLIQUALDESC (qdcode = create,
                              setlst = create_bit),

    dele_eras_qual:					! erase qualifier
		$CLIQUALDESC (qdcode = erase,
			      setlst = erase_bit),

    dele_expi_qual:
                $CLIQUALDESC (qdcode = expire,
                              setlst = expire_bit),

    dele_log_qual:					! log qualifier
		$CLIQUALDESC (qdcode = log,
			      setlst = log_msg_bit),

    dele_modi_qual:
                $CLIQUALDESC (qdcode = modify,
                              setlst = modify_bit),

    dele_sinc_qual:
                $CLIQUALDESC (qdcode = since,
                              truact = date_parse,
                              setlst = since_bit),

    dele_qual_end:					! End of command qualifier descriptors
		$CLIQUALEND;

!
! PURGE-specific Command Language Interpreter control Blocks
!

    $CLIQUALCODES (purge,				! Define the purge qualifier codes
                        keep,
			erase,
                        log);

GLOBAL

!
! Command Qualifier Descriptors
!

    purg_keep_qual:					! keep qualifier
		$CLIQUALDESC (qdcode = keep,
                              truact = keep_val_parse,
			      setlst = keep_bit),

    purg_eras_qual:					! erase qualifier
		$CLIQUALDESC (qdcode = erase,
			      setlst = erase_bit),

    purg_log_qual:
                $CLIQUALDESC (qdcode = log,		! log qualifier
                              setlst = log_msg_bit),

    purg_qual_end:					! End of command qualifier descriptors
		$CLIQUALEND;

GLOBAL ROUTINE del$get_cmdqual :  NOVALUE =		! Retrieve command-level qualifiers from the CLI

!++
! Functional description
!
!	This routine calls CLI to obtain the command line and then
!	completes all CLI request descriptors. Then the routine
!	obtains the command-level qualifiers (i.e., options) from the
!	Command Language Interpreter.
!
! Calling sequence:
!
!	del$get_cmdqual ()
!
! Input parameters
!
!	none
!
! Implicit inputs
!
!	CMD_NAME_DESC - Command name request descriptor
!
!	The starting address of the CLI qualifier lists for command qualifiers. These are:
!
!		dele_befo_qual	- DELETE command qualifier list head
!		purg_keep_qual	- PURGE command qualifier list head
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	DEL$CLI_STATUS	- Relevant command and qualifier indicators set by CLI.
!			  PURGE_CMD_BIT set if this was a PURGE command.
!	CMD_DESC	- Qualifier list address set
!
! Routine value
!
!	novalue
!
! Side effects
!
!	none
!
!--

    BEGIN

!
! Determine whether this is a DELETE command or a PURGE command.
!

    call_cli (						! Call the CLI with the following arguments:
		cmd_name_desc,				!    Command line request descriptor address
		cli_work_area,				!    CLI work area address
		del$cli_status);			!    DELETE status bit vector address

    IF .cmd_name_desc [cli$b_rqstat] EQL		! If this is a DELETE command,
            cli$k_verb_dele
    THEN						! setup the address of the DELETE qualifier
	cmd_desc [cli$a_qualst] = dele_befo_qual	!    Command qualifier request descriptor
    ELSE						! Otherwise, set up the address of the purge
        BEGIN
	cmd_desc [cli$a_qualst] = purg_keep_qual;	!    command qualifier request descriptor.
        del$cli_status [purge_cmd_bit] = TRUE;		! Also set bit that says this is PURGE command.
        END;

!
! Get the command-level qualifiers from the Command Language Interpreter.
!

    call_cli (						! Call the CLI with the following arguments:
		cmd_desc,				!    Command qualifiers request descriptor address
		cli_work_area,				!    CLI work area address
		del$cli_status);			!    DELETE status bit vector address

!
! If a /BEFORE or /SINCE qualifier was given, and no /CREATE, /MODIFY, or /EXPIRE
! qualifier was given, then default to /CREATE.
!

    IF (.del$cli_status [before_bit] OR			! If the user specified /BEFORE
        .del$cli_status [since_bit])			!    or /SINCE
        AND (NOT .del$cli_status [create_bit])		!    and didn't specify /CREATE,
        AND (NOT .del$cli_status [modify_bit])		!    /MODIFY,
        AND (NOT .del$cli_status [expire_bit])		!    or /EXPIRE,
    THEN
        del$cli_status [create_bit] = TRUE;		!    then default to /CREATE.

    END;

ROUTINE cli_error (cb_address, error_number) : NOVALUE =
							! CLI error action routine

!++
! Functional description
!
!	This CLI error action routine sends a CLI error message to the user.
!
! Input parameters
!
!	cb_address.ra.v		- Address of the associated CLI control block
!	error_number.rlu.v	- CLI error number
!
! Implicit inputs
!
!	none
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	none
!
! Routine value
!
!	novalue
!
! Side effects
!
!	none
!
!--

    BEGIN

    BIND
	control_block =
		.cb_address	:  BLOCK [,BYTE];	! Define the format of the input argument

!
! Call FAO to format the error message in the message buffer.
!

    put_message (msg$_syntax,				! Signal "syntax error" with the following arguments:
                    1,					!    Number of message arguments
                    control_block [cli$q_rqdesc],	!    Address of current element descriptor
                    .error_number);			!    CLI error number (secondary message)

!
! Return to the caller.
!

    RETURN;						! Return to the caller.

    END;

ROUTINE date_parse (qual_desc_addr) : NOVALUE =		! /BEFORE and /SINCE qualifier parse routine

!++
! Functional description
!
!	This routine determines whether the user has specified a date value for the
!	/BEFORE and /SINCE qualifiers. If one is present, this routine converts the ASCII
!	date string to a 64-bit system date value. The value can be an ASCII date string of
!	the form normally accepted by CLI (such as dd-mmm-yyyy hh:mm:ss.s, or as the keywords
!	YESTERDAY, TODAY or TOMMORROW).
!
!	If a qualifier value is not specified, this routine defaults the value to TODAY
!
! Calling sequence
!
!	date_parse (qual_desc_addr.rd)
!
! Input parameters
!
!	qual_desc_addr	- Address of the qualifier descriptor of the qualifier whose
!			  value must be parsed.
!
! Implicit inputs
!
!	STR_PARSE_DESC	- the ASCII string parse request descriptor address
!	CLI_WORK_AREA	- the CLI dynamic work area
!
!	If no value is given, TODAY is used.
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	DEL$BEFORE_DATE	- the /BEFORE date value in 64-bit system format
!	DEL$SINCE_DATE	- the /SINCE date value in 64-bit system format
!
! Routine value
!
!	novalue
!
! Side effects
!
!	The keyword value is parsed by CLI. The defaults for keyword values are applied
!	if necessary.
!
!--

    BEGIN

    MAP
        qual_desc_addr	: REF BLOCK [, BYTE];

    LOCAL
        status;						! Holds status from time conversion routine

!
! See whether a qualifier was specified at all.
!

    IF .qual_desc_addr [cli$w_qdvalsiz] EQL 0		! If no qualifier is specified,
    THEN
        BEGIN
        str_parse_desc [cli$w_rqsize] = 5;		! Length of keyword "TODAY".
        str_parse_desc [cli$a_rqaddr] = 		! Specify the address of an ASCII
                    UPLIT BYTE (%ASCII 'TODAY');	!    string representing "TODAY".
        END

!
! Otherwise, the user specified a date value. Collect the ASCII string representing
! this date value from CLI and then call a library routine to convert the string into 64-bit system date format.
!

    ELSE
        call_cli (					! Call CLI with the address of an ASCII
                    str_parse_desc,			!    string request descriptor,
                    cli_work_area,			!    the address of a work area,
                    .qual_desc_addr);			!    and the qualifier descriptor block.

!
! Wherever the ASCII time string came from is now irrelevant. Convert it to a 64-bit
! system time value.
!

    status = lib$cvt_time (				! Convert the string to 64-bit date format.
                            str_parse_desc [cli$w_rqsize],
                            (IF .qual_desc_addr [cli$b_qdcode] EQL cli$k_dele_sinc
                             THEN
                                 del$since_date		!    If processing /SINCE, specify address of
                             ELSE			!    since date; otherwise,
                                 del$before_date)	!    address of before date.
                            );

    IF NOT .status					! If the conversion fails,
    THEN
        SIGNAL_STOP (					!    then signal a severe error.
                        .status);			!    Specify the status from LIB$CVT_TIME.

    END;

ROUTINE keep_val_parse (qual_desc_addr) : NOVALUE =	! /KEEP qualifier value parse routine

!++
! Functional description
!
!	This routine obtains from CLI the value specified with the /KEEP qualifier
!	and stores it in a global variable.
!
!	The syntax that causes this routine to be called is
!
!		/KEEP = <number>
!
!	CLI assures that one and only one number is specified, and it does the
!	conversion from an ASCII string to a binary value.
!
! Calling sequence
!
!	keep_val_parse (qual_desc_addr.rd)
!
! Input parameters
!
!	qual_desc_addr	- Address of the qualifier descriptor containing the
!			  value to be parsed.
!
! Implicit inputs
!
!	NUMB_PARSE_DESC	- the numeric parse request descriptor address
!	CLI_WORK_AREA	- the CLI dynamic work area
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	DEL$KEEPVER_VAL	- the number of versions of each file to retain
!
! Routine value
!
!	novalue
!
! Side effects
!
!	none
!
!--

    BEGIN

!
! Call the CLI callback routine to obtain the numeric value in binary form.
!

    call_cli (						! Call the CLI callback, specifying
                numb_parse_desc,			!    the numeric parse request descriptor address,
                cli_work_area,				!    the CLI work area address,
                .qual_desc_addr);			!    and the qualifier descriptor address.

!
! Store the number away for future use.
!

    del$keepver_val = .numb_parse_desc [cli$l_rqvalu];	! Store the value in a global variable.

    END;

END
ELUDOM
