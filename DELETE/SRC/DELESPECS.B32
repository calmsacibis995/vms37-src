MODULE delespecs (  ! Manipulates file specifications for the DELETE utility
                    LANGUAGE (BLISS32),
                    IDENT = 'V03-000'
                    ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	DELETE Command
!
! ABSTRACT:
!
!	This module obtains file specifications from the CLI, parses them,
!	searches for files that match them, and reports errors.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
!--
!++
!
! AUTHOR:	Carol Peters,	CREATION DATE:	04 May 1978 8:33
!
! Modified by:
!
!	V02-005	MMD0001		Meg Dumont,		2-Mar-1982  14:27
!		Fixed bug in DEL$PARSE_FILE so that an error does not
!		remove a temporary default across the input file spec.
!
!	V02-004	KRM0042		Karl Malik		26-Feb-1982
!		Fixed bug in DEL$SEARCH_FIL which caused an infinite
!		loop of error messages when a network $SEARCH failed.
!
!	V02-003	SHZ0001		Stephen H. Zalewski,	4-Feb-1982  14:13
!		Fix DELETE so that if a wildcard DELETE is done across
!		directory boundries, and a directory is protected, processing
!		goes on with those directories located after the protected one.
!
! 	V02-002	TMH0002		Tim Halvorsen		04-Jan-1979
!		Fix PURGE default when device/directory specified only.
!		e.g. PURGE [USER] now defaults to PURGE [USER]*.*
!
!--

!
! Table of Contents
!
FORWARD ROUTINE
    del$get_file,					! Obtains the input file specification
    del$parse_file,					! Parses a file specification
    del$search_fil,					! Searches for the next file
    del$del_error	: NOVALUE;			! Handles an input $OPEN error

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! VAX/VMS system definitions

LIBRARY 'SYS$LIBRARY:CLIMAC.L32';			! Definitiona for the Command Language Interface

REQUIRE 'SRC$:DELETE.REQ';				! Common DELETE literal definitions and macros

REQUIRE 'SRC$:DELEMSG.REQ';				! Definition of macros to SIGNAL a message

!
! Global variables
!

!
! Own variables
!

!
! Macros
!

!
! Equated symbols
!

!
! External variables
!
EXTERNAL
    cli_work_area	: BLOCK [, BYTE],		! CLI dynamic work area
    cleanup_desc	: BLOCK [, BYTE],		! Parameter "cleanup" request work area
    del$cli_status	: BITVECTOR,			! Status word for DELETE utility
    infile_desc		: BLOCK [, BYTE];		! CLI block for input file request work area

GLOBAL ROUTINE del$get_file (fab_block, nam_block, xab_block) =
							! Obtain file specification

!++
! Functional description:
!
!	This routine gets an file specification and all
!	related qualifiers from the Command Language Interpreter. Then
!	the file specification is parsed.
!
!	If no more input specifications are available, this routine just
!	returns successfully.
!
! Calling sequence:
!
!	copy$get_file (fab_block.ra.v, nam_block.ra.v, xab_block.ra.v)
!
! Input parameters:
!
!	fab_block	- the FAB to use for this specification
!	nam_block	- the NAM to use for this specification
!	xab_block	- the appropriate XAB block
!
! Implicit inputs:
!
!	infile_desc	- CLI block for file specifications
!	cleanup_desc	- CLI block for end of cleanup operations
!
! Output parameters:
!
!	none
!
! Implicit outputs:
!
!	The fields of the FAB and the NAM block are filled in according
!	to the CLI call and the $PARSE function call.
!
! Routine value:
!
!	OK		- success
!	NO_MORE_FILES	- success, no more file specifications
!	NO_FILE		- failure
!
! Side effects:
!
!	none
!
!--

    BEGIN

    MAP
        fab_block	: REF BLOCK [, BYTE],		! FAB to use with file
        nam_block	: REF BLOCK [, BYTE],		! NAM to use with file
        xab_block	: REF BLOCK [, BYTE];		! XAB to use with file

!
! Return if there are no more specifications coming.
!

    IF NOT .infile_desc [cli$v_concatinp]		! If no more file specs are coming,
    THEN
        RETURN no_more_files;				!    then return successfully, without a file.

!
! Get a file specification from the Command Language Interpreter.
!

    call_cli (						! Call the CLI with the following arguments:
                infile_desc,				!    File descriptor address
                cli_work_area,				!    CLI work area address
                del$cli_status);			!    DELETE status indicator vector address

    IF NOT .infile_desc [cli$v_concatinp]		! If no more file specifications follow,
    THEN
        call_cli (					! call the CLI with the following arguments:
                    cleanup_desc,			!    Parameter cleanup descriptor address
                    cli_work_area,			!    CLI work area address
                    del$cli_status);			!    DELETE status indicator vector address

!
! Initialize the file FAB.
!

    $FAB_INIT (						! Setup the file FAB as follows:
                FAB = .fab_block,			!    FAB address is the input parameter.
                FAC = <GET>,				!    Input file.
                SHR = GET,				!    Allow others to read the input file.
                DNA = 0,				!    No default file specification.
                FOP = <NAM>,				!    Open by name block.
                NAM = .nam_block,			!    NAM block address.
                XAB = .xab_block);			!    XAB block address.

!
! Clear the ESL and RSL fields of the NAM block so that data about previously processed
! files does not intrude on parsing of this file specification.
!

    nam_block [nam$b_esl] = 0;				! Clear expanded string length
    nam_block [nam$b_rsl] = 0;				! and resultant string length.

!
! Call RMS $PARSE function to parse the file specification. This resolves logical names and
! determines if there are wildcards present, or explicit named fields present.
!

    fab_block [fab$l_fna] = .infile_desc [cli$a_rqaddr];! Move the file name address
    fab_block [fab$b_fns] = .infile_desc [cli$w_rqsize];! and length into the file FAB block.


    WHILE TRUE DO					! Repeat possibly twice
	BEGIN
	IF NOT del$parse_file (				! Parse the file specification.
                            .fab_block)			!    Specify the FAB block address.
	THEN
	    RETURN no_file;				! If the $PARSE fails, return an error code.

!
! If the file name and file type were not specified on the PURGE
! command, default to "*.*".
!

	IF NOT .del$cli_status[purge_cmd_bit]		! If PURGE command
	    OR .nam_block[nam$v_exp_name]		! and file name missing
	    OR .nam_block[nam$v_wild_name]
	    OR .nam_block[nam$v_exp_type]		! and file type missing
	    OR .nam_block[nam$v_wild_type]
	THEN
	    EXITLOOP;

	fab_block[fab$l_dna] =				! Substitute defaults
            UPLIT BYTE (%ASCII '*.*');
	fab_block[fab$b_dns] = 3;
	END;

!
! Return with success.
!

    RETURN ok;						! Return a success code
    END;

GLOBAL ROUTINE del$parse_file (fab_block) =		! File specification parse routine

!++
! Functional description
!
!	This routine calls RMS to parse a file specification.
!
! Calling sequence
!
!	del$parse_file (fab_block.ra.v)
!
! Input parameters
!
!	fab_block	- the address of the FAB block of the file specification to be parsed.
!
! Implicit inputs
!
!	The NAM block associated with the FAB address passed as a parameters.
!	The RLF (related file) field of the associated NAM block.
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	Fields in the NAM block and the related file block are filled in.
!
! Routine value
!
!	OK	- Successful parse
!	ERROR	- Error from RMS parse
!
! Side effects
!
!	none
!
!--

    BEGIN

    MAP
        fab_block	: REF BLOCK [, BYTE];

    BIND
        nam_block	=				! associated NAM block address
                .fab_block [fab$l_nam]	: BLOCK [, BYTE],
        rela_nam_block	=				! Related NAM block address
                .nam_block [nam$l_rlf]	: BLOCK [, BYTE];

!
! Call RMS to parse the file-specification to resolve a logical name (if any).
!

    nam_block [nam$b_esl] = 0;				! Zero the expanded string length so that
							! del$del_error can determine if an expanded
							! string was created by RMS.

    IF $RMS_PARSE (					! Call the RMS file-spec parsing routine,
                    FAB = .fab_block,			!    specifying the FAB block address,
                    ERR = del$del_error)		!    and an error action routine.
    THEN						! If the parse works,
        BEGIN
        rela_nam_block [nam$b_rsl] =			!    then setup the dummy name block to
                .nam_block [nam$b_esl];			!    have the proper length of the new 
							!    expanded name string.
	RETURN ok;					! Then return a success code.
        END
    ELSE
        rela_nam_block [nam$b_rsl] =			!    setup the dummy name block to
                .nam_block [nam$b_esl];			!    have the proper length of the new 
							!    expanded name string.
	RETURN error;					! Otherwise, return an error to the caller.

    END;

GLOBAL ROUTINE del$search_fil (fab_block) =		! Search for the next file

!++
! Functional description:
!
!	This routine searches for the next file in a directory that matches the
!	current wildcard specification.
!
!	The search is performed by the RMS function $RMS_SEARCH. If the SEARCH
!	fails due to an error other than "no more files match given wildcard",
!	an error is signaled to SYS$ERROR and the WILDCARD bit is turned off.
!
!	One type of failure is permitted:
!
!		RMS$_NMF	- no more files match given wildcard
!
! Calling sequence:
!
!	del$search_fil (fab_block.ra.v)
!
! Input parameters:
!
!	fab_block	- the FAB associated with the file
!
! Implicit inputs:
!
!	This routine is only called if a wildcard is present in the file specification.
!
!	The file's NAM block is read to obtain the length of the resultant name string.
!
! Output parameters:
!
!	none
!
! Implicit outputs:
!
!	DEL$CLI_STATUS bit setting may be altered:
!
!		wildcard_bit	- turned off if no more files that match wildcard are found.
!
! Routine value:
!
!	OK		- search succeeded
!	NO_MORE_FILES	- no further wildcard match found
!	NO_FILE		- search failed due to unexpected error
!
! Side effects:
!
!	The position of the directory is advanced so that a subsequent SEARCH
!	function will find yet the "next" file.
!
!	If an error occurs, an error is signaled.
!
!--

    BEGIN

    MAP
        fab_block	: REF BLOCK [, BYTE];		! FAB block

    LOCAL
        status;						! RMS status code variable

    status = $RMS_SEARCH (				!    then call RMS to search the directory for
                            FAB = .fab_block);		!    the next match.

    IF .status EQL rms$_nmf				! If no more wildcard matches exist,
    THEN
        BEGIN
        del$cli_status [wildcard_bit] = FALSE;		!    turn off the wildcard flag,
        RETURN no_more_files;				!    and return with success status of NO_MORE_FILES.
        END;

    IF NOT .status					! If RMS returned some other error code,
    THEN
        BEGIN
	IF .status NEQ rms$_prv				!    then if it's other than a privilege violation
	THEN
           del$cli_status [wildcard_bit] = FALSE;	!    turn off the wildcard flag (i.e. quit)
        del$del_error (					!    and call the RMS error action routine.
                        .fab_block);
        RETURN no_file;					!    Return to caller with NO_FILE error code.
        END;

!
! Return the RMS status to the caller.
!

    RETURN .status;					! Return status from the SEARCH routine call.

    END;						! End of special wildcard search processing.

GLOBAL ROUTINE del$del_error (fab_block) : NOVALUE =	! RMS error action routine

!++
! Functional description
!
!	This RMS error action routine sends an error message to the user.
!
! Calling sequence
!
!	del$del_error (fab_block.ra.v)
!
! Input parameters
!
!	fab_block	 - Address of the associated FAB
!
! Implicit inputs
!
!	Fields in the NAM block associated with the FAB passed as a parameter:
!
!		RSA	- name of the file after an open
!		RSL	- length of the file after an open
!		ESA	- name of the name after a parse
!		ESL	- length of the name after a parse
!
!	Fields in the FAB block:
!
!		STS	- primary RMS status code
!		STV	- secondary RMS status code
!
!	INFILE_DESC	- the CLI data block for the parameter.
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	none
!
! Routine value
!
!	none
!
! Side effects
!
!	none
!
!--

    BEGIN

    MAP
        fab_block	: REF BLOCK [, BYTE];

    BIND
        nam_block	=				! Associated name block
                .fab_block [fab$l_nam]	: BLOCK [, BYTE];

    LOCAL
        message_id,					! Message identifier used in this routine
	name_desc :  VECTOR [2];			! File name descriptor

!
! Fill in the file name descriptor with the most complete name possible.
!

    IF .nam_block [nam$b_rsl] NEQ 0			! If a resultant name string exists,
    THEN						!
	BEGIN						!
	message_id = msg$_filnotdel;			! then indicate a not deleted error
	name_desc [0] = .nam_block [nam$b_rsl];		! and fill in the resultant name length
	name_desc [1] = .nam_block [nam$l_rsa];		! and address.
	END
    ELSE
	IF .nam_block [nam$b_esl] NEQ 0			! If RMS created an expanded string
	THEN						! but couldn't open the file,
	    BEGIN					!
	    message_id = msg$_filnotdel;		! then indicate an error deleting the file
	    name_desc [0] = .nam_block [nam$b_esl];	! and fill in the expanded name length
	    name_desc [1] = .nam_block [nam$l_esa];	! and address.
	    END
	ELSE
	    BEGIN
	    message_id = msg$_filnotdel;		! Otherwise, indicate a deletion error
	    name_desc [0] = .infile_desc [cli$w_rqsize];! and use the file name length
	    name_desc [1] = .infile_desc [cli$a_rqaddr];! and length passed by the CLI.
	    END;

!
! Signal the error condition.
!

    put_messagex (					! Signal "input open error" with the following arguments:
                    .message_id,			!    the message identifier,
                    1,					!    the number of message arguments,
                    name_desc,				!    the address of input name descriptor,
                    .fab_block [fab$l_sts],		!    the primary RMS completion code,
                    .fab_block [fab$l_stv]);		!    and the secondary RMS completion code.

!
! Return to the caller.
!

    RETURN;						! Return to the caller.

    END;

END
ELUDOM
