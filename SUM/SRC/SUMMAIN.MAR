	.TITLE	SUM -- SOURCE UPDATE MERGE

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;
;
; System equated symbols
;
	$CHFDEF				; Condition handling defintions
	$STSDEF				; Condition handling fields
	$CLIVERBDEF			; Generic verb types

	.PSECT	$DATA,NOEXE,WRT
;
; Command input
;
CMD_INPUT_FAB:
	$FAB	FNM = <SYS$INPUT> -	; File name
		FOP = INP -		; Process permanent file
		FAC = GET		; Allow GET$ operations
;
CMD_INPUT_RAB::
	$RAB	FAB = CMD_INPUT_FAB -	; File access block address
		UBF = CMD_INPUT_BUF -	; Command input buffer
		USZ = CMD_SIZE -	; Command input buffer size
		ROP = <PMT,CVT>
					; Convert lower case to upper case
		; Read with prompt
;
;
; Command output
;
CMD_OUTPUT_FAB:
	$FAB	FNM = <SYS$OUTPUT> -	; File name
		FAC = PUT -		; Allow PUT$ operations
		RAT = CR		; Lines require CR/LF
;
CMD_OUTPUT_RAB:
	$RAB	FAB = CMD_OUTPUT_FAB, -	; File access block address
		RBF = CMD_OUTPUT_BUF	; Record address
;
;
; Prompt strings
;
PROMPT_INPUT::
	.ASCIC	"_Input files:  "
;
PROMPT_OUTPUT::
	.ASCIC	"_Output file:  "
;
PROMPT_CONT::
	.ASCIC	"_ "
;
;
; Command input buffer
;
CMD_INPUT_BUF:
	.BLKB	CMD_SIZE
;
CMD_INPUT_SZE::	.LONG	0		; Current string size
CMD_INPUT_POS::	.LONG	0		; Current scan position
;
REQ_COMMAND::
	$CLIREQDESC RQTYPE = CLI$K_GETCMD
;
;
CMD_OUTPUT_DESC: .LONG	CMD_SIZE
		.LONG	CMD_OUTPUT_BUF
CMD_OUTPUT_BUF:	.BLKB	CMD_SIZE
;
;
SLP_FLAGS::	.BLKW	1
;
SLP_AUDDS::	.LONG	16,SLP_AUDST
;
SLP_AUDST::	.BLKB	16
;
;
MERGE_FLAGS::	.WORD	0
;
; Flag bits
;
	MERM_OUTPUT == 1			; Output file specified
					; 0 = No  1 = Yes

;
; List heads
;
EDIT_NODES::
	.LONG	EDIT_NODES,EDIT_NODES
;
FILE_NODES::
	.LONG	FILE_NODES,FILE_NODES
;
VIRT_ADDR::
	.LONG	0
;
SLP_SIZE::
	.LONG	SLP$K_BLN
;
ED_SIZE::
	.LONG	ED$K_BLN
;
FILE_SIZE::
	.LONG	0
;
; Strings used to generate edit commands
;
AUDIT_ON::	.ASCII	"%"
AUDIT_OFF::	.ASCII	"\"
END_EDIT::	.ASCII	"/"
LOC_ONE::	.ASCID	"-!UW"
LOC_TWO::	.ASCID	",!UW"
COMMAS::	.ASCID	","
AUDIT_TRAIL::	.ASCID	",/!AS/"
COMMENTS::	.ASCID	";!AS"
;
OUTDES::	.BLKL	2
OUTLEN::	.BLKL	1
;
;
DEF_NAME::	.ASCID	/.UPD/
;
DEF_AUDIT::	.ASCID	/;**NEW**/

;
; RMS blocks
;
; Flag bits
;
	SLPM_OPEN == 1		; File open flag
	SLPM_AUDIT == 2		; Audit trail on/off
	SLPM_SUPPRESS == 4	; Suppress clash report
	SLPV_SUPPRESS == 2	; ...
;
;
; Input and Output file blocks
;
	.SAVE
	.PSECT	RMS
OUTPUT_FAB::
	$FAB	FAC = PUT -
		RAT = CR -
		NAM = OUTPUT_NAM -
		DNM = <.UPD>
;
OUTPUT_RAB::
	$RAB	FAB = OUTPUT_FAB -
		RAC = SEQ -
		UBF = OUTPUT_BUF -
		USZ = BUF_SIZE
;
OUTPUT_BUF::
	.BLKB	BUF_SIZE
;
OUTPUT_NAM::
	$NAM	ESA = OUTPUT_BUF -
		ESS = 255
;
;
INPUT_FAB::
	$FAB	FAC = GET
;
INPUT_RAB::
	$RAB	FAB = INPUT_FAB -
		RAC = SEQ -
		UBF = INPUT_BUF -
		USZ = BUF_SIZE
;
INPUT_BUF::
	.BLKB	BUF_SIZE
;
;
RANDOM_FAB::
	$FAB	FAC = GET -
		FOP = NAM
;
RANDOM_RAB::
	$RAB	FAB = RANDOM_FAB -
		RAC = RFA -
		UBF = RANDOM_BUF -
		USZ = BUF_SIZE
;
RANDOM_BUF::
	.BLKB	BUF_SIZE
;
RANDOM_FILE::
	.BLKL	0
;
;
	.RESTORE

;
	.PSECT	$CODE,NOWRT,EXE

START::
	.WORD	0
	MOVAL	W^HANDLER,(FP)		; Set handler address
;
	CALLS	#0,INITIALISE		; Perform initialisation
	BLBC	R0,100$			; Error if LBC
10$:
	CLRQ	-(SP)			; Get any command line from DCL
	PUSHAL	W^REQ_COMMAND
	CALLS	#3,@CLI$A_UTILSERV(AP)
	CMPB	REQ_COMMAND+CLI$B_RQSTAT, - ; Was program invoked as a foreign
		#CLI$K_VERB_FORE		; command?
	BNEQ	20$			; No if NEQ
	MOVZWL	REQ_COMMAND+CLI$W_RQSIZE, -
		W^CMD_INPUT_SZE
	MOVL	REQ_COMMAND+CLI$A_RQADDR, -
		W^CMD_INPUT_POS
	BRB	30$
20$:
	CLRL	W^CMD_INPUT_SZE		; Initialise input buffer
30$:
	MOVL	#1,R0
	CALLS	#0,GET_FILES		; Get input and output files
	BLBS	R0,40$			; OK if LBS
	CMPL	R0,#RMS$_EOF		; Was error EOF?
	BNEQ	60$			; No if NEQ
	BRB	100$
40$:
	CALLS	#0,OPEN_FILES		; Open files
	BLBC	R0,50$			; Error if LBC
;
	CALLS	#0,MERGE_FILES		; Merge files
50$:
	CALLS	#0,CLOSE_FILES		; Close files
60$:
	CMPB	REQ_COMMAND+CLI$B_RQSTAT, - ; Was program invoked as a foreign
		#CLI$K_VERB_FORE		; command?
	BEQL	100$			; Yes if EQL
	CALLS	#0,RETURN_NODES
	BLBS	R0,20$			; OK if LBS
100$:
	MOVL	#1,R0
	RET


;
; Procedure to perform initialisation
;
;
INITIALISE::
	.WORD	0
	$OPEN	FAB = CMD_INPUT_FAB	; Open command input
	BLBC	R0,10$			; Error if LBC
	$CONNECT RAB= CMD_INPUT_RAB	; Connect to RAB
	BLBS	R0,20$			; OK if LBS
10$:
	PUSHL	CMD_INPUT_FAB+FAB$L_STV	; Push error status
	BRB	40$
20$:
	$OPEN	FAB = CMD_OUTPUT_FAB	; Open command output
	BLBC	R0,30$			; Error if LBC
	$CONNECT RAB= CMD_OUTPUT_RAB	; Connect to RAB
	BLBS	R0,50$			; OK if LBS
30$:
	PUSHL	CMD_OUTPUT_FAB+FAB$L_STV; Push error status
40$:
	PUSHL	R0
	CALLS	#2,G^LIB$SIGNAL		; Signal error
50$:
	RET

	.SBTTL	RETURN_NODES
;
; Procedure to return all nodes to virtual memory
;
; Inputs:
;	None
;
; Outputs:
;	R0 = Success/error status
;
;
RETURN_NODES:
	.WORD	0
10$:
	REMQUE	@W^EDIT_NODES,R5	; Get edit node
	BVS	20$			; Queue now empty if VS
	MOVL	R5,W^VIRT_ADDR		; Store size
	PUSHAL	W^VIRT_ADDR		; Push parameters
	PUSHAL	W^ED_SIZE
	CALLS	#2,G^LIB$FREE_VM
	BLBC	R0,50$
	BRB	10$
20$:
	MOVAL	W^FILE_NODES,R5		; Get file nodes list head
30$:
	MOVL	(R5),R5			; Get next NODE
	CMPL	R5,#FILE_NODES		; At end of list?
	BEQL	40$			; Yes if EQL
	MOVL	R5,R4			; Set NAM pointer
	ADDL2	#SLP$T_NAM,R4
	MOVL	NAM$L_RSA(R4),W^VIRT_ADDR ; Get file name node address
	BEQL	30$
	MOVZBL	NAM$B_RSL(R4),W^FILE_SIZE ; and size
	BEQL	30$
	PUSHAL	W^VIRT_ADDR		; Push parameters
	PUSHAL	W^FILE_SIZE
	CALLS	#2,G^LIB$FREE_VM
	BLBC	R0,50$
	BRB	30$
40$:
	REMQUE	@W^FILE_NODES,R5	; Get file node
	BVS	50$			; Queue now empty if VS
	MOVL	R5,W^VIRT_ADDR		; Store size
	PUSHAL	W^VIRT_ADDR		; Push parameters
	PUSHAL	W^SLP_SIZE
	CALLS	#2,G^LIB$FREE_VM
	BLBC	R0,50$
	BRB	40$
50$:
	RET

;
; Condition handlers
;
	.ENABL	LSB
;
GET_HANDLER::
	.WORD	^M<R2,R3,R4,R5>
	MOVL	CHF$L_SIGARGLST(AP),R2	; Get address of signal array
	CMPL	CHF$L_SIG_NAME(R2),#RMS$_EOF
	BNEQ	10$
	$UNWIND_S	
	RET
;
;
HANDLER::
	.WORD	^M<R2,R3,R4,R5>
10$:
	MOVL	CHF$L_SIGARGLST(AP),R2	; Get address of signal array
	MOVL	CHF$L_SIG_NAME(R2),R0	; Get message name
	BITL	#STS$M_FAC_NO,R0	; Is facility number empty?
	BNEQ	99$			; No if NEQ
	BBC	#STS$V_FAC_SP,R0,99$	; Facility specific bit must be set
	MOVAL	W^MERGE_MSGS,R1		; Get address of Merge messages
20$:
	MOVQ	(R1)+,R4		; Get next entry
	BEQL	30$			; End of table if EQL
	CMPL	R0,R4			; This message?
	BNEQ	20$			; No if NEQ
	BRB	40$
30$:
	MOVAL	W^CATCH_MSG,R5		; Use catch message
40$:
	$FAOL_S	CTRSTR = (R5), -	; Control string
		OUTLEN = CMD_OUTPUT_RAB+RAB$W_RSZ, -
		OUTBUF = CMD_OUTPUT_DESC, -
		PRMLST = 12(R2)
	$PUT	RAB = CMD_OUTPUT_RAB
	EXTZV	#STS$V_SEVERITY,#STS$S_SEVERITY, -
		CHF$L_SIG_NAME(R2),R0	; Extract severity code
	CMPL	R0,#STS$K_WARNING	; Is it a warning?
	BNEQ	99$			; No if NEQ
	MOVL	#SS$_CONTINUE,R0
	RET
99$:
	MOVL	#SS$_RESIGNAL,R0
	RET
;
	.DSABL	LSB

;
; Macro to define error messages
;
;
	.MACRO	MSG	NAME,FAOCNT,TEXT,?L1
	.SAVE
	.PSECT	ERRORS
L1:	.ASCID	"TEXT"
	.RESTORE
	.LONG	MER$_'NAME
	.LONG	L1
	.ENDM	MSG
;
MERGE_MSGS:
	MSG	PRSERR,2,<Error parsing file specification !AD>
	MSG	NULLFS,0,<Null file specification>
	MSG	ONEOUT,0,<Only one output file allowed>
	MSG	OPENER,2,<Error opening !AD for input>
	MSG	CREATE,2,<Error creating !AD for output>
	MSG	OUTERR,0,<Error writing to output file>
	MSG	INPEOF,1,<Unexpected EOF on input file !AD>
	MSG	CLASH, 0,<Edit clashes....>
	MSG	CLSHLN,4,<  File !AD!/    !AD>
	MSG	NONODE,0,<Can't expand program>
	MSG	ATSIGN,2,<@ command illegal!/!AD>
	MSG	REOPEN,2,<Error re-opening !AD for input>
	MSG	CONNEC,2,<Error connecting !AD to RAB>
	MSG	DISCON,2,<Error disconnecting !AD from RAB>
	MSG	CLOSER,2,<Error closing !AD>
	MSG	READER,2,<Error reading file !AD>
	MSG	INVPMD,0,<Invalid parameter delimeter>
	MSG	SYNTAX,2,<SLP command syntax error!/    !AD>
	.QUAD	0
;
CATCH_MSG:
	MSG	CTCHER,0,<Merge condition handler error>
;
;
; Define message name symbols
;
$EQULST	MER$_,GLOBAL,32778,8,< -
		<CTCHER> -
		<NONODE> -
		>
;
;
$EQULST	MER$_,GLOBAL,34824,8,< -
		<NULLFS> -
		<ONEOUT> -
		<PRSERR> -
		<OPENER> -
		<CREATE> -
		<OUTERR> -
		<INPEOF> -
		<CLASH>  -
		<CLSHLN> -
		<ATSIGN> -
		<REOPEN> -
		<CONNEC> -
		<DISCON> -
		<CLOSER> -
		<READER> -
		<INVPMD> -
		<SYNTAX> -
		>
;
;
	.END	START
