	.TITLE	SUM$LIST

	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;
; ABSTRACT:
;
;	Source Update Merge procedure to create update files list
;
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:	R. Newland

;
; MODIFIED BY:
;
;
;	V01.01	RN0001		R. Newland	28-Oct-1979
;		Use .ADDRESS in argument lists where required
;
;	V02-002			B. Schreiber	21-Mar-1980
;		Make totally position independent.
;--

	.SBTTL	DECLARATIONS
;
;
; Macro definitions
;
	DEFUPFBLK			; SUM update file block
	DEFSUMCBL			; SUM control block
	$CLIDEF				; CLI blocks
;
;
;
;
; Local storage
;
;
	.PSECT	SUM$RO_DATA,NOEXE,NOWRT,LONG
;
;
;
SUM_INIAUDST:				; Initial audit string
	.ASCIC	/;**NEW**/
;
;
	.PSECT	SUM$RW_DATA,NOEXE,LONG
;
SUM_CLIVAL:				; Qualifier value descriptor block
	$CLIREQDESC -
		RQTYPE = CLI$K_ASCIIVAL	; Convert an ASCII string

	.SBTTL	SUM$LIST_QUAL
;
;++
; Functional description:
;
;	This procedure creates a singly linked update files list
;	from the values of an /UPDATE qualifier.  The qualifier values
;	are expected to be file specifications.  If no values are
;	supplied with the qualifer a list containing one entry is
;	created.
;
;
; Calling sequence:
;
;	CALLS/CALLG
;
;	This procedure will normally be called from the process's
;	qualifier action routine for /UPDATE.
;
;
; Inputs:
;
;	 4(AP)	= CLI call back address
;	 8(AP)	= CLI parameter qualifer descriptor block address
;	12(AP)	= CLI work area address
;	16(AP)	= address to put update files list address (the address
;		  of the first update file)
;
;
; Outputs:
;
;	None
;;
; Implicit inputs:
;
;	The CLI data base
;
;
; Implicit outputs:
;
;	The update files list
;
; Procedure value:
;
;	SUM$_NORMAL =	Normal completion
;	LIB$_INSVIRMEM,
;	LIB$_BADBLOSIZ,
;	LIB$_BADBLOADR = Error from calling LIB$GET_VM or LIB$FREE_VM
;
;
;--
;
	.PSECT	SUM$CODE,NOWRT,LONG
;
	.ENTRY	SUM$LIST_QUAL,^M<R2,R3,R4,R5,R6,R7,R8,R10>
;
	MOVL	#1,R8			; Initialise file number
	BSBW	SUM_GETSUMBLK		; Get memory for Update file block
	BLBC	R0,30$			; Error if LBC
	MOVL	R10,@16(AP)		; Return address of first block
;
	MOVL	8(AP),R6		; Get parameter qualifer parameter block
	TSTW	CLI$W_QDVALSIZ(R6)	; Are there any values?
	BEQL	40$			; No if EQL, return with empty node
	MOVAB	SUM_CLIVAL,R7		; Set pointer to argument list
	BRB	20$			; Got first block so skip
10$:
	MOVL	R10,R2			; Save block address
	INCL	R8			; Increment file number
	BSBW	SUM_GETSUMBLK		; Get memory block for next update file
	BLBC	R0,30$			; Error if LBC
	MOVL	R10,(R2)		; Link this block with previous block
20$:
	PUSHL	8(AP)			; Push parameters, qualifer block address
	PUSHL	12(AP)			; Work area address,
	PUSHL	R7			; Qualifer value descriptor block
	CALLS	#3,@4(AP)		; Get next qualifier value
;
; Get memory block to save file specification
;
	PUSHAL	UPF_Q_CMNT+4(R10)	; Address to store memory address
	PUSHAL	CLI$W_RQSIZE(R7)	; Address of word containing size
	MOVL	@(SP),UPF_Q_CMNT(R10)	; Store file specification size
	CALLS	#2,G^LIB$GET_VM		; Get virtual memory block
	BLBC	R0,30$			; Error if LBC
	MOVC3	UPF_Q_CMNT(R10), -	; Copy file specification from CLI area
		@CLI$L_RQVALU(R7), -	; to virtual memory block
		@UPF_Q_CMNT+4(R10)
	BBS	#CLI$V_MOREVALS, -	; If more values go back for next
		CLI$B_RQSTAT(R7),10$
	MOVL	#SUM$_NORMAL,R0	; Indicate successful completion
	BRB	40$
30$:
	CALLS	#0,SUM$LIB_ERR		; Report library error
40$:
	RET

	.SBTTL	SUM$LIST_PARAM
;
;++
; Functional description:
;
;	This procedure creates a singly linked update files list
;	from the file specifications of a parameter.  If the
;	parameter is null the list will be empty.
;
;
; Calling sequence:
;
;	CALLS/CALLG
;
;	This procedure will normally be called from the program's
;	parameter processing routines.
;
;
; Inputs:
;
;	 4(AP)	= CLI call back address
;	 8(AP)	= CLI parameter request descriptor block address
;	12(AP)	= CLI work area address
;	16(AP)	= address to put update files list address (the address
;		  of the first update file)
;
;
; Outputs:
;
;	None
;;
; Implicit inputs:
;
;	The CLI data base
;
;
; Implicit outputs:
;
;	The update files list
;
; Procedure value:
;
;	SUM$_NORMAL =	Normal completion
;	LIB$_INSVIRMEM,
;	LIB$_BADBLOSIZ,
;	LIB$_BADBLOADR = Error from calling LIB$GET_VM or LIB$FREE_VM
;
;
;--
;
	.ENTRY	SUM$LIST_PARAM,^M<R2,R3,R4,R5,R6,R8,R10>
;
	MOVL	16(AP),R10		; Get address to return Update list
	CLRL	(R10)			; Clear in case parameter is null
	CLRL	R8			; Initialise file number
	MOVL	8(AP),R6		; Get request block address
10$:
	PUSHL	#0			; Call CLI to get next file spec
	PUSHAB	(SP)
	PUSHL	12(AP)			; Work area address
	PUSHL	R6			; Request block address
	CALLS	#3,@4(AP)		; Call CLI
	ADDL	#4,SP			; Tidy stack
	BBC	#CLI$V_PARMPRS, -	; Branch if no parameters
		CLI$B_RQSTAT(R6),20$
;
	MOVL	R10,R2			; Save block address
	INCL	R8			; Increment file number
	BSB	SUM_GETSUMBLK		; Get memory block for next update file
	BLBC	R0,30$			; Error if LBC
	MOVL	R10,(R2)		; Link this block with previous block
;
; Get memory block to save file specification
;
	PUSHAL	UPF_Q_CMNT+4(R10)	; Address to store memory address
	PUSHAL	CLI$W_RQSIZE(R6)	; Address of word containing size
	MOVL	@(SP),UPF_Q_CMNT(R10)	; Store file specification size
	CALLS	#2,G^LIB$GET_VM		; Get virtual memory block
	BLBC	R0,30$			; Error if LBC
	MOVC3	UPF_Q_CMNT(R10), -	; Copy file specification from CLI area
		@CLI$A_RQADDR(R6), -	; to virtual memory block
		@UPF_Q_CMNT+4(R10)
	BBS	#CLI$V_CONCATINP, -	; If more values go back for next
		CLI$B_RQSTAT(R6),10$
20$:
	MOVL	#SUM$_NORMAL,R0	; Indicate successful completion
	BRB	40$
30$:
	CALLS	#0,SUM$LIB_ERR		; Report library error
40$:
	RET

	.SBTTL	SUM_GETSUMBLK
;
;++
;
; Functional description:
;
;	This routine obtains a memory block for an Update files block
;	and if successful initialises the block.
;
; Inputs:
;
;	R8  = File number
;
; Outputs:
;
;	R10 = Address of memory block
;
;--
;
SUM_GETSUMBLK:
	PUSHR	#^M<R2,R3,R4,R5>
	PUSHAB	SUM$VIRT_ADDR		; Stack arguments for LIB$GET_VM
	PUSHAB	SUM$BLSZE		; Address of size of block
	CALLS	#2,G^LIB$GET_VM		; Get memory block
	BLBC	R0,10$			; Error if LBC
	MOVL	W^SUM$VIRT_ADDR,R10	; Get block address
	MOVC5	#0,(R10),#0,#UPF_K_BLN,(R10) ; Zero memory block
	MOVB	R8,UPF_B_FILENO(R10)	; Store file number
	MOVAL	UPF_T_AUDST(R10), -	; Set audit string descriptor
		UPF_Q_AUDDS+4(R10)
	MOVAB	SUM_INIAUDST,R0		; Point to ASCIC initial audit string
	MOVZBL	(R0)+,R1		; Get length of ASCII part of string
	MOVC3	R1,(R0),UPF_T_AUDST(R10); Copy into block
	MOVAB	UPF_T_NAM(R10),R1	; Set NAM block pointer and
	$NAM_STORE NAM = R1, -		; initialise as a NAM block
		BID = #NAM$C_BID, -
		BLN = #NAM$C_BLN
	MOVL	#1,R0			; Reset R0 (Cleared by MOVC5)
10$:
	POPR	#^M<R2,R3,R4,R5>
	RSB
;
;
	.END
