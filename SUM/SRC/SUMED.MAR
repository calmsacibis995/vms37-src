	.TITLE	SUMED
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Procedure to merge slipr files - Main loop
;
;
; Each input file is read and for every editing operation an
; Edit node is created.  This node is linked into the list of editing
; nodes in locator-1 sequence.  If there is an existing node with
; the same locator-1 the new node will be linked in front of it.  This
; gives it precedence to an earlier edit.  As each node is linked checks
; for clashes are made.  If a clash is detected an error message is
; printed.
;
; When all files have been read the complete Edit nodes list is processed
; to form the merged output file
;
	$RABDEF

	.PSECT	$CODE,EXE,NOWRT
;
;
;
;
MERGE_FILES::
	.WORD	0
	BSB	PASS_ONE
	BLBC	R0,10$
	BSBW	PASS_TWO
10$:
	RET

;
; Subroutine to read and process all input files
;
; Inputs:
;	Files list
;
; Outputs:
;	Edit nodes
;
;
PASS_ONE:
	MOVAL	W^FILE_NODES,R10	; Get address of file nodes
10$:
	MOVL	(R10),R10		; Get next node
	CMPL	R10,#FILE_NODES		; At end of list?
	BNEQ	5$			; No if NEQ
	BRW	80$
5$:
	MOVL	R10,R3			; Form NAM block pointer
	ADDL2	#SLP$T_NAM,R3
	MOVAL	W^INPUT_FAB,R4		; and FAB pointer
	$FAB_STORE FAB = R4, NAM = (R3)
	MOVL	NAM$L_RSA(R3),R8	; Get file name in case of error
	MOVZBL	NAM$B_RSL(R3),R9
	$OPEN	FAB = R4
	BLBS	R0,20$			; OK if LBS
	PUSHL	FAB$L_STV(R4)
	PUSHL	R0
	ERRMSG	REOPEN,<R8,R9>
	BRW	66$
20$:
	MOVAL	W^INPUT_RAB,R2
	$CONNECT RAB = R2
	BLBS	R0,30$			; OK if LBS
	PUSHL	RAB$L_STV(R2)
	PUSHL	R0
	ERRMSG	CONNEC,<R8,R9>
	BRB	66$
30$:
	BSB	SET_UP_NODES
	$DISCONNECT RAB = R2
	BLBS	R0,40$			; OK if LBS
	PUSHL	RAB$L_STV(R2)
	PUSHL	R0
	ERRMSG	DISCON,<R8,R9>
	BRB	66$
40$:
	$CLOSE	FAB = R4
	BLBC	R0,50$			; Error if LBC
	BRW	10$
50$:
	PUSHL	FAB$L_STV(R2)
	PUSHL	R0
	ERRMSG	CLOSER,<R8,R9>
66$:
	CALLS	#2,G^LIB$SIGNAL		; Signal error
80$:
	RSB

	.SBTTL	SET_UP_NODES
;
; Subroutine to form all edit_nodes
;
; Inputs:
;	R2  = RAB address
;	R8  = file spec address
;	R9  = file spec size
;	R10 = file node address
;
; Outputs:
;	R0  = Success/error status
;
;
SET_UP_NODES:
	PUSHR	#^M<R2,R3,R4,R6,R7>
	MOVL	#1,RAB$W_RFA+0(R2)	; Initialise record file address (3 words)
	CLRW	RAB$W_RFA+4(R2)
10$:
	BSB	GET_NODE		; Get empty node
	BLBC	R0,60$			; Error if LBC
	MOVL	R10,ED$L_FILE(R5)	; File address
	MOVB	SLP$B_FILENO(R10), -	; File number
		ED$B_FILENO(R5)
	MOVL	RAB$W_RFA+0(R2),ED$W_RFA+0(R5) ; Record file adress (3 words)
	MOVW	RAB$W_RFA+4(R2),ED$W_RFA+4(R5)
	CLRW	ED$W_LINES(R5)
20$:
	MOVW	SLP$W_LOC1(R10),ED$W_LOC1(R5) ; Locator numbers
	MOVW	SLP$W_LOC2(R10),ED$W_LOC2(R5)
	MOVB	SLP$B_FLAGS(R10),ED$B_FLAGS(R5) ; and flags byte
30$:
	BSBW	READ_LINE		; Read line from input file
	BLBC	R0,60$			; Error if LBC, process as end of edit
	BSBW	COMMAND_CHECK		; Check for command
	BLBS	R0,35$			; OK if LBS
	ERRMSG	SYNTAX,<R6,R7>		; SLP command syntax error
	BRB	30$			; Ignore line
35$:
	BITL	#2,R4			; Data terminating command?
	BNEQ	40$			; Yes if NEQ
	BITB	#1,R4			; Data or normal command?
	BNEQ	30$			; Normal command if NEQ
	INCW	ED$W_LINES(R5)		; Increment number of insert lines for
	BRB	30$			; this edit
40$:
	TSTW	ED$W_LOC1(R5)		; If Loc-1 and Loc-2 = 0 and Lines <> 0
	BNEQ	50$			; there is an insert in front of
	TSTW	ED$W_LOC2(R5)		; the file, otherwise throw this
	BNEQ	50$			; Edit node away
	TSTW	ED$W_LINES(R5)
	BNEQ	50$
	BITL	#4,R4			; Was command "/"?
	BEQL	50$			; No if EQL
	BSB	RETURN_NODE		; Return node
	BRB	60$
50$:
	BSB	INSERT_NODE		; Insert node
	BITL	#4,R4			; Was last command "/"?
	BEQL	10$			; No if EQL, back for next edit
60$:
	POPR	#^M<R2,R3,R4,R6,R7>
	RSB

	.SBTTL	GET_NODE
;
; Subroutine to get edit node
;
; Inputs:
;	none
;
; Outputs:
;	R0  = Success/error status
;	R5  = Node address
;
;
GET_NODE:
	PUSHAL	W^VIRT_ADDR		; Address to return VA
	PUSHAL	W^ED_SIZE		; Size of edit node
	CALLS	#2,G^LIB$GET_VM		; Get memory
	BLBC	R0,10$			; Error if LBC
	MOVL	W^VIRT_ADDR,R5		; Put node address in R5
10$:
	RSB

	.SBTTL	RETURN_NODE
;
; Subroutine to return edit node
;
; Inputs:
;	R5 = Node address
;
; Outputs:
;	R0 = Success/error status
;
;
RETURN_NODE:
	MOVL	R5,W^VIRT_ADDR		; Store address of node
	PUSHAL	W^VIRT_ADDR		; Push parameters
	PUSHAL	W^ED_SIZE
	CALLS	#2,G^LIB$FREE_VM
	RSB

	.SBTTL	INSERT_NODE
;
; Subroutine to insert node into edit list and report any clashes
; with previous edits
;
; Inputs:
;	R5  = address of node to insert
;
; Outputs:
;	None
;
;
INSERT_NODE:
	PUSHR	#^M<R2,R3,R4>
	MOVAL	W^EDIT_NODES,R3		; Get address of list head
	CLRL	R2			; Initialise clash count
10$:
	MOVL	(R3),R3			; Get next node
	CMPL	R3,#EDIT_NODES		; At end of list?
	BEQL	20$			; Yes if EQL
	CMPW	ED$W_LOC1(R5),ED$W_LOC1(R3) ; Is new LOC-1 <= current LOC-1
	BLEQ	20$			; Yes if LEQ, found place for node
	CMPW	ED$W_LOC1(R5),ED$W_LOC2(R3) ; Does current LOC-2 overlap with new LOC-1?
	BGTR	10$			; No if GTR
	BSB	REPORT_CLASH
	BRB	10$
20$:
	INSQUE	(R5),@ED$L_BWD(R3)	; Insert new node into list
	MOVZWL	ED$W_LOC2(R5),R4	; Get LOC-2 value
	BNEQ	30$
	MOVZWL	ED$W_LOC1(R5),R4
30$:
	CMPL	R3,#EDIT_NODES		; End of list?
	BEQL	40$			; Yes if EQL
	CMPW	R4,ED$W_LOC1(R3)	; Does edit clash?
	BLSS	40$			; No if LSS
	BSB	REPORT_CLASH
	MOVL	(R3),R3			; Advance to next node
	BRB	30$
40$:
	POPR	#^M<R2,R3,R4>
	RSB

	.SBTTL	REPORT_CLASH
;
; Subroutine to report clashes between edits
;
; Inputs:
;	R2  = Number of clashes
;	R3  = Node address of clashing edit
;	R5  = Node address of new edit
;
; Outputs:
;	R2  = Number of clashes
;
;
REPORT_CLASH:
	TSTW	ED$W_LOC1(R3)		; If LOC-1, LOC-2 and LINES all
	BNEQ	5$			; equal zero node is not full edit
	TSTW	ED$W_LOC2(R3)
	BNEQ	5$
	TSTW	ED$W_LINES(R3)
	BEQL	20$
5$:
	BBC	#SLPV_SUPPRESS, -	; Branch if clash report has
		ED$B_FLAGS(R3),7$	; not been suppressed
	BBS	#SLPV_SUPPRESS, -	; Branch if clash report has
		ED$B_FLAGS(R5),20$	; been suppressed
7$:
	TSTL	R2			; Is this first clash?
	BNEQ	10$			; No if NEQ
	PUSHL	R3			; Save R3
	MOVL	R5,R3
	ERRMSG	CLASH			; Report new clash
	BSB	CLASH_LINE		; Print edit line
	POPL	R3			; Restore R3
10$:
	INCL	R2			; Increment number of clashes
	BSB	CLASH_LINE		; Print edit line
20$:
	RSB

	.SBTTL	CLASH_LINE
;
; Subroutine to print random line from slp input file
;
;
; Inputs:
;	R3 = Edit node address
;
; Outputs:
;	None
;
;
CLASH_LINE:
	PUSHR	#^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	BSB	RANDOM_OPEN			; Open file for random access
	BLBC	R0,70$				; Error if LBC
	MOVAL	W^RANDOM_RAB,R2		; Set pointer to RAB
	MOVL	ED$W_RFA+0(R3),RAB$W_RFA+0(R2) ; Copy record file address
	MOVW	ED$W_RFA+4(R3),RAB$W_RFA+4(R2) ; (3 words)
	$GET	RAB = R2
	BLBS	R0,60$
	PUSHL	RAB$L_STV(R2)
	PUSHL	R0
	ERRMSG	READER,<R8,R9>
	BRB	70$
60$:
	MOVL	RAB$L_RBF(R2),R6
	MOVZWL	RAB$W_RSZ(R2),R7
	ERRMSG	CLSHLN,<R6,R7,R8,R9>
	BRB	80$
70$:
	CALLS	#2,G^LIB$SIGNAL
80$:
	POPR	#^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	RSB

	.SBTTL	RANDOM_OPEN
;
; Subroutine to open a slp input file for random access.  If the
; file is the currently open file then no file access are performed.
; Otherwise, the current file is close and disonnected from the RAB
; and the rqueisted file opened and connected to the RAB
;
;
; Inputs:
;	R3 = Edit node address
;
; Outputs:
;	R8 = Address of current file specification
;	R9 = Size of current file specification
;
;
RANDOM_OPEN:
	PUSHR	#^M<R2,R3,R4,R5,R6,R7,R10>
	MOVL	#1,R0			; Assume success
	MOVL	ED$L_FILE(R3),R10	; Get file node address
	MOVAL	W^RANDOM_RAB,R2		; Set RAB pointer
	MOVAL	W^RANDOM_FAB,R4		; FAB pointer
	MOVL	R10,R5			; NAM pointer
	ADDL2	#SLP$T_NAM,R5
	MOVL	NAM$L_RSA(R5),R8	; Pointers to file spec
	MOVZBL	NAM$B_RSL(R5),R9	; string and size
	TSTL	W^RANDOM_FILE		; Is a file open?
	BEQL	20$			; No if EQL
	CMPL	R10,W^RANDOM_FILE	; Is it file required?
	BNEQ	5$			; No if NEQ
	BRW	80$
5$:
	CLRL	W^RANDOM_FILE		; Close current file
	$DISCONNECT RAB = R2
	BLBS	R0,10$
	PUSHL	RAB$L_STV(R2)
	PUSHL	R0
	ERRMSG	DISCON,<R8,R9>
	BRW	70$
10$:
	$CLOSE	FAB = R4
	BLBS	R0,20$
	PUSHL	FAB$L_STV(R4)
	PUSHL	R0
	ERRMSG	CLOSER,<R8,R9>
	BRB	70$
20$:
	$FAB_STORE FAB = R4, NAM = (R5)
	$OPEN	FAB = R4
	BLBS	R0,30$
	PUSHL	FAB$L_STV(R4)
	PUSHL	R0
	ERRMSG	REOPEN,<R8,R9>
	BRB	70$
30$:
	$CONNECT RAB = R2
	BLBS	R0,40$
	PUSHL	RAB$L_STV(R2)
	PUSHL	R0
	ERRMSG	CONNEC,<R8,R9>
	BRB	70$
40$:
	MOVL	R10,W^RANDOM_FILE		; Set new file open
	BRB	80$
70$:
	CALLS	#2,G^LIB$SIGNAL
80$:
	POPR	#^M<R2,R3,R4,R5,R6,R7,R10>
	RSB

	.SBTTL	READ_LINE
;
; Subroutine to read line sequentially from current slipr input file
;
; Inputs:
;	R8 = Address of file spec
;	R9 = Size of file spec
;
; Outputs:
;	R0 = success/error status
;	R6 = Line buffer address
;	R7 = Line size
;
;
READ_LINE:
	PUSHL	R2
	MOVAL	W^INPUT_RAB,R2		; Get RAB address
	$GET	RAB = R2		; Read line
	BLBS	R0,20$			; OK if LBS
	CMPL	R0,#RMS$_EOF		; Unexpected EOF?
	BNEQ	10$			; No if NEQ
	ERRMSG	INPEOF,<R8,R9>		; Report error
	MOVL	#RMS$_EOF,R0		; Reset R0 to indicate error
	BRB	30$
10$:
	PUSHL	RAB$L_STV(R2)		; Signal error
	PUSHL	R0
	CALLS	#2,G^LIB$SIGNAL
	BRB	30$
20$:
	MOVL	RAB$L_RBF(R2),R6	; Set buffer address
	MOVZWL	RAB$W_RSZ(R2),R7	; and line size
30$:
	POPL	R2
	RSB

	.SBTTL	PASS_TWO
;
; Subroutine to perform Pass 2
;
; This routine processes each edit node, by forming and outputing the
; editing command and then copying any data lines.  For each edit it
; checks that the current audit trail switch (on or off) and audit
; trail string are what are required for that file.  If not commands
; are generated and output to set the audit trail switch and string
; to the correct values
;
;
; Inputs:
;	Edit nodes
;
; Outputs:
;	None
;
; Define R2 flag bits
;
_VIELD	SUM,0,< -
	<EXPED,,M> - 			; Expected edit command has been seen
	<1STEDIT,,M> -			; 1st edit has been processed
	<SUPPRESS,,M> -			; Edit is '--' form
	<SPRCDE,,M> -			; Insert/replace lines being superceded
	>
;
;
PASS_TWO:
	MOVAL	W^EDIT_NODES,R3		; Set up edit nodes pointer
10$:
	MOVL	(R3),R3			; Get next node
	CMPL	R3,#EDIT_NODES		; End of list?
	BEQL	20$			; Yes if EQL
	CLRL	R2			; Clear all flags
	BSBW	RANGE_EDIT		; Find range of next edit
	BSBW	PROCESS_EDIT		; Process next edit
	BLBS	R0,10$			; All ok if LBS
20$:
	MOVAL	W^END_EDIT,R6		; Get address of end edit line
	MOVL	#1,R7			; and set its size
	BSBW	WRITE_LINE		; Write line to output file
	RSB

	.SBTTL	PROCESS_EDIT
;
; Subroutine to process next edit operation
;
; Inputs:
;
;	R2  = Flags
;	R3  = First edit node address
;	R5  = Last edit node address
;	R11 = Highest loc-2 of edit
;
; Outputs:
;
;	R3  = Last edit node address

;
;
PROCESS_EDIT:
	PUSHL	R3			; Save first node address
5$:
	MOVL	ED$L_FILE(R3),R10	; Get file node address
	BSBW	ACCESS_EDIT		; Set up RMS to read edit
	BLBS	R0,7$			; OK if LBS
	BRW	120$			; Error
7$:
	TSTW	ED$W_LOC1(R3)		; Is loc-1 zero?
	BNEQ	10$			; No if NEQ
	BISL2	#SUM_M_EXPED,R2		; Set expected edit seen flag
10$:
	BSBW	READ_RECORD		; Get next record
	BLBC	R0,120$			; Error if LBC
	BSBW	COMMAND_CHECK		; Check for command
	BLBC	R0,10$			; Error if LBC
	BBC	#0,R4,30$		; Branch if data line
	BBS	#1,R4,40$		; Branch if edit terminating command
15$:
	TSTW	SLP$Q_AUDDS(R10)	; Was new audit trail specified?
	BEQL	20$			; No if EQL
	BSBW	RESET_AUDIT		; Set new current audit string
20$:
	MOVZBW	SLP$B_FLAGS(R10),W^SLP_FLAGS ; Set new current flags
30$:
	BBS	#SUM_V_SPRCDE,R2,10$	; Branch if edit being superceded
	BSBW	WRITE_LINE		; Write line to output file
	BRB	10$			; Back for next node
40$:
	BBSS	#SUM_V_EXPED,R2,70$	; Is this expected edit command?
	BBS	#SUM_V_SPRCDE,R2,15$	; Branch if edit is being superceded
	BBSS	#SUM_V_1STEDIT,R2,50$	; Is this first edit of range?
	MOVW	R11,SLP$W_LOC2(R10)	; Yes: set Loc-2 to highest in range
	BRB	60$
50$:
	CLRW	SLP$W_LOC1(R10)		; Zero both Loc-1
	CLRW	SLP$W_LOC2(R10)		; and Loc-2
	BICL2	#SUM_M_SUPPRESS,R2	; Only first edit may be '--' form
60$:
	BSBW	WRITE_EDIT		; Write edit line
	BLBS	R0,10$			; OK if LBS
	BRB	120$
70$:
	BICL2	#SUM_M_EXPED!SUM_M_SPRCDE,R2 ; Clear flags
	CMPL	R3,R5			; Last edit in range?
	BEQL	120$			; Yes if EQL
	MOVL	R3,R4			; Set temp node pointer
	MOVL	(R3),R3			; Move to next node
80$:
	CMPB	ED$B_FILENO(R4), - 	; Is file number of this edit =>
		ED$B_FILENO(R3)		; file number of next edit?
	BLSS	90$			; No if LSS, inserts are not superceded
	TSTW	ED$W_LOC1(R4)		; Insert to front of file?
	BEQL	90$			; Yes if EQL, insert is not superceded
	CMPW	ED$W_LOC2(R4), - 	; Does edit's loc-2 reach next's loc-1
		ED$W_LOC1(R3)
	BGEQ	100$			; Yes if GEQ, inserts are superceded
90$:
	CMPL	R4,(SP)			; Back to first node?
	BEQL	110$			; Yes if EQL
	MOVL	ED$L_BWD(R4),R4		; Go back to previous node
	BRB	80$			; and test again
100$:
	BISB	#SUM_M_SPRCDE,R2	; Set inserts to be superceded flags
110$:
	BRW	5$			; Process next edit
120$:
	ADDL2	#4,SP			; Clear stack
	RSB

	.SBTTL	RANGE_EDIT
;
; Subroutine to find range of next edit operation
;
; Inputs:
;
;	R2 = Flags
;	R3 = Current (first) node
;
; Outputs:
;
;	R2 = Flags
;	R5 = Last node of edit
;	R11= Highest locator-2 number of edit range
;
;
RANGE_EDIT:
	PUSHL	R3			; Save R3
	BISL2	#SUM_M_SUPPRESS,R2	; Assume all clash messages suppressed
	MOVZWL	ED$W_LOC2(R3),R11	; Initialise highest locator-2
	MOVL	R3,R5			; and current node pointer
10$:
	BBS	#SLPV_SUPPRESS, - 	; Branch if '--' form of edit
		ED$B_FLAGS(R3),15$
	BICL2	#SUM_M_SUPPRESS,R2	; Edit will be '-' form
15$:
	MOVL	(R5),R3			; Point to next edit node
	CMPL	R3,#EDIT_NODES		; Is it end of list?
	BEQL	30$			; Yes if EQL
	MOVL	R11,R1			; Get highest locator-2
	BNEQ	20$			; If non-zero compare with this
	MOVZWL	ED$W_LOC2(R5),R1	; Get current locator-2
	BNEQ	20$			; If zero use
	MOVZWL	ED$W_LOC1(R5),R1	; locator-1
20$:
	CMPW	R1,ED$W_LOC1(R3)	; Does this edit overlap with next?
	BLSS	30$			; No if LSS
	MOVL	R3,R5			; Set next node to be current node
	CMPW	R11,ED$W_LOC2(R5)	; Is locator-2 higher then current
	BGEQ	10$			; No if GEQ
	MOVZWL	ED$W_LOC2(R5),R11	; Reset with higher number
	BRB	10$
30$:
	POPL	R3			; Restore R3
	RSB

	.SBTTL	ACCESS_EDIT
;
; Subroutine to set up RMS 32 to read an edit from an input file
;
; Inputs:
;	R3 = Edit node address
;
; Outputs:
;	RAB block set up for RFA access to edit lines
;
;
ACCESS_EDIT:
	PUSHL	R2
	MOVAL	W^RANDOM_RAB,R2		; Set pointer to RAB
	BSBW	RANDOM_OPEN		; Get correct file open
	BLBC	R0,10$			; Error if LBC
	MOVL	ED$W_RFA+0(R3),RAB$W_RFA+0(R2) ; Copy RFA (3 words)
	MOVW	ED$W_RFA+4(R3),RAB$W_RFA+4(R2)
	MOVB	#RAB$C_RFA,RAB$B_RAC(R2)       ; Set into RFA access mode
10$:
	POPL	R2
	RSB

	.SBTTL	READ_RECORD
;
; Subroutine to read edit record.  The first record is read from
; a random position, subsequent records are read sequentially from
; the first.  To achieve this this routine changes the record access
; mode from RFA to SEQ after reading the first record
;
;
; Inputs:
;	R8 = address of file spec string
;	R9 = size of file spec string
;
; Outputs:
;	R6 = Record address
;	R7 = Record size
;
;
READ_RECORD:
	PUSHL	R2
	MOVAL	W^RANDOM_RAB,R2		; Set pointer to RAB
	$GET	RAB = R2		; Get line
	BLBS	R0,10$			; OK if LBS
	ERRMSG	READER,<R8,R9>
	BRB	20$
10$:
	MOVL	RAB$L_RBF(R2),R6	; Set buffer address
	MOVZWL	RAB$W_RSZ(R2),R7	; and line size
	CMPB	RAB$B_RAC(R2),#RAB$C_RFA ; Is it in RFA mode?
	BNEQ	20$			; No if NEQ
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R2) ; Set into SEQ access mode
20$:
	POPL	R2
	RSB

	.SBTTL	RESET_AUDIT
;
; Subroutine to set new current audit trail string
;
; Inputs:
;	R10 = File node address
;
; Outputs:
;	None
;
	.ENABL	LSB
;
;
RESET_AUDIT:
	PUSHR	#^M<R2,R3,R4,R5>
	MOVC3	SLP$Q_AUDDS(R10), -	; Copy audit string
		SLP$T_AUDST(R10), -
		SLP$T_AUCST(R10)
	MOVW	SLP$Q_AUDDS(R10),SLP$Q_AUCDS(R10) ; and string length
	BRB	10$
;
RESET_CURRENT:
	PUSHR	#^M<R2,R3,R4,R5>
10$:
	MOVC3	SLP$Q_AUCDS(R10), -	; Copy audit string
		SLP$T_AUCST(R10), -
		SLP_AUDST
	MOVW	SLP$Q_AUCDS(R10),W^SLP_AUDDS ; and string length
	POPR	#^M<R2,R3,R4,R5>
	RSB
;
	.DSABL	LSB

	.SBTTL	WRITE_EDIT
;
; Subroutine to form and write edit command to output file
;
; Inputs:
;	R2  = Flags
;	R3  = Edit node address
;	R10 = File node address
;
; Outputs:
;	None
;
;
WRITE_EDIT:
	XORB3	W^SLP_FLAGS, -		; Is audit trail switch for this file
		SLP$B_FLAGS(R10),R1	; different to current setting?
	BITW	#SLPM_AUDIT,R1		;
	BEQL	30$			; No if EQL
	MOVL	#1,R7			; Set output line size
	BITW	#SLPM_AUDIT,W^SLP_FLAGS	; Was audit ON?
	BNEQ	10$			; Yes if NEQ
	MOVAL	W^AUDIT_ON,R6		; It was OFF so turn ON
	BISW	#SLPM_AUDIT,W^SLP_FLAGS
	BRB	30$
10$:
	MOVAL	W^AUDIT_OFF,R6		; It was ON so turn OFF
	BICW	#SLPM_AUDIT,W^SLP_FLAGS
20$:
	BSBW	WRITE_LINE		; Write command to file
	BLBC	R0,10$			; Error of LBC
30$:
	CLRL	R7			; Initialise line size
	CLRL	R4			; Zero comment count
	MOVZWL	#BUF_SIZE,W^OUTDES	; Initialise output buffer
	MOVAL	W^OUTPUT_BUF,W^OUTDES+4	; descriptor
	BBC	#SUM_V_SUPPRESS,R2,32$	; '--' form of edit?
	MOVB	#^A/-/,@W^OUTDES+4	; Insert first '-'
	MOVL	#1,W^OUTLEN
	BSBW	ADJUST_COUNTS
32$:
	TSTW	SLP$W_LOC1(R10)		; Is there a locator-1
	BEQL	33$			; No if EQL
	$FAO_S	W^LOC_ONE,W^OUTLEN, -	; Convert and store locator-1
		W^OUTDES,SLP$W_LOC1(R10)
	BRB	37$
33$:
	MOVB	#^A/-/,@W^OUTDES+4	; Insert a '-'
	MOVL	#1,W^OUTLEN
37$:
	BSBW	ADJUST_COUNTS
;
	TSTW	SLP$W_LOC2(R10)		; Is there a locator-2?
	BEQL	40$			; No if EQL
	$FAO_S	W^LOC_TWO,W^OUTLEN, -	; Convert and store locator-2
		W^OUTDES,SLP$W_LOC2(R10)
	BSBW	ADJUST_COUNTS
	INCL	R4			; One comma now in line
40$:
	TSTW	SLP$Q_AUDDS(R10)	; Audit trail in this command?
	BEQL	50$			; No if EQL
	BSBW	RESET_AUDIT		; Reset audit trail
	BRB	60$
50$:
	PUSHR	#^M<R0,R2,R3,R5>
	CMPC5	W^SLP_AUDDS,W^SLP_AUDST,#0, - ; Is audit trail required for this
		SLP$Q_AUCDS(R10),SLP$T_AUCST(R10) ; file equal to current?
	POPR	#^M<R0,R2,R3,R5>
	BEQL	80$			; Yes if EQL
	BSBW	RESET_CURRENT		; Reset current audit string
60$:
	CMPL	R4,#1			; One comma on line?
	BGEQ	70$			; Yes if GEQ
	MOVB	#^A/,/,@W^OUTDES+4	; Insert comma
	MOVL	#1,W^OUTLEN
	BSB	ADJUST_COUNTS
	INCL	R4			; Increment number of commas
	BRB	60$
70$:
	$FAO_S	W^AUDIT_TRAIL,W^OUTLEN, - ; Insert audit trail
		W^OUTDES,#SLP_AUDDS
	BSB	ADJUST_COUNTS
	INCL	R4			; Increment number of commas on line
80$:
	TSTW	SLP$Q_CMNT(R10)		; Comment in command?
	BEQL	110$			; No if EQL
90$:
	CMPL	R4,#2			; Two commas on line
	BGEQ	100$			; Yes if GEQ
	MOVB	#^A/,/,@W^OUTDES+4	; Insert comma
	MOVL	#1,W^OUTLEN
	BSB	ADJUST_COUNTS
	INCL	R4			; Increment number of commas
	BRB	90$
100$:
	MOVAL	SLP$Q_CMNT(R10),R1
	$FAO_S	W^COMMENTS,W^OUTLEN, -	; Insert comment into line
		W^OUTDES,R1
	BSB	ADJUST_COUNTS
110$:
	CMPL	R7,#1			; Is line only '-'?
	BEQL	120$			; Yes if EQL so dont output it
	MOVAL	W^OUTPUT_BUF,R6		; Set buffer pointer
	BSB	WRITE_LINE
120$:
	RSB
;
;
;
; Subroutine to adjust output buffer descriptor as each
; element of command line is inserted
;
;
; Inputs:
;	R7 = Buffer size
;	OUTLEN = Length of last entry
;
; Outputs:
;	R7 = New buffer length
;	OUTDES = Describes remainder of buffer
;
;
ADJUST_COUNTS:
	ADDW2	W^OUTLEN,R7		; Form new line length
	SUBW2	W^OUTLEN,W^OUTDES	; Reduce size of remaining buffer
	ADDL2	W^OUTLEN,W^OUTDES+4	; Set pointer to first unused byte
	RSB

	.SBTTL	WRITE_LINE
;
; Subroutine to write line to SLPPR output file
;
; Inputs:
;	R6 = Line buffer address
;	R7 = Line size
;
;
; Outputs:
;	R0 = success/error status code
;
;
WRITE_LINE:
	PUSHL	R2
	BITW	#MERM_OUTPUT,W^MERGE_FLAGS ; Was output file specified?
	BEQL	10$			; No if EQL
	MOVAL	W^OUTPUT_RAB,R2		; Get address of RAB
	MOVL	R6,RAB$L_RBF(R2)	; Insert line address
	MOVW	R7,RAB$W_RSZ(R2)	; and size
	$PUT	RAB = R2
	BLBS	R0,10$			; OK if LBS
	PUSHL	RAB$L_STV(R2)		; Signal error
	PUSHL	R0
	ERRMSG	OUTERR
	CALLS	#2,G^LIB$SIGNAL
10$:
	POPL	R2
	RSB

	.SBTTL	COMMAND_CHECK
;
; Subroutine to check if line is a command
;
; Inputs:
;	R6 = Address of line
;	R7 = Size of line
;	R10= File address
;
; Outputs:
;	R4[00] = 0:Data  1:Command
;	R4[01] = 0:Normal command  1:Data terminator command
;	R4[02] = 0:Data terminator  1:End of edit
;	R6 = Address of line
;	R7 = Size of line
;
	$TPADEF
;
COMMAND_CHECK:
	MOVW	SLP$W_DOT(R10),W^DOT	; Get dot value for this file
	MOVZBW	SLP$B_FLAGS(R10),W^FLAGS ; Get current flags word
	BICB2	#SLPM_SUPPRESS,W^FLAGS	; but clear suppress flag
	CLRW	W^LOC
	CLRW	W^LOC1
	CLRW	W^LOC2
	CLRQ	W^AUDIT
	CLRQ	W^COMMENT
	MOVL	R6,W^ADDR		; Save line address and size
	MOVL	R7,W^SIZE
;
	MOVL	R6,W^TPARSE_BLOCK+TPA$L_STRINGPTR ; Set TPARSE input
	MOVL	R7,W^TPARSE_BLOCK+TPA$L_STRINGCNT	; string descriptor
	PUSHAL	W^SUM_MER_KEY
	PUSHAL	W^SUM_MER_STATE
	PUSHAL	W^TPARSE_BLOCK
	CALLS	#3,G^LIB$TPARSE
	BLBC	R0,20$			; Error if LBC
	MOVL	W^ADDR,R6		; Reset line address and size
	MOVL	W^SIZE,R7
	MOVW	W^DOT,SLP$W_DOT(R10)
	MOVB	W^FLAGS,SLP$B_FLAGS(R10)
	MOVW	W^LOC1,SLP$W_LOC1(R10)
	MOVW	W^LOC2,SLP$W_LOC2(R10)
	MOVW	W^AUDIT,W^SLP$Q_AUDDS(R10)
	TSTL	W^AUDIT+4		; Was audit trail specified?
	BEQL	10$			; No if EQL
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>
	MOVC3	W^AUDIT,@W^AUDIT+4,@SLP$Q_AUDDS+4(R10)
	POPR	#^M<R0,R1,R2,R3,R4,R5>
10$:
	MOVQ	W^COMMENT,SLP$Q_CMNT(R10)
	MOVL	W^TYPE,R4
20$:
	RSB

	.PSECT	$DATA,NOEXE,WRT
;
; Local data
;
DOT:	.WORD	0			; '.' value
LOC:	.WORD	0
LOC1:	.WORD	0
LOC2:	.WORD	0
FLAGS:	.WORD	0
TYPE:	.LONG	0
ADDR:	.LONG	0
SIZE:	.LONG	0
AUDIT:	.QUAD	0
COMMENT: .QUAD	0

	.SBTTL	TPARSE
;
;
TPARSE_BLOCK:
	.LONG	TPA$K_COUNT0
	.BLKL	TPA$K_LENGTH0-4
;
	COMMA = ^X2C
	SEMICOLON = ^X3B
;
	.SAVE
;
	$INIT_STATE	SUM_MER_STATE,SUM_MER_KEY
;
; Get 1st character of line
;
	$STATE
	$TRAN	TPA$_LAMBDA,,ACT_BLANKS_SIG
	$STATE
	$TRAN	'%',CMND,ACT_PERCENT
	$TRAN	'-',EDIT
	$TRAN	'/',TERM
	$TRAN	'@',TPA$_FAIL,ACT_ATSIGN,,,0
	$TRAN	'\',CMND,ACT_BACKSLASH
	$TRAN	TPA$_EOS,DATA
	$TRAN	TPA$_ANY,DATA
;
; End data line
;
	$STATE	DATA
	$TRAN	TPA$_LAMBDA,TPA$_EXIT,ACT_EXIT,,,0
;
; End normal command line
;
	$STATE	CMND
	$TRAN	TPA$_LAMBDA,TPA$_EXIT,ACT_EXIT,,,1
;
; End data terminating command
;
	$STATE	TERM
	$TRAN	TPA$_LAMBDA,TPA$_EXIT,ACT_EXIT,,,7
;
;
; Edit command
;
; Read locator-1
;
	$STATE	EDIT
	$TRAN	'-',,ACT_SUPPRESS
	$TRAN	TPA$_LAMBDA
	$STATE
	$TRAN	TPA$_LAMBDA,,ACT_BLANKS_NSIG
	$STATE
	$TRAN	!LOCATOR,,ACT_LOC1
;
; Read Locator-2
;
	$STATE
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$TRAN	COMMA
	$STATE
	$TRAN	!LOCATOR,,ACT_LOC2
	$TRAN	TPA$_EOS,TPA$_EXIT
;
; Read audit string
;
	$STATE
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$TRAN	COMMA
	$STATE
	$TRAN	'/',,ACT_AUDIT
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$STATE	AUDCH
	$TRAN	'/',,ACT_AUDEND
	$TRAN	TPA$_ANY,AUDCH,ACT_AUDCH
;
; Read comment line
;
	$STATE
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$STATE	CMNT
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
;
;
; Subexpression to parse locator
;
	$STATE	LOCATOR
	$TRAN	'.',,ACT_DOT
	$TRAN	TPA$_DECIMAL,,ACT_LOCNUM
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
	$STATE
	$TRAN	'+'
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
	$STATE
	$TRAN	TPA$_DECIMAL,,ACT_PLUS
	$STATE
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
;
	$END_STATE
;
;
	.RESTORE

;
; Tparse action routines
;
;
	.PSECT	$CODE,NOWRT,EXE

ACT_BLANKS_SIG:
	.WORD	0
	BBSS	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$
10$:
	RET
;
;
ACT_BLANKS_NSIG:
	.WORD	0
	BBCC	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$
10$:
	RET
;
;
ACT_PERCENT:
	.WORD	0
	BISW	#SLPM_AUDIT,W^FLAGS	; Switch on audit trail
	RET
;
;
ACT_ATSIGN:
	.WORD	0
	ERRMSG	ATSIGN,<ADDR,SIZE>	; Print error line
	MOVAL	TPA$L_PARAM(AP),W^TYPE
	MOVL	#1,R0
	RET
;
;
ACT_BACKSLASH:
	.WORD	0
	BICW	#SLPM_AUDIT,W^FLAGS	; Switch off audit trail
	RET
;
;
ACT_EXIT:
	.WORD	0
	MOVL	TPA$L_PARAM(AP),W^TYPE		; Set return type
	RET
;
;
ACT_LOC1:
	.WORD	0
	MOVW	#1,W^TYPE		; Assume normal command
	MOVW	W^LOC,W^LOC1
	BEQL	10$			; If EQL is a normal command
	MOVW	#3,W^TYPE		; Set as data terminator command
10$:
	CLRW	W^LOC
	RET
;
;
ACT_LOC2:
	.WORD	0
	MOVW	W^LOC,W^LOC2
	RET
;
;
ACT_DOT:
	.WORD	0
	MOVW	W^DOT,W^LOC
	RET
;
;
ACT_LOCNUM:
	.WORD	0
	MOVW	TPA$L_NUMBER(AP),W^LOC
	MOVW	W^LOC,W^DOT
	RET
;
;
ACT_PLUS:
	.WORD	0
	ADDW2	TPA$L_NUMBER(AP),W^LOC
	MOVW	W^LOC,W^DOT
	RET

;
;
ACT_AUDIT:
	.WORD	0
	MOVL	TPA$L_STRINGPTR(AP),W^AUDIT+4
	BBSS	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$ ; Make blanks significant
10$:
	RET
;
;
ACT_AUDCH:
	.WORD	0
	INCL	W^AUDIT
	RET
;
;
ACT_AUDEND:
	.WORD	0
	BBCC	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$ ; Switch off blank processing
10$:
	RET
;
;
ACT_CMNT:
	.WORD	0
	MOVQ	TPA$L_STRINGCNT(AP),W^COMMENT
	RET
;
;
ACT_SUPPRESS::
	.WORD	0
	BISB2	#SLPM_SUPPRESS,W^FLAGS	; set clash messages suppressed flag
	RET

;
;
	.END
