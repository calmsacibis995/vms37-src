	.TITLE	SUM$OPEN

	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;
; ABSTRACT:
;
;	Source Update Merge procedure to check the existance of
;	the files in an update files list.
;
;
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:	R. Newland

;
; MODIFIED BY:
;
;	V02-001		BLS0139		Benn Schreiber		26-Jan-1981
;		Remove deallocation of unused part of resultant name buffer
;
;--

	.SBTTL	DECLARATIONS
;
;
; Macro definitions
;
	DEFUPFBLK			; Source update merge
	$FABDEF				; FAB block
	$NAMDEF				; NAM block
;
;
;
;
; Local storage
;
;
	.PSECT	SUM$RO_DATA,NOEXE,NOWRT,LONG
;
;
SUM_DEFNAME:
	.ASCIC	/.UPD/			; Default file name
;
SUM_MAXRSS:
	.LONG	256			; Max size of resultant file name string
;
;
;
	.PSECT	SUM$RW_DATA,NOEXE,LONG
;

	.SBTTL	SUM$OPEN
;
;++
; Functional description:
;
;	This procedure determines which files in an update files list
;	can be successfully opened.  The NAM block information of each
;	file which can be opened is saved so that subsequent opens can
;	be performed quickly.  The resultant file specification string
;	is also saved.  For files that can not be opened because of a
;	'file not found' error a warning message is issued and the file
;	entry removed.  For files that can not be opened for any other
;	reason a fatal error message is issued.
;
;	The NAM block of the associated source file is used to
;	supply initial default information.
;
;	The input parameter, address of first update file, will be
;	changed if the first file (or the new first file) can not be
;	found.  If all files can not be found the pointer will become zero.
;
;
; Calling sequence:
;
;	CALLG/CALLS
;
;
; Inputs:
;
;	 4(AP)	= Source file NAM block address
;	 8(AP)	= Pointer to address of first entry in Update list
;
; Outputs:
;
;	None
;;
;
;--
;
	.PSECT	SUM$CODE,NOWRT,LONG
;
	.DEBUG	SUM$OPEN
;
	.ENTRY	SUM$OPEN,^M<R2,R3,R4,R10,R11>
;
	MOVAB	SUM$FAB,R2		; Set FAB pointer
	MOVB	SUM_DEFNAME,FAB$B_DNS(R2) ; Initialise default file name
	MOVAL	SUM_DEFNAME+1,FAB$L_DNA(R2)
	BBCC	#FAB$V_NAM,FAB$L_FOP(R2),10$ ; Set for open by file name
10$:
	MOVL	4(AP),R3		; Set related NAM block pointer
	MOVL	@8(AP),R10		; and Update file block pointer
	MOVAL	@8(AP),R11		; Set pointer to previous block
20$:
	MOVAB	UPF_T_NAM(R10),R4	; Set NAM block pointer
	MOVB	UPF_Q_CMNT(R10), -	; Set file name string size and address
		FAB$B_FNS(R2)
	MOVL	UPF_Q_CMNT+4(R10), -
		FAB$L_FNA(R2)
	MOVL	R4,FAB$L_NAM(R2)	; Set NAM block pointer
	MOVL	R3,NAM$L_RLF(R4)	; Set related NAM block pointer
	MOVB	#255,NAM$B_ESS(R4)	; Set size of expanded string
	MOVB	#255,NAM$B_RSS(R4)	; Set size of resultant string buffer
	PUSHAL	NAM$L_RSA(R4)		; Address to store resultant string
	PUSHAL	SUM_MAXRSS		; Address of max resultant string length
	CALLS	#2,G^LIB$GET_VM		; Get memory block for resultant string
	BLBC	R0,50$			; Error if LBC
	MOVL	NAM$L_RSA(R4),NAM$L_ESA(R4) ; Set expanded string buffer
	$OPEN	FAB=R2,ERR=SUM$OPEN_ERR	; Open file
	BLBS	R0,40$			; OK if LBS
	CMPL	R0,#RMS$_FNF		; Was error 'file not found'?
	BEQL	30$			; Yes if EQL
	BRW	90$
30$:
	PUSHAL	NAM$L_RSA(R4)		; Return resultant file spec block
	PUSHAL	SUM_MAXRSS
	CALLS	#2,G^LIB$FREE_VM
	BLBC	R0,80$			; Error if LBC
	BSBW	RETURN_FNS		; Return file name string block
	BLBC	R0,80$			; Error if LBC
	PUSHAL	(R11)			; Return the update block
	PUSHAL	SUM$BLSZE		; Size of block
	MOVL	(R10),R10		; Advance pointer before returning block
	CALLS	#2,G^LIB$FREE_VM	; Free memory
	BLBC	R0,80$			; Error if LBC
	MOVL	R10,(R11)		; Relink update blocks
	BRB	70$
40$:
	$CLOSE	FAB=R2,ERR=SUM$CLOSE_ERR ; Close file
	BLBC	R0,90$			; Error if LBC
	MOVL	R4,R3			; Next related NAM block will be
					; this files' NAM block
	BSBW	RETURN_FNS		; Return file name string block
50$:
	BLBC	R0,80$			; Error if LBC
;
	MOVL	R10,R11			; Form previous block pointer
	MOVL	(R10),R10		; Point to next Update file block
70$:
	BEQL	90$			; and finish if end of list
	BRW	20$			; Go back for next file
80$:
	CALLS	#0,SUM$LIB_ERR		; Report library error
90$:
	RET

	.SBTTL	RETURN_FNS
;
;
; Subroutine to return file name string block to virtual memory
;
; Inputs:
;
;	R10 = Address of SUM block
;
; Outputs:
;
;	R0  = Success/error status
;
;
RETURN_FNS:
	TSTW	UPF_Q_CMNT(R10)		; Was there a file name string?
	BEQL	10$			; No if EQL so no memory block to return
	PUSHAL	UPF_Q_CMNT+4(R10)	; Address of file name string
	PUSHAL	UPF_Q_CMNT(R10)		; Size of string
	CALLS	#2,G^LIB$FREE_VM		; Return memory
10$:
	RSB
;
;
	.END

