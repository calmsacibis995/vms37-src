	.TITLE	SUM$EDIT
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SUMSHR shareable library
;
; ABSTRACT:
;
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:	R. Newland
;
; MODIFIED BY:
;
;	V02-001				B. Schreiber		21-Mar-1980
;		Make totally position independent.
;
;--

	.SBTTL	DECLARATIONS
;
;
; Macro definitions
;
	DEFUPFBLK			; Source update merge offsets
	DEFEDBLK			; Edit block offsets
	DEFISBLK			; Input stream block offsets
	DEFCMDTYPE			; Command line type
	DEFSUMCBL			; SUM control block
	$FABDEF				; FAB
	$RABDEF				; RAB
	$NAMDEF				; NAM block
	$TPADEF				; TPARSE definitions
	$RMSDEF				; RMS definitions
;
;
; state definitions
;
$EQULST	SUM_ST_,,0,,< -
	SET , -				; Set up for source or update
	NUP , -				; No more updates to process
	SRC , -				; Next line from source file
	UPD , -				; Next line from update file
	UPE , -				; Report update errors
	UPR , -				; Update ready
	BLK , -				; Process next edit block of update
	GET , -				; Get next update line
	EOF >				; End of file
;
;
; Procedure flag byte definitions
;
_VIELD	PRC,0,< -
	<EXPED,,M> -			; Expected edit command
	<DELINE,,M> -			; Deleted lines information pending
	<ERRORS,,M> -			; Clash errors to report
	<HIEDIT,,M> -			; Highest precedence edit overides others
	<NODATA,,M> -			; Data from edit being ignored
	>
;
;
;
; Local storage
;
;
	.PSECT	SUM$RO_DATA,NOEXE,NOWRT,LONG
;
;
SUM_ISSZE:				; Size of input stream block
	.LONG	IS_K_BLN
;
SUM_EDSZE:				; Size of Edit block
	.LONG	ED_K_BLN

	.SBTTL	TPARSE
;
	.SAVE

	.PSECT	SUM$RW_DATA,NOEXE,LONG
;
;
TPARSE_BLOCK:
	.LONG	TPA$K_COUNT0
	.BLKB	TPA$K_LENGTH0-4
;
; Continue Tparse parameter block with own data
;
SUM_TPARSE:
;
TPA_W_LOC1 = .-TPARSE_BLOCK
	.BLKW	1
TPA_W_LOC2 = .-TPARSE_BLOCK
	.BLKW	1
TPA_B_ISFLAGS = .-TPARSE_BLOCK
	.BLKB	1
TPA_B_EDFLAGS = .-TPARSE_BLOCK
	.BLKB	1
TPA_W_DOT = .-TPARSE_BLOCK
	.BLKW	1
TPA_W_LOC = .-TPARSE_BLOCK
	.BLKW	1
TPA_W_LINTYP = .-TPARSE_BLOCK
	.BLKW	1
TPA_Q_AUDDS = .-TPARSE_BLOCK
	.BLKQ	1
TPA_Q_CMNT = .-TPARSE_BLOCK
	.BLKQ	1
TPA_Q_LINEDS = .-TPARSE_BLOCK
	.BLKQ	1
;
;
	.PSECT	SUM$RO_DATA
;
	COMMA = ^X2C
	SEMICOLON = ^X3B
	LESSTHAN = ^X3C
;
	$INIT_STATE	MER_STATE,MER_KEY
;
; Get 1st character of line
;
	$STATE
	$TRAN	TPA$_LAMBDA,,ACT_BLANKS_SIG
	$STATE
	$TRAN	'-',EDIT
	$TRAN	'%',CMND,ACT_PERCENT
	$TRAN	'/',TERM
	$TRAN	LESSTHAN,DATA,ACT_ESC
	$TRAN	'@',TPA$_FAIL
	$TRAN	'\',CMND,ACT_BACKSLASH
	$TRAN	TPA$_EOS,DATA
	$TRAN	TPA$_ANY,DATA
;
; End data line
;
	$STATE	DATA
	$TRAN	TPA$_LAMBDA,TPA$_EXIT,ACT_EXIT,,,0
;
; End normal command line
;
	$STATE	CMND
	$TRAN	TPA$_LAMBDA,TPA$_EXIT,ACT_EXIT,,,CMD_M_CMND
;
; End data terminating command
;
	$STATE	TERM
	$TRAN	TPA$_LAMBDA,TPA$_EXIT,ACT_EXIT,,, -
			<CMD_M_CMND!CMD_M_EDTRM!CMD_M_EDEND>
;
;
; Edit command
;
; Read locator-1
;
	$STATE	EDIT
	$TRAN	'-',,ACT_SUPPRESS
	$TRAN	TPA$_LAMBDA
	$STATE
	$TRAN	TPA$_LAMBDA,,ACT_BLANKS_NSIG
	$STATE
	$TRAN	!LOCATOR,,ACT_LOC1
;
; Read Locator-2
;
	$STATE
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$TRAN	COMMA
	$STATE
	$TRAN	!LOCATOR,,ACT_LOC2
	$TRAN	TPA$_EOS,TPA$_EXIT
; Read audit string
;
	$STATE
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$TRAN	COMMA
	$STATE
	$TRAN	'/',,ACT_AUDIT
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$STATE	AUDCH
	$TRAN	'/',,ACT_AUDEND
	$TRAN	TPA$_ANY,AUDCH,ACT_AUDCH
;
; Read comment line
;
	$STATE
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	SEMICOLON,CMNT,ACT_CMNT
	$STATE	CMNT
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
;
;
; Subexpression to parse locator
;
	$STATE	LOCATOR
	$TRAN	'.',,ACT_DOT
	$TRAN	TPA$_DECIMAL,,ACT_LOCNUM
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
	$STATE
	$TRAN	'+'
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
	$STATE
	$TRAN	TPA$_DECIMAL,,ACT_PLUS
	$STATE
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
;
	$END_STATE
;
;
	.RESTORE

	.SBTTL	SUM$INIT
;
;++
; Functional description:
;
;	This procedure is called to initialise the update files.
;
;
; Input parameters:
;
;	 4(AP) = Address of input stream control block
;	 8(AP) = Address of update files list
;	12(AP) = Address of main program RAB
;
;
; Outputs:
;
;	IS_L_MAIN_FAB(R9) = FAB address of source file
;
; Implicit outputs:
;
;	The edit nodes list
;
;--
;
	.PSECT	SUM$CODE,NOWRT,LONG
;
	.ENTRY	SUM$INIT_EDIT,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	BRB	SUM$INIT
;
	.ENTRY	SUM$INIT_CMND,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
;
SUM$INIT:
	MOVL	#1,R0			; Assume successful completion
	MOVL	4(AP),R8		; Get address of SUM control block
	MOVL	SUM_L_ISDATA(R8),R9	; Get input stream data block address
	BNEQ	5$			; Branch if block has been allocated
	BSBW	GET_IS_BLK		; Get and initialise data block
	BLBC	R0,7$			; Error of LBC
	MOVL	R9,SUM_L_ISDATA(R8)	; Save data block address
5$:
	CLRW	SUM_W_LINE_NO(R8)	; Reset return line number
	MOVB	#SUM_ST_SET,IS_B_STATE(R9)	; Initialise state to SET
	MOVW	#1,IS_W_LINE_NO(R9)	; and source file line number
	MOVL	8(AP),R10		; Get file list address
	MOVL	12(AP),R8		; Get RAB address
	MOVL	R8,IS_L_MAIN_RAB(R9)		; and save
	CLRL	RAB$W_RFA+0(R8)		; Clear RFA
	CLRW	RAB$W_RFA+4(R8)		; (3 words)
	BSBW	SAVE_SRC_RFA		; and save it
	MOVL	RAB$L_FAB(R8),IS_L_MAIN_FAB(R9) ; Save FAB address
	MOVL	R10,IS_L_FILELIST(R9)	; Save file list address
	BEQL	40$			; If EQL there is no list so return
	BBSS	#UPF_V_INIT, -		; Branch if already initialised
		UPF_B_FIFLAGS(R10),30$
	MOVAL	UPF_Q_EDITS(R10), -	; Initialise edit list head in
		UPF_Q_EDITS(R10)	; first file block
	MOVAL	UPF_Q_EDITS(R10), -
		UPF_Q_EDITS+4(R10)
	$DISCONNECT RAB=R8,ERR=SUM$CLOSE_ERR ; Disconnect RAB
7$:
	BLBC	R0,40$			; Error if LBC
10$:
	BSB	PROCESS_FILE		; Process update files
	BLBC	R0,20$			; Error if LBC
	MOVL	(R10),R10		; Get next file block address
	BNEQ	10$			; End of list if EQL
20$:
	MOVL	IS_L_FILELIST(R9),R10	; Reset file list pointer
	MOVL	IS_L_MAIN_FAB(R9),RAB$L_FAB(R8) ; Reset FAB address
	$CONNECT RAB=R8,ERR=SUM$OPEN_ERR
	BSBW	RESTORE_SRC_RFA		; Restore source file RFA
30$:
	MOVL	UPF_Q_EDITS(R10),IS_L_EDIT_BLK(R9) ; Reset edit block pointer
	BISB2	#SUM_M_AUDIT!SUM_M_AUDITNEW, -	; Switch on audit trail and
		IS_B_FLAGS(R9)		; mark first audit as new
	CLRW	IS_W_DELETES(R9)	; Initialise number of deleted lines
40$:
	RET

	.SBTTL	GET_IS_BLK
;
;++
;
; Functional description:
;
;	This routine obtains a memory block for an input stream data
;	block and if successful initialises the block.
;
; Inputs:
;
;	None
;
; Outputs:
;
;	R9  = Address of memory block
;
;--
;
GET_IS_BLK:
	PUSHAB	SUM$VIRT_ADDR		; Stack arguments for LIB$GET_VM
	PUSHAB	SUM_ISSZE		; ...
	CALLS	#2,G^LIB$GET_VM 	; Get memory block
	BLBC	R0,10$			; Error if LBC
	MOVL	SUM$VIRT_ADDR,R9	; Get block address
	MOVC5	#0,(R9),#0,#IS_K_BLN,(R9) ; Clear block
	MOVAB	IS_T_FAB(R9),R1		; Set FAB block pointer
	$FAB_STORE  FAB = R1, -		; and initialise as a FAB
		BID = #FAB$C_BID, -
		BLN = #FAB$C_BLN
	MOVL	#1,R0			; Set success status
10$:
	RSB

	.SBTTL	PROCESS_FILE
;
;++
; Functional description:
;
;	This routine is called to process each update file
;
; Inputs:
;	R8  = RAB address
;	R9  = Input stream data block address
;	R10 = File node address
;
; Outputs:
;
;	R0  = Success/error status
;
; Implicit outputs:
;
;	Edit blocks list
;
;--
PROCESS_FILE:
	MOVAB	UPF_T_NAM(R10), -	; Set NAM block pointer
		IS_T_FAB+FAB$L_NAM(R9)
	BBSS	#FAB$V_NAM, -		; Set for open by NAM block
		IS_T_FAB+FAB$L_FOP(R9),5$
5$:
	$OPEN	FAB=IS_T_FAB(R9),ERR=SUM$OPEN_ERR	; Open input file
	BLBC	R0,30$			; Error if LBC
	MOVAL	IS_T_FAB(R9),RAB$L_FAB(R8)	; Put FAB address into RAB
	$CONNECT RAB=R8,ERR=SUM$OPEN_ERR ; Connect RAB to FAB
	BLBC	R0,20$			; Error if LBC
	$FIND	RAB=R8,ERR=SUM$READ_ERR	; Initialise RFA
	BLBC	R0,10$			; Error if LBC
;
	CLRL	IS_L_EDIT_BLK(R9)	; Clear last edit node address
;
; Read update file and create edit nodes
;
	BSBB	SET_UP_NODES		; Read update file
;
10$:
	$DISCONNECT RAB=R8,ERR=SUM$CLOSE_ERR
20$:
	$CLOSE	FAB=IS_T_FAB(R9),ERR=SUM$CLOSE_ERR	; Close input file
30$:
	RSB

	.SBTTL	SET_UP_NODES
;
; Subroutine to form all edit_nodes
;
; Inputs:
;	R8  = RAB address
;	R10 = file node address
;
; Outputs:
;	R0  = Success/error status
;
;
SET_UP_NODES:
	ASSUME	UPF_W_LOC2 EQ <UPF_W_LOC1+2>
	ASSUME	ED_W_LOC2 EQ <ED_W_LOC1+2>
10$:
	PUSHAB	SUM$VIRT_ADDR		; Stack arguments for LIB$GET_VM
	PUSHAB	SUM_EDSZE		; ...
	CALLS	#2,G^LIB$GET_VM		; Get edit block
	BLBC	R0,70$			; Error if LBC
	MOVL	SUM$VIRT_ADDR,R11	; Set block pointer
	MOVL	R10,ED_L_FILE(R11)	;  Fill in file block address
	MOVB	UPF_B_FILENO(R10), -	; and file number
		ED_B_FILENO(R11)
	MOVL	RAB$W_RFA+0(R8),ED_W_RFA+0(R11) ; Record file address (3 words)
	MOVW	RAB$W_RFA+4(R8),ED_W_RFA+4(R11)
	CLRW	ED_W_LINES(R11)
	MOVL	UPF_W_LOC1(R10),ED_W_LOC1(R11) ; Move both locator numbers
	MOVB	UPF_B_EDFLAGS(R10),ED_B_FLAGS(R11) ; and flags to edit node
30$:
	BSBW	READ_UPD_LINEA		; Read line from input file
	BLBS	R0,40$			; OK if LBS
	CMPL	R0,#RMS$_EOF		; Is error end-of-file?
	BNEQ	80$			; No if NEQ
	MOVL	#CMD_M_ALL,R4		; Fake an end-of-edit command
	BRB	50$			; Error will be reported on next pass
40$:
	BSBW	COMMAND_CHECK		; Check for command
	BLBC	R0,30$			; Syntax error if LBC
	BBS	#CMD_V_EDTRM,R4,50$	; Branch if data terminating command
	BBS	#CMD_V_CMND,R4,30$	; Branch if normal command
	INCW	ED_W_LINES(R11)		; Increment number of insert lines for
	BRB	30$			; this edit
50$:
	TSTL	ED_W_LOC1(R11)		; If Loc-1 and Loc-2 = 0 and Lines <> 0
	BNEQ	60$			; there is an insert in front of
				; the file, otherwise throw this
					; Edit node away
	TSTW	ED_W_LINES(R11)
	BNEQ	60$
	BBC	#CMD_V_EDEND,R4,60$	; Branch if not end of edits
	PUSHAB	SUM$VIRT_ADDR		; Stack arguments for LIB$FREE_VM
	PUSHAB	SUM_EDSZE		; ...
	CALLS	#2,G^LIB$FREE_VM 	; Return unused memory block
	BLBC	R0,70$			; Error if LBC
	BRB	80$
60$:
	BSB	INSERT_NODE		; Insert block into edits list
	BBS	#CMD_V_EDEND,R4,80$	; Branch if edit terminating command
	BRW	10$			; Go back for next edit command
70$:
	CALLS	#0,SUM$LIB_ERR		; Report error
80$:
	RSB

	.SBTTL	INSERT_NODE
;
; Subroutine to insert block into edit list
;
; This routine checks that the edit node is in sequence with any other nodes
; from the same update file.  If not, the edit node is marked so that a
; warning can be produced later.  However, the node is placed in the correct
; position.
;
; Inputs:
;	R11  = address of block to insert
;	IS_L_EDIT_BLK(R9) = Last edit node inserted from current update file
;
; Outputs:
;	None
;
;
INSERT_NODE:
	MOVL	8(AP),R0		; Get address of first file block
	MOVAL	UPF_Q_EDITS(R0),R0	; and form edit list head address
	MOVL	IS_L_EDIT_BLK(R9),R1	; Get address of last node inserted
	BNEQ	10$			; If NEQ there is one
	MOVL	R0,R1			; This is first node so scan list
	BRB	20$			; from list head
10$:
	CMPW	ED_W_LOC1(R11),ED_W_LOC1(R1) ; Is edit out of sequence?
	BGTR	20$			; No if GTR
	BISB	#ED_M_SEQERR,ED_B_FLAGS(R11) ; Mark edit node
	MOVL	R0,R1			; Scan list from list head to find
	BRB	30$			; correct position
20$:
	MOVL	R11,IS_L_EDIT_BLK(R9)	; Set new 'last edit' address
30$:
	MOVL	(R1),R1			; Get next block
	CMPL	R1,R0			; At end of list?
	BEQL	40$			; Yes if EQL
	CMPW	ED_W_LOC1(R11),ED_W_LOC1(R1) ; Is new LOC-1 <= current LOC-1
	BGTR	30$			; No if GTR
40$:
	INSQUE	(R11),@ED_L_BWD(R1)	; Insert new node into list
	RSB

	.SBTTL	READ_UPD_LINE
;
; Subroutine to read line sequentially from current update file
;
; There are two entry points:
;
;	READ_UPD_LINE	to access the file and read line
;
;	READ_UPD_LINEA	if update file is already accessed and ready
;			for next line to be read
;
;
; Inputs:
;	R8 = RAB address for reading file
;
; Outputs:
;	R0 = success/error status
;	R6 = Line size
;	R7 = Line buffer address
;
	.ENABL	LSB
;
;
READ_UPD_LINE:
	BSBW	ACCESS_UPDATE		; Access update file
	BLBC	R0,10$			; Error if LBC
;
READ_UPD_LINEA:
	$GET	RAB = R8, ERR = SUM$READ_ERR ; Read line
	BLBC	R0,10$			; Error if LBC
	MOVZWL	RAB$W_RSZ(R8),R6	; Set line size
	MOVL	RAB$L_RBF(R8),R7	; and buffer address
	BISB2	#SUM_M_SRCUPD,IS_B_FLAGS(R9) ; Mark as update line
10$:
	RSB
;
	.DSABL	LSB

	.SBTTL	SUM$LINE
;
; This procedure is called from the main program to get the next
; input line.  This line may come from either the source file or
; an update file.
;
; Inputs:
;
;	4(AP) = Address of control block
;
; Ouputs:
;
;	Next line
;
;
	.ENTRY	SUM$LINE,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R1		; Get address of control block
	MOVL	SUM_L_ISDATA(R1),R9	; Set input stream data block address
	MOVL	IS_L_MAIN_RAB(R9),R8	; Get main program RAB address
	MOVL	IS_L_EDIT_BLK(R9),R11	; Get current edit block address
SUM_DISPATCH:
	CASEB	IS_B_STATE(R9),#SUM_ST_SET,#SUM_ST_EOF ; Branch to service routine
10$:	.SIGNED_WORD	LINE_SET-10$
	.SIGNED_WORD	LINE_NUP-10$
	.SIGNED_WORD	LINE_SRC-10$
	.SIGNED_WORD	LINE_UPD-10$
	.SIGNED_WORD	LINE_UPE-10$
	.SIGNED_WORD	LINE_UPR-10$
	.SIGNED_WORD	LINE_BLK-10$
	.SIGNED_WORD	LINE_GET-10$
	.SIGNED_WORD	LINE_EOF-10$
;
SUM_RETURN:
	MOVL	R11,IS_L_EDIT_BLK(R9)	; Preserve edit block address
	MOVL	4(AP),R1		; Get address of control block
	MOVL	R0,SUM_L_STS(R1)	; Return status
	MOVB	IS_B_FLAGS(R9), -	; Edit flags
		SUM_B_FLAGS(R1)
	BBC	#SUM_V_SRCUPD, -	; Branch if source line
		SUM_B_FLAGS(R1),5$
	MOVW	IS_W_INSERT_NO(R9),SUM_W_INSERT_NO(R1) ; Inserts
	MOVQ	UPF_Q_AUDDS(R10), -	; Supply audit string descriptor
		SUM_Q_AUDDS(R1)
	MOVAL	UPF_T_NAM(R10),R10	; Form NAM block address
	MOVZBL	NAM$B_RSL(R10), - 	; Get file spec size
		SUM_Q_FILESP+0(R1)
	MOVL	NAM$L_RSA(R10), -	; and address
		SUM_Q_FILESP+4(R1)
	BLBS	R0,10$			; If error line
	BBSC	#SUM_V_SRCUPD,SUM_B_FLAGS(R1),10$ ; don't mark as update line
;
; Source file line
;
5$:
	SUBW3	#1,IS_W_LINE_NO(R9),SUM_W_LINE_NO(R1) ; Number of line being returned
	BLBC	R0,10$			; If error save deleted line information
					; until first good line
	BBCC	#PRC_V_DELINE, -	; Branch if no pending deleted info
		IS_B_PROCFLAGS(R9),10$
	MOVW	IS_W_DELETES(R9),SUM_W_INSERT_NO(R1) ; Return number of lines deleted
	BBSS	#SUM_V_DELETE, -	; Set deleted lines information flag
		SUM_B_FLAGS(R1),10$
	CLRW	IS_W_DELETES(R9)	; Reset number of deleted lines
10$:
	RET

	.SBTTL	LINE_SET
;
; Routine to service SET state
; Determines if the next line is to come from the main source file
; or from an update file.  If there are no more updates to be processed
; the state is set to NUP; if there are updates but the next update is to
; be applied to a later source line the state is set to SRC; if the next
; line is to come from an update file the state is set to UPD.
;
;
; Inputs:
;
;	R11 = Current edit block address
;
; Outputs:
;
;	state changed
;
LINE_SET:
	MOVB	#SUM_ST_NUP,IS_B_STATE(R9) ; Assume no more updates
	MOVL	IS_L_FILELIST(R9),R1	; Get address of first file block
	BEQL	10$			; If EQL there are no update files
	MOVAL	UPF_Q_EDITS(R1),R1	; Form edit block list head address
	CMPL	R1,R11			; Any edits still in list?
	BEQL	10$			; No if EQL so must be source line
	MOVB	#SUM_ST_UPD,IS_B_STATE(R9) ; Assume next line is from update file
	CMPW	IS_W_LINE_NO(R9), -	; Is line number of source file less
		ED_W_LOC1(R11)		; than locator-1 of next edit?
	BGEQ	20$			; No if GEQ
	MOVB	#SUM_ST_SRC,IS_B_STATE(R9) ; Change state to source
10$:
	BSBW	ACCESS_SRC		; Access source file
20$:
	BRW	SUM_DISPATCH		; and dispatch again

	.SBTTL	LINE_NUP
;
; There are no more updates to process so just read next source line
; and return to caller.  The source file is already accessed so
; READ_SRC_LINEA can be used.
;
;
; Inputs:
;
;	None
;
; Outputs:
;
;	None
;
;
LINE_NUP:
	BSBW	READ_SRC_LINEA		; Get next source line
	BRW	SUM_RETURN		; and return

	.SBTTL	LINE_SRC
;
; The next source line is read from the main input file.  The line
; number is incremented and compared with the locator-1 value of the
; next edit.  If the line number remains lower the state remains at SRC.
; If the line number is equal or greater the state is changed to UPD.
; The next call to SUM$LINE will then get an update line.
;
; Inputs:
;
;	R11 = Current edit block address
;
; Outputs:
;
;	state
;
;
LINE_SRC:
	BSBW	READ_SRC_LINEA		; Get next line from source file
	CMPW	IS_W_LINE_NO(R9), -	; Is source line number still lower
		ED_W_LOC1(R11)		; than next locator-1
	BLSS	10$			; Yes if LSS
	MOVB	#SUM_ST_UPD,IS_B_STATE(R9) ; Reset state to UPD
10$:
	BRW	SUM_RETURN		; and return with line

	.SBTTL	LINE_UPD
;
; The next update operation is prepared by determining the range of
; the edit, that is the number of edit operations which have clashed.
;
; Inputs:
;
;	R9  = Input stream data pointer
;	R11 = Current edit block address
;
; Outputs:
;
;	IS_L_FIRST_EDIT(R9) = First edit block of update
;	IS_L_LAST_EDIT(R9)  = Last edit block of update
;	IS_W_HIGH_LOC2(R9)  = Highest loc-2 value of update
;
;
LINE_UPD:
	MOVL	R11,IS_L_FIRST_EDIT(R9)	; Save address of first edit
	MOVZWL	ED_W_LOC2(R11),R4	; Set highest loc-2 value
	MOVW	R4,IS_W_HIGH_LOC2(R9)	; and supply as routine output
	BICB2	#SUM_M_SUBCLSH,IS_B_FLAGS(R9) ; May be first edit in clash
	BICB2	#<PRC_M_ERRORS! - 	; Assume no clash errors,
		  PRC_M_HIEDIT! -	; highest edit does not overide others,
		  PRC_M_NODATA>,-	; and all data lines inserted
		IS_B_PROCFLAGS(R9)
	MOVB	#SUM_ST_UPR,IS_B_STATE(R9)
	MOVL	IS_L_FILELIST(R9),R5	; Set files list
	MOVAL	UPF_Q_EDITS(R5),R5	; list head address
10$:
	MOVL	(R11),R2		; Point to next edit block
	CMPL	R2,R5			; At end of list?
	BEQL	40$			; Yes if EQL
	MOVL	R4,R1			; Set highest locator value of edit
	BNEQ	20$			; If zero set from loc-2 of current edit
	MOVZWL	ED_W_LOC2(R11),R1	; Set highest locator value of edit
	BNEQ	20$			; If zero set from loc-1 of current edit
	MOVZWL	ED_W_LOC1(R11),R1	; Set highest locator value of edit
20$:
	CMPW	R1,ED_W_LOC1(R2)	; Does this edit overlap with next?
	BLSS	40$			; No if LSS
;
; This edit block clashes with next
;
	CMPW	R4,ED_W_LOC2(R2)	; Is its loc-2 higher than current loc-2
	BGEQ	25$			; No if GEQ
	MOVZWL	ED_W_LOC2(R2),R4	; Extend range of edit
25$:
	TSTW	ED_W_LOC2(R2)		; Is edit all inserts?
	BEQL	30$			; Yes if EQL
	BISB	#PRC_M_HIEDIT,IS_B_PROCFLAGS(R9) ; Highest edit overides others
30$:					; therefore replace later)
	BSBB	CHECK_ERR		; See if error should be reported
	MOVL	R2,R11			; Point to next edit block
	BRB	10$
40$:
	MOVL	R11,IS_L_LAST_EDIT(R9)	; Set address of last edit block
	CMPL	R11,IS_L_FIRST_EDIT(R9)	; If first block then single non-clashing
	BEQL	50$			; edit else last block of clashing edits
	BSBB	CHECK_ERR		; See if error should be reported
	BBC	#PRC_V_ERRORS, -	; Branch if no errors to report
		IS_B_PROCFLAGS(R9),50$
	MOVB	#SUM_ST_UPE,IS_B_STATE(R9) ; Set state to report errors
	MOVL	IS_L_FIRST_EDIT(R9),R11	; Reset edit block pointer to first
50$:
	BRW	SUM_DISPATCH
;
;
;
; Local subroutine to check if clashing edit should be reported
;
; Inputs:
;
;	R11 = Edit block address
;
; Outputs:
;
;	None
;
CHECK_ERR:
	BBS	#ED_V_SUPPRESS, -	; Branch if suppress bit set
		ED_B_FLAGS(R11),20$
	TSTL	ED_W_LOC1(R11)		; If Loc-1, Loc-2 and lines = 0
	BNEQ	10$			; then do not report as error
	TSTW	ED_W_LINES(R11)
	BEQL	20$
10$:
	BISB	#PRC_M_ERRORS,IS_B_PROCFLAGS(R9) ; Set error report bit
20$:
	RSB

	.SBTTL	LINE_UPE
;
; The update operation contains clashing edits which must be reported
;
; Inputs:
;
;	R11 = Address of next clashing edit
;
; Outputs:
;
;	R11 = Edit block pointer advanced
;
;
LINE_UPE:
	MOVL	ED_L_FILE(R11),R10	; Get file block address of clashing edit
	BSBW	READ_UPD_LINE		; Read update file to get edit line
	MOVL	#SUM$_EDITSCLSH,R0	; Set return status
	CMPL	R11,IS_L_FIRST_EDIT(R9)	; First report of this set of clashes
	BEQL	10$			; Yes if EQL
	BISB	#SUM_M_SUBCLSH,IS_B_FLAGS(R9) ; Set 2nd or later flag
10$:
	CMPL	R11,IS_L_LAST_EDIT(R9)	; At last edit?
	BNEQ 	20$			; No if NEQ
	MOVB	#SUM_ST_UPR,IS_B_STATE(R9) ; Set state to Update Ready
20$:
	MOVL	(R11),R11		; Advance to next edit block
	BRW	SUM_RETURN

	.SBTTL	LINE_UPR
;
; The next update operation is ready.  Any errors have been reported
; to the caller.
;
;
; Inputs:
;
;	R11 = Current edit block address
;
; Outputs:
;
;	None
;
;
LINE_UPR:
	MOVL	IS_L_FIRST_EDIT(R9),R11	; Reset pointer to first edit block
	MOVB	#SUM_ST_BLK,IS_B_STATE(R9) ; Reset state to BLK
	MOVZWL	IS_W_HIGH_LOC2(R9),R4	; Is edit operation an insert?
	BNEQ	50$			; No if NEQ
	TSTW	ED_W_LOC1(R11)		; Is insert to front of file?
	BEQL	60$			; Yes if EQL
	BSBW	READ_SRC_LINE		; Read one more line from source
	BRW	SUM_RETURN
50$:
	BSBW	SKIP_SRC_LINES		; Skip over source lines to be deleted
60$:
	BRW	SUM_DISPATCH		; and dispatch

	.SBTTL	LINE_BLK
;
; This routine is called to begin processing of the next edit block
; The file from which edit lines will come is prepared for access.  The
; state is reset to GET.
;
;
; Inputs:
;
;	R11 = Current edit block address
;
; Outputs:
;
;	None
;
;
LINE_BLK:
	MOVL	ED_L_FILE(R11),R10	; Get file block address of file
	BSBW	ACCESS_UPDATE		; Prepare for reading file
	BLBC	R0,20$			; Error if LBC
	BBCC	#PRC_V_EXPED,IS_B_PROCFLAGS(R9),5$ ; Clear expected edit flag
5$:
	TSTW	ED_W_LOC1(R11)		; Is this insert in front of file?
	BNEQ	10$			; No if NEQ
	BBSS	#PRC_V_EXPED,IS_B_PROCFLAGS(R9),10$ ; Set expected edit flag
10$:
	MOVB	#SUM_ST_GET,IS_B_STATE(R9) ; Reset state to GET
	BRW	SUM_DISPATCH		; and dispatch again
20$:
	BRW	SUM_RETURN		; Return to caller with error

	.SBTTL	LINE_GET
;
; Routine to get next line from update file
;
;
; Inputs:
;
;	R11 = Current edit block address
;
; Outputs:
;
;	R11 = Next edit block address
;
;
LINE_GET:
	MOVL	ED_L_FILE(R11),R10	; Set file block pointer
10$:
	BSBW	READ_UPD_LINEA		; Get next line from update file
	BLBS	R0,20$			; OK if LBS
	CMPL	R0,#RMS$_EOF		; Is error end-of-file?
	BNEQ	35$			; No if NEQ
	MOVL	#SUM$_PRMEOF,R0		; Set premature end-of-file status
	BRB	40$
20$:
	BSBW	COMMAND_CHECK		; Check for syntax and type
	BLBC	R0,80$			; Syntax error if LBC
	BBS	#CMD_V_CMND,R4,30$	; Branch if command line
	BBS	#PRC_V_NODATA, -	; Ignore data line if higher precedence
		IS_B_PROCFLAGS(R9),10$	; edit is overiding others
	BRB	90$			; Return to caller with line
30$:
	BBC	#CMD_V_EDTRM,R4,10$	; Branch if not edit terminating command
	BBSS	#PRC_V_EXPED,IS_B_PROCFLAGS(R9),40$ ; If expecting edit get next line
	BBC	#ED_V_SEQERR,ED_B_FLAGS(R11),10$ ; Was edit out of sequence?
	MOVL	#SUM$_EDOUTSEQ,R0	; Yes: report error now
35$:
	BRB	100$
;
; Found end of this set of lines
;
40$:
	CMPL	R11,IS_L_LAST_EDIT(R9)	; Last edit block in range?
	BEQL	60$			; Yes if EQL
	BBC	#PRC_V_HIEDIT, -	; Branch if concatenating inserts
		IS_B_PROCFLAGS(R9),50$ 	; 
	BISB	#PRC_M_NODATA,IS_B_PROCFLAGS(R9) ; Ignore data from other edits
50$:
	MOVB	#SUM_ST_BLK,IS_B_STATE(R9) ; Reset state to BLK
	BRB	70$
60$:
	MOVB	#SUM_ST_SET,IS_B_STATE(R9) ; Reset state to SET
70$:
	MOVL	(R11),R11		; Point to next edit block
	BLBC	R0,100$			; If error return to caller first
	BRW	SUM_DISPATCH		; or dispatch again
80$:
	MOVL	#SUM$_SLPSYNERR,R0	; Set SLP syntax error status
90$:
	INCW	IS_W_INSERT_NO(R9)	; Increment number of new/replace lines
100$:
	BRW	SUM_RETURN		; Return to caller

	.SBTTL	LINE_EOF
;
; Routine to service EOF state.  An RMS end-of-file state is
; returned to the caller
;
;
; Inputs:
;
;	None
;
;
; Outputs:
;
;	None
;
;
LINE_EOF:
	MOVL	#RMS$_EOF,R0		; Set R0 to eof state
	BRW	SUM_RETURN		; and return to caller

	.SBTTL	ACCESS_SRC
;
; Routine to access main source file.  The RAB is connected to
; the main file FAB if it is not already connected.
;
; Inputs:
;
;	R8  = Main program RAB address
;
;
; Outputs:
;
;	None
;
;
ACCESS_SRC:
	TSTW	RAB$W_ISI(R8)		; Is it connected to a FAB?
	BEQL	10$			; No if EQL
	MOVAL	IS_T_FAB(R9),R1		; Set input stream FAB address
	CMPL	RAB$L_FAB(R8),R1	; Is it connected to SUM FAB?
	BNEQ	20$			; No if NEQ, it's connected to main FAB
	$DISCONNECT RAB = R8, -		; Disconnect RAB from SUM FAB
		    ERR = SUM$CLOSE_ERR
	CLRL	IS_L_CONN_FILE(R9)	; Clear file connected flag
	BLBC	R0,20$			; Error if LBC
10$:
	MOVL	IS_L_MAIN_FAB(R9), -	; Put main program FAB into RAB
		RAB$L_FAB(R8)
	$CONNECT RAB = R8, -		; Connect main program FAB to RAB
		ERR = SUM$OPEN_ERR
	BLBC	R0,20$			; Error if LBC
	BSB	RESTORE_SRC_RFA		; Restore source file RFA
20$:
	RSB

	.SBTTL	SAVE_SRC_RFA
;
;
; Routine to save source file record file address
;
; Inputs:
;
;	R8  = RAB address
;
; Outputs:
;
;	None
;
;
SAVE_SRC_RFA:
	MOVL	RAB$W_RFA+0(R8), -	; Move RFA to save buffer
		IS_W_MAIN_RFA+0(R9)
	MOVW	RAB$W_RFA+4(R8), -
		IS_W_MAIN_RFA+4(R9)
	RSB

	.SBTTL	RESTORE_SRC_RFA
;
;
; Routine to restore source file record file address and
; reset record pointers.  If RFA is zero a rewind is performed,
; if non-zero the record is located by a find.
;
;
; Inputs:
;
;	R8  = RAB address
;
;
; Outputs:
;
;	R0  = Success/error status
;
;
RESTORE_SRC_RFA:
	MOVL	IS_W_MAIN_RFA+0(R9), -	; Move RFA back to RAB
		RAB$W_RFA+0(R8)		; (3 words)
	MOVW	IS_W_MAIN_RFA+4(R9), -
		RAB$W_RFA+4(R8)
	BNEQ	10$			; If NEQ then do find
	TSTL	RAB$W_RFA+0(R8)		; Test other part of RFA
	BNEQ	10$			; If NEQ then do find
	$REWIND	RAB = R8, -		; Rewind to start of file
		ERR = SUM$READ_ERR
	BRB	20$
10$:
	MOVB	#RAB$C_RFA,RAB$B_RAC(R8); Put into RFA access mode
	$FIND	RAB = R8, -		; Reset record pointers
		ERR = SUM$READ_ERR
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R8); Reset to sequential access mode
	BLBC	R0,20$			; Error if LBC
	$GET	RAB = R8, -		; Advance past this record which has
		ERR = SUM$READ_ERR	; read before.
20$:
	RSB

	.SBTTL	ACCESS_UPDATE
;
; Routine to access update file
;
;
; Inputs:
;
;	R8  = Main program RAB address
;	R10 = File block address of required update file
;	R11 = Edit block address of next edit
;
;
; Ouputs:
;
;	R9  = FAB address
;
;
ACCESS_UPDATE:
	PUSHR	#^M<R2,R3,R4>
	MOVAB	IS_L_OPEN_FILE(R9),R2	; Set pointer to file open
	MOVAB	IS_L_CONN_FILE(R9),R3	; and file connected markers
	MOVAL	IS_T_FAB(R9),R4		; Set pointer to SUM's FAB
	TSTW	RAB$W_ISI(R8)		; Is RAB connected to a FAB?
	BEQL	30$			; No if EQL
	CMPL	RAB$L_FAB(R8),R4	; Is it connected to SUM's FAB?
	BNEQ	10$			; No if NEQ
	CMPL	R10,(R3)		; Is it connected to required file?
	BEQL	40$			; Yes if EQL
	BRB	20$
10$:
	BSBW	SAVE_SRC_RFA		; Save source file RFA
20$:
	$DISCONNECT RAB = R8, -		; Disconnect RAB from FAB
		ERR = SUM$CLOSE_ERR
	BLBC	R0,50$			; Error if LBC
	CLRL	(R3)			; Mark that no file is connected
	CMPL	R10,(R2)		; Is required file already open?
	BEQL	30$			; Yes if EQL
	TSTL	(R2)			; Is any file open on this FAB?
	BEQL	25$			; No if EQL
	$CLOSE	FAB = R4, - 		; Close currently open update file
		ERR = SUM$CLOSE_ERR
	BLBC	R0,50$			; Error if LBC
	CLRL	(R2)			; Mark that no file is open
25$:
	MOVAL	UPF_T_NAM(R10),	-	; Put NAM block into FAB
		FAB$L_NAM(R4)
	$OPEN	FAB = R4, -		; Open required update file
		ERR = SUM$OPEN_ERR
	BLBC	R0,50$			; Error if LBC
	MOVL	R10,(R2)		; Mark which file is open
30$:
	MOVL	R4,RAB$L_FAB(R8)	; Put FAB address in RAB
	$CONNECT RAB = R8, -		; Connect RAB to FAB
		ERR = SUM$OPEN_ERR
	BLBC	R0,50$			; Error if LBC
	MOVL	R10,(R3)		; Mark which file is connected
40$:
	MOVL	ED_W_RFA+0(R11), -	; Reset RFA (3 words)
		RAB$W_RFA+0(R8)
	MOVW	ED_W_RFA+4(R11), -
		RAB$W_RFA+4(R8)
	MOVB	#RAB$C_RFA,RAB$B_RAC(R8); Put into RFA access mode
	$FIND	RAB = R8, -		; Position file
		ERR = SUM$READ_ERR
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R8); Reset to sequential access mode
50$:
	POPR	#^M<R2,R3,R4>
	RSB

	.SBTTL	READ_SRC_LINE
;
; Routine to read one line from source file
;
; There are two entry points:
;
;	READ_SRC_LINE	to access file and read line
;
;	READ_SRC_LINEA	if file is already accessed and ready to
;			read next line
;
; Inputs:
;
;	R8  = RAB address
;
; Outputs:
;
;	R0  = Success/error status
;	R6  = Line size
;	R7  = Line buffer address
;	IS_W_LINE_NO(R9) = line number
;
	.ENABL	LSB
;
READ_SRC_LINE:
	MOVL	#1,R0			; Assume success
	BSBW	ACCESS_SRC		; Access source file
	BLBC	R0,20$			; Error if LBC
;
READ_SRC_LINEA:
	$GET	RAB = R8, -		; Get next line from source file
		ERR = SUM$READ_ERR
	BLBS	R0,10$			; OK if LBS
	CMPL	R0,#RMS$_EOF		; Was error end-of-file?
	BNEQ	20$			; No if NEQ
	MOVB	#SUM_ST_EOF,IS_B_STATE(R9) ; Set into EOF state
	BRB	20$
10$:
	MOVZWL	RAB$W_RSZ(R8),R6	; Set record size
	MOVL	RAB$L_RBF(R8),R7	; and buffer address
	INCW	IS_W_LINE_NO(R9)		; Increment line number
	BICB2	#SUM_M_SRCUPD,IS_B_FLAGS(R9)	; Mark as source line
	CLRW	IS_W_INSERT_NO(R9)		; Reset new/replacement lines count
20$:
	RSB
;
	.DSABL	LSB

	.SBTTL	SKIP_SRC_LINES
;
; Routine to skip over source file lines
;
; Inputs:
;
;	R4  = Last line number to skip
;	R8  = RAB address
;
; Outputs:
;
;	IS_W_LINE_NO(R9) = Last line number
;
;
SKIP_SRC_LINES:
	MOVL	#1,R0			; Assume success
	CMPW	R4,IS_W_LINE_NO(R9)		; Need to skip any?
	BLSS	20$			; No if LSS
	BSBW	ACCESS_SRC		; Access source file
	BLBC	R0,20$			; Error if LBC
10$:
	$FIND	RAB = R8, -		; Skip one line
		ERR = SUM$READ_ERR
	BLBC	R0,20$			; Error if LBC
	INCW	IS_W_DELETES(R9)		; Increment deleted lines count
	ACBW	R4,#1,IS_W_LINE_NO(R9),10$	; Increment line number and branch back
					; if more lines to skip
	BBSS	#PRC_V_DELINE, -	; Set deleted lines information
		IS_B_PROCFLAGS(R9),20$	; pending flag
20$:
	RSB

	.SBTTL	COMMAND_CHECK
;
; Subroutine to check if line is a command
;
; Inputs:
;
;	R6 = Size of line
;	R7 = Address of line
;	R8 = RAB address
;	R9 = Input stream control block
;	R10= File block address
;
; Outputs:
;	R4[CMND] = 0:Data  1:Command
;	R4[EDTRM] = 0:Normal command  1:Data terminator command
;	R4[EDEND] = 0:Data terminator  1:End of edit
;	R6 = Size of line
;	R7 = Address of line
;
COMMAND_CHECK:
	ASSUME	UPF_W_LOC2 EQ <UPF_W_LOC1+2>
	MOVAL	TPARSE_BLOCK,R1		; Set pointer to Tparse parameter block
	MOVB	IS_B_FLAGS(R9), -	; Get current input stream flags byte
		TPA_B_ISFLAGS(R1)
	BBCC	#SUM_V_AUDITNEW, -	; but clear new audit trail flag
		TPA_B_ISFLAGS(R1),5$
5$:
	CLRB	TPA_B_EDFLAGS(R1)	; Clear all edit flags
	MOVW	UPF_W_DOT(R10), -	; Get current dot value
		TPA_W_DOT(R1)
	CLRL	TPA_W_LOC(R1)		; Clear locator value and line type
	CLRL	TPA_W_LOC1(R1)		; Clear loc-1 and loc-2
	CLRQ	TPA_Q_AUDDS(R1)		; Clear audit descriptor
	CLRQ	TPA_Q_CMNT(R1)		; Comment descriptor
	MOVQ	R6,TPA_Q_LINEDS(R1)	; Save line size and address
	MOVQ	R6,TPA$L_STRINGCNT(R1)	; Set TPARSE input descriptor
	PUSHAL	MER_KEY
	PUSHAL	MER_STATE
	PUSHL	R1
	CALLS	#3,G^LIB$TPARSE
	BLBC	R0,20$			; Error if LBC
	MOVAL	TPARSE_BLOCK,R1		; Set pointer to Tparse paramter block
	TSTW	TPA_W_LOC2(R1)		; Were two locators in command?
	BEQL	8$			; No if EQL, so don't compare them
	CMPW	TPA_W_LOC1(R1),TPA_W_LOC2(R1) ; Is loc-1 <= loc-2?
	BLEQ	8$			; Yes if LEQ
	CLRL	R0			; Set error status
	BRB	20$			; and return
8$:
	MOVQ	TPA_Q_LINEDS(R1),R6	; Reset line size and address,
	MOVW	R6,RAB$W_RSZ(R8)	; Reset RAB block record size
	MOVB	TPA_B_ISFLAGS(R1), -	; input stream flags byte,
		IS_B_FLAGS(R9)
	MOVB	TPA_B_EDFLAGS(R1), -	; edit flags byte,
		UPF_B_EDFLAGS(R10)
	MOVW	TPA_W_DOT(R1),UPF_W_DOT(R10) ; dot value,
	MOVL	TPA_W_LOC1(R1), -	; locator 1,
		UPF_W_LOC1(R10)		; and locator 2
	MOVQ	TPA_Q_CMNT(R1), -	; Comment descriptor
		UPF_Q_CMNT(R10)
	BBC	#SUM_V_AUDITNEW, -	; If new audit trail
		IS_B_FLAGS(R9),10$
	MOVL	TPA_Q_AUDDS(R1), -	; Copy size of string
		UPF_Q_AUDDS(R10)
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>
	MOVC3	TPA_Q_AUDDS(R1), -	; Copy audit string
		@TPA_Q_AUDDS+4(R1),UPF_T_AUDST(R10)
	POPR	#^M<R0,R1,R2,R3,R4,R5>
10$:
	MOVZWL	TPA_W_LINTYP(R1),R4	; Set line type flags
20$:
	RSB

;
; Tparse action routines
;
;
ACT_BLANKS_SIG:
	.WORD	0
	BBSS	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$
10$:
	RET
;
;
ACT_BLANKS_NSIG:
	.WORD	0
	BBCC	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$
10$:
	RET
;
;
ACT_PERCENT:
	.WORD	0
	BISB	#SUM_M_AUDIT, -		; Switch on audit trail
		TPA_B_ISFLAGS(AP)
	RET
;
;
ACT_BACKSLASH:
	.WORD	0
	BICB	#SUM_M_AUDIT, -		; Switch off audit trail
		TPA_B_ISFLAGS(AP)
	RET
;
;
ACT_ESC:
	.WORD	^M<R6>
	MOVL	#1,R1			; Set index
	MOVAB	TPA_Q_LINEDS(AP),R6	; Point to buffer descriptor
	DECW	(R6)			; Reduce line length by one
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	MOVC3	(R6),@4(R6)[R1],@4(R6)	; Move up line
	POPR	#^M<R0,R1,R2,R3,R4,R5>
	RET
;
;
ACT_EXIT:
	.WORD	0
	MOVW	TPA$L_PARAM(AP), -	; Set return type
		TPA_W_LINTYP(AP)
	RET
;
;
ACT_LOC1:
	.WORD	0
	MOVW	#CMD_M_CMND,TPA_W_LINTYP(AP)	; Assume normal command
	MOVW	TPA_W_LOC(AP),TPA_W_LOC1(AP)
	BEQL	10$			; If EQL is a normal command
	MOVW	#CMD_M_CMND!CMD_M_EDTRM,TPA_W_LINTYP(AP) ; Set as data terminator command
	CLRW	TPA_W_LOC(AP)
10$:
	RET
;
;
ACT_LOC2:
	.WORD	0
	MOVW	TPA_W_LOC(AP),TPA_W_LOC2(AP)
	RET
;
;
ACT_DOT:
	.WORD	0
	MOVW	TPA_W_DOT(AP),TPA_W_LOC(AP)
	RET
;
;
ACT_LOCNUM:
	.WORD	0
	MOVW	TPA$L_NUMBER(AP),TPA_W_LOC(AP)
	MOVW	TPA_W_LOC(AP),TPA_W_DOT(AP)
	RET
;
;
ACT_PLUS:
	.WORD	0
	ADDW2	TPA$L_NUMBER(AP),TPA_W_LOC(AP)
	MOVW	TPA_W_LOC(AP),TPA_W_DOT(AP)
	RET
;
;
ACT_AUDIT:
	.WORD	0
	MOVL	TPA$L_STRINGPTR(AP),TPA_Q_AUDDS+4(AP)
	BISB	#SUM_M_AUDITNEW, -	; Set new audit trail flag
		TPA_B_ISFLAGS(AP)
	BBSS	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$ ; Make blanks significant
10$:
	RET
;
;
ACT_AUDCH:
	.WORD	0
	CMPL	TPA_Q_AUDDS(AP),#16	; Is audit trail at maximum size?
	BGEQ	10$			; Yes if GEQ
	INCL	TPA_Q_AUDDS(AP)		; Increment audit trail size
10$:
	RET
;
;
ACT_AUDEND:
	.WORD	0
	BBCC	#TPA$V_BLANKS,TPA$L_OPTIONS(AP),10$ ; Switch off blank processing
10$:
	RET
;
;
ACT_CMNT:
	.WORD	0
	MOVQ	TPA$L_STRINGCNT(AP),TPA_Q_CMNT(AP)
	RET
;
;
ACT_SUPPRESS:
	.WORD	0
	BISB	#ED_M_SUPPRESS, -	; Set clash messages suppressed flag
		TPA_B_EDFLAGS(AP)
	RET

	.SBTTL	SUM$CLOSE
;
;
; This procedure is called from the main program prior to closing
; the input file.  It ensures that the main program source file
; is connected to the RAB.
;
;
; Inputs:
;
;	4(AP) = Address of SUM control block
;
; Outputs:
;
;	None
;
;
	.ENTRY	SUM$CLOSE,^M<R8,R9>
;
	MOVL	4(AP),R1		; Get control block address
	MOVL	SUM_L_ISDATA(R1),R9	; and set data block pointer
	BEQL	20$
	TSTL	IS_L_FILELIST(R9)	; Is there an update list?
	BEQL	20$			; No if EQL, file already accessed
	MOVL	IS_L_MAIN_FAB(R9),R1	; Get main program FAB address
	TSTW	FAB$W_IFI(R1)		; Is source file open?
	BEQL	10$			; No if EQL
	MOVL	IS_L_MAIN_RAB(R9),R8	; Set RAB pointer
	BSBW	ACCESS_SRC		; Access source file
10$:
	TSTL	IS_L_OPEN_FILE(R9)	; Is an update file open?
	BEQL	20$			; No if EQL
	$CLOSE	FAB = IS_T_FAB(R9), -
		ERR = SUM$CLOSE_ERR	; Close update file
	CLRL	IS_L_OPEN_FILE(R9)	; and clear marker
20$:
	RET
;
;
	.END

