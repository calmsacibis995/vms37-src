	.TITLE	SUM$ERROR
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;
; ABSTRACT:
;
;	Source Update Merge error processing
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:	R. Newland
;
; MODIFIED BY:
;
;	V003	TMH0003		Tim Halvorsen		26-Dec-1981
;		Fix error reporting, which was broken because it relied
;		on the number of arguments to PUTMSG to point to one of
;		the arguments - now broken because PUTMSG has an extra
;		optional argument.
;
;	V02-002	CNH0037		Chris Hume		21-Sep-1980
;		Added SUM$WRITE_ERR while obsoleting SUMSLP's ERROR.MAR
;
;	V02-001			B. Schreiber		21-Mar-1980
;			Make totally position independent
;--

	.SBTTL	DECLARATIONS
;
;
; Macro definitions
;
	$FABDEF				; FAB block
	$NAMDEF				; NAM block
	$RABDEF				; RAB block
	$SHRDEF				; Shared messages
	$STSDEF				; Status values
;
;
;
; Local storage
;
;
	.PSECT	SUM$RO_DATA,NOEXE,NOWRT,LONG
;
;
SUM_NAME:
	.ASCIC	/SUM/			; Facility name for messages
;
;
	.PSECT	SUM$RW_DATA,NOEXE,LONG
;
;

	.SBTTL	RMS ERROR PROCESSING
;
;
;++
; Functional description:
;
;	These routines are called as RMS error processing action routines.
;	They form and print a message describing the error.
;
; Inputs:
;
;	4(AP) = Address of RMS control block (either FAB or RAB)
;
; Outputs:
;
;	None
;
;--
;
	.PSECT	SUM$CODE,NOWRT,LONG
;
SUM$OPEN_ERR::
	.WORD	^M<R2,R3,R4,R5>
	BSBB	FAB_ERR			; Process for FAB control block
	MOVL	#SHR$_OPENIN!STS$K_ERROR!<2@16>,R1 ; Get shared message code
	CMPL	R4,#RMS$_FNF		; Was error 'file not found'?
	BNEQ	10$			; No if NEQL
	INSV	#STS$K_INFO, -		; Yes so reduce severity to information
		#STS$V_SEVERITY, -
		#STS$S_SEVERITY,R1
10$:
	BSBB	PUT_MSG			; Put message
	RET
;
;
SUM$CLOSE_ERR::
	.WORD	^M<R2,R3,R4,R5>
	BSBB	FAB_ERR			; Process for FAB control block
	MOVL	#SHR$_CLOSEIN!STS$K_ERROR!<2@16>,R1 ; Get shared message code
	BSBB	PUT_MSG			; Put message
	RET
;
;
SUM$READ_ERR::
	.WORD	^M<R2,R3,R4,R5>
	BSBB	RAB_ERR			; Process for RAB control block
	CMPL	R4,#RMS$_EOF		; Is error end-of-file?
	BEQL	10$			; Yes if EQL, so don't report
	MOVL	#SHR$_READERR!STS$K_ERROR!<2@16>,R1 ; Get shared message code
	BSBB	PUT_MSG			; Put message
10$:
	RET
;
;
SUM$WRITE_ERR::
	.WORD	^M<R2,R3,R4,R5>
	BSBB	RAB_ERR			; Process for RAB control block
	MOVL	#SHR$_WRITEERR!STS$K_ERROR!<2@16>,R1 ; Get shared message code
	BSBB	PUT_MSG			; Put message
	RET

	.SBTTL	FAB_ERR and RAB_ERR
;
;
;++
; Functional description:
;
;	These two routines are called to form the data required to
;	use the system PUTMSG routine.  Separate entry points exist
;	for the RMS control block being an FAB or RAB
;
; Inputs:
;
;	4(AP) = Address of RMS control block
;
; Outputs:
;	R0 = FAB address
;	R1 = NAM block address
;	R2 = Size of file spec string
;	R3 = Address of file spec string
;	R4 = Completion status code
;	R5 = Status value
;
;--
	.ENABL	LSB
;
FAB_ERR:
	MOVL	4(AP),R0		; Get FAB address
	MOVQ	FAB$L_STS(R0),R4	; Get completion code and status value
	BRB	10$
;
RAB_ERR:
	MOVL	4(AP),R1		; Get RAB address
	MOVL	RAB$L_FAB(R1),R0	; and then FAB address
	MOVQ	RAB$L_STS(R1),R4	; Get completion code and status value
10$:
	MOVL	FAB$L_NAM(R0),R1	; Get NAM block address
	MOVL	NAM$L_RSA(R1),R3	; Get resultant string address
	MOVZBL	NAM$B_RSL(R1),R2	; and length
	BNEQ	20$			; If NEQ resultant string was formed
	MOVL	NAM$L_ESA(R1),R3	; Get expanded string address
	MOVZBL	NAM$B_ESL(R1),R2	; and length
	BNEQ	20$			; If NEQ expanded string was formed
	MOVL	FAB$L_FNA(R0),R3	; Get input file name
	MOVZBL	FAB$B_FNS(R0),R2	; and size
20$:
	RSB
;
;
	.DSABL	LSB

	.SBTTL	PUT_MSG
;
;
;++
; Functional description:
;
;	This routine takes message data and calls the system service
;	to expand and put the message to the processes SYS$OUTPUT stream
;
; Inputs:
;
;	R1 = Message code
;	R2 = Size of file spec string
;	R3 = Address of file spec string
;	R4 = RMS completion status code
;	R5 = RMS status value
;
; Outputs:
;
;	None
;
;--
;
PUT_MSG:
	PUSHAL	SUM_NAME		; Form string descriptor for facility name
	MOVZBL	@(SP),R0		; Get length of string
	INCL	(SP)			; Point to string
	PUSHL	R0			; Form complete descriptor
	MOVL	SP,R0			; Save descriptor address
	PUSHR	#^M<R2,R3>		; Form string descriptor from R2 and R3
	PUSHR	#^M<R4,R5>		; and push RMS code and status values
	PUSHAQ	8(SP)			; Address of string descriptor
	PUSHL	#1			; Number of arguments
	PUSHL	R1			; Message code
	PUSHL	#5			; Size of message packet
	MOVL	SP,R1			; Point to message argument vector
;
	$PUTMSG_S MSGVEC=(R1),-		; Convert and print message
		FACNAM=(R0)
	ADDL2	#10*4,SP		; Remove 10 longwords from stack
	RSB

	.SBTTL	LIBRARY ROUTINE ERROR
;
;
; ++
; Functional description:
;
;	This procedure is called to form and output an error message
;	for a library routine error
;
;
; Inputs:
;
;	R0 = Error code
;
;
; Outputs:
;
;	None
;--
;
;
SUM$LIB_ERR::
	.WORD	^M<R1,R2>
	MOVAB	SUM_NAME,R2		; Form descriptor for facility name
	MOVZBL	(R2)+,R1		; Get length of name
	MOVQ	R1,-(SP)		; Stack descriptor
	MOVL	SP,R1			; And save it's address
	PUSHL	R0			; Form message arguments on stack
	PUSHL	#1			; Set size of vector
	MOVL	SP,R0			; Point to message argument vector
	$PUTMSG_S MSGVEC=(R0),-		; Form and output message
		FACNAM=(R1)
	MOVL	4(SP),R0		; Restore R0
	RET
;
	.END
