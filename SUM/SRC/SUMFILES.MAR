	.TITLE	SUMFILES
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Procedure to prompt user to supply a list of input files
; and a single output file.  At least one input file must be
; supplied.  The procedure will continue to prompt for input files
; until at least one is supplied.  The single output file
; is optional

	$NAMDEF
	$FABDEF
;
;
;
	.PSECT	$CODE,EXE,NOWRT

GET_FILES::
	.WORD	0
	MOVAL	W^GET_HANDLER,(FP)	; Set condition handler
10$:
	MOVAL	W^PROMPT_INPUT+1, -	; Set up read prompt string
		W^CMD_INPUT_RAB+RAB$L_PBF
	MOVB	W^PROMPT_INPUT, -
		W^CMD_INPUT_RAB+RAB$B_PSZ
	BSB	INPUT_FILES		; Get input files
	BLBC	R0,20$			; If any errors start again
	TSTL	R11			; If zero input files given reprompt
	BEQL	10$
	MOVAL	W^PROMPT_OUTPUT+1, -	; Set up 'Output' prompt string
		W^CMD_INPUT_RAB+RAB$L_PBF
	MOVB	W^PROMPT_OUTPUT, -
		W^CMD_INPUT_RAB+RAB$B_PSZ
	BSBW	OUTPUT_FILE		; Get output file
	BLBC	R0,20$			; If any errors start again
20$:
	RET

	.SBTTL	INPUT_FILES
;
;
; Subroutine to get input files
;
; Inputs:
;	None
;
; Outputs:
;	R0 = Success/error status
;
;
INPUT_FILES:
	CLRL	R11			; Initialise input files count
	MOVL	W^DEF_NAME+4,W^INPUT_FAB+FAB$L_DNA ; Set default file name
	MOVB	W^DEF_NAME,W^INPUT_FAB+FAB$B_DNS
10$:
	MOVAL	W^INPUT_BUF,R6		; Set address to put file name string
	BSBW	GETFILE			; Get next file
	BLBC	R0,40$			; Error if LBC
	TSTB	R7			; Is file spec null (0 bytes)?
	BNEQ	30$			; No if NEQ
	TSTL	R11			; Any files yet?
	BNEQ	20$			; Yes if NEQ
	BLBS	R8,40$			; End of list if LBS
20$:
	ERRMSG	NULLFS			; Report error
	BRB	40$
30$:
	INCL	R11			; Increment file number
	BSB	INPUT_SPEC		; Process spec
	BLBC	R0,40$			; Error if LBC
	BLBC	R8,10$			; More files if LBC
40$:
	RSB

	.SBTTL	INPUT_SPEC
;
;
;
; Inputs:
;	R6 = Address of file specification
;	R7 = Length of file specification
;
; Outputs:
;	R0 = Success/error status
; Subroutine to process input file spec
;
;
INPUT_SPEC:
	PUSHAL	W^VIRT_ADDR		; Get slp file node
	PUSHAL	W^SLP_SIZE
	CALLS	#2,G^LIB$GET_VM
	BLBS	R0,10$			; OK if LBS
	PUSHL	R0			; Signal error
	CALLS	#1,G^LIB$SIGNAL
	BRB	20$
10$:
	MOVC5	#0,W^0,#0,L^SLP_SIZE, -	; Clear new memory
		@W^VIRT_ADDR
	MOVL	W^VIRT_ADDR,R2		; Set node pointer
	MOVB	R11,SLP$B_FILENO(R2)	; Insert file priority number
	MOVAL	SLP$T_AUDST(R2), -	; Initialise audit string descriptor
		SLP$Q_AUDDS+4(R2)
	MOVAL	SLP$T_AUCST(R2), -	; Initialise audit string descriptor
		SLP$Q_AUCDS+4(R2)
	PUSHR	#^M<R2>			; Initialise with default string
	MOVW	W^DEF_AUDIT,SLP$Q_AUCDS(R2)
	MOVC3	W^DEF_AUDIT,@W^DEF_AUDIT+4, -
		SLP$T_AUCST(R2)
	POPR	#^M<R2>
	MOVL	R2,R3			; and NAM block pointer
	ADDL	#SLP$T_NAM,R3
	MOVAL	W^INPUT_FAB,R4
	$FAB_STORE FAB=R4, -		; Set up FAB
		NAM = (R3), -
		FNA = (R6), FNS = R7
	$NAM_STORE NAM = R3, - 
		BID = #NAM$C_BID, -
		BLN = #NAM$C_BLN
	BSB	PARSE_SPEC		; Parse file spec
	BLBC	R0,20$			; Error if LBC
	INSQUE	(R2),@W^FILE_NODES+4	; Insert new file node
	MOVL	NAM$L_ESA(R3),FAB$L_DNA(R4) ; Reset defaults
	MOVB	NAM$B_ESL(R3),FAB$B_DNS(R4)
20$:
	RSB

	.SBTTL	PARSE_SPEC
;
;
; Subroutine to parse file-spec string and put expanded string
; into dynamic memory buffer
;
; Inputs:
;	R3 = NAM block address
;	R4 = FAB block address
;
; Outputs:
;	R0 = Success/error status
;
;
PARSE_SPEC:
	PUSHR	#^M<R2,R4>
	BSB	GET_FS_NODE		; Get file-spec node
	BLBC	R0,20$			; Error if LBC
	$NAM_STORE NAM = R3, -
		ESA = @W^VIRT_ADDR, ESS = #255
	$PARSE	FAB = R4		; Parse file name string
	BLBS	R0,10$			; OK if LBS
	PUSHL	FAB$L_STV(R4)		; Signal error
	PUSHL	R0
	ERRMSG	PRSERR,<R6,R7>
	CALLS	#2,G^LIB$SIGNAL
	BRB	20$
10$:
	MOVZBL	NAM$B_ESL(R3),R2	; Get expanded string size
	BSB	RETURN_FS_NODE		; Return unused part of node
20$:
	POPR	#^M<R2,R4>
	RSB

	.SBTTL	GET_FS_NODE, RETURN_FS_NODE
;
; Subroutines to get and return file specification node
;
; Get node
;
; Inputs:
;	None
;
; Outputs:
;	R0 = Success/error status
;	VIRT_ADDR = Address of block
;	FILE_SIZE = Size of block
;
	.ENABL	LSB
;
GET_FS_NODE:
	MOVL	#256,W^FILE_SIZE	; Set size of expanded string buffer
	PUSHAL	W^VIRT_ADDR		; Push parameters
	PUSHAL	W^FILE_SIZE
	CALLS	#2,G^LIB$GET_VM
	BLBC	R0,10$			; Error if LBC
	RSB
;
;
; Return node
;
; Inputs:
;	R2 = Number of bytes in node used
;	VIRT_ADDR = Address of node
;	FILE_SIZE = Size of node
;
; Outputs:
;	R0 = Success/error status
;	VIRT_ADDR = Address of memory returned
;	FILE_SIZE = Size of mempory returned
;
;
RETURN_FS_NODE:
	ADDL2	#7,R2			; Round up to quadword
	BICL2	#7,R2
	SUBL2	R2,W^FILE_SIZE		; Compute number of bytes to return
	BEQL	20$			; None if EQL
	ADDL2	R2,W^VIRT_ADDR		; Address of bytes to return
	PUSHAL	W^VIRT_ADDR		; Push parameters
	PUSHAL	W^FILE_SIZE
	CALLS	#2,G^LIB$FREE_VM
	BLBS	R0,20$			; OK if LBS
10$:
	PUSHL	R0			; Signal error
	CALLS	#1,G^LIB$SIGNAL
20$:
	RSB
;
	.DSABL	LSB

	.SBTTL	OUTPUT_FILE
;
;
; Subroutine to get output file
;
OUTPUT_FILE:
	MOVAL	W^INPUT_BUF,R6		; Get address to put file name string
	BSBW	GETFILE			; Get next file
	TSTL	R7			; Is file spec null (0 bytes)
	BEQL	20$			; Yes if EQL
	BLBC	R8,10$			; Error if not last file
	BISW	#MERM_OUTPUT,W^MERGE_FLAGS ; Flag output file specified
	MOVAL	W^OUTPUT_NAM,R3		; Set NAM and FAB addresses
	MOVAL	W^OUTPUT_FAB,R4
	$FAB_STORE FAB = R4, FNA = (R6), FNS = R7
	BSBW	PARSE_SPEC
	BRB	40$
10$:
	ERRMSG	ONEOUT
	BRB	40$
20$:
	BLBC	R8,30$			; Not at end of line if LBC
	BICW	#MERM_OUTPUT,W^MERGE_FLAGS ; Flag no output file
	BRB	40$
30$:
	ERRMSG	NULLFS			; Report error
40$:
	RSB

	.SBTTL	GETFILE
;
;
; Subroutine to get next file spec from command line
;
; Inputs:
;	R6  = Address to put file spec string
;
; Outputs:
;	R0  = Success/error status
;	R6  = Address of file-spec
;	R7  = Size in bytes of file-spec
;	R8  = Continue/terminate flag
;
GETFILE:
	PUSHR	#^M<R6>
	CLRL	R7			; file-spec sting
	CLRL	R3			; Initialise [..] flag
10$:
	BSB	GETCHAR			; Get next character
	BLBC	R0,150$			; Error if LBC
	BEQL	120$			; End of line if EQL
	LOCC	R5,#2,W^LOCCHAR		; Space or tab?
	BNEQ	10$			; Yes if NEQ
	BRB	30$
20$:
	BSB	GETCHAR			; Get next character
	BLBC	R0,150$			; Error if LBC
	BEQL	120$			; End of line if EQL
30$:
	LOCC	R5,#7,W^LOCCHAR		; Special character
	CASEB	R0,#0,#7
40$:	.WORD	80$-40$			; Normal character
	.WORD	50$-40$			; >
	.WORD	60$-40$			; <
	.WORD	50$-40$			; ]
	.WORD	60$-40$			; [
	.WORD	70$-40$			; ,
	.WORD	90$-40$			; Space
	.WORD	90$-40$			; Tab
50$:
	CLRL	R3			; Clear [..] flag
	BRB	80$
60$:
	MOVL	#1,R3			; Set [..] flag
	BRB	80$
70$:
	BBCC	#0,R3,130$		; If ',' but in [..] process as normal
80$:
	MOVB	R5,(R6)+		; Copy byte to file-spec string
	INCL	R7			; and increment size
	BRB	20$			; Back for next character
90$:
	BSB	GETCHAR			; Get next character
	BLBC	R0,150$			; Error if LBC
	BEQL	120$			; End of line if EQL
	LOCC	R5,#3,W^LOCCHAR		; Trailing character?
	CASEB	R0,#0,#3
100$:	.WORD	110$-100$		; No
	.WORD	130$-100$		; ,
	.WORD	90$-100$		; Space
	.WORD	90$-100$		; Tab
110$:
	DECL	W^CMD_INPUT_POS		; Back-up line pointer
	INCL	W^CMD_INPUT_SZE
120$:
	MOVL	#1,R8			; Set for no more input files
	BRB	140$
130$:
	CLRL	R8			; Set for more input files
140$:
	MOVL	#1,R0
150$:
	POPR	#^M<R6>
	RSB
;
LOCCHAR:	.ASCII	<^X9>/ ,[]<>/

	.SBTTL	GETCHAR
;
;
; Subroutine to get next character from command line
;
; Inputs:
;	None
;
; Outputs:
;	R0  = Success/error status
;	R5  = character
;	'Z' = 0 if end of line
;	'Z' = 1 if valid character in R5
;
;
GETCHAR:
	PUSHR	#^M<R8,R9>
	MOVL	#1,R0			; Assume success
	MOVL	W^CMD_INPUT_SZE,R9	; Set command size
	MOVL	W^CMD_INPUT_POS,R8	; Set command input position
	BNEQ	30$			; Have a command line if NEQ
10$:
	$GET	RAB = CMD_INPUT_RAB	; Prompt for and get next command line
	BLBS	R0,20$			; OK if LBS
	PUSHL	W^CMD_INPUT_RAB+RAB$L_STV ; Signal error
	PUSHL	R0
	CALLS	#2,G^LIB$SIGNAL
	BRB	70$
20$:
	MOVL	W^CMD_INPUT_RAB+RAB$L_RBF,R8 ; Reset command line position
	MOVZWL	W^CMD_INPUT_RAB+RAB$W_RSZ,R9 ; and size
30$:
	TSTL	R9			; Any characters in line?
	BEQL	40$			; No if EQL
	MOVB	(R8)+,R5		; Get character
	DECL	R9			; Decrement character count
	CMPB	R5,#^A/-/		; Continuation character?
	BNEQ	60$			; No if not equal
	TSTL	R9			; Last character on line?
	BNEQ	50$			; No if NEQ
	MOVAL	W^PROMPT_CONT+1, -	; Set continuation prompt
		W^CMD_INPUT_RAB+RAB$L_PBF
	MOVB	W^PROMPT_CONT, -
		W^CMD_INPUT_RAB+RAB$B_PSZ
	BRB	10$
40$:
	CLRL	R5			; Clear character
	CLRL	R8			; Clear valid command line flag
	BRB	60$
50$:
	ERRMSG	INVPMD			; Issue error message
	BRB	70$
60$:
	MOVL	R8,W^CMD_INPUT_POS	; Save command position
	MOVL	R9,W^CMD_INPUT_SZE	; and size
70$:
	TSTL	R5			; Set condition codes
	POPR	#^M<R8,R9>
	RSB

	.SBTTL	OPEN_FILES
;
;
; Procedure to open slipr input and output files
;
; Inputs:
;	R11 = number of input files
;
; Outputs:
;	None
;
;
OPEN_FILES::
	.WORD	0
	MOVAL	W^FILE_NODES,R10	; Initialise file nodes pointer
10$:
	MOVL	(R10),R10		; Get next node
	CMPL	R10,#FILE_NODES		; At end of list?
	BEQL	20$			; Yes if EQL
	BSB	OPEN_INPUT		; Open input file
	BLBS	R0,10$			; OK if LBC
	BRB	30$
20$:
	BISL	#FAB$M_NAM,W^INPUT_FAB+FAB$L_FOP
	BITW	#MERM_OUTPUT,W^MERGE_FLAGS ; Was output file specified?
	BEQL	30$			; No if EQL
	BSBW	CREATE_OUTPUT		; Create output file
30$:
	RET

	.SBTTL	OPEN_INPUT
;
; Subroutine to open input file
;
; Inputs:
;	R10 = File node address
;
; Outputs:
;	R0 = Success/error code
;
;
OPEN_INPUT:
	MOVL	R10,R3			; Set NAM block address
	ADDL	#SLP$T_NAM,R3
	MOVAL	W^INPUT_FAB,R4		; and FAB address
	BSBW	GET_FS_NODE		; Get node for resultant file spec
	BLBC	R0,30$			; Error if LBC
	$FAB_STORE FAB = R4, NAM = (R3), -
		FNA = @NAM$L_ESA(R3), FNS = NAM$B_ESL(R3)
	$NAM_STORE NAM = R3, ESS = #0, -
		RSA = @VIRT_ADDR, RSS = #255
	$OPEN	FAB = R4		; Open input file
	BLBC	R0,20$			; Error if LBC
	$CLOSE	FAB = R4		; Close file to release FAB
	BLBC	R0,20$			; Error if LBC
	MOVZBL	NAM$B_RSL(R3),R2	; Get number of bytes used
	BSBW	RETURN_FS_NODE		; and return rest of node
	BLBC	R0,30$			; Error if LBC
	CLRL	R2			; Return Expanded fs node
	MOVL	FAB$L_FNA(R4),W^VIRT_ADDR
	MOVZBL	FAB$B_FNS(R4),W^FILE_SIZE
	BSBW	RETURN_FS_NODE
	BRB	30$
20$:
	MOVL	FAB$L_FNA(R4),R6	; Get file spec
	MOVZBL	FAB$B_FNS(R4),R7
	ERRMSG	OPENER,<R6,R7>
	PUSHL	FAB$L_STV(R4)		; Signal error
	PUSHL	FAB$L_STS(R4)
	CALLS	#2,G^LIB$SIGNAL
30$:
	CLRB	W^SLP$B_FLAGS(R10)	; Initialise flags
	RSB

	.SBTTL	CREATE_OUTPUT
;
; Subroutine to create output file
;
; Inputs:
;	None
;
; Outputs:
;	R0 = Success/error status
;
;
CREATE_OUTPUT:
	MOVAL	W^OUTPUT_NAM,R3		; Set NAM and
	MOVAL	W^OUTPUT_FAB,R4		; FAB pointers
	$FAB_STORE FAB = R4, -
		FNA = @NAM$L_ESA(R3), FNS = NAM$B_ESL(R3)
	BSBW	GET_FS_NODE		; Get file_spec node
	BLBC	R0,40$			; Error if LBC
	$NAM_STORE NAM = R3, ESS = #0, -
		RSA = @VIRT_ADDR, RSS = #255
	$CREATE	FAB = R4		; Open output file
	BLBS	R0,10$			; OK if LBS
	PUSHL	FAB$L_STV(R4)		; Signal error
	BRB	20$
10$:
	$CONNECT RAB = OUTPUT_RAB	; Connect RAB to FAB
	BLBS	R0,30$			; OK if LBS
	PUSHL	W^OUTPUT_RAB+RAB$L_STV	; Signal error
20$:
	PUSHL	R0
	MOVL	FAB$L_FNA(R4),R6	; Get file spec
	MOVZBL	FAB$B_FNS(R4),R7
	ERRMSG	CREATE,<R6,R7>
	MOVL	(SP),R0			; Reset R0
	CALLS	#2,G^LIB$SIGNAL
	BRB	40$
30$:
	MOVZBL	NAM$B_RSL(R3),R2	; Get number of bytes used
	BSBW	RETURN_FS_NODE		; and return rest of node
	BLBC	R0,40$			; Error of LBC
	CLRL	R2			; Return expanded fs node
	MOVL	FAB$L_FNA(R4),W^VIRT_ADDR
	MOVZBL	FAB$B_FNS(R4),W^FILE_SIZE
	BSBW	RETURN_FS_NODE
40$:
	RSB

	.SBTTL	CLOSE_FILES
;
;
; Procedure to close files
;
; Inputs:
;	File list
;
; Outputs:
;	None
;
;
CLOSE_FILES::
	.WORD	0

	MOVAL	W^INPUT_FAB,R2
	BSB	CLOSE
	MOVAL	W^OUTPUT_FAB,R2
	BSB	CLOSE
	MOVAL	W^RANDOM_FAB,R2
	BSB	CLOSE
	CLRL	W^RANDOM_FILE
	RET
;
;
; Subroutine to close file
;
; Inputs:
;	R2 = FAB address
;
; Outputs:
;	None
;
CLOSE:
	TSTW	FAB$W_IFI(R2)		; Is file open?
	BEQL	10$			; No if EQL
	$CLOSE	FAB = R2		; Yes it's open so close it
10$:
	RSB

;
;
	.END

