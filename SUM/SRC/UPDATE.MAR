	.TITLE	UPDATE
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
;
; Facility:
;
;	SUMSLP utility
;
; Environment:
;
;	User mode
;
; Author:
;
;	R. Newland	18-Apr-1979
;
;--

	.SBTTL	DECLARATIONS
;
;
	$FABDEF				; RMS FAB definitions
	$RABDEF				; RMS RAB definitions
	$NAMDEF				; RMS NAM definitions
	DEFSSLGEN			; Define SUMSLP general values
	DEFSSLFLG			; Define SUMSLP flags
	DEFSUMFLG			; Define SUM flags
	DEFSUMCBL			; Define SUM control block offsets
	DEFSSLRHB			; Define SUM record header buffer
	$STSDEF				; Define status fields
	$SSDEF				; Define system status codes
;
;
	FF = ^XC			; Form-feed character

	.SBTTL	UPDATE
;
;++
;
; Functional description:
;
; This routine is called to perform the update operation and acts
; as the main line code when applying update packets to an input file.
;
;
; Calling sequence:
;
;	BSB	SUM$UPDATE
;
;
; Input paramters:
;
;	None
;
;
; Implicit inputs:
;
;	SUM$AX_INPUTRAB	= Input file RAB
;	SUM$GL_UPDATES	= Address of update files list
;	SUM$AX_CBL	= Address of SUM control block
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	None
;
;--
;
SUM$UPDATE::
;
	MOVAL	W^SUM$GL_FLAGS,R11	; Set flags longword address
;
; Open all input files (including any update files) all required
; output files.
;
	BSBW	OPEN_FILES		; Open and create all files
	BLBC	R0,40$			; Error if LBC
;
;
; Perform initial processing of update files
;
	PUSHAB	W^SUM$AX_INPUTRAB	; Initialise update files
	PUSHL	W^SUM$GL_UPDATES
	PUSHAB	W^SUM$AX_CBL
	CALLS	#3,G^SUM$INIT_EDIT
;
	BSBW	INIT_PAGEHDR		; Initialize listing page headers
;
;
; This is the main loop.  The next line is read from the input stream
; and written to the required output files.
;
10$:
	PUSHAB	W^SUM$AX_CBL		; Get next update line
	CALLS	#1,G^SUM$LINE
	BLBC	R0,20$			; Error if LBC
;
	CMPW	W^SUM$AX_INPUTRAB+RAB$W_RSZ,#1 ; Was record size 1?
	BNEQ	15$			; No if NEQ
	CMPB	W^SUM$AT_BUFFER,#FF	; Was record a single form-feed?
	BNEQ	15$			; No if NEQ
	BBSS	#SSL_V_FORMFEED,(R11),15$ ; Set form-feed flag
15$:
	BSBW	OUTPUT_LINE		; Write line to output file
	BLBC	R0,40$			; Error if LBC
;
	BSBW	LIST_LINE		; Write line to listing file
	BLBC	R0,40$			; Error if LBC
	BRB	10$
;
; Error processing
;
20$:
	CMPL	R0,#RMS$_EOF		; Is error end-of-file?
	BEQL	30$			; Yes if EQL
;
; Extract facility code and if SUM error form and print message
;
	EXTZV	#STS$V_FAC_NO, -	; Get facility code
		#STS$S_FAC_NO,R0,R1	; into R1
	CMPW	R1,#<SUM$_NORMAL@-16>	; Is error from SUM?
	BNEQ	40$			; No if NEQ
	BSBW	SUM_ERROR		; Report error
	BRB	10$			; and go back for next line
;
; End-of-file processing
;
30$:
	BSBW	CLOSE_FILES		; Close all files
40$:
	RSB

	.SBTTL	OPEN_FILES
;
;++
;
; Functional description:
;
; This routine opens all input files and creates all required output files
;
;
; Calling sequence:
;
;	BSB	OPEN_FILES
;
;
; Input parameters:
;
;	None
;
;
; Implicit inputs:
;
;	SUM$AX_INPUTFAB = Input file FAB
;	SUM$AX_INPUTRAB = Input file RAB
;	SUM$AX_INPUTNAM = Input file NAM block
;	SUM$GL_UPDATES	= Update files list address
;	SUM$AX_OUTPUFAB = Output file FAB
;	SUM$AX_OUTPURAB = Output file RAB
;	SUM$AX_LISTFAB	= List file FAB
;	SUM$AX_LISTRAB	= List file RAB
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	None
;
;--
;
OPEN_FILES:
;
; Open input file and connect FAB to RAB
;
	$OPEN	FAB = W^SUM$AX_INPUTFAB - ; Open input file
		ERR = SUM$OPEN_ERR
	BLBC	R0,15$			; Error if LBC
;
	$CONNECT RAB= W^SUM$AX_INPUTRAB - ; Connenct input file to RAB
		ERR = SUM$OPEN_ERR
	BLBC	R0,30$			; Error if LBC
;
;
; If there is an update files list call SUM procedure to
; open all update files.  The input file NAM block is used
; to supply the initial default values.
;
	TSTL	W^SUM$GL_UPDATES	; Any updates?
	BEQL	10$			; No if EQL
	PUSHAB	W^SUM$GL_UPDATES	; Open update files
	PUSHAB	W^SUM$AX_INPUTNAM
	CALLS	#2,G^SUM$OPEN
	BLBC	R0,30$			; Error if LBC
;
; If output file was requested create output file and connect RAB to FAB.
;
10$:
	BBC	#SSL_V_OUTPUT,(R11),20$	; Branch if no output file
	$CREATE	FAB = W^SUM$AX_OUTPUFAB - ; Create output file
		ERR = SUM$OPEN_ERR
15$:	BLBC	R0,30$			; Error if LBC
;
	$CONNECT RAB= W^SUM$AX_OUTPURAB - ; Connect output file to RAB
		ERR = SUM$OPEN_ERR
	BLBC	R0,30$			; Error if LBC
;
; If listing file was requested create listing file and connect RAB to FAB.
;
20$:
	BBC	#SSL_V_LIST,(R11),30$	; Branch if no listing file
	$CREATE	FAB = W^SUM$AX_LISTFAB - ; Create listing file
		ERR = SUM$OPEN_ERR
	BLBC	R0,30$
	$CONNECT RAB= W^SUM$AX_LISTRAB - ; Connect listing file to RAB
		ERR = SUM$OPEN_ERR
30$:
	RSB

	.SBTTL	CLOSE_FILES
;
;++
;
; Functional description:
;
; This routine closes all input and output files.
;
;
; Calling sequence:
;
;	BSB	CLOSE_FILES
;
;
; Input parameters:
;
;	None
;
;
; Implicit inputs:
;
;	SUM$AX_INPUTFAB = Input file FAB
;	SUM$AX_OUTPUFAB = Output file FAB
;	SUM$AX_LISTFAB	= List file FAB
;	SUM$AX_CBL	= SUM control block
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	None
;
;--
;
CLOSE_FILES:
	PUSHAB	W^SUM$AX_CBL		; Close update files
	CALLS	#1,G^SUM$CLOSE
;
	$CLOSE	FAB = SUM$AX_INPUTFAB
;
	BBC	#SSL_V_OUTPUT,(R11),10$	; Branch if no output file
	$CLOSE	FAB = SUM$AX_OUTPUFAB
10$:
	BBC	#SSL_V_LIST,(R11),20$	; Branch if no listing file
	$CLOSE	FAB = SUM$AX_LISTFAB
20$:
	RSB

	.SBTTL	INIT_PAGEHDR
;
;++
;
; Functional description:
;
; This routine initialises the control variables and title line used
; to format a listing.
;
;
; Calling sequence:
;
;	BSB	INIT_PAGEHDR
;
;
; Input parameters:
;
;	None
;
;
; Implicit inputs:
;
;	None
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	SUM$GW_PAGENO	= Initial page number
;	SUM$GW_PAGESZ	= Page size (lines/page)
;	SUM$AT_TITLEDT	= Title line current date/time
;
;
; Side effects:
;
;	None
;
;--
;
INIT_PAGEHDR:
	BBC	#SSL_V_LIST,(R11),20$ ; Skip this if no listing
	CALLS	#0,G^LIB$LP_LINES	; Get system lines/page
	SUBW3	#9,R0,W^SUM$GW_PAGESZ	; Set page size allowing for 3 line top
					; margin, 3 line title/subtitle/blank
					; and 3 line bottom margin
	MOVW	W^SUM$GW_PAGESZ, -	; Cause initial new page
		W^SUM$GW_LINENO
	CLRW	W^SUM$GW_PAGENO		; Initialise page number
	$ASCTIM_S ,W^SUM$GQ_TITLEDS	; Get current date/time and put into
					; title line
	$ASCTIM_S ,W^SUM$GQ_SBTTLDS, -	; Get input file creation date/time and
		W^SUM$AX_INPUTXAB+XAB$Q_CDT ; convert to ASCII
	MOVZBL	W^SUM$AX_INPUTNAM+NAM$B_RSL,R1 ; Get resultant file-spec length
	CMPL	R1,#45			; Is it > 45?
	BLEQ	10$			; No if LEQ
	MOVL	#45,R1			; Set to maximum size
10$:
	MOVC3	R1,W^SUM$AT_INPUTFN, -	; Move file name into subtitle buffer
		W^SUM$AT_SBTTLFS
20$:
	RSB

	.SBTTL	OUTPUT_LINE
;
;++
;
; Functional description:
;
; This routine writes the current line to the output file.  If the /HEAD
; qualifier was specified the record will have a 12 byte record header buffer.
;
;
; Calling sequence:
;
;	BSB	OUTPUT_LINE
;
;
; Input parameters:
;
;	None
;
;
; Implicit inputs:
;
;	SUM$AX_INPUTRAB = Input file RAB
;	SUM$AX_OUTPURAB = Output file RAB
;	SUM$GL_FLAGS	= Flags word
;	SUM$AX_CBL	= SUM control block
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	SUM$AX_RHB	= Record header buffer
;
;
; Side effects:
;
;	None
;
;--
;
OUTPUT_LINE:
	MOVL	#SS$_NORMAL,R0		; Assume successful completion
;
; If output file not requested then exit from routine
;
	BBC	#SSL_V_OUTPUT,(R11),30$	; Branch if no output file
;
; Get size of input record and use to set size of output record
;
	MOVW	W^SUM$AX_INPUTRAB+RAB$W_RSZ, - ; Copy input record size
		W^SUM$AX_OUTPURAB+RAB$W_RSZ    ; to output RAB
;
; If /HEAD was not requested then ready to output line, otherwise
	BBC	#SSL_V_HEADER,(R11),20$	; Branch if no RHB field in output file
;
; Fill Record header field with information from SUM control block
;
	MOVAB	W^SUM$AX_CBL,R6		; Get control block address
	MOVAB	W^SUM$AX_RHB,R7		; and record header address
	MOVC5	#0,(R7),#0, -		; Clear record header buffer
		#SSL$RHBSZE,(R7)
	BBS	#SUM_V_SRCUPD, -	; Branch if line came from update file
		SUM_B_FLAGS(R6),10$
;
; Line came from source file
;
	MOVW	SUM_W_LINE_NO(R6), -	; Copy line number into record
		SHB_W_LINE_NO(R7)	; header buffer
	BBC	#SUM_V_DELETE, -	; Branch if no deleted lines information
		SUM_B_FLAGS(R6),20$	; with this source line
	MOVW	SUM_W_INSERT_NO(R6), -	; Copy number of deleted lines into
		SHB_W_INSERT_NO(R7)	; record header buffer
	BRB	20$
;
; Line came from an update file
;
10$:
	MOVW	SUM_W_INSERT_NO(R6), -	; Copy insert number into record
		SHB_W_INSERT_NO(R7)	; header buffer
	BBC	#SUM_V_AUDIT, -		; Branch if audit trail switched off
		SUM_B_FLAGS(R6),20$
	MOVZWL	SUM_Q_AUDDS(R6),R1	; Get audit trail string size
	CMPL	R1,#SHB_K_AUDSZ		; Is greater than maximum size?
	BLEQ	15$			; No if LEQ
	MOVL	#SHB_K_AUDSZ,R1		; Reduce size to maximum
15$:
	MOVC3	R1,@SUM_Q_AUDDS+4(R6), -; Copy audit trail string into
		SHB_T_AUDIT(R7)		; record header buffer
;
; Put line (with record header buffer) to output file
;
20$:
	$PUT	RAB = SUM$AX_OUTPURAB -	
		ERR = SUM$WRITE_ERR
30$:
	RSB

	.SBTTL	LIST_LINE
;
;++
;
; Functional description:
;
; This routine forms a listing line which shows the audit trail, source
; line number or insert line number and the source or update line.
;
;
; Calling sequence:
;
;	BSB	LIST_LINE
;
;
; Input paramters:
;
;	None
;
; 
; Implicit inputs:
;
;	SUM$AX_CBL	= SUM control block
;	SUM_GL_FLAGS	= Flags word
;	SUM$AT_AUDIT	= Listing line buffer
;
;
; Output paramters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	None
;
;--
;
LIST_LINE:
	MOVL	#SS$_NORMAL,R0		; Assume successful completion
	BBC	#SSL_V_LIST,(R11),60$	; Branch if no listing file
;
; Clear audit trail and line number fields
;
	MOVAB	W^SUM$AT_AUDIT,R7	; Set pointer to audit/line no. fields
	MOVC5	#0,(R7),#^A/ /, -	; Fill these fields with spaces
		#SSL$AULSZE,(R7)
;
	MOVAB	W^SUM$AX_CBL,R6		; Get SUM control block address
	BBS	#SUM_V_SRCUPD, -	; Branch if updated line
		SUM_B_FLAGS(R6),20$
;
; Line has come from source file.
; If there is deleted line information put '-n' into audit trail field,
; and put source line number into line number field
;
	BBC	#SUM_V_DELETE, -	; Branch if no deleted lines information
		SUM_B_FLAGS(R6),10$
	MOVB	#^A/-/,(R7)+		; Insert leading '-' character
	MOVZWL	SUM_W_INSERT_NO(R6),R2	; Get number of deleted lines
	BSBW	DEC_LTOR		; and output into audit trail field
10$:
	MOVZWL	SUM_W_LINE_NO(R6),R2	; Get source line number
	MOVAB	W^SUM$AT_LINENE,R7	; Set address to put number
	BSBW	DEC_RTOL		; Output number into line number field
	BRB	40$
;
; Line has come from an update file.
; If audit trailing is switched on copy audit trail into audit trail field,
; and put insert line number into line number field.
;
20$:
	BBC	#SUM_V_AUDIT, -		; Branch if audit trailing switched off
		SUM_B_FLAGS(R6),30$
	MOVC3	SUM_Q_AUDDS(R6), -	; Copy audit trail string into
		@SUM_Q_AUDDS+4(R6),(R7)	; audit trail field
30$:
	MOVZWL	SUM_W_INSERT_NO(R6),R2	; Get insert line number
	MOVAB	W^SUM$AT_LINENO+6,R7	; Set field address
	BSBW	DEC_RTOL		; Output number into field
	MOVB	#^A/./,-(R7)		; and add leading '.' character
;
;
; Add size of audit trail/line number fields to size of line and if
; over 132 characters reduce to 132 characters, then print line
;
40$:
	ADDW3	#SSL$AULSZE, -
		W^SUM$AX_INPUTRAB+RAB$W_RSZ,R8
	CMPW	R8,#SSL$BUFSZE		; Is total size > SSL$BUFSZE
	BLEQ	50$			; No if LEQ
	MOVW	#SSL$BUFSZE,R8		; Set size to SSL$BUFSZE bytes
50$:
	MOVAB	W^SUM$AT_AUDIT,R9	; Set address of line
	BSBW	PRINT_LINE		; Print line
60$:
	RSB

	.SBTTL	PRINT_LINE
;
;++
;
; Functional description:
;
; This routine outputs a single line to the listing file.  If the current
; page is full the line is printed on a new page.
;
;
; Calling sequence:
;
;	BSB	PRINT_LINE
;
;
; Input parameters:
;
;	R8 = Record size
;	R9 = Record address
;
;
; Implicit inputs:
;
;	SUM$GL_FLAGS	= Flags word
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	None
;
;--
;
PRINT_LINE:
	MOVL	#SS$_NORMAL,R0		; Assume successful completion
	BBC	#SSL_V_LIST,(R11),30$	; Branch if no listing file
	CMPW	W^SUM$GW_LINENO,W^SUM$GW_PAGESZ ; Is current page full?
	BLSS	20$			; No if LSS
	PUSHR	#^M<R8,R9>		; Save line size/address
	INCW	W^SUM$GW_PAGENO		; Increment page number
	MOVZWL	W^SUM$GW_PAGENO,R2	; Get current page number
	MOVAL	W^SUM$AT_TITLEPN,R7	; and address in title line
	BSBW	DEC_RTOL		; Convert to ASCII
	MOVZWL	#SUM$K_TITLELN,R8	; Get title line size
	MOVAL	W^SUM$AT_TITLE,R9	; and address
	BSBW	PUT_LINE		; and print
	BLBC	R0,10$			; Error if LBC
	MOVZWL	#SUM$K_SBTTLLN,R8	; Get subtitle line size
	MOVAL	W^SUM$AT_SBTTL,R9	; and address
	BSBW	PUT_LINE		; and print
	BLBC	R0,10$			; Error if LBC
	CLRL	R8			; Print blank line
	BSBW	PUT_LINE
10$:
	CLRW	W^SUM$GW_LINENO		; Reset line number
	POPR	#^M<R8,R9>		; Restore line size/address
	BLBC	R0,30$			; Error if LBC
20$:
	INCW	W^SUM$GW_LINENO		; Increment line number
	BSBW	PUT_LINE		; Print line
	BLBC	R0,30$			; Error if LBC
	BBCC	#SSL_V_FORMFEED,(R11),30$ ; Branch if not FF record
	MOVW	W^SUM$GW_PAGESZ, -	; Make page full
		W^SUM$GW_LINENO
30$:
	RSB

	.SBTTL	PUT_LINE
;++
;
; Functional description:
;
; This routine puts a single record to the listing file.
;
;
; Calling sequence:
;
;	BSB	PUT_LINE
;
;
; Input parameters:
;
;	R8 = Record size
;	R9 = Record address
;
;
; Implicit inputs:
;
;	SUM$AX_LISTRAB	= Listing file RAB
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	None
;
PUT_LINE:
	MOVW	R8,W^SUM$AX_LISTRAB+RAB$W_RSZ	; Set record size
	MOVL	R9,W^SUM$AX_LISTRAB+RAB$L_RBF	; and buffer address
	$PUT	RAB=W^SUM$AX_LISTRAB, -
		ERR=W^SUM$WRITE_ERR
	RSB

	.SBTTL	DEC_LTOR
;
; ++
;
; Functional descrition:
;
;	This routine outputs a decimal number left to right
;
;
; Calling sequence:
;
;	BSB	DEC_LTOR
;
;
; Input paramters:
;
;	R2 = Number to output
;	R7 = Address to put output characters
;
;
; Implicit inputs:
;
;	None
;
;
; Output parameters:
;
;	R7 = Address of byte after last digit of number
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	R2, R3 zeroed
;
;--
;
DEC_LTOR:
	CLRL	R3			; Clear high register
10$:
	EDIV	#10,R2,R2,R0		; Get least significant digit
	ADDB3	#^A/0/,R0,-(SP)		; Convert to ASCII char and stack
	TSTL	R2			; All of number converted?
	BEQL	20$			; Yes if EQL
	BSBB	10$		; Call routine again to convert next char
20$:
	MOVB	(SP)+,(R7)+		; Move character to output buffer
	RSB

	.SBTTL	DEC_RTOL
;
; ++
;
; Functional descrition:
;
;	This routine outputs a decimal number right to left
;
;
; Calling sequence:
;
;	BSB	DEC_RTOL
;
;
; Input paramters:
;
;	R2 = Number to output
;	R7 = Address immediately after right margin of number
;
;
; Implicit inputs:
;
;	None
;
;
; Output parameters:
;
;	R7 = Address of most significant digit of number
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	R2, R3 zeroed
;
;--
;
DEC_RTOL:
	CLRL	R3			; Clear high register
10$:
	EDIV	#10,R2,R2,R0		; Get least significant digit
	ADDB3	#^A/0/,R0,-(R7)		; Convert to ASCII char and put in
					; output buffer
	TSTL	R2			; All of number converted?
	BNEQ	10$			; No if NEQ
	RSB

	.SBTTL	SUM_ERROR
;
;++
;
; Functional description:
;
;	This routine forms and prints error messages which describe
;	Source Update Merge errors.  The messages will be output to
;	the system error device and the listing file.
;
;
; Calling sequence:
;
;	BSB	SUM_ERROR
;
;
; Input parameters:
;
;	R0 = Error code
;
;
; Implicit inputs:
;
;	SUM$AX_CBL is SUM control block
;
;
; Output parameters:
;
;	None
;
;
; Implicit outputs:
;
;	None
;
;
; Side effects:
;
;	R0 to R5 is destroyed
;
;--
;
SUM_ERROR:
	MOVAB	W^SUM$AX_CBL,R6		; Get address of SUM control block
	CMPL	R0,#SUM$_EDITSCLSH	; Is it 'Edits clash' error?
	BNEQ	10$			; No if NEQ
	BBS	#SUM_V_SUBCLSH, -	; Branch if not first error line
		SUM_B_FLAGS(R6),30$	; of error report
;
; If first error print error message
;
10$:
	$GETMSG_S R0,W^SUM$AW_MSGLEN,-	; Get error message
		W^SUM$AQ_MSGDES
	BLBC	R0,30$			; Error if LBC
	MOVZWL	W^SUM$AW_MSGLEN,R8	; Get message length
	MOVAL	W^SUM$AT_MSGBUF,R9	; and address
	BSBW	TERM_LINE		; Output to terminal
	BLBC	R0,90$			; Error if LBC
	BSBW	PRINT_LINE		; Output to listing file
	BLBC	R0,90$			; Error if LBC
;
; Now print erroneous source line
;
30$:
	MOVZWL	W^SUM$AX_INPUTRAB+RAB$W_RSZ,R8	; Get line size
	MOVL	W^SUM$AX_INPUTRAB+RAB$L_RBF,R9	; and address
;
; Append name of file from which line came
;
	ADDL3	R8,R9,R1		; Set pointer to end of line
	MOVZWL	SUM_Q_FILESP(R6),R0	; Get size of file-spec
	ADDL2	#4,R8			; Include size of separating spaces
	ADDL2	R0,R8			; Compute total size of line
	CMPL	R8,#SSL$BUFSZE		; Will it fit in buffer?
	BLEQ	40$			; Yes if LEQ
	SUBL3	#SSL$BUFSZE,R8,R2	; Compute size of overflow
	SUBL2	R2,R1			; and move pointer back this amount
	MOVZWL	#SSL$BUFSZE,R8		; Set line size to maximum
40$:
	MOVL	#^A/    /,(R1)+		; Insert four spaces
	MOVC3	R0,@SUM_Q_FILESP+4(R6),(R1) ; Copy file name to line
	BSBW	TERM_LINE		; Output to terminal
	BLBC	R0,90$			; Error if LBC
	BSBW	PRINT_LINE		; Output to listing file
;
90$:
	RSB

.SBTTL	TERM_LINE
;
;
TERM_LINE:
	MOVW	R8,W^SUM$AX_TERMRAB+RAB$W_RSZ	; Set record size
	MOVL	R9,W^SUM$AX_TERMRAB+RAB$L_RBF	; and buffer address
	$PUT	RAB = W^SUM$AX_TERMRAB, -
		ERR = W^SUM$WRITE_ERR
	RSB
;
;
	.END
