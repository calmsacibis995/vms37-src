
!-*-BLISS-*-
!<BLF/NOERROR>
!<BLF/WIDTH:116>
!<BLF/REMARK:8>
!<BLF/NOPLIT>
!<BLF/MACRO>
!<BLF/LOWERCASE_KEY>
!<BLF/UPPERCASE_USER>
module SORT$SPEC_FILE (language (bliss32) ,
		ident = 'V03-000'
		) =
begin

psect
    plit = SOR$SPEC ( execute),
    own = SOR$SPECDATA,
    global = SOR$SPECDATA,
    code = SOR$SPEC;

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:
!
!	SORT
!
! Abstract:
!
!	This module contains the routines which process the the data in the
!	specification file.
!
!
! Environment:
!
!	Starlet Operating System, User mode utility.
!
!
! Author:
!
!	Ellen R Simich,		Creation Date:		1-Sep-77
!	Robert A Surtees,	Modification Date:	1-Sep-79
!
!
! Modified by:
!
!	V02.02		PDG0002		Peter D Gilbert	11-Dec-1981
!		Fix returned address/status problem with SOR$$GET_RECORD.
!	V02.01		JDN0001		Joe Neumeister	12-Mar-1981
!		Declare ERROR symbols as external literals to allow
!		    new error messages to be outputted.
!
!--

!
! TABLE OF CONTENTS:
!

linkage
    JSBL = jsb;

forward routine
    SPEC_ERROR : JSBL novalue,					! Error routine
    GET_STRING,							! Pick up a field
    GET_CHARACTER;						! Read a character

!
! INCLUDE FILES:
!

library 'SYS$LIBRARY:STARLET.L32';				! Error codes


!
! MACROS:
!

macro
    FIELD_SIZE =
	0, 0, 8, 0 %,
    FIELD_TYPE =
	1, 0, 8, 0 %,
    FIELD_POS =
	2, 0, 8, 0 %,						! Record field buffer offsets
    KEY_TYPE =
	0, 0, 8, 0 %,
    KEY_ORDER =
	0, 8, 8, 0 %,
    KEY_POS =
	1, 0, 16, 0 %,
    KEY_SIZE =
	2, 0, 16, 0 %;						! Key buffer offsets

!
! EQUATED SYMBOLS:
!

literal
    ERROR = 0,
    SUCCESS = 1,
    SORT_TYPE = 3,						! Field values for header records
    TOTAL_KEY_SIZE = 4,
    SORT_ORDER = 5,
    SORT_SEQ = 6,
    KEY_STRIP = 7,
    OUT_MRS = 8,
    HEADER_COMMENT = 9,
    MAX_HEADER = 10,						! Maximum header fields
    KEY_SEQ = 3,						! Field values for field spec records
    KEY_FORMAT = 4,
    KEY_START = 5,
    KEY_END = 6,
    FORCE_CHAR = 7,
    FIELD_COMMENT = 8,
    MAX_FIELDSP = 9;						! Maximum fields

!
! OWN STORAGE:
!

global
    SOR$GT_SPECNAME : vector [ch$allocation (NAM$C_MAXRSS)] initial (%ascii'SYS$INPUT'),
    SOR$GB_SPECSIZE : byte initial (0);

own
    POS : byte initial (0),					! Position in record sort 11
    FORMAT : byte initial (0),					! Sort 11 or sort 32
    FIELD_NUM : byte initial (0);				! Current field

!
! EXTERNAL REFERENCES:
!

external routine
    SOR$$OPEN_SPEC,
    FOR$CNV_IN_I : addressing_mode (general),			! Decimal ascii to hex
    SOR$$GET_RECORD : JSBL weak,
    SOR$$ERROR : weak;

external
    SOR$GB_SOR_TYP : byte,					! Sort to perform
    SOR$GB_KEY_SIZE : byte,					! Total key size
    SOR$GB_NUM_KEYS : byte,					! Number of keys defined
    SOR$AW_KEY_BUF : blockvector [, 3, word],			! Key definition buffer
    SOR$GW_OUT_MRS : word;					! Output record max size

external literal
    SOR$GK_CHAR_KEY : unsigned (1),                             ! Character
    SOR$GK_BIN_KEY : unsigned (2),                              ! Binary
    SOR$GK_ZONE_KEY : unsigned (2),                             ! Zoned decimal
    SOR$GK_PACK_KEY : unsigned (3),                             ! Packed decimal
    SOR$GK_USB_KEY : unsigned (3),                              ! Unsigned Binary
    SOR$GK_DLO_KEY : unsigned (3),                              ! Decimal leading overpunch sign
    SOR$GK_DLS_KEY : unsigned (3),                              ! Decimal leading separate sign
    SOR$GK_DTO_KEY : unsigned (4),                              ! Decimal trailing overpunch sign
    SOR$GK_DTS_KEY : unsigned (4),                              ! Decimal tailing separate sign
    SOR$GK_FLT_KEY : unsigned (4),                              ! Floating point
    SOR$GK_FLTD_KEY : unsigned (4),                             ! Double precision floating point
    SOR$GK_FLTG_KEY : unsigned (4),                             ! G_floating floating point
    SOR$GK_FLTH_KEY : unsigned (4),                             ! H_floating floating point
    SOR$GK_RECORD : unsigned (1),                               ! Sort types
    SOR$GK_TAG : unsigned (2),
    SOR$GK_INDEX : unsigned (3),
    SOR$GK_ADDRESS : unsigned (3),
    SOR$_MISS_KEY,				! Declare ERROR symbols
    SOR$_WORK_DEV,				!  as external literals
    SOR$_NO_WRK,
    SOR$_VM_FAIL,
    SOR$_WS_FAIL,
    SOR$_SORT_ON,
    SOR$_BAD_KEY,
    SOR$_NUM_KEY,
    SOR$_BAD_LEN,
    SOR$_ONE_IN,
    SOR$_IND_OVR,
    SOR$_INCONSIS,
    SOR$_VAR_FIX,
    SOR$_BAD_TYPE,
    SOR$_LRL_MISS,
    SOR$_BAD_SPEC,
    SOR$_BAD_LRL,
    SOR$_BAD_FILE,
    SOR$_BAD_ADR,
    SOR$_MAP,
    SOR$_EXTEND,
    SOR$_KEY_LEN,
    SOR$_CLEAN_UP,
    SOR$_BAD_MERGE,
    SOR$_BAD_ROUTIN,
    SOR$_INP_FILES,
    SOR$_BAD_ORDER;



%title 'SOR$PROC_SPEC'

global routine SOR$PROC_SPEC =

!++
! Functional Description:
!
!	This routine parses each of the record types in the specification
!	file and stores the information in the appropriate parameter area.
!
!
! Formal Parameters:
!
!	None.
!
!
! Implicit Inputs:
!
!	The name of the specification file.
!
!
! Implicit Outputs:
!
!	None.
!
!
! Routine Value:
!
!	An error code indicating the type of error.
!
!
! Completion Codes:
!
!	1 for success.
!
!
! Side Effects:
!
!	None.
!
!--

    begin

    local
	CURRENT_KEY : ref block [, word],			! Address of current key def
	NUMBER,
	CHAR : byte,						! Temp for character
	ORDER : byte,						! Sort order
	DESC : vector[3];					! The address of the input record descriptor

    stacklocal
	STRING_DESC : vector [2],
	STRING : vector [8, byte],				! Temp for field string
	NEW_DESC : vector [2];					! Number of bytes left

    ! and pointer to current byte in record

    bind
	!
	! These tables define the valid record types and their fields for the the
	! specification file.  The first byte in each 3 byte block is the maximum
	! size of the field, the second is the data type; 1 for character, 2 for
	! number.  The third is the starting position for the Sort-11 format.
	!
	HEADER_FIELDS = uplit byte(2, 2, 1,
                                    3,2,3,                      ! Line number
                                    1,1,6,                      ! Record type
                                    5,1,7,                      ! Sort to perform
                                    5,2,13,                     ! Total key size
                                    1,1,18,                     ! Sorting order
                                    1,1,26,                     ! Sort collating sequence
                                    1,1,28,                     ! Keys stripped from output
                                    4,2,29,                     ! Output file maximum record size
                                    132, 1, 33) :		! Comment
blockvector [MAX_HEADER, 3, byte],
	FIELDSP_FIELDS = uplit byte(2, 2, 1,
                                     3,2,3,                     ! Line number
                                     1,1,6,                     ! Record type
                                     1,1,7,                     ! Key order
                                     1,1,8,                     ! Key type
                                     4,2,9,                     ! Key position
                                     4,2,13,                    ! Key ending position
                                     3,1,17,                    ! Force character
                                     132, 1, 20) :		! Comment
blockvector [MAX_FIELDSP, 3, byte],
	FIELDVAL = uplit byte(%ascii'SORT');

    label
	RECORD_SCAN;

    !
    ! First open the file then loop getting and processing records until eof is
    ! reached.
    !

    if not SOR$$OPEN_SPEC () then return ERROR;

    while 1 do
	begin
	local
	    STATUS;

	STATUS = SOR$$GET_RECORD (DESC);

	if .STATUS eql RMS$_EOF
	then
	    if .SOR$GB_NUM_KEYS neq 0
	    then return SUCCESS
	    else SOR$$ERROR (SOR$_MISS_KEY);
	if not .STATUS then return .STATUS;

	!
	! Intialize the descriptor to point to the start of the record.
	!
	NEW_DESC [0] = .DESC [0];
	STRING_DESC [1] = STRING;
	NEW_DESC [1] = ch$ptr (.DESC [1] - 1);
	!
	! Scan the first two fields of the record ignoring the page and
	! line numbers.  Determine the record format.
	!
RECORD_SCAN :
	begin

	while .FIELD_NUM lss 2 do

	    case (GET_CHARACTER (NEW_DESC, HEADER_FIELDS, MAX_HEADER)) from %c'0' to %c'9' of
		set

		[inrange] :

		    if not GET_STRING (NEW_DESC, HEADER_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

		[outrange] :
		    begin

		    if .NEW_DESC [0] eql 0 then leave RECORD_SCAN;

		    if .FIELD_NUM neq 2 then SPEC_ERROR (NEW_DESC);

		    exitloop;
		    end;
		tes;

	!
	! Now determine which record format it is; then scan each record by
	! field doing the appropriate processing based on the field.
	!
	ORDER = 0;

	case ch$rchar (.NEW_DESC [1]) from %c'F' to %c'H' of
	    set
	    !
	    ! Field specification record.
	    !

	    [%c'F'] :

		while 1 do
		    begin
		    CURRENT_KEY = SOR$AW_KEY_BUF [.SOR$GB_NUM_KEYS, KEY_TYPE];
		    CHAR = GET_CHARACTER (NEW_DESC, FIELDSP_FIELDS, MAX_FIELDSP);

		    if .CHAR eql 0 then exitloop;

		    case .FIELD_NUM from KEY_SEQ to FORCE_CHAR of
			set

			[KEY_SEQ] :
			    begin

			    if not GET_STRING (NEW_DESC, FIELDSP_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    case .CHAR from %c'N' to %c'O' of
				set

				[%c'N'] :
				    CURRENT_KEY [KEY_ORDER] = .ORDER;

				[%c'O'] :

				    if .ORDER eql 1
				    then
					CURRENT_KEY [KEY_ORDER] = 0
				    else
					CURRENT_KEY [KEY_ORDER] = 1;

				[outrange] :
				    SPEC_ERROR (NEW_DESC);
				tes;

			    end;

			[KEY_FORMAT] :
			    begin

			    if not GET_STRING (NEW_DESC, FIELDSP_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    selectone .CHAR of
				set

				[%c'B'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_BIN_KEY;

				[%c'C'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_CHAR_KEY;

				[%c'I'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_DLS_KEY;

				[%c'J'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_DTS_KEY;

				[%c'K'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_DLO_KEY;

				[%c'L'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_DTO_KEY;

				[%c'P'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_PACK_KEY;

				[%c'Z'] :
				    CURRENT_KEY [KEY_TYPE] = SOR$GK_ZONE_KEY;

				[otherwise] :
				    SPEC_ERROR (NEW_DESC);
				tes;

			    end;

			[KEY_START] :
			    begin

			    if not GET_STRING (NEW_DESC, FIELDSP_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    FOR$CNV_IN_I (STRING_DESC, NUMBER);

			    if .NUMBER gtr 16383 then SPEC_ERROR (NEW_DESC) else CURRENT_KEY [KEY_POS] = .NUMBER;

			    end;

			[KEY_END] :
			    begin

			    if not GET_STRING (NEW_DESC, FIELDSP_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    if .CURRENT_KEY [KEY_POS] eql 0
			    then
				begin
				FOR$CNV_IN_I (STRING_DESC, NUMBER);

				if .NUMBER gtr 16383
				then
				    SPEC_ERROR (NEW_DESC)
				else
				    CURRENT_KEY [KEY_POS] = .NUMBER;

				CURRENT_KEY [KEY_SIZE] = 1;
				end
			    else
				begin
				FOR$CNV_IN_I (STRING_DESC, NUMBER);

				if .NUMBER gtr 16383
				then
				    SPEC_ERROR (NEW_DESC)
				else
				    CURRENT_KEY [KEY_SIZE] = (.NUMBER - .CURRENT_KEY [KEY_POS]) + 1;

				end;

			    if .CURRENT_KEY [KEY_TYPE] eql 0 then CURRENT_KEY [KEY_TYPE] = SOR$GK_CHAR_KEY;

			    SOR$GB_NUM_KEYS = .SOR$GB_NUM_KEYS + 1;
			    end;

			[FORCE_CHAR] :
			    0;

			[outrange] :
			    SPEC_ERROR (NEW_DESC);
			tes;

		    end;

	    !
	    ! Header record.
	    !

	    [%c'H'] :

		while 1 do
		    begin
		    CHAR = GET_CHARACTER (NEW_DESC, HEADER_FIELDS, MAX_HEADER);

		    if .CHAR eql 0 then exitloop;

		    case .FIELD_NUM from SORT_TYPE to OUT_MRS of
			set

			[SORT_TYPE] :
			    begin

			    if not GET_STRING (NEW_DESC, HEADER_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    if ch$neq (4, ch$ptr (STRING), 4, ch$ptr (FIELDVAL)) then SPEC_ERROR (NEW_DESC);

			    selectone ch$rchar (ch$plus (ch$ptr (STRING), 4)) of
				set

				[%c'R'] :
				    SOR$GB_SOR_TYP = SOR$GK_RECORD;

				[%c'T'] :
				    SOR$GB_SOR_TYP = SOR$GK_TAG;

				[%c'I'] :
				    SOR$GB_SOR_TYP = SOR$GK_INDEX;

				[%c'A'] :
				    SOR$GB_SOR_TYP = SOR$GK_ADDRESS;

				[otherwise] :
				    SPEC_ERROR (NEW_DESC);
				tes;

			    end;

			[TOTAL_KEY_SIZE] :
			    begin

			    if not GET_STRING (NEW_DESC, HEADER_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    FOR$CNV_IN_I (STRING_DESC, NUMBER);

			    if .NUMBER gtr 255 then SPEC_ERROR (NEW_DESC);

			    end;

			[SORT_ORDER] :
			    begin

			    if not GET_STRING (NEW_DESC, HEADER_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    selectone .CHAR of
				set

				[%c'A'] :
				    ORDER = 0;

				[%c'D'] :
				    ORDER = 1;

				[otherwise] :
				    SPEC_ERROR (NEW_DESC);
				tes;

			    end;

			[KEY_STRIP, SORT_SEQ] :
			    0;

			[OUT_MRS] :
			    begin

			    if not GET_STRING (NEW_DESC, HEADER_FIELDS, STRING_DESC) then SPEC_ERROR (NEW_DESC);

			    FOR$CNV_IN_I (STRING_DESC, NUMBER);

			    if .NUMBER gtr 16383 then SPEC_ERROR (NEW_DESC) else SOR$GW_OUT_MRS = .NUMBER;

			    end;
			tes;

		    end;

	    [inrange, outrange] :
		SPEC_ERROR (NEW_DESC);
	    tes;

	end;							! Record scan
	end;							! Spec file processing

    return ERROR;	! Should never get here (?)
    end;


%title 'GET_CHARACTER'
routine GET_CHARACTER (DESC, RECORD_TYPE, MAX_FIELD) =

!++
! Functional Description:
!
!	This routine scans the record for the next number or letter in the
!	record.  It updates the pointer and the byte count and returns the
!	character.
!
!
! Formal Parameters:
!
!	The record descriptor, the record field table address and the
!	maximum field number.
!
!
! Implicit Inputs:
!
!	None.
!
!
! Implicit Outputs:
!
!	None.
!
!
! Routine Value:
!
!	The next character in the record or 0 if scan complete.
!
!
! Completion Codes:
!
!	None.
!
!
! Side Effects:
!
!	The record pointer is updated and so is the length remaining. The
!	field value is set by the field table.
!
!
!--

    begin

    map
	RECORD_TYPE : ref blockvector [, 3, byte];

    local
	PTR;

    bind
	RECORD_DESC = .DESC : vector [2];

    while 1 do
	begin
	!
	! Span over blanks and locate a character.  If none done with record.
	!
	PTR = ch$plus (.RECORD_DESC [1], 1);
	RECORD_DESC [1] = ch$find_not_ch (.RECORD_DESC [0], .PTR, %c' ');

	if ch$fail (.RECORD_DESC [1])
	then
	    begin
	    POS = 0;
	    FIELD_NUM = 0;
	    RECORD_DESC [0] = 0;
	    return ERROR;
	    end;

	!
	! Calculate number of bytes left to scan.
	!
	RECORD_DESC [0] = .RECORD_DESC [0] - (ch$diff (.RECORD_DESC [1], .PTR) + 1);
	POS = .POS + (ch$diff (.RECORD_DESC [1], .PTR) + 1);
	!
	! If character is a delimiter then process otherwise set up the
	! correct field and return the character.
	!

	selectone ch$rchar (.RECORD_DESC [1]) of
	    set

	    [%c','] :
		begin
		FIELD_NUM = .FIELD_NUM + 1;
		FORMAT = 1;
		end;

	    [%c'-'] :
		begin
		RECORD_DESC [0] = 0;
		return ERROR;
		end;

	    [%c'!'] :
		begin

		if .FIELD_NUM + 2 lss .MAX_FIELD then SPEC_ERROR (RECORD_DESC);

		FIELD_NUM = 0;
		RECORD_DESC [0] = 0;
		return ERROR;
		end;

	    [otherwise] :
		begin

		if .FORMAT neq 1
		then

		    incr index from 0 to .MAX_FIELD do

			if .POS geq .RECORD_TYPE [.index, FIELD_POS]
			then

			    if .RECORD_TYPE [.index, FIELD_SIZE] eql 132
			    then
				begin
				POS = 0;
				FIELD_NUM = 0;
				RECORD_DESC [0] = 0;
				return ERROR;
				end
			    else
				0

			else
			    begin
			    FIELD_NUM = .index - 1;
			    exitloop;
			    end;

		return ch$rchar (.RECORD_DESC [1]);
		end;
	    tes;

	end;

    return ERROR;	! Should never get here
    end;

%title 'GET_STRING'
routine GET_STRING (DESC, RECORD_TYPE, STRING_ADR) : =

!++
! Functional Description:
!
!	This routine scans the record and picks up the the contents of the
!	current field.
!
!
! Formal Parameters:
!
!	The record descriptor, the table to verify against and the
!	descriptor for the field value.
!
!
! Implicit Inputs:
!
!	The field number.
!
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!
!
! Completion Codes:
!
!	1 for success , 0 for error.
!
!
! Side Effects:
!
!	None.
!
!--

    begin

    map
	RECORD_TYPE : ref blockvector [, 3, byte];

    bind
	STRING = .STRING_ADR : vector [2],
	NEW_DESC = .DESC : vector [2];

    local
	NEXT_CHAR;

    literal
	CHAR = 1,
	NUM = 2;

    !
    ! Scan starting with the current character posistion until a
    ! delimiter is found or the field size is reached.	Then store the
    ! string if it is the correct type of characters with no embedded blanks.
    !
    STRING [0] = 0;						! Initialize field size

    incr index from 0 to .RECORD_TYPE [.FIELD_NUM, FIELD_SIZE] do
	begin
	NEXT_CHAR = ch$rchar_a (NEW_DESC [1]);
	NEW_DESC [0] = .NEW_DESC [0] - 1;			! Update bytes left in record

	if .FORMAT neq 1 and .STRING [0] geq .RECORD_TYPE [.FIELD_NUM, FIELD_SIZE] then exitloop;

	selectone .NEXT_CHAR of
	    set

	    [%c'0' to %c'9'] :

		if .RECORD_TYPE [.FIELD_NUM, FIELD_TYPE] neq NUM then return ERROR;

	    [%c'A' to %c'Z'] :

		if .RECORD_TYPE [.FIELD_NUM, FIELD_TYPE] neq CHAR then return ERROR;

	    [%c'-', %c',', %c'!'] :
		begin
		FORMAT = 1;
		exitloop;
		end;

	    [%c' '] :

		if .index neq 0 and ch$rchar (ch$plus (ch$ptr (.STRING [1]), .index - 1)) neq %c' ' then exitloop;

	    [otherwise] :
		return ERROR;
	    tes;

	STRING [0] = .STRING [0] + 1;
	ch$move (1, ch$ptr (NEXT_CHAR), ch$plus (ch$ptr (.STRING [1]), .index));
	end;

    NEW_DESC [1] = ch$plus (.NEW_DESC [1], -2);			! Reset pointer for update
    NEW_DESC [0] = .NEW_DESC [0] + 2;

    if .STRING [0] gtru .RECORD_TYPE [.FIELD_NUM, FIELD_SIZE] then return ERROR;

    POS = .POS + (.STRING [0] - 1);
    return SUCCESS;
    end;

%title 'SPEC_ERROR'
routine SPEC_ERROR (DESC) : JSBL novalue =

!++
! Functional Description:
!
!	This routine reports errors in the specification file records.
!
!
! Formal Parameters:
!
!	The record descriptor.
!
!
! Implicit Inputs:
!
!	None.
!
!
! Implicit Outputs:
!
!	None.
!
!
! Routine Value:
!
!
! Completion Codes:
!
!
! Side Effects:
!
!	None.
!
!--

    begin

    map
	DESC : ref vector [2];

    SOR$$ERROR (SOR$_BAD_SPEC, .DESC [0], .DESC [1]);
    end;
end

eludom
