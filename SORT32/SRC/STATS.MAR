;-*-MACRO-*-
		.title SOR$PRINT_STAT
		.ident	'V03-000'


;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility:
;
;	SORT
;
;
; Abstract:
;
;	This module prints out the sort utility statistics on the output
;	device at the completion of the sort.
;
;
; Environment:
;
;	Starlet Operating System, User Mode Utility
;
;
; Author:
;
;	Ellen R Simich,		Creation Date:		1-Sep-77
;	Robert A Surtees,	Modification Date:	1-Sep-77
;
;
; Modified by: 
;
;	V02.01		JDN0001		Joe Neumeister	19-Jun-1981
;		Make calls to LIB$PUT_OUTPUT global long-word
;			relative to avoid problems with V3.
;--
.page

		.sbttl	Declarations
		.psect	sor$statdata,noexe

;
; Include Files:
;

;
; Macros
;

;
; Equated Symbols:
;

MAX_WSET = 6 * 4				; Offsets into parameter list
ELAPSED = 4 * 4
DIRECT = 10 * 4
CPU = 5 * 4
TREE = 6 * 4
BUF = 0 * 4
ORDER = 1 * 4
PAGE = 2 * 4
PASS = 3 * 4
PASS1 = 15 * 4
ORDER1 = 13 * 4
TIME = 1
NODES = 0		;Nonzero if number of nodes in sort tree is printed.

;
; Own Storage - Do not insert declarations in between the following:
;

OUT_LEN:	.long		0	; Output string desc
		.address	OUT_BUF
BUF_DESC:	.long		CTRL_DESC-OUT_BUF	; Output buffer descriptor
		.address	OUT_BUF
OUT_BUF:	.blkb		450
CTRL_DESC:	.long		CTRL1_DESC-10$	; Descriptor for control string
		.address	10$
;
; First portion control string for FAO.
; !_ is for <tab>,
; !/ for <crlf>,
; !UL for longword number,
; !UW word number,
; !UB byte number, and
; !T for time string.
;
10$:		.ascii		#!/!_!_!_Sort Statistics:#
		.ascii		#!/!/Records read:!_!UL#
		.ascii		#!_!_!_Longest record length:!_!UW#
		.ascii		#!/Records sorted:!_!UL#
		.ascii		#!_!_!_Input multi block count: !UB#
		.ascii		#!/Records output:!_!UL#
		.ascii		#!_!_!_Output multi block count: !UB#

CTRL1_DESC:	.long		40$-20$	; Descriptor for control string
		.address	20$
20$:		.ascii		#Maximum working set used: !UL#
		.ascii		#!_!_Input multi buffer count: !UB#
		.ascii		#!/Virtual memory added:!_!UL#
		.ascii		#!_!_Output multi buffer count: !UB#
		.ascii		#!/Direct I/O Count: !UL#
		.ascii		#!_!_!_Number of initial runs:!_!UL#

40$:
	.if	gt TIME

	$jpidef				; Define symbolic process
					;  parameters
ITEM_LIST1:	.word		4	; List of desired parameters 
		.word		JPI$_BUFIO	; Buffered I/O operations
		.address	INITIAL_STATS
		.long		0
		.word		4
		.word		JPI$_CPUTIM	; CPU time used
		.address	INITIAL_STATS+4
		.long		0
		.word		4
		.word		JPI$_DIRIO	; Direct I/O operations
		.address	INITIAL_STATS+8
		.long		0
		.word		4
		.word		JPI$_PAGEFLTS	; Page faults
		.address	INITIAL_STATS+12
		.long		0
		.long		0
INITIAL_STATS:	.blkl		4		; Statistics at begining of sort
ITEM_LIST:	.word		4		; List of desired parameters 
		.word		JPI$_BUFIO	; Buffered I/O operations
		.address	SOR$AL_STATS + BUF
		.long		0
		.word		4
		.word		JPI$_CPUTIM	; CPU time used
		.address	SOR$AL_STATS + CPU
	 	.long		0
		.word		4
		.word		JPI$_DIRIO	; Direct I/O operations
		.address	SOR$AL_STATS + DIRECT
		.long		0
		.word		4
		.word		JPI$_PAGEFLTS	; Page faults
		.address	SOR$AL_STATS + PAGE
		.long		0
		.long		0
PERF_DESC:	.long		50$-30$		; Performance figures descr
		.address	30$
30$:		.ascii		#Buffered I/O Count: !UL#
		.ascii		#!_!_!_Order of the merge:!_!UB#
		.ascii		#!/Page faults:!_ !UL#
		.ascii		#!_!_!_Number of merge passes:!_!UB#
		.ascii		#!/Elapsed time:!_ !%T#
		.ascii		#!_!_CPU time: !UL#
		.if	gt NODES
		.ascii		#!/Sort tree size:!_!UL#
		.endc

50$:
	.endc
.page

		.sbttl SOR$GET_STAT   	

;++
; Functional Description:
;
;	This routine calls GETJPI to get the initial statistics values at
;	the begining of the sort.
;
;
; Calling Sequence:
;
;	A JSB with no parameters on the stack.
;
;
;
; Input Parameters:
;
;	None.
;	
;
; Implicit Inputs:
;
;	None.
;
;
; Output Paramemters: 
;
;	None.
;
;
; Implicit Outputs:
;
;	None.
;
;
; Completion Codes:
;
;	None.
;
;
; Side Effects:
;
;	None.
;
;--

	.psect	sor$control,nowrt

SOR$GET_STATS::
		.if		gt TIME
		$getjpi_s	ITMLST = ITEM_LIST1	; Get process statistics
		.endc
		rsb
.page

		.sbttl SOR$PRINT_STAT

;++
; Functional Description:
;
;	This routine calls FAO to format the statistic information and the
;	library routine put message to print it.
;
;
; Calling Sequence:
;
;	A JSB with one parameter in R0.
;
;
; Input Parameters:
;
;	The address of the elapsed time.
;	
;
; Implicit Inputs:
;
;	None.
;
;
; Output Paramemters: 
;
;	None.
;
;
; Implicit Outputs:
;
;	None.
;
;
; Completion Codes:
;
;	None.
;
;
; Side Effects:
;
;	None.
;
;--

	.PSECT	SOR$CONTROL,NOWRT

SOR$PRINT_STATS::
		subl2		(R0),8(R0)	; Compute difference 
		sbwc		4(R0),12(R0)
		pushal		8(R0)		; Save address
		$FAOL_S		ctrstr = CTRL_DESC,-
				outlen = OUT_LEN,-
				outbuf = BUF_DESC,-
				prmlst = SOR$AL_STATS
						; Call FAO to format stats
		pushal		OUT_LEN		; Print stats on output
		calls		#1,G^LIB$PUT_OUTPUT
		.if	gt TIME
		$GETJPI_S	itmlst = ITEM_LIST	; Get process statistics
		moval		SOR$AL_STATS,R1
		subl2		INITIAL_STATS,BUF(R1)	; Get values for sort
		subl2		INITIAL_STATS+8,DIRECT(R1)
		subl2		INITIAL_STATS+4,CPU(R1)
		subl2		INITIAL_STATS + 12,PAGE(R1)
		movl		ORDER1(R1),ORDER(R1)
		movl		(SP)+,ELAPSED(R1)
		movl		PASS1(R1),PASS(R1)
		$FAOL_S		ctrstr = CTRL1_DESC,-	; Call FAO to format stats
				outlen = OUT_LEN,-
				outbuf = BUF_DESC,-
				prmlst = MAX_WSET(R1)
		pushal		OUT_LEN		; Print stats on output
		calls		#1,G^LIB$PUT_OUTPUT
		moval		SOR$AL_STATS,R1		; Get address of array again.
		movl		SOR$GL_NUM_NODS,TREE(R1); Number of nodes in sort tree.
		$FAOL_S		ctrstr = PERF_DESC,-	; Call FAO to format info
				outlen = OUT_LEN,-
				outbuf = BUF_DESC,-
				prmlst = SOR$AL_STATS
		pushal		OUT_LEN
		calls		#1,G^LIB$PUT_OUTPUT	; Print it
		.endc
		rsb
		.end
