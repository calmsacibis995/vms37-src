!-*-BLISS-*-
!<BLF/NOERROR>
!<BLF/WIDTH:116>
!<BLF/REMARK:8>
!<BLF/NOPLIT>
!<BLF/MACRO>
!<BLF/LOWERCASE_KEY>
!<BLF/UPPERCASE_USER>
module SOR$GEN_KEY (language (bliss32) ,
		list (assembly) ,
		addressing_mode (external = general) ,
		ident = 'V03-000'
		) =
begin
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:
!
!        SORT
!
! Abstract:
!
!	This module builds the key comparison routine.
!	It also contains the routines for locking groups of
!	pages in the working set.
!
!
! Environment:
!
!        Starlet Operating System, User mode utility.
!
!
! Author:
!
!	Chuck Krapf		Creation Date:		2-Feb-80
!
! MODIFIED BY:
!
!	V02.04		PDG0004		Peter D Gilbert	8-Feb-1981
!		Bump CUR_PC for word relative addressing.
!	V02.03		JDN0003		Joe Neumeister	21-Sep-1981
!		Change SOR$GV_FLAGS from a bitvector [16] to a 
!    		    bitvector [32] to allow new switches, (/STATISTICS).
!	V02.02		JDN0002		Joe Neumeister	19-Jun-1981
!		Change addressing mode to (external = general) for module.
!	V02.01		JDN0001		Joe Neumeister	12-Feb-1981
!		Remove locking of working set if subroutine.
!		Declare ERROR symbols as external literals to allow
!		    new error messages to be outputted.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

library 'SYS$LIBRARY:STARLET.L32';


!
!
!
!
!
! External References.
!

external

    SOR$GB_KEY_SIZE: unsigned byte,				! Total key size.
    SOR$GL_KEY_COMP,						! Key comparison routine address.
    SOR$AB_KEY_TYPE: vector [,byte],				! Key types.
    SOR$AB_KEY_SIZE: vector [,byte],				! Size of key in bytes.
    SOR$AB_KEY_POS:  vector [,byte],				! Start position of key.
    SOR$AB_KEY_ORDR: vector [,byte],				! 0 if ascending, 2 if descending.
    SOR$GB_NUM_SEGS: byte,					! Number of keys segments. (Combined keys).
    SOR$GV_FLAGS : bitvector [32],				! Sort flags, (longword JDN).
    SOR$GW_FIX_SIZE : word,					! Size of VFC record fixed area
    SOR$GB_REC_NUM: byte unsigned;				! Position of record number if STABLE sort.

external literal
    SOR$GK_STABLE: unsigned (4),				! STABLE sort flag.
    SOR$GK_UTILITY: unsigned (4),				! Pointer to "Utility is running" flag
    SOR$_MISS_KEY,				! Declare ERROR symbols
    SOR$_WORK_DEV,				!  as external literals
    SOR$_NO_WRK,
    SOR$_VM_FAIL,
    SOR$_WS_FAIL,
    SOR$_SORT_ON,
    SOR$_BAD_KEY,
    SOR$_NUM_KEY,
    SOR$_BAD_LEN,
    SOR$_ONE_IN,
    SOR$_IND_OVR,
    SOR$_INCONSIS,
    SOR$_VAR_FIX,
    SOR$_BAD_TYPE,
    SOR$_LRL_MISS,
    SOR$_BAD_SPEC,
    SOR$_BAD_LRL,
    SOR$_BAD_FILE,
    SOR$_BAD_ADR,
    SOR$_MAP,
    SOR$_EXTEND,
    SOR$_KEY_LEN,
    SOR$_CLEAN_UP,
    SOR$_BAD_MERGE,
    SOR$_BAD_ROUTIN,
    SOR$_INP_FILES,
    SOR$_BAD_ORDER;

linkage
    JSBL = jsb;


external routine
    SOR$$DO_REI: JSBL,					! Routine to force an REI
    SOR$$CMPG,							! Compare Grand
    SOR$$CMPH;							! Compare Huge


forward routine
    EMIT_ARG: novalue,					! Emit operands
    EMIT_BRANCH: novalue,				! Emit relative branch.
    EMIT_RETURN_CODE: novalue,				! Emit code to return value in R0.
    EMIT_PUSHR: novalue,				! Emit PUSHR/POPR
    EMIT_TEST: novalue;					! Emit branch to proper test point.



!
! Define the instruction op codes.
!

literal
    CMPC3 = %X'29',
    CMPP3 = %X'35',
    CMPB  = %X'91',
    CMPW  = %X'B1',
    CMPL  = %X'D1',
    CMPF  = %X'51',
    CMPD  = %X'71',
    BRW   = %X'31',
    BEQL  = %X'13',
    BNEQ  = %X'12',
    BGTR  = %X'14',
    BLSS  = %X'19',
    BGTRU = %X'1A',
    BLSSU = %X'1F',
    TSTL  = %X'D5',
    PUSHAL= %X'DF',
    PUSHL = %X'DD',
    PUSHR = %X'BB',
    POPR  = %X'BA',
    RSB   = %X'05',
    CALLS = %X'FB',
    CLRL  = %X'D4',
    HALT  = %X'00',
    MOVL  = %X'D0',
    MNEGL = %X'CE';


!
! Define registers and addressing modes.
!

literal
    R0 = 0,
    R9 = 9,
    R10=10,

    REG_MODE	= %X'50',			! Register mode.
    REG_DEF_MODE= %X'60',			! Register deferred mode.
    BYTE_DISP_MODE = %X'A0',			! Byte displacement mode.
    WORD_DISP_MODE = %X'C0',			! Word displacement mode.
    DISP_MODE    = BYTE_DISP_MODE,		! Unknown displacement.
    IMM_MODE	= %X'8F',			! Immediate mode.
    WORD_REL_MODE = %X'CF',			! Word relative mode.
    LONG_REL_MODE = %X'EF',			! Longword relative mode.
    REL_MODE = LONG_REL_MODE;			! Undefined relative mode.

literal						! Key types.  Same as SOR$GK_XXX_KEY
						! except for PACK and USER.

    CHAR =  1,					! Character
    BINARY  =  2,				!
    PACK =  3,					! Packed
    USER = 4,					! User key comparison.
    UNS_BINARY  =  5,				! Unsigned binary.
    FLOAT  = 10,				! Floating point
    D_FLOAT = 11,				! Double precision
    G_FLOAT = 12,				! Grand floating
    H_FLOAT = 13;				! Huge floating

literal					! Parameters.
    KEY_SUB_SIZE = 300;				! Max size of key subroutine.

psect
    own = SOR$KEYCODE (write, execute, addressing_mode (general)),
    code = SOR$SORTINIT;


own
    CUR_PC,					! Current position to insert code.
    KEY_CODE: vector [KEY_SUB_SIZE, byte],	! Key subroutine.
    TST_ADR: vector [4];			! Storage for return value entry points.



macro				! Macros to define byte accesses.
    LOW_BYTE  = 0, 8%,		! (Field definitions)
    LOW_WORD  = 0, 16%;

macro				! Macro to output an op code.
    EMIT_OPCODE (A) =
	CUR_PC [0] = (A);
	CUR_PC = .CUR_PC + 1;
%;



psect
    own = SOR$SORTDATA (addressing_mode (general));


!
!
! Declarations for the routines that lock groups of pages in the
! working set.  Each group consists of one or more contiguous
! blocks of pages.  
!

literal
    NUM_GROUPS = 10,		! Number of groups allowed.
    NUM_BLOCKS = 25,		! Total number of blocks allowed.
    BLOCK_SIZE = 4;		! Number of longwords in the block descriptor.


own
    BLOCK_DESC : blockvector [NUM_BLOCKS, BLOCK_SIZE],
    GROUP_HEAD : blockvector [NUM_GROUPS, 2];


macro				! Entries to BLOCK_DESC.
    FORPTR   = 0, 0, 32, 0%,	! Forward link pointer.
    BACKPTR  = 1, 0, 32, 0%,	! Backward link pointer.
    START_ADR= 2, 0, 32, 0%,	! Addr of 1st page locked in this group
    END_ADR  = 3, 0, 32, 0%;	! Addr of last page locked in this block


builtin
    insque,
    remque;


%title 'SOR$$GEN_KEY'

global routine SOR$$GEN_KEY: novalue =

!++
!
! Functional Description:
!
!	Routine to emit code to do a key comparison.  First,
!	the code to return a value in R0 is emitted, then
!	comparison code for each key is emitted, finally,
!	the code to return 0 (or compare record numbers if
!	STABLE sort) is emitted.
!
!
! Implicit Outputs:
!
!	CUR_PC, COMPARE_CODE.
!
!
!--



    begin

	local
	    KEY_TYPE,				! Current key type
	    KEY_SIZE,				! Current key type
	    KEY_POS,				! Current key position
	    KEY_ORDR,				! Current key order.
	    ADR_PTR: vector [2],		! Argument for $LKWSET
	    GEN_TYPE;				! Generated key type.  Creates
						! separate types for binary
						! sizes 1,2,4 and 8.

	literal
	    BIN_OFFSET = H_FLOAT + 1,		! GEN_TYPE for BINARY
	    UNS_BIN_OFFSET = BIN_OFFSET + 8,	! GEN_TYPE for UNS_BINARY
	    BIN1 = BIN_OFFSET,			! BINARY, size=1
	    BIN2 = BIN1 + 1,			! BINARY, size=2
	    BIN4 = BIN1 + 3,			! BINARY, size=4
	    BIN8 = BIN1 + 7,			! BINARY, size=8
	    UNS_BIN1 = UNS_BIN_OFFSET,		! UNS_BINARY, size=1
	    UNS_BIN2 = UNS_BIN1 + 1,		! UNS_BINARY, size=2
	    UNS_BIN4 = UNS_BIN1 + 3,		! UNS_BINARY, size=4
	    UNS_BIN8 = UNS_BIN1 + 7;		! UNS_BINARY, size=8

	map
	    CUR_PC: ref vector [,byte];

	own
	    OP_TABLE: vector [UNS_BIN4 + 2]
		      initial (long (HALT, CMPC3, HALT, CMPP3, HALT, HALT,
				HALT, HALT, HALT, HALT, CMPF, CMPD,
				SOR$$CMPG, SOR$$CMPH, CMPB, CMPW,
				HALT, CMPL, HALT, HALT, HALT, HALT,
				CMPB, CMPW, HALT, CMPL));
 



	OP_TABLE [USER] = .SOR$GL_KEY_COMP;	! Save user key compare routine (if any).
	EMIT_RETURN_CODE();			! Emit code for returning 1 or -1
	SOR$GL_KEY_COMP = .CUR_PC;		! Save routine entry point.
	EMIT_PUSHR (PUSHR);			! Save registers.

	incr INDEX from 0 to .SOR$GB_NUM_SEGS - 1 do

	    begin
		KEY_TYPE = .SOR$AB_KEY_TYPE [.INDEX];  ! Get key parameters.
		KEY_POS  = .SOR$AB_KEY_POS  [.INDEX];
		KEY_SIZE = .SOR$AB_KEY_SIZE [.INDEX];
		KEY_ORDR = .SOR$AB_KEY_ORDR [.INDEX];


		!
		! Generate special key type to include binary key size.
		!
		GEN_TYPE = .KEY_TYPE;			! eql KEY_TYPE for non binary
	
		if .KEY_TYPE eql BINARY then

		    GEN_TYPE = BIN_OFFSET + .KEY_SIZE - 1	! Offset for BINARY
		  else

		    if .KEY_TYPE eql UNS_BINARY then

			GEN_TYPE = UNS_BIN_OFFSET + .KEY_SIZE - 1; ! Offset for UNS_BINARY.

		selectone .GEN_TYPE of

		    set

			[BIN8, UNS_BIN8]:			! Quadword

			    begin
				EMIT_OPCODE (CMPL);		! Emit CMPL d+4(R9),d+4(R10)
				EMIT_ARG (DISP_MODE, R9, .KEY_POS+4);
				EMIT_ARG (DISP_MODE, R10,.KEY_POS+4);
				EMIT_TEST (.KEY_TYPE, .KEY_ORDR);! Emit a BNEQ
				EMIT_OPCODE(CMPL);		! Compare the low order longword
				EMIT_ARG (DISP_MODE, R9, .KEY_POS); ! With CMPL d(R9),d(R10)
				EMIT_ARG (DISP_MODE, R10,.KEY_POS);
				KEY_TYPE = UNS_BINARY;		! Make sure 2nd test is unsigned.
				end;


			[G_FLOAT, H_FLOAT, USER]: 		! These require a CALLS

			    begin
				if .GEN_TYPE eql USER then

				    begin
					if .SOR$GW_FIX_SIZE nequ %x'FFFF' then
					    KEY_POS = .SOR$GB_KEY_SIZE + .SOR$GW_FIX_SIZE
					else
					    KEY_POS = .SOR$GB_KEY_SIZE; ! Skip over record number if user.
					end;

				EMIT_OPCODE(PUSHAL);		! Push the args
				EMIT_ARG (DISP_MODE, R10, .KEY_POS);
				EMIT_OPCODE(PUSHAL);
				EMIT_ARG (DISP_MODE, R9, .KEY_POS);
				EMIT_OPCODE (CALLS);		! Call the appropriate routine.
				EMIT_ARG (IMM_MODE, 2);		! 2 args
				EMIT_ARG (REL_MODE, .OP_TABLE [.KEY_TYPE]);  ! Address of comparison routine.
				EMIT_OPCODE (TSTL);		! Emit TSTL R0
				EMIT_ARG (REG_MODE, R0);
				end;



			[otherwise]:				! Everything else.
			    begin
				EMIT_OPCODE (.OP_TABLE [.GEN_TYPE]);  ! Emit proper op code.
				if .GEN_TYPE eql CHAR or .GEN_TYPE eql PACK then
				    EMIT_ARG (IMM_MODE, .KEY_SIZE);	! Key size for CMPC3 or CMPP3
				EMIT_ARG (BYTE_DISP_MODE, R9, .KEY_POS);	! 1st key
				EMIT_ARG (BYTE_DISP_MODE, R10,.KEY_POS);	! 2nd arg.
				end;

			tes;

		
		EMIT_TEST (.KEY_TYPE, .KEY_ORDR);		! Output a BNEQ
		end;



	!
	! Now we have looped through all the keys.  Either return a 0
	! or check record number (for STABLE sort).
	!

	if .SOR$GV_FLAGS [SOR$GK_STABLE] then

	    begin
		EMIT_OPCODE (CMPL);			! CMPL the records numbers
		EMIT_ARG (BYTE_DISP_MODE, R9, .SOR$GB_REC_NUM);
		EMIT_ARG (BYTE_DISP_MODE, R10,.SOR$GB_REC_NUM);
		EMIT_TEST (UNS_BINARY, 0);		! Emit unsigned, ascending test.
		end;

	EMIT_OPCODE (CLRL);				! Here if all keys are equal.
	EMIT_ARG (REG_MODE, R0);			! Emit CLRL R0
	EMIT_PUSHR  (POPR);				! Restore registers.
	EMIT_OPCODE (RSB);

	if .SOR$GV_FLAGS [SOR$GK_UTILITY] then		! If utility, lock code into WS.

		begin
			ADR_PTR [0] = KEY_CODE;				! Lock the key compare routine in working set.
			ADR_PTR [1] = .CUR_PC;				! End of routine.
			$LKWSET (INADR = ADR_PTR);			! Lock it!
			end;

	SOR$$DO_REI ();					! Force an REI instruction to clear the instruction lookahead logic.
	end;

%title 'EMIT_RETURN_CODE'

routine EMIT_RETURN_CODE: novalue =

!++
!
!
! Functional Description:
!
!	Routine to emit the code to generate the returned value
!	from the key compare routine.  The code emitted by this
!	routine is:
!
!	1$:	BLSS	2$	;Here to return 1 if LSS, -1 if GTR.
!		MOVL	#1,R0	;Return 1
!		RSB		;And return.  No registers are used.
!
!	2$:	MNEGL	#1,R0	;Here to return -1.
!		RSB
!
!	3$:	BGTR	2$	;Here if descending, signed key.
!		MOVL	#1,R0	;Return 1 if LSS
!		RSB
!
!	4$:	BLSSU	2$	;Here if ascending, unsigned key.
!		MOVL	#1,R0	;Return 1 if GTRU
!		RSB
!
!	5$:	BGTRU	2$	;Here if descending, unsigned key.
!		MOVL	#1,R0	;Return 1 if LSSU
!		RSB
!
!
!
!	The code emitted for each key is: 
!
!	"Key comparison instruction"
!	BNEQ	<either 1$, 3$, 4$, or 5$, depending on key type>
!
!
!--

    begin

	map
	    CUR_PC: ref vector [,byte];


	local
	    NEG_ADR;					! Address of 2$

	CUR_PC = KEY_CODE;				! Point to key routine code.

	TST_ADR [0] = .CUR_PC;				! Save address of 1$
	EMIT_BRANCH (BLSS, .CUR_PC);			! Emit branch to 2$
	EMIT_OPCODE (MOVL);				! Emit MOVL #1,R0
	EMIT_ARG    (IMM_MODE, 1);
	EMIT_ARG    (REG_MODE, R0);
	EMIT_PUSHR  (POPR);				! Restore registers.
	EMIT_OPCODE (RSB);				! Emit return.

	(.TST_ADR [0])<8, 8> = .CUR_PC - .TST_ADR[0] - 2;	! Do forward fixup. This is the only one we have to do.

	NEG_ADR = .CUR_PC;				! Save address of 2$

	EMIT_OPCODE (MNEGL);				! Emit MNEGL #1,R0
	EMIT_ARG (IMM_MODE, 1);
	EMIT_ARG    (REG_MODE, R0);
	EMIT_PUSHR  (POPR);				! Restore registers.
	EMIT_OPCODE (RSB);

	TST_ADR [1] = .CUR_PC;				! Save address of 3$
	EMIT_BRANCH (BGTR, .NEG_ADR);			! Emit BGTR 2$
	EMIT_OPCODE (MOVL);				! Emit MOVL #1,R0
	EMIT_ARG    (IMM_MODE, 1);
	EMIT_ARG    (REG_MODE, R0);
	EMIT_PUSHR  (POPR);				! Restore registers.
	EMIT_OPCODE (RSB);

	TST_ADR [2] = .CUR_PC;				! Save 3$
	EMIT_BRANCH (BLSSU, .NEG_ADR);			! Emit BLSSU 2$
	EMIT_OPCODE (MOVL);				! Emit MOVL #1,R0
	EMIT_ARG    (IMM_MODE, 1);
	EMIT_ARG    (REG_MODE, R0);
	EMIT_PUSHR  (POPR);				! Restore registers.
	EMIT_OPCODE (RSB);

	TST_ADR [3] = .CUR_PC;				! Save 4$
	EMIT_BRANCH (BGTRU, .NEG_ADR);			! Emit BGTRU $2
	EMIT_OPCODE (MOVL);				! Emit MOVL #1,R0
	EMIT_ARG    (IMM_MODE, 1);
	EMIT_ARG    (REG_MODE, R0);
	EMIT_PUSHR  (POPR);				! Restore registers.
	EMIT_OPCODE (RSB);
	return;						! Just return.
	end;

%title 'EMIT_TEST'

routine EMIT_TEST (KEY_TYPE, KEY_ORDER): novalue =

!++
!
! Functional Description:
!
!	This routine emits a test for equality after the
!	compare instruction is emitted.  The instruction
!	is	BNEQ	n$
!	where n depends on whether the key is signed,
!	unsigned, ascending or descending.
!
!
! Formal Parameters:
!
!	KEY_TYPE   (value)	key type from CHAR to H_FLOAT
!
!	KEY_ORDER  (value)	key order; 0 for ascending, 1 for descending.
!
!
!
!--


    begin

	local
	    TEMP;


	!
	! First decide where to branch if the test is not equal.
	!

	if .KEY_TYPE eql UNS_BINARY or .KEY_TYPE eql CHAR then

	    TEMP = 2			! Unsigned comparison

	  else

	    TEMP = 0;			! Signed.

	if .KEY_ORDER gtru 0 then TEMP = .TEMP + 1;    ! Check for descending.

	EMIT_BRANCH (BNEQ, .TST_ADR [.TEMP]);		! Emit the branch.

	return;
	end;

%title 'EMIT_BRANCH'

routine EMIT_BRANCH (OPCODE, ADDRESS): novalue =

!++
!
!
! Functional Description:
!
!	This routine emits a branch instruction.  If branch
!	address can't be expressed in 1 byte, it generates
!	a branch of the opposite sense over a BRW instruction.
!	For example, the call	EMIT_BRANCH (BLSS, ADDRESS)
!	will emit	BLSS	ADDRESS	if address is in range.
!
!	otherwise, it will emit:
!
!			BGEQ	.+5	;Skip next instruction if GEQ
!			BRW	ADDRESS
!
!
! Formal Parameters:
!
!	OPCODE    (value)	the branch opcode desired.
!
!	ADDRESS	  (value)	where to branch if the condition is true.
!				This is an absolute address.
!
!--

    begin

	local
	    RANGE;			! Number of bytes to branch.

	map
	    CUR_PC: ref vector [,byte];



	RANGE = .ADDRESS - .CUR_PC - 2;	! Calculate the jump range.

	if .RANGE geq -128 and .RANGE leq 127	! Is this within byte range?
	then

	    begin
		EMIT_OPCODE (.OPCODE);		! Emit the proper opcode.
		CUR_PC [0] = .RANGE;		! And the new address
		CUR_PC = .CUR_PC + 1;			! Update the PC
		end

	else

	    begin
		EMIT_OPCODE (.OPCODE xor 1);	! Emit branch for the complement condition.
		CUR_PC [0] = 3;			! Skip over the next instruction.
		CUR_PC [1] = BRW;		! Next is an absolute branch.
		RANGE = .RANGE - 3;		! Range is a little different now because of the BRW.
		(CUR_PC [2])<LOW_WORD> = (.RANGE);! WORD of offset.
		CUR_PC = .CUR_PC + 4;		! Update PC
		end;


	return;
	end;

%title 'EMIT_PUSHR'

routine EMIT_PUSHR (OPCODE): novalue =

!++
!
!
! Functional Description:
!
!	Routine to emit a PUSHR or a POPR instruction.  Also
!	emits the mask to store R2 and R3.  These registers
!	are destroyed by the CMPC3 and CMPP3 instructions.
!
!
! Formal Parameters:
!
!	OPCODE  (value)	contains the opcode (PUSHR/POPR) to
!			be used.
!
!
!--



    begin

	map
	    CUR_PC: ref vector [,byte];


	EMIT_OPCODE (.OPCODE);			! Output the opcode.
	EMIT_ARG (IMM_MODE, %X'C');		! Mask to save/restore R2 and R3
	return;
	end;

%title 'EMIT_ARG'

routine EMIT_ARG (ARG_TYPE, REG, VALUE) : novalue =

!++
!
!
! Functional Description:
!
!	Routine to output an operand for an instruction.
!	Not all operand types are supported.  Just enough
!	to implement the key comparison routine.
!
!
! Formal Paramegers:
!
!	ARG_TYPE (value)	operand type.
!
!	REG      (value)	register number except for arg types
!				that don't need a register. (Like
!				immediate.)
!
!	VALUE    (value)	extra arg if needed.
!
!
!
! Calling sequence:
!
!
!	ARG_TYPE	REG		VALUE		COMMENTS
!	--------	---		-----		--------
!	IMM_MODE	number				Uses literal mode if possible
!	DISP_MODE	Register	Displacement	Uses register deferred if displacement eql 0
!							else uses byte or word displacement.
!	REL_MODE	Address				Uses word or long displacement relative.
!	REG_MODE	Register			Addresses that register.
!
!
!--

    begin

	literal
	    MAX_LIT = 63;				! Max constant for literal mode.



	local
	    RANGE;


	map
	    CUR_PC: ref vector [,byte];


	selectone .ARG_TYPE of

	    set

		[IMM_MODE]:				! Immediate.

		    if .REG lssu MAX_LIT then

			CUR_PC [0] = .REG		! Use literal mode.

		      else

			begin
			    CUR_PC [0] = IMM_MODE;	! Set up for immediate.
			    (CUR_PC [1])<LOW_WORD> = (.REG);! And high byte. Only word immediate supported.
			    CUR_PC = .CUR_PC + 3;	! Update PC
			    return;
			    end;



		[DISP_MODE]:				! Displacement.

		    selectone .VALUE of

			set

			[0]:

			    CUR_PC [0] = REG_DEF_MODE + .REG;	! Use register deferred mode.

			[-128 to 127]:			! Byte displacement.
			    begin
				CUR_PC [0] = BYTE_DISP_MODE + .REG;
				CUR_PC [1] = (.VALUE)<LOW_BYTE>;
				CUR_PC = .CUR_PC + 2;	! Update PC
				return;
				end;

			[otherwise]:			!Use word displacement.

			    begin
				CUR_PC [0] = WORD_DISP_MODE + .REG;
				(CUR_PC [1])<LOW_WORD> = (.VALUE);
				CUR_PC = .CUR_PC + 3;
				return;
				end;

			tes;


		[REL_MODE]:				! Relative.

		    begin
			RANGE = .REG - .CUR_PC - 3;	! Calculate relative offset (word mode).
			if .RANGE geq -32768 and .RANGE leq 32767 then

			    begin			! Can fit in a word.
				CUR_PC [0] = WORD_REL_MODE;	! Addressing mode.
				(CUR_PC [1])<LOW_WORD> = (.RANGE);
				CUR_PC = .CUR_PC + 3;		! Update PC
				return;
				end

			  else

			    begin			! Must use longword displacement.
				CUR_PC [0] = LONG_REL_MODE;
				(.CUR_PC + 1) = .RANGE - 2;	! Longword offset.
				CUR_PC = .CUR_PC + 5;	! Update PC
				return;
				end;
			end;



		[otherwise]:				! Register mode.

		    CUR_PC [0] = .ARG_TYPE + .REG;

		tes;


	CUR_PC = .CUR_PC + 1;				! Update PC

	return;
	end;

%title 'SOR$$INIT_GROUP'

global routine SOR$$INIT_GROUP: novalue =


!++
!
!
! Functional description:
!
!	Routine to initialize the group lists.  Group 0 is the
!	free block list and is initialized to contain all the
!	block descriptors.  All the other groups are initialized
!	to be empty.
!
!
!--


    begin

	local
	    CURRENT_BLOCK;		! Current block descriptor address.

	map
	    CURRENT_BLOCK: ref block;



	!
	! Loop through and initialize all the group headers to be empty.
	!

	incr INDEX from 0 to NUM_GROUPS - 1 do

	    begin
		GROUP_HEAD [.INDEX, FORPTR] = GROUP_HEAD [.INDEX, FORPTR];	! Forward link points to header.
		GROUP_HEAD [.INDEX, BACKPTR]= GROUP_HEAD [.INDEX, FORPTR];	! So does backward link.
		end;


	!
	! Now put all the block descriptors in the free list.
	!

	incr INDEX from 0 to NUM_BLOCKS - 1 do

	    insque (BLOCK_DESC [.INDEX, FORPTR], GROUP_HEAD [0, FORPTR]);

	end;

%title 'SOR$$LOCK_PAGES'

global routine SOR$$LOCK_PAGES (FIRST, LAST, GROUP): novalue =


!++
!
!
! Functional Description:
!
!	This routine locks a block of contiguous pages and
!	assigns those pages to the specified group.
!
!
!
! Formal Parameters:
!
!	FIRST.rl.v	Address in the first page to be locked.
!
!	LAST.rl.v	Address in the last page to be locked.
!
!	GROUP.rl.v	Group to assign these pages to.
!
!
!
!--

    begin

	local
	    CUR_BLOCK;

	map
	    CUR_BLOCK: ref block;



	!
	! First get a free block descriptor.

	if remque (.GROUP_HEAD [0, FORPTR], CUR_BLOCK) then return;		! Lose if no free block descriptor.

	CUR_BLOCK [START_ADR] = .FIRST;			! Save addresses
	CUR_BLOCK [END_ADR]   = .LAST;

	$LKWSET (INADR = CUR_BLOCK [START_ADR]);	! Lock the pages in the working set.

	insque (CUR_BLOCK [FORPTR], GROUP_HEAD [.GROUP, FORPTR]);  ! Insert descriptor in the proper queue.

	return;
	end;

%title 'SOR$$UNLOCK_GRP'

global routine SOR$$UNLOCK_GRP (GROUP): novalue =


!++
!
!
! Functional Description:
!
!	This routine unlocks all the blocks of pages that have been
!	assigned to the specified group.
!
!
! Formal Parameters:
!
!	GROUP.rl.v	the group number to be unlocked.
!
!
!
!--



    begin

	local
	    CUR_BLOCK;

	map
	    CUR_BLOCK: ref block;


	if .GROUP_HEAD [.GROUP, FORPTR] eql 0 then return;	! Return if group head not initialized.

	while 1 do			! For all blocks in the group.

	    begin

		if remque (.GROUP_HEAD [.GROUP, FORPTR], CUR_BLOCK) then return;

		$ULWSET (INADR = CUR_BLOCK [START_ADR]);

		insque (CUR_BLOCK [FORPTR], GROUP_HEAD [0, FORPTR]);		! Put back on the free list.

		end;


	end;

end
eludom
