!-*-BLISS-*-
!<BLF/NOERROR>
!<BLF/WIDTH:116>
!<BLF/REMARK:8>
!<BLF/NOPLIT>
!<BLF/MACRO>
!<BLF/LOWERCASE_KEY>
!<BLF/UPPERCASE_USER>
module SOR$KEY_ROUTINE (language (bliss32) ,
		list (assembly) ,
		addressing_mode (external = general) ,
		ident = 'V03-001'			! PDG001
		) =
begin
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:
!
!        SORT
!
! Abstract:
!
!        This module has the routines which build and compare the the different
!        key data types, plus the condition handler for the sort.
!
!
! Environment:
!
!        Starlet Operating System, User mode utility.
!
!
! Author:
!
!	Ellen R Simich,		Creation Date:		1-Sep-77
!
!
! Modified by:
!
!	V3.001		PDG0001		PDG		30-Mar-1982
!		Check for parameters present in call to SOR$$ERROR.
!
!	V02.06		PDG0006		PDG		8-Feb-1982
!		Clean up usage of SHR$ errors.
!	V02.05		PDG0005		Peter D Gilbert	04-Jan-1982
!		Move SOR$$ERROR to KEYSUB (share between sort32 and merge).
!	V02.04		PDG0004		Peter D Gilbert	11-Dec-1981
!		Fix returned address/status problem.
!		Clean up CONVERT_TABLE definition.
!		Remove 'Null expression' errors in SOR$$COND_HAND.
!	V02.03		JDN0003		Joe Neumeister	21-Sep-1981
!		Change SOR$GV_FLAGS from a bitvector [16] to a 
!    		    bitvector [32] to allow new switches, (/STATISTICS).
!	V02.02		JDN0002		Joe Neumeister	19-Jun-1981
!		Change addressing mode to (external = general) for module.
!	V02.01		JDN0001		Joe Neumeister	12-Feb-1981
!		Declare ERROR symbols as external literals to allow
!		    new error messages to be outputted.
!--

!
! TABLE OF CONTENTS:
!
forward routine
    SOR$$ERROR : novalue;					! Error handler

!
! INCLUDE FILES:
!

library 'SYS$LIBRARY:STARLET.L32';


!
! MACROS:
!

macro
    KEY_TYPE =
	0, 0, 8, 0 %,						! Fields for key buffer
    KEY_ORDER =
	0, 8, 8, 0 %,
    KEY_POS =
	1, 0, 16, 0 %,
    KEY_SIZE =
	2, 0, 16, 0 %;

!
! EQUATED SYMBOLS:
!

psect
    plit = SOR$SORTDATA ( addressing_mode (general), write),
    global = SOR$SORTDATA ( addressing_mode (general)),
    own = SOR$SORTDATA ( addressing_mode (general));

linkage
    JSBL = jsb;

global literal
! Key data types
    SOR$GK_CHAR_KEY =  1,
    SOR$GK_BIN_KEY  =  2,
    SOR$GK_ZONE_KEY =  3,
    SOR$GK_PACK_KEY =  4,
    SOR$GK_USB_KEY  =  5,				! Unsigned binary.
    SOR$GK_DLO_KEY  =  6,
    SOR$GK_DLS_KEY  =  7,
    SOR$GK_DTO_KEY  =  8,
    SOR$GK_DTS_KEY  =  9,
    SOR$GK_FLT_KEY  = 10,
    SOR$GK_FLTD_KEY = 11,
    SOR$GK_FLTG_KEY = 12,
    SOR$GK_FLTH_KEY = 13,

    SOR$GK_NUM_KEYS = 10;               ! Maximum number of sort keys allowed

!
! The facility code for sort is 28 in the high word of the error code,
! and all the errors are severe requiring a 4 in the low 3 bits.
! those messages which are sort specific also have bit 15 set to a 1.
!

literal
    SORT_ERROR = 28,					! Sort facility error code.
    MAX_NUM_KEYS = 10,					! Maximum number of keys.
    SUCCESS = 1;
MACRO
    DEFSHR_[MSG,SEV] =
	%NAME('SOR$_',MSG) =
		%NAME('SHR$_',MSG) +
		%NAME('STS$K_',SEV) + SORT_ERROR ^ 16 %;
LITERAL
    DEFSHR_(
	BADBYTE,  SEVERE,
	BADWORD,  SEVERE,
	BADLONG,  SEVERE,
	BADFIELD, SEVERE,
	OPENOUT,  SEVERE,
	OPENIN,   SEVERE,
	READERR,  SEVERE,
	WRITEERR, SEVERE,
	CLOSEIN,  WARNING,
	CLOSEOUT, WARNING);

!
! OWN STORAGE:
!

global
    SOR$AW_KEY_BUF : blockvector [10, 3, word],			! Key definition buffer
    SOR$AB_KEY_TYPE : vector [MAX_NUM_KEYS, byte],		! Key types
    SOR$AB_KEY_SIZE : vector [MAX_NUM_KEYS, byte],		! Key sizes
    SOR$AB_KEY_POS  : vector [MAX_NUM_KEYS, byte],		! Key positions.
    SOR$AB_KEY_ORDR : vector [MAX_NUM_KEYS, byte],		! Key orders.
    SOR$GB_NUM_KEYS : byte initial (0),				! Number of keys defined
    SOR$GB_NUM_SEGS : byte initial (0),				! Number of key segments. (Combined keys)
    SOR$GB_REC_NUM : byte initial (0),				! Position of record number in key field. (Stable sort)
    SOR$GL_REC_CNT : initial (0),				! Count of records read. (Stable sort).
    SOR$GB_KEY_SIZE : byte initial (0);				! Total key size

own
    REPEAT : byte initial (0);					! Repeat count for invalid key data error

!
! EXTERNAL REFERENCES:
!

external routine
    LIB$SIG_TO_RET : addressing_mode (general),
    SOR$$SORT_GET : weak,					! Read record
    SOR$$GEN_KEY : novalue,					! Key comparison routine generator.
    LIB$SIGNAL : addressing_mode (general),
    LIB$STOP : addressing_mode (general),			! Signal and exit
    SOR$$CLOSE_FILE;						! Close input and output file

external
    SOR$GT_INP_NAME : vector [ch$allocation (NAM$C_MAXRSS)],
    LIB$AB_ASC_EBC : addressing_mode (general),			! ASCII to EBCDIC conversion table.
    SOR$AL_STATS : vector [16] weak,				! Statistics buffer
    SOR$GL_REC_SIZE,						! Tree entry size
    SOR$GL_IN_BUF,						! Input buffer address
    SOR$GB_SOR_TYP : byte,
    SOR$GV_FLAGS : bitvector [32];				! Sorting flags, (longword --JDN)

external literal
    SOR$GK_INDEX : unsigned (3),
    SOR$GK_RECORD : unsigned (2),
    SOR$GK_FILE_IO : unsigned (3),
    SOR$GK_MERGE2 : unsigned (3),				! Merge in progress.
    SOR$GK_USER_CMP : unsigned (4),				! User supplied key comparison routine.
    SOR$GK_STABLE : unsigned (5),				! Stable sort requested.
    SOR$GK_EBCDIC : unsigned (5),				! EBCDIC collating sequence for character keys.
    SOR$GK_UTILITY : unsigned (3),				! Utility flag
    SOR$_MISS_KEY,				! Declare ERROR symbols
    SOR$_WORK_DEV,				!  as external literals
    SOR$_NO_WRK,
    SOR$_VM_FAIL,
    SOR$_WS_FAIL,
    SOR$_SORT_ON,
    SOR$_BAD_KEY,
    SOR$_NUM_KEY,
    SOR$_BAD_LEN,
    SOR$_ONE_IN,
    SOR$_IND_OVR,
    SOR$_INCONSIS,
    SOR$_VAR_FIX,
    SOR$_BAD_TYPE,
    SOR$_LRL_MISS,
    SOR$_BAD_SPEC,
    SOR$_BAD_LRL,
    SOR$_BAD_FILE,
    SOR$_BAD_ADR,
    SOR$_MAP,
    SOR$_EXTEND,
    SOR$_KEY_LEN,
    SOR$_CLEAN_UP,
    SOR$_BAD_MERGE,
    SOR$_BAD_ROUTIN,
    SOR$_INP_FILES,
    SOR$_BAD_ORDER;


global literal
    SOR$GK_NODE_HED = 16,					! Size of tree node header
    SOR$GK_LEN_SIZE = 2;					! Size of record length field.


macro
    RECORD_SIZE = SOR$GK_NODE_HED, 0, SOR$GK_LEN_SIZE * 8, 0%;		! Pointer to record size.

psect
    code = SOR$SORTINIT;


%title 'SOR$$INIT_KEYS'

global routine SOR$$INIT_KEYS (KEY_PTR) : weak =

!++
! Functional Description:
!
!        This routine fills in the key buffer and determines which comparison
!        routine to use.
!
!
! Formal Parameters:
!
!        The users key buffer pointer.
!
!
! Implicit Inputs:
!
!	None.
!
! Implicit Outputs:
!
!        None.
!
! Routine Value:
!
!
! Completion Codes:
!
!        An error code if invalid parameters or 1 if success.
!
!
! Side Effects:
!
!        None.
!
!--

    begin

    own
	KEY_LEN : byte initial (0);

    label
	PARMSETUP;

    literal
	MAX_CHAR = 255,						! Maximum character key
	MAX_DEC = 31,						! Maximum decimal key
	BIN1 = 1,						! Legal binary key sizes
	BIN2 = 2,
	BIN4 = 4,
	BIN8 = 8,
	FLT_SIZE = 4,						! Sizes for floating point keys
	FLTD_SIZE = 8,
	FLTG_SIZE = 8,
	FLTH_SIZE = 16,
	REC_NUM_SIZE = 4;					! Number of bytes reserved for record number.

    local
	SAVE_TYPE ;

    bind
	NUM_KEY = .KEY_PTR : word,
	KEY_BUF = .KEY_PTR + 2 : blockvector [, 4, word];


    !
    ! If this is the subroutine package copy the key information from the
    ! users buffer to sorts buffer.
    !

    if not .SOR$GV_FLAGS [SOR$GK_UTILITY]
    then
	begin

	if .NUM_KEY gtr SOR$GK_NUM_KEYS then return SOR$_NUM_KEY;	! Too many keys

	SOR$GB_NUM_KEYS = .NUM_KEY;				! Get number of keys
	KEY_LEN = 0;
	REPEAT = 0;

	incr SEG from 0 to .SOR$GB_NUM_KEYS - 1 do
	    begin

	    if .KEY_BUF [.SEG, 0, 0, 16, 0] gtru SOR$GK_FLTH_KEY then return SOR$_BAD_KEY;

	    if .KEY_BUF [.SEG, 1, 0, 16, 0] gtru 1 then return SOR$_BAD_KEY;

	    SOR$AW_KEY_BUF [.SEG, KEY_TYPE] = .KEY_BUF [.SEG, 0, 0, 16, 0];
	    SOR$AW_KEY_BUF [.SEG, KEY_ORDER] = .KEY_BUF [.SEG, 1, 0, 16, 0];
	    SOR$AW_KEY_BUF [.SEG, KEY_POS] = .KEY_BUF [.SEG, 2, 0, 16, 0];
	    SOR$AW_KEY_BUF [.SEG, KEY_SIZE] = .KEY_BUF [.SEG, 3, 0, 16, 0];
	    end;

	end;

    !
    ! Now scan the definition buffer, combining adjacent character fields
    ! in the key and setting up the comparison types. There are eight
    ! comparison types: character, binary (2's complement) packed-decimal,
    ! floating, double, g_floating, f_floating.  All other types
    ! are converted into packed decimal.
    !
    ! Also compute the total key field size.
    !
    SAVE_TYPE = -1;

    incr SEG from 0 to .SOR$GB_NUM_KEYS - 1 do
	begin
PARMSETUP :
	begin

	if .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_CHAR_KEY	! Key is type character
	then
	    begin

	    if .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] gtru MAX_CHAR	! Maximum character key size is 255
	    then

		if .SOR$GV_FLAGS [SOR$GK_UTILITY]
		then
		    SOR$$ERROR (SOR$_KEY_LEN, .SEG + 1,
			.SOR$AW_KEY_BUF [.SEG,
			    KEY_SIZE])
		else
		    return SOR$_KEY_LEN;


	    if .SAVE_TYPE neq -1 then
		if  .SOR$AB_KEY_TYPE [.SAVE_TYPE] eql SOR$GK_CHAR_KEY
		then

		if sign (.SOR$AB_KEY_ORDR [.SAVE_TYPE]) eql .SOR$AW_KEY_BUF [.SEG, KEY_ORDER]
		then
		    begin
		    SOR$AB_KEY_SIZE [.SAVE_TYPE] = .SOR$AB_KEY_SIZE [.SAVE_TYPE] + .SOR$AW_KEY_BUF [.SEG, KEY_SIZE];
		    leave PARMSETUP;
		    end;

	    end
	else

	    if .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_BIN_KEY or	! Key is type binary
		.SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_USB_KEY
	    then
		begin

		if .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq BIN8 and
		    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq BIN4 and 	! The only valid sizes are lengths 8, 4,
		    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq BIN2 and 	!   length 2, and
		    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq BIN1	        !   length 1.
		then

		    if .SOR$GV_FLAGS [SOR$GK_UTILITY]
		    then
			SOR$$ERROR (SOR$_KEY_LEN, .SEG + 1,
			    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE])
		    else
			return SOR$_KEY_LEN;

		end
	    else
                begin

                if ( not .SOR$GV_FLAGS [SOR$GK_FILE_IO] and                     ! If we are doing a file sort,
                     .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] neq SOR$GK_PACK_KEY and 	! then key must be packed.
		     .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] lss SOR$GK_FLT_KEY) or    ! Or floating.
                     .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] gtr SOR$GK_FLTH_KEY or 	! In all types of sorting,
                     .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] lss SOR$GK_ZONE_KEY	!   the key-type must be in range.
                then

                    if .SOR$GV_FLAGS [SOR$GK_UTILITY] then SOR$$ERROR (SOR$_BAD_KEY) else return SOR$_BAD_KEY;

		if (.SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_FLT_KEY and     ! Key is type floating-point then
                    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq FLT_SIZE) or           !   length must be 4.
                   (.SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_FLTD_KEY and 	! Key is type double then
		    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq FLTD_SIZE) or          !   length must be 8.
                   (.SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_FLTG_KEY and 	! Key is type G_floating then
		    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq FLTG_SIZE) or          !   length must be 8.
                   (.SOR$AW_KEY_BUF [.SEG, KEY_TYPE] eql SOR$GK_FLTH_KEY and 	! Key is type H_floating then
		    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] neq FLTH_SIZE)             !    length must be 16.
		then

		    if .SOR$GV_FLAGS [SOR$GK_UTILITY]
		    then
			SOR$$ERROR (SOR$_KEY_LEN, .SEG + 1,
			    .SOR$AW_KEY_BUF [.SEG, KEY_SIZE])
		    else
			return SOR$_KEY_LEN;

		    if .SOR$AW_KEY_BUF [.SEG, KEY_SIZE] gtru MAX_DEC
		    then

			if .SOR$GV_FLAGS [SOR$GK_UTILITY]
			then
			    SOR$$ERROR (SOR$_KEY_LEN, .SEG + 1,
				.SOR$AW_KEY_BUF [.SEG, KEY_SIZE])
			else
			    return SOR$_KEY_LEN;

		    end;

	SAVE_TYPE = .SAVE_TYPE + 1;				! New type
	SOR$AB_KEY_SIZE [.SAVE_TYPE] = .SOR$AW_KEY_BUF [.SEG, KEY_SIZE];
	!
	! Calculate the start position for this key = start pos for last key
	! + last key length.  KEY_LEN may be incorrect if the last key was
	! character and keys were combined, so use SEG_SIZE in that case.
	!

	if .SAVE_TYPE neq 0
	then
	    begin
		if .SOR$AB_KEY_TYPE [.SAVE_TYPE - 1] eql SOR$GK_CHAR_KEY then
		    KEY_LEN = .SOR$AB_KEY_SIZE [.SAVE_TYPE - 1];
		SOR$AB_KEY_POS [.SAVE_TYPE] = .SOR$AB_KEY_POS [.SAVE_TYPE - 1] + .KEY_LEN;
		end
	else
	    SOR$AB_KEY_POS [.SAVE_TYPE] = 0;

	if .SOR$AW_KEY_BUF [.SEG, KEY_ORDER] then SOR$AB_KEY_ORDR [.SAVE_TYPE] = 2
	    else SOR$AB_KEY_ORDR [.SAVE_TYPE] = 0;

	end;

	case .SOR$AW_KEY_BUF [.SEG, KEY_TYPE] from SOR$GK_CHAR_KEY to SOR$GK_FLTH_KEY of
	    set

	    [SOR$GK_PACK_KEY] :
		begin
		KEY_LEN = (.SOR$AB_KEY_SIZE [.SAVE_TYPE]/2) + 1;
		SOR$AB_KEY_TYPE [.SAVE_TYPE] = SOR$GK_ZONE_KEY;
		end;

	    [SOR$GK_DTS_KEY, SOR$GK_DLS_KEY] :
		begin
		KEY_LEN = .SOR$AB_KEY_SIZE [.SAVE_TYPE] + 1;
		SOR$AB_KEY_TYPE [.SAVE_TYPE] = SOR$GK_ZONE_KEY;
		end;

	    [SOR$GK_DTO_KEY, SOR$GK_DLO_KEY, SOR$GK_ZONE_KEY] :
		begin
		KEY_LEN = .SOR$AB_KEY_SIZE [.SAVE_TYPE];
		SOR$AB_KEY_TYPE [.SAVE_TYPE] = SOR$GK_ZONE_KEY;
		end;

	    [SOR$GK_FLT_KEY, SOR$GK_FLTD_KEY, SOR$GK_FLTG_KEY, SOR$GK_FLTH_KEY,
	     SOR$GK_BIN_KEY, SOR$GK_USB_KEY, SOR$GK_CHAR_KEY] :
		begin
		KEY_LEN = .SOR$AW_KEY_BUF [.SEG, KEY_SIZE];
		SOR$AB_KEY_TYPE [.SAVE_TYPE] = .SOR$AW_KEY_BUF [.SEG, KEY_TYPE];
		end;

	    tes;

	if .SOR$GB_KEY_SIZE + .KEY_LEN gtr MAX_CHAR
	then
	    begin

	    if .SOR$GV_FLAGS [SOR$GK_UTILITY] then SOR$$ERROR (SOR$_KEY_LEN, .SEG + 1, .KEY_LEN + .SOR$GB_KEY_SIZE)

	    ;
	    return SOR$_KEY_LEN;
	    end
	else
	    SOR$GB_KEY_SIZE = .SOR$GB_KEY_SIZE + .KEY_LEN;

	end;

    if .SOR$GV_FLAGS [SOR$GK_STABLE] then

	begin
	    if .SOR$GB_KEY_SIZE + REC_NUM_SIZE gtr MAX_CHAR then

		begin
		    if .SOR$GV_FLAGS [SOR$GK_UTILITY] then SOR$$ERROR (SOR$_KEY_LEN, .SOR$GB_NUM_KEYS, .SOR$GB_KEY_SIZE);
		    return SOR$_KEY_LEN;
		    end;

	    SOR$GB_REC_NUM  = .SOR$GB_KEY_SIZE;			! Position for record number.
	    SOR$GB_KEY_SIZE = .SOR$GB_KEY_SIZE + REC_NUM_SIZE;
	    end;

    SOR$GB_NUM_SEGS = .SAVE_TYPE + 1;	! Get actual number of keys.
    SOR$$GEN_KEY ();			! Generate the key compare routine.

    return SUCCESS;
    end;


psect
    code = SOR$SORTALG;


%title 'SOR$$BUILD_KEY'

global routine SOR$$BUILD_KEY (DESC_ADR, TREE_ADR) : =

!++
! Functional Description:
!
!        This routine gets a record from the input file if doing file
!        I/O and extracts the key prefixing it on to the record. It
!        converts all decimal key types into packed decimal. It then
!        places the record in the sort tree.
!
!
! FORMAL PARAMETERS:
!
!        The record descriptor if not file I/O and the address in the
!        tree to place the record in.
!
!
! Implicit Inputs:
!
!        The key definition and comparison buffers.
!
!
! Implicit Outputs:
!
!        None.
!
!
! Routine Value:
!
!
! Completion Codes:
!
!        1 for success, or an error code.
!
!
! Side Effects:
!
!        None.
!
!--

    begin

    builtin
	CVTTP,
	CVTSP,
	MOVP;

    macro
	LEN =	0, 0, 16, 0 %,
	ADR =	4, 0, 32, 0 %,
	RFA =	8, 0, 32, 0 %;

    !
    ! Conversion table for CVTTP.
    ! Used for SOR$GK_ZONE_KEY and SOR$GK_DTO_KEY.
    !
    macro
	p2_(s)[x] = %x x ^ 4 + s %,
	p_(s,a) = p2_(s,%explode(a)) %;
    literal
	pos = %x'0C',
	neg = %x'0D',
	undef = %x'0A';
    bind
	CONVERT_TABLE = uplit byte(
	    rep 48 of (undef),		! 00..2F
	    p_(pos,'0123456789'),	! 30..39	'0'..'9'	+0..+9
	    rep 7 of (undef),		! 3A..46
	    p_(pos,'123456789'),	! 41..49	'A'..'I'	+1..+9
	    p_(neg,'123456789'),	! 4A..52	'J'..'R'	-1..-9
	    rep 29 of (undef),		! 53..6F
	    p_(neg,'0123456789'),	! 70..79	'p'..'y'	-0..-9
	    undef,			! 7A
	    p_(pos,'0'),		! 7B		'{'		+0
	    undef,			! 7C
	    p_(neg,'0'),		! 7D		'}'		-0
	    rep 130 of (undef));	! 7E..FF


    map
	DESC_ADR : ref block [12, byte];

    local
	REC_DESC : block[12, byte],
	DEC_KEY : vector [32, byte, signed],
	PTR;

    literal
	RECORDS_SORT = 2,
	HEADER = SOR$GK_NODE_HED + SOR$GK_LEN_SIZE,
	REC_NUM_SIZE = 4,				! Size of record number field.
	RFA_SIZE = 6;

    map
	TREE_ADR : ref block [,byte];

!
! Read a record from the input file if necessary. then extract the key
! field doing all needed conversions and place in the sort tree.
!
    if not .SOR$GV_FLAGS [SOR$GK_MERGE2] then
	PTR = ch$ptr (.TREE_ADR + HEADER)
    else
	PTR = ch$ptr (.TREE_ADR);
	
    if .SOR$GV_FLAGS [SOR$GK_FILE_IO] or .SOR$GV_FLAGS [SOR$GK_MERGE2]
    then
	begin

	if not .SOR$GV_FLAGS [SOR$GK_MERGE2] then

	    begin
	    local
		STATUS;
	    STATUS = SOR$$SORT_GET (REC_DESC);
	    if not .STATUS then return .STATUS;
	    end

	else

	    begin
	    REC_DESC[ADR] = .TREE_ADR + .SOR$GB_KEY_SIZE;
	    end;


	!
	! Extract the key fields based on type. For character, binary, packed
	! and floating just move the field as is. For all decimal types move
	! the field after conversion to packed and padd with leading zeros to
	! maintain the proper length.
	!

	if not .SOR$GV_FLAGS [SOR$GK_USER_CMP] then		! If not user supplied compare routine
	    incr index from 0 to .SOR$GB_NUM_KEYS - 1 do

	    case .SOR$AW_KEY_BUF [.index, KEY_TYPE] from SOR$GK_CHAR_KEY to SOR$GK_FLTH_KEY of
		set

		[SOR$GK_ZONE_KEY, SOR$GK_DTO_KEY] :
		    begin
		    CVTTP (SOR$AW_KEY_BUF [.index, KEY_SIZE],
                           (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1),
                           CONVERT_TABLE,
                           SOR$AW_KEY_BUF [.index, KEY_SIZE], .PTR);
		    PTR = .PTR + .SOR$AW_KEY_BUF [.index, KEY_SIZE];
		    end;

		[SOR$GK_DLO_KEY] :
		    begin
		    DEC_KEY[2] = .(.SOR$AW_KEY_BUF[.index, KEY_POS] + .REC_DESC[ADR] - 1);

		    if (.DEC_KEY [2] gtr 73 and .DEC_KEY [2] lss 83) or .DEC_KEY [2] eql 125
		    then
			begin
			DEC_KEY [0] = 45;

			if .DEC_KEY [2] neq 125 then DEC_KEY [1] = .DEC_KEY [2] - 25 else DEC_KEY [1] = 48;

			end
		    else

			if .DEC_KEY [2] gtr 64 or .DEC_KEY [2] eql 123
			then
			    begin
			    DEC_KEY [0] = 43;

			    if .DEC_KEY [2] neq 123 then DEC_KEY [1] = .DEC_KEY [2] - 16 else DEC_KEY [1] = 48;

			    end;

		    ch$move (.SOR$AW_KEY_BUF [.index, KEY_SIZE] - 1,
                             ch$ptr (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR]),
                             ch$ptr (DEC_KEY [2]));
		    cvtsp (SOR$AW_KEY_BUF [.index, KEY_SIZE],
                           DEC_KEY [0],
                           SOR$AW_KEY_BUF [.index, KEY_SIZE],
                           .PTR);
		    PTR = .PTR + .SOR$AW_KEY_BUF [.index, KEY_SIZE];
		    end;

		[SOR$GK_DLS_KEY] :
		    begin
		    cvtsp (SOR$AW_KEY_BUF [.index, KEY_SIZE],
                           (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1),
                           SOR$AW_KEY_BUF [.index,KEY_SIZE],
                           .PTR);
		    PTR = .PTR + 1 + .SOR$AW_KEY_BUF [.index, KEY_SIZE];
		    end;

		[SOR$GK_DTS_KEY] :
		    begin
		    DEC_KEY [0] = .(.SOR$AW_KEY_BUF [.index, KEY_POS] + .SOR$AW_KEY_BUF [.index, KEY_SIZE] +
		    .REC_DESC[ADR] - 1);
		    ch$move (.SOR$AW_KEY_BUF [.index, KEY_SIZE],
                             ch$ptr (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1),
                             ch$ptr (DEC_KEY [1]));
		    cvtsp (SOR$AW_KEY_BUF [.index, KEY_SIZE],
                           DEC_KEY [0],
                           SOR$AW_KEY_BUF [.index, KEY_SIZE], 
                           .PTR);
		    PTR = .PTR + 1 + .SOR$AW_KEY_BUF [.index, KEY_SIZE];
		    end;

		[SOR$GK_PACK_KEY] :
		    begin
		    movp (SOR$AW_KEY_BUF [.index, KEY_SIZE],
			(.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1), .PTR);
		    PTR = .PTR + (.SOR$AW_KEY_BUF [.index, KEY_SIZE]/2) + 1;
		    end;

		[SOR$GK_CHAR_KEY] :

		    if .SOR$GV_FLAGS [SOR$GK_EBCDIC] then

			PTR = ch$translate (LIB$AB_ASC_EBC,
				.SOR$AW_KEY_BUF [.index, KEY_SIZE],
				ch$ptr(.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1),
				0,.SOR$AW_KEY_BUF [.index, KEY_SIZE],
				.PTR)
		    else

			PTR = ch$move (.SOR$AW_KEY_BUF [.index, KEY_SIZE],
			       ch$ptr (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1), 
			       .PTR);
		[inrange] :
		    PTR = ch$move (.SOR$AW_KEY_BUF [.index, KEY_SIZE],
                                   ch$ptr (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1), 
                                   .PTR);
		tes;


	! Return if MERGE.

	if .SOR$GV_FLAGS [SOR$GK_MERGE2] then return SUCCESS;


	! If stable sort, add record number to the end of the key.
	!

	if .SOR$GV_FLAGS [SOR$GK_STABLE] then
	    begin
	    SOR$GL_REC_CNT = .SOR$GL_REC_CNT + 1;	! Increment record count.
	    .PTR = .SOR$GL_REC_CNT;			! Store record number at end of key field.
	    PTR = .PTR + REC_NUM_SIZE;			! Point past the record number.
	    end;




	!
	! If file I/O and not a record sort then the total record size is the
	! key size plus the RFA size, otherwise the size is the key size plus
	! the record size. If the user is passing records then the total size
	! is the record size since the key field is already prefixed to the
	! record.
	!

	if .SOR$GB_SOR_TYP neq SOR$GK_RECORD
	then
	    begin
	    TREE_ADR [RECORD_SIZE] = .SOR$GL_REC_SIZE;
	    PTR = ch$move (RFA_SIZE, ch$ptr (.REC_DESC[RFA]), .PTR);

	    if .SOR$GB_SOR_TYP eql SOR$GK_INDEX
	    then

		incr index from 0 to .SOR$GB_NUM_KEYS - 1 do

		    case .SOR$AW_KEY_BUF [.index, KEY_TYPE] from SOR$GK_CHAR_KEY to SOR$GK_FLTH_KEY of
			set

			[SOR$GK_PACK_KEY] :
			    PTR = ch$move ((.SOR$AW_KEY_BUF [.index, KEY_SIZE]/2) + 1,
                                           ch$ptr (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1), 
                                           .PTR);

			[SOR$GK_DTS_KEY, SOR$GK_DLS_KEY] :
			    PTR = ch$move (.SOR$AW_KEY_BUF [.index, KEY_SIZE] + 1,
                                           ch$ptr (.SOR$AW_KEY_BUF [.index, KEY_POS] + .REC_DESC[ADR] - 1), 
                                           .PTR);

			[inrange] :
			    PTR = ch$move (.SOR$AW_KEY_BUF [.index, KEY_SIZE],
                                           ch$ptr (.SOR$AW_KEY_BUF [.index,KEY_POS] + .REC_DESC[ADR] - 1), 
                                           .PTR);
			tes;

	    end
	else
	    begin
	    TREE_ADR [RECORD_SIZE] = .SOR$GB_KEY_SIZE + .REC_DESC[LEN] + SOR$GK_LEN_SIZE;
	    ch$move (.REC_DESC[LEN],
                     ch$ptr (.SOR$GL_IN_BUF),
                     .PTR);
	    end

	end
    else
	begin

	if .DESC_ADR eql 0 then return RMS$_EOF;
	if .DESC_ADR[LEN] eql 0 then return RMS$_EOF;


	!
	! If this is a STABLE sort, we must copy the record in three
	! parts: first the extracted key, second the record number,
	! and third the data.
	!

	if .SOR$GV_FLAGS [SOR$GK_STABLE] then

	    begin

	    local
		KEY_LENGTH,
		DATA_LENGTH;

	    TREE_ADR [RECORD_SIZE] = .DESC_ADR[LEN] + SOR$GK_LEN_SIZE + REC_NUM_SIZE;! Include record number in size.
	    KEY_LENGTH = minu (.DESC_ADR[LEN], .SOR$GB_KEY_SIZE - REC_NUM_SIZE); ! Get length of key.
	    ch$move (.KEY_LENGTH,
		     ch$ptr (.DESC_ADR [ADR]),
		     ch$ptr (.PTR));					! Copy the key.

	    SOR$GL_REC_CNT = .SOR$GL_REC_CNT + 1;				! Increment the record count.
	    (.PTR + .SOR$GB_REC_NUM) = .SOR$GL_REC_CNT;			! Store record count as last key.

	    DATA_LENGTH = .DESC_ADR [LEN] - .KEY_LENGTH;		! Get length of remainder of record.

	    if .DATA_LENGTH gtr 0 then

		ch$move (.DATA_LENGTH,					! Move the rest of the record.
			 ch$ptr (.DESC_ADR [ADR] + .KEY_LENGTH),
			 ch$ptr (.PTR + .SOR$GB_REC_NUM + REC_NUM_SIZE));
	    end

	else				! If not STABLE,


	    begin
	    TREE_ADR [RECORD_SIZE] = .DESC_ADR [LEN] + SOR$GK_LEN_SIZE;
	    ch$move (.DESC_ADR [LEN],
		     ch$ptr (.DESC_ADR [ADR]), 
		     .PTR);
	    end;

	end;

    if .SOR$GV_FLAGS [SOR$GK_UTILITY] then SOR$AL_STATS [RECORDS_SORT] = .SOR$AL_STATS [RECORDS_SORT] + 1;

    return SUCCESS;
    end;

psect
    code = SOR$ABORT;


%title 'SOR$$COND_HAND'

global routine SOR$$COND_HAND (SIGNAL_ARGS, MECH_ARGS) =

!++
! Functional Description:
!
!        This routine is a condition handler.  For all signals except
!        reserved operand fault the following action is taken: for the
!        utility the condition is resignalled; for the sub-routine
!        package the signal is converted to a return status and sent
!        to the caller. For the reserved operand fault if caused by
!        one of the decimal key conversions this handler tries to
!        continue the sort. If the condition occurs more than ten
!        times it halts execution.
!
!
! Formal Parameters:
!
!        The signal arguments array and the mechanism arguments array.
!
!
! Implicit Inputs:
!
!        None.
!
!
! Implicit Outputs:
!
!        None.
!
!
! Routine Value:
!
!
! Completion Codes:
!
!        1 for continue, 0 for resignal.
!
!
! Side Effects:
!
!        None.
!
!--

    begin

    map
	SIGNAL_ARGS : ref block [, byte],
	MECH_ARGS : ref block [, byte];

!
! Determine if this is a reserved operand fault and if not resignal
! condition.
!

    if .SIGNAL_ARGS [CHF$L_SIG_NAME] neq SS$_ROPRAND
    then

	if .SOR$GV_FLAGS [SOR$GK_UTILITY]
	then return 0
	else return LIB$SIG_TO_RET (.SIGNAL_ARGS, .MECH_ARGS)

    else

	if .REPEAT geq 10
	then

	    if .SOR$GV_FLAGS [SOR$GK_UTILITY]
	    then
		begin
		SOR$$ERROR (SOR$_BADFIELD, 0, .SOR$GL_IN_BUF, .SOR$AL_STATS [2]);
		return 0;
		end
	    else
		begin
		REPEAT = 0;
		SIGNAL_ARGS [CHF$L_SIG_NAME] = SOR$_BADFIELD;
		return LIB$SIG_TO_RET (.SIGNAL_ARGS, .MECH_ARGS);
		end

	else
	    begin
	    REPEAT = .REPEAT + 1;
	    MECH_ARGS [CHF$L_MCH_SAVR0] = SOR$_BADFIELD;
	    return $UNWIND (DEPADR = MECH_ARGS [CHF$L_MCH_DEPTH]);
	    end;

    end;

psect
    code = SOR$ABORT,
    plit = SOR$ABORT ( execute);

%title 'SOR$$ERROR'

global routine SOR$$ERROR (ERROR_CODE, PARM1, PARM2, PARM3, PARM4) : weak novalue =

!++
! Functional Description:
!
!	This routine sets up the parameters for FAO and LIB$STOP and
!	signals the error based on the returned code.
!
!
! Formal Parameters:
!
!	The error code, and the message specific parameters.
!
!
! Implicit Inputs:
!
!	None.
!
!
! Implicit Outputs:
!
!	None.
!
!
! Routine Value:
!
!
! Completion Codes:
!
!	None.
!
!
! Side Effects:
!
!	The utility exits in most cases.
!
!--

    begin

    bind
	BADDATA = uplit byte(%ascii'KEY');

    local
	ERROR_DESC : vector [2];				! Error parm desc

    builtin
	actualcount,
	ap;							! Arg pointer

    map
	ap: ref block [,byte];

    macro
	ARGS = 0, 0, 8, 0%;					! Number of arguments


    !
    ! Set up the call to the library error message routine based on the error
    ! code.  If no parameters are needed just pass the code.
    !

    if actualcount() LEQ 1		! Check for more than 1 parameter
    then
	begin
	LIB$STOP (.ERROR_CODE);
	return;
	end;

    selectone .ERROR_CODE of
	set

	[SOR$_INCONSIS, SOR$_BAD_SPEC] :
	    begin
	    ERROR_DESC [0] = .PARM1;
	    ERROR_DESC [1] = .PARM2;
	    LIB$STOP (.ERROR_CODE, 1, ERROR_DESC);
	    end;

	[SOR$_OPENOUT, SOR$_OPENIN] :
	    begin

	    if .PARM1 eql 0 then ERROR_DESC [0] = NAM$C_MAXRSS else ERROR_DESC [0] = .PARM1;

	    ERROR_DESC [1] = .PARM2;
	    LIB$STOP (.ERROR_CODE, 1, ERROR_DESC, .PARM3, .PARM4);
	    end;

	[SOR$_WORK_DEV] :
	    begin
	    SOR$$CLOSE_FILE (2);
	    ERROR_DESC [0] = .PARM1;
	    ERROR_DESC [1] = .PARM2;
	    LIB$STOP (.ERROR_CODE, 1, ERROR_DESC);
	    end;

	[SOR$_VM_FAIL, SOR$_WS_FAIL] :
	    begin
	    SOR$$CLOSE_FILE (2);
	    LIB$STOP (.ERROR_CODE, 1, .PARM1);
	    end;

	[SOR$_MAP, SOR$_EXTEND] :
	    begin
	    SOR$$CLOSE_FILE (2);
	    LIB$STOP (.ERROR_CODE, .PARM1);
	    end;

	[SOR$_KEY_LEN] :
	    begin
	    SOR$$CLOSE_FILE (2);
	    LIB$STOP (.ERROR_CODE, 2, .PARM1, .PARM2);
	    end;

	[SOR$_CLOSEIN, SOR$_CLOSEOUT] :
	    begin
	    ERROR_DESC [0] = .PARM1;
	    ERROR_DESC [1] = .PARM2;
	    LIB$SIGNAL (.ERROR_CODE, 1, ERROR_DESC, .PARM3, .PARM4);
	    return;
	    end;

	[SOR$_READERR, SOR$_WRITEERR] :
	    begin
	    ERROR_DESC [0] = .PARM1;
	    ERROR_DESC [1] = .PARM2;
	    LIB$STOP (.ERROR_CODE, 1, ERROR_DESC, .PARM3, .PARM4);
	    end;


	[SOR$_BAD_LRL] :
	    begin
	    ERROR_DESC [0] = .PARM1;
	    ERROR_DESC [1] = .PARM2;

	    if .ap [ARGS] lss 5 then
		LIB$SIGNAL (.ERROR_CODE, 1, ERROR_DESC)
	    else
		LIB$SIGNAL (.ERROR_CODE, 1, ERROR_DESC, .PARM3, .PARM4);
	    return;
	    end;

	[SOR$_BADFIELD] :
	    begin

	    if .PARM1 neq 0
	    then
		begin
		ERROR_DESC [0] = ch$fill (34, 1, ch$ptr (SOR$GT_INP_NAME));
		ERROR_DESC [0] = ch$move (.PARM1, ch$ptr (.PARM2), .ERROR_DESC [0]);
		ch$wchar (34, .ERROR_DESC [0]);
		ERROR_DESC [0] = .PARM1 + 2;
		ERROR_DESC [1] = SOR$GT_INP_NAME;
		end
	    else
		begin
		ERROR_DESC [0] = 3;
		ERROR_DESC [1] = BADDATA;
		end;

	    LIB$STOP (.ERROR_CODE, 2, ERROR_DESC, .PARM3);
	    end;

	[SOR$_BADBYTE, SOR$_BADWORD, SOR$_BADLONG] :
	    begin
	    LIB$STOP (.ERROR_CODE, 3, .PARM1, .PARM2, .PARM3);
	    end;

	[SOR$_BAD_ORDER] :
	    begin
	    LIB$STOP (.ERROR_CODE, 1, .PARM1);
	    end;

	[otherwise] :
	    LIB$STOP (.ERROR_CODE);
	tes;

    end;

end
eludom
