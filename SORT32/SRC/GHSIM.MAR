	.TITLE	SOR$GH_SIMULATE Grand & Huge Floating Compare Simulator.
		.ident	'V03-000'


;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility:
;
;	SORT
;
;
; Abstract:
;
;	This module simulates G and H floating point comparisons on a
;	vax without G and H hardware.
;
;
; Environment:
;
;	Starlet Operating System, User Mode Utility
;
;
; Author:
;
;	Chuck Krapf		Creation Date:		1-Jan-80
;
;
; Modified by: 
;
;	Chuck Krapf, : Version 1
;
; 01	-	Routines extracted from EMULATE.MAR
;--
.page
	.psect	sor$sortdata,noexe
	;
	;	Operand Area Layout
	;
ZERO	=	0			; zero indicator (byte)
SIGN	=	1			; sign indicator (byte)
POWER	=	4			; exponent (longword)
FRACTION =	8			; fraction area (octaword)
OPERAND_SIZE =	24			; operand area size (bytes)
	;


	;
	;	Data Storage Area.
	;
OPERAND1:	.BLKB	OPERAND_SIZE	;Storage for 1st operand. (Unpacked)
OPERAND2:	.BLKB	OPERAND_SIZE	;2nd operand. (Unpacked)





	.psect	sor$sortcom,nopic,usr,con,rel,lcl,noshr,exe,rd,nowrt,long

	.ENTRY	SOR$$CMPG,^M<R2,R3,R4,R5>; entrance
	MOVQ	@4(AP),R0		; get the first argument.
	BSBW	UNPACK_GRAND1		; unpack and save the value
	MOVQ	@8(AP),R0		; get the 2nd argument.
	BSBW	UNPACK_GRAND2		; unpack and save the value
	MOVAB	OPERAND1,R1	 	; R1 = location of first value
	MOVAB	OPERAND2,R2	 	; R2 = location of second value
	BSBW	COMPARE_REAL		; compare the values
	RET				; done
	;
	;	71FD CMPH - Compare Huge
	;
	.ENTRY	SOR$$CMPH,^M<R2,R3,R4,R5>; entrance
	MOVQ	@4(AP),R0		; get 1st part of 1st operand
	MOVL	#1,R2			; get ready for 2nd part
	MOVQ	@4(AP)[R2],R2		; get 2nd part.
	BSBW	UNPACK_HUGE1		; unpack and save the value
	MOVQ	@8(AP),R0		; get 1st part of 2nd operand
	MOVL	#1,R2			; get ready for 2nd part
	MOVQ	@8(AP)[R2],R2		; get 2nd part.
	BSBW	UNPACK_HUGE2		; unpack and save the value
	MOVAB	OPERAND1,R1	 	; R1 = location of first value
	MOVAB	OPERAND2,R2	 	; R2 = location of second value
	BSBW	COMPARE_REAL		; compare the values
	RET				; done

	;	****************************************************************
	;	*							       *
	;	*							       *
	;	*       Routines for Unpacking and Packing Floating Values     *
	;	*							       *
	;	*							       *
	;	****************************************************************
	;
	;
	;	Introduction
	;	------------
	;
	;	    The following routines perform all of the conversions
	;	between the VAX floating representations and the internal 
	;	representation used by the Emulator. The unpack routines
	;	convert from the VAX representation to the internal 
	;	representation and the pack routines perform the opposite
	;	conversion. These routines perform all of the necessary
	;	rounding and check for reserved values, underflow, and 
	;	overflow.
	;
	;
	;	The Unpack Routines
	;	-------------------
	;
	;	    The unpack routines convert a value in one of the VAX
	;	floating representations to our internal representation.
	;	The value to be converted is assumed to be contained in
	;	the registers starting at R0. For floating and double 
	;	floating values the available unpack routines only place
	;	the converted value in OPERAND1. For grand and huge routines
	;	are available which place the result in all of the operand
	;	areas.
	;
	;	    The unpack routines all check for a reserved floating
	;	value (sign bit set and biased exponent equal to zero) and
	;	signal a reserved operand exception if one is found.
	;
	;

	;
	;	UNPACK_GRAND1 - Unpack a Grand Floating Value to OPERAND1
	;
	;		entered by subroutine branching
	;
	;		parameter:	R0,R1 = Input Grand Floating Value
	;
	;		returns with 	OPERAND1 = Converted Value
	;
UNPACK_GRAND1:				; entrance
	MOVAB	OPERAND1,R2 		; R2 = operand area location
	BRB	UNPACK_GRAND		; enter the main routine
	;
	;	UNPACK_GRAND2 - Unpack a Grand Floating Value to OPERAND2
	;
	;		entered by sobroutine branching
	;
	;		parameter:	R0,R1 = Input Grand Floating Value
	;
	;		returns with	OPERAND2 = Converted Value
	;
UNPACK_GRAND2:				; entrance
	MOVAB	OPERAND2,R2 		; R2 = operand area location
	BRB	UNPACK_GRAND		; enter the main routine
	;
	;	UNPACK_GRAND - Unpack a Grand Floating Value
	;
	;		entered by subroutine branching
	;	
	;		parameters:	R0,R1 = Input Grand Floating Value
	;				R2 = Location of Destination Area
	;
UNPACK_GRAND:				; entrance
	CLRL	(R2)			; clear the zero and sign flags
	EXTZV	#4,#11,R0,R3		; R3 = biased exponent
	BNEQ	2$			; it's not zero - bypass
	BBCC	#15,R0,1$		; change -0.0 to +0.0
1$:	INCB	ZERO(R2)		; indicate a zero value
	RSB				; return
2$:	BBC	#15,R0,3$		; no sign bit - skip
	INCB	SIGN(R2)		; indicate a negative value
3$:	MOVAB	-1024(R3),POWER(R2)	; store the unbiased exponent
	ROTL	#16,R0,R0		; R0 = leading bits of the fraction
	BBSS	#20,R0,4$		; set the hidden bit
4$:	INSV	R0,#11,#21,FRACTION+12(R2); store bits 43-63 of the fraction
	ROTL	#16,R1,R1		; R1 = trailing bits of the fraction
	INSV	R1,#11,#32,FRACTION+8(R2); store bits 11-42 of the fraction
	INSV	#0,#0,#11,FRACTION+8(R2); clear bits 0-10 of the fraction
	CLRQ	FRACTION(R2)		; extend the fraction to 128 bits
	RSB				; return
	;

	;
	;	UNPACK_HUGE1 - Unpack a Huge Floating Value to OPERAND1
	;
	;		entered by subroutine branching
	;	
	;		parameter:	R0,R1,R2,R3 = Input Huge Value
	;
	;		returns with	OPERAND1 = Converted Value
	;
UNPACK_HUGE1:				; entrance
	MOVAB	OPERAND1,R4 		; R4 = operand area location
	BRB	UNPACK_HUGE		; enter the main routine
	;
	;	UNPACK_HUGE2 - Unpack a Huge Floating Value to OPERAND2
	;
	;		entered by subroutine branching
	;
	;		parameter:	R0,R1,R2,R3 = Input Huge Value
	;
	;		returns with 	OPERAND2 = Converted Value
	;
UNPACK_HUGE2:				; entrance
	MOVAB	OPERAND2,R4 		; R4 = operand area location
	BRB	UNPACK_HUGE		; enter the main routine
	;
	;
	;	UNPACK_HUGE - Unpack a Huge Floating Value
	;
	;		entered by subroutine branching
	;
	;		parameters:	R0,R1,R2,R3 = Input Huge Value
	;				R4 = Destination Area Location
	;
UNPACK_HUGE:				; entrance
	CLRL	(R4)			; clear the zero and sign flags
	EXTZV	#0,#15,R0,R5		; R5 = biased exponent
	BNEQ	2$			; it's not zero - bypass
	BBCC	#15,R0,1$		; change -0.0 to +0.0
1$:	INCB	ZERO(R4)		; indicate a zero value
	RSB				; return
2$:	BBC	#15,R0,3$		; no sign bit - skip
	INCB	SIGN(R4)		; indicate a negative value
3$:	MOVAB	-16384(R5),POWER(R4)	; store the unbiased exponent
	ROTL	#16,R0,R0		; R0 = leading bits of the fraction
	BBSS	#16,R0,4$		; set the hidden bit
4$:	INSV	R0,#15,#17,FRACTION+12(R4); store bits 111-127 of the fraction
	ROTL	#16,R1,R1		; R1 = next bits of the fraction
	INSV	R1,#15,#32,FRACTION+8(R4); store bits 79-110 of the fraction
	ROTL	#16,R2,R2		; R2 = next bits of the fraction
	INSV	R2,#15,#32,FRACTION+4(R4); store bits 47-78 of the fraction
	ROTL	#16,R3,R3		; R3 = next bits of the fraction
	INSV	R3,#15,#32,FRACTION(R4) ; store bits 15-46 of the fraction
	INSV	#0,#0,#15,FRACTION(R4)	; clear bits 0-14 of the fraction
	RSB				; return
	;

	;
	;	COMPARE_REAL - Compare Internal Format Floating Values 
	;
	;		entered by subroutine branching
	;
	;		parameters:	R1 = Location of First Floating Value
	;				R2 = Locaiton of Second Floating Value
	;
	;	Discussion
	;	
	;	    This routine compares the two floating values addressed
	;	by R1 and R2 and sets the hardware condition codes according
	;	to the outcome of the comparison. These settings are available
	;	when the routine returns.
	;
COMPARE_REAL:				; entrance
	CMPB	SIGN(R1),SIGN(R2)	; compare the sign indicators
	BNEQ	3$			; not equal - bypass
	CMPB	ZERO(R2),ZERO(R1)	; compare the zero indicators
	BNEQ	2$			; not equal - bypass
	BLBS	ZERO(R1),TEST_EQL	; both are zero and equal - bypass
	CMPL	POWER(R1),POWER(R2)	; compare the exponents
	BLSS	4$			; condition was less than - bypass
	BGTR	3$			; condition was greater - bypass
	MOVL	#3,R0			; R0 = loop index
1$:	CMPL	FRACTION(R1)[R0],-	; compare corresponding longwords
		FRACTION(R2)[R0]	; from the fractions
	BNEQ	2$			; not equal - bypass
	SOBGEQ	R0,1$			; more longwords to examine - loop
	BRB	TEST_EQL		; arrange an equals return
2$:	BLSSU	4$			; condition was less than - bypass
3$:	BLBC	SIGN(R1),TEST_GTR	; condition is greater than - bypass
	BRB	TEST_LSS		; condition is less than - bypass
4$:	BLBC	SIGN(R1),TEST_LSS	; condition is less than - bypass
	BRB	TEST_GTR		; condition is greater than - bypass
	;

	;
	;	TEST_LSS - Set R0 to -1 to Specify Less Than
	;
	;		entered by subroutine branching
	;
	;		no parameters
	;
	;	Discussion
	;
	;	    This routine sets R0 to -1 to specify
	;	a "less than" outcome. This setting is available when the 
	;	routine returns.
	;
TEST_LSS:				; entrance
	CVTBL	#-1,R0			; set R0 = -1
	RSB				; return
	;
	;	TEST_EQL - Set R0 to 0 to Specify Equals
	;
	;		entered by subroutine branching
	;
	;		no parameters
	;
	;	Discussion
	;
	;	    This routine sets R0 to zero to specify
	;	an "equals" outcome. This setting is available when the 
	;	routine returns.
	;
TEST_EQL:				; entrance
	CLRL	R0			; clear R0
	RSB				; return
	;
	;	TEST_GTR - Set the R0 to 1 to Specify Greater Than
	;
	;		entered by subroutine branching
	;
	;		no parameters
	;
	;	Discussion
	;
	;	    This routine sets R0 to 1 to specify
	;	a "greater than" outcome. This setting is available when the
	;	routine returns.
	;
TEST_GTR:				; entrance
	MOVL	#1,R0			; set R0 = 1
	RSB				; return
	;

	; Routine SOR$$DO_REI.  This routine forces an REI instruction
	; to be performed so that the hardware instruction lookahead
	; logic can be cleared.  This should be performed after the
	; key comparison code is written by SOR$$GEN_KEY and before
	; it is executed.  This routine is called with a JSB.
	;
	;
	.GLOBAL	SOR$$DO_REI


SOR$$DO_REI:
	MOVL	(SP),R0		;Get the return address.
	MOVPSL	(SP)		;Save the PSL on the stack.
	PUSHL	R0		;And the return address.
	REI			;Return to the caller.
	.END

