!-*-BLISS-*-
!<BLF/NOERROR>
!<BLF/WIDTH:116>
!<BLF/REMARK:8>
!<BLF/NOPLIT>
!<BLF/MACRO>
!<BLF/LOWERCASE_KEY>
!<BLF/UPPERCASE_USER>
module SOR$MAIN_LINE (language (bliss32) ,
		list (assembly) ,
		ident = 'V03-000',
		main = SOR$ENTRY
		) =
begin
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:
!
!	SORT
!
!
! Abstract:
!
!	This module is the main line code for the sort utility.  It stores
!	the elapsed time for the various routines, handles errors and calls
!	the main routines which do the command line parsing, the file i/o
!	and the actual sorting.
!
!
! Environment:
!
!	Starlet Operating System, User mode utility.
!
!
! Author:
!
!	Ellen R Simich,		Creation Date:		1-Sep-77
!	Robert A Surtees,	Modification Date:	1-Sep-79
!
!
! Modified by:
!
!	V02.03		PDG0003		Peter D Gilbert	04-Jan-1982
!		Move SOR$$ERROR to KEYSUB (share with merge).
!	V02.02		JDN0002		Joe Neumeister	21-Sep-1981
!		Change SOR$GV_FLAGS from a bitvector [16] to a 
!    		    bitvector [32] to allow new switches, (/STATISTICS).
!		Print SORT statistics only if requested, (/STATISTICS). 
!		Add a new global literal SOR$GK_LOG_STATS.
!	V02.01		JDN0001		Joe Neumeister	12-Mar-1981
!		Declare ERROR symbols as external literals to allow
!		    new error messages to be outputted.
!
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!

library 'SYS$LIBRARY:CLIMAC.L32';				! CLI definitions

library 'SYS$LIBRARY:LIB.L32';					! Starlet System Service macros


!
! MACROS:
!

macro
    ABORT_UTILITY =
	return SS$_ABORT;
    %;

linkage
    JSBR = jsb (register = 0),
    JSBL = jsb;

!
! EQUATED SYMBOLS:
!

compiletime
    TIME = 0;							! Switch to print extra time information.

!
! OWN STORAGE:
!

psect
    global = SOR$RMSSTOR (addressing_mode (general));

external literal
    SOR$GK_DDB_SIZE : unsigned (16),		! Size of DDB
    SOR$_MISS_KEY,				! Declare ERROR symbols
    SOR$_WORK_DEV,				!  as external literals
    SOR$_NO_WRK,
    SOR$_VM_FAIL,
    SOR$_WS_FAIL,
    SOR$_SORT_ON,
    SOR$_BAD_KEY,
    SOR$_NUM_KEY,
    SOR$_BAD_LEN,
    SOR$_ONE_IN,
    SOR$_IND_OVR,
    SOR$_INCONSIS,
    SOR$_VAR_FIX,
    SOR$_BAD_TYPE,
    SOR$_LRL_MISS,
    SOR$_BAD_SPEC,
    SOR$_BAD_LRL,
    SOR$_BAD_FILE,
    SOR$_BAD_ADR,
    SOR$_MAP,
    SOR$_EXTEND,
    SOR$_KEY_LEN,
    SOR$_CLEAN_UP,
    SOR$_BAD_MERGE,
    SOR$_BAD_ROUTIN,
    SOR$_INP_FILES,
    SOR$_BAD_ORDER,
    SOR$GK_LOG_STATS;				! Print SORT statistics flag bit --JDN



external
    SOR$GL_DDB_PTR;				! Pointer to input file DDB


psect
    global = SOR$SORTDATA ( addressing_mode (general));

global
    SOR$AL_STATS : vector [16] weak initial (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

!
! EXTERNAL REFERENCES:
!

external routine
    LIB$GET_VM : addressing_mode (general),
    LIB$FREE_VM: addressing_mode (general),
    SOR$PARSE_CMD,						! Command parser routine
    SOR$$OPEN_INPUT,						! Open the input file
    SOR$PROC_SPEC,						! Process the specification file
    SOR$$NEW_INPUT,						! Get space for input file DDB.
    SOR$INIT_SORT,						! Initialize sort parameter and work area
    SOR$SORT_MERGE,						! Sorting algorithm
    SOR$GET_STATS : JSBL,					! Get initial stats
    SOR$PRINT_STATS : JSBR,					! Print statistics for sort
    SOR$END_SORT,						! Clean up routine
    SOR$$ERROR:	novalue weak;					! Signal errors

external
    SOR$GB_NUM_KEYS : byte,					! Number of keys defined
    SOR$GV_FLAGS : bitvector [32],				! Sorting flags (longword --JDN)
    SOR$GB_SPECSIZE : byte,					! Size of spec file name
    SOR$GW_IN_LRL : word;					! Longest input record length

external literal
    SOR$GK_UTILITY : unsigned (4);				! Indicates utility is running

psect
    own = SOR$STATDATA ( addressing_mode (general)),
    code = SOR$CONTROL;


%title 'SOR$ENTRY'

global routine SOR$ENTRY : novalue =

!++
! Functional Description:
!
!	This routine is the entry point for the sort utility. It calls the
!	various routines which perform the sort, and computes elapsed
!	times.
!
!
! Formal Parameters:
!
!	None.
!
!
! Implicit Inputs:
!
!	None.
!
!
! Implicit Outputs:
!
!	None.
!
!
! Routine Value:
!
!
! Completion Codes:
!
!	None.
!
!
! Side Effects:
!
!	None.
!
!--

    begin

    own
!<BLF/NOFORMAT>

%if TIME
%then

	ELAPSED_TIMES : vector [10];    ! Storage for timing informaiton

%else

	ELAPSED_TIMES : vector [4];
%fi

!<BLF/FORMAT>

    builtin
	ap;

    map
	ap : ref block [, byte];

    local
	CALL_BACK,
	SAVE_DDB,
	ERROR_CODE;

!
! This sequence calls the command parser module and the specification
! file processor if necessary.  It then opens the input file, checking
! for errors after each call and storing elapsed time information.
!


    CALL_BACK = .ap [CLI$A_UTILSERV];				! Get CLI call back address
    SOR$GET_STATS ();						! Get initial stat values
    $GETTIM (TIMADR = ELAPSED_TIMES [0]);			! Get start time
    SOR$GV_FLAGS [SOR$GK_UTILITY] = 1;				! Indicate utility running

    if not SOR$PARSE_CMD (.CALL_BACK) then ABORT_UTILITY;	! Signal error and exit

%if TIME
%then
    $GETTIM (TIMADR = ELAPSED_TIMES [2]);			! Get time for parsing routine
%fi

    if .SOR$GB_SPECSIZE neq 0					! Specification file given
    then
	begin

	SAVE_DDB = .SOR$GL_DDB_PTR;				! Save current COM_FAB/RAB
	ERROR_CODE = LIB$GET_VM (%ref (SOR$GK_DDB_SIZE),
				 SOR$GL_DDB_PTR);		! Get space for spec file FAB/RAB
	if not .ERROR_CODE then return SOR$_VM_FAIL;
	if not SOR$PROC_SPEC () then ABORT_UTILITY;		! Signal error and exit
	LIB$FREE_VM (%ref (SOR$GK_DDB_SIZE), SOR$GL_DDB_PTR);	! Return DDB
	SOR$GL_DDB_PTR = .SAVE_DDB;				! Restore pointer.

%if TIME
%then
	$GETTIM (TIMADR = ELAPSED_TIMES [4]);			! Get time for spec file
%fi

	end;

    !
    ! Make sure that either the command line or spec file had the key
    ! definition.

    if .SOR$GB_NUM_KEYS lss 1					!
    then
	SOR$$ERROR (SOR$_MISS_KEY);


    !
    ! At this point this code is the identical sequence of calls a user would
    ! issue from his program to the sort subroutine package if he was allowing
    ! sort to do the file I/O.
    !
    !
    ! Call the sort initialize routine specifying the sort type, the key
    ! buffer pointer, the work file device buffer pointer the the length of
    ! the longest record in the file and the file size.  0 in this case
    ! indicates that the global locations for these values have been
    ! previously filled in by the command parser module.
    !

    if not SOR$INIT_SORT (0, SOR$GW_IN_LRL) then ABORT_UTILITY;	! Signal error and exit

%if TIME
%then
    $GETTIM (TIMADR = ELAPSED_TIMES [6]);			! Get initialize time
%fi

    ERROR_CODE = SOR$SORT_MERGE ();				! Do sorting and

    if not .ERROR_CODE						!  and intermediate merges.
    then
	SOR$$ERROR (.ERROR_CODE);				! Signal error and exit

    ERROR_CODE = SOR$END_SORT ();				! Clean up memory and work files

%if TIME
%then
    $GETTIM (TIMADR = ELAPSED_TIMES [8]);			! Get sort time
%else
    $GETTIM (TIMADR = ELAPSED_TIMES [2]);			! Get final time
%fi

    if .SOR$GV_FLAGS [SOR$GK_LOG_STATS] then			! If requested,      --JDN
	SOR$PRINT_STATS (ELAPSED_TIMES);			! Print statistics   --JDN

    if not .ERROR_CODE						! Clean up worked
    then
	return SOR$_CLEAN_UP;					! Signal error and exit

    return SS$_NORMAL;						! Exit successfully
    end;

end
eludom
