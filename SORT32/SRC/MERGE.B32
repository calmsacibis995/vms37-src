module SOR$MERGE (addressing_mode (external = general) ,
		language (bliss32) ,
		list (assembly) ,
		unames,
		list (assembly) ,
		unames,
		ident = 'V03-000'
		) =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:
!
!	SORT
!
! Abstract:
!
!	This module contains all of the routines for the MERGE command
!	and subroutine.
!
!
! Environment:
!
!	Starlet Operating System, User mode utility
!
!
! Author:
!
!	Chuck Krapf		Creation Date		1-Dec-80
!
! Modified by:
!
!	V02.05		PDG0005		Peter D Gilbert	11-Dec-1981
!		Fix returned address/status problem with
!		    SOR$$GET_RECORD and SOR$$RAB_INIT.
!	V02.04		JDN0004		Joe Neumeister	21-Sep-1981
!		Change SOR$GV_FLAGS from a bitvector [16] to a 
!    		    bitvector [32] to allow new switches, (/STATISTICS).
!	V02.03		JDN0003		Joe Neumeister	17-Sep-1981
!		Change SOR$$INP_ROUT to ch$move LRL length instead of
!		just the record length, thus automatically getting
!		zero fill in the node/list for key-building.
!	V02.02		JDN0002		Joe Neumeister	19-Jun-1981
!		Change addressing mode to (external = general) to avoid
!		    problems with VMS V3.
!	V02.01		JDN0001		Joe Neumeister	12-Mar-1981
!		Declare ERROR symbols as external literals to allow
!		    new error messages to be outputted.
!
!--


begin


    library 'SYS$LIBRARY:STARLET.L32';
    

    psect
	global = SOR$MERGEDATA (addressing_mode (general)),
	own    = SOR$MERGEDATA (addressing_mode (general)),
	plit   = SOR$MERGEDATA (addressing_mode (general)),
	code   = SOR$MERGECODE;


    literal
	DEFAULT_FILE = 1000,		! Default file size.
	USER = 4,			! User supplied key type.
	MAX_MERGE = 10,			! Maximum order of merge.
	SUCCESS = 1,			! Success flag
	SORT_ERROR = 28,		! Sort facility code.
	LISTHEAD_SIZE = 6;		! No. of longwords in the node header.


    linkage
	JSBL = jsb,
	JSBR2 = jsb (register = 9, register = 10);


    macro				! Node header layout.
	PTR_TO_NEXT = 0, 0, 32, 0%,	! Pointer to next node in list.
	PTR_TO_PREV = 1, 0, 32, 0%,	! Pointer to previous node in list.
	RUN_NUMBER  = 2, 0, 32, 0%,	! Run number for this record.
	INPUT_FILE  = 3, 0,  8, 0%,	! Input file number for this record.
	FLAGS	    = 3, 8, 24, 0%,	! Flag vector.
	SIZE	    = 4, 0, 32, 0%,	! Record size. (Including Key)
	RUN	    = 5, 0, 32, 0%,	! Run number for this record.
	DATA	    = 6, 0,  0, 0%;	! Start of data area.



    own
	MERGE_LISTHEAD: block [LISTHEAD_SIZE],
	TOT_NODE_SIZE,			! Size of record + key + header
	TOT_REC_SIZE,			! Size of record
	FREE_NODE,			! PTR to node to keep track of runs.
	VM_LIMIT,			! Number of bytes of vm to add.
	HIGH_VM;			! Highest address added.



    external
	SOR$GB_MERGE: byte,		! Order of the merge.
	SOR$AB_KEY_TYPE: vector [,byte],! Key type array.
	SOR$AB_KEY_ORDR: vector [,byte],! Key order array. 0=ascending, 2=desc.
	SOR$GB_KEY_SIZE: byte,		! Total key size.
	SOR$GW_IN_LRL: word,		! Maximum record size.
	SOR$GW_MAX_LRL: word weak,	! Maximum LRL of all input files.
	SOR$GL_BUF_SIZE : weak,		! Set high to force up MBF and MBC for input and output files.
	SOR$GL_IN_ALQ,			! Total allocation of all input files.
	SOR$GL_TOT_ALQ : weak,		! Total allocation of all input files.
					! (From SOR$$OPEN_INPUT)
	SOR$GL_IN_BUF,			! Start of free buffer area.
	SOR$GV_FLAGS : bitvector [32],	! Sort flags, (longword JDN).
	SOR$GL_KEY_COMP,		! Key comparison routine.
	SOR$GL_DDB_PTR : weak,		! Pointer to RAB/FAB of current input file.
	SOR$GB_NUM_FILE : byte weak,	! Number of input files.
	SOR$GV_DDB_TABL : vector [] weak,!Table of DDBs.
	SOR$GB_NUM_SEGS: byte,		! Number of key segments. (Collapsed keys)
	SOR$GB_NUM_KEYS: byte;		! Number of keys.


    external literal
	SOR$GK_UTILITY: unsigned (4),	! We were called from DCL
	SOR$GK_FILE_IO: unsigned (4),	! File interface.
	SOR$GK_DDB_SIZE : weak unsigned (16), ! Size of RAB/FAB block
	SOR$GK_MERGE2: unsigned (4),	! Get ready for next merge call.
	SOR$GK_CHK_SEQ: unsigned (4),	! SOR$GV_FLAGS entry. Check sequence on merge input.
	SOR$GK_EBCDIC: unsigned (4),	! SOR$GV_FLAGS entry.  Use EBCDIC collating sequence.
	SOR$V_EBCDIC: unsigned (4),	! User flag to request SOR$GK_EBCDIC.
	SOR$V_SEQ_CHECK: unsigned (5),	! User command to set SOR$GK_CHK_SEQ.
        SOR$_MISS_KEY,				! Declare ERROR symbols
        SOR$_WORK_DEV,				!  as external literals
        SOR$_NO_WRK,
        SOR$_VM_FAIL,
        SOR$_WS_FAIL,
        SOR$_SORT_ON,
        SOR$_BAD_KEY,
        SOR$_NUM_KEY,
        SOR$_BAD_LEN,
        SOR$_ONE_IN,
        SOR$_IND_OVR,
        SOR$_INCONSIS,
        SOR$_VAR_FIX,
        SOR$_BAD_TYPE,
        SOR$_LRL_MISS,
        SOR$_BAD_SPEC,
        SOR$_BAD_LRL,
        SOR$_BAD_FILE,
        SOR$_BAD_ADR,
        SOR$_MAP,
        SOR$_EXTEND,
        SOR$_KEY_LEN,
        SOR$_CLEAN_UP,
        SOR$_BAD_MERGE,
        SOR$_BAD_ROUTIN,
        SOR$_INP_FILES,
        SOR$_BAD_ORDER;


    global
	SOR$GL_INP_ROUT;		! Record input routine.



    external routine
	LIB$ESTABLISH: addressing_mode (general),
	LIB$SIG_TO_RET: addressing_mode (general),
	LIB$GET_VM: addressing_mode (general),
	LIB$FREE_VM: addressing_mode (general),
	LIB$SCOPY_R_DX: addressing_mode (general),
	SOR$$INIT_KEYS,			! Initialize the key buffer.
	SOR$$GEN_KEY,			! Compiles the key comparison routine.
	SOR$$BUILD_KEY,			! Record key extractor.
	SOR$$CREATE_OUT : weak,		! Create the output file.
	SOR$$OUT_RAB  : weak,		! Connect the output RAB
	SOR$$RAB_INIT : weak,		! Connect the input RAB
	SOR$$GET_RECORD : JSBL weak,	! Input a record.
	SOR$$PUT_RECORD : JSBL weak,	! Output a record.
	SOR$$CLOSE_FILE : weak,		! Close files
	SOR$END_SORT : weak,		! Sort clean up.
	SOR$$ERROR : novalue weak;	! Utility error routine.

    forward routine
	INSERT_REC: novalue,
	BUILD_LIST,
	INPUT_NODE,
	SOR$$END_MERGE,
	SOR$$INP_ROUT,
	SOR$$RET_MERGE,
	CONNECT_FILES,			! Connects RABs to input files.
	MERGE_COMPARE;

    macro
	ARGS = 0, 0, 8, 0%;		! Number of arguments.


    builtin
	insque,
	remque;

%title 'SOR$INIT_MERGE'

global routine SOR$INIT_MERGE (ORDER_ADR, KEY_BUF_ADR, LRL_ADR, MERGE_FLAGS,
		 COMPARE_ADR, INP_ADR) =


!++
!
!
! Functional Description:
!
!	Routine to initialize the merge for the utility or subroutine
!	interface.  For the subroutine file interface, the seqence of
!	calls is:
!
!		SOR$PASS_FILES
!		SOR$DO_MERGE
!
!	For the record interface, the sequence is:
!
!		SOR$INIT_MERGE
!		SOR$RETURN_REC		! Called once for each record.
!		SOR$END_SORT
!
!	In the record interface, the user supplied input routine will
!	be called from both SOR$INIT_MERG and SOR$RETURN_REC.
!
!
! Formal Parameters:
!
!	KEY_BUF_ADR (ref)	the user supplied key buffer.  Needed
!				if the user is not specifying his own
!				key comparison routine.
!
!	ORDER_ADR (ref)		the order of the merge. Max = 10, Min = 2.
!				Always required.
!
!	LRL_ADR (ref,word)	the longest record length of any of the input
!				files.  Required for record interface or if
!				any of the input files are not on disk.
!
!
!	MERGE_FLAGS (ref)	Address of a longword of bit flags that
!				request certain merge options.  Supported
!				flags are:
!
!				SOR$V_EBCDIC	Use the EBCDIC collating
!						sequence.
!
!				SOR$V_SEQ_CHECK	Check input file sequence.
!
!
!
!
!	COMPARE_ADR (ref)	user supplied key comparison routine.
!
!	INPUT_ROUT (ref)	user supplied input routine address.
!				Required for record interface.
!
!
! Side Effects:
!
!	Calls the user supplied input routine to input records.
!
!
! Routine Value:
!
!	SUCCESS or an error code.
!
!
!
!--


    begin


	local
	    ERROR_CODE;


	builtin
	    ap;				! Argument pointer.


	map
	    MERGE_FLAGS: ref bitvector [32],
	    ap: ref block [,byte];



	bind
	    KEY_BUFFER = .KEY_BUF_ADR: vector [,word],
	    ORDER = .ORDER_ADR: byte,
	    LRL = .LRL_ADR: word;

	literal
	    SORT_ON = 124,	! Sort is active.
	    SOR$$INP_MERGE = 0, ! Routine not written yet.
	    MERGE_ON = %X'200';	! Merge is active.


	macro			! To pick off an argument.

	    PICK_ARG (ARG_NAME, DEST, NUM, ERROR) =

	    if .ap [ARGS] geq NUM then
		if ARG_NAME neq 0 then

		    begin
			%if %null(ERROR)  %then
			    DEST = .ARG_NAME;
			%else
			if .ARG_NAME neq 0 then
			    DEST = .ARG_NAME
			else
			    return ERROR;
			%fi
			end%;


	macro			! To pick off a routine address argument.

	    PICK_ROUT (ARG_NAME, DEST, NUM) =

	    if .ap [ARGS] geq NUM then
		if .ARG_NAME neq 0 then

		    DEST = .ARG_NAME%;





	! First test for reentrant call.

	if (.SOR$GV_FLAGS and (SORT_ON or MERGE_ON)) neq 0 then return SOR$_SORT_ON;

	SOR$GV_FLAGS [SOR$GK_MERGE2] = 1;	! Set up for next merge call.

	if not .SOR$GV_FLAGS [SOR$GK_UTILITY] then
		LIB$ESTABLISH (LIB$SIG_TO_RET);

	! Initialize global variables.
	SOR$GB_MERGE = 0;		! Order of merge
	SOR$GB_KEY_SIZE = 0;
	SOR$GW_IN_LRL = 0;		! Longest record length.
	SOR$GL_IN_ALQ = DEFAULT_FILE;	! Default file allocation.
	SOR$GL_INP_ROUT = SOR$$INP_MERGE; ! Merge record input routine.
	SOR$GL_KEY_COMP  = 0;		  ! Key comparison routine.


	! Pick off the arguments.

	PICK_ARG (ORDER, SOR$GB_MERGE, 1, SOR$_BAD_MERGE); ! Get order of merge.
	PICK_ARG (LRL, SOR$GW_IN_LRL, 3);		! Get longest record length.
	PICK_ROUT (COMPARE_ADR, SOR$GL_KEY_COMP, 5 );! Key compare routine.
	PICK_ROUT (INP_ADR, SOR$GL_INP_ROUT, 6 );! Record input routine.

	if .ap [ARGS] geq 4 then		! Pick up the user's flags.

	    if .MERGE_FLAGS neq 0 then

	    begin

		if .MERGE_FLAGS [SOR$V_EBCDIC] then SOR$GV_FLAGS [SOR$GK_EBCDIC] = 1;

		if .MERGE_FLAGS [SOR$V_SEQ_CHECK] then SOR$GV_FLAGS [SOR$GK_CHK_SEQ] = 1;

		end;



	!

	!
	if .SOR$GL_INP_ROUT eql 0 then

	    begin
		if .SOR$GV_FLAGS [SOR$GK_FILE_IO] then			! If FILES interface
		    SOR$GL_INP_ROUT = SOR$$INP_ROUT			! Use default routine
		else
		    return SOR$_BAD_ROUTIN;				! Else error.
		end;



	if .SOR$GV_FLAGS [SOR$GK_UTILITY] or
	    (.ap [ARGS] geq 2 and KEY_BUFFER [0] neq 0
	     and .KEY_BUFFER [0] neq 0) then

	    begin
		ERROR_CODE = SOR$$INIT_KEYS (KEY_BUFFER [0]);
		if not .ERROR_CODE then return .ERROR_CODE;
		end

	    else

		begin
		    if .SOR$GL_KEY_COMP eql 0 then return SOR$_MISS_KEY;
		    SOR$GB_NUM_KEYS = 1;		! Only one key (user)
		    SOR$GB_NUM_SEGS = 1;		! One key segment.
		    SOR$AB_KEY_TYPE [0] = USER;		! Type is user.
		    SOR$AB_KEY_ORDR [0] = 0;		! Ascending.
		    SOR$$GEN_KEY ();			! Generate the key compare routine.
		    end;

	if .SOR$GB_MERGE leq 1 or .SOR$GB_MERGE gtr MAX_MERGE then

	    return SOR$_BAD_MERGE;

	if .SOR$GV_FLAGS [SOR$GK_FILE_IO] then

		begin
		    SOR$GL_BUF_SIZE = 10000000;			! Force large buffering.
		    ERROR_CODE = CONNECT_FILES ();		! Connect RABs to input files.
		    if not .ERROR_CODE then return .ERROR_CODE;	! Return if error.

		    if .SOR$GW_IN_LRL eql 0 then SOR$GW_IN_LRL = .SOR$GW_MAX_LRL;  ! Get maximum input file LRL.
		    if .SOR$GL_IN_ALQ eql 0 then SOR$GL_IN_ALQ = .SOR$GL_TOT_ALQ;  ! Total file allocation.
		    ERROR_CODE = SOR$$CREATE_OUT ();		! Create the output file.
		    if not .ERROR_CODE then return .ERROR_CODE;	! Return if error.

		    ERROR_CODE = SOR$$OUT_RAB ();		! Connect the output RAB
		    if not .ERROR_CODE then return .ERROR_CODE;	! Return if error.
		    end;


	if .SOR$GW_IN_LRL eql 0 then return SOR$_LRL_MISS;

	BUILD_LIST ()			! Build the merge node list.
	end;

%title 'CONNECT_FILES'

routine CONNECT_FILES =

!++
!
!
!
! Functional Description:
!
!	Routine to connect the RABs to all the input files.
!
!
!
! Global Inputs:
!
!	SOR$GV_DDB_TABL, SOR$GB_NUM_FILE, SOR$GL_DDB_PTR
!
!
!
! Routine Value:
!
!	SUCCESS or an error code.
!
!
!--


    begin


	!
	! Connect the RABs for all the input files.
	!

	incr FILE from 0 to .SOR$GB_NUM_FILE - 1 do

	    begin
	    local
		STATUS;
	    SOR$GL_DDB_PTR = .SOR$GV_DDB_TABL [.FILE];	! Point to proper DDB
	    STATUS = SOR$$RAB_INIT (.SOR$GW_IN_LRL);	! Init the RAB
	    if not .STATUS then return .STATUS;		! Check for errors.
	    end;


	SUCCESS
	end;

%title 'BUILD_LIST'

routine BUILD_LIST =


!++
!
!
! Functional Description:
!
!	Routine to set up the merge list.  Creates space for
!	enough record nodes to do the merge.  Reads in one record from
!	each of the input files and builds an ordered list.
!
!
!
! Global Parameters:
!
!	MERGE_LISTHEAD, SOR$GL_IN_BUF, SOR$GL_IN_LRL, SOR$GL_KEY_SIZE.
!
!
!
! Routine Value:
!
!	SUCCESS or an error message.
!
!
!--


    begin

	local
	    TEMP,
	    NODE;

	map
	    NODE: ref block [LISTHEAD_SIZE];



	TOT_REC_SIZE = .SOR$GW_IN_LRL + .SOR$GB_KEY_SIZE;
	TOT_NODE_SIZE = .TOT_REC_SIZE + LISTHEAD_SIZE * %UPVAL;
	VM_LIMIT = .TOT_NODE_SIZE * (.SOR$GB_MERGE + 1);
	if .SOR$GV_FLAGS [SOR$GK_FILE_IO] then VM_LIMIT = .VM_LIMIT + .SOR$GW_IN_LRL;  ! Make room for the input buffer.

	if not LIB$GET_VM (VM_LIMIT, SOR$GL_IN_BUF) then

		return SOR$_VM_FAIL;

	HIGH_VM = .SOR$GL_IN_BUF + .VM_LIMIT;

	! Initialize the merge list.

	MERGE_LISTHEAD [PTR_TO_NEXT] = MERGE_LISTHEAD;
	MERGE_LISTHEAD [PTR_TO_PREV] = MERGE_LISTHEAD;
	NODE = .SOR$GL_IN_BUF;		! Point to 1st node.
	if .SOR$GV_FLAGS [SOR$GK_FILE_IO] then NODE = .NODE + .SOR$GW_IN_LRL;  ! Keep buffer space free.

	incr INDEX from 1 to .SOR$GB_MERGE do

	    begin
		TEMP = INPUT_NODE (.NODE, .INDEX);
		if .TEMP neq SS$_ENDOFFILE then

		    begin
			if not .TEMP then return .TEMP;
			NODE [INPUT_FILE] = .INDEX; ! Save input file.
			NODE [RUN] = 0;		! All are in run 0;
			INSERT_REC (.NODE);	! Insert into the list.
			NODE = .NODE + .TOT_NODE_SIZE; 	! Step to next node.
			end;

		end;

	FREE_NODE = .NODE;		! Extra node for RUN accounting.

	SUCCESS
	end;

%title 'SOR$DO_MERGE'

global routine SOR$DO_MERGE =


!++
!
!
!
! Functional Description:
!
!	Routine to do the merge for the file interface.  Merges the
!	files specified in the calls to SOR$PASS_FILES, closes the
!	output file, and calls SOR$END_SORT to clean up.
!
!
! Routine Value:
!
!	SUCCESS or an error code.
!
!
!
!--


    begin

	local
	    LENGTH,
	    TEMP;


	stacklocal
	    DESC : vector [2];




	!
	! Check for proper calling sequence.  Must be file_io and merge.
	!

	if not .SOR$GV_FLAGS [SOR$GK_MERGE2] or not .SOR$GV_FLAGS [SOR$GK_FILE_IO]
		then return SOR$_SORT_ON;



	!
	! Now get all the records in the merged file and output
	! them to the output file.
	!

	while 1 do

	    begin
		TEMP = SOR$$RET_MERGE (DESC, LENGTH);		! Get a merged record.
		if not .TEMP then
		    if .TEMP eql SS$_ENDOFFILE then exitloop
			else return .TEMP;			! Exit loop if no more records.

		TEMP = SOR$$PUT_RECORD (.LENGTH, .DESC [1]);	! Write the record to the output file.
		if not .TEMP then return .TEMP;			! Return if error.
		end;


	!
	! Clean up and return.
	!

	SOR$END_SORT ()

	end;

%title 'SOR$$RET_MERGE'

global routine SOR$$RET_MERGE (OUTPUT_DESC, LENGTH_ADR) =

!++
!
!
! Functional Description:
!
!	This routine returns a record from the merge to the user.
!
!
! Formal Parameters:
!
!	OUTPUT_DESC (ref)	descriptor of the array to hold the record.
!				OUTPUT_DESC [0] is the byte count of the
!				array, and OUTPUT_DESC [1] is the address
!				of the array.
!
!
!	LENGTH_ADR (ref)	is the actual size of the returned record.
!				(One word in length)
!
!
!
!
! Routine Value:
!
!	SUCCESS if a record is returned, SS$_ENDOFFILE if the merge
!	is over, and an error code otherwise.
!
!
!--

    begin

	local
	    REC_BLOCK,
	    REC_ADR,
	    OLD_FREE,				! Old FREE_NODE
	    REC_SIZE,				! Record data size.
	    TEMP;

	bind
	    LENGTH = .LENGTH_ADR : word;	! Length is only one word.
	map
	    REC_BLOCK: ref block [],
	    OLD_FREE:  ref block [],
	    OUTPUT_DESC: ref block [2];


	macro					! Macros for accessing OUTPUT_DESC
	    DESC_SIZE = 0, 0, 16, 0%,		! Size of buffer area.
	    DESC_ADR  = 1, 0, 32, 0%;		! Address of buffer.



	REC_BLOCK = .MERGE_LISTHEAD [PTR_TO_NEXT];

	if .REC_BLOCK eql MERGE_LISTHEAD then return SS$_ENDOFFILE;

	remque (.REC_BLOCK, REC_BLOCK);		! Remove the head of the list.
	REC_SIZE = .REC_BLOCK [SIZE];		! Get record size.
	REC_ADR = REC_BLOCK [DATA] + .SOR$GB_KEY_SIZE;  ! Get address of record.

	!
	! If doing file I/O, then just copy the address of the record
	! to the output descriptor.  Otherwise, copy the record to
	! the buffer that is pointed to by the descriptor.
	!

	if .SOR$GV_FLAGS [SOR$GK_FILE_IO] then

	    begin
		OUTPUT_DESC [DESC_SIZE] = .REC_SIZE;		! Set size.
		OUTPUT_DESC [DESC_ADR]  = .REC_ADR;		! And record address.
		end

	  else

	    begin
		TEMP = LIB$SCOPY_R_DX (REC_SIZE, .REC_ADR, .OUTPUT_DESC);
		if not .TEMP then return .TEMP;
		end;

	LENGTH = .REC_SIZE;			! Copy record size back to user.

	OLD_FREE = .FREE_NODE;			! Copy addr of old free record.
	FREE_NODE = .REC_BLOCK;			! Remember last output record.

	TEMP = INPUT_NODE (.OLD_FREE, .REC_BLOCK [INPUT_FILE]);

	if .TEMP then

	    begin
		OLD_FREE [INPUT_FILE] = .REC_BLOCK [INPUT_FILE];
		if MERGE_COMPARE (.OLD_FREE, .REC_BLOCK) geq 0 then
			OLD_FREE [RUN] = .REC_BLOCK [RUN]
		    else
			begin
			    if .SOR$GV_FLAGS [SOR$GK_CHK_SEQ] then
				    if .SOR$GV_FLAGS [SOR$GK_UTILITY] then
						SOR$$ERROR (SOR$_BAD_ORDER, .OLD_FREE [INPUT_FILE])
					else
						return SOR$_BAD_ORDER;
			OLD_FREE [RUN] = .REC_BLOCK [RUN] + 1;
			end;

		INSERT_REC (.OLD_FREE);
		end

	else

	    if .TEMP neq SS$_ENDOFFILE then return .TEMP;

	SUCCESS
	end;

%title 'INPUT_NODE'

routine INPUT_NODE (NODE, FILE) =



!++
!
!
!
! Functional Description:
!
!	Routine to input a record for the merge.  Calls the input subroutine,
!	checks the returned values, and if necessary, builds the key for
!	the record.
!
!
!
! Formal Parameters:
!
!	NODE (ref)		pointer to the node to contain the new record.
!
!	FILE (val)		the file number to read the record from.
!
!
!
! Routine Value:
!
!	SUCCESS if the record was read, SS$_ENDOFFILE if end of file,
!	or error code.
!
!
!
!--

    begin


	map
	    NODE: ref block [LISTHEAD_SIZE];

	local
	    TEMP;


	stacklocal
	    DESC: vector [2];		! Record descriptor.




	! Read the record using the user supplied or standard input
	! routine.

	DESC [0] = .SOR$GW_IN_LRL;	! Record length.
	DESC [1] = NODE [DATA] + .SOR$GB_KEY_SIZE; ! Beginning of record data.

	NODE [SIZE] = 0;			   ! User may only pass a word, so clear whole longword.

	TEMP = (.SOR$GL_INP_ROUT) (DESC [0], FILE, NODE [SIZE]);

	! Check for errors.

	if not .TEMP then return .TEMP;
	if .NODE [SIZE] gtru .SOR$GW_IN_LRL then return SOR$_BAD_LRL;

	! Now build the key if the default key comparison routine is
	! going to be used.
	!

	if .SOR$GB_KEY_SIZE gtru 0 then return SOR$$BUILD_KEY (0, NODE [DATA]);

	SUCCESS

	end;



%title 'INSERT_REC'

routine INSERT_REC (REC_BLOCK): novalue =

!++
!
!
! Functional Description:
!
!	Routine to insert a record in the merge list.  The list
!	is kept ordered so the record on top of the list is the
!	next one to be output from the merge.
!
!
!
! Formal parameters:
!
!	REC_BLOCK: (ref)	the record node to be inserted into the list.
!
!
!
!
!--

    begin

	local
	    CUR_NODE;

	map
	    REC_BLOCK: ref block [],
	    CUR_NODE:  ref block [];



	CUR_NODE = .MERGE_LISTHEAD [PTR_TO_NEXT];

	incr INDEX from 1 to .SOR$GB_MERGE do

	    if .CUR_NODE neq MERGE_LISTHEAD then

		if MERGE_COMPARE (.CUR_NODE, .REC_BLOCK) eql -1 then

			CUR_NODE = .CUR_NODE [PTR_TO_NEXT]

		    else

			exitloop

		else

		    exitloop;


	insque (.REC_BLOCK, .CUR_NODE [PTR_TO_PREV]);
	end;

%title 'MERGE_COMPARE'

routine MERGE_COMPARE (REC_BLOCK1, REC_BLOCK2) =

!++
!
!
! Functional Description:
!
!	Routine to compare two records for the merge.  First
!	tests the run numbers, then tests the keys, finally
!	tests the input file number.
!
!
!
! Formal Parameters:

!
!	REC_BLOCK1 (ref)	record block containing the 1st record for
!				comparison.
!
!	REC_BLOCK2 (ref)	record block containing the 2nd record for
!				comparison.
!
!
! Routine Value:
!
!	1 if REC_BLOCK1 > REC_BLOCK2, -1 if REC_BLOCK1 < REC_BLOCK2.
!	Note that the records will never be equal since the input file
!	number is included in the comparison.
!
!
!--


    begin


	local
	    TEMP;

	map
	    REC_BLOCK1: ref block [],
	    REC_BLOCK2: ref block [];


	if .REC_BLOCK1 [RUN] eql .REC_BLOCK2 [RUN] then

	    begin
		TEMP = .SOR$GL_KEY_COMP;
		TEMP = JSBR2 (.TEMP, REC_BLOCK1 [DATA], REC_BLOCK2 [DATA]);
		if .TEMP neq 0 then return .TEMP
		    else return SIGN (.REC_BLOCK1 [INPUT_FILE] - .REC_BLOCK2 [INPUT_FILE]);
		end;

	SIGN (.REC_BLOCK1 [RUN] - .REC_BLOCK2 [RUN])
	end;



%title 'SOR$$INP_ROUT'

routine SOR$$INP_ROUT (DESC, FILE_ARG, LENGTH) =


!++
!
!
! Functional Description:
!
!	Routine to do record input for the merge file interface.
!
!
!
! Formal Parameters:
!
!	DESC (ref)		DESC [0] is the length of the record buffer.
!				DESC [1] is the address of the record buffer.
!
!	FILE_ARG (ref)		is the number of the file to do input.
!				(From 1 to .SOR$GB_NUM_FILE)
!
!	LENGTH (ref)		is the size of the record that was input.
!				(Set by SOR$$INP_ROUT)
!
!
!
! Routine Value:
!
!	SUCCESS or SS$_ENDOFFILE if all input files have reached EOF.
!
!
!
!--


    begin


	local
	    STATUS,
	    FILE,
	    DESC2: vector[3];


	map
	    DESC : ref vector [2];


	literal						! Access to descriptor vector.
	    LEN = 0,					! Length field.
	    ADR = 1;					! Address field.



	FILE = ..FILE_ARG - 1;			! Change to table index.
	if .FILE gtru .SOR$GB_NUM_FILE then return SS$_ENDOFFILE;  ! Should never happen.

	SOR$GL_DDB_PTR = .SOR$GV_DDB_TABL [.FILE];	! Point to input file RAB/FAB.

	STATUS = SOR$$GET_RECORD (DESC2);		! Input the record.

	if .STATUS eql RMS$_EOF then return SS$_ENDOFFILE;	! Check for EOF.
	if not .STATUS then return .STATUS;

	if .DESC2 [LEN] gtru .DESC [LEN] then return SS$_ENDOFFILE;  ! Another horrible error.

	.LENGTH = .DESC2 [LEN];				! Copy length of record.

!++
!	The first argument of the following ch$move was changed from
!	".DESC2 [LEN]" to ".SOR$GW_IN_LRL" to make sure that the tree
!	has zero-filled records from which to build the key. This will
!	solve the problem of having trash accidentially left in the
!	key buffer.
!JDN		17-SEP-81
!--
	ch$move (.SOR$GW_IN_LRL, ch$ptr (.DESC2 [ADR]), ch$ptr (.DESC [ADR]));  ! Move the record.


	SUCCESS
	end;

%title 'SOR$$END_MERGE'

global routine SOR$$END_MERGE =


!++
!
!
! Functional Description:
!
!	This routine gives back all resources that were used by the
!	merge.
!
!
!
! Routine Value:
!
!	SUCCESS or an error code.
!
!
!__

    begin


	literal
	    CLOSE_OUT = 1;			! Flag to close the output file.

	local
	    ERROR_CODE;				! True if an error occurs.

	ERROR_CODE = 0;				! No error yet.


	if .VM_LIMIT neq 0 then

	    if not LIB$FREE_VM (VM_LIMIT, SOR$GL_IN_BUF) then

		ERROR_CODE = 1;


	!
	! If FILE_IO, clear the input file DDBs and close the
	! output file.
	!

	if .SOR$GV_FLAGS [SOR$GK_FILE_IO] then

	    begin
		incr FILE from 0 to .SOR$GB_NUM_FILE - 1 do

		    begin
			if not LIB$FREE_VM (%ref (SOR$GK_DDB_SIZE), SOR$GV_DDB_TABL [.FILE])
			  then ERROR_CODE = 1;

			SOR$GV_DDB_TABL [.FILE] = 0;
			end;

		if not SOR$$CLOSE_FILE (CLOSE_OUT) then ERROR_CODE = 1;

		SOR$GB_NUM_FILE = 0;
		SOR$GW_MAX_LRL  = 0;
		SOR$GL_TOT_ALQ  = 0;
		end;

	!
	! Clear some variables.
	!

	SOR$GV_FLAGS = 0;
	SOR$GB_KEY_SIZE = 0;
	SOR$GB_MERGE = 0;
	SOR$GL_IN_ALQ = 0;
	SOR$GW_IN_LRL = 0;
	TOT_NODE_SIZE = 0;
	TOT_REC_SIZE = 0;

	if .ERROR_CODE then return SOR$_CLEAN_UP;

	SUCCESS
	end;
    end
eludom
