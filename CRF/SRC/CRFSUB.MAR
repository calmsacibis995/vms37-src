	.title	crfsub	subroutines for cross reference
	.ident	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;   FACILITY
;
;	Cross reference
;
;   ABSTRACT
;
;	Routines to manipulate key hash table
;
;   ENVIRONMENT
;
;	Native mode, user mode
;
;   AUTHOR
;
;	Benn Schreiber, 3-Dec-1979
;
;   MODIFIED BY
;
;--

	.sbttl	Declarations
;
;	Symbol defintions
;

	$keydef				;Key offsets
	$crfdef				;Cref control table offsets

	.psect	$code$,exe,nowrt

steps:	.long	1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 32767	;Steps for shellsort
    numsteps = .-steps/4

	.default displacement,word

	.sbttl	sort_hash_table	sort the hash table into a list

;++
;
; Inputs:
;
;	4(ap)	number of entries in hash table
;	8(ap)	Address of vector to hold addresses of sorted entries
;	r11	Address of cross-reference control table
;
; Outputs:
;
;	the hash table is sorted and the vector is filled in with the
;	addresses of the key blocks
;--

	.entry	sort_hash_table,^m<r2, r3, r4, r5, r6, r7, r8, r9, r10>

;
; determine highest step to use
;
	clrl	r10			;index starts at 0
	movl	crf$l_entries(r11),r0	;get number of keys
10$:	cmpl	steps+8[r10],r0		;this step high enough?
	bgeq	20$			;if geq yes
	acbl	#<numsteps-3>,#1,r10,10$;no--look through all - 3
	movl	#<numsteps-3>,r10	;lots of symbols--use all steps
20$:	subl3	#4,8(ap),-(sp)		;set table address-4 on stack
	pushl	r0			;set # of entries on stack
;
; now copy addresses of all entries into the table
;
	movl	crf$l_hasht(r11),r9	;get address of hash table
	movl	8(ap),r8		;get address of sorted list vector
	movl	4(ap),r5		;get no. of entries in hash table

30$:	movl	(r9)+,r7		;next hash table entry
	beql	50$			;if eql then empty bucket so skip it
40$:	movl	r7,(r8)+		;put entry into sorted list
	movl	key$l_next(r7),r7	;chain down the hash bucket
	bneq	40$			;and insert them all into the sorted list
50$:	sobgtr	r5,30$			;loop over all hash entries
	cmpl	(sp),#1			;If there are not at least two entries
	blequ	sort_exit		; then quit now
;
; now do the shell sort on the list.  The shell sort is described in
; Knuth Vol. 3 and is also referred to as the Diminishing Increment Sort.
;
shell_sort:
10$:	movl	steps[r10],r9		;get step value for this "t"
	movab	1(r9),r8		;set up loop for step+1 to index
20$:	movl	@4(sp)[r8],r6		;get address of key block for j'th key
	subl3	r9,r8,r7		;i=j-h
30$:	movl	key$l_keyadr(r6),r5	;get j'th key address
	movl	@4(sp)[r7],r4		;get address of key block for i'th key
	movl	key$l_keyadr(r4),r3	;get key address
	blbs	crf$b_keytype(r11),40$	;branch if binary keys
	movzbl	(r5)+,r0		;get key lengths
	movzbl	(r3)+,r1		;...
	pushr	#^m<r4,r5>
	cmpc5	r0,(r5),#0,r1,(r3)	;compare keys
	popr	#^m<r4,r5>
	bgequ	50$
	brb	60$
40$:	cmpl	r5,r3			;compare binary keys
	blssu	60$
50$:	addl3	r7,r9,r0		;compute i+h
	movl	r6,@4(sp)[r0]		;ids(i+h) = val
	brb	70$
60$:	addl3	r7,r9,r0		;ids(i+h) = ids(i)
	movl	r4,@4(sp)[r0]
	subl2	r9,r7			;i=i-h
	bgtr	30$
	brb	50$			;go set ids(i+h)=val
70$:	acbl	(sp),#1,r8,20$		;loop for all entries in table
80$:	sobgeq	r10,10$			;loop for all steps
sort_exit:
	ret

	.END
