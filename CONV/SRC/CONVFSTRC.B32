%TITLE	'VAX-11 CONVERT'
MODULE	CONV$FSTRC	( IDENT='V03-003',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	CONVERT index record processing routines
!
! Contents:
!		CHECK_S_DUP
!		CHECK_NULL
!		SPLIT_DATA
!		IN_SEGMENT
!		COMPRESS_KEY
!		COMPRESS_INDEX
!		MAKE_INDEX
!		WRITE_VBN
!		COPY_KEY
!		CREATE_HIGH_KEY
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:        	August-1980
!
!
! Modified by:
!
!	V03-003 KBT0038		Keith Thompson		3-Apr-1982
!		Correct the vbn_size correction
!
!	V03-002 KBT0023		Keith Thompson		24-Mar-1982
!		Correct calculation of vbn_size in write_vbn
!
!	V03-001	KBT0013		Keith Thompson		16-Mar-1982
!		Fix the call to compress_data
!****


PSECT
	OWN	= _CONV$FAST_D	(PIC),
	GLOBAL	= _CONV$FAST_D	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$FAST_S	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';

DEFINE_ERROR_CODES;

LINKAGE
	IN_SEGMENT_LINK = JSB : 
		GLOBAL( BYTE_OFS = 6,
			NEXT_SEG = 7,
			NEXT_LEN = 8,
			KEY_BLOCK = 11 )
		NOTUSED( 3 );

EXTERNAL ROUTINE
	CONV$$CVT_TO_ASC	: CVT_TO_ASC_LINK,
	CONV$$COMPRESS_DATA	: JSB_LINK;

FORWARD ROUTINE
	IN_SEGMENT	: IN_SEGMENT_LINK;

EXTERNAL
	CONV$GW_OUT_REC_SIZ	: SIGNED WORD,		! Output Rec. Size

	CONV$GL_REC_BUF_PTR	: LONG,			! Bottom of Record Buffer

	CONV$AB_OUT_FAB		: $FAB_DECL,

	CONV$GB_PROL_V3		: BYTE,

!	Data Decl. for Fast Load routines
!
	CONV$GB_KEY_REF		: SIGNED BYTE,	! Current Key of Reference NOTE:
						! it is init. to -1 to indicate
						! that no key is selected.

	CONV$GL_RECORD_PTR,

	CONV$GL_DUP_BUF;

MACRO
!	Some needed macros to define the data record for a bucket
!
	IRC$L_RRV_VBN	= 3,0,32,0%,	! RRV VBN Pointer
	IRC$L_RRV_VBN3	= 5,0,32,0%,	! RRV VBN Pointer (Prologue 3)
	IRC$W_VAR_SIZ	= 7,0,16,0%,	! Var. Rec. Format Size field
	IRC$L_DUPCOUNT	= 2,0,32,0%,	! Duplicate count field
	IRC$W_DUPSZ	= 6,0,16,0%,	! Size field when dup. are allowed
	IRC$W_NODUPSZ	= 2,0,16,0%;	! Size field when dup. are not allowed


%SBTTL	'CHECK_S_DUP'
GLOBAL ROUTINE	CONV$$CHECK_S_DUP : JSB_REG =
!++
!
! Functional Description:
!
!	Checks if the current secondary key is a duplicate of the last key
!
! Calling Sequence:
!
!	CONV$$CHECK_S_DUP()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	1 - Key was a duplicate
!	0 - Key was NOT a duplicate
!
! Routines Called:
!
!	CONV$$CVT_TO_ASC
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_KEY_BLOCK;

    BIND
	SEG_TYPE	= .KEY_BLOCK + 88 : VECTOR [ ,BYTE ],
	SEG_SIZE	= .KEY_BLOCK + 44 : VECTOR [ ,BYTE ],
	SEG_POSI	= .KEY_BLOCK + 28 : VECTOR [ ,WORD ];

    LOCAL
	REC_PTR,
	DUP_PTR;

    ! Set up the pointers
    !
    REC_PTR = .CONV$GL_REC_BUF_PTR + 6;
    DUP_PTR = .CONV$GL_DUP_BUF;

    ! Copy the key into the dup buffer
    !
    INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1 ) BY 1
    DO
	BEGIN

	! If prologue 3 then convert to ascii during the move
	! else just do a ch$move
	!
	IF .CONV$GB_PROL_V3
	THEN
	    CONV$$CVT_TO_ASC ( .SEG_TYPE [ .I ],
				.SEG_SIZE [ .I ],
				.REC_PTR,
				.DUP_PTR )
	ELSE
	    CH$MOVE ( .SEG_SIZE [ .I ],.REC_PTR,.DUP_PTR );

	! Update the destination
	!
	DUP_PTR = .DUP_PTR + .SEG_SIZE [ .I ];

	! And the source
	!
	REC_PTR = .REC_PTR + .SEG_SIZE [ .I ]
	
	END;

    ! If this is the very first record then just return 0
    ! else compaire the record with the last one
    !
    IF .CTX [ CTX$V_FST ]
    THEN
	RETURN 0
    ELSE
	RETURN CH$EQL ( .KEY_BLOCK [ KEY$B_KEYSZ ],		! Key size
			.CTX [ CTX$L_LKP ],			! Old key
			.KEY_BLOCK [ KEY$B_KEYSZ ],
			.CONV$GL_DUP_BUF )			! New key

    END;

%SBTTL	'CHECK_NULL'
GLOBAL ROUTINE	CONV$$CHECK_NULL : JSB_REG =
!++
!
! Functional Description:
!
!	Checks is the current secondary key is a null key value
!
! Calling Sequence:
!
!	CONV$$CHECK_NULL()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	1 - Key was a null value
!	0 - Key was NOT a null value
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    BUILTIN
	CMPP;

    BIND
	SEG_SIZE = .KEY_BLOCK + 44 : VECTOR [ ,BYTE ],
	SEG_TYPE = .KEY_BLOCK + 88 : VECTOR [ ,BYTE ];

    LOCAL 
	KEYPTR,
	NUL;

    ! The new key is 6 bytes into the input record
    !
    KEYPTR = .CONV$GL_REC_BUF_PTR + 6;

    ! Check the record one segment at a time
    !
    INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1 ) BY 1
    DO

	! If we dont have a null then dont bother looking any further
	!
	IF ( NUL = ( CASE .SEG_TYPE [ .I ] FROM KEY$C_STRING TO KEY$C_PACKED OF
		SET
		[ KEY$C_PACKED ]  : BEGIN

				LOCAL NULL;

				NULL = 12;

				! The value returned by CMPP is backwards
				!
				IF CMPP( 0,NULL,
					 ( .SEG_SIZE [ .I ] * 2 ) - 1,
					 .KEYPTR ) EQLU 0
				THEN
				    _SET
				ELSE
				    _CLEAR

				END;

		[ KEY$C_STRING ]  : CH$EQL( 1,KEY_BLOCK [ KEY$B_NULLCHAR ],
					    .SEG_SIZE [ .I ],
					    .KEYPTR,
					    KEY_BLOCK [ KEY$B_NULLCHAR ] );

		[ KEY$C_SGNWORD ] : BEGIN

				    BIND KEY = .KEYPTR : SIGNED WORD;

				    KEY EQL 0

				    END;

		[ KEY$C_UNSGNWORD ] : BEGIN

				    BIND KEY = .KEYPTR : WORD;

				    KEY EQLU 0

				    END;

		[ KEY$C_SGNLONG ] : BEGIN

				    BIND KEY = .KEYPTR : SIGNED LONG;

				    KEY EQL 0

				    END;

		[ KEY$C_UNSGNLONG ] : BEGIN

				    BIND KEY = .KEYPTR : LONG;

				    KEY EQLU 0

				    END;

		TES ) )
	THEN
	    KEYPTR = .KEYPTR + .SEG_SIZE [ .I ]
	ELSE
	    EXITLOOP;

    RETURN .NUL


    END;

%SBTTL	'SPLIT_DATA'
GLOBAL ROUTINE	CONV$$SPLIT_DATA : JSB_REG =
!++
!
! Functional Description:
!
!	Copies the data record returned by GET_RECORD into the primary
!	key data buffer, for prologue 3 files it also extracts the key
!	from the data and places it into the record control buffer
!	Also checks to see if the present record is a duplicate of the
!	last record
!
! Calling Sequence:
!
!	CONV$$SPLIT_DATA()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	1 - Key was a duplicate
!	0 - Key was NOT a duplicate
!
! Routines Called:
!
!	CONV$$CVT_TO_ASC
!	IN_SEGMENT
!	CONV$$COMPRESS_DATA
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    BIND
	SEG_SIZE	= .KEY_BLOCK + 44 : VECTOR [ ,BYTE ],
	SEG_POSI	= .KEY_BLOCK + 28 : VECTOR [ ,WORD ];

    LOCAL
	DUP;

    ! For prologue 3 files we must extract the key and data from the input record
    !
    IF .CONV$GB_PROL_V3
    THEN
	BEGIN		! Prologue 3 processing

	BEGIN		! Extract the key

	BIND
	    SEG_TYPE	= .KEY_BLOCK + 88 : VECTOR [ ,BYTE ];

	LOCAL
	    OFFSET,
	    REC_PTR;		! Pointer TO the data buffer

	! Find out where the extracted key will go...
	! If we are doing key compression the start the control buffer + 13
	! else it's only 11
	!
	IF .KEY_BLOCK [ KEY$V_KEY_COMPR ]
	THEN
	    OFFSET = 13
	ELSE

	    ! If there is no record compression and the file is fixed then
	    ! there is no size field
	    !
	    IF .KEY_BLOCK [ KEY$V_REC_COMPR ] OR
		( .CONV$AB_OUT_FAB [ FAB$B_RFM ] EQL FAB$C_VAR )
	    THEN
		OFFSET = 11
	    ELSE
		OFFSET = 9;

	! Key goes here
	!
	REC_PTR = .CTX [ CTX$L_RCP ] + .OFFSET;

	! Move the key to the record buffer where it is suppose to be
	!
	INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1 ) BY 1
	DO
	    BEGIN

	    ! Move it an convert to ascii if necessary
	    !
	    CONV$$CVT_TO_ASC ( .SEG_TYPE [ .I ],		! Segment type
			    .SEG_SIZE [ .I ],			!    "	  size
			    .CONV$GL_RECORD_PTR + .SEG_POSI [ .I ],! Source
			    .REC_PTR );				! Destination

	    ! Increment destination
	    !
	    REC_PTR = .REC_PTR + .SEG_SIZE [ .I ]

	    END;

	! The size of the control record is the key size plus the overhead
	!
	CTX [ CTX$W_RCS ] = .KEY_BLOCK [ KEY$B_KEYSZ ] + .OFFSET;

	! Check for a duplicate with the last key
	!
	DUP = CH$EQL ( .KEY_BLOCK [ KEY$B_KEYSZ ],
			.CTX [ CTX$L_RCP ] + .OFFSET,		! New key
			.KEY_BLOCK [ KEY$B_KEYSZ ],
			.CTX [ CTX$L_LKP ] )			! Last key

	END;		! Extract the key

	BEGIN		! Process the data

	LOCAL
	    BUFFER_PTR;

	BEGIN		! Extract the data record

	GLOBAL REGISTER
	    BYTE_OFS = 6,	! Offset into the data record
	    NEXT_SEG = 7,	! No. of char. to the next segment
	    NEXT_LEN = 8;	! Length of next segment

	! Extract the data record
	!
	BYTE_OFS = 0;

	! Find out where to put the data record
	!
	IF .KEY_BLOCK [ KEY$V_REC_COMPR ]
	THEN
	    BUFFER_PTR = .CTX [ CTX$L_RDP ] + 2
	ELSE
	    BUFFER_PTR = .CTX [ CTX$L_RDP ];

	! Loop for the entire length of the record
	!
	WHILE .BYTE_OFS LSS .CONV$GW_OUT_REC_SIZ
	DO

	    ! If the this byte is in a key segment then ignore it and move
	    ! past this segment
	    !
	    IF IN_SEGMENT()
	    THEN
		BYTE_OFS = .NEXT_SEG + .NEXT_LEN
	    ELSE

		BEGIN

		! If the byte is not in a segment then move it into the buffer
		!
		CH$MOVE( .NEXT_SEG - .BYTE_OFS,
			 .CONV$GL_RECORD_PTR + .BYTE_OFS,
			 .BUFFER_PTR );

		BUFFER_PTR = .BUFFER_PTR + ( .NEXT_SEG - .BYTE_OFS );
		BYTE_OFS = .NEXT_SEG + .NEXT_LEN

		END

	END;		! Extract the data record

	! If there is record compression then do it
	!
	IF .KEY_BLOCK [ KEY$V_REC_COMPR ]
	THEN
	    BEGIN

	    REGISTER
		NXT_FIELD_PTR	= 6,
		CNT_FIELD_PTR	= 7,
		TRU_FIELD_PTR	= 3;

	    NXT_FIELD_PTR = .CTX [ CTX$L_RDP ];
	    CNT_FIELD_PTR = .BUFFER_PTR;

	    CONV$$COMPRESS_DATA();

	    ! We can now say what the data size might be
	    !
	    CTX [ CTX$W_RDS ] = .TRU_FIELD_PTR - .CTX [ CTX$L_RDP ]

	    END
	ELSE

	    ! If there is no compression then the data size is simular to above
	    !
	    CTX [ CTX$W_RDS ] = .BUFFER_PTR - .CTX [ CTX$L_RDP ]

	END		! Process the data

	END		! Prologue 3 processing
    ELSE
	BEGIN		! Prologue 2 processing

	LOCAL	    LKP_PTR;

	! For non prologue 3 files the size is simply what was returned by GET_RECORD
	!
	CTX [ CTX$W_RDS ] = .CONV$GW_OUT_REC_SIZ;

	! The control is a bit more complicated...
	!
	! Other files depend on var or fixed format
	!
	IF .CONV$AB_OUT_FAB [ FAB$B_RFM ] EQL FAB$C_FIX
	THEN
	    CTX [ CTX$W_RCS ] = IRC$C_FIXOVHDSZ
	ELSE
	    CTX [ CTX$W_RCS ] = IRC$C_VAROVHDSZ;

	! Check for duplicate key
	!
	! Compaire the index part of the record into the buffer segment by
	! segment. Since the last key value is in last key pointer
	! we can use it to compaire with RECORD_PTR  (The current
	! record).
	!
	LKP_PTR = .CTX [ CTX$L_LKP ];

	! Compaire the record one segment at a time
	!
	INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1 ) BY 1
	DO
	    BEGIN

	    DUP = CH$EQL ( .SEG_SIZE [ .I ],
			    .CONV$GL_RECORD_PTR + .SEG_POSI [ .I ],
			    .SEG_SIZE [ .I ],
			    .LKP_PTR );

	    LKP_PTR = .LKP_PTR + .SEG_SIZE [ .I ];

	    ! If they are not equal go no further else check the next segment
	    !
	    IF NOT .DUP
	    THEN
		EXITLOOP

	    END

	END;		! Prologue 2 processing

    RETURN .DUP

    END;

%SBTTL	'IN_SEGMENT'
ROUTINE	IN_SEGMENT : IN_SEGMENT_LINK =
!++
!
! Functional Description:
!
!	Determines if the current position in the data record is in a key
!	segment or not
!
! Calling Sequence:
!
!	IN_SEGMENT()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	BYTE_OFS - R6	Offset into the data record
!	NEXT_SEG - R7	Start of the next segment
!	NEXT_LEN - R8	Length of next segment
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	1 - Pointer is in a key segment
!	0 - Pointer is NOT in a key segment
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_KEY_BLOCK;

    EXTERNAL REGISTER
	    BYTE_OFS = 6,	! Offset into the data record
	    NEXT_SEG = 7,	! Start of the next segment
	    NEXT_LEN = 8;	! Length of next segment

    LOCAL	SEGMENT	: SIGNED;

    NEXT_SEG = .CONV$GW_OUT_REC_SIZ;
    NEXT_LEN = 0;

    SEGMENT = .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1;

    ! Check all of the segments
    !
    WHILE .SEGMENT GEQ 0
    DO
	BEGIN

	! See if we  are past a segment if so see if we are in it else
	! check the next segment
	!
	IF .BYTE_OFS GEQ .KEY_BLOCK [ ( 28 + ( .SEGMENT*2 )),0,16,0 ]
	THEN
	    BEGIN

	    ! See if we are in the segment.  If so return with the pointers
	    !
	    IF .BYTE_OFS LSS ( .KEY_BLOCK [ ( 44 + .SEGMENT ),0,8,0 ] +
				.KEY_BLOCK [ ( 28 + ( .SEGMENT*2 )),0,16,0 ] )
	    THEN
		BEGIN
		NEXT_SEG = .KEY_BLOCK [ ( 28 + ( .SEGMENT*2 )),0,16,0 ];
		NEXT_LEN = .KEY_BLOCK [ ( 44 + .SEGMENT ),0,8,0 ];
		RETURN 1
		END
	    END
	ELSE

	    ! If this segment is closer than the last one then change pointers
	    !
	    IF .NEXT_SEG GTR .KEY_BLOCK [ ( 28 + ( .SEGMENT*2 )),0,16,0 ]
	    THEN
		BEGIN
		NEXT_SEG = .KEY_BLOCK [ ( 28 + ( .SEGMENT*2 )),0,16,0 ];
		NEXT_LEN = .KEY_BLOCK [ ( 44 + .SEGMENT ),0,8,0 ]
		END;


	! Check the next segment
	!
	SEGMENT = .SEGMENT - 1
	END;

    RETURN 0

    END;

%SBTTL	'COMPRESS_KEY'
GLOBAL ROUTINE	CONV$$COMPRESS_KEY : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Does primary data level key compression for prologue 3 files
!
! Calling Sequence:
!
!	CONV$$COMPRESS_KEY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_KEY_BLOCK;

    LOCAL
	LENGTH,
	COUNT,
	RECORD_CTRL	: REF BLOCK [ ,BYTE ];

    BIND
	KEY	= .CTX [ CTX$L_RCP ] + 13 : VECTOR [ ,BYTE ];

    ! Start with the full length of the key
    !
    LENGTH = .KEY_BLOCK [ KEY$B_KEYSZ ];
    COUNT = 0;

    ! If this is not the first record in the bucket then compress off the front
    !
    IF .CTX [ CTX$W_USE ] NEQU 0
    THEN
	BEGIN

	BIND
	    LASTKEY	= .CTX [ CTX$L_LKP ] : VECTOR [ ,BYTE ];

	! Compaire with the last key
	!
	INCR I FROM 0 TO ( .LENGTH - 1 ) BY 1
	DO

	    ! If this character is the same as the character in the last key
	    ! then it can be compressed off.
	    !
	    IF .LASTKEY [ .I ] EQLU .KEY [ .I ]
	    THEN
		COUNT = .COUNT + 1
	    ELSE
		EXITLOOP;

	! The key could be a little bit shoter
	!
	LENGTH = .LENGTH - .COUNT

	END;

    ! If we truncated off bytes we must move what is left of the key in a little
    !
    CH$MOVE ( .LENGTH,KEY [ .COUNT ],KEY [ 0 ] );

    ! If there are some characters left do rear end truncation
    !
    IF .LENGTH GTR 1
    THEN

	! Start looking from the back to compress off trailing dups
	!
	DECR I FROM ( .LENGTH - 1 ) TO 1 BY 1
	DO

	    ! If this character is a dup cut it off by shorting the length
	    !
	    IF .KEY [ .I - 1 ] EQLU .KEY [ .I ]
	    THEN
		LENGTH = .LENGTH - 1
	    ELSE
		EXITLOOP;

    RECORD_CTRL = .CTX [ CTX$L_RCP ];

    ! Set the length field in the record
    !
    RECORD_CTRL [ 11,0,8,0 ] = .LENGTH;

    ! Set the count field in the record
    !
    RECORD_CTRL [ 12,0,8,0 ] = .COUNT;

    ! Set the record size field in the record
    !
    RECORD_CTRL [ 9,0,16,0 ] = .RECORD_CTRL [ 9,0,16,0 ] -
				( .KEY_BLOCK [ KEY$B_KEYSZ ] - .LENGTH );

    ! Set the new size of the control part of the record if needed
    !
    CTX [ CTX$W_RCS ] = .CTX [ CTX$W_RCS ] -
				( .KEY_BLOCK [ KEY$B_KEYSZ ] - .LENGTH );

    RETURN

    END;

%SBTTL	'COMPRESS_INDEX'
GLOBAL ROUTINE	CONV$$COMPRESS_INDEX : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Does prologue 3 index compression on the index level record
!
! Calling Sequence:
!
!	CONV$$COMPRESS_INDEX()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    LOCAL
	LENGTH,
	COUNT,
	RECORD_CTRL	: REF BLOCK [ ,BYTE ];

    BIND
	KEY	= .CTX [ CTX$L_RDP ] + 2 : VECTOR [ ,BYTE ];

!****! THIS CODE IS FOR REAR END COMPRESSION	!****!
!
!    ! If this is the last bucket in a level then we know the length
!    ! it is always 1 (F)
!    !
!    IF .BUCKET [ BKT$V_LASTBKT ]
!    THEN
!	LENGTH = 1
!    ELSE
!	BEGIN
!
!	! Make a pointer to the next key in the bucket below
!	!
!	BIND
!	    NXTKEY = (  BIND CTX_M1 = .CTX - CTX$K_BLN : BLOCK [ ,BYTE ];
!			IF .CTX [ CTX$B_LVL ] GTRU 1
!			THEN
!			    .CTX_M1 [ CTX$L_RDP ] + 2
!			ELSE
!			    IF .KEY_BLOCK [ KEY$V_KEY_COMPR ]
!			    THEN
!				.CTX_M1 [ CTX$L_RCP ] + 13
!			    ELSE
!				.CTX_M1 [ CTX$L_RCP ] + 11 ) : VECTOR[ ,BYTE ];
!
!	! Init. the record length
!	!
!	LENGTH = 0;
!
!	! Find out how many characters are needed to distingous the buckets
!	!
!	INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_KEYSZ ] - 1 ) BY 1
!	DO
!	    BEGIN
!
!	    LENGTH = .LENGTH + 1;
!
!	    ! Compare the characters until different
!	    !
!	    IF .KEY [ .I ] NEQU .NXTKEY [ .I ]
!	    THEN
!		EXITLOOP
!
!	    END
!
!	END;
!
    ! Init. counts
    !
    LENGTH = .KEY_BLOCK [ KEY$B_KEYSZ ];
    COUNT = 0;

    ! If this is not the first record in the bucket then do front compression
    !
    IF .CTX [ CTX$W_USE ] NEQU 0
    THEN
	BEGIN

	BIND
	    LASTKEY	= .CTX [ CTX$L_LKP ] : VECTOR [ ,BYTE ];

	! Compare this key with the last one
	!
	INCR I FROM 0 TO ( .LENGTH - 1 ) BY 1
	DO

	    ! Count the characters that are the same
	    !
	    IF .LASTKEY [ .I ] EQLU .KEY [ .I ]
	    THEN
		COUNT = .COUNT + 1
	    ELSE
		EXITLOOP;

	! The length of the key is a bit shorter now
	!
	LENGTH = .LENGTH - .COUNT

	END;

    ! Copy this key so that we have a last key to look at
    !
    CH$MOVE ( .KEY_BLOCK [ KEY$B_KEYSZ ],
			.CTX [ CTX$L_RDP ] + 2,
			.CTX [ CTX$L_LKP ] );

    ! If we shortened the key from the front move it
    !
    CH$MOVE ( .LENGTH,KEY [ .COUNT ],KEY [ 0 ] );

    ! If there are some characters left do rear end truncation
    !
    IF .LENGTH GTR 1
    THEN

	! Start looking from the back to compress off trailing dups
	!
	DECR I FROM ( .LENGTH - 1 ) TO 1 BY 1
	DO

	    ! If this character is a dup cut it off by shorting the length
	    !
	    IF .KEY [ .I - 1 ] EQLU .KEY [ .I ]
	    THEN
		LENGTH = .LENGTH - 1
	    ELSE
		EXITLOOP;

    ! Set up the fields in the record
    !
    RECORD_CTRL = .CTX [ CTX$L_RDP ];

    ! Set the record size field in the record
    !
    RECORD_CTRL [ 0,0,8,0 ] = .LENGTH;

    ! Set the compression count
    !
    RECORD_CTRL [ 1,0,8,0 ] = .COUNT;

    ! Set the new size of the data part of the record
    !
    CTX [ CTX$W_RDS ] = .LENGTH + 2;

    RETURN

    END;

%SBTTL	'MAKE_INDEX'
GLOBAL ROUTINE	CONV$$MAKE_INDEX : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Makes an index record for the current record being processed
!
! Calling Sequence:
!
!	CONV$$MAKE_INDEX
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_KEY_BLOCK;

    ! For the primary key we need to copy the current key
    ! into the last key buffer. (this has already been done for the
    ! secondary keys in LOAD_SECONDARY)
    !
    IF .CONV$GB_KEY_REF EQLU 0
    THEN
	BEGIN

	BIND
	    SEG_TYPE	= .KEY_BLOCK + 88 : VECTOR [ ,BYTE ],
	    SEG_SIZE	= .KEY_BLOCK + 44 : VECTOR [ ,BYTE ],
	    SEG_POSI	= .KEY_BLOCK + 28 : VECTOR [ ,WORD ];

	LOCAL
	    REC_PTR,
	    LKP_PTR;

	! Point to the destination
	!
	LKP_PTR = .CTX [ CTX$L_LKP ];

	! Copy the key into the last key buffer
	!
	INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1 ) BY 1
	DO
	    BEGIN

	    ! Point to the correct spot in the source string
	    !
	    REC_PTR = .CONV$GL_RECORD_PTR + .SEG_POSI [ .I ];

	    ! If prologue 3 then convert to ascii during the move
	    ! else just do a ch$move
	    !
	    IF .CONV$GB_PROL_V3
	    THEN
		CONV$$CVT_TO_ASC ( .SEG_TYPE [ .I ],
				.SEG_SIZE [ .I ],
				.REC_PTR,
				.LKP_PTR )
	    ELSE
		CH$MOVE( .SEG_SIZE [ .I ],.REC_PTR,.LKP_PTR );

	    ! Update the destination
	    !
	    LKP_PTR = .LKP_PTR + .SEG_SIZE [ .I ]

	    END
	END;

    ! Copy the key from the last key buffer into the index record buffer
    !
    BEGIN

    LOCAL
	OFFSET,
	CTX_P1	: REF BLOCK [ ,BYTE ];

    ! We need the contex block from the level above
    !
    CTX_P1 = .CTX + CTX$K_BLN;

    ! Account for control bytes if any
    !
    IF .KEY_BLOCK [ KEY$V_IDX_COMPR ]
    THEN
	OFFSET = 2
    ELSE
	OFFSET =0;

    CH$MOVE ( .KEY_BLOCK [ KEY$B_KEYSZ ],
		.CTX [ CTX$L_LKP ],
		.CTX_P1 [ CTX$L_RDP ] + .OFFSET );

    ! Set the index record size
    !
    CTX_P1 [ CTX$W_RDS ] = .KEY_BLOCK [ KEY$B_KEYSZ ] + .OFFSET;

    ! Set the index control size
    !
    IF .CONV$GB_PROL_V3
    THEN

	! The record control size is simply the size of the
	! VBN pointer to the bucket
	!
	CTX_P1 [ CTX$W_RCS ] = .CTX [ CTX$V_VBN ] + 2

    ELSE

	! The record control size is the size of the
	! VBN pointer to the bucket plus one byte of control info
	!
	CTX_P1 [ CTX$W_RCS ] = .CTX [ CTX$V_VBN ] + 3

    END;

    RETURN

    END;

%SBTTL	'WRITE_VBN'
GLOBAL ROUTINE	CONV$$WRITE_VBN : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Writes the vbn pointer into the index record, also sets the control
!	bytes describing the vbn pointer size
!
! Calling Sequence:
!
!	CONV$$WRITE_VBN
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_KEY_BLOCK;

    LOCAL
	VBN_SIZE,
	CTX_P1		: REF BLOCK [ ,BYTE ],
	RECORD_CTRL	: REF BLOCK [ ,BYTE ];

    CTX_P1 = .CTX + CTX$K_BLN;

    RECORD_CTRL = .CTX_P1 [ CTX$L_RCP ];

    ! Get the size in bits of the vbn
    !
    VBN_SIZE = ( .CTX [ CTX$V_VBN ] + 2 ) * 8;

    ! The control bytes are different for prologue 3 files
    !
    IF .CONV$GB_PROL_V3
    THEN
	RECORD_CTRL [ 0,0,.VBN_SIZE,0 ] = .CTX [ CTX$L_VBN ]
    ELSE
	BEGIN
	RECORD_CTRL [ IRC$B_CONTROL ] = .CTX [ CTX$V_VBN ];
	RECORD_CTRL [ 1,0,.VBN_SIZE,0 ] = .CTX [ CTX$L_VBN ]
	END;

    RETURN

    END;

%SBTTL	'COPY_KEY'
GLOBAL ROUTINE	CONV$$COPY_KEY ( OFFSET ) : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Copies the data record for secondary indexies into the proper
!	data record buffer and does compression if necessary
!
! Calling Sequence:
!
!	CONV$$COPY_KEY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_KEY_BLOCK;

    BIND
	COUNT = OFFSET;

    ! If this is a prologue 3 file then the offset is either 0 or 2
    ! depending on compression
    !
    IF .CONV$GB_PROL_V3
    THEN
	IF .KEY_BLOCK [ KEY$V_IDX_COMPR ]
	THEN
	    OFFSET = 2
	ELSE
	    OFFSET = 0;

    ! Move the key to the record control buffer
    !
    CH$MOVE ( .KEY_BLOCK[ KEY$B_KEYSZ ],
		.CONV$GL_DUP_BUF,
		.CTX [ CTX$L_RCP ] + .OFFSET );

    ! If there is compression...
    !
    IF .KEY_BLOCK [ KEY$V_IDX_COMPR ]
    THEN
	BEGIN

	LOCAL
	    LENGTH,
	    RECORD_CTRL	: REF BLOCK [ ,BYTE ];

	! Point to the current key
	!
	BIND
	    KEY	= .CTX [ CTX$L_RCP ] + .OFFSET : VECTOR [ ,BYTE ];

	! Start with the full length of the key (NOTE: count was zeroed above)
	!
	LENGTH = .KEY_BLOCK [ KEY$B_KEYSZ ];

	! If this is not the first record in the
	! bucket then compress off the front
	!
	IF .CTX [ CTX$W_USE ] NEQU 0
	THEN
	    BEGIN

	    ! Point to the last key processed
	    !
	    BIND
		LASTKEY	= .CTX [ CTX$L_LKP ] : VECTOR [ ,BYTE ];

	    ! Compaire with the last key
	    !
	    INCR I FROM 0 TO ( .LENGTH - 1 ) BY 1
	    DO

		! If this character is the same as the character in the
		! last key then it can be compressed off.
		!
		IF .LASTKEY [ .I ] EQLU .KEY [ .I ]
		THEN
		    COUNT = .COUNT + 1
		ELSE
		    EXITLOOP;

	    ! The key could be a little bit shorter
	    !
	    LENGTH = .LENGTH - .COUNT

	    END;

	! If we truncated off bytes we must move what is
	! left of the key in a little
	!
	CH$MOVE ( .LENGTH,KEY [ .COUNT ],( .CTX [ CTX$L_RCP ] + 2 ) );

	! If there are some characters left do rear end truncation
	!
!	IF .LENGTH GTR 1
!	THEN
!
!	    ! Start looking from the back to compress off trailing dups
!	    !
!	    DECR I FROM ( .LENGTH - 1 ) TO 1 BY 1
!	    DO
!
!		! If this character is a dup cut it off by shorting the length
!		!
!		IF .KEY [ .I - 1 ] EQLU .KEY [ .I ]
!		THEN
!		    LENGTH = .LENGTH - 1
!		ELSE
!		    EXITLOOP;

	RECORD_CTRL = .CTX [ CTX$L_RCP ];

	! Set the length field in the record
	!
	RECORD_CTRL [ 0,0,8,0 ] = .LENGTH;

	! Set the count field in the record
	!
	RECORD_CTRL [ 1,0,8,0 ] = .COUNT;

	! Set the size
	!
	CTX [ CTX$W_RCS ] = ( .KEY_BLOCK [ KEY$B_KEYSZ ] - .LENGTH ) + 2

	END
    ELSE

	! Set the size
	!
	CTX [ CTX$W_RCS ] = .KEY_BLOCK [ KEY$B_KEYSZ ] + .OFFSET;

    RETURN

    END;

%SBTTL	'CREATE_HIGH_KEY'
GLOBAL ROUTINE	CONV$$CREATE_HIGH_KEY	: NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Creates a high key vaule index for the current key of reference
!	and data type
!
! Calling Sequence:
!
!	CONV$$CREATE_HIGH_KEY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    BUILTIN
	CVTLP;

    LOCAL
	CTX_P1		: REF BLOCK [ ,BYTE ],
	RECORD_DATA	: REF BLOCK [ ,BYTE ];

    ! Set up the control info for the index record
    !
    CONV$$WRITE_VBN();

    ! The record we are making is actually for the level above
    !
    CTX_P1 = .CTX + CTX$K_BLN;

    ! Get the start where the key should go
    !
    IF .KEY_BLOCK [ KEY$V_IDX_COMPR ]
    THEN
	RECORD_DATA = 2
    ELSE
	RECORD_DATA = 0;

    ! We know what the size of the finished record is now
    !
    CTX_P1 [ CTX$W_RDS ] = .KEY_BLOCK [ KEY$B_KEYSZ ] + .RECORD_DATA;

    ! Actually point to the record
    !
    RECORD_DATA = .RECORD_DATA + .CTX_P1 [ CTX$L_RDP ];

    ! Loop for all of the segments
    !
    INCR I FROM 0 TO ( .KEY_BLOCK [ KEY$B_SEGMENTS ] - 1 ) BY 1
    DO
	BEGIN

	! Select the data type
	!
	SELECTONE .KEY_BLOCK [ ( 88 + .I ),0,8,0 ] OF
	SET
	    [ KEY$C_STRING ]  : BEGIN

				LOCAL HIGH_VALUE : BYTE;

				HIGH_VALUE = %X'FF';
				CH$FILL ( .HIGH_VALUE,
					  .KEY_BLOCK [ ( 44 + .I ),0,8,0 ],
					  .RECORD_DATA )
				END;

	    [ KEY$C_SGNWORD ]	: RECORD_DATA [ 0,0,16,0 ] = %X'7FFF';

	    [ KEY$C_UNSGNWORD ]	: RECORD_DATA [ 0,0,16,0 ] = %X'FFFF';

	    [ KEY$C_SGNLONG ]	: RECORD_DATA [ 0,0,32,0 ] = %X'7FFFFFFF';

	    [ KEY$C_UNSGNLONG ]	: RECORD_DATA [ 0,0,32,0 ] = %X'FFFFFFFF';

	    [ KEY$C_PACKED ]  : BEGIN

				LOCAL HIGH_VALUE : LONG;

				HIGH_VALUE = -1;

				CVTLP ( HIGH_VALUE,
					KEY_BLOCK [ ( 44 + .I ),0,8,0 ],
					.RECORD_DATA )
				END;
	TES;

	! Update the pointer (add the segment length)
	!
	RECORD_DATA = .RECORD_DATA + .KEY_BLOCK [ ( 44 + .I ),0,8,0 ]

	END;

    RETURN

    END;

END	ELUDOM
