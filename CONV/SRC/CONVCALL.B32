%TITLE	'VAX-11 CONVERT'
MODULE	CONV$CALL	( IDENT='V03-001',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	CONVERT sharable image callable routines
!
! Contents:
!		PASS_FILES
!		PASS_OPTIONS
!		CONVERT
!		RECLAIM
!		RUNDOWN
!		CONDITION_HANDLER
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	August-1981
!
!
! Modified by:
!
!	V03-001	KBT0021		Keith Thompson		23-Mar-1982
!		Set defered write on output file
!
!****


PSECT
	OWN	= _CONV$OWN	(PIC),
	GLOBAL	= _CONV$GLOBAL	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';
REQUIRE	'SRC$:RECLDEF';

EXTERNAL ROUTINE
	LIB$ESTABLISH		: ADDRESSING_MODE ( GENERAL ),
	LIB$SIG_TO_RET		: ADDRESSING_MODE ( GENERAL ),
	CONV$$PARSE_DEF,
	CONV$$OPEN_INPUT,
	CONV$$OPEN_OUTPUT,
	CONV$$CREATE_BUFFER,
	CONV$$CONVERT,
	CONV$$GET_VM		: JSB_LINK,
	CONV$$FREE_VM		: NOVALUE JSB_LINK,
	CONV$$FREE_TEMP_VM	: NOVALUE JSB_LINK,
	CONV$$RMS_OPEN_ERROR	: NOVALUE,
	RECL$$OPEN_FILE,
	RECL$$ALLOCATE_BUFFERS	: JSB_REG_9,
	RECL$$GET_NEXT_KEY	: JSB_REG_9,
	RECL$$SCAN_DATA_LEVEL	: JSB_REG_9;

FORWARD ROUTINE
	RUNDOWN			: NOVALUE,
	CONDITION_HANDLER;

DEFINE_ERROR_CODES;

EXTERNAL
	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],
	CONV$GB_CURRENT_FILE	: BYTE,

	CONV$AL_IN_FILE_NAM	: VECTOR [ ,LONG ],
	CONV$AR_OUT_FILE_NAM	: REF DESC_BLK,
	CONV$AR_FDL_FILE_NAM	: REF DESC_BLK,
	CONV$AB_EXC_RAB		: $RAB_DECL,
	CONV$AB_IN_XABSUM	: $XABSUM_DECL,
	CONV$AB_IN_NAM		: $NAM_DECL,
	CONV$AB_IN_FAB		: $FAB_DECL,
	CONV$AB_IN_RAB		: $RAB_DECL,
	CONV$AB_OUT_XABSUM	: $XABSUM_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL,
	CONV$AB_RFA_FAB		: $FAB_DECL,
	CONV$AB_RFA_RAB		: $RAB_DECL,
	RECL$AB_IN_FAB		: $FAB_DECL,
	RECL$AB_IN_RAB		: $RAB_DECL;

LITERAL
	COUNTERS = 4,		! Number of counters
	OPTIONS  = 19;		! Number of options

OWN
	! Exception fab for opens and closes
	!
	EXC_FAB		: $FAB_DECL,

	! Call sequence counter
	!
	SEQUENCE	: BYTE INITIAL( 0 ),

	! The Option Flags:
	!
	OPTION_BLOCK	: VECTOR [ OPTIONS + 1,LONG ],	! All of the options
							! plus one for the size

	! The counters
	!
	COUNT_BLOCK	: VECTOR [ COUNTERS + 1,LONG ];	! All of the counters

BIND
	OPTION_COUNT	= OPTION_BLOCK [ 0 ] : LONG,	! Option count
	COUNT_COUNT	= COUNT_BLOCK  [ 0 ] : LONG;	! Counters count

GLOBAL BIND

	! The order of these options define the option block for the call
	! interface. DO NOT change them.
	!
	CONV$GL_CREATE	= OPTION_BLOCK [  1 ] : LONG,	! CREATE
	CONV$GL_SHARE	= OPTION_BLOCK [  2 ] : LONG,	! SHARE
	CONV$GL_FAST	= OPTION_BLOCK [  3 ] : LONG,	! FAST
	CONV$GL_MERGE	= OPTION_BLOCK [  4 ] : LONG,	! MERGE
	CONV$GL_APPEND	= OPTION_BLOCK [  5 ] : LONG,	! APPEND
	CONV$GL_SORT	= OPTION_BLOCK [  6 ] : LONG,	! SORT
	CONV$GL_WORK_F	= OPTION_BLOCK [  7 ] : LONG,	! WORK_FILES
	CONV$GL_KEY	= OPTION_BLOCK [  8 ] : LONG,	! KEY
	CONV$GL_PAD	= OPTION_BLOCK [  9 ] : LONG,	! PAD_RECORDS
	CONV$GL_PAD_CHAR= OPTION_BLOCK [ 10 ] : LONG,	! Pad character
	CONV$GL_TRUNCATE= OPTION_BLOCK [ 11 ] : LONG,	! TRUNCATE
	CONV$GL_EXIT	= OPTION_BLOCK [ 12 ] : LONG,	! EXIT
	CONV$GL_FIX	= OPTION_BLOCK [ 13 ] : LONG,	! FIXED_WRITE
	CONV$GL_FILL	= OPTION_BLOCK [ 14 ] : LONG,	! FILL_BUCKETS
	CONV$GL_READ_C	= OPTION_BLOCK [ 15 ] : LONG,	! READ_CHECK
	CONV$GL_WRITE_C	= OPTION_BLOCK [ 16 ] : LONG,	! WRITE_CHECK
	CONV$GL_FDL	= OPTION_BLOCK [ 17 ] : LONG,	! FDL
	CONV$GL_EXC	= OPTION_BLOCK [ 18 ] : LONG,	! EXCEPTION
	CONV$GL_PROLOG	= OPTION_BLOCK [ 19 ] : LONG,	! EXCEPTION

	! These are the counters
	!
	CONV$GL_FILE_COUNT	= COUNT_BLOCK [ 1 ] : LONG, 	! Number of files processed
	CONV$GL_RECORD_COUNT	= COUNT_BLOCK [ 2 ] : LONG,	! Number of Rec. Processed
	CONV$GL_EXCEPT_COUNT	= COUNT_BLOCK [ 3 ] : LONG,	! Number of Exception Records
	CONV$GL_VALID_COUNT	= COUNT_BLOCK [ 4 ] : LONG;	! Number of Valid Records

!	Data etc. for reclaim
!
OWN
	STATISTICS_BLOCK	: VECTOR [ 5,LONG ];

GLOBAL BIND
	RECL$GL_BUCKET_COUNT	= STATISTICS_BLOCK [ 1 ] : LONG,
	RECL$GL_DATA_COUNT	= STATISTICS_BLOCK [ 2 ] : LONG,
	RECL$GL_INDEX_COUNT	= STATISTICS_BLOCK [ 3 ] : LONG;


%SBTTL	'PASS_FILES'
GLOBAL ROUTINE	CONV$PASS_FILES =
!++
!
! Functional Description:
!
!	File name passing routine
!
! Calling Sequence:
!
!    Initial Call:
!
!	CONV$PASS_FILES( in_file_desc,out_file_desc[,[fdl_file_desc][,exc_file_desc]] )
!
!    Additional Calls:
!
!	CONV$PASS_FILES( in_file_desc )
!
! Input Parameters:
!
!	in_file_desc	- Address of a file descriptor used as the input file name
!	out_file_desc	- Address of a file descriptor used as the output file name
!	fdl_file_desc	- OPTIONAL address of a string descriptor to be used
!				   as the file name of the fdl file
!
!	exc_file_desc	- OPTIONAL address of a string descriptor to be used
!				   as the file name of the exceptions file
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	SS$_NORMAL or
!	CONV$_ORDER
!	CONV$_NARG
!	CONV$_INP_FILES
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    ! If not from the DCL convert clear the flags
    !
    IF NOT .CONV$AB_FLAGS [ CONV$V_DCL ]
    THEN
	CONV$AB_FLAGS = _CLEAR;

    ! Set up the condition handler to make sure files are closed and memory
    ! released
    !
    LIB$ESTABLISH ( CONDITION_HANDLER );

    ! See what kind of call it is
    !
    IF .SEQUENCE EQLU 0
    THEN
	BEGIN

	LOCAL
	    BYTES,
	    VM_POINTER;

	! The first call needs at least two arguments and no more then 4
	!
	IF ( ACTUALCOUNT() LSSU 2 ) OR ( ACTUALCOUNT() GTRU 4 )
	THEN
	    RETURN CONV$_NARG;

	! Allocate memory for all of the name block buffers
	!
	BYTES = 2 * ( ESA_BUF_SIZ + RSA_BUF_SIZ );

	VM_POINTER = CONV$$GET_VM ( .BYTES );

	! Init the input RMS blocks
	!
	! The FAB
	!
	$FAB_INIT ( FAB = CONV$AB_IN_FAB,
		    FAC = <BRO,GET>,
		    FOP = <NAM,SQO>,
		    NAM = CONV$AB_IN_NAM,
		    XAB = CONV$AB_IN_XABSUM );

	! The RAB
	!
	$RAB_INIT ( RAB = CONV$AB_IN_RAB,
		    FAB = CONV$AB_IN_FAB,
		    ROP = RAH );

	! The name block
	!
	$NAM_INIT ( NAM = CONV$AB_IN_NAM,
		    ESA = .VM_POINTER,
		    ESS = ESA_BUF_SIZ,
		    RSA = .VM_POINTER + ESA_BUF_SIZ,
		    RSS = RSA_BUF_SIZ );

	VM_POINTER = .VM_POINTER + ( ESA_BUF_SIZ + RSA_BUF_SIZ );

	! Init the output RMS blocks
	!
	! The FAB
	!
	$FAB_INIT ( FAB = CONV$AB_OUT_FAB,
		    FAC = <BRO,GET,PUT>,
		    FOP = <DFW,NAM,OFP,SQO>,
		    NAM = CONV$AB_OUT_NAM,
		    XAB = CONV$AB_OUT_XABSUM );

	! The RAB
	!
	$RAB_INIT ( RAB = CONV$AB_OUT_RAB,
		    FAB = CONV$AB_OUT_FAB,
		    ROP = WBH );

	! The name block
	!
	$NAM_INIT ( NAM = CONV$AB_OUT_NAM,
		    ESA = .VM_POINTER,
		    ESS = ESA_BUF_SIZ,
		    RLF = CONV$AB_IN_NAM,
		    RSA = .VM_POINTER + ESA_BUF_SIZ,
		    RSS = RSA_BUF_SIZ );

	! Clear the count of input files
	!
	CONV$GL_FILE_COUNT = 0;

	! The second argument is the output file name
	!
	CONV$AR_OUT_FILE_NAM = ACTUALPARAMETER( 2 );

	! If there is a 3rd argument then it's the fdl file descriptor
	!
	IF ACTUALCOUNT() GTRU 2
	THEN

	    ! There is no fdl_fab so keep it in a pointer
	    !
	    CONV$AR_FDL_FILE_NAM = ACTUALPARAMETER( 3 );

	! If there is a 4th argument then it's the exception file descriptor
	!
	IF ACTUALCOUNT() GTRU 3
	THEN
	    BEGIN

	    LOCAL
		EXC_NAM_PTR,
		EXC_FILE_NAM	: REF DESC_BLK;

	    EXC_FILE_NAM = ACTUALPARAMETER( 4 );

	    ! Allocate memory for name block and buffers
	    !
	    EXC_NAM_PTR = CONV$$GET_VM( NAM$K_BLN + ESA_BUF_SIZ + RSA_BUF_SIZ );

	    ! Init the RMS blocks
	    !
	    ! The FAB
	    !
	    $FAB_INIT ( FAB = EXC_FAB,
			DNM = '.EXC',
			FNS = .EXC_FILE_NAM [ DSC$W_LENGTH ],
			FNA = .EXC_FILE_NAM [ DSC$A_POINTER ],
			FOP = <NAM,SQO,TEF>,
			NAM = .EXC_NAM_PTR,
			RFM = VAR,
			RAT = CR );

	    ! The RAB
	    !
	    $RAB_INIT ( RAB = CONV$AB_EXC_RAB,
			FAB = EXC_FAB,
			ROP = WBH );

	    ! The name block
	    !
	    $NAM_INIT ( NAM = .EXC_NAM_PTR,
			ESA = .EXC_NAM_PTR + NAM$K_BLN,
			ESS = ESA_BUF_SIZ,
			RSA = .EXC_NAM_PTR + NAM$K_BLN + ESA_BUF_SIZ,
			RSS = RSA_BUF_SIZ )

	    END;

	! We are a success so set up for the next call
	!
	SEQUENCE = 1

	END

    ! If not the first call it better be the second call to pass files
    !
    ELSE IF .SEQUENCE EQLU 1
    THEN
	BEGIN

	! More calls to pass_files means only one argument
	!
	IF ACTUALCOUNT() NEQU 1
	THEN
	    RETURN CONV$_NARG

	END

    ! If we are here we were called in the wrong order
    !
    ELSE
	RETURN CONV$_ORDER;

    ! If there are to many input files exit
    !
    IF .CONV$GL_FILE_COUNT GTR 9
    THEN
	RETURN CONV$_INP_FILES;

    ! The first argument is always the input file
    !
    CONV$AL_IN_FILE_NAM [ .CONV$GL_FILE_COUNT ] = ACTUALPARAMETER(1);

    CONV$GL_FILE_COUNT = .CONV$GL_FILE_COUNT + 1;

    RETURN SS$_NORMAL

    END;

%SBTTL	'PASS_OPTIONS'
GLOBAL ROUTINE CONV$PASS_OPTIONS =
!++
!
! Functional Description:
!
!	Initializes the convert control/option block
!
! Calling Sequence:
!
!	CONV$PASS_OPTIONS( [option_block] )
!
! Input Parameters:
!
!	option_block	- OPTIONAL Address of convert option block
!
!	    Structure of option block:
!
!			    |---------------------------|
!	    option_block -->|	number of options	|
!			    |---------------------------|
!			    |	create			|
!			    |---------------------------|
!			    |	share			|
!			    |---------------------------|
!			    |	fast			|
!			    |---------------------------|
!			    |	merge			|
!			    |---------------------------|
!			    |	append			|
!			    |---------------------------|
!			    |	sort			|
!			    |---------------------------|
!			    |	work_files		|
!			    |---------------------------|
!			    |	key			|
!			    |---------------------------|
!			    |	pad			|
!			    |---------------------------|
!			    |	pad_character		|
!			    |---------------------------|
!			    |	truncate		|
!			    |---------------------------|
!			    |	exit			|
!			    |---------------------------|
!			    |	fixed_write		|
!			    |---------------------------|
!			    |	fill_buckets		|
!			    |---------------------------|
!			    |	read_check		|
!			    |---------------------------|
!			    |	write_check		|
!			    |---------------------------|
!			    |	fdl			|
!			    |---------------------------|
!			    |	exception		|
!			    |---------------------------|
!			    |	prologue		|
!			    |---------------------------|
!
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	SS$NORMAL or error code
!
! Routines Called:
!
!	$OPEN
!	CONV$$RMS_OPEN_ERROR	- By RMS as an AST
!	$CONNECT
!
! Side Effects:
!
!	Opens the exception file if specified
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    ! Set up condition handler
    !
    LIB$ESTABLISH ( CONDITION_HANDLER );

    ! Check the order of the calls
    !
    IF .SEQUENCE NEQ 1
    THEN
	RETURN CONV$_ORDER;

    ! Check the number of arguments
    !
    IF ACTUALCOUNT() GTR 3
    THEN
	RETURN CONV$_NARG;

    ! Initialize the counter block
    !
    COUNT_COUNT = COUNTERS;

    ! Clear the counters (don't clear 2 (file_count) since that has
    ! been set by pass_files)
    !
    INCR I FROM 2 TO COUNTERS BY 1
    DO
	COUNT_BLOCK [ .I ] = _CLEAR;

    ! Initialize the option block
    !
    OPTION_COUNT = OPTIONS;

    ! First clear the entire block since most of the defaults are off
    !
    INCR I FROM 1 TO OPTIONS BY 1
    DO
	OPTION_BLOCK [ .I ] = _CLEAR;

    ! Now set the defaults
    !
    CONV$GL_CREATE	= _SET;
    CONV$GL_FAST	= _SET;
    CONV$GL_SORT	= _SET;
    CONV$GL_WORK_F	= 2;

    ! If there was an argument then use it
    !
    IF ACTUALCOUNT() NEQ 0
    THEN

	BEGIN

	LOCAL	USER_BLOCK	: REF VECTOR [ ,LONG ];

	USER_BLOCK = ACTUALPARAMETER( 1 );

	! Check the size of the block
	!
	IF .USER_BLOCK [ 0 ] GTRU OPTIONS
	THEN
	    RETURN CONV$_BADBLK;

	! If the user block specified a prologue version then set a flag to
	! use it
	!
	IF .USER_BLOCK [ 0 ] EQLU OPTIONS
	THEN
	    CONV$AB_FLAGS [ CONV$V_PROLOG ] = _SET;

	! Copy the option block specified by the user into ours
	!
	INCR I FROM 1 TO .USER_BLOCK [ 0 ]
	DO
	    OPTION_BLOCK [ .I ] = .USER_BLOCK [ .I ]

	END;

    ! Check for some switch conflicts
    !
    ! /FDL/NOCREATE
    ! /FDL/MERGE
    ! /FDL/APPEND
    !
    !    or combinations of the above is wrong
    !
    IF .CONV$GL_FDL AND ( ( NOT .CONV$GL_CREATE ) OR
				.CONV$GL_MERGE OR
				.CONV$GL_APPEND )
    THEN
	RETURN CONV$_CONFQUAL;

    ! /MERGE/APPEND
    !
    IF .CONV$GL_MERGE AND .CONV$GL_APPEND
    THEN
	RETURN CONV$_CONFQUAL;

    ! Lets set the switches strait, NOTE: The order of this sets the presidence
    !					  of the qualifiers, do not change it
    !
    ! The merge option is really /NOCREATE/NOFAST/NOSORT apppend is simmular
    !
    IF .CONV$GL_MERGE OR .CONV$GL_APPEND
    THEN
	BEGIN
	CONV$GL_CREATE	= _CLEAR;
	CONV$GL_FAST	= _CLEAR;
	CONV$GL_SORT	= _CLEAR
	END;

    ! If we create a file without definition then the files are duplicate
    ! therefore index files will be in order (one input file only)
    !
    IF .CONV$GL_CREATE AND ( NOT .CONV$GL_FDL ) AND
						( .CONV$GL_FILE_COUNT EQLU 1 )
    THEN
	CONV$GL_SORT 	= _CLEAR;

    ! If we open the input file shared we cannot sort it
    !
    IF .CONV$GL_SHARE
    THEN
	CONV$GL_SORT	= _CLEAR;

    ! Create exc files if neceassary
    !
    ! If the EXCEPTION Option was specified THEN Create and Connect
    ! the Exception File.
    !
    IF .CONV$GL_EXC
    THEN
	BEGIN

	! Signal an OPENEXC error on failure
	!
	EXC_FAB [ FAB$L_CTX ] = CONV$_OPENEXC;

	! Create it
	!
	$CREATE ( FAB=EXC_FAB,ERR=CONV$$RMS_OPEN_ERROR );

	! Say that a exception file is open
	!
	CONV$AB_FLAGS [ CONV$V_EXC ] = _SET;

	! Connect the stream
	!
	$CONNECT ( RAB=CONV$AB_EXC_RAB,ERR=CONV$$RMS_OPEN_ERROR )

	END;

    SEQUENCE = .SEQUENCE + 1;

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'CONVERT'
GLOBAL ROUTINE	CONV$CONVERT =
!++
!
! Functional Description:
!
! Calling Sequence:
!
!	CONV$CONVERT( [counter_block] )
!
! Input Parameters:
!
!	counter_block	- OPTIONAL Address of counter block
!
!	    Structure of counter block:
!
!			     |--------------------------|
!	    counter_block -->|	number of counters	|
!			     |--------------------------|
!			     |	number of files proc.	|
!			     |--------------------------|
!			     |	number of records	|
!			     |--------------------------|
!			     |	number of exception rec.|
!			     |--------------------------|
!			     |	number of valid records	|
!			     |--------------------------|
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines called:
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	STATUS;

    ! Check the order of the call
    !
    IF .SEQUENCE NEQ 2
    THEN
	RETURN CONV$_ORDER
    ELSE
	SEQUENCE = .SEQUENCE + 1;

    ! Check the number of arguments
    !
    IF ACTUALCOUNT() GTR 1
    THEN
	RETURN CONV$_NARG;

    ! Set up condition handler
    !
    LIB$ESTABLISH ( CONDITION_HANDLER );

    ! If definition then parse it
    !
    IF .CONV$GL_FDL
    THEN
	STATUS = CONV$$PARSE_DEF()
    ELSE
	STATUS = CONV$_SUCCESS;

    ! If all is well continue
    !
    IF .STATUS
    THEN

	! Try to Open an Input File
	!
	IF STATUS = CONV$$OPEN_INPUT()
	THEN
	    BEGIN

	    ! Try to Open an Output File
	    !
	    STATUS = CONV$$OPEN_OUTPUT();

	    ! Loop untill error or end
	    !
	    WHILE .STATUS
	    DO
		BEGIN

		! Dynamicly Allocate the Record Buffer
		!
		IF NOT ( STATUS = CONV$$CREATE_BUFFER() )
		THEN
		    EXITLOOP;

		! Convert The File
		!
		IF NOT ( STATUS = CONV$$CONVERT() )
		THEN
		    EXITLOOP;

		CONV$GB_CURRENT_FILE = .CONV$GB_CURRENT_FILE + 1;

		IF .CONV$GB_CURRENT_FILE GEQU .CONV$GL_FILE_COUNT
		THEN
		    EXITLOOP
		ELSE
		    STATUS = CONV$$OPEN_INPUT()

		END

	    END;

    ! Close all Open Files and deallocate memory
    !
    RUNDOWN();

    ! If we got a counter block copy the values into it
    !
    IF ACTUALCOUNT() NEQ 0
    THEN
	BEGIN

	LOCAL	USER_BLOCK : REF VECTOR [ ,LONG ];

	USER_BLOCK = ACTUALPARAMETER(1);

	! Check the size of the block
	!
	IF .USER_BLOCK [ 0 ] GTRU COUNTERS
	THEN
	    STATUS = CONV$_BADBLK
	ELSE

	    ! Stuff the counts
	    !
	    INCR I FROM 1 TO .USER_BLOCK [ 0 ] BY 1
	    DO
		USER_BLOCK [ .I ] = .COUNT_BLOCK [ .I ]

	END;

    SEQUENCE = 0;

    RETURN .STATUS

    END;


%SBTTL	'RECLAIM'
GLOBAL ROUTINE	CONV$RECLAIM =
!++
!
! Functional Description:
!
!	CONVERT/RECLAIM call interface routine
!
! Calling Sequence:
!
!	CONV$RECLAIM( file_name_desc[,stat_blk] )
!
! Input Parameters:
!
!	file_name_desc	- Address of a string descriptor to be used as
!			  the input file name
!
!	stat_blk	- ( Optional ) Address of a block of longwords
!			  which will receive the statistics
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	stat_blk
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	RECL$$OPEN_FILE
!	RECL$$GET_NEXT_KEY
!	RECL$$ALLOCATE_BUFFERS
!	RECL$$SCAN_DATA_LEVEL
!	RUNDOWN
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    DEFINE_REGISTERS_9_GLOBAL;

    ! Check to make sure convert is not being called
    !
    IF .SEQUENCE NEQU 0
    THEN
	RETURN CONV$_ORDER;

    ! Check on the number of arguments
    !
    IF ( ACTUALCOUNT() LSSU 1 ) OR ( ACTUALCOUNT() GTRU 2 )
    THEN
	RETURN CONV$_NARG;

    ! If not from the DCL convert clear some flags
    !
    IF NOT .CONV$AB_FLAGS [ CONV$V_DCL ]
    THEN

	! Clear the flags
	!
	CONV$AB_FLAGS = _CLEAR;

    ! Set up the exit handler
    !
    LIB$ESTABLISH ( CONDITION_HANDLER );

    ! Open the file
    !
    RET_ON_ERROR( RECL$$OPEN_FILE( ACTUALPARAMETER(1) ) );

    ! Process the keys
    !
    WHILE RECL$$GET_NEXT_KEY()
    DO
	BEGIN

	! Allocate bucket buffers and the context block
	!
	RET_ON_ERROR( RECL$$ALLOCATE_BUFFERS() );

	! Scan the data level buckets and remove the empties
	!
	RET_ON_ERROR( RECL$$SCAN_DATA_LEVEL() );

	! Deallocate memory used foe the bucket buffers
	!
	CONV$$FREE_TEMP_VM()

	END;

    ! Close the file and deallocate memory
    !
    RUNDOWN();

    ! If there was a second parameter stuff it with the statistics block addr.
    !
    IF ACTUALCOUNT() EQLU 2
    THEN
	BEGIN

	LOCAL
	    USER_BLOCK : REF VECTOR [ ,LONG ];

	! Get the user block
	!
	USER_BLOCK = ACTUALPARAMETER(2);

	! Check to see if there really is one
	!
	IF .USER_BLOCK NEQ 0
	THEN
	    BEGIN

	    ! Stuff the total bucket count
	    !
	    STATISTICS_BLOCK [ 4 ] = .RECL$GL_DATA_COUNT + .RECL$GL_INDEX_COUNT;

	    INCR I FROM 1 TO .USER_BLOCK [ 0 ] BY 1
	    DO
		USER_BLOCK [ .I ] = .STATISTICS_BLOCK [ .I ]

	    END

	END;

    RETURN SS$_NORMAL

    END;


%SBTTL	'RUNDOWN'
ROUTINE	RUNDOWN	: NOVALUE =
!++
!
! Functional Description:
!
!	Close all open files and deallocate memory
!
! Calling Sequence:
!
!	RUNDOWN()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	$DISCONNECT
!	$CLOSE
!	CONV$$FREE_TEMP_VM
!	CONV$$FREE_VM
!
! Side Effects:
!
!	Closes all files and deallocates memory
!
!--

    BEGIN

    ! Clear the sequencing so we can start over again
    !
    SEQUENCE = 0;

    ! Close any open files
    !
    ! Start with Ouput File
    !		NOTE: Input file and RFA file are closed by END_OF_FILE routine
    !
    IF .CONV$AB_FLAGS [ CONV$V_OUT ]
    THEN
	BEGIN
	$DISCONNECT( RAB=CONV$AB_OUT_RAB );
	$CLOSE( FAB=CONV$AB_OUT_FAB );
	END;

    ! If an Exception file was used close it
    !
    IF .CONV$AB_FLAGS [ CONV$V_EXC ]
    THEN
	BEGIN
	$DISCONNECT( RAB=CONV$AB_EXC_RAB );
	$CLOSE( FAB=EXC_FAB )
	END;

    ! There is a case where the RFA file could still be open, ie fast loading
    ! secondary keys
    !
    IF .CONV$AB_FLAGS [ CONV$V_RFA ]
    THEN
	BEGIN
	$DISCONNECT( RAB=CONV$AB_RFA_RAB );
	$CLOSE( FAB=CONV$AB_RFA_FAB )
	END;

    ! If the reclaim file was open
    !
    IF .CONV$AB_FLAGS [ CONV$V_RECL ]
    THEN
	BEGIN
	$DISCONNECT( RAB=RECL$AB_IN_RAB );
	$CLOSE( FAB=RECL$AB_IN_FAB );
	END;

    ! Deallocate any loose memory floating around
    !
    CONV$$FREE_TEMP_VM();
    CONV$$FREE_VM();

    RETURN

    END;

%SBTTL	'CONDITION_HANDLER'
ROUTINE	CONDITION_HANDLER ( SIGNAL_VECTOR : REF BLOCK [ ,BYTE ],MECH_VECTOR ) =
!++
!
! Functional Description:
!
!	Exception handler to make sure files are closed for the call interface
!
! Calling Sequence:
!
!	Called as exception handler
!
! Input Parameters:
!
!	SIGNAL_VECTOR
!	MECH_VECTOR
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	SS$_RESIGNAL
!
! Routines Called:
!
!	RUNDOWN
!	LIB$SIG_TO_RETURN
!
! Side Effects:
!
!	Closes open files and dealloceates memory
!
!--

    BEGIN

    LOCAL
	CONDITION_CODE : BLOCK [ 4,BYTE ];

    ! Get the condition code
    !
    CONDITION_CODE = .SIGNAL_VECTOR [ CHF$L_SIG_NAME ];

    ! If an unwind is in progress simply return
    !
    IF .CONDITION_CODE EQLU SS$_UNWIND
    THEN
	RETURN;

    ! Close all files etc.
    !
    RUNDOWN();

    ! If not from the DCL convert return all errors signaled
    !
    IF NOT .CONV$AB_FLAGS [ CONV$V_DCL ]
    THEN
	LIB$SIG_TO_RET ( .SIGNAL_VECTOR,.MECH_VECTOR );

    ! If a DCL call resignal
    !
    RETURN SS$_RESIGNAL
    
    END;

END	ELUDOM
