%TITLE	'VAX-11 CONVERT'
MODULE	CONV$FILES	( IDENT='V03-003',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	RMS file handeling routines
!
! Contents:
!		PARSE_DEF
!		OPEN_INPUT
!		SEARCH_FILE
!		OPEN_IN
!		OPEN_OUTPUT
!		GET_PROLOGUE
!		CREATE_BUFFER
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	June-1980
!
!
! Modified by:
!
!	V03-003	KBT0044		Keith Thompson		5-Apr-1982
!		Don't do a search on a device mounted foreign
!
!	V03-002	KBT0025		Keith Thompson		26-Mar-1982
!		Fix fill switch for /nofast
!
!	V03-001	KBT0015		Keith Thompson		18-Mar-1982
!		Fix area allocation bug in get_prologue and use new
!		plg$c_ver3 instead of literal
!
!****


PSECT
	OWN	= _CONV$OWN	(PIC),
	GLOBAL	= _CONV$GLOBAL	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$CODE	(SHARE,PIC);

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';

EXTERNAL ROUTINE
	CONV$$GET_VM		: JSB_LINK,
	CONV$$RMS_OPEN_ERROR	: NOVALUE,
	FDL$$PARSE		: ADDRESSING_MODE( GENERAL );

FORWARD ROUTINE
	CONV$$SEARCH_FILE,
	CONV$$OPEN_IN,
	GET_PROLOGUE		: NOVALUE;

!	Error codes
!
DEFINE_ERROR_CODES;

EXTERNAL

!	The Option Flags:
!
	CONV$GL_APPEND		: LONG,			! APPEND
	CONV$GL_CREATE		: LONG,			! CREATE
	CONV$GL_FDL		: LONG,			! FDL
	CONV$GL_EXC		: LONG,			! EXCEPTION
	CONV$GL_FAST		: LONG,			! FAST
	CONV$GL_MERGE		: LONG,			! MERGE
	CONV$GL_FILL		: LONG,			! FILL_BUCKETS
	CONV$GL_FIX		: LONG,			! FIXED_WRITE
	CONV$GL_KEY		: LONG,			! KEY
	CONV$GL_PAD		: LONG,			! PAD_RECORDS
	CONV$GL_SHARE		: LONG,			! SHARE
	CONV$GL_SORT		: LONG,			! SORT
	CONV$GL_READ_C		: LONG,			! READ_CHECK
	CONV$GL_TRUNCATE	: LONG,			! TRUNCATE
	CONV$GL_WRITE_C		: LONG,			! WRITE_CHECK
	CONV$GL_PROLOG		: LONG,			! PROLOGUE
	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],

	CONV$GW_OUT_MRS		: WORD,
	CONV$GW_UDF_MRS		: WORD,
	CONV$GB_CURRENT_FILE	: BYTE,
	CONV$GW_MAX_REC_SIZ	: WORD,
	CONV$GL_REC_BUF_PTR,
	CONV$GL_VFC_BUF_PTR,

	CONV$AL_IN_FILE_NAM	: REF BLOCKVECTOR [ ,8,BYTE ],	! Input File
	CONV$AR_OUT_FILE_NAM	: REF DESC_BLK,			! Output File
	CONV$AR_FDL_FILE_NAM	: REF DESC_BLK,			! FDL File

	CONV$AB_IN_XABSUM	: $XABSUM_DECL,
	CONV$AB_IN_XABFHC	: $XABFHC_DECL,
	CONV$AB_IN_NAM		: $NAM_DECL,
	CONV$AB_IN_FAB		: $FAB_DECL,
	CONV$AB_IN_RAB		: $RAB_DECL,
	CONV$AB_OUT_XABSUM	: $XABSUM_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL,

	CONV$AR_PROLOGUE	: REF BLOCK [ ,BYTE ],
	CONV$GW_PROLOGUE_SIZ	: WORD,
	CONV$AR_KEY_DESC_BUF	: REF VECTOR [ ,WORD ],
	CONV$AR_AREA_BLOCK	: REF BLOCKVECTOR [ ,AREA$C_BLN,BYTE ],
	CONV$GW_AREA_SIZE	: WORD,
	CONV$GB_PROL_V1		: BYTE,
	CONV$GB_PROL_V2		: BYTE,
	CONV$GB_PROL_V3		: BYTE;

OWN
	FDL_FAB_POINTER	: REF BLOCK [ ,BYTE ];


%SBTTL	'PARSE_DEF'
GLOBAL ROUTINE CONV$$PARSE_DEF =
!++
!
! Functional Description:
!
!	Calls fdl$$parse to parse the fdl file and fill in a fab.  The
!	info from this fab is will be copied to the output fab in open_output
!
! Calling Sequence:
!
!	CONV$$PARSE_DEF()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$AR_FDL_FILE_NAME	- FDL file descriptor
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	Valure returned by fdl$$parse
!
! Routines Called:
!
!	FDL$$PARSE
!
! Side Effects:
!
!--

    BEGIN

    ! Zero the pointer so we get a new fab
    !
    FDL_FAB_POINTER = _CLEAR;

    RETURN FDL$$PARSE ( .CONV$AR_FDL_FILE_NAM,FDL_FAB_POINTER )

    END;

%SBTTL	'OPEN_INPUT'
GLOBAL ROUTINE	CONV$$OPEN_INPUT =
!++
!
! Functional Description:
!
!	Opens an input file
!
! Calling Sequence:
!
!	CONV$$OPEN_INPUT()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	CONV$_SUCCESS or error code from CONV$$SEARCH_FILE or CONV$$OPEN_IN
!
! Routines Called:
!
!	CONV$$SEARCH_FILE
!	CONV$$OPEN_IN
!
! Side Effects:
!
!	Opens an input file
!
!--

    BEGIN

    LOCAL
	STATUS	: LONG,
	IN_DEV	: BLOCK [ 1,LONG ];


    ! Any errors on the input fab are OPENIN errors
    !
    CONV$AB_IN_FAB [ FAB$L_CTX ] = CONV$_OPENIN;

    ! Start by getting the file name
    !
    RET_ON_ERROR( CONV$$SEARCH_FILE() );

    ! For now there are only sequential files on tape if there is no
    ! definition file then it cant be a fast load
    !
    IN_DEV = .CONV$AB_IN_FAB [ FAB$L_DEV ];

    IF ( NOT .CONV$GL_FDL ) AND .IN_DEV [ DEV$V_SQD ]
    THEN
	BEGIN
	CONV$GL_FAST	= _CLEAR;
	CONV$GL_SORT	= _CLEAR
	END;

    ! Another problem is we cannot sort from a network device
    !
    IF .IN_DEV [ DEV$V_NET ]
    THEN
	CONV$GL_SORT = _CLEAR;

    ! If we are sorting to the input file and the output is defined by fdl
    ! then don't bother opening the input file here
    !
    IF .CONV$GL_SORT AND .CONV$GL_FDL
    THEN
	RETURN CONV$_SUCCESS
    ELSE
	RETURN CONV$$OPEN_IN()

    END;

%SBTTL	'SEARCH_FILE'
GLOBAL ROUTINE CONV$$SEARCH_FILE =
!++
!
! Functional Description:
!
!	Searches for an input file
!
! Calling Sequence:
!
!	CONV$$SEARCH_FILE()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$AL_IN_FILE_NAME	- Input file name descriptor
!	CONV$GB_CURRENT_FILE	- Current input file name being searched
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	CONV$_SUCCESS or CONV$_NOWILD
!
! Routines Called:
!
!	$PARSE
!	CONV$$RMS_OPEN_ERROR	- By RMS as an AST
!	$SEARCH
!
! Side Effects:
!
!	Sets up input name block for next input file
!
!--

    BEGIN

    OWN
	RLF_NAM		: $NAM_DECL;

    LOCAL
	IN_DEVICE	: BLOCK [ 1,LONG ];

    ! Get the next file name to search for
    !
    CONV$AB_IN_FAB [ FAB$B_FNS ] = .CONV$AL_IN_FILE_NAM [ .CONV$GB_CURRENT_FILE,DSC$W_LENGTH ];
    CONV$AB_IN_FAB [ FAB$L_FNA ] = .CONV$AL_IN_FILE_NAM [ .CONV$GB_CURRENT_FILE,DSC$A_POINTER ];

    ! If this is not the first file then
    ! fake the related file to be the last file searched
    !
    IF .CONV$GB_CURRENT_FILE NEQ 0
    THEN
	BEGIN

	! Fake the related file name block
	!
	$NAM_INIT ( NAM = RLF_NAM,
		    RSA = .CONV$AB_IN_NAM [ NAM$L_RSA ] );

	RLF_NAM [ NAM$B_RSL ] = .CONV$AB_IN_NAM [ NAM$B_RSL ];

	CONV$AB_IN_NAM [ NAM$L_RLF ] = RLF_NAM

	END;

    ! Clear the IFI and device char. so we can parse
    !
    CONV$AB_IN_FAB [ FAB$W_IFI ] = 0;
    CONV$AB_IN_FAB [ FAB$L_DEV ] = 0;

    ! Parse the file name
    !
    $PARSE ( FAB=CONV$AB_IN_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! If the filename has wildcards in it it's an error
    !
    IF .CONV$AB_IN_NAM [ NAM$V_WILDCARD ]
    THEN
	RETURN CONV$_NOWILD;

    ! If the input device is file oriented and NOT mounted foriegn and
    ! not a process perminant file then we need to do a search
    !
    IN_DEVICE = .CONV$AB_IN_FAB [ FAB$L_DEV ];

    IF ( .IN_DEVICE [ DEV$V_FOD ] AND ( NOT .IN_DEVICE [ DEV$V_FOR ] ) AND
	( NOT .CONV$AB_IN_NAM [ NAM$V_PPF ] ) )
    THEN

	! Do a search to find the next input file. If there is some
	! error return with it.
	!
	$SEARCH ( FAB=CONV$AB_IN_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    RETURN CONV$_SUCCESS

    END;


%SBTTL	'OPEN_IN'
GLOBAL ROUTINE	CONV$$OPEN_IN =
!++
!
! Functional Description:
!
!	Actually does the open of the input file, allocates and fills
!	in key and area xabs if necessary, also connects record stream
!
! Calling Sequence:
!
!	CONV$$OPEN_IN()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$AB_IN_FAB	- Input fab
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	CONV$_SUCCESS or CONV$_NOKEY
!
! Routines Called:
!
!	$OPEN
!	CONV$$RMS_OPEN_ERROR	- By RMS as an AST
!	CONV$$GET_VM
!	$DISPLAY
!	$CONNECT
!
! Side Effects:
!
!	Opens and connects input file
!
!--

    BEGIN

    LOCAL
	STATUS	: LONG;

    ! Set the FAB from the Option Switches
    !
    ! Read Check
    !
    CONV$AB_IN_FAB [ FAB$V_RCK ] = .CONV$GL_READ_C;

    ! Input file sharing
    !
    IF .CONV$GL_SHARE
    THEN
	BEGIN

	! Set up the file sharing bits
	!
	CONV$AB_IN_FAB [ FAB$B_SHR ] = FAB$M_PUT OR FAB$M_GET OR FAB$M_DEL OR
							FAB$M_UPD OR FAB$M_UPI;

	! Do not wait for any record locks
	!
	CONV$AB_IN_RAB [ RAB$V_RRL ] = _SET

	END;

    ! If we have to access the file by key (other then primary) or we have
    ! to sort the file (which means we use RFA access)
    ! then clear the sqo bit
    !
    IF ( .CONV$GL_KEY NEQU 0 ) OR .CONV$GL_SORT
    THEN
	CONV$AB_IN_FAB [ FAB$V_SQO ] = _CLEAR;

    ! Open the file
    !
    $OPEN ( FAB=CONV$AB_IN_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Say that the file is open
    !
    CONV$AB_FLAGS [ CONV$V_IN ] = _SET;

    ! If this is an index file and we are creating the output file not by
    ! FDL definition then get the area ad key xabs
    !
    IF ( .CONV$AB_IN_FAB [ FAB$B_ORG ] EQLU FAB$C_IDX ) AND
				.CONV$GL_CREATE AND ( NOT .CONV$GL_FDL )
    THEN
	BEGIN

	LOCAL
		BYTES,
		VM_POINTER,
		CURRENTXAB	: REF BLOCK [ ,BYTE ];

	BIND
		NEWXAB	= VM_POINTER : REF BLOCK [ ,BYTE ];

	! Find out how much memory we need (The extra 32 is for the key name buffer)
	!
	BYTES = .CONV$AB_IN_XABSUM [ XAB$B_NOK ] * ( XAB$C_KEYLEN + 32 );
	BYTES = ( .CONV$AB_IN_XABSUM [ XAB$B_NOA ] * XAB$C_ALLLEN ) + .BYTES;

	! Get the address space
	!
	VM_POINTER = CONV$$GET_VM ( .BYTES  );

	! The protection xab will point to the new xabs
	!
	CURRENTXAB = CONV$AB_IN_XABSUM;

	! Chain the xabs together and set up the fields
	! Keys first
	!
	INCR I FROM 0 TO .CONV$AB_IN_XABSUM [ XAB$B_NOK ] - 1 BY 1
	DO
	    BEGIN
	    CURRENTXAB [ XAB$L_NXT ] = .NEWXAB;
	    CURRENTXAB = .NEWXAB;
	    CURRENTXAB [ XAB$B_COD ] = XAB$C_KEY;
	    CURRENTXAB [ XAB$B_BLN ] = XAB$C_KEYLEN;
	    CURRENTXAB [ XAB$B_REF ] = .I;
	    CURRENTXAB [ XAB$L_KNM ] = .CURRENTXAB + XAB$C_KEYLEN;
	    NEWXAB = .NEWXAB + XAB$C_KEYLEN + 32
	    END;

	! Then areas
	!
	INCR I FROM 0 TO .CONV$AB_IN_XABSUM [ XAB$B_NOA ] - 1 BY 1
	DO
	    BEGIN
	    CURRENTXAB [ XAB$L_NXT ] = .NEWXAB;
	    CURRENTXAB = .NEWXAB;
	    CURRENTXAB [ XAB$B_COD ] = XAB$C_ALL;
	    CURRENTXAB [ XAB$B_BLN ] = XAB$C_ALLLEN;
	    CURRENTXAB [ XAB$B_AID ] = .I;
	    NEWXAB = .NEWXAB + XAB$C_ALLLEN
	    END;

	! The last xab points to 0
	!
	CURRENTXAB [ XAB$L_NXT ] = 0;

	! Do a display to fill it all in
	!
	$DISPLAY ( FAB=CONV$AB_IN_FAB )

	END;	

    ! If this is an indexed file then set the key of ref. to input on
    !
    IF .CONV$AB_IN_FAB [ FAB$B_ORG ] EQL FAB$C_IDX
    THEN

	! If the key of ref. is out of range then signal an error and return
	! normal. (so we can continue)
	!
	IF .CONV$GL_KEY GEQ .CONV$AB_IN_XABSUM [ XAB$B_NOK ]
	THEN
	    RETURN CONV$_NOKEY
	ELSE
	    CONV$AB_IN_RAB [ RAB$B_KRF ] = .CONV$GL_KEY;

    ! Must Special Case for a UDF (Undefined) Input File
    !
    IF .CONV$AB_IN_FAB [ FAB$B_RFM ] EQL FAB$C_UDF
    THEN
	BEGIN

	! Get ready to input the file with Block IO
	!
	CONV$AB_IN_RAB [ RAB$L_BKT ] = 0;
	CONV$AB_IN_RAB [ RAB$V_BIO ] = _SET
	END
    ELSE

	! Else do normal record IO
	!
	CONV$AB_IN_RAB [ RAB$V_BIO ] = _CLEAR;

    ! In normal operation IN_RAB points to IN_FAB but may be changed
    ! when doing sorts
    !
    CONV$AB_IN_RAB [ RAB$L_FAB ] = CONV$AB_IN_FAB;

    ! Now that every thing is ready connect a stream
    !
    $CONNECT ( RAB=CONV$AB_IN_RAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Any errors from now on are read errors
    !
    CONV$AB_IN_RAB [ RAB$L_CTX ] = CONV$_READERR;

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'OPEN_OUTPUT'
GLOBAL ROUTINE	CONV$$OPEN_OUTPUT =
!++
!
! Functional Description:
!
!	Creates ( or opens ) the output file, connects a record stream and if
!	it is an indexed file allocates and fills in the prologue key and
!	area descriptor blocks for sort and/or fast load
!
! Calling Sequence:
!
!	CONV$$OPEN_OUTPUT
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$AB_OUT_FAB	- Output fab
!	CONV$AB_IN_FAB	- Input fab
!	Option flags
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	CONV$AB_FLAGS [ CONV$V_OUT ]	- Set on success
!
! Routine Value:
!
!	CONV$_SUCCESS or error from CONV$$OPEN_IN
!
! Routines Called:
!
!	$PARSE
!	CONV$$RMS_OPEN_ERROR	- By RMS as an AST
!	$CREATE
!	$DISPLAY
!	$OPEN
!	GET_PROLOGUE
!	$CONNECT
!	CONV$$OPEN_IN
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	PRESENT	: LONG,
	OUT_DEV	: BLOCK [ 1,LONG ],
	STATUS	: LONG;

    ! Any rms errors on the output fab are OPENOUT errors
    !
    CONV$AB_OUT_FAB [ FAB$L_CTX ] = CONV$_OPENOUT;

    ! Use the file name in the call argument (not one from FDL)
    !
    CONV$AB_OUT_FAB [ FAB$B_FNS ] = .CONV$AR_OUT_FILE_NAM [ DSC$W_LENGTH ];
    CONV$AB_OUT_FAB [ FAB$L_FNA ] = .CONV$AR_OUT_FILE_NAM [ DSC$A_POINTER ];

    ! Parse the name
    !
    $PARSE ( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Check the device that the output file is on
    !
    OUT_DEV = .CONV$AB_OUT_FAB [ FAB$L_DEV ];

    ! We cannot fast load To a network device
    !
    IF .OUT_DEV [ DEV$V_NET ]
    THEN
	CONV$GL_FAST = _CLEAR;

    ! Set the FAB from the Option Switches
    !
    ! Write Check
    !
    CONV$AB_OUT_FAB [ FAB$V_WCK ] = .CONV$GL_WRITE_C;

    ! Merge
    !
    CONV$AB_OUT_FAB [ FAB$V_SQO ] = ( NOT .CONV$GL_MERGE );

    ! If the CREATE Option was specified then Create the output file 
    ! else just open it
    !
    IF .CONV$GL_CREATE
    THEN
	BEGIN

	LOCAL COPY_FAB	: REF BLOCK [ ,BYTE ];

	! Determine where to copy fab from
	!
	IF .CONV$GL_FDL
	THEN
	    BEGIN

	    ! If fdl was done copy the stuff from the fab produced by
	    ! fdl$$parse
	    !
	    COPY_FAB = .FDL_FAB_POINTER;

	    ! Connect the fdl xabs
	    !
	    CONV$AB_OUT_XABSUM [ XAB$L_NXT ] = .COPY_FAB [ FAB$L_XAB ]

	    END
	ELSE
	    BEGIN

	    ! If this is not a create by FDL definition then get the stuff
	    ! from the input file
	    !
	    COPY_FAB = CONV$AB_IN_FAB;

	    ! Connect the input files summary xab NXT which will connect
	    ! any other xabs that the input file may have had ie. area and
	    ! key xabs
	    !
	    CONV$AB_OUT_XABSUM [ XAB$L_NXT ] = .CONV$AB_IN_XABSUM [ XAB$L_NXT ]

	    END;

	! Copy the important fab fields
	!
	CONV$AB_OUT_FAB [ FAB$L_ALQ ] = .COPY_FAB [ FAB$L_ALQ ]; ! Allocation
	CONV$AB_OUT_FAB [ FAB$W_DEQ ] = .COPY_FAB [ FAB$W_DEQ ]; ! Extension
	CONV$AB_OUT_FAB [ FAB$B_RTV ] = .COPY_FAB [ FAB$B_RTV ]; ! Reteval vindoow
	CONV$AB_OUT_FAB [ FAB$B_ORG ] = .COPY_FAB [ FAB$B_ORG ]; ! Organization
	CONV$AB_OUT_FAB [ FAB$B_RAT ] = .COPY_FAB [ FAB$B_RAT ]; ! Record attributes
	CONV$AB_OUT_FAB [ FAB$B_RFM ] = .COPY_FAB [ FAB$B_RFM ]; ! Record format
	CONV$AB_OUT_FAB [ FAB$W_MRS ] = .COPY_FAB [ FAB$W_MRS ]; ! Max record size
	CONV$AB_OUT_FAB [ FAB$L_MRN ] = .COPY_FAB [ FAB$L_MRN ]; ! Max records
	CONV$AB_OUT_FAB [ FAB$W_BLS ] = .COPY_FAB [ FAB$W_BLS ]; ! Block size
	CONV$AB_OUT_FAB [ FAB$B_BKS ] = .COPY_FAB [ FAB$B_BKS ]; ! Bucket size
	CONV$AB_OUT_FAB [ FAB$B_FSZ ] = .COPY_FAB [ FAB$B_FSZ ]; ! Fixed size
	CONV$AB_OUT_FAB [ FAB$W_GBC ] = .COPY_FAB [ FAB$W_GBC ]; ! Global Buffers

	CONV$AB_OUT_FAB [ FAB$L_FOP ] = .CONV$AB_OUT_FAB [ FAB$L_FOP ] OR
					.COPY_FAB [ FAB$L_FOP ]; ! File options

	! If the PROLOGUE option was specified and the file is indexed
	! then stuff the first key xab with the user value
	!
	IF ( .CONV$AB_OUT_FAB [ FAB$B_ORG ] EQLU FAB$C_IDX ) AND
					.CONV$AB_FLAGS [ CONV$V_PROLOG ]
	THEN
	    BEGIN

	    LOCAL	XAB : REF BLOCK [ ,BYTE ];

	    ! Find the first key xab
	    !
	    XAB = .CONV$AB_OUT_FAB [ FAB$L_XAB ];

	    ! The xabs have to be in order and there must be a key 0 so
	    ! the first one we find is the one we want
	    !
	    WHILE .XAB [ XAB$B_COD ] NEQU XAB$C_KEY
	    DO

		! If there are no more xabs then we really have a problem
		! so forget it
		!
		IF .XAB [ XAB$L_NXT ] EQLU 0
		THEN
		    RETURN CONV$_BADLOGIC
		ELSE
		    XAB = .XAB [ XAB$L_NXT ];
	
	    ! Stuff the value
	    !
	    XAB [ XAB$B_PROLOG ] = .CONV$GL_PROLOG
	    
	    END;

	! Create it
	!
	! If the record format was changed on a non VMS system
	! signal a warning (only to DCL)
	!
	$CREATE ( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

!	IF ( $CREATE ( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR ) EQLU
!							RMS$_CRE_STM ) AND
!						.CONV$AB_FLAGS [ CONV$V_DCL ]
!	THEN
!	    SIGNAL ( CONV$_CREATEDSTM );
!
	! Since a create does not fill in the summary xab do a display
	!
	$DISPLAY( FAB=CONV$AB_OUT_FAB )

	END
    ELSE
	$OPEN ( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! If we got here then we have opened a file.
    !
    CONV$AB_FLAGS [ CONV$V_OUT ] = _SET;

    ! Set some bits depending on the type of output file
    !
    ! Can only append to a sequential file
    !
    IF .CONV$AB_OUT_FAB [ FAB$B_ORG ] EQLU FAB$C_SEQ
    THEN
	CONV$AB_OUT_RAB [ RAB$V_EOF ] = .CONV$GL_APPEND
    ELSE

	! If append was on without a seq. output file then error
	!
	IF .CONV$GL_APPEND THEN RETURN CONV$_NOTSEQ;

    ! Is't not very exciting if it's not an index file
    !
    IF .CONV$AB_OUT_FAB [ FAB$B_ORG ] NEQU FAB$C_IDX
    THEN
	BEGIN
	CONV$GL_MERGE = _CLEAR;
	CONV$GL_SORT  = _CLEAR;
	CONV$GL_FAST  = _CLEAR
	END
    ELSE

	! Set the fill option if it is indexed
	!
	CONV$AB_OUT_RAB [ RAB$V_LOA ] = NOT .CONV$GL_FILL;

    ! If we are sorting or fastloading
    ! then allocate space for KEY and AREA XAB's and fill them in by reading
    ! the prologue blocks in the file
    !
    IF ( .CONV$GL_FAST OR .CONV$GL_SORT )
    THEN
	GET_PROLOGUE()
    ELSE
	BEGIN

	! If we are merging into an indexed file
	! then set the access to KEY
	!
	IF .CONV$GL_MERGE
	THEN
	    CONV$AB_OUT_RAB [ RAB$B_RAC ] = RAB$C_KEY;

	! If we are not sorting or fastloading
	! then connect the stream normally
	!
	$CONNECT ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR );

	! If the output file was not opened by now we can open it here
	!
	IF NOT .CONV$AB_FLAGS [ CONV$V_IN ]
	THEN
	    RET_ON_ERROR( CONV$$OPEN_IN() )

	END;

    ! If PAD switch is on and the file is not fixed format
    !
    IF .CONV$GL_PAD AND ( .CONV$AB_OUT_FAB [ FAB$B_RFM ] NEQU FAB$C_FIX )
    THEN
	BEGIN
	CONV$GL_PAD = _CLEAR;
	SIGNAL( CONV$_PAD )
	END;

    ! Any errors on the output rab should be write errors (exceptions are in
    ! the fast load code
    !
    CONV$AB_OUT_RAB [ RAB$L_CTX ] = CONV$_WRITEERR;

    ! Return normally
    !
    RETURN CONV$_SUCCESS

    END;

%SBTTL	'GET_PROLOGUE'
ROUTINE	GET_PROLOGUE : NOVALUE =
!++
!
! Functional Description:
!
!	Reads in the prologue blocks of the output file.  The first
!	block is pointed to by conv$ar_prologue.  The area descriptors
!	are placed pointed to by conv$ar_area_block.  If there are
!	more then one key an extra block is allocated and pointed
!	to by conv$ar_key_desc_buf.
!
! Calling Sequence:
!
!	GET_PROLOGUE()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	CONV$$GET_VM
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	TOTAL_BLOCKS,
	AREA_BLOCKS;

    ! Connect the file for Block IO for reading the
    ! prologue.
    !
    CONV$AB_OUT_RAB [ RAB$V_BIO ] = _SET;

    $CONNECT ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Figure out the number of blocks for the prologue area desc.
    !
    AREA_BLOCKS = ( ( .CONV$AB_OUT_XABSUM [ XAB$B_NOA ] + 7 ) / 8 );

    ! The total blocks is area blocks + 1
    !
    TOTAL_BLOCKS = .AREA_BLOCKS + 1;

    ! The prologue size is the size of all area desc. blocks
    !
    CONV$GW_PROLOGUE_SIZ = .TOTAL_BLOCKS * BLOCK_SIZE;

    ! If there are more than one key get an extra block
    !
    IF .CONV$AB_OUT_XABSUM [ XAB$B_NOK ] GTR 1
    THEN
	TOTAL_BLOCKS = .TOTAL_BLOCKS + 1;

    ! With that figure the number of bytes we need
    !
    ! Get the address space.
    !
    CONV$AR_PROLOGUE = CONV$$GET_VM ( .TOTAL_BLOCKS * BLOCK_SIZE );

    CONV$AR_KEY_DESC_BUF = .CONV$AR_PROLOGUE + .CONV$GW_PROLOGUE_SIZ;

    ! Read in the prologue
    !
    CONV$AB_OUT_RAB [ RAB$L_BKT ] = 1;
    CONV$AB_OUT_RAB [ RAB$L_UBF ] = .CONV$AR_PROLOGUE;
    CONV$AB_OUT_RAB [ RAB$W_USZ ] = BLOCK_SIZE;

    ! Read the prologue block
    !
    $READ ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Set the area block pointer
    !
    CONV$AR_AREA_BLOCK = .CONV$AR_PROLOGUE + BLOCK_SIZE;
 
    ! Calculate the size in bytes of the area blocks
    !
    CONV$GW_AREA_SIZE = .AREA_BLOCKS * BLOCK_SIZE;

    ! Read in the area desc.
    !
    CONV$AB_OUT_RAB [ RAB$L_BKT ] = .CONV$AR_PROLOGUE [ PLG$B_AVBN ];
    CONV$AB_OUT_RAB [ RAB$L_UBF ] = .CONV$AR_AREA_BLOCK;
    CONV$AB_OUT_RAB [ RAB$W_USZ ] = .CONV$GW_AREA_SIZE;

    ! Read the area block
    !
    $READ ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Set the proper prologue version flag
    !
    SELECTONE .CONV$AR_PROLOGUE [ PLG$W_VER_NO ] OF
    SET
	[ PLG$C_VER_NO ]	: CONV$GB_PROL_V1 = _SET;
	[ PLG$C_VER_IDX ]	: CONV$GB_PROL_V2 = _SET;
	[ PLG$C_VER_3 ]		: CONV$GB_PROL_V3 = _SET;
    TES;

    ! If this is not a fast load then we need to bounce the file so we can
    ! do record IO again. (This sure doesen'd look good!)
    !
    IF NOT .CONV$GL_FAST
    THEN
	BEGIN

	! Disconnect and Close (Dont check the disconnect)
	!
	$DISCONNECT ( RAB=CONV$AB_OUT_RAB );
	$CLOSE( FAB=CONV$AB_OUT_FAB );

	! Clear the Block IO flag
	!
	CONV$AB_OUT_RAB [ RAB$V_BIO ] = _CLEAR;

	! Reopen and Reconnect (Dont need to reconnect the PLG RAB)
	!
	$OPEN ( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

	$CONNECT ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR )

	END;

    RETURN

    END;

%SBTTL	'CREATE_BUFFER'
GLOBAL ROUTINE	CONV$$CREATE_BUFFER =
!++
!
! Functional Description:
!
!	Creates the main record buffer and sets the record sizes
!
!	The main record buffer:
!
!		--------------------------------------//-----------------
!		|		|					|
!		|		|					|
!		--------------------------------------//-----------------
!		^		^
!		|		|
!	   VFC_BUF_PTR	   REC_BUF_PTR
!
!
! Calling Sequence:
!
!	CONV$$CREATE_BUFFER()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	Record buffer pointers and size variables
!
! Routine Value:
!
!	SS$_NORMAL 
!
! Routines Called:
!
!	CONV$$GET_VM
!
! Side Effects:
!	none
!
!--

    BEGIN

    LITERAL
	MAX_REC_CTRL	= 14;	! Maximun number of control bytes for a data
				! record in index file (14 is for a fully
				! compressed prologue 3 record

    LOCAL
	IN_VFC,
	IN_MRS,
	OUT_VFC,
	OUT_EXTRA;

    ! Acccount for the VFC temporaraly
    !
    IF .CONV$AB_OUT_FAB [ FAB$B_RFM ] EQL FAB$C_VFC
    THEN
	OUT_VFC = .CONV$AB_OUT_FAB [ FAB$B_FSZ ]
    ELSE
	OUT_VFC = 0;

    ! If output MRS = 0 ( ie. VAR and VFC records ) then
    ! check for Block Spanning with Sequential Files
    ! and Bucket Crossing with Relative and Indexed
    !
    IF ( CONV$GW_OUT_MRS = .CONV$AB_OUT_FAB [ FAB$W_MRS ] ) EQL 0
    THEN
	BEGIN

	LOCAL	OUT_DEV : BLOCK [ 1,LONG ];

	! Find out if this thing is going to tape, if so use block size
	! (Since records cannot spand blocks on tape)
	!
	OUT_DEV = .CONV$AB_OUT_FAB [ FAB$L_DEV ];

	IF .OUT_DEV [ DEV$V_SQD ]
	THEN
	    CONV$GW_OUT_MRS = .CONV$AB_OUT_FAB [ FAB$W_BLS ] - .OUT_VFC - 2

	! Sequential and  NO Block spanning
	!
	ELSE IF ( .CONV$AB_OUT_FAB [ FAB$B_ORG ] EQLU FAB$C_SEQ ) AND
						.CONV$AB_OUT_FAB [ FAB$V_BLK ]
	THEN
	    CONV$GW_OUT_MRS = BLOCK_SIZE - .OUT_VFC - 2

	! Relative
	!
	ELSE IF .CONV$AB_OUT_FAB [ FAB$B_ORG ] EQLU FAB$C_REL
	THEN
	    CONV$GW_OUT_MRS = ( .CONV$AB_OUT_FAB [ FAB$B_BKS ] * BLOCK_SIZE ) -
								.OUT_VFC - 3

	! Indexed
	!
	ELSE
	    CONV$GW_OUT_MRS = ( .CONV$AB_OUT_FAB [ FAB$B_BKS ] * BLOCK_SIZE ) -
								.OUT_VFC - 7;

	END;

    ! If the Input File is UDF then the UDF_MRS is calculated from
    ! the output file attributes
    !
    IF .CONV$AB_IN_FAB [ FAB$B_RFM ] EQLU FAB$C_UDF
    THEN
	BEGIN

	IN_MRS = BLOCK_SIZE;

	! If fixed format then no problem use that value, if
	! not see if a 512 byte record will fit
	!
	IF .CONV$AB_OUT_FAB [ FAB$B_RFM ] EQL FAB$C_FIX
	THEN
	    CONV$GW_UDF_MRS = .CONV$AB_OUT_FAB [ FAB$W_MRS ]
	ELSE

	    ! If the udf record will not if into the output file then error
	    !
	    IF .CONV$GW_OUT_MRS LSS BLOCK_SIZE
	    THEN
		RETURN CONV$_UDF_BLK
	    ELSE
		CONV$GW_UDF_MRS = BLOCK_SIZE
	END
    ELSE
	BEGIN

	! Here for a normal input file
	! IN_MRS is the length of the maximun record size
	!  
	! Now see if the file is VFC
	!
	IF .CONV$AB_IN_FAB [ FAB$B_RFM ] EQL FAB$C_VFC
	THEN
	    IN_VFC = .CONV$AB_IN_FAB [ FAB$B_FSZ ]
	ELSE
	    IN_VFC = 0;

	! If max. record size is zero then we find out from Longest Record Length
	! on disk or Block Size for magtape
	!
	IF ( IN_MRS = .CONV$AB_IN_FAB [ FAB$W_MRS ] ) EQL 0
	THEN
	    BEGIN

	    LOCAL    IN_DEV : BLOCK [ 1,LONG ];

	    ! Find out if this thing is comming from tape if so use block size
	    ! (Since records cannot spand blocks on tape)
	    !
	    IN_DEV = .CONV$AB_IN_FAB [ FAB$L_DEV ];

	    IF .IN_DEV [ DEV$V_SQD ]
	    THEN
		IN_MRS = .CONV$AB_IN_FAB [ FAB$W_BLS ] - .IN_VFC

	    ! If SEQ use LRL otherwise check
	    ! bucket sizes
	    !
	    ELSE IF .CONV$AB_IN_FAB [ FAB$B_ORG ] EQL FAB$C_SEQ
	    THEN
		IN_MRS = .CONV$AB_IN_XABFHC [ XAB$W_LRL ]

	    ! Relative
	    !
	    ELSE IF .CONV$AB_IN_FAB [ FAB$B_ORG ] EQL FAB$C_REL
	    THEN
		IN_MRS = ( .CONV$AB_IN_FAB [ FAB$B_BKS ] * BLOCK_SIZE ) -
								.IN_VFC - 3

	    ! Indexed
	    !
	    ELSE
		IN_MRS = ( .CONV$AB_IN_FAB [ FAB$B_BKS ] * BLOCK_SIZE ) -
								.IN_VFC - 7

	    END

	END;

    ! Now calculate the number of blocks needed.
    !
    ! If UDF, ask for one block extra for overlapping of the buffers
    !
    IF .CONV$AB_IN_FAB [ FAB$B_RFM ] EQLU FAB$C_UDF
    THEN
	OUT_EXTRA = BLOCK_SIZE
    ELSE
	OUT_EXTRA = 0;

    BEGIN

    LOCAL
	BYTES,
	VFC_OFFSET;

    ! Determine which is larger and use that size for the Buffer Size
    !
    BYTES = MAX( BLOCK_SIZE,					! At least a page
		 ( .IN_MRS + .IN_VFC ),				! Input record size
		 ( .CONV$GW_OUT_MRS + .OUT_VFC + .OUT_EXTRA ) );! Output record size

    ! If we are doing a fast load get some extra bytes to use at the beginning
    ! of the record for control information
    !
    IF .CONV$GL_FAST
    THEN
	BYTES = .BYTES + MAX_REC_CTRL;

    ! Create the Buffer from virtural memory
    !
    CONV$GL_REC_BUF_PTR = CONV$$GET_VM ( .BYTES );

    ! If we doing a fast load hide the extra bytes at the beginning of
    ! record.
    !
    IF .CONV$GL_FAST
    THEN
	CONV$GL_REC_BUF_PTR = .CONV$GL_REC_BUF_PTR + MAX_REC_CTRL;

    ! Set the VFC offset to the max of the two offsets
    !
    VFC_OFFSET = MAX( .IN_VFC,.OUT_VFC );

    ! Correct the pointers and set the max. record size
    !
    CONV$GL_VFC_BUF_PTR = .CONV$GL_REC_BUF_PTR;
    CONV$GL_REC_BUF_PTR = .CONV$GL_VFC_BUF_PTR + .VFC_OFFSET;

    CONV$GW_MAX_REC_SIZ = .BYTES - .VFC_OFFSET

    END;

    RETURN CONV$_SUCCESS

    END;

END	ELUDOM
