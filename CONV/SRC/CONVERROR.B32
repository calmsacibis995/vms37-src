%TITLE	'VAX-11 CONVERT'
MODULE	CONV$ERROR	( IDENT='V03-000'
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Environment:
!
!		VAX/VMS Operating System
!
! Abstract:
!
!		CONVERT error handeling routines
!
! Contents:
!		RMS_ERROR
!		RMS_OPEN_ERROR
!		RMS_READ_ERROR
!
!--

!
! Author:	Keith B Thompson	Creation Date:	September-1981
!
!
! Modified by:
!
!****


LIBRARY	'SYS$LIBRARY:LIB';
REQUIRE	'SRC$:CONVERT';

OWN
	STRING_DESC	: DESC_BLK;


%SBTTL	'CONV$$RMS_ERROR'
GLOBAL ROUTINE	CONV$$RMS_ERROR	: NOVALUE =
!++
!
! Functional Description:
!
!	This routine will signal and rms error and stop execution.  It is
!	to be primarly used for detecting errors during asynchronous operations
!
! Calling Sequence:
!
!	This routine is call as an AST by RMS
!
! Input Parameters:
!
!	AST argument block which has a pointer to a rms block
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SIGNAL
!	SIGNAL_STOP
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN AP;

    BIND
	AST_BLOCK = AP : REF VECTOR [ ,LONG ];

    LOCAL
	RMS_BLOCK : REF BLOCK [ ,BYTE ];

    ! Get the rms control block (second argument in the block)
    !
    RMS_BLOCK = .AST_BLOCK [ 1 ];

    ! NOTE: We use the RAB$x_zzz codes but they are valid for the FAB as well
    !
    ! Signal the CONVert error, RMS error and stop
    !
    SIGNAL_STOP( .RMS_BLOCK [ RAB$L_CTX ],
		 .RMS_BLOCK [ RAB$L_STS ],
		 .RMS_BLOCK [ RAB$L_STV ] )

    END;


%SBTTL	'CONV$$RMS_OPEN_ERROR'
GLOBAL ROUTINE	CONV$$RMS_OPEN_ERROR : NOVALUE =
!++
!
! Functional Description:
!
!	This routine will signal an rms error and stop execution.  It is
!	to be primarly used for detecting errors during file opens.
!
! Calling Sequence:
!
!	This routine is call as an AST by RMS
!
! Input Parameters:
!
!	AST argument block which has a pointer to a FAB
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SIGNAL
!	SIGNAL_STOP
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	AP;

    BIND
	AST_BLOCK = AP : REF VECTOR [ ,LONG ];

    LOCAL
	RMS_BLOCK	: REF BLOCK [ ,BYTE ],
	FAB		: REF BLOCK [ ,BYTE ],
	NAM		: REF BLOCK [ ,BYTE ];

    ! Get the rms block (Pointed to by the second ast parameter)
    !
    RMS_BLOCK = .AST_BLOCK [ 1 ];

    ! If this is really a RAB (from a connect) then get the fab it points to
    !
    IF .RMS_BLOCK [ RAB$B_BID ] EQLU RAB$C_BID
    THEN
	FAB = .RMS_BLOCK [ RAB$L_FAB ]
    ELSE
	FAB = .RMS_BLOCK;

    ! Get the name block
    !
    NAM = .FAB [ FAB$L_NAM ];

    ! Signal the CONVert error with the best file name string
    !
    ! First try the resultant string
    !
    IF .NAM [ NAM$B_RSL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_RSL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_RSA ]
	END

    ! Next try the expanded string
    !
    ELSE IF .NAM [ NAM$B_ESL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_ESL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_ESA ]
	END

    ! If all else fails use the name string
    !
    ELSE
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .FAB [ FAB$B_FNS ];
	STRING_DESC [ DSC$A_POINTER ] = .FAB [ FAB$L_FNA ]
	END;

    ! Signal the RMS error and stop. NOTE: During the open the fab will have
    ! correct convert error code.  The rms_block will have the rms error code
    !
    SIGNAL_STOP( .FAB [ FAB$L_CTX ],1,STRING_DESC,
		 .RMS_BLOCK [ FAB$L_STS ],
		 .RMS_BLOCK [ FAB$L_STV ] )

    END;


%SBTTL	'CONV$$RMS_READ_ERROR'
GLOBAL ROUTINE	CONV$$RMS_READ_ERROR : NOVALUE =
!++
!
! Functional Description:
!
!	This routine will signal an rms error and stop execution if the RMS
!	error is NOT end of file.  It is to be used for detecting errors
!	during rms $GETs or $READs.
!
! Calling Sequence:
!
!	This routine is call as an AST by RMS
!
! Input Parameters:
!
!	AST argument block which has a pointer to a RAB
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SIGNAL
!	SIGNAL_STOP
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	AP;

    BIND
	AST_BLOCK = AP : REF VECTOR [ ,LONG ];

    LOCAL
	RAB : REF BLOCK [ ,BYTE ],
	FAB : REF BLOCK [ ,BYTE ],
	NAM : REF BLOCK [ ,BYTE ];

    ! Get the rab (Pointer to by the second ast parameter)
    !
    RAB = .AST_BLOCK [ 1 ];

    ! If this is only an end of file then return
    !
    IF .RAB [ RAB$L_STS ] EQLU RMS$_EOF
    THEN
	RETURN;

    ! Now get the fab it points to
    !
    FAB = .RAB [ RAB$L_FAB ];

    ! Get the name block
    !
    NAM = .FAB [ FAB$L_NAM ];

    ! Signal the CONVert error with the best file name string
    !
    ! First try the resultant string
    !
    IF .NAM [ NAM$B_RSL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_RSL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_RSA ]
	END

    ! Next try the expanded string
    !
    ELSE IF .NAM [ NAM$B_ESL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_ESL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_ESA ]
	END

    ! If all else fails use the name string
    !
    ELSE
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .FAB [ FAB$B_FNS ];
	STRING_DESC [ DSC$A_POINTER ] = .FAB [ FAB$L_FNA ]
	END;

    ! Signal the RMS error and stop
    !
    SIGNAL_STOP( .RAB [ RAB$L_CTX ],1,STRING_DESC,
		 .RAB [ FAB$L_STS ],
		 .RAB [ FAB$L_STV ] )

    END;

END	ELUDOM
