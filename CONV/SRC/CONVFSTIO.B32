%TITLE	'VAX-11 CONVERT'
MODULE	CONV$FSTIO	( IDENT='V03-001',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	CONVERT fast load I/O and bucket routines
!
! Contents:
!		SAVE_BUCKET
!		RESTORE_BUCKET
!		WRITE_BUCKET
!		SET_NXTBKT
!		SWAP_BUCKET
!		GET_BUCKET
!		INIT_BUCKET
!		EXTEND_AREA
!		FREE_BUCKETS
!		WRITE_PROLOGUE
!		CONVERT_VBN_ID
!		SET_KEY_BLOCK
!		WRITE_KEY_DESC
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:        	August-1980
!
!
! Modified by:
!
!	V03-001	KBT0024		Keith Thompson		25-Mar-1982
!		Change the linkage to get_bucket and remove some useless code
!
!****


PSECT
	OWN	= _CONV$FAST_D	(PIC),
	GLOBAL	= _CONV$FAST_D	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$FAST_S	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';

DEFINE_ERROR_CODES;

EXTERNAL ROUTINE
	CONV$$GET_TEMP_VM	: JSB_LINK,
	CONV$$RMS_ERROR		: NOVALUE,
	CONV$$RMS_READ_ERROR	: NOVALUE;

FORWARD ROUTINE
	SET_NXTBKT		: NOVALUE JSB_REG,
	SWAP_BUCKET		: NOVALUE JSB_REG,
	CONV$$INIT_BUCKET	: NOVALUE JSB_REG,
	EXTEND_AREA		: NOVALUE JSB_LINK,
	CONV$$WRITE_KEY_DESC	: NOVALUE JSB_LINK;

EXTERNAL
	CONV$GL_REC_BUF_PTR,			! Bottom of Record Buffer

	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL,

	CONV$GL_CTX_BLOCK,

	CONV$GL_EOF_VBN,
	CONV$GB_PROL_V3		: BYTE,
	CONV$AR_PROLOGUE	: REF BLOCK [ ,BYTE ],
	CONV$GW_PROLOGUE_SIZ	: WORD,
	CONV$AR_KEY_DESC_BUF	: REF VECTOR [ ,WORD ],
	CONV$GL_KEY_DESC_VBN	: LONG,
	CONV$AR_AREA_BLOCK	: REF BLOCKVECTOR [ ,AREA$C_BLN,BYTE ],
	CONV$GW_AREA_SIZE	: WORD;

MACRO

!	These macros make the code look a little better
!
	BKT$W_VBNFS	= .CONV$GW_VBN_FS_PTR,0,16,0%,	! VBN Freespace Pointer in index level
	BKT$W_VBNFS0	= .CONV$GW_VBN_FS_PTR0,0,16,0%,	! VBN Freespace Pointer at the data level
	BKT$L_LCBPTR	= .CONV$GW_LCB_PTR,0,32,0%;	! Last Contuation Bucket Pointer

EXTERNAL
	CONV$GB_KEY_REF		: SIGNED BYTE,

	CONV$GW_VBN_FS_PTR	: WORD,
	CONV$GW_VBN_FS_PTR0	: WORD,
	CONV$GW_LCB_PTR		: WORD;

GLOBAL	CONV$GL_CONT_VBN	: LONG;


%SBTTL	'WRITE_BUCKET'
GLOBAL ROUTINE	CONV$$WRITE_BUCKET : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Writes the current bucket into the output file
!
! Calling Sequence:
!
!	CONV$$WRITE_BUCKET()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SET_NXTBKT
!	SWAP_BUCKET
!	$WRITE
!	CONV$$RMS_ERROR	- By RMS as an AST
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    ! Set the next bucket pointer to the bucket
    !
    SET_NXTBKT();

    ! Point RMS to the bucket.  NOTE: This is where OUT_RAB is changed
    !
    CONV$AB_OUT_RAB [ RAB$L_RBF ] = .BUCKET;
    CONV$AB_OUT_RAB [ RAB$W_RSZ ] = .CTX [ CTX$L_SIZ ];
    CONV$AB_OUT_RAB [ RAB$L_BKT ] = .CTX [ CTX$L_VBN ];

    ! If we are doing double buffering on this bucket
    ! then swap pointers to the buckets and set for asyc. operation
    !
    IF .CTX [ CTX$V_DBF ]
    THEN
	BEGIN

	! Switch the buffer
	!
	SWAP_BUCKET();

	! Set the asynchronous bit
	!
	CONV$AB_OUT_RAB [ RAB$V_ASY ] = _SET

	END
    ELSE

	! If not then we need a syncrous call
	!
	CONV$AB_OUT_RAB [ RAB$V_ASY ] = _CLEAR;

    ! Wait on the last IO if necessary
    !
    $WAIT ( RAB=CONV$AB_OUT_RAB );

    ! Write The Bucket
    !
    $WRITE ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_ERROR );

    RETURN

    END;


%SBTTL	'SET_NXTBKT'
ROUTINE	SET_NXTBKT : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Writes the next bucket vbn field in the current bucket
!
! Calling Sequence:
!
!	SET_NXTBKT()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;

    LOCAL	AREA;

    ! Get the area that the bucket is in
    !
    AREA = .CTX [ CTX$B_ARE ];

    ! If this is the last bucket in a horz. chain
    ! then write back pointers to the beginning of the chain
    ! else write next bucket pointers
    !
    IF .BUCKET [ BKT$V_LASTBKT ]
    THEN

	! Next bucket pointer points to the first bucket in this chain
	!
	BUCKET [ BKT$L_NXTBKT ] = .CTX [ CTX$L_STR ]
    ELSE

	! First see if the next bucket will fit in the current extent. If it dosen't
	! then set the next bkt. ptr to EOF else set it to next bucket
	!
	IF ( .CONV$AR_AREA_BLOCK [ .AREA,AREA$B_ARBKTSZ ]  GTR
		( .CONV$AR_AREA_BLOCK [ .AREA,AREA$L_CNBLK ] -
			.CONV$AR_AREA_BLOCK [ .AREA,AREA$L_USED ] ) )
	THEN

	    ! Next bucket pointer points to end of file where the next extend
	    ! will come from. (in INIT_BUCKET)
	    !
	    BUCKET [ BKT$L_NXTBKT ] = .CONV$GL_EOF_VBN
	ELSE

	    ! Next bucket pointer points to the next bucket VBN in this area
	    !
	    BUCKET [ BKT$L_NXTBKT ] = .CONV$AR_AREA_BLOCK [ .AREA,AREA$L_NXTVBN ];

    RETURN

    END;

%SBTTL	'SWAP_BUCKET'
ROUTINE	SWAP_BUCKET : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Swaps the current bucket with the secondary bucket for
!	double buffering
!
! Calling Sequence:
!
!	SWAP_BUCKET()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;

    IF .CTX [ CTX$V_DBX ]
    THEN
	BEGIN
	BUCKET = .CTX [ CTX$L_PT0 ];
	CTX [ CTX$L_PTR ] = .CTX [ CTX$L_PT0 ];
	CTX [ CTX$L_END ] = .CTX [ CTX$L_EN0 ]
	END
    ELSE
	BEGIN
	BUCKET = .CTX [ CTX$L_PT1 ];
	CTX [ CTX$L_PTR ] = .CTX [ CTX$L_PT1 ];
	CTX [ CTX$L_END ] = .CTX [ CTX$L_EN1 ]
	END;

    CTX [ CTX$V_DBX ] = NOT .CTX [ CTX$V_DBX ];

    RETURN

    END;

%SBTTL	'GET_BUCKET'
GLOBAL ROUTINE	CONV$$GET_BUCKET ( AREA ) : NOVALUE JSB_REG_ARG1 =
!++
!
! Functional Description:
!
!	Allocates and formats a pair of buckets in memory
!
! Calling Sequence:
!
!	CONV$$GET_BUCKET( area )
!
! Input Parameters:
!
!	area	- Area from witch the bucket is to be allocated
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	CONV$$GET_TEMP_VM
!	INIT_BUCKET
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    LOCAL
	BYTES;

    ! Get the number of bytes per bucket for that area:
    ! ( bytes = blocks * block_size * 2 ) NOTE: *2 for double buffering
    !
    BYTES = ( .CONV$AR_AREA_BLOCK [ .AREA,AREA$B_ARBKTSZ ] * BLOCK_SIZE * 2 );

    ! Get the space.
    !
    BUCKET = CONV$$GET_TEMP_VM ( .BYTES );

    ! For double buffering then hide the extra buffer for later
    !
    BYTES = .BYTES / 2;

    ! Initialize some static values
    !
    CTX [ CTX$L_PTR ] = .BUCKET;
    CTX [ CTX$L_SIZ ] = .BYTES;

    ! CTX$L_END points at the first free byte BEFORE the check byte
    !
    CTX [ CTX$L_END ] = .BUCKET + .BYTES - 2;
    CTX [ CTX$B_ARE ] = .AREA;
    BUCKET [ BKT$B_LEVEL ] = .CTX [ CTX$B_LVL ];
    BUCKET [ BKT$B_BKTCB ] = _CLEAR;

    ! Clear the check bytes
    !
    ! The one at he beginning of the bucket
    !
    BUCKET [ BKT$B_CHECKCHAR ] = _CLEAR;

    ! The one at the end
    !
    BEGIN		! CHECK_BYTE local

    LOCAL	CHECK_BYTE : REF BLOCK [ ,BYTE ];

    CHECK_BYTE = .CTX [ CTX$L_END ];
    CHECK_BYTE [ 1,0,8,0 ] = _CLEAR

    END;		! CHECK_BYTE local

    ! Init. some pointers into the bucket needed for prologue 3 files
    !
    IF .CONV$GB_PROL_V3
    THEN

	! For level 0 (data) buckets we can have LCB pointers and
	! VBN freespace pointers
	!
	IF .CTX [ CTX$B_LVL ] EQL 0
	THEN

	    ! Primary data bucket may only have a LCB pointer (if dups allowed)
	    !
	    IF .CONV$GB_KEY_REF EQL 0
	    THEN
		CONV$GW_LCB_PTR = .BYTES - 6
	    ELSE
		BEGIN

		! A SIDR bucket has a VBN freespace pointer an maybe a LCB pointer
		!
		CONV$GW_LCB_PTR = .BYTES - 8;
		CONV$GW_VBN_FS_PTR0 = .BYTES - 4
		END
	ELSE

	    ! Index buckets only have a VBN freespace pointer
	    !
	    CONV$GW_VBN_FS_PTR = .BYTES - 4;

    ! Prologue dependent values
    !
    IF .CONV$GB_PROL_V3
    THEN
	BUCKET [ BKT$B_INDEXNO ] = .CONV$GB_KEY_REF
    ELSE
	BEGIN
	BUCKET [ BKT$B_AREANO ] = .AREA;
	BUCKET [ BKT$B_LSTRECID ] = 255
	END;

    ! For double buffering then set up the pointers to the buffers and init
    ! the extra buffer
    !
    ! Set up the various pointers
    !
    CTX [ CTX$L_PT0 ] = .BUCKET;
    CTX [ CTX$L_PT1 ] = .BUCKET + .BYTES;
    CTX [ CTX$L_EN0 ] = .CTX [ CTX$L_END ];
    CTX [ CTX$L_EN1 ] = .CTX [ CTX$L_END ] + .BYTES;

    CH$MOVE ( BKT$K_OVERHDSZ + 1,.CTX [ CTX$L_PT0 ],.CTX [ CTX$L_PT1 ] );

    BEGIN	! CHECK_BYTE local

    LOCAL	CHECK_BYTE : REF BLOCK [ ,BYTE ];

    ! Clear the end check byte
    !
    CHECK_BYTE = .CTX [ CTX$L_EN1 ];
    CHECK_BYTE [ 1,0,8,0 ] = _CLEAR

    END;	! CHECK_BYTE local

    ! Tell everyone that we are doind double buffering and which bucket
    ! are pointing to
    !
    CTX [ CTX$V_DBF ] = _SET;
    CTX [ CTX$V_DBX ] = _CLEAR;		! Clear = bucket 0, Set = bucket 1

    ! Initialize dynamic values
    !
    CONV$$INIT_BUCKET();

    ! Set the pointer for this level
    !
    CTX [ CTX$L_STR ] = .CTX [ CTX$L_VBN ];

    ! Say that the bucket is ready and that will have the first record
    !
    CTX [ CTX$V_RDY ] = _SET;
    CTX [ CTX$V_FST ] = _SET;

    RETURN

    END;

%SBTTL	'INIT_BUCKET'
GLOBAL ROUTINE	CONV$$INIT_BUCKET : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Gets a new VBN for a bucket in the proper area and initializes
!	all of the dynamic fields in the bucket
!
! Calling Sequence:
!
!	CONV$$INIT_BUCKET()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	EXTEND_AREA
!
! Side Effects:
!
!	Could extend the allocation of the output file
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_BLOCK;

    LOCAL	AREA;

    AREA = .CTX [ CTX$B_ARE ];

    ! See if the bucket will fit in the current extent if it doesent extend the
    ! file.
    !
    IF ( .CONV$AR_AREA_BLOCK [ .AREA,AREA$B_ARBKTSZ ] GTR
	( .CONV$AR_AREA_BLOCK [ .AREA,AREA$L_CNBLK ] -
				.CONV$AR_AREA_BLOCK [ .AREA,AREA$L_USED ] ) )
    THEN

	! Extend area
	!
	EXTEND_AREA ( .AREA );

    ! Set the VBN of the bucket and determine the size of the VBN pointers
    !
    BEGIN	! VBN local

    LOCAL	VBN;

    ! Get the next VBN of this bucket
    !
    VBN = .CONV$AR_AREA_BLOCK [ .AREA,AREA$L_NXTVBN ];

    CTX [ CTX$L_VBN ] = .VBN;

    ! Determine the pointer size needed for this VBN
    !
    IF .VBN LSS 65536
    THEN
	CTX [ CTX$V_VBN ] = 0		! 2 byte pointer
    ELSE
	IF .VBN LSS 1048576
	THEN
	    CTX [ CTX$V_VBN ] = 1	! 3 byte
	ELSE
	    CTX [ CTX$V_VBN ] = 2	! 4 byte

    END;	! VBN local

    ! Correct the pointers and counters in the prologue area descriptor
    !
    CONV$AR_AREA_BLOCK [ .AREA,AREA$L_USED ] =
				.CONV$AR_AREA_BLOCK [ .AREA,AREA$L_USED ] +
				.CONV$AR_AREA_BLOCK [ .AREA,AREA$B_ARBKTSZ ];

    CONV$AR_AREA_BLOCK [ .AREA,AREA$L_NXTVBN ] =
				.CONV$AR_AREA_BLOCK [ .AREA,AREA$L_NXTVBN ] +
				.CONV$AR_AREA_BLOCK [ .AREA,AREA$B_ARBKTSZ ];

    ! Reinitialize some fields and pointers
    !
    BUCKET [ BKT$W_ADRSAMPLE ] = .CTX [ CTX$L_VBN ];

    ! Prologue dependent pointers and things
    !
    IF .CONV$GB_PROL_V3
    THEN
	BEGIN	! Prologue 3

	LOCAL	POINTERS;

	POINTERS = 0;	! Keep track of the bytes used for pointers in the bucket

	! Index buckets and SIDR buckets have VBN freespace pointers, also the
	! VBN freespace pointer can be in different places depending on level
	!
	IF .CTX [ CTX$B_LVL ] NEQ 0
	THEN
	    BEGIN

	    LOCAL CTX_M1 : REF BLOCK [ ,BYTE ];

	    ! The VBN of the bucket one level down determines size
	    ! of the VBN pointers in this bucket
	    !
	    CTX_M1 = .CTX - CTX$K_BLN;

	    BUCKET [ BKT$V_PTR_SZ ] = .CTX_M1 [ CTX$V_VBN ];

	    ! The vbn freespace points to the byte just before the pointer
	    !
	    BUCKET [ BKT$W_VBNFS ] = .CONV$GW_VBN_FS_PTR - 1;

	    POINTERS = 2

	    END
	ELSE
	    BEGIN

	    ! Zero the lcb pointer (if any)
	    !
	    BUCKET [ BKT$L_LCBPTR ] = 0;

	    ! For secondary data buckets set up the vbn freespace pointer
	    !
	    IF .CONV$GB_KEY_REF NEQ 0
	    THEN

		! If we allow dups then there is a LCB pointer
		!
		IF .KEY_BLOCK [ KEY$V_DUPKEYS ]
		THEN
		    BEGIN

		    ! The vbn freespace points to the byte just before the
		    ! LCB pointer
		    !
		    BUCKET [ BKT$W_VBNFS0 ] = .CONV$GW_LCB_PTR - 1;

		    POINTERS = 6

		    END
		ELSE
		    BEGIN

		    ! The vbn freespace points to the byte just before itself
		    !
		    BUCKET [ BKT$W_VBNFS0 ] = .CONV$GW_VBN_FS_PTR0 - 1;

		    POINTERS = 2

		    END
	    END;

	! The key freespace always points just past the bucket overhead
	!
	BUCKET [ BKT$W_KEYFRESPC ] = BKT$C_OVERHDSZ;

	! Reset the next record ID
	!
	BUCKET [ BKT$W_NXTRECID ] = 1;

	! Calculate the avaiable space in the bucket
	!
	CTX [ CTX$W_SPC ] = .CTX [ CTX$L_SIZ ] -	! Space in bucket
				BKT$C_OVERHDSZ -	! Minus Bucket overhead,
				2 -			!  check byte and others,
				.POINTERS		!  pointers in bucket

	END	! Prologue 3
    ELSE
	BEGIN	! Prologue 1,2

	! The freespace always points just past the bucket overhead
	!
	BUCKET [ BKT$W_FREESPACE ] = BKT$C_OVERHDSZ;

	! Reset the record ID
	!
	BUCKET [ BKT$B_NXTRECID ] = 1;

	! Calculate the avaiable space in the bucket
	!
	CTX [ CTX$W_SPC ] = .CTX [ CTX$L_SIZ ] -	! Space in bucket
				BKT$C_OVERHDSZ -	! Minus Bucket overhead
				1			!  & check byte

	END;	! Prologue 1,2

    ! Indicate that the bucket has not been used yet
    !
    CTX [ CTX$W_USE ] = 0;

    RETURN

    END;

%SBTTL	'EXTEND_AREA'
ROUTINE	EXTEND_AREA ( AREA ) : NOVALUE JSB_LINK =
!++
!
! Functional Description:
!
!	Extens the disk allocation of a specified area
!
! Calling Sequence:
!
!	EXTEND_AREA ( .area )
!
! Input Parameters:
!
!	AREA - 	 Area to be extended
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	$EXTEND
!	CONV$$RMS_ERROR	- By RMS as an AST
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Set the allocation to the largest size. (To aviod bad parameters)
    !
    CONV$AB_OUT_FAB [ FAB$L_ALQ ] =
		MAX( .CONV$AR_AREA_BLOCK [ .AREA,AREA$W_DEQ ],
				.CONV$AR_AREA_BLOCK [ .AREA,AREA$B_ARBKTSZ ] );

    ! Wait on the rab in case we have a asyinc operation going on
    !
    $WAIT( RAB=CONV$AB_OUT_RAB );

    ! Stuff the error if we get one
    !
    CONV$AB_OUT_FAB [ FAB$L_CTX ] = CONV$_EXTN_ERR;

    ! Do the extend
    !
    $EXTEND ( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_ERROR );

    ! Reset some pointers in the prologue
    !
    CONV$AR_AREA_BLOCK [ .AREA,AREA$L_CVBN ] = .CONV$GL_EOF_VBN;
    CONV$AR_AREA_BLOCK [ .AREA,AREA$L_NXTVBN ] = .CONV$GL_EOF_VBN;
    CONV$AR_AREA_BLOCK [ .AREA,AREA$L_CNBLK ] = .CONV$AB_OUT_FAB [ FAB$L_ALQ ];
    CONV$AR_AREA_BLOCK [ .AREA,AREA$L_USED ] = 0;
    CONV$GL_EOF_VBN = .CONV$GL_EOF_VBN + .CONV$AB_OUT_FAB [ FAB$L_ALQ ];

    RETURN

    END;

!%SBTTL	'FREE_BUCKETS'
!GLOBAL ROUTINE	CONV$$FREE_BUCKETS : NOVALUE JSB_REG =
!++
!
! Functional Description:
!
!	Returns the virtural memory allocated for the bucket buffers
!
! Calling Sequence:
!
!	CONV$$FREE_BUCKETS()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	LIB$FREE_VM
!
! Side Effects:
!	none
!
!--
!
!    BEGIN
!
!    DEFINE_CTX;
!
!    ! Free the dynamic memory used by the buckets
!    !
!    CTX = .CONV$GL_CTX_BLOCK;
!
!    ! Check all of the levels
!    !
!    INCR I FROM 1 TO MAX_IDX_LVL BY 1
!    DO
!
!	! If the bucket was used free it else exit and return
!	!
!	IF .CTX [ CTX$V_RDY ]
!	THEN
!	    BEGIN
!
!	    LIB$FREE_VM( CTX [ CTX$L_SIZ ],CTX [ CTX$L_PTR ] );
!	    CTX [ CTX$V_RDY ] = _CLEAR;
!	    CTX = .CTX + CTX$K_BLN
!
!	    END
!	ELSE
!	    EXITLOOP;
!
!    RETURN
!
!    END;

%SBTTL	'WRITE_PROLOGUE'
GLOBAL ROUTINE	CONV$$WRITE_PROLOGUE : NOVALUE =
!++
!
! Functional Description:
!
!	Writes the prologue back to the output file
!
! Calling Sequence:
!
!	CONV$$WRITE_PROLOGUE()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	$WRITE
!	CONV$$RMS_ERROR	- By RMS as an AST
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Recalculate checksum for prologue blocks
    !
    INCR I FROM 0 TO ( .CONV$GW_PROLOGUE_SIZ - BLOCK_SIZE ) BY BLOCK_SIZE
    DO
	BEGIN

	LOCAL
	    CHECKSUM : WORD,
	    PROL_BLK : REF VECTOR [ ,WORD ];

	CHECKSUM = 0;
	PROL_BLK = .CONV$AR_PROLOGUE + .I;

	INCR J FROM 0 TO 254 BY 1
	DO
	    CHECKSUM = .CHECKSUM + .PROL_BLK [ .J ];

	PROL_BLK [ 255 ] = .CHECKSUM
	END;

    ! Give an different error here so that the user knows his file is really
    ! screwed up!
    !
    CONV$AB_OUT_RAB [ RAB$L_CTX ] = CONV$_PROL_WRT;

    ! Write back the prologue
    !
    CONV$AB_OUT_RAB [ RAB$L_BKT ] = 1;
    CONV$AB_OUT_RAB [ RAB$L_RBF ] = .CONV$AR_PROLOGUE;
    CONV$AB_OUT_RAB [ RAB$W_RSZ ] = BLOCK_SIZE;

    $WRITE ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_ERROR );

    ! Write back the area desc.
    !
    CONV$AB_OUT_RAB [ RAB$L_BKT ] = .CONV$AR_PROLOGUE [ PLG$B_AVBN ];
    CONV$AB_OUT_RAB [ RAB$L_RBF ] = .CONV$AR_AREA_BLOCK;
    CONV$AB_OUT_RAB [ RAB$W_RSZ ] = .CONV$GW_AREA_SIZE;

    $WRITE ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_ERROR );

    RETURN

    END;

%SBTTL	'CONVERT_VBN_ID'
GLOBAL ROUTINE	CONV$$CONVERT_VBN_ID	: CONVERT_VBN_ID_LINK NOVALUE =
!++
!
! Functional Description:
!
!	Converts the rfa created by the sort of the output file
!	into a VBN and ID to be used as an alturnate index pointer
!
! Calling Sequence:
!
!	CONV$$CONVERT_VBN_ID()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	SORT_VBN - R6	VBN of the primary data record for this key
!	SORT_ID  - R7	ID of the primary data record for this key
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	SORT_VBN,
	SORT_ID;

    !   Get the VBN an offset returned by SORT by RFA
    !
    LOCAL	SORT_RFA : REF BLOCK [ ,BYTE ];

    SORT_RFA = .CONV$GL_REC_BUF_PTR;

    SORT_VBN = .SORT_RFA [ 0,0,32,0 ];
    SORT_ID = .SORT_RFA [ 4,0,16,0 ];

    RETURN

    END;

%SBTTL	'SET_KEY_BLOCK'
GLOBAL ROUTINE	CONV$$SET_KEY_BLOCK ( KEY ) : JSB_REG11_ARG1 =
!++
!
! Functional Description:
!
!	Sets the key block (key descriptor from the output files
!	prologue) to the current key of reference
!
! Calling Sequence:
!
!	CONV$$SET_KEY_BLOCK()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$$GB_KEY_REF
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	CONV$_SUCCESS or CONV$_NOKEY
!
! Routines Called:
!
!	CONV$$WRITE_KEY_DESC
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_KEY_BLOCK;

    ! If we are looking at this key already then don't wast our time
    !
    IF .KEY EQL .CONV$GB_KEY_REF
    THEN
	RETURN CONV$_SUCCESS;

    ! Write the old desc. in case it has been changed
    !
    CONV$$WRITE_KEY_DESC();

    ! If the key is the primary key then this is easy
    !
    IF .KEY EQL 0
    THEN

	! Set the key block pointer to the prologue where key 0 always is
	!
	KEY_BLOCK = .CONV$AR_PROLOGUE

    ELSE
	BEGIN

	! If this key is less than the one we are looking at then go back to key
	! 0 and start looking there
	!
	IF .KEY LSS .CONV$GB_KEY_REF
	THEN
	    KEY_BLOCK = .CONV$AR_PROLOGUE;

	! Loop until you find the correct key
	!
	WHILE 1
	DO
	    BEGIN

	    ! If this is the key we are looking for exit the loop
	    !
	    IF .KEY EQL .KEY_BLOCK [ KEY$B_KEYREF ]
	    THEN
		EXITLOOP;

	    ! If the next key in the chain if not in this block then get the
	    ! next block in the chain
	    !
	    IF .KEY_BLOCK [ KEY$L_IDXFL ] NEQ 0
	    THEN
		BEGIN

		! Get the VBN of the next block
		!
		CONV$GL_KEY_DESC_VBN = .KEY_BLOCK [ KEY$L_IDXFL ];

		! Have key block point to the right place in the new block
		!
		KEY_BLOCK = .CONV$AR_KEY_DESC_BUF + .KEY_BLOCK [ KEY$W_NOFF ];

		! Read the block
		!
		CONV$AB_OUT_RAB [ RAB$L_BKT ] = .CONV$GL_KEY_DESC_VBN;
		CONV$AB_OUT_RAB [ RAB$L_UBF ] = .CONV$AR_KEY_DESC_BUF;
		CONV$AB_OUT_RAB [ RAB$W_USZ ] = BLOCK_SIZE;

		RET_ON_ERROR( $READ ( RAB=CONV$AB_OUT_RAB ) )

		END
	    ELSE

		! If the offset is 0 then there are no more keys
		!
		IF .KEY_BLOCK [ KEY$W_NOFF ] EQL 0
		THEN
		    RETURN CONV$_NOKEY
		ELSE

		    ! Point the key block to the next key descriptor
		    !
		    KEY_BLOCK = .CONV$AR_KEY_DESC_BUF + .KEY_BLOCK [ KEY$W_NOFF ]
	    END;

	END;

	! This is a little cluge to make sure things work everywhere...
	! For non prologue 3 files (1,2), the only type of segmented key was
	! string.  Now with differend data types per segment we have to check
	! each segment.  To avoid any problems with checking a key descriptor
	! field which is not supposed to be used in prologue 1,2 files lets
	! zero it here (0=string data type). Also move the prologue 1,2 data
	! type to the prologue 3 segment 0 spot.
	!
	IF NOT .CONV$GB_PROL_V3
	THEN
	    BEGIN
	    CH$FILL ( 0,7,.KEY_BLOCK + 89 );
	    KEY_BLOCK [ KEY$B_TYPE ] = .KEY_BLOCK [ KEY$B_DATATYPE ]
	    END;

	! This better be the only place where this is changed
	!
	CONV$GB_KEY_REF = .KEY;

	RETURN CONV$_SUCCESS
    END;

%SBTTL	'WRITE_KEY_DESC'
GLOBAL ROUTINE	CONV$$WRITE_KEY_DESC : NOVALUE JSB_LINK =
!++
!
! Functional Description:
!
!	Writes back to the output file the current key descriptor
!
! Calling Sequence:
!
!	CONV$$WRITE_KEY_DESC()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$GB_KEY_REF
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	$WRITE
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Don't write out the primary key desc. since that is in the prologue
    ! block of the file and is written out by WRITE_PROLOGUE ( also don't
    ! write if it is -1 ie. uninitialized buffer )
    !
    IF .CONV$GB_KEY_REF GTR 0
    THEN
	BEGIN

	! Calculate the checksum for this block
	!
	LOCAL    CHECKSUM : WORD;

	CHECKSUM = 0;

	INCR J FROM 0 TO 254 BY 1
	DO
	    CHECKSUM = .CHECKSUM + .CONV$AR_KEY_DESC_BUF [ .J ];

	CONV$AR_KEY_DESC_BUF [ 255 ] = .CHECKSUM;

	CONV$AB_OUT_RAB [ RAB$L_BKT ] = .CONV$GL_KEY_DESC_VBN;
	CONV$AB_OUT_RAB [ RAB$L_RBF ] = .CONV$AR_KEY_DESC_BUF;
	CONV$AB_OUT_RAB [ RAB$W_RSZ ] = BLOCK_SIZE;

	! It's ok to call rms_read_error it works for writes to
	!
	$WRITE ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_READ_ERROR )

	END;

    RETURN

    END;

END	ELUDOM
