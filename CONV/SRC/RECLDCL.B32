%TITLE	'VAX-11 CONVERT/RECLAIM'
MODULE	RECL$DCL	( IDENT='V03-002',
			MAIN=START
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT/RECLAIM
!
! Environment:
!
!		VAX/VMS Operating System
!
! Abstract:	Main routines
!
! Contents:
!		main
!
!--

!
! Author:	Keith B Thompson
!		Peter Lieberwirth	Creation date:	August-1981
!
!
! Modified by:
!
!	V03-002	KBT0043		Keith Thompson		3-Apr-1982
!		Change the refrence to conv$ab_flags to use the vector stuff
!
!	V03-001	KBT0020		Keith Thompson		23-Mar-1982
!		Correct the display of CPU time
!
!****


LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';

EXTERNAL ROUTINE
	LIB$INIT_TIMER		: ADDRESSING_MODE ( GENERAL ),
	CLI$GET_VALUE		: ADDRESSING_MODE ( GENERAL ),
	CLI$PRESENT		: ADDRESSING_MODE ( GENERAL ),
	CONV$RECLAIM		: ADDRESSING_MODE ( GENERAL ),
	LIB$STAT_TIMER		: ADDRESSING_MODE ( GENERAL ),
	LIB$PUT_OUTPUT		: ADDRESSING_MODE ( GENERAL );

FORWARD ROUTINE
	MULQ	: NOVALUE;

EXTERNAL
	CONV$AB_FLAGS		: ADDRESSING_MODE( GENERAL );

OWN
	FILE_NAME	: DESC_BLK
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D ),

	STATISTICS_BLOCK	: VECTOR [ 5,LONG ] INITIAL ( 4,0,0,0,0 ),

	!	FAO Processing
	!
	FAO_BUFFER	: VECTOR [ 132,BYTE ],
	FAO_DESC	: DESC_BLK
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D,
					[ DSC$W_LENGTH ] = 132,
					[ DSC$A_POINTER ] = FAO_BUFFER ),
	PUT_DESC	: DESC_BLK
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D,
					[ DSC$W_LENGTH ] = 132,
					[ DSC$A_POINTER ] = FAO_BUFFER ),

	TIMER_BLK	: LONG,

	ELP_TIME	: VECTOR [ 2,LONG ],
	CPU_TIME	: VECTOR [ 2,LONG ],

	ELP_TIM_BUF	: VECTOR [ 16,BYTE ],
	CPU_TIM_BUF	: VECTOR [ 16,BYTE ],

	ELP_DESC	: DESC_BLK	INITIAL ( 16,ELP_TIM_BUF ),
	CPU_DESC	: DESC_BLK	INITIAL	( 16,CPU_TIM_BUF ),

	ONE		: INITIAL(1),
	TWO		: INITIAL(2);

    BIND
	STATS = UPLIT(

	DESCRIPTOR( ' !/ RECLAIM Statistics' ),
	DESCRIPTOR( 'Total Buckets Scanned:     !8UL' ),
	DESCRIPTOR( 'Data Buckets Reclaimed:    !8UL' ),
	DESCRIPTOR( 'Index Buckets Reclaimed:   !8UL' ),
	DESCRIPTOR( 'Total Buckets Reclaimed:   !8UL' ),
	DESCRIPTOR( 'Elapsed Time:      !AS!_CPU Time:      !AS' )

	) : VECTOR;


%SBTTL	'Main Routine'
ROUTINE	START	=
!++
!
! Functional Description:
!
!	DCL executable inage
!
! Calling Sequence:
!
!	By dcl
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	LIB$INIT_TIMER
!	CLI$PRESENT
!	CLI$GET_VALUE
!	CONV$RECLAIM
!	LIB$STAT_TIMER
!	$ASCTIM
!	$FAO
!	LIB$PUT_OUTPUT
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	SUBM;

    LOCAL
	STATISTICS,
	LENGTH,
	TOTAL_COUNT;

    BIND
	CONV_CTRL = CONV$AB_FLAGS + .CONV$AB_FLAGS : BLOCK [ ,BYTE ];

    ! Start the timer
    !
    LIB$INIT_TIMER( TIMER_BLK );

    ! Indicate that this is a DCL call
    !
    CONV_CTRL [ CONV$V_DCL ] = _SET;

    ! Get the switch from DCL
    !
    STATISTICS = CLI$PRESENT( DESCRIPTOR( 'STATISTICS' ) );

    ! Get the input file name
    !
    CLI$GET_VALUE( DESCRIPTOR( 'FILE_NAME' ),FILE_NAME );

    ! Reclaim the file
    !
    RET_ON_ERROR( CONV$RECLAIM ( FILE_NAME,STATISTICS_BLOCK ) );

    ! Output some stats if wanted
    !
    IF .STATISTICS
    THEN
	BEGIN

	OWN
	    ZERO_Q	: VECTOR [ 2,LONG ] INITIAL( 0,0 ),	! Used for
	    TEMP_TIME	: VECTOR [ 2,LONG ],			! conversion
	    MUL100K	: VECTOR [ 2,LONG ] INITIAL( 100000,0 );! of times

	! Get Preformance Stats
	!
	LIB$STAT_TIMER( ONE,	ELP_TIME,	TIMER_BLK );
	LIB$STAT_TIMER( TWO,	TEMP_TIME,	TIMER_BLK );

	! Convert to delta time
	!
	SUBM( 2,ELP_TIME,ZERO_Q,ELP_TIME );

	! Convert internal times to ASCII
	!
	$ASCTIM( TIMLEN = 0,
		 TIMBUF = ELP_DESC,
		 TIMADR = ELP_TIME,
		 CVTFLG = 0 );

        ! The CPU time is given in 10msec ticks so we need to convert it to
	! system delta time
	!
	! Convert to 10nsec ticks
	!
	MULQ( TEMP_TIME,MUL100K,CPU_TIME );

	! Convert to delta time
	!
	SUBM( 2,CPU_TIME,ZERO_Q,CPU_TIME );

	! Conver to ascii
	!
	$ASCTIM( TIMLEN = 0,
		 TIMBUF = CPU_DESC,
		 TIMADR = CPU_TIME,
		 CVTFLG = 0 );

	! Loop to output the first 5 lines of the display
	!
	INCR I FROM 0 TO 4 BY 1
	DO
	    BEGIN

	    ! FAO the line
	    !
	    $FAO( .STATS [ .I ],LENGTH,FAO_DESC,.STATISTICS_BLOCK [ .I ] );

	    PUT_DESC [ DSC$W_LENGTH ] = .LENGTH;

	    ! Output the line
	    !
	    LIB$PUT_OUTPUT( PUT_DESC )

	    END;

	! Elasped Time and CPU Time
	!
	$FAO( .STATS [ 5 ],LENGTH,FAO_DESC,ELP_DESC,CPU_DESC );
	PUT_DESC [ DSC$W_LENGTH ] = .LENGTH;
	LIB$PUT_OUTPUT( PUT_DESC );

	END;

    RETURN SS$_NORMAL

    END;

%SBTTL	'MULQ'
ROUTINE	MULQ ( MUL1 : REF VECTOR [ 2,LONG ],
	       MUL2 : REF VECTOR [ 2,LONG ],
	       PROD : REF VECTOR [ 2,LONG ] ) : NOVALUE =

!++
!
! Functional Description:
!
!	Multiplies two quadwords.  This routine was converted from the example
!	of the EMUL instruction in the VAX Architecture Handbook
!
! Calling Sequence:
!
!	MULQ( mul1,mul2,prod )
!
! Input Parameters:
!
!	mul1	- quadword multiplier
!	mul2	- quadword multiplier
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	prod	- quadword product (note: output cannot be same as either input)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	EMUL;

    BIND
	MUL1S = MUL1 [ 0 ] : SIGNED,
	MUL2S = MUL2 [ 0 ] : SIGNED;

    LOCAL
	ZERO : INITIAL( 0 ),
	TEMP;

    ! Multiply low half
    !
    EMUL( .MUL1,.MUL2,ZERO,.PROD );

    ! High half = A[high] * B[low] + A[low] * B[high]
    !
    TEMP = ( .MUL1 [ 1 ] * .MUL2 [ 0 ] ) + ( .MUL1 [ 0 ] * .MUL2 [ 1 ] );

    ! If A[low]<0 then compensate of unsigned bias of 2**32
    !
    IF .MUL1S LSS 0
    THEN
	TEMP = .TEMP + .MUL2 [ 0 ];

    ! If B[low]<0 then compensate of unsigned bias of 2**32
    !
    IF .MUL2S LSS 0
    THEN
	TEMP = .TEMP + .MUL1 [ 0 ];

    ! Combine with high half of A[low] * B[low]
    !
    PROD [ 1 ] = .PROD [ 1 ] + .TEMP;

    RETURN

    END;

END	ELUDOM
