.IDENT	/V03-001/
.TITLE	CONV$FSTMR CONVERT macro routines
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Facility:	VAX-11 CONVERT
;
; Abstract:
;		CONVERT macro routines for data compression and key
;		conversion
;
; Environment:
;
;		VAX/VMS Operating System
;
;--

;
; Authors:	Maria Nasr	Creation date:	1-May-81
;		P. S. Knibbe
;		Keith Thompson
;
; Modified by:
;
;	V03-001	KBT0011		Keith Thompson		16-Mar-1982
;		Make the modifications made to the corresponding rms module
;		which correct some problems in the data compression routine
;
;****

	.PSECT	CODE,EXE,PIC,NOWRT


.SBTTL	CONV$$COMPRESS_DATA	- does random compression on data section
;++
;
; Functional Description:
;
;	This routine is called to do compression on the data section of the
;	record.  It searches for consecutive sequences of 5 or more
;	repeating characters, and compresses them.  For each sequence that is
;	not compressed, it allocates a word to count the number of characters
;	in the data segment, and a byte to indicate the number of characters
;	compressed from the end.
;
; Calling sequence:
;
;	CONV$$COMPRESS_DATA()
;
; Input Parameters:
;
;	R6 : Pointer to next field count
;	R7 : Pointer to truncation count (end of record)
;
; Implicit Inputs:
;	None
;
; Output Parameters:
;
; Implicit Outputs:
;
;	R3 points to one byte past end of record (byte after last
;	   truncation count)
;
; Routine Value:
;	none
;
; Side Effects:
;
;	The data section is compressed
;	Registers R1,R3,R6 and R7 are clobbered
;
; Working registers:
;
;	R3 : starting point of destination buffer
;	R4 : starting point of non-compressed field
;	R5 : starting point of possible compressed field
;	R8 : index register thru search
;	R9 : count of characters compressed
;
;--

CONV$$COMPRESS_DATA::

	PUSHR	#^M<R2,R4,R5,R8,R9>	; save registers
	ADDL3	#2,R6,R8		; get pointer to start of data
	MOVL	R8,R3			; save destination buffer start addr
10$:	MOVL	R8,R4			; reset start point
20$:	CMPL	R7,R8			; are we all done?
	BGTRU	25$			; if no, branch
	BRW	60$			; else, exit
25$:	MOVL	R8,R5			; save start point of possible match
	CMPW	(R8)+,(R8)+		; compare consecutive words
	BNEQU	20$			; if no match, try next ones
	CMPB	-1(R8),-2(R8)		; compare characters in the word
	BNEQU	20$			; if no match, try next ones
	CMPL	R7,R8			; if we have positioned past end
	BLEQU	60$			; then we don't have enough to compress
	MOVL	#3,R9			; a match of 4 found
	CMPL	R4,R5			; should we go back?
	BEQLU	40$			; no, do not

;
; Move backwards to search for any characters that might have been missed
;
30$:	CMPB	(R5),-1(R5)		; compare bytes
	BNEQU	40$			; no match
	DECL	R5			; set new match point
	AOBLSS	#6,R9,30$		; indicate another match found, and if
					;  more left, try next

;
; Look for the first character that does not match
;

40$:	SUBL3	R8,R7,R2		; find characters left in record
	SKPC	-1(R8),R2,(R8)		; find first char that does not match
	SUBL2	R0,R2			; find how many matched
	MOVL	R1,R8			; set new starting addresses
	ACBW	#3,R2,R9,20$		; increment number matched, and if less
					;  than 5, no good

;
; Make sure count is not bigger than 255 bytes
;

	CMPL	R9,#255
	BLEQ	50$			; ok, if less
	SUBL2	#255,R9			; find how many extra
	SUBL2	R9,R8			; back out that many
	MOVL	#255,R9			; force 255 bytes

;
; A sequence long enough has been found
;

50$:	SUBL3	R4,R5,R1		; find length of non-compressed
	INCL	R1			;  section
	MOVW	R1,(R6)			; store next field count
	MOVC3	R1,(R4),(R3)		; move to destination buffer
	MOVB	R9,(R3)+		; store truncation count
	MOVL	R3,R6			; reset new next field addr
	ADDL2	#2,R3			; new next field area
	BRW	10$

;
; Move the last field if not compressed
;

60$:	CMPL	R4,R8			; was last field compressed?
	BEQLU	70$			; exit, if yes
	SUBL3	R4,R7,R1		; find length of section
	MOVW	R1,(R6)			; store next field count
	MOVC3	R1,(R4),(R3)		; move to destination buffer
	CLRB	(R3)			; truncation count is zero
	INCL	R3			; point to end of record
	BRB	80$
70$:	SUBL2	#2,R3			; point to end of record
80$:	POPR	#^M<R2,R4,R5,R8,R9>	; restore registers
	RSB				; return to caller


.SBTTL	CVT_TO_ASC	- Convert key to ASCII
;++
;
; Functional Description:
;
;	This routine converts a string from any datatype to an
;	equivalent string which collates like ASCII.
;
; Calling Sequence:
;
;	CONV$$CVT_TO_ASC();	(from Bliss)
;
; Input Parameters:
;
;	40(SP) - dest addr
;	36(SP) - source addr
;	32(SP) - length
;	28(SP) - datatype
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;
;	Destination contains an ASCII equivalent string
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	none
;
; Working Registers:
;	?
;
;---

CONV$$CVT_TO_ASC::

	PUSHR	#^M<R1,R2,R3,R4,R5,R6>

;   if low bit of datatype is set, then this is a signed datatype.
;	
	MOVL	36(SP),R1		; Source
	MOVL	40(SP),R3		; Destination
	CLRB	R0			; assume unsigned
	BLBC	28(SP),10$		; branch if we were right
	MOVB	#80,R0			; set up mask to flip sign bit

;   Now actually convert it depending on datatype
;
10$:	CASEB	28(SP),#0,#5
15$:	.WORD	20$-15$			; String
	.WORD	30$-15$			; 2 byte integer
	.WORD	40$-15$			; 2 byte binary
	.WORD	50$-15$			; 4 byte integer
	.WORD	60$-15$			; 4 byte binary
	.WORD	70$-15$			; Packed decimal

;   String datatype
;
20$:	MOVC3	32(SP),(R1),(R3)	; just move the string
	BRB	900$			; exit

;   Two byte binary or integer
;
30$:
40$:	XORB3	R0,1(R1),(R3)+		; Set up the sign byte right
	MOVB	(R1),(R3)		; move the other byte
	BRB	900$			; exit

;   Four byte binary or integer
;
50$:
60$:	XORB3	R0,3(R1),(R3)+		; Fix up the sign byte
	MOVB	2(R1),(R3)+		; Move the other bytes 
	MOVB	1(R1),(R3)+		;  in reverse order
	MOVB	(R1),(R3)		;
	BRB	900$			; exit

;   Packed decimal 
;
70$:	ASHP	#-1,32(SP),(R1),#0,-	; Shift down 4 bits
		32(SP),(R3)		;  to make room for sign

	ASHL	#-1,32(SP),R4		; R4 <- disp to last byte
	ADDL3	R1,R4,R5		; R5 <- addr of last source byte
	ADDL3	R3,R4,R6		; R6 <- addr of last dest byte

	EXTV	#4,#4,(R5),R0		; Restore last digit
	INSV	R0,#0,#4,(R6)

	EXTZV	#0,#4,(R5),R0		; R0 <- Sign nibble
	BLBC	R0,100$			; All even's are plus
	CMPB	#^X0F,R0		; 'F' is also plus
	BEQLU	100$

; Negative number - we must flip each bit (except for sign nibble)
; in order to preserve ordering
;
	INCL	R4			; R4 <- number of bytes
	XORB	#^X0F,(R3)+		; Don't touch the sign nibble
	BRB	90$
80$:	XORB	#^XFF,(R3)+		; Switch every bit in string
90$:	SOBGTR	R4,80$			; Do this for every byte
	BRB	900$			; exit

; Positive number - just set the sign nibble to something 
;  higher that zero
;
100$:	INSV	#8,#4,#4,(R3)		; Positive - set high bit in sign nibble

900$:
	POPR	#^M<R1,R2,R3,R4,R5,R6>
	RSB

	.END
