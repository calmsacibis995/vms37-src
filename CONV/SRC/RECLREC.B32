%TITLE	'VAX-11 CONVERT/RECLAIM'
MODULE	RECL$REC	( IDENT='V03-004',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT/RECLAIM
!
! Environment:
!
!		VAX/VMS Operating system
!
! Abstract:
!
!		This module contains routines to handle index records.
!
! Contents:
!		BUCKET_EMPTY
!		GET_DOWN_POINTER
!		COMPARE_POINTER
!		SWING_POINTER
!		REMOVE_INDEX_RECORD
!		RECOMPRESS_RECORD
!
!--

!
! Author:	Peter Lieberwirth	Creation Date:	 2-Sep-1981
!
! Modified by:
!
!	V03-004	KBT0049		Keith Thompson		21-Apr-1982
!		Add routine to check for last index record in bucket
!
!	V03-003	KBT0046		Keith Thompson		12-Apr-1982
!		Fix compression bug and increase the key buffers to 257 bytes
!
!	V03-002	KBT0042		Keith Thompson		3-Apr-1982
!		Add routines to compare and swing index pointers
!
!	V03-001	KBT0026		Keith Thompson		29-Mar-1982
!		Do not reclaim data buckets with zero id
!


LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:RECLDEF';

EXTERNAL ROUTINE
	CONV$$RMS_READ_ERROR	: NOVALUE;

FORWARD ROUTINE
	RECOMPRESS_RECORD	: JSB_REG_8 NOVALUE;

EXTERNAL
	RECL$GL_BUCKET_COUNT,
	RECL$GL_SEARCH_BUFFER,
	RECL$AB_IN_RAB		: $RAB_DECL;

OWN
	INDEX,
	VBN_OFFSET,
	VBN_FREE_SPACE,
	KEY_BUFFER_1	:	BLOCK [ 257, BYTE ],
	KEY_BUFFER_2	:	BLOCK [ 257, BYTE ];


%SBTTL	'BUCKET_EMPTY'
GLOBAL ROUTINE RECL$$BUCKET_EMPTY : JSB_REG_9 =
!++
!
! Functional Description:
!
!	This routine determines if a bucket is empty.  It handles both
!	index level and data level buckets.
!
! Calling Sequence:
!
!	RECL$$BUCKET_EMPTY();
!
! Input Parameters:
!
!	None.
!
! Implicit Inputs:
!
!	BUCKET		 - address of buffer containing bucket
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!
!	RECL$GL_BUCKET_COUNT is incremented.
!
! Routine Value:
!
!	TRUE if bucket is empty
!	FALSE if bucket is not empty or can't be reclaimed
!
! Routines Called:
!
!	None.
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_9;

    LITERAL
	RECL$_DATA_LEVEL	= 0,
	RECL$_BUCKET_EMPTY	= 1,
	RECL$_BUCKET_NOT_EMPTY	= 0;

    ! First, never reclaim the last bucket in a level, due to the complexity of
    ! updating high key values in all the levels above.  This is not a serious
    ! restriction since most reclamation will be of aging buckets early in
    ! collating sequence.  (At least for primary key!)
    !
    IF .BUCKET[ BKT$V_LASTBKT ]
    THEN
	RETURN RECL$_BUCKET_NOT_EMPTY;

    ! Determine if bucket is data level or index level
    !
    IF .BUCKET [ BKT$B_LEVEL ] EQLU RECL$_DATA_LEVEL
    THEN
	BEGIN

	! Its a data level bucket.
	!
	LOCAL
	    POINTER,
	    RECORD_CTRL	: REF BLOCK [ ,BYTE ];

	! Count the bucket
	!
	RECL$GL_BUCKET_COUNT = .RECL$GL_BUCKET_COUNT + 1;

	! If this bucket has an id of zero then don't bother reclaiming it
	!
	IF .BUCKET [ BKT$W_NXTRECID ] EQLU 0
	THEN
	    RETURN RECL$_BUCKET_NOT_EMPTY;

	! Point to the first record in the bucket
	!
	POINTER = BKT$K_OVERHDSZ;

	! Loop untill we have looked at all of the buckets
	!
	WHILE .POINTER LSSU .BUCKET [ BKT$W_FREESPACE ]
	DO
	    BEGIN

	    ! Point to the control bytes of the record
	    !
	    RECORD_CTRL = .BUCKET + .POINTER;

	    ! If this record is deleted then find the next one
	    ! else return with a failure
	    !
	    IF .RECORD_CTRL [ IRC$V_DELETED ]
	    THEN

		! If this record has no RRV pointer then set the size to the
		! smallest record there is else find out how long the record is
		!
		IF .RECORD_CTRL [ IRC$V_NOPTRSZ ]
		THEN

		    ! The least case size of a record is 3 bytes (CTRL and ID)
		    !
		    POINTER = .POINTER + 3

		ELSE
		    BEGIN

		    ! The size of the record with an RRV is CTRL and ID and
		    ! Pointer Size (ID and VBN)
		    !
		    POINTER = .POINTER + 3 + .RECORD_CTRL [ IRC$V_PTRSZ ] + 4;

		    ! If the record really is a full record get the size of it
		    !
		    IF NOT .RECORD_CTRL [ IRC$V_RRV ]
		    THEN
			BEGIN

			! Point to the size field of the record
			!
			RECORD_CTRL = .POINTER + .BUCKET;

			! Add the size of the record and the size field
			!
			POINTER = .POINTER + .RECORD_CTRL [ 0,0,16,0 ] + 2

			END

		    END

	    ELSE
		RETURN RECL$_BUCKET_NOT_EMPTY

	    END;

	! If we dropped out of the loop to here the bucket is empty
	!
	RETURN RECL$_BUCKET_EMPTY
	
	END

    ELSE
	BEGIN

	! it's an index level bucket, see if it's empty
	!
	IF .BUCKET[ BKT$W_KEYFRESPC ] EQLU BKT$C_OVERHDSZ
	THEN
	    RETURN RECL$_BUCKET_EMPTY
	ELSE
	    RETURN RECL$_BUCKET_NOT_EMPTY;

	END;

    END;

%SBTTL	'GET_DOWN_POINTER'
GLOBAL ROUTINE RECL$$GET_DOWN_POINTER ( VBN ) : JSB_REG_8 =
!++
!
! Functional Description:
!
!	This routine searches the current buffer for the specified
!	down pointer.
!
! Calling Sequence:
!
!	GET_DOWN_POINTER( VBN );
!
! Input Parameters:
!
!	VBN	- VBN of bucket on level below being deleted
!
! Implicit Inputs:
!
!	BUCKET		 - address of buffer containing bucket
!	KEY_DESC
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!
!   If success:
!
!	INDEX		- number of the index record to remove (0=first)
!	KEY_POINTER	- points to key part to delete
!	KEY_BUFFER_1	- contains the expanded key bucket previous
!			  to one being deleted
!	KEY_BUFFER_2	- contains the expanded key of one being deleted
!
!   If failure the contents of the above registers are undefined.
!
! Routine Value:
!
!	TRUE if down pointer found, else FALSE
!
! Routines Called:
!
!	None.
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_8;

    LOCAL
	VBN_OFFSET,
	VBN_FREE_SPACE;

    ! Initialize the index which counts which record in is the down pointer.
    !
    INDEX = 0;

    ! Initialize offset in bucket to word containing VBN free space pointer
    ! so we can get the actual offset to the VBN free space.
    !
    VBN_OFFSET = .RTX [ RTX$W_BUCKET_SIZE ] - 2 - 2;

    ! Get actual offset of VBN free space.
    !
    VBN_FREE_SPACE = .BUCKET [ .VBN_OFFSET, 0, 16, 0 ];

    ! Now point to first VBN down pointer.
    !
    VBN_OFFSET = .VBN_OFFSET - ( .BUCKET [ BKT$V_PTR_SZ ] + 2);

    ! Scan the VBNs to see if the down pointer is in this bucket.
    !
    UNTIL .VBN_OFFSET LEQA .VBN_FREE_SPACE
    DO

	! Compare the VBN value pointed to by VBN_OFFSET.
	!
        IF .BUCKET [ .VBN_OFFSET,0,((.BUCKET[ BKT$V_PTR_SZ ] + 2) * 8), 0 ] EQLU
									.VBN
        THEN

	    ! We found the down pointer, so point KEY_POINTER to the key part
	    ! of the index record.
	    !
	    IF .KEY_DESC[ KEY$V_IDX_COMPR ]
	    THEN
		BEGIN

		! The key is compressed, so each key part is variable length.
		! INDEX is currently an index to the right record, so
		! skip over that many records.
		!
		KEY_POINTER = .BUCKET + BKT$K_OVERHDSZ;

		INCR I FROM 0 TO .INDEX - 1
		DO
		    BEGIN

		    ! Move the key into the buffer while expanding
		    ! the rear end truncation
		    !
		    !		key_pointer
		    !		    |
		    !		    -----------
		    ! 		    |l|c|     |
		    !		    -----------
		    !		         \     \ fill \
		    !		    --------------------
		    ! key_buffer_1  |l|c|  :     :     |
		    !		    --------------------
		    !			 ^
		    !			 |
		    !		      filled in when c=0 ( always the first key
		    !					in the bucket )
		    !
		    ! CH$COPY( src_len, src, fill, dst_len, dst )
		    !
		    CH$COPY( .KEY_POINTER [ KEYR$B_LENGTH ],
			     .KEY_POINTER + 2,
			     .( .KEY_POINTER + 1 +
					.KEY_POINTER [ KEYR$B_LENGTH ] ),
			     .KEY_DESC [ KEY$B_KEYSZ ] -
					.KEY_POINTER [ KEYR$B_FRONT_COUNT ],
			     KEY_BUFFER_1 + 2 +
					.KEY_POINTER [ KEYR$B_FRONT_COUNT ] );

		    ! Skip to the next key.
		    !
		    KEY_POINTER = .KEY_POINTER + 2 +
				  .KEY_POINTER [ KEYR$B_LENGTH ]

		    END;

		! Fill in key_buffer_2 with the expanded CURRENT key
		! first by stuffing the front compresed characters from
		! the previous key in key_buffer_1 then copy the rest
		! from the bucket extending it if rear truncation is present
		!
		!	  key_pointer
		!		|
		!		-----------
		! 		|l|c|     |
		!		-----------
		!		     \     \
		!		--------    |
		! key_buffer_1	|l|c|  :    |
		!		--------    |
		!		|      |    | fill \
		!		--------------------
		! key_buffer_2	|l|c|  :     :     |
		!		--------------------
		!		     ^
		!		     |
		!		  filled in when from key_buffer_1
		!		  or from .key_pointer when c=0
		!
		!
		! Fill in the front if there were front compression
		!
		CH$MOVE( .KEY_POINTER [ KEYR$B_FRONT_COUNT ],
			 KEY_BUFFER_1 + 2,
			 KEY_BUFFER_2 + 2);

		! Copy the rest of the key and expand the rear if neccessary
		!
		CH$COPY( .KEY_POINTER [ KEYR$B_LENGTH ],
			 .KEY_POINTER + 2,
			 .( .KEY_POINTER + 1 + .KEY_POINTER [ KEYR$B_LENGTH ] ),
			 .KEY_DESC [ KEY$B_KEYSZ ] -
					.KEY_POINTER [ KEYR$B_FRONT_COUNT ],
			 KEY_BUFFER_2 + 2 +
					.KEY_POINTER [ KEYR$B_FRONT_COUNT ] );

		RETURN RECL$_SUCCESS
		
		END

	    ELSE

		BEGIN

		! The key is not compressed, so the key part is fixed length
		! and easy to find.
		!
		KEY_POINTER = ( .INDEX * .KEY_DESC[ KEY$B_KEYSZ ] )
				+ .BUCKET + BKT$K_OVERHDSZ;

		RETURN RECL$_SUCCESS

		END

	ELSE
	    BEGIN

	    ! This was not the down pointer, so get the next down pointer
	    !
	    VBN_OFFSET = .VBN_OFFSET - ( .BUCKET[ BKT$V_PTR_SZ ] + 2 );
	    INDEX = .INDEX + 1;

	    END;

    ! If we fell through the UNTIL - DO loop it means we didn't find a down
    ! pointer.
    !
    RETURN RECL$_FAILURE

    END;

%SBTTL	'CHECK_LAST'
GLOBAL ROUTINE RECL$$CHECK_LAST : JSB_REG_8 =
!++
!
! Functional Description:
!
!	This routine checks to see if the current index record
!	indexed by INDEX is the last record in the bucket and if it
!	is the only record
!
! Calling Sequence:
!
!	CHECK_LAST();
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	BUCKET		- address of buffer containing bucket
!	INDEX		- current index record (set by get_down_pointer
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	RECL$_SUCCESS	- index record IS the last in bucket and there more
!			  then one record in the bucket
!	RECL$_FAILURE	- index record IS NOT the last in bucket or is the
!			  only one in the bucket
!
! Routines Called:
!
!	None.
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_8;

    LOCAL
	VBN_OFFSET,
	LAST_VBN_OFFSET;

    ! We can always reclaim the first record (even if its the last because the
    ! whole bucket will then be recalimed)
    !
    IF .INDEX EQL 0
    THEN
	RETURN RECL$_FAILURE;

    ! Initialize offset in bucket to word containing VBN free space pointer
    ! so we can get the actual offset to the VBN free space.
    !
    VBN_OFFSET = .RTX [ RTX$W_BUCKET_SIZE ] - 2 - 2;

    ! Get actual offset of the last VBN (free_space pointer + 1)
    !
    LAST_VBN_OFFSET = .BUCKET [ .VBN_OFFSET, 0, 16, 0 ] + 1;

    ! Now point to the current VBN down pointer found by get_down_pointer
    !
    VBN_OFFSET = .VBN_OFFSET - 
		( ( .BUCKET [ BKT$V_PTR_SZ ] + 2 ) * ( .INDEX + 1 ) );

    ! If they are equal then this is the last record in the bucket
    !
    IF .VBN_OFFSET EQLU .LAST_VBN_OFFSET
    THEN
	RETURN RECL$_SUCCESS
    ELSE
	RETURN RECL$_FAILURE

    END;

%SBTTL	'COMPARE_POINTER'
GLOBAL ROUTINE RECL$$COMPARE_POINTER ( VBN ) : JSB_REG_8 =
!++
!
! Functional Description:
!
!	This routine compares the next index record pointer in the current
!	buffer for the specified down pointer if necessary is reads in the next
!	bucket in the index chain to get the next index record.
!
! Calling Sequence:
!
!	COMPARE_POINTER( VBN );
!
! Input Parameters:
!
!	VBN	- VBN to compare
!
! Implicit Inputs:
!
!	BUCKET		- address of buffer containing bucket
!	INDEX		- current index record (set by get_down_pointer
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	RECL$_SUCCESS	- next index record DOES point to the vbn
!	RECL$_FAILURE	- next index record DOES NOT point to the vbn
!
! Routines Called:
!
!	None.
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_8;

    LOCAL
	VBN_OFFSET,
	LAST_VBN_OFFSET,
	SEARCH_BUCKET	: REF BLOCK [ ,BYTE ];


    ! Initialize offset in bucket to word containing VBN free space pointer
    ! so we can get the actual offset to the VBN free space.
    !
    VBN_OFFSET = .RTX [ RTX$W_BUCKET_SIZE ] - 2 - 2;

    ! Get actual offset of the last VBN (free_space pointer + 1)
    !
    LAST_VBN_OFFSET = .BUCKET [ .VBN_OFFSET, 0, 16, 0 ] + 1;

    ! Now point to the current VBN down pointer found by get_down_pointer
    !
    VBN_OFFSET = .VBN_OFFSET - 
		( ( .BUCKET [ BKT$V_PTR_SZ ] + 2 ) * ( .INDEX + 1 ) );

    ! If this is not the end of the pointers then check the next vbn here
    ! else read in the next index bucket and search there 
    !
    IF .VBN_OFFSET NEQU .LAST_VBN_OFFSET
    THEN
	BEGIN

	! Search in the current bucket
	!
	SEARCH_BUCKET = .BUCKET;

	! Point to the next vbn
	!
	VBN_OFFSET = .VBN_OFFSET - ( .BUCKET [ BKT$V_PTR_SZ ] + 2 )

	END
    ELSE

	! Get the next bucket (if this is the last in the chain return failure)
	!
	IF .BUCKET [ BKT$V_LASTBKT ]
	THEN
	    RETURN RECL$_FAILURE
	ELSE
	    BEGIN

	    ! Search in the search buffer
	    !
	    SEARCH_BUCKET = .RECL$GL_SEARCH_BUFFER;

	    ! Read in the next index bucket
	    !
	    RECL$AB_IN_RAB [ RAB$L_UBF ] = .SEARCH_BUCKET;
	    RECL$AB_IN_RAB [ RAB$W_USZ ] = .RTX [ RTX$W_BUCKET_SIZE ];
	    RECL$AB_IN_RAB [ RAB$L_BKT ] = .BUCKET [ BKT$L_NXTBKT ];

	    $READ( RAB=RECL$AB_IN_RAB,ERR=CONV$$RMS_READ_ERROR );

	    ! Point to the first vbn there
	    !
	    VBN_OFFSET = .RTX [ RTX$W_BUCKET_SIZE ] - 2 - 2 -
					( .SEARCH_BUCKET [ BKT$V_PTR_SZ ] + 2 )

	    END;

    ! Compare the vbns
    !
    IF .VBN EQLU
       .SEARCH_BUCKET [ .VBN_OFFSET,0,((.SEARCH_BUCKET[ BKT$V_PTR_SZ ]+2)*8),0 ]
    THEN
	RETURN RECL$_SUCCESS
    ELSE
	RETURN RECL$_FAILURE

    END;

%SBTTL	'SWING_POINTER'
GLOBAL ROUTINE RECL$$SWING_POINTER ( VBN ) : NOVALUE JSB_REG_8 =
!++
!
! Functional Description:
!
!	This routine will stuff the VBN into the curretn index record
!
! Calling Sequence:
!
!	SWING_POINTER( VBN );
!
! Input Parameters:
!
!	VBN	- VBN to stuff
!
! Implicit Inputs:
!
!	BUCKET		- address of buffer containing bucket
!	INDEX		- index record to stuff
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	None.
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_8;

    LOCAL
	VBN_OFFSET;

    ! Point to current VBN down pointer
    ! Which is: Bucket size - 2 bytes for check and spare - 2 bytes for
    !		vbn freespace pointer - index into the array
    !
    VBN_OFFSET = .RTX [ RTX$W_BUCKET_SIZE ] - 2 - 2 -
			( .BUCKET [ BKT$V_PTR_SZ ] + 2 ) * ( .INDEX + 1 );

    ! Stuff the vbn
    !
    BUCKET [ .VBN_OFFSET,0,( ( .BUCKET [ BKT$V_PTR_SZ ] + 2 ) * 8 ),0 ] = .VBN;

    RETURN

    END;

%SBTTL	'REMOVE_INDEX_RECORD'
GLOBAL ROUTINE RECL$$REMOVE_INDEX_RECORD : JSB_REG_8 NOVALUE =
!++
!
! Functional Description:
!
!	This routine actually squishes out the index record from the index
!	bucket.
!
! Calling Sequence:
!
!	REMOVE_INDEX_RECORD();
!
! Input Parameters:
!
!	None.
!
! Implicit Inputs:
!
!	INDEX		- number of the index record to remove
!	KEY_POINTER	- points to key part of index record to remove
!	KEY_BUFFER_1	- contains fully expanded previous key
!	KEY_BUFFER_2	- contains fully expanded current key
!	BUCKET		- points to buffer containing bucket
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!
!	Index bucket has more freespace, since a record was squished out.
!
! Routine Value:
!
!	None.
!
! Routines Called:
!
!	RECOMPRESS_RECORD
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_8;

    !++
    !
    ! Squish out the VBN part of the index record
    !
    !--

    BEGIN

    LOCAL
	OFFSET,		! Offset to the vbn_freespace pointer
	VBN_SIZE,	! Size of vbn in bytes
	BITS,		! Size of vbn in bits
	FREESPACE,	! Pointer offset to the top of the vbns
	VBN,		! Pointer offset to the vbn to remove
	SOURCE,		! Pointer offset to the Source
	DEST;		! Pointer offset to the Destination

    ! Find the offset to the vbn freespace pointer
    !
    OFFSET = .RTX [ RTX$W_BUCKET_SIZE ] - 4;

    ! Get the size of the vbns in bytes
    !
    VBN_SIZE = .BUCKET [ BKT$V_PTR_SZ ] + 2;

    ! Now get it in bits
    !
    BITS = .VBN_SIZE * 8;

    ! Find the top the vbns
    !
    FREESPACE = .BUCKET [ .OFFSET,0,16,0 ];

    ! Find the vbn we want to remove
    !
    VBN = .OFFSET - ( .VBN_SIZE * ( .INDEX + 1 ) );

    ! Set up the destindtion
    !
    DEST = .VBN;

    ! And the source
    !
    SOURCE = .DEST - .VBN_SIZE;

    ! Do each vbn
    !
    WHILE .SOURCE GEQU .FREESPACE
    DO
	BEGIN

	! Copy the vbn to the new location
	!
	BUCKET [ .DEST,0,.BITS,0 ] = .BUCKET [ .SOURCE,0,.BITS,0 ];

	! Update the pointers
	!
	DEST = .DEST - .VBN_SIZE;
	SOURCE = .SOURCE - .VBN_SIZE

	END;

    ! Update the freespace pointer in the bucket
    !
    BUCKET [ .OFFSET,0,16,0 ] = .FREESPACE + .VBN_SIZE;

    ! If freespace pointer points to the bottom of the bucket it is
    ! empty so don't bother to fool with the data part (but do set
    ! the keyfreespace pointer)
    !
    IF .BUCKET [ .OFFSET,0,16,0 ] EQLU .OFFSET
    THEN
	BEGIN
	BUCKET[ BKT$W_KEYFRESPC ] = BKT$C_OVERHDSZ;
	RETURN
	END

    END;

    !++
    !
    ! Squeeze out the KEY part of the index record
    !
    !--

    BEGIN
    
    LOCAL
	DELETE_SIZE;

    ! Calculate from address and size for squish differently if index is
    ! compressed or not.  Also do KEYFRESPC depending on index compression.
    !
    IF .KEY_DESC[ KEY$V_IDX_COMPR ]
    THEN
	BEGIN

	LOCAL
	    NEXT	: REF BLOCK [ ,BYTE ];	! Pointer to the next key
						! to replace the deleted one

	! The size of the deleted space is size of the old record MINUS
	! the DIFFERENCE between the size of next record before compression
	! and the size of it after compression.
	! First save the size of old record.
	!
	DELETE_SIZE = .KEY_POINTER [ KEYR$B_LENGTH ] + 2;

	! Next thing to do is recompress the next record after the current
	! one we start by coping it into key_buffer_2 (where the to-be-deleted
	! key is)
	!
	NEXT = .KEY_POINTER + .KEY_POINTER [ KEYR$B_LENGTH ] + 2;

	! If there IS a next key then copy it and compress it
	!
	IF .NEXT LSSU ( .BUCKET + .BUCKET [ BKT$W_KEYFRESPC ] )
	THEN
	    BEGIN

	    LOCAL OLD_SIZE;

	    ! Save the old size of the next record
	    !
	    OLD_SIZE = .NEXT [ KEYR$B_LENGTH ];

	    ! Copy the next key while expanding the rear
	    !
	    CH$COPY( .NEXT [ KEYR$B_LENGTH ],
		     .NEXT + 2,
		     .( .NEXT + 1 + .NEXT [ KEYR$B_LENGTH ] ),
		     .KEY_DESC [ KEY$B_KEYSZ ] - .NEXT [ KEYR$B_FRONT_COUNT ],
		     KEY_BUFFER_2 + 2 + .NEXT [ KEYR$B_FRONT_COUNT ] );

	    ! Recompress the new key in key_buffer_2
	    !
	    RECOMPRESS_RECORD();

	    ! Key_buffer_2 now contains a compressed key (w/control info)
	    ! so move it into the bucket
	    !
	    CH$MOVE( .KEY_BUFFER_2 [ KEYR$B_LENGTH ] + 2,
		     KEY_BUFFER_2,
		     .KEY_POINTER );

	    ! Now we can figure the ammount of space deleted
	    !
	    DELETE_SIZE = .DELETE_SIZE -
			    ( .KEY_POINTER [ KEYR$B_LENGTH ] - .OLD_SIZE );

	    ! We must now move the rest of the keys in the bucket
	    !
	    CH$MOVE( ( .BUCKET + .BUCKET [ BKT$W_KEYFRESPC ] ) -
					( .NEXT + .NEXT [ KEYR$B_LENGTH ] + 2 ),
		     .NEXT + .NEXT [ KEYR$B_LENGTH ] + 2,
		     .KEY_POINTER + .KEY_POINTER [ KEYR$B_LENGTH ] + 2 )

	    END;
	END

    ELSE
	BEGIN

	! Set the delete size
	!
	DELETE_SIZE = .KEY_DESC [ KEY$B_KEYSZ ];

	! Move the rest of the keys
	!
	CH$MOVE( ( .BUCKET + .BUCKET [ BKT$W_KEYFRESPC ] ) -
				( .KEY_POINTER + .KEY_DESC [ KEY$B_KEYSZ ] ),
		 .KEY_POINTER + .KEY_DESC [ KEY$B_KEYSZ ],
		 .KEY_POINTER )

	END;

    ! Update KEYFRESPC since we squished out a key
    !
    BUCKET [ BKT$W_KEYFRESPC ] = .BUCKET [ BKT$W_KEYFRESPC ] - .DELETE_SIZE

    END;

    RETURN

    END;


%SBTTL	'RECOMPRESS_RECORD'
ROUTINE RECOMPRESS_RECORD : JSB_REG_8 NOVALUE =
!++
!
! Functional Description:
!
!	This routine will recompress the index record in key_buffer_2
!
! Calling Sequence:
!
!	RECOMPRESS_RECORD()
!
! Input Parameters:
!
!	None.
!
! Implicit Inputs:
!
!	KEY_BUFFER_1	- contains expanded key to base re-compression upon
!	KEY_BUFFER_2	- contains expanded key to re-compress
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!
!	None.
!
! Routines Called:
!
!	None.
!
! Side Effects:
!
!	Index record in key_buffer_2 is compressed.
!
!--

    BEGIN

    DEFINE_REGISTERS_8;

    BIND
	KEY_1 = KEY_BUFFER_1 + 2 : VECTOR [ ,BYTE ],	! Key part of the record
	KEY_2 = KEY_BUFFER_2 + 2 : VECTOR [ ,BYTE ];

    LOCAL
	LENGTH;

    ! Assume no compression
    !
    KEY_BUFFER_2 [ KEYR$B_FRONT_COUNT ] = 0;

    LENGTH = .KEY_DESC [ KEY$B_KEYSZ ];

    ! If this is NOT the first key in the bucket do front compression
    !
    IF .INDEX NEQU 0
    THEN

	! Find the first position where the two keys differ
	!
	INCR I FROM 0 TO ( .LENGTH - 1 ) BY 1
	DO

	    ! If the characters are not equal we found the end
	    !
	    IF ( .KEY_1 [ .I ] NEQU .KEY_2 [ .I ] )
	    THEN
		BEGIN

		! I is now the number of compressed characters
		!
		KEY_BUFFER_2 [ KEYR$B_FRONT_COUNT ] = .I;

		! Shorten the length
		!
		LENGTH = .LENGTH - .I;

		! If there was some compression move the key a little
		!
		IF .I NEQU 0
		THEN
		    CH$MOVE( .LENGTH, KEY_2 + .I ,KEY_2 );

		EXITLOOP

		END;

    ! Do rear end truncation
    !
    WHILE .LENGTH GTRU 1
    DO

	! If the trailing characters are the same cut it short
	!
	IF .KEY_2 [ .LENGTH - 1 ] EQLU .KEY_2 [ .LENGTH - 2 ]
	THEN
	    LENGTH = .LENGTH - 1
	ELSE
	    EXITLOOP;

    ! Set the length field
    !
    KEY_BUFFER_2 [ KEYR$B_LENGTH ] = .LENGTH;
    
    RETURN

    END;

END ELUDOM
