%TITLE	'VAX-11 CONVERT'
MODULE	CONV$SORT	( IDENT='V03-003',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	CONVERT routines wich sort the input file on the output
!		files primary key and to sort the output file by it's
!		secondary key
!
! Contents:
!		SORT_PRIMARY
!		SORT_SECONDARY
!		SET_UP_SORT
!		SORT_ERROR
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	August-1980
!
!
! Modified by:
!
!	V03-003	KBT0045		Keith Thompson		9-Apr-1982
!		Correct the way packed decimal sizes are given to sort
!		Also fix when we do stable sorts ie. only with dups
!
!	V03-002	KBT0027		Keith Thompson		30-Mar-1982
!		Chain the sort error messages
!
!	V03-001	KBT0014		Keith Thompson		17-Mar-1982
!		Pass sort a lrl so it will not choke on sys$input
!
!****


PSECT
	OWN	= _CONV$OWN	(PIC),
	GLOBAL	= _CONV$GLOBAL	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';

FORWARD ROUTINE
	CONV$$SORT_PRIMARY	: JSB_REG11,
	CONV$$SORT_SECONDARY	: JSB_REG11,
	SET_UP_SORT		: JSB_REG11,
	SORT_ERROR		: NOVALUE;

DEFINE_ERROR_CODES;

EXTERNAL ROUTINE
	CONV$$OPEN_IN,
	CONV$$GET_VM		: JSB_LINK,
	LIB$PUT_OUTPUT		: ADDRESSING_MODE(GENERAL),
	SOR$INIT_SORT		: ADDRESSING_MODE(GENERAL),
	SOR$PASS_FILES		: ADDRESSING_MODE(GENERAL),
	SOR$SORT_MERGE		: ADDRESSING_MODE(GENERAL),
	SOR$END_SORT		: ADDRESSING_MODE(GENERAL),
	CONV$$SET_KEY_BLOCK	: JSB_LINK_ARG1,
	CONV$$SEARCH_FILE;

EXTERNAL
	CONV$GL_SORT		: LONG,
	CONV$GL_WORK_F		: LONG,

	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],
	
	CONV$AR_OUT_FILE_NAM	: REF DESC_BLK,		! Output File
	CONV$GB_CURRENT_FILE	: BYTE,
	CONV$GL_FILE_COUNT,

	CONV$GL_REC_BUF_PTR,
	CONV$GW_MAX_REC_SIZ	: WORD,

	CONV$GB_KEY_REF		: BYTE,

	CONV$AB_IN_NAM		: $NAM_DECL,
	CONV$AB_IN_FAB		: $FAB_DECL,
	CONV$AB_IN_RAB		: $RAB_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL;

MACRO
	SORTCHK	( SERVICE ) =
		BEGIN
		LOCAL STATUS;
		IF ( NOT ( STATUS = SERVICE ) )
		THEN
		    SORT_ERROR ( .STATUS )
		END%;


!	SORT Temporary File Name Data
!
BIND
	SORT_TMP_STR	= UPLIT ('CONVWORK.TMP');	! SORT Temp. File Name

OWN

	SORT_TMP_NAM	: DESC_BLK			! SORT Temp. File Desc.
			INITIAL ( SORT_TMP_SIZ,SORT_TMP_STR ),

	! Name block
	!
	RFA_NAM		: $NAM_DECL;	! RFA Name Block

GLOBAL

	CONV$GL_RFA_BUFFER	: LONG,			! Pointer to RFA Buffer

	! Work Files
	!
	CONV$AB_RFA_FAB		: $FAB_DECL,		! RFA File FAB

	CONV$AB_RFA_RAB		: $RAB_DECL,		! RFA File RAB

	TEMP_DESC	: DESC_BLK,
	TOTAL_SIZ	: BYTE;


%SBTTL	'INIT_SORT'
ROUTINE	INIT_SORT : NOVALUE =
!++
!
! Functional Description:
!
!	Initializes the rfa rms blocks which are used for sorting
!
! Calling Sequence:
!
!	INIT_SORT()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	CONV$$GET_VM
!
! Routine Value:
!	none
!
! Side Effects:
!
!	Clears the CONV$V_SORTINIT flag
!
!--

    BEGIN

    LOCAL
	BYTES,
	VM_POINTER;

    ! If sort has already been initialized then exit
    !
    IF .CONV$AB_FLAGS [ CONV$V_SORTINIT ]
    THEN
	RETURN
    ELSE
	CONV$AB_FLAGS [ CONV$V_SORTINIT ] = _SET;

    ! Allocate name block buffers
    !
    BYTES = ESA_BUF_SIZ + RSA_BUF_SIZ + RFA_BUF_SIZ;

    CONV$GL_RFA_BUFFER = CONV$$GET_VM ( .BYTES );

    VM_POINTER = .CONV$GL_RFA_BUFFER + RFA_BUF_SIZ;

    ! Init the name block
    !
    $NAM_INIT ( NAM = RFA_NAM,
		ESA = .VM_POINTER,
		ESS = ESA_BUF_SIZ,
		RSA = .VM_POINTER + ESA_BUF_SIZ,
		RSS = RSA_BUF_SIZ );

    ! Init the FAB
    !
    $FAB_INIT ( FAB = CONV$AB_RFA_FAB,
		FAC = <BRO,GET>,
		FNA = SORT_TMP_STR,
		FNS = SORT_TMP_SIZ,
		FOP = <DLT,SQO>,
		NAM = RFA_NAM );

    ! Init the RAB
    !
    $RAB_INIT ( RAB = CONV$AB_RFA_RAB,
		FAB = CONV$AB_RFA_FAB,
		ROP = BIO,
		UBF = .CONV$GL_RFA_BUFFER,
		USZ = RFA_BUF_SIZ );

    RETURN

    END;

%SBTTL	'SORT_PRIMARY'
GLOBAL ROUTINE	CONV$$SORT_PRIMARY : JSB_REG11 =
!++
!
! Functional Description:
!
!	This routine will sort the input file, pointed to by in_fab, according
!	to the primary key of the output file.
!
! Calling Sequence:
!
!	CONV$$SORT_PRIMARY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	input and output rms blocks
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	INIT_SORT
!	CONV$$SET_KEY_BLOCK
!	SOR$PASS_FILES
!	SORT_ERROR
!	CONV$$SEARCH_FILE
!	SET_UP_SORT
!	SOR$SORT_MERGE
!	SOR$END_SORT
!
! Routine Value:
!
!	Success of random errors
!
! Side Effects:
!
!	Open the rfa file if CONV$V_RFA is set
!
!--

    BEGIN

    DEFINE_KEY_BLOCK;

    OWN
	FILETYPE	: BYTE INITIAL( FAB$C_SEQ ),
	RECORDFMT	: BYTE INITIAL( FAB$C_VAR );

    LOCAL
	IN_DEVICE	: BLOCK [ 1,LONG ],
	RFA		: LONG;

    ! Initialize the RMS blocks used in the sort
    !
    INIT_SORT();

    ! If the input file is open close it
    !
    IF .CONV$AB_FLAGS [ CONV$V_IN ]
    THEN
	BEGIN
	$DISCONNECT( RAB=CONV$AB_IN_RAB );
	$CLOSE( FAB=CONV$AB_IN_FAB );
	CONV$AB_FLAGS [ CONV$V_IN ] = _CLEAR
	END;

    ! Set the key block pointer and the key of ref.
    !
    CONV$$SET_KEY_BLOCK ( 0 );

    ! Pass the file names 1st input and output
    !
    ! To avoid some file name problems pass the resultant or expanded string
    ! of the input file as the first file name.
    !
    IF .CONV$AB_IN_NAM [ NAM$B_RSL ] NEQU 0
    THEN
	BEGIN
	TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_IN_NAM [ NAM$B_RSL ];
	TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_IN_NAM [ NAM$L_RSA ]
	END
    ELSE
	BEGIN
	TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_IN_NAM [ NAM$B_ESL ];
	TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_IN_NAM [ NAM$L_ESA ]
	END;

    ! If there are multiple input files we do a record sort so tell
    ! sort what kind of file to create
    !
    IF .CONV$GL_FILE_COUNT GTRU 1
    THEN
	SORTCHK( SOR$PASS_FILES( TEMP_DESC,SORT_TMP_NAM,FILETYPE,RECORDFMT ) )
    ELSE
	SORTCHK( SOR$PASS_FILES( TEMP_DESC,SORT_TMP_NAM ) );

    CONV$GB_CURRENT_FILE = 1;

    ! Pass the rest of the input names
    !
    UNTIL .CONV$GB_CURRENT_FILE GTR ( .CONV$GL_FILE_COUNT - 1 )
    DO
	BEGIN

	! Parse and search for the file (This uses the IN_FAB and IN_NAM
	! since they are not used again)
	!
	RET_ON_ERROR( CONV$$SEARCH_FILE() );

	! Pass the expanded string
	!
	TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_IN_NAM [ NAM$B_RSS ];
	TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_IN_NAM [ NAM$L_RSA ];

	SORTCHK( SOR$PASS_FILES( TEMP_DESC ) );

	CONV$GB_CURRENT_FILE = .CONV$GB_CURRENT_FILE + 1
	END;

    IN_DEVICE = .CONV$AB_IN_FAB [ FAB$L_DEV ];

    ! If the device char. are zero (process perminant files) or
    ! if the input file is not from disk or
    ! it is a record orented device (terminals) or
    ! it's a terminal (be reduntandt) or
    ! there is more than one input file
    ! then we do a normal record sort otherwise we do a RFA sort to save time
    !
    IF ( .IN_DEVICE EQLU 0 ) OR
	.IN_DEVICE [ DEV$V_SQD ] OR
	.IN_DEVICE [ DEV$V_REC ] OR
	.IN_DEVICE [ DEV$V_TRM ] OR
	( .CONV$GL_FILE_COUNT GTR 1 )
    THEN
	BEGIN
	ERRCHK( SET_UP_SORT( 1 ),CONV$_BADSORT );
	RFA = _CLEAR
	END
    ELSE
	BEGIN
	ERRCHK( SET_UP_SORT( 4 ),CONV$_BADSORT );
	RFA = _SET
	END;

    ! Do the sort
    !
    ERRCHK( SOR$SORT_MERGE(),CONV$_BADSORT );

    SOR$END_SORT();

    ! Reopen the correct input files
    !
    IF .RFA
    THEN
	BEGIN

	! OPEN the input file and the new RFA file
	!
	RET_ON_ERROR( CONV$$OPEN_IN() );

	! Connect the additional file containing the RFAs pointing th the real
	! file
	!
	$OPEN( FAB=CONV$AB_RFA_FAB );
	$CONNECT( RAB=CONV$AB_RFA_RAB );

	CONV$AB_FLAGS [ CONV$V_RFA ] = _SET;

	! Set access to the real input file to RFA
	!
	CONV$AB_IN_RAB [ RAB$B_RAC ] = RAB$C_RFA

	END
    ELSE

	! OPEN the sorted file as if it was the input file
	!
	BEGIN

	! The real input RAB points to the RFA FAB
	!
	CONV$AB_IN_RAB [ RAB$L_FAB ] = CONV$AB_RFA_FAB;

	! Open the RFA fab which is the new sorted input file NOTE: This is
	! not a file of RFAs an above
	!
	$OPEN( FAB=CONV$AB_RFA_FAB );
	$CONNECT( RAB=CONV$AB_IN_RAB );

	CONV$AB_FLAGS [ CONV$V_SOR ] = _SET

	END;

    ! Since it only makes sence to sort once
    !
    CONV$GL_SORT = _CLEAR;

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'SORT_SECONDARY'
GLOBAL ROUTINE	CONV$$SORT_SECONDARY : JSB_REG11 =
!++
!
! Functional Description:
!
!	This routine will sort the OUTPUT file according to a specified
!	key of the OUTPUT file.
!
! Calling Sequence:
!
!	CONV$$SORT_SECONDARY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	INIT_SORT
!	SOR$PASS_FILES
!	SET_UP_SORT
!	SOR$SORT_MERGE
!	SOR$END_SORT
!
! Routine Value:
!
!	Success or random errors
!
! Side Effects:
!
!	Closes and reopens the output file
!	Closes the rfa file if it was open then opens it
!
!--

    BEGIN

    DEFINE_KEY_BLOCK;

    ! If the RFA file was open close it. The file will be used as output of sort.
    !
    IF .CONV$AB_FLAGS [ CONV$V_RFA ]
    THEN
	BEGIN
	ERRCHK( $DISCONNECT( RAB=CONV$AB_RFA_RAB ),CONV$_BADLOGIC );
	ERRCHK( $CLOSE( FAB=CONV$AB_RFA_FAB ),CONV$_BADLOGIC );

	CONV$AB_FLAGS [ CONV$V_RFA ] = _CLEAR;

	! Also remove the entry in the directory
	!
	$ERASE( FAB=CONV$AB_RFA_FAB )

	END;

    ! Init sort if nec.
    !
    INIT_SORT();

    ! To conserve space ect. use the RFA fab and rab therefore reset
    ! the RFA rab so we can do record I/O on it.  Also let it's user
    ! buffer point to the old record buffer since that is free and
    ! big enought
    !
    CONV$AB_RFA_RAB [ RAB$L_UBF ] = .CONV$GL_REC_BUF_PTR;
    CONV$AB_RFA_RAB [ RAB$W_USZ ] = .CONV$GW_MAX_REC_SIZ;

    ! Clear the BIO flag
    !
    CONV$AB_RFA_RAB [ RAB$V_BIO ] = _CLEAR;

    ! Close the current output file so that SORT can get at it
    !
    $DISCONNECT( RAB=CONV$AB_OUT_RAB );
    ERRCHK( $CLOSE( FAB=CONV$AB_OUT_FAB ),CONV$_BADLOGIC );

    CONV$AB_FLAGS [ CONV$V_OUT ] = _CLEAR;

    ! Pass the file names
    !
    ! To avoid some file name problems pass the expanded string of the
    ! output file
    !
    TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_OUT_NAM [ NAM$B_RSS ];
    TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_OUT_NAM [ NAM$L_RSA ];

    ERRCHK( SOR$PASS_FILES( TEMP_DESC,SORT_TMP_NAM ),CONV$_BADSORT );

    ! Get ready to do a index (=3) sort of the file
    !
    ERRCHK( SET_UP_SORT( 3 ),CONV$_BADSORT );

    ! Start the sort and finish it
    !
    ERRCHK( SOR$SORT_MERGE(),CONV$_BADSORT );
    ERRCHK( SOR$END_SORT(),CONV$_BADSORT );

    ! ReOPEN the output file and the new RFA-INDEX file
    !
    $OPEN( FAB=CONV$AB_OUT_FAB );
    $CONNECT( RAB=CONV$AB_OUT_RAB );
    CONV$AB_FLAGS [ CONV$V_OUT ] = _SET;

    $OPEN( FAB=CONV$AB_RFA_FAB );
    $CONNECT( RAB=CONV$AB_RFA_RAB );
    CONV$AB_FLAGS [ CONV$V_RFA ] = _SET;

    RETURN SS$_NORMAL
    END;

%SBTTL	'SET_UP_SORT'
ROUTINE	SET_UP_SORT ( S_TYPE ) : JSB_REG11 =
!++
!
! Functional Description:
!
!	Initializes the control blocks for the sort utility
!
! Calling Sequence:
!
!	SET_UP_SORT( sort_type )
!
! Input Parameters:
!
!	sort_type	- The sort code for the type of sort wanted.  Valid
!			  codes are:
!					1 = Record sort (Primary key from non-
!					    disk device or multiple input files)
!					3 = Index sort (Secondary keys only)
!					4 = Rfa sort (Primary key form disk)
!
! Implicit Inputs:
!
!	KEY_BLOCK
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	SOR$INIT_SORT
!
! Routine Value:
!
!	Success of error from sor$init_sort
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_KEY_BLOCK;

! Until these are defined...
!
LITERAL SOR$V_STABLE = 0;
LITERAL SOR$_OPENOUT = %X'1C10A4';

    OWN
	KEY_TYPE	: WORD,
	LRL		: WORD,
	WORK_FILES	: BYTE,
	SORT_TYPE	: BYTE,
	SORT_OPTION	: BITVECTOR [ 32 ],
	SORT_BLOCK	: VECTOR [ 33,WORD ];

    BIND
	SEGMENTS	= SORT_BLOCK [ 0 ] : WORD,
	SORT_KEY	= SORT_BLOCK [ 1 ] : BLOCKVECTOR [ 8,4,WORD ];

    LOCAL
	STATUS;

    SORT_TYPE	= .S_TYPE;
    WORK_FILES	= .CONV$GL_WORK_F;
    LRL		= .CONV$GW_MAX_REC_SIZ;

    ! If the key allows dups do a stable sort
    !
    IF .KEY_BLOCK [ KEY$V_DUPKEYS ]
    THEN
	SORT_OPTION [ SOR$V_STABLE ] = _SET
    ELSE
	SORT_OPTION [ SOR$V_STABLE ] = _CLEAR;

    ! Get the number of segments and the total size of the key
    !
    SEGMENTS = .KEY_BLOCK [ KEY$B_SEGMENTS ];
    TOTAL_SIZ = .KEY_BLOCK [ KEY$B_KEYSZ ];


    ! Find the key type from the key descriptor and set key_type to the
    ! appropiate SORT-32 code
    !
    KEY_TYPE = ( SELECTONE .KEY_BLOCK [ KEY$B_DATATYPE ] OF
	SET
	[ KEY$C_STRING ]	: 1;
	[ KEY$C_SGNWORD ]	: 2;
	[ KEY$C_SGNLONG ]	: 2;
	[ KEY$C_UNSGNWORD ]	: 5;
	[ KEY$C_UNSGNLONG ]	: 5;
	[ KEY$C_PACKED ]	: 4;
	TES);

    ! Load the sort parameter block with the right stuff for each segment
    !
    INCR I FROM 0 TO ( .SEGMENTS - 1 ) BY 1
    DO
	BEGIN
	SORT_KEY [ .I,SORTKEY$W_TYPE ] = .KEY_TYPE;
	SORT_KEY [ .I,SORTKEY$W_ORDER ] = 0;

	! NOTE: The 28 is the offset to the first segment position descriptor
	!	in the key descriptor block the 44 is the offset to the segment
	!	size.  If the macros for these ever change, ie. KEY$W_POSITION and
	!	KEY$B_SIZE, the code offsets here must be changed!
	!
	SORT_KEY [ .I,SORTKEY$W_START ] = .KEY_BLOCK [ ( 28 + (.I*2) ),0,16,0 ] + 1;
	SORT_KEY [ .I,SORTKEY$W_LENGH ] = .KEY_BLOCK [ ( 44 + .I ),0,8,0 ];

	! If the key is packed decimal then sort wants the size in nibbles NOT
	! counting the sign
	!
	IF .KEY_BLOCK [ KEY$B_DATATYPE ] EQLU KEY$C_PACKED
	THEN
	    SORT_KEY [ .I,SORTKEY$W_LENGH ] =
			( .SORT_KEY [ .I,SORTKEY$W_LENGH ] * 2 ) - 1

	END;

    ! If there is an error check why
    !
    IF NOT ( STATUS = SOR$INIT_SORT( SORT_BLOCK,	! Key buffer address
				     LRL,		! Longest record length
				     0,			! Input file size
				     WORK_FILES,	! Number of work files
				     SORT_TYPE,		! Sort type
				     TOTAL_SIZ,		! Total key size
				     0,			! Comp. routine addr.
				     SORT_OPTION ) )	! Sort options
    THEN

	! If the error is OPENOUT then sort screwed up and failed to
	! open it's work files because of the file limit
	!
	IF .STATUS EQLU SOR$_OPENOUT
	THEN
	    STATUS = CONV$_FILLIM;

    RETURN .STATUS

    END;

%SBTTL	'SORT_ERROR'
ROUTINE	SORT_ERROR ( ERROR ) : NOVALUE =
!++
!
! Functional Description:
!
!	Clugey routine to make some sence out of errors from sort32
!
! Calling Sequence:
!
!	SORT_ERROR( error )
!
! Input Parameters:
!
!	error		- Sort32 error code
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

LITERAL SOR$_OPENIN = %X'1C109C';
LITERAL SOR$_OPENOUT = %X'1C10A4';

    OWN
	STRING_DESC	: DESC_BLK;

    ! If ther error occured trying to open an input file try opening
    ! it here os to get some more info on why it failed
    !
    IF .ERROR EQLU SOR$_OPENIN
    THEN

	! If this worked we dont know what happened if it didn't we
	! signial with the rms error
	!
	IF $OPEN( FAB=CONV$AB_IN_FAB )
	THEN
	    $CLOSE( FAB=CONV$AB_IN_FAB )
	ELSE
	    BEGIN

	    ! Get the file name for the openin error
	    !
	    STRING_DESC [ DSC$W_LENGTH ] = .CONV$AB_IN_NAM [ NAM$B_RSL ];
	    STRING_DESC [ DSC$A_POINTER ] = .CONV$AB_IN_NAM [ NAM$L_RSA ];

	    ! Signal a convert openin error and the rms reason
	    !
	    SIGNAL_STOP( CONV$_OPENIN,1,STRING_DESC,
			 .CONV$AB_IN_FAB [ FAB$L_STS ],
			 .CONV$AB_IN_FAB [ FAB$L_STV ] )
	    END;

    ! Signal a badsort error and give the sort32 error, though it
    ! won't be much good
    !
    SIGNAL_STOP( CONV$_BADSORT,.ERROR )

    END;

END	ELUDOM
