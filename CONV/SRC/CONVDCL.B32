%TITLE	'VAX-11 CONVERT'
MODULE	CONV$DCL	( IDENT='V03-002',
			MAIN=START
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	DCL Utility which calls the CONVERT sharable image
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	July-1980
!
!
! Modified by:
!
!	V03-002	KBT0036		Keith Thompson		31-Mar-1982
!		Change the ref. to fdl$ab_ctrl through fdl$al_block and
!		change the ref. to conv$ab_flags
!
!	V03-001	KBT0018		Keith Thompson		22-Mar-1982
!		Fix the display of CPU time (Use quadword mult.)
!
!****


LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:CONVDEF';
REQUIRE	'SHRLIB$:FDLPARDEF';

! Structure for array of dynamic character string descriptors
!
STRUCTURE
	DYN_STR_DESC_VECTOR [ I, O, P, S, E; N ] =
		[ N * DSC$K_D_BLN ]
		( ( DYN_STR_DESC_VECTOR + I * DSC$K_D_BLN ) + O )< P,S,E >;


! Fun with macros
!
MACRO

    !  Define a macro to initialize an element of a dyn_str_desc_vector.  
    ! This macro is passed the number of elements to initialize.  The macro
    ! makes no explicit assumption about the current descriptor format.
    !
    INIT_DSD_VECTOR ( I ) [] =	[ ( I ) - 1, DSC$B_DTYPE] = DSC$K_DTYPE_T,
				[ ( I ) - 1, DSC$B_CLASS] = DSC$K_CLASS_D
				%IF ( ( I ) - 1 GTR 0 )
				%THEN	, INIT_DSD_VECTOR ( ( I ) - 1 ) %FI %,

    ! Define shorthand for a single initialized dynamic string desc
    !
    DYN_STR_DESC = BLOCK [ DSC$K_D_BLN,BYTE ] 
			PRESET(	[ DSC$B_CLASS ] = DSC$K_CLASS_D,
				[ DSC$B_DTYPE ] = DSC$K_DTYPE_T ) %;

EXTERNAL ROUTINE
	CONV$PASS_FILES		: ADDRESSING_MODE( GENERAL ),
	CONV$PASS_OPTIONS	: ADDRESSING_MODE( GENERAL ),
	CONV$CONVERT		: ADDRESSING_MODE( GENERAL ),
	CLI$GET_VALUE		: ADDRESSING_MODE( GENERAL ),
	CLI$PRESENT		: ADDRESSING_MODE( GENERAL ),
	LIB$INIT_TIMER		: ADDRESSING_MODE( GENERAL ),
	LIB$STAT_TIMER		: ADDRESSING_MODE( GENERAL ),
	LIB$SUBX		: ADDRESSING_MODE( GENERAL ),
	LIB$PUT_OUTPUT		: ADDRESSING_MODE( GENERAL ),
	OTS$CVT_TI_L		: ADDRESSING_MODE( GENERAL ),
	OTS$CVT_TO_L		: ADDRESSING_MODE( GENERAL ),
	OTS$CVT_TZ_L		: ADDRESSING_MODE( GENERAL );

EXTERNAL LITERAL
	CONV$_FATALEXC,
	CONV$_ILL_KEY,
	CONV$_ILL_VALUE;

EXTERNAL
	FDL$AL_BLOCK	: VECTOR [ ,LONG ] ADDRESSING_MODE ( GENERAL ),
	CONV$AB_FLAGS	: ADDRESSING_MODE ( GENERAL );

FORWARD ROUTINE
	MULQ		: NOVALUE;

LITERAL
	MAX_INFILES	= 10,		! Max number of input files
	ASCII_D		= 68,		! 'D'
	ASCII_O		= 79,		! 'O'
	ASCII_X		= 88,		! 'X'
	ASCII_PERCENT	= 37;		! '%'

OWN
	IN_DESC		: DYN_STR_DESC_VECTOR [ MAX_INFILES ] ! Array of input filenames
				PRESET ( INIT_DSD_VECTOR( MAX_INFILES ) ),
	OUT_DESC	: DESC_BLK			! Output file descriptor
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D ),
	FDL_DESC	: DESC_BLK			! Fdl file descriptor
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D ),
	EXC_DESC	: DESC_BLK			! Exception file descriptor
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D ),

	! FAO Processing
	!
	FAO_BUFFER	: VECTOR [ 132,BYTE ],		! FAO Buffer
	FAO_DESC	: DESC_BLK			! FAO Descriptor Block
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D,
					[ DSC$W_LENGTH ] = 132,
					[ DSC$A_POINTER ] = FAO_BUFFER ),
	PUT_DESC	: DESC_BLK			! Put_output Desc. Block
				PRESET( [ DSC$B_CLASS ] = DSC$K_CLASS_D,
					[ DSC$W_LENGTH ] = 132,
					[ DSC$A_POINTER ] = FAO_BUFFER ),

	! Convert call argument Blocks
	!
	! Option Block NOTE: The last option is optional and will be
	!		     determined at a latter date
	!
	OPTION_BLOCK	: VECTOR [ 20,LONG ] INITIAL( 18,REP 19 OF (0)),

	! Statistics Block
	!
	STATS_BLOCK	: VECTOR [ 5,LONG ] INITIAL( 4,0,0,0,0 ),

	TEMP_DESC	: DESC_BLK	! Temporary work descriptor
			  PRESET( [DSC$B_CLASS ] = DSC$K_CLASS_D ),

	TIMER_BLK,

	ELP_TIME	: VECTOR [ 2,LONG ],
	CPU_TIME	: VECTOR [ 2,LONG ],

	ELP_TIM_BUF	: VECTOR [ 16,BYTE ],
	CPU_TIM_BUF	: VECTOR [ 16,BYTE ],

	ELP_DESC	: DESC_BLK	INITIAL ( 16,ELP_TIM_BUF ),
	CPU_DESC	: DESC_BLK	INITIAL	( 16,CPU_TIM_BUF ),

	ONE		: INITIAL(1),
	TWO		: INITIAL(2),
	THREE		: INITIAL(3),
	FOUR		: INITIAL(4),
	FIVE		: INITIAL(5),

	PROC_BLK	: VECTOR [ 5,LONG ];

    BIND
	BUFF_IO		= PROC_BLK [ 2 ] : LONG,
	DIRE_IO		= PROC_BLK [ 3 ] : LONG,
	PG_FALT		= PROC_BLK [ 4 ] : LONG,

	! Opuput stats descriptors
	!
	STATS_DESC_BLOCK = UPLIT(

	DESCRIPTOR( ' !/ CONVERT Statistics' ),
	DESCRIPTOR( 'Number of Files Processed:    !6UL' ),
	DESCRIPTOR( 'Total Records Processed:    !8UL!_Buffered I/O Count: !_!8UL' ),
	DESCRIPTOR( 'Total Exception Records:    !8UL!_Direct I/O Count: !_!8UL' ),
	DESCRIPTOR( 'Total Valid Records:        !8UL!_Page Faults: !_!_!8UL' ),
	DESCRIPTOR( 'Elapsed Time:       !AS!_CPU Time:       !AS' )

	) : VECTOR;


%SBTTL	'Main Routine'
ROUTINE	START	=
!++
!
! Functional Description:
!
!	Main convert processing routine.  This routine, called by DCL,
!	in turn calls the convert sharable image.
!
! Calling Sequence:
!
!	DCL Command
!
! Input Parameters:
!
!	See DCL command syntax
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	SS$_NORMAL or error code
!
! Routines Called:
!
!	CLI$GET_VALUE
!	CLI$PRESENT
!	OTS$CVT_TI_L
!	OTS$CVT_TO_L
!	OTS$CVT_TZ_L
!	LIB$INIT_TIMER
!	CONV$PASS_FILES
!	CONV$PASS_OPTIONS
!	CONV$CONVERT
!
! Side Effects:
!	?
!
!--

    BEGIN

    BUILTIN
	SUBM;

    LOCAL
	STATUS,
	STATISTICS,
	LENGTH;

    BIND
	CONV_CTRL = CONV$AB_FLAGS + .CONV$AB_FLAGS : BLOCK [ ,BYTE ],
	FDL_CTRL = FDL$AL_BLOCK [ 0 ] + .FDL$AL_BLOCK [ 0 ] : BLOCK [ ,BYTE ];

    ! Start the timer
    !
    LIB$INIT_TIMER( TIMER_BLK );

    ! Tell the sharable images that this is being called from DCL
    !
    CONV_CTRL [ CONV$V_DCL ] = _SET;
    FDL_CTRL [ FDL$V_DCL ] = _SET;

    ! Get some needed values from the command line
    !
    OPTION_BLOCK [ 17 ] = CLI$GET_VALUE( DESCRIPTOR('FDL'),FDL_DESC );

    ! Get the exception file name
    !
    OPTION_BLOCK [ 18 ] = CLI$GET_VALUE( DESCRIPTOR('EXCEPTION'),EXC_DESC );

    ! Get the output file name
    !
    CLI$GET_VALUE( DESCRIPTOR('OUTFILE'),OUT_DESC );

    ! Get the first input file name
    !
    CLI$GET_VALUE( DESCRIPTOR('INFILE'),IN_DESC [ 0,DSC$W_LENGTH ] );

    ! Pass the files to convert
    !
    RET_ON_ERROR( CONV$PASS_FILES( IN_DESC [ 0,DSC$W_LENGTH ],	! 1st input file
					OUT_DESC,		! Ouput file
					FDL_DESC,		! FDL file
					EXC_DESC ) );		! Exception file

    ! Get the rest of the input file names if any
    !
    INCR I FROM 1 TO ( MAX_INFILES - 1 ) BY 1
    DO

	! If we got a file then pas it to convert
	!
	IF CLI$GET_VALUE( DESCRIPTOR('INFILE'),IN_DESC [ .I,DSC$W_LENGTH ] )
	THEN
	    RET_ON_ERROR( CONV$PASS_FILES( IN_DESC [ .I,DSC$W_LENGTH ] ) )
	ELSE
	    EXITLOOP;

    ! Get the command options
    !
    ! The statistics option is not passed to convert
    ! 
    STATISTICS	= CLI$PRESENT( DESCRIPTOR( 'STATISTICS' ) );

    ! Set Option Flags
    !
    OPTION_BLOCK [ 1 ]	= CLI$PRESENT( DESCRIPTOR('CREATE') );
    OPTION_BLOCK [ 2 ]	= CLI$PRESENT( DESCRIPTOR('SHARE') );
    OPTION_BLOCK [ 3 ]	= CLI$PRESENT( DESCRIPTOR('FAST_LOAD') );
    OPTION_BLOCK [ 4 ]	= CLI$PRESENT( DESCRIPTOR('MERGE') );
    OPTION_BLOCK [ 5 ]	= CLI$PRESENT( DESCRIPTOR('APPEND') );
    OPTION_BLOCK [ 6 ]	= CLI$PRESENT( DESCRIPTOR('SORT') );
    OPTION_BLOCK [ 11 ]	= CLI$PRESENT( DESCRIPTOR('TRUNCATE') );
    OPTION_BLOCK [ 12 ]	= CLI$PRESENT( DESCRIPTOR('EXIT') );
    OPTION_BLOCK [ 13 ]	= CLI$PRESENT( DESCRIPTOR('FIXED_CONTROL') );
    OPTION_BLOCK [ 14 ]	= CLI$PRESENT( DESCRIPTOR('FILL_BUCKETS') );
    OPTION_BLOCK [ 15 ]	= CLI$PRESENT( DESCRIPTOR('READ_CHECK') );
    OPTION_BLOCK [ 16 ]	= CLI$PRESENT( DESCRIPTOR('WRITE_CHECK') );

    ! Check the KEY qualifier
    !
    IF CLI$GET_VALUE( DESCRIPTOR('KEY'),TEMP_DESC )
    THEN
	BEGIN

	LOCAL	IVALUE;

	IF NOT OTS$CVT_TI_L( TEMP_DESC,IVALUE )
	THEN
	    RETURN CONV$_ILL_KEY
	ELSE
	    OPTION_BLOCK [ 8 ] = .IVALUE
	END;

    ! Check the WORK_FILES qualifier
    !
    IF CLI$GET_VALUE( DESCRIPTOR('WORK_FILES'),TEMP_DESC )
    THEN
	BEGIN

	LOCAL	IVALUE;

	! Convert the value parameter
	!
	IF NOT OTS$CVT_TI_L( TEMP_DESC,IVALUE )
	THEN
	    RETURN CONV$_ILL_VALUE
	ELSE
	    OPTION_BLOCK [ 7 ] = .IVALUE
	END
    ELSE

	! If not specified then the default work files is two (like SORT)
	!
	OPTION_BLOCK [ 7 ] = 2;

    ! Check the PROLOGUE qualifier
    !
    IF CLI$GET_VALUE( DESCRIPTOR( 'PROLOGUE' ),TEMP_DESC )
    THEN
	BEGIN

	LOCAL	IVALUE;

	! Convert the value parameter
	!
	IF NOT OTS$CVT_TI_L( TEMP_DESC,IVALUE )
	THEN
	    RETURN CONV$_ILL_VALUE;

	! If everything is ok then stuff the value and make the option block
	! longer
	!
	OPTION_BLOCK [ 0 ] = 19;

	OPTION_BLOCK [ 19 ] = .IVALUE

	END;

    ! Check the PAD qualifier NOTE: do this last since it messes with temp_desc
    !
    IF OPTION_BLOCK [ 9 ] = CLI$GET_VALUE( DESCRIPTOR('PAD'),TEMP_DESC )
    THEN
	BEGIN

	LOCAL	PAD_C : REF VECTOR [ ,BYTE ];

	PAD_C = .TEMP_DESC [ DSC$A_POINTER ];

	! The syntax of the pad cheracter is:	a   - Ascii character except '%'
	!					%Dn - Decimal number
	!					%On - Octal number
	!					%Xn - Hex number
	!
	! If the first character is a percent sign '%' then translate the
	! numeric value depending on the base
	!
	IF .PAD_C [ 0 ] EQLU ASCII_PERCENT
	THEN
	    BEGIN

	    LOCAL
		STATUS,
		IVALUE;

	    ! Strip off the '%c' from the descriptor
	    !
	    TEMP_DESC [ DSC$W_LENGTH ] = .TEMP_DESC [ DSC$W_LENGTH ] - 2;
	    TEMP_DESC [ DSC$A_POINTER ] = .TEMP_DESC [ DSC$A_POINTER ] + 2;

	    ! Convert depending on the base
	    !
	    STATUS = ( SELECTONEU .PAD_C [ 1 ] OF
		     SET
		     [ ASCII_D ]   : OTS$CVT_TI_L( TEMP_DESC,IVALUE );

		     [ ASCII_O ]   : OTS$CVT_TO_L( TEMP_DESC,IVALUE );

		     [ ASCII_X ]   : OTS$CVT_TZ_L( TEMP_DESC,IVALUE );

		     [ OTHERWISE ] : 0;
		     TES );

	    ! Check on any problem
	    !
	    IF NOT .STATUS
	    THEN
		RETURN CONV$_ILL_VALUE
	    ELSE
		OPTION_BLOCK [ 10 ] = .IVALUE

	    END
	ELSE
	    BEGIN

	    ! This better be a single character
	    !
	    IF .TEMP_DESC [ DSC$W_LENGTH ] GTRU 1
	    THEN
		RETURN CONV$_ILL_VALUE;

	    OPTION_BLOCK [ 10 ] = .PAD_C [ 0 ]

	    END
	END;

    ! Initalize CONVERT
    !
    RET_ON_ERROR( CONV$PASS_OPTIONS ( OPTION_BLOCK ) );

    ! Do the conversion
    !
    IF NOT ( STATUS = CONV$CONVERT ( STATS_BLOCK ) )
    THEN

	! If there was an error and it wasn't conv$_fatalexc then exit
	!
	IF .STATUS NEQU CONV$_FATALEXC
	THEN
	    RETURN .STATUS;

    ! If we want and sucess then output some stats
    !
    IF .STATISTICS
    THEN
	BEGIN

	OWN
	    ZERO_Q	: VECTOR [ 2,LONG ] INITIAL( 0,0 ),	! Used for
	    TEMP_TIME	: VECTOR [ 2,LONG ],			! conversion
	    MUL100K	: VECTOR [ 2,LONG ] INITIAL( 100000,0 );! of times

	! Get Preformance Stats
	!
	LIB$STAT_TIMER( ONE,	ELP_TIME,	TIMER_BLK );
	LIB$STAT_TIMER( TWO,	TEMP_TIME,	TIMER_BLK );
	LIB$STAT_TIMER( THREE,	BUFF_IO,	TIMER_BLK );
	LIB$STAT_TIMER( FOUR,	DIRE_IO,	TIMER_BLK );
	LIB$STAT_TIMER( FIVE,	PG_FALT,	TIMER_BLK );

	! Convert to delta time
	!
	SUBM( 2,ELP_TIME,ZERO_Q,ELP_TIME );

	! Convert internal times to ASCII
	!
	$ASCTIM( TIMLEN = 0,
		 TIMBUF = ELP_DESC,
		 TIMADR = ELP_TIME,
		 CVTFLG = 0 );

        ! The CPU time is given in 10msec ticks so we need to convert it to
	! system delta time
	!
	! Convert to 10nsec ticks
	!
	MULQ( TEMP_TIME,MUL100K,CPU_TIME );

	! Convert to delta time
	!
	SUBM( 2,CPU_TIME,ZERO_Q,CPU_TIME );

	! Conver to ascii
	!
	$ASCTIM( TIMLEN = 0,
		 TIMBUF = CPU_DESC,
		 TIMADR = CPU_TIME,
		 CVTFLG = 0 );

	INCR I FROM 0 TO 4 BY 1
	DO
	    BEGIN

	    $FAO( .STATS_DESC_BLOCK [ .I ],
			LENGTH,
			FAO_DESC,
			.STATS_BLOCK [ .I ],
			.PROC_BLK [ .I ] );

	    PUT_DESC [ DSC$W_LENGTH ] = .LENGTH;

	    LIB$PUT_OUTPUT( PUT_DESC )

	    END;

	! Elasped Time and CPU Time
	!
	$FAO( .STATS_DESC_BLOCK [ 5 ],
			LENGTH,
			FAO_DESC,
			ELP_DESC,
			CPU_DESC );

	PUT_DESC [ DSC$W_LENGTH ] = .LENGTH;

	LIB$PUT_OUTPUT( PUT_DESC )

	END;

    RETURN .STATUS

    END;

%SBTTL	'MULQ'
ROUTINE	MULQ ( MUL1 : REF VECTOR [ 2,LONG ],
	       MUL2 : REF VECTOR [ 2,LONG ],
	       PROD : REF VECTOR [ 2,LONG ] ) : NOVALUE =

!++
!
! Functional Description:
!
!	Multiplies two quadwords.  This routine was converted from the example
!	of the EMUL instruction in the VAX Architecture Handbook
!
! Calling Sequence:
!
!	MULQ( mul1,mul2,prod )
!
! Input Parameters:
!
!	mul1	- quadword multiplier
!	mul2	- quadword multiplier
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	prod	- quadword product (note: output cannot be same as either input)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	EMUL;

    BIND
	MUL1S = MUL1 [ 0 ] : SIGNED,
	MUL2S = MUL2 [ 0 ] : SIGNED;

    LOCAL
	ZERO : INITIAL( 0 ),
	TEMP;

    ! Multiply low half
    !
    EMUL( .MUL1,.MUL2,ZERO,.PROD );

    ! High half = A[high] * B[low] + A[low] * B[high]
    !
    TEMP = ( .MUL1 [ 1 ] * .MUL2 [ 0 ] ) + ( .MUL1 [ 0 ] * .MUL2 [ 1 ] );

    ! If A[low]<0 then compensate of unsigned bias of 2**32
    !
    IF .MUL1S LSS 0
    THEN
	TEMP = .TEMP + .MUL2 [ 0 ];

    ! If B[low]<0 then compensate of unsigned bias of 2**32
    !
    IF .MUL2S LSS 0
    THEN
	TEMP = .TEMP + .MUL1 [ 0 ];

    ! Combine with high half of A[low] * B[low]
    !
    PROD [ 1 ] = .PROD [ 1 ] + .TEMP;

    RETURN

    END;

END	ELUDOM
