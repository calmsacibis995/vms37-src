%TITLE	'VAX-11 CONVERT/RECLAIM'
MODULE	RECL$CTRL	( IDENT='V03-003',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT/RECLAIM
!
! Environment:
!		VAX/VMS Operating System
!
! Abstract:
!
!
! Contents:	SCAN_DATA_LEVEL
!		UPDATE_INDEX
!		REMOVE_BUCKET
!		ZERO_BUCKET
!		SWAP_BUFFERS
!
!--

!
! Author:	Keith B Thompson
!		Peter Lieberwirth	Creation date:	September-1981
!
!
! Modified by:
!
!	V03-003	KBT0048		Keith Thompson		21-Apr-1982
!		Do not reclaim the last index record in a bucket
!
!	V03-002	KBT0041		Keith Thompson		3-Apr-1982
!		Add logic to swing index pointers if needed and fix index
!		save bucket logic
!
!	V03-001	KBT0010		Keith Thompson		16-Mar-1982
!		Fix a problem with end condition in update_index and
!		add a few lines of comments.
!
!****


PSECT
	OWN	= _CONV$RECL_D	(PIC),
	GLOBAL	= _CONV$RECL_D	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$RECL_S	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE	'SRC$:CONVERT';
REQUIRE	'SRC$:RECLDEF';

EXTERNAL ROUTINE
	RECL$$GET_NEXT_BUCKET	: NOVALUE JSB_REG_9,
	RECL$$BUCKET_EMPTY	: JSB_REG_9,
	RECL$$GET_DOWN_POINTER	: JSB_REG_8,
	RECL$$CHECK_LAST	: JSB_REG_8,
	RECL$$COMPARE_POINTER	: JSB_REG_8,
	RECL$$SWING_POINTER	: NOVALUE JSB_REG_8,
	RECL$$REMOVE_INDEX_RECORD: JSB_REG_8,
	RECL$$WRITE_BUCKET	: NOVALUE JSB_REG_9,
	RECL$$WRITE_AREA_DESC	: NOVALUE JSB_REG_9,
	RECL$$WRITE_KEY_DESC	: NOVALUE JSB_REG_9;

FORWARD ROUTINE
	UPDATE_INDEX		: JSB_REG_9,
	REMOVE_BUCKET		: NOVALUE JSB_REG_9,
	ZERO_BUCKET		: NOVALUE JSB_REG_9,
	RECL$$SWAP_BUFFERS	: NOVALUE JSB_REG_9;

EXTERNAL
	RECL$GL_AREA_BLOCK;


%SBTTL	'SCAN_DATA_LEVEL'
GLOBAL ROUTINE	RECL$$SCAN_DATA_LEVEL : JSB_REG_9 =
!++
!
! Functional Description:
!
!	This routine sequentially read along the data level buckets
!	looking for an empty one.  If it finds one it trys to remove
!	the index to it then trys to remove it.
!
! Calling Sequence:
!
!	RECL$$SCAN_DATA_LEVEL()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	BUCKET
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	normal
!
! Routines Called:
!
!	BUCKET_EMPTY
!	UPDATE_INDEX
!	REMOVE_BUCKET
!	SWAP_BUFFERS
!	GET_NEXT_BUCKET
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_REGISTERS_9;

    ! Loop untill the last bucket in chain if found.
    ! If this bucket is the last in the chain don't do it (it is to
    ! complaicated to reclaim this one bucket) instead go to the
    !
    WHILE ( NOT .BUCKET [ BKT$V_LASTBKT ] )
    DO
	BEGIN

	! If the bucket is empty the try to remove all traces of it
	!
	IF RECL$$BUCKET_EMPTY()
	THEN
	    BEGIN

	    ! Remove the index record for this bucket
	    !
	    IF UPDATE_INDEX( .RTX [ RTX$L_CURRENT_VBN ] )
	    THEN

		! If the update was successful remove the bucket itself
		!
		REMOVE_BUCKET()

	    ELSE

		! If index could not be update then swap the buffers in order
		! to save the previous bucket
		!
		RECL$$SWAP_BUFFERS()

	    END
	ELSE

	    ! If the bucket is not empty then swap the buffers in order to save
	    ! the previous bucket
	    !
	    RECL$$SWAP_BUFFERS();

	! Get the next bucket
	!
	RECL$$GET_NEXT_BUCKET()

	END;

    RETURN RECL$_SUCCESS

    END;

%SBTTL	'UPDATE_INDEX'
ROUTINE UPDATE_INDEX ( VBN ) : JSB_REG_9 =
!++
!
! Functional Description:
!
!	This routine updates the level above when a bucket on the lower level
!	is deleted.  When called recursively, it updates the entire index.
!
! Calling Sequence:
!
!	UPDATE_INDEX( VBN );
!
! Input Parameters:
!
!	VBN	-	the VBN of the bucket being deleted on the lower level
!
! Implicit Inputs:
!
!	BUCKET
!	KEY_DESC
!
! Output Parameters:
!
!	None.
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!
!	SUCCESS or FAILURE
!
! Routines Called:
!
!	GET_DOWN_POINTER
!	COMPARE_POINTER
!	SWING_POINTER
!	REMOVE_INDEX_RECORD
!	BUCKET_EMPTY
!	UPDATE_INDEX
!	REMOVE_BUCKET
!	WRITE_BUCKET
!	GET_NEXT_BUCKET
!	SWAP_BUFFERS
!
! Side Effects:
!
!	None.
!
!--

    BEGIN

    DEFINE_REGISTERS_8_GLOBAL;

    LOCAL
	STATUS,
	NEXT_DATA_BUCKET;

    ! Assume success
    !
    STATUS = RECL$_SUCCESS;

    ! Return success if at level with root bucket
    !
    IF .BUCKET [ BKT$V_ROOTBKT ]
    THEN
	RETURN .STATUS;

    ! Before we move up a level get the vbn of the next bucket (when this is
    ! the data level it will be important)
    !
    NEXT_DATA_BUCKET = .BUCKET [ BKT$L_NXTBKT ];

    ! Point the context at the next higher level in the tree
    !
    RTX = .RTX + RTX$K_BLN;

    ! Point to the new bucket
    !
    BUCKET = .RTX [ RTX$L_CURRENT_BUFFER ];

    ! Save the position in the index so we can come back
    !
    RTX [ RTX$L_SAVE_VBN ] = .RTX [ RTX$L_PREVIOUS_VBN ];

    ! Search all the buckets on the current level for a down pointer
    !
    DO
	BEGIN

	! Is down pointer in current bucket?
	!
	IF RECL$$GET_DOWN_POINTER( .VBN )
	THEN
	    BEGIN

	    !++
	    !
	    ! Yes, we found the down pointer in the current bucket.
	    ! Check to see if it is the last pointer in a bucket if so we
	    ! can't reclaim it.
	    ! If this is level 1 check to see if the next index pointer points
	    ! to the next data bucket.  If it doesent we swing the current
	    ! pointer to point to the next data bucket.  Otherwise we squish
	    ! out the down pointer.  Then to see if squishing out the down
	    ! pointer made the bucket reclaimable.  If it did, reclaim it after
	    ! updating the index levels above this one.  If its not reclaimable
	    ! just re-compress the index record following the deleted down
	    ! pointer and write the bucket back.
	    !
	    !--
	    
	    ! If this is the last index record in the bucket then don't reclaim it
	    !
	    IF RECL$$CHECK_LAST()
	    THEN
		BEGIN
		STATUS = RECL$_FAILURE;
		EXITLOOP
		END;

	    IF .RTX [ RTX$B_LEVEL ] EQLU 1
	    THEN

		! Check to see if the next index pointer points to the
		! next data bucket
		!
		IF RECL$$COMPARE_POINTER( .NEXT_DATA_BUCKET )
		THEN

		    ! If it does, simply remove the current index record
		    !
		    RECL$$REMOVE_INDEX_RECORD()

		ELSE

		    ! If it doesent, swing the current index record to point
		    ! to the next data bucket
		    !
		    RECL$$SWING_POINTER( .NEXT_DATA_BUCKET )

	    ELSE

		! Squish out the index record in the current buffer
		!
		RECL$$REMOVE_INDEX_RECORD();

	    ! if this index bucket is empty then lets try to reclaim it!
	    !
	    IF RECL$$BUCKET_EMPTY()
	    THEN
		BEGIN

		! If the index bucket is empty, try to update all the
		! index levels above.
		! If sucessful remove it.
	 	!
		IF STATUS = UPDATE_INDEX ( .RTX [ RTX$L_CURRENT_VBN ] )
		THEN
		    BEGIN

		    ! If the update was successful remove the bucket
		    !
		    REMOVE_BUCKET();

		    ! Get the next bucket so we don't look at this one again
		    !
		    RECL$$GET_NEXT_BUCKET()

		    END
		ELSE
		    BEGIN

		    ! If the update failed then we must reread the buffer since
		    ! it was modified
		    !
		    RTX [ RTX$L_NEXT_VBN ] = .RTX [ RTX$L_SAVE_VBN ];

		    ! Zero the current buffer vbn to force the read
		    !
		    RTX [ RTX$L_CURRENT_VBN ] = 0;

		    ! Get the saved previous bucket
		    !
		    RECL$$GET_NEXT_BUCKET();

		    EXITLOOP

		    END

		END
	    ELSE
		BEGIN

		! bucket is not empty so just write the current
		! buffer back, and return
		!
		RECL$$WRITE_BUCKET( RTX [ RTX$L_CURRENT_BUFFER ] );

		EXITLOOP

		END

	    END

	ELSE

	    ! Down pointer is not in current buffer so read in the next bucket
	    ! in the horizontal chain.
	    !
	    ! However, if this is already the last bucket in this level, we
	    ! didn't find the down pointer, so return saying success, since
	    ! if there's no down pointer we can certainly reclaim the bucket
	    ! on the level below.
	    !
	    IF .BUCKET [ BKT$V_LASTBKT ]
	    THEN
		BEGIN

		! If this bucket is the same as the save bucket then
		! don't bother to reread it
		!
		IF .RTX [ RTX$L_CURRENT_VBN ] NEQU .RTX [ RTX$L_SAVE_VBN ]
		THEN
		    BEGIN

		    ! Before we return go back to where we were
		    !
		    RTX [ RTX$L_NEXT_VBN ] = .RTX [ RTX$L_SAVE_VBN ];

		    ! Get the saved previous bucket
		    !
		    RECL$$GET_NEXT_BUCKET()

		    END;

		! Swap the suckers
		!
		RECL$$SWAP_BUFFERS();

		! Get the saved bucket
		!
		RECL$$GET_NEXT_BUCKET();

		! Return
		!
		EXITLOOP

		END
	    ELSE
		BEGIN

		! Its not the last bucket, so go read the next bucket
		!
		RECL$$SWAP_BUFFERS();

		RECL$$GET_NEXT_BUCKET()

		END

	END

    UNTIL RECL$_FOREVER;

    ! We exit the loop on sucess so return the context back to where it
    ! was when we were called
    !
    RTX = .RTX - RTX$K_BLN;

    BUCKET = .RTX [ RTX$L_CURRENT_BUFFER ];

    RETURN .STATUS

    END;


%SBTTL	'REMOVE_BUCKET'
ROUTINE	REMOVE_BUCKET : NOVALUE JSB_REG_9 =
!++
!
! Functional Description:
!
!	This routine takes the steps required to remove a bucket from the
!	horizontal chain, write it to the AVAIL list, and update the key
!	descriptor if necessary.
!
! Calling Sequence:
!
!	REMOVE_BUCKET();
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	RTX to point to current bucket, etc...
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	The bucket is removed and written to the AVAIL list.  All pointers
!	are updated.
!
! Routine Value:
!	none
!
! Routines Called:
!
!	RECL$$WRITE_KEY_DESC
!	RECL$$WRITE_BUCKET
!	ZERO_BUCKET
!	RECL$$WRITE_AREA_DESC
!
! Side Effects:
!
!	RECL$GL_DATA_COUNT is incremented if we reclaim a data bucket.
!	RECL$GL_INDEX_COUNT is incremented if we reclaim an index bucket.
!
!--

    BEGIN

    DEFINE_REGISTERS_9;

    EXTERNAL
	RECL$GL_DATA_COUNT,
	RECL$GL_INDEX_COUNT;

    LOCAL
	AREA_DESC : REF BLOCK [ ,BYTE ];

    ! The removal of a bucket is done in three steps, the order of which
    ! is of the utmost importance to the reliability of the utility. It
    ! is assumed that the index record for this bucket has been removed.
    !
    ! Step I
    !
    ! Update the previous bucket pointer to point to the next one in the chain
    !
    BEGIN

    LOCAL PREVIOUS_BUCKET : REF BLOCK [ ,BYTE ];

    PREVIOUS_BUCKET = .RTX[ RTX$L_PREVIOUS_BUFFER ];

    ! Update the previous bucket in the chain
    !
    PREVIOUS_BUCKET [ BKT$L_NXTBKT ] = .RTX [ RTX$L_NEXT_VBN ];

    RECL$$WRITE_BUCKET( RTX [ RTX$L_PREVIOUS_BUFFER ] )

    END;

    ! Step Ia
    !
    ! In the case that this is the first bucket in a chain then either do
    ! nothing or update the key descriptor, depending on the level.
    !
    ! Is this the first bucket in the chain
    !
    IF .RTX [ RTX$L_CURRENT_VBN ] EQLU .RTX [ RTX$L_FIRST_VBN ]
    THEN
	BEGIN

	! If this is the data level bucket then update the key descriptor
	! else continue
	!
	IF .BUCKET [ BKT$B_LEVEL ] EQLU 0
	THEN
	    BEGIN

	    KEY_DESC [ KEY$L_LDVBN ] = .RTX [ RTX$L_NEXT_VBN ];

	    RECL$$WRITE_KEY_DESC()

	    END;

	! The next vbn will now be the first in the chain
	!
	RTX [ RTX$L_FIRST_VBN ] = .RTX [ RTX$L_NEXT_VBN ]

	END;

    ! Step II
    !
    ! Update the current bucket to point to the first bucket in the area
    ! available list
    !
    ! To update the bucket we must use the area descriptor
    !
    AREA_DESC = .RECL$GL_AREA_BLOCK + ( .RTX [ RTX$B_AREA ] * AREA$K_BLN );

    ! Point the bucket to the first avail. bucket
    !
    BUCKET [ BKT$L_NXTBKT ] = .AREA_DESC [ AREA$L_AVAIL ];

    ! If first bucket on free list set the last bucket bit
    !
    IF .BUCKET [ BKT$L_NXTBKT ] EQLU 0
    THEN
	BUCKET [ BKT$V_LASTBKT ] = _SET;

    ! Zero the data portion of the bucket
    !
    ZERO_BUCKET();

    ! Write the bucket into the file
    !
    RECL$$WRITE_BUCKET( RTX [ RTX$L_CURRENT_BUFFER ] );

    ! Count the reclaimed bucket.
    !
    IF .BUCKET[ BKT$B_LEVEL ] EQLU 0
    THEN

	! Its a data bucket we're reclaiming.
	!
	RECL$GL_DATA_COUNT = .RECL$GL_DATA_COUNT + 1
    ELSE

	! Its an index bucket we're reclaiming.
	!
	RECL$GL_INDEX_COUNT = .RECL$GL_INDEX_COUNT + 1;


    ! Step III
    !
    ! Update the area descriptor with the new buCket at the head of the
    ! availiable list
    !
    AREA_DESC [ AREA$L_AVAIL ] = .RTX [ RTX$L_CURRENT_VBN ];

    RECL$$WRITE_AREA_DESC();

    RETURN

    END;


%SBTTL	'ZERO_BUCKET'
ROUTINE	ZERO_BUCKET : NOVALUE JSB_REG_9 =
!++
!
! Functional Description:
!
!	Zeros out the data portion of a index bucket
!
! Calling Sequence:
!
!	ZERO_BUCKET()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_REGISTERS_9;

    CH$FILL( 0,							! Fill with 0's
	    .RTX [ RTX$W_BUCKET_SIZE ] - BKT$K_OVERHDSZ - 1,	! This much
	    .RTX [ RTX$L_CURRENT_BUFFER ] + BKT$K_OVERHDSZ );	! Starting here

    RETURN

    END;


%SBTTL	'SWAP_BUFFERS'
GLOBAL ROUTINE	RECL$$SWAP_BUFFERS : NOVALUE JSB_REG_9 =
!++
!
! Functional Description:
!
! Calling Sequence:
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_REGISTERS_9;

    LOCAL
	TEMP_BUF,
	TEMP_VBN;

    ! Swap the current buffer with the previous buffer and change bucket
    !
    TEMP_BUF = .RTX [ RTX$L_PREVIOUS_BUFFER ];
    TEMP_VBN = .RTX [ RTX$L_PREVIOUS_VBN ];

    RTX [ RTX$L_PREVIOUS_BUFFER ] = .RTX [ RTX$L_CURRENT_BUFFER ];
    RTX [ RTX$L_PREVIOUS_VBN ]    = .RTX [ RTX$L_CURRENT_VBN ];

    RTX [ RTX$L_CURRENT_BUFFER ] = .TEMP_BUF;
    RTX [ RTX$L_CURRENT_VBN ]    = .TEMP_VBN;

    BUCKET = .TEMP_BUF;

    RETURN

    END;

END	ELUDOM
