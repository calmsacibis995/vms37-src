%TITLE	'VAX-11 CONVERT'

!	IDENT	V01-000

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	Bliss require file for CONVERT and CONVERT/RECLAIM
!
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	July-1980
!
!
! Modified by:
!
!****


MACRO
	DESC_BLK =
		BLOCK [ 8,BYTE ]%,

	DESCRIPTOR ( STRING ) =
		UPLIT ( %CHARCOUNT(STRING), UPLIT BYTE(STRING) )%,

	ERRCHK ( SERVICE,ERROR ) =
		BEGIN
		LOCAL STATUS;
		IF ( NOT ( STATUS = SERVICE ) ) 
		THEN
		    BEGIN
		    SIGNAL( ERROR
				%IF %LENGTH GTR 2 %THEN ,%REMAINING
						%FI );
		    RETURN .STATUS
		    END;
		END%,

	RET_ON_ERROR ( SERVICE ) =
		BEGIN
		LOCAL STATUS;
		IF ( NOT ( STATUS = SERVICE ) )
		THEN
		    RETURN .STATUS
		END%,

	_SET	= 1%,
	_CLEAR	= 0%;

STRUCTURE

	! Structure definitions for reading a file of RFA's produced
	! by SORT-32
	!
	RFA0_VECTOR [ I ; N ] =
		[ N*6 ]
		( RFA0_VECTOR + I * 6 )< 0,32,0 >,

	RFA4_VECTOR [ I ; N ] =
		[ N*6 ]
		( RFA4_VECTOR + 4 + I * 6 )< 0,16,0 >;

!	Linkages  NOTE: By only using reg. 2-11 a normal JSB or CALLx
!			link will preserve these registers.
!
LINKAGE

	! Generic jsb link
	!
	JSB_LINK	= JSB,

	! Convert
	!
	JSB_LINK_ARG1	= JSB ( REGISTER = 1 ),
	JSB_LINK_ARG2	= JSB ( REGISTER = 1,REGISTER = 2 ),

	JSB_REG11	= JSB : GLOBAL( KEY_BLOCK = 11 ),
	JSB_REG11_ARG1	= JSB ( REGISTER = 1 ) : GLOBAL( KEY_BLOCK = 11 ),

	JSB_REG		= JSB : GLOBAL( CTX = 9,BUCKET = 10,KEY_BLOCK = 11 ),
	JSB_REG_ARG1	= JSB ( REGISTER = 1 ) :
				GLOBAL( CTX = 9,BUCKET = 10,KEY_BLOCK = 11 ),

	! Convert routine specific links
	!
	CONVERT_VBN_ID_LINK	= JSB : GLOBAL( SORT_VBN = 6,SORT_ID = 7 ),

	CVT_TO_ASC_LINK		= JSB,

	! Reclaim linkages
	!
	JSB_REG_9	= JSB : GLOBAL( BUCKET = 9,
					RTX = 10,
					KEY_DESC = 11 ),

	JSB_REG_8	= JSB : GLOBAL( KEY_POINTER = 8,
					BUCKET = 9,
					RTX = 10,
					KEY_DESC = 11 );

!	Global register definitions
!
MACRO

	! Convert global registers
	!
	DEFINE_CTX_GLOBAL	= GLOBAL REGISTER
					CTX		= 9%,

	DEFINE_BUCKET_GLOBAL	= GLOBAL REGISTER
					BUCKET		= 10%,

	DEFINE_KEY_BLOCK_GLOBAL	= GLOBAL REGISTER
					KEY_BLOCK	= 11%,

	DEFINE_VBN_ID_GLOBAL	= GLOBAL REGISTER
					SORT_VBN	= 6,
					SORT_ID		= 7%,

	DEFINE_CTX		= EXTERNAL REGISTER
					CTX		: REF BLOCK [ ,BYTE ]%,

	DEFINE_BUCKET		= EXTERNAL REGISTER
					BUCKET		: REF BLOCK [ ,BYTE ]%,

	DEFINE_KEY_BLOCK	= EXTERNAL REGISTER
					KEY_BLOCK	: REF BLOCK [ ,BYTE ]%,

	! Reclaim global registers
	!
	DEFINE_REGISTERS_9_GLOBAL= GLOBAL REGISTER
					BUCKET		= 9,
					RTX		= 10,
					KEY_DESC	= 11%,

	DEFINE_REGISTERS_9	= EXTERNAL REGISTER
					BUCKET		: REF BLOCK [ ,BYTE ],
					RTX		: REF BLOCK [ ,BYTE ],
					KEY_DESC	: REF BLOCK [ ,BYTE ]%,

	DEFINE_REGISTERS_8_GLOBAL= GLOBAL REGISTER
					KEY_POINTER	= 8;
				   EXTERNAL REGISTER
					BUCKET		: REF BLOCK [ ,BYTE ],
					RTX		: REF BLOCK [ ,BYTE ],
					KEY_DESC	: REF BLOCK [ ,BYTE ]%,

	DEFINE_REGISTERS_8	= EXTERNAL REGISTER
					KEY_POINTER	: REF BLOCK [ ,BYTE ],
					BUCKET		: REF BLOCK [ ,BYTE ],
					RTX		: REF BLOCK [ ,BYTE ],
					KEY_DESC	: REF BLOCK [ ,BYTE ]%;


!	Symbol definitions macros
!
MACRO

!	Define the error codes (They are actually defined in CONVMSG
!	but this is the next best thing)
!
	DEFINE_ERROR_CODES	=

	EXTERNAL LITERAL
		CONVERT$_FACILITY,
		CONV$_FAO_MAX,

		CONV$_BADBLK,
		CONV$_BADLOGIC,
		CONV$_BADSORT,
		CONV$_CONFQUAL,
		CONV$_CREATEDSTM,
		CONV$_CREA_ERR,
		CONV$_DELPRI,
		CONV$_DUP,
		CONV$_EXTN_ERR,
		CONV$_FATALEXC,
		CONV$_FILLIM,
		CONV$_IDX_LIM,
		CONV$_ILL_KEY,
		CONV$_ILL_VALUE,
		CONV$_INP_FILES,
		CONV$_INSVIRMEM,
		CONV$_INVBKT,
		CONV$_KEY,
		CONV$_KEYREF,
		CONV$_LOADIDX,
		CONV$_NARG,
		CONV$_NI,
		CONV$_NOKEY,
		CONV$_NOTIDX,
		CONV$_NOTSEQ,
		CONV$_NOWILD,
		CONV$_ORDER,
		CONV$_OPENEXC,
		CONV$_OPENIN,
		CONV$_OPENOUT,
		CONV$_PAD,
		CONV$_PLV,
		CONV$_PROERR,
		CONV$_PROL_WRT,
		CONV$_READERR,
		CONV$_RSK,
		CONV$_RTL,
		CONV$_RTS,
		CONV$_UDF_BKS,
		CONV$_UDF_BLK,
		CONV$_VFC,
		CONV$_WRITEERR%;

!	Global literals
!
LITERAL

	! Buffer Sizes
	!
	BLOCK_SIZE	= 512,
	ESA_BUF_SIZ	= 80,
	FILE_NAME_SIZ	= 80,
	REC_BUF_SIZ	= 512,
	RFA_BUF_SIZ	= 1536,
	RSA_BUF_SIZ	= 80,
	SORT_TMP_SIZ	= 12,
	VFC_BUF_SIZ	= 255,

	! Maximum Index Level
	!
	MAX_IDX_LVL = 32,		! NOTE: MAX_IDX_LVL < 33

	! Routine Exit Codes
	!
	CONV$_SUCCESS	= 1,
	CONV$_FAILURE	= 0,

	! Reclaim miscellaneous constants
	!
	RECL$_SUCCESS = 1,
	RECL$_FAILURE = 0,
	RECL$_FOREVER = 0,

	! Exception Codes
	!
	EXC$_RMS = 0,
	EXC$_RTL = 1,
	EXC$_RTS = 2,
	EXC$_VFC = 3,
	EXC$_DUP = 4,
	EXC$_KEY = 5,
	EXC$_REX = 6,
	EXC$_RSZ = 7,
	EXC$_SEQ = 8;

MACRO

	! Macros needed to talk to sort
	!
	SORTKEY$W_TYPE	= 0,0,16,0%,
	SORTKEY$W_ORDER	= 1,0,16,0%,
	SORTKEY$W_START	= 2,0,16,0%,
	SORTKEY$W_LENGH	= 3,0,16,0%,

	! Reclaim junk
	!
	KEYR$B_LENGTH = 0,0,8,0 %,
	KEYR$B_FRONT_COUNT = 1,0,8,0 %;
