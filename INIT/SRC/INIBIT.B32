MODULE INIBIT (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This routine initializes the contents of the volume storage bitmap.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  13-Nov-1977  14:37
!
! MODIFIED BY:
!
!	V02-003	LMP0002		L. Mark Pilant		11-Nov-1981  13:15
!		Fix bitmap allocation when a large number of blocks are
!		to be allocated.
!
!	V02-002	ACG0191		Andrew C. Goldstein,	1-Apr-1981  10:33
!		Fix index file allocation at end of volume
!
!	V0101	ACG0069		Andrew C. Goldstein,	9-Oct-1979  16:58
!		Remove device data table
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:27
!	Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';

GLOBAL ROUTINE INIT_BITMAP : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the contents of the volume storage bitmap.
!
!
! CALLING SEQUENCE:
!	INIT_BITMAP ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	device data table
!	allocation table
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	storage bitmap file written
!
!--

BEGIN

BUILTIN
	ROT;

LOCAL
	BLOCK_COUNT,			! number of blocks in storage map
	MAP_LBN,			! LBN of current bitmap block
	PREV_LBN,			! start LBN + 1 of last entry processed
	NEXT_LBN,			! start LBN of current allocation table entry
	INDEX,				! table index of current entry
	BIT_COUNT,			! number of bits to clear in storage map
	MAP_VBN,			! relative block in storage map to use
	BIT_POS,			! bit position of start of area
	BIT_IDX;			! index into bitmap buffer

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command option flags
	ALLOC_TABLE_CNT	: VECTOR,	! allocation block count table
	ALLOC_TABLE_LBN	: VECTOR,	! allocation LBN table
	BITMAP_CNT,			! block count of storage map file
	BITMAP_LBN,			! starting LBN of storage map file
	VOLUME_SIZE,			! size of volume rounded to next cluster
	CLUSTER,			! volume cluster factor
	BUFFER		: BBLOCK,	! I/O buffer
	DEVICE_CHAR	: BBLOCK;	! device characteristics

EXTERNAL LITERAL
	ALLOC_MAX	: UNSIGNED (16); ! total number of entries in allocation table

EXTERNAL ROUTINE
	CHECKSUM2,			! compute block checksum
	WRITE_BLOCK;			! write block on volume


! Build the storage control block and write it out.
!

CH$FILL (0, 512, BUFFER);

IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN
    BEGIN
    MAP BUFFER : VECTOR;
    BLOCK_COUNT = .BITMAP_CNT - 1;
    IF .BLOCK_COUNT GTRU 126
    THEN BLOCK_COUNT = 0;

    (BUFFER+3)<0,8> = .BLOCK_COUNT;
    INCR J FROM 0 TO .BLOCK_COUNT - 1
    DO BUFFER[.J+1] = 4096;
    BUFFER[.BLOCK_COUNT+1] = ROT (.VOLUME_SIZE, 16);
    END

ELSE
    BEGIN
    BUFFER[SCB$W_STRUCLEV]	= SCB$C_LEVEL2 + 1;
    BUFFER[SCB$W_CLUSTER]	= .CLUSTER;
    BUFFER[SCB$L_VOLSIZE]	= .DEVICE_CHAR[DIB$L_MAXBLOCK];
    BUFFER[SCB$L_BLKSIZE]	= (.DEVICE_CHAR[DIB$B_SECTORS]
				 * .DEVICE_CHAR[DIB$B_TRACKS]
				 * .DEVICE_CHAR[DIB$W_CYLINDERS])
				 / .DEVICE_CHAR[DIB$L_MAXBLOCK];
    BUFFER[SCB$L_SECTORS]	= .DEVICE_CHAR[DIB$B_SECTORS];
    BUFFER[SCB$L_TRACKS]	= .DEVICE_CHAR[DIB$B_TRACKS];
    BUFFER[SCB$L_CYLINDER]	= .DEVICE_CHAR[DIB$W_CYLINDERS];

    CHECKSUM2 (BUFFER, $BYTEOFFSET (SCB$W_CHECKSUM));
    END;

WRITE_BLOCK (.BITMAP_LBN, BUFFER);

! Now write the contents of the bitmap, marking off the areas listed in the
! allocation table. To save disk thrashing, we process the table entries
! in LBN order.
!

MAP_LBN = .BITMAP_LBN + 1;
CH$FILL (-1, 512, BUFFER);
PREV_LBN = 0;
WHILE 1 DO
    BEGIN

! Search the allocation table for the lowest LBN which is greater than the
! one previously processed.
!

    NEXT_LBN = -1;
    INCR J FROM 0 TO ALLOC_MAX-1 DO
	BEGIN
	IF  .ALLOC_TABLE_LBN[.J] GEQU .PREV_LBN
	AND .ALLOC_TABLE_LBN[.J] LSSU .NEXT_LBN
	THEN
	    BEGIN
	    NEXT_LBN = .ALLOC_TABLE_LBN[.J];
	    INDEX = .J;
	    END;
	END;
    IF .NEXT_LBN EQL -1 THEN EXITLOOP;	! done all entries
    PREV_LBN = .NEXT_LBN + 1;

! For this group of blocks, compute the bit count and block and bit offset
! from the current block in the storage map.
!

    BIT_COUNT = .ALLOC_TABLE_CNT[.INDEX] / .CLUSTER;
    BIT_POS = .NEXT_LBN / .CLUSTER - (.MAP_LBN - .BITMAP_LBN - 1) * 4096;

! Now mark off the blocks represented by the allocated entry. This is coded
! one bit at a time to keep the code simple; the areas are not large enough
! in general to warrant more intelligent code. If the bit position points
! off the end of the current block, pass blocks until its doesn't.
!

    UNTIL .BIT_POS LSSU 4096 DO
	BEGIN
	WRITE_BLOCK(.MAP_LBN, BUFFER);
	CH$FILL (-1, 512, BUFFER);
	MAP_LBN = .MAP_LBN + 1;
	BIT_POS = .BIT_POS - 4096;
	END;

    DECR J FROM .BIT_COUNT TO 1 DO
	BEGIN
	MAP BUFFER : BITVECTOR;

	BUFFER[.BIT_POS] = 0;
	BIT_POS = .BIT_POS + 1;

	IF .BIT_POS GEQU 4096
	THEN
	    BEGIN
	    WRITE_BLOCK(.MAP_LBN, BUFFER);
	    CH$FILL (-1, 512, BUFFER);
	    MAP_LBN = .MAP_LBN + 1;
	    BIT_POS = 0;
	    END;
	END;

    END;				! end of allocation scan loop

! Finally flush the last buffer and zero any additional blocks present
! in the storage map due to cluster roundup.
!

WRITE_BLOCK (.MAP_LBN, BUFFER);
MAP_LBN = .MAP_LBN + 1;
CH$FILL (0, 512, BUFFER);

UNTIL .MAP_LBN GEQU .BITMAP_LBN + .BITMAP_CNT DO
    BEGIN
    WRITE_BLOCK (.MAP_LBN, BUFFER);
    MAP_LBN = .MAP_LBN + 1;
    END;

END;					! end of routine INIT_BITMAP

END
ELUDOM
