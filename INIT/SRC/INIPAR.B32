MODULE INIPAR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 2
!
! ABSTRACT:
!
!	This module contains the data base and utilities used to acquire the
!	INIT command line from the CLI parser.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  8-Nov-1977  22:29
!
! MODIFIED BY:
!
!	V02-007	DMW0017		David Michael Walp		19-Jan-1981
!		Uppercase value of volume_accessibility
!
!	V02-006	ACG43021	Andrew C. Goldstein,	4-Jan-1982  16:25
!		Store index file LBN as longword
!
!	V02-005	DMW0015		David Michael Walp		26-Aug-1981
!		/ANSI to /LABEL
!
!	V02-004	DMW0003		David Michael Walp		4-Mar-1981
!		Added /ANSI=VOLUME_ACCESSIBILTY:"x" switch
!
!	V02-003	RLRDENS		Robert L. Rappaport		6-Oct-1980
!		Added /DENSITY=1 and /DENSITY=2 support for RX02's
!
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';
LIBRARY 'SYS$LIBRARY:CLIMAC.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';

!+
!
! Impure data area. This area contains the INIT parameters extracted from
! the command line by the associated parsing routines.
!
!-

LITERAL
	BAD_TABLE_LEN	= 100;		! length of bad block table

GLOBAL
	INIT_OPTIONS	: BITVECTOR [64], ! option flags
	PROTECTION,			! value of /PROTECTION switch
	FILE_PROT,			! value of /FILE_PROTECTION switch
	RECORD_PROT,			! value of /RECORD_PROTECTION switch
	MAXIMUM,			! value of /MAXIMUM switch
	INDEX,				! LBN of index file start
	CLUSTER,			! value of /CLUSTER switch
	HEADERS,			! value of /HEADERS switch
	DIRECTORIES,			! number of MFD entries to preallocate
	OWNER_UIC,			! value of /OWNER_UIC switch
	EXTENSION,			! value of /EXTENSION switch
	WINDOW,				! value of /WINDOW switch
	ACCESSED,			! value of /ACCESSED switch
	DEVICE_STRING	: VECTOR [2],	! decriptor of device name string
	LABEL_STRING	: VECTOR [2],	! descriptor of volume label string
	USER_NAME	: VECTOR [2],	! descriptor of user name string
	BADBLOCK_COUNT,			! count of manually entered bad blocks
	BADBLOCK_TABLE	: BBLOCKVECTOR [BAD_TABLE_LEN, BAD_LENGTH],
					! manually entered bad blocks
	VOL_ACC		: BYTE,		! value of /LABEL:VOLUME_ACCESS switch

	PARSE_IMP_END	: VECTOR [0];	! end of data area

LITERAL
	PARSE_IMP_LEN	= PARSE_IMP_END - INIT_OPTIONS;


!
! Assorted impure data.
!

OWN
	CLI_WORK_AREA	: BBLOCK [CLI$K_WORKAREA],
	TPARSE_BLOCK	: BBLOCK [TPA$K_LENGTH0]
			  INITIAL (TPA$K_COUNT0, TPA$M_BLANKS OR TPA$M_ABBREV),
	PROT_VAL,
	UIC;

!+
!
! Request descriptors to the CLI parser. Labels are deemed sufficiently
! obvious to make cluttering the code with comments unnecessary.
!
!-

FORWARD ROUTINE
	PARSE_ERROR	: NOVALUE,
	DENSITY_ACT	: NOVALUE,
	STRUCTURE_ACT	: NOVALUE,
	OVERRIDE_ACT	: NOVALUE,
	VERIFIED_ACT	: NOVALUE,
	PROTECTION_ACT	: NOVALUE,
	FILE_PROT_ACT	: NOVALUE,
	RECORD_PROT_ACT	: NOVALUE,
	OWNER_UIC_ACT	: NOVALUE,
	MAXIMUM_ACT	: NOVALUE,
	INDEX_ACT	: NOVALUE,
	DATACHECK_ACT	: NOVALUE,
	CLUSTER_ACT	: NOVALUE,
	HEADERS_ACT	: NOVALUE,
	DIRECTORIES_ACT	: NOVALUE,
	USER_NAME_ACT	: NOVALUE,
	BADBLOCKS_ACT	: NOVALUE,
	EXTENSION_ACT	: NOVALUE,
	WINDOW_ACT	: NOVALUE,
	ACCESSED_ACT	: NOVALUE,
	DEVICE_ACT	: NOVALUE,
	LABEL_ACT	: NOVALUE,
	LABEL_QUAL_ACT	: NOVALUE;

$CLIQUALCODES (INIT,
	DENSITY,
	STRUCTURE,
	SHARE,
	GROUP,
	SYSTEM,
	EBCDIC,
	VERIFIED,
	PROTECTION,
	FILE_PROT,
	RECORD_PROT,
	OWNER_UIC,
	MAXIMUM,
	INDEX,
	DATACHECK,
	CLUSTER,
	HEADERS,
	BADBLOCKS,
	DIRECTORIES,
	USER_NAME,
	EXTENSION,
	WINDOW,
	ACCESSED,
	OVERRIDE,
	LABEL_QUAL
	);

! CLI request and qualifier descriptor blocks. Note that the ordering of
! the qualifier descriptors is critical because of interrelated bit list
! processing. Note also that correct operation of this parser is critically
! dependent on the advertised order of CLI processing: first establish the
! state of all qualifiers, using explicit and default data, then setting and
! clearing the bit set and clear lists, then testing the bit test lists, and
! finally calling all of the action routines. Within each step, the qualifiers
! are processed in the order listed.
!

OWN
	START_PARSE	: $CLIREQDESC (RQTYPE = INITPRS,
				RQFLGS = ABSADR,
				ERRACT = PARSE_ERROR
			),
	END_PARAM1	: $CLIREQDESC (RQTYPE = ENDPRM1,
				RQFLGS = ABSADR,
				ERRACT = PARSE_ERROR
			),
	END_PARAM2	: $CLIREQDESC (RQTYPE = ENDPRM2,
				RQFLGS = ABSADR,
				ERRACT = PARSE_ERROR
			),

	DENSITY_Q	: $CLIQUALDESC (
				QDCODE = DENSITY,
				SETLST = OPT_DENSITY,
				TRUACT = DENSITY_ACT
			),
	STRUCTURE_Q	: $CLIQUALDESC (
				QDCODE = STRUCTURE,
				TRUACT = STRUCTURE_ACT
			),
	SHARE_Q		: $CLIQUALDESC (
				QDCODE = SHARE,
				SETLST = OPT_SHARE
			),
	GROUP_Q		: $CLIQUALDESC (
				QDCODE = GROUP,
				SETLST = OPT_GROUP
			),
	SYSTEM_Q	: $CLIQUALDESC (
				QDCODE = SYSTEM,
				SETLST = OPT_SYSTEM,
				TSTLST = OPT_GROUP
			),
	OVERRIDE_Q	: $CLIQUALDESC (
				QDCODE = OVERRIDE,
				TRUACT = OVERRIDE_ACT
			),
	EBCDIC_Q	: $CLIQUALDESC (
				QDCODE = EBCDIC,
				SETLST = OPT_EBCDIC
			),
	VERIFIED_Q	: $CLIQUALDESC (
				QDCODE = VERIFIED,
				SETLST = OPT_VERIFIED,
				TRUACT = VERIFIED_ACT,
				FLSACT = VERIFIED_ACT
			),
	PROTECTION_Q	: $CLIQUALDESC (
				QDCODE = PROTECTION,
				SETLST = OPT_PROTECTION,
				TRUACT = PROTECTION_ACT
			),
	FILE_PROT_Q	: $CLIQUALDESC (
				QDCODE = FILE_PROT,
				SETLST = OPT_FILE_PROT,
				TRUACT = FILE_PROT_ACT
			),
	RECORD_PROT_Q	: $CLIQUALDESC (
				QDCODE = RECORD_PROT,
				SETLST = OPT_RECORD_PROT,
				TRUACT = RECORD_PROT_ACT
			),
	OWNER_UIC_Q	: $CLIQUALDESC (
				QDCODE = OWNER_UIC,
				SETLST = OPT_OWNER_UIC,
				TRUACT = OWNER_UIC_ACT
			),
	USER_NAME_Q	: $CLIQUALDESC (
				QDCODE = USER_NAME,
				SETLST = OPT_USER_NAME,
				TRUACT = USER_NAME_ACT
			),
	INDEX_Q		: $CLIQUALDESC (
				QDCODE = INDEX,
				TRUACT = INDEX_ACT
			),
	DATACHECK_Q	: $CLIQUALDESC (
				QDCODE = DATACHECK,
				TRUACT = DATACHECK_ACT
			),
	DIRECTORIES_Q	: $CLIQUALDESC (
				QDCODE = DIRECTORIES,
				SETLST = OPT_DIRECTORIES,
				TRUACT = DIRECTORIES_ACT
			),
	MAXIMUM_Q	: $CLIQUALDESC (
				QDCODE = MAXIMUM,
				SETLST = OPT_MAXIMUM,
				TRUACT = MAXIMUM_ACT
			),
	CLUSTER_Q	: $CLIQUALDESC (
				QDCODE = CLUSTER,
				SETLST = OPT_CLUSTER,
				TRUACT = CLUSTER_ACT
			),
	HEADERS_Q	: $CLIQUALDESC (
				QDCODE = HEADERS,
				SETLST = OPT_HEADERS,
				TRUACT = HEADERS_ACT
			),
	BADBLOCKS_Q	: $CLIQUALDESC (
				QDCODE = BADBLOCKS,
				SETLST = OPT_BADBLOCKS,
				TRUACT = BADBLOCKS_ACT
			),
	EXTENSION_Q	: $CLIQUALDESC (
				QDCODE = EXTENSION,
				SETLST = OPT_EXTENSION,
				TRUACT = EXTENSION_ACT
			),
	WINDOW_Q	: $CLIQUALDESC (
				QDCODE = WINDOW,
				SETLST = OPT_WINDOW,
				TRUACT = WINDOW_ACT
			),
	ACCESSED_Q	: $CLIQUALDESC (
				QDCODE = ACCESSED,
				SETLST = OPT_ACCESSED,
				TRUACT = ACCESSED_ACT
			),
	LABEL_QUAL_Q	: $CLIQUALDESC (
				QDCODE = LABEL_QUAL,
				SETLST = OPT_LABEL_QUAL,
				TRUACT = LABEL_QUAL_ACT
			),
	QUAL_END	: $CLIQUALEND,


	GET_QUAL	: $CLIREQDESC (RQTYPE = GETQUAL,
				RQFLGS = ABSADR,
				QUALST = DENSITY_Q,
				ERRACT = PARSE_ERROR
			),
	GET_DEVICE	: $CLIREQDESC (RQTYPE = INPUT1,
				RQFLGS = (ABSADR, PARMREQ),
				BITNUM = OPT_DEVICE,
				PRSACT = DEVICE_ACT,
				ERRACT = PARSE_ERROR
			),
	GET_LABEL	: $CLIREQDESC (RQTYPE = INPUT2,
				RQFLGS = (ABSADR, PARMREQ),
				BITNUM = OPT_LABEL,
				PRSACT = LABEL_ACT,
				ERRACT = PARSE_ERROR
			),
	CONVERT_NUMBER	: $CLIREQDESC (RQTYPE = NUMERVAL,
				RQFLGS = (ABSADR, LASTVAL),
				ERRACT = PARSE_ERROR
			);

GLOBAL ROUTINE INIT_PARSE (CLI_CALLBACK) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses the INIT command line by calling the CLI
!	result parse routines, and leaves the results in the global data
!	area.
!
!
! CALLING SEQUENCE:
!	INIT_PARSE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of CLI service routine
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	parser impure area on preceding pages
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN


! Initialize result parsing.
!

INIT_OPTIONS = INIT_OPTIONS+4 = 0;

(.CLI_CALLBACK) (START_PARSE, CLI_WORK_AREA);

! Parse command qualifiers. (Most of the action routines are called during
! this call.)
!

(.CLI_CALLBACK) (GET_QUAL, CLI_WORK_AREA, INIT_OPTIONS);

! Now acquire device name.
!

(.CLI_CALLBACK) (GET_DEVICE, CLI_WORK_AREA, INIT_OPTIONS);

(.CLI_CALLBACK) (END_PARAM1, CLI_WORK_AREA);

! Now acquire volume name.
!

(.CLI_CALLBACK) (GET_LABEL, CLI_WORK_AREA, INIT_OPTIONS);

(.CLI_CALLBACK) (END_PARAM2, CLI_WORK_AREA);

! Do post parsing fixups.
!

!
! Note when options that are defaulted true but are illegal for MT are 
! explicit seen.
!
IF .VERIFIED_Q[CLI$V_QUALEXP]
OR (.INIT_OPTIONS[OPT_SHARE] AND .SHARE_Q[CLI$V_QUALEXP] )
THEN INIT_OPTIONS[OPT_EXPNOTMT] = 1;


END;					! end of routine INIT_PARSE

!+
!
! Parameter and qualifier action routines. Each routine is named corresponding
! to its associated parameter of qualifier. Each routine does whatever
! conversion is necessary and stores the parameter or qualifier value in
! the appropriate location in the output area.
!
!-


!
! CLI error action routine. This routine is called on all CLI errors.
! It simply signalls the error back to main level.
!
ROUTINE PARSE_ERROR (REQ_DESC, ERROR_CODE) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

SIGNAL_STOP (.ERROR_CODE);

END;					! end of routine PARSE_ERROR

!
! Get device name
!
ROUTINE DEVICE_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

! Store the device name descriptor.
!

DEVICE_STRING[0] = .REQ_DESC[CLI$W_RQSIZE];
DEVICE_STRING[1] = .REQ_DESC[CLI$A_RQADDR];

END;					! end of routine DEVICE_ACT

!
! Get volume label
!
ROUTINE LABEL_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

! Store the descriptor for the volume label.
!

LABEL_STRING[0] = .REQ_DESC[CLI$W_RQSIZE];
LABEL_STRING[1] = .REQ_DESC[CLI$A_RQADDR];

END;					! end of routine LABEL_ACT

!
! Get volume user name
!
ROUTINE USER_NAME_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

! Store the descriptor for the volume USER_NAME.
!

USER_NAME[0] = .REQ_DESC[CLI$W_QDVALSIZ];
USER_NAME[1] = .REQ_DESC[CLI$A_QDVALADR];

END;					! end of routine USER_NAME_ACT

!
! Set magtape density
!
ROUTINE DENSITY_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	DENSITY_STB	: VECTOR [0],	! state table address
	DENSITY_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the density string (setting the DENS_1600 bit if so).
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, DENSITY_STB, DENSITY_KTB)
THEN ERR_EXIT (INIT$_BADDENS);

END;					! end of routine DENSITY_ACT

!
! Specify disk structure level
!
ROUTINE STRUCTURE_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	STRUCTURE_STB	: VECTOR [0],	! state table address
	STRUCTURE_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the STRUCTURE string (setting the level 1 bit if so).
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, STRUCTURE_STB, STRUCTURE_KTB)
THEN ERR_EXIT (INIT$_BADSTRUCT);

END;					! end of routine STRUCTURE_ACT

ROUTINE MAXIMUM_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
MAXIMUM = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine MAXIMUM_ACT

ROUTINE CLUSTER_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
CLUSTER = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine CLUSTER_ACT

ROUTINE HEADERS_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
HEADERS = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine HEADERS_ACT

ROUTINE EXTENSION_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
EXTENSION = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine EXTENSION_ACT

ROUTINE WINDOW_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
WINDOW = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine WINDOW_ACT

ROUTINE ACCESSED_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
ACCESSED = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine ACCESSED_ACT

ROUTINE DIRECTORIES_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

LOCAL
	STATUS;

! Convert the value string to its numerical value.
!

STATUS = (.CLI_CALLBACK) (CONVERT_NUMBER, CLI_WORK_AREA, .REQ_DESC);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);
DIRECTORIES = .CONVERT_NUMBER[CLI$L_RQVALU];

END;					! end of routine DIRECTORIES_ACT

ROUTINE OVERRIDE_ACT ( REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	OVERRIDE_STB	: VECTOR [0],	! STATE TABLE ADDRESS
	OVERRIDE_KTB	: VECTOR [0];	! KEYWORD TABLE ADDRESS

EXTERNAL ROUTINE
	LIB$TPARSE;			

! PARSE THE OVERRIDE STRING AND SET FLAGS
TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE(TPARSE_BLOCK,OVERRIDE_STB,OVERRIDE_KTB)
THEN ERR_EXIT(INIT$_BADOVR);

END;					!END OF ROUTINE OVERRIDE_ACT

ROUTINE VERIFIED_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

! Set the explicit verify flag according to the state in the qual descriptor
! block.
!

INIT_OPTIONS[OPT_EXP_VER] = .REQ_DESC[CLI$V_QUALEXP];

END;					! end of routine VERIFIED_ACT

ROUTINE PROTECTION_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	PROTECTION_STB	: VECTOR [0],	! state table address
	PROTECTION_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the switch value string (storing the binary protection).
! Complement thereafter, since the parser produces the complement.
!

PROT_VAL = 0;
TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, PROTECTION_STB, PROTECTION_KTB)
THEN ERR_EXIT (INIT$_BADPRO);

PROTECTION = NOT .PROT_VAL;

END;					! end of routine PROTECTION_ACT

ROUTINE FILE_PROT_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	PROTECTION_STB	: VECTOR [0],	! state table address
	PROTECTION_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the switch value string (storing the binary protection).
! Complement thereafter, since the parser produces the complement.
!

PROT_VAL = 0;
TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, PROTECTION_STB, PROTECTION_KTB)
THEN ERR_EXIT (INIT$_BADPRO);

FILE_PROT = NOT .PROT_VAL;

END;					! end of routine FILE_PROT_ACT

ROUTINE RECORD_PROT_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	PROTECTION_STB	: VECTOR [0],	! state table address
	PROTECTION_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the switch value string (storing the binary protection).
! Complement thereafter, since the parser produces the complement.
!

PROT_VAL = 0;
TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, PROTECTION_STB, PROTECTION_KTB)
THEN ERR_EXIT (INIT$_BADPRO);

RECORD_PROT = NOT .PROT_VAL;

END;					! end of routine RECORD_PROT_ACT

ROUTINE OWNER_UIC_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	UIC_STB		: VECTOR [0],	! state table address
	UIC_KTB		: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the UIC string and store it in the owner UIC longword.
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, UIC_STB, UIC_KTB)
THEN ERR_EXIT (INIT$_BADUIC);
OWNER_UIC = .UIC;

END;					! end of routine OWNER_UIC_ACT

ROUTINE INDEX_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	INDEX_STB	: VECTOR [0],	! state table address
	INDEX_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the INDEX options string.
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, INDEX_STB, INDEX_KTB)
THEN ERR_EXIT (INIT$_BADINDEX);

END;					! end of routine INDEX_ACT

ROUTINE DATACHECK_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	DATACHECK_STB	: VECTOR [0],	! state table address
	DATACHECK_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the DATACHECK options string.
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, DATACHECK_STB, DATACHECK_KTB)
THEN ERR_EXIT (INIT$_BADDATCHK);

END;					! end of routine DATACHECK_ACT

ROUTINE BADBLOCKS_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	BADBLOCKS_STB	: VECTOR [0],	! state table address
	BADBLOCKS_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the BADBLOCKS options string.
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, BADBLOCKS_STB, BADBLOCKS_KTB)
THEN ERR_EXIT (INIT$_BADBLOCKS);

END;					! end of routine BADBLOCKS_ACT

ROUTINE LABEL_QUAL_ACT (REQ_DESC, CLI_CALLBACK) : NOVALUE =
BEGIN

MAP
	REQ_DESC	: REF BBLOCK;

EXTERNAL
	LABEL_QUAL_STB	: VECTOR [0],	! state table address
	LABEL_QUAL_KTB	: VECTOR [0];	! keyword table address

EXTERNAL ROUTINE
	LIB$TPARSE;

! Parse the LABEL options string.
!

TPARSE_BLOCK[TPA$L_STRINGCNT] = .REQ_DESC[CLI$W_QDVALSIZ];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .REQ_DESC[CLI$A_QDVALADR];
IF NOT LIB$TPARSE (TPARSE_BLOCK, LABEL_QUAL_STB, LABEL_QUAL_KTB)
THEN ERR_EXIT (INIT$_BADLABELQ);

END;					! end of routine LABEL_QUAL_ACT

!+
!
! TPARSE action routines for the following TPARSE tables.
!
!-

!
! Store UIC group number
!
ROUTINE GET_UIC_GROUP =
BEGIN

TPARSE_ARGS (CONTEXT);

UIC<16,16> = .CONTEXT[TPA$L_NUMBER];
RETURN 1;

END;					! end of routine GET_UIC_GROUP

!
! Store UIC member number
!
ROUTINE GET_UIC_MEMBER =
BEGIN

TPARSE_ARGS (CONTEXT);

UIC<0,16> = .CONTEXT[TPA$L_NUMBER];
RETURN 1;

END;					! end of routine GET_UIC_MEMBER

!
! Store index file LBN
!
ROUTINE GET_INDEX_LBN =
BEGIN

TPARSE_ARGS (CONTEXT);

INDEX = .CONTEXT[TPA$L_NUMBER];
RETURN 1;

END;					! end of routine GET_INDEX_LBN

!
! Store bad block LBN or sector number.
!
ROUTINE GET_BAD_LBN =
BEGIN

TPARSE_ARGS (CONTEXT);

IF .BADBLOCK_COUNT GEQ BAD_TABLE_LEN
THEN ERR_EXIT (INIT$_MAXBAD);
BADBLOCK_TABLE[.BADBLOCK_COUNT, BAD_LBN] = .CONTEXT[TPA$L_NUMBER];
BADBLOCK_TABLE[.BADBLOCK_COUNT, BAD_COUNT] = 1;
BADBLOCK_COUNT = .BADBLOCK_COUNT + 1;
RETURN 1;

END;					! end of routine GET_BAD_LBN

!
! Store bad block track number.
!
ROUTINE GET_BAD_TRACK =
BEGIN

TPARSE_ARGS (CONTEXT);

BADBLOCK_TABLE[.BADBLOCK_COUNT-1, BAD_TRACK] = .CONTEXT[TPA$L_NUMBER];
BADBLOCK_TABLE[.BADBLOCK_COUNT-1, BAD_STC_FORM] = 1;
RETURN 1;

END;					! end of routine GET_BAD_TRACK

!
! Store bad block cylinder number.
!
ROUTINE GET_BAD_CYL =
BEGIN

TPARSE_ARGS (CONTEXT);

BADBLOCK_TABLE[.BADBLOCK_COUNT-1, BAD_CYLINDER] = .CONTEXT[TPA$L_NUMBER];
RETURN 1;

END;					! end of routine GET_BAD_CYL

!
! Store bad block count.
!
ROUTINE GET_BAD_COUNT =
BEGIN

TPARSE_ARGS (CONTEXT);

BADBLOCK_TABLE[.BADBLOCK_COUNT-1, BAD_COUNT] = .CONTEXT[TPA$L_NUMBER];
IF .CONTEXT[TPA$L_NUMBER] EQL 0
THEN ERR_EXIT (INIT$_BADBLOCKS);
RETURN 1;

END;					! end of routine GET_BAD_COUNT

!
! Determine if ANSI VOL1 accessibility character is an ANSI 'a' character
!
ROUTINE GET_VOL_ACC =
BEGIN

TPARSE_ARGS (CONTEXT);

IF .CONTEXT[TPA$L_STRINGCNT] NEQ 0
THEN ERR_EXIT (INIT$_BADVOLACC);
VOL_ACC = .(.CONTEXT[TPA$L_TOKENPTR]);
SELECTONE .VOL_ACC OF
    SET
    ['A' TO 'Z'] :;
    [' ' TO '"'] :;
    ['%' TO '?'] :;
    ['a' TO 'z'] : VOL_ACC = .VOL_ACC - ( 'a' - 'A' );	! uppercase
    [OTHERWISE]  : ERR_EXIT (INIT$_BADVOLACC);
    TES;
RETURN 1;
END;

!+
!
! TPARSE state tables to parse the various qualifier value strings.
!
!-

!
! Parse magtape density (either "800", "1600", or "6250").
!  Also for floppy disks only (either "SINGLE" or "DOUBLE").
!
$INIT_STATE (DENSITY_STB, DENSITY_KTB);

$STATE	(,
	('6250',,, 1^(OPT_DENS_6250 - 32), INIT_OPTIONS + 4),
	('1600',,, 1^(OPT_DENS_1600 - 32), INIT_OPTIONS + 4),
	('800',,, 1^OPT_DENS_800, INIT_OPTIONS),
	('SINGLE',,, 1^(OPT_DENS_SING - 32), INIT_OPTIONS + 4),
	('DOUBLE',,, 1^(OPT_DENS_DOUB - 32), INIT_OPTIONS + 4)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);
!
! Parse disk structure level (either "1" or "2").
!
$INIT_STATE (STRUCTURE_STB, STRUCTURE_KTB);

$STATE	(,
	('1',,, 1^OPT_STRUCTURE1, INIT_OPTIONS),
	('2')
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);
!
! PARSE OVERRIDE QUALIFIERS (EXPIRATION)
!
$INIT_STATE(OVERRIDE_STB, OVERRIDE_KTB);

$STATE	(NEXTOVR,
	('EXPIRATION',,,1^OPT_OVR_EXP,INIT_OPTIONS),
	('ACCESSIBILITY',,,1^OPT_OVR_ACC,INIT_OPTIONS)
	);


$STATE	(,
	(',',NEXTOVR),
	(TPA$_EOS,TPA$_EXIT)
	);
!
! Parse protection string "(SYSTEM:RWED,OWNER:RWED,GROUP:RWED,WORLD:RWED)"
!
$INIT_STATE (PROTECTION_STB, PROTECTION_KTB);

$STATE	(NEXTPRO,
	('SYSTEM', SYPR,, %X'000F0000', PROT_VAL),
	('OWNER',  OWPR,, %X'00F00000', PROT_VAL),
	('GROUP',  GRPR,, %X'0F000000', PROT_VAL),
	('WORLD',  WOPR,, %X'F0000000', PROT_VAL)
	);

$STATE	(SYPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(SYPR0,
	('R', SYPR0,, %X'0001', PROT_VAL),
	('W', SYPR0,, %X'0002', PROT_VAL),
	('E', SYPR0,, %X'0004', PROT_VAL),
	('D', SYPR0,, %X'0008', PROT_VAL),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(OWPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(OWPR0,
	('R', OWPR0,, %X'0010', PROT_VAL),
	('W', OWPR0,, %X'0020', PROT_VAL),
	('E', OWPR0,, %X'0040', PROT_VAL),
	('D', OWPR0,, %X'0080', PROT_VAL),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(GRPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(GRPR0,
	('R', GRPR0,, %X'0100', PROT_VAL),
	('W', GRPR0,, %X'0200', PROT_VAL),
	('E', GRPR0,, %X'0400', PROT_VAL),
	('D', GRPR0,, %X'0800', PROT_VAL),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(WOPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(WOPR0,
	('R', WOPR0,, %X'1000', PROT_VAL),
	('W', WOPR0,, %X'2000', PROT_VAL),
	('E', WOPR0,, %X'4000', PROT_VAL),
	('D', WOPR0,, %X'8000', PROT_VAL),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(ENDPRO,
	(',', NEXTPRO),
	(TPA$_EOS, TPA$_EXIT)
	);

!
! Parse UIC string and store binary value.
!
$INIT_STATE (UIC_STB, UIC_KTB);

$STATE	(,
	('['),
	('<')
	);

$STATE	(,
	(TPA$_OCTAL,, GET_UIC_GROUP)
	);

$STATE	(,
	(',')
	);

$STATE	(,
	(TPA$_OCTAL,, GET_UIC_MEMBER)
	);

$STATE	(,
	(']'),
	('>')
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);

!
! Parse INDEX options (BEGINNING, MIDDLE, END, OR n)
!
$INIT_STATE (INDEX_STB, INDEX_KTB);

$STATE	(,
	('BEGINNING',,, 1^OPT_INDEX_BEG, INIT_OPTIONS),
	('MIDDLE',,, 1^OPT_INDEX_MID, INIT_OPTIONS),
	('END',,, 1^OPT_INDEX_END, INIT_OPTIONS),
	(TPA$_DECIMAL,, GET_INDEX_LBN, 1^OPT_INDEX_LBN, INIT_OPTIONS)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);
!
! Parse data check options, of the form [READ][,WRITE]. Default is write.
!
$INIT_STATE (DATACHECK_STB, DATACHECK_KTB);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT,, 1^OPT_WRITECHECK, INIT_OPTIONS),
	(TPA$_LAMBDA)
	);

$STATE	(CHECKOPT,
	('READ',,, 1^OPT_READCHECK, INIT_OPTIONS),
	('WRITE',,, 1^OPT_WRITECHECK, INIT_OPTIONS)
	);

$STATE	(,
	(',', CHECKOPT),
	(TPA$_EOS, TPA$_EXIT)
	);

!
! Parse bad block data, consisting of entries of the form LBN:count or
! sector.track.cylinder:count, separated by commas.
!
$INIT_STATE (BADBLOCKS_STB, BADBLOCKS_KTB);

$STATE	(NEXTBLK,
	(TPA$_DECIMAL,, GET_BAD_LBN)
	);

$STATE	(,
	('.', TRACK),
	(TPA$_LAMBDA)
	);

$STATE	(COLON,
	(':', BLKCNT),
	(TPA$_LAMBDA)
	);

$STATE	(BLKEND,
	(',', NEXTBLK),
	(TPA$_EOS, TPA$_EXIT)
	);

$STATE	(BLKCNT,
	(TPA$_DECIMAL, BLKEND, GET_BAD_COUNT)
	);

$STATE	(TRACK,
	(TPA$_DECIMAL,, GET_BAD_TRACK)
	);

$STATE	(,
	('.')
	);

$STATE	(,
	(TPA$_DECIMAL, COLON, GET_BAD_CYL)
	);

!
! Parse LABEL option currently only VOLUME_ACCESSIBILITY = "x"
!
$INIT_STATE (LABEL_QUAL_STB, LABEL_QUAL_KTB);

$STATE	(LABEL_QUAL,
	('VOLUME_ACCESSIBILITY',VOLUME)
	);

$STATE	(VOLUME,
	(':',VALUEVOLACC),
	('=',VALUEVOLACC)
	);

$STATE	(VALUEVOLACC,
	(TPA$_ANY,DONE,GET_VOL_ACC)
	);

$STATE	(DONE,
	(TPA$_EOS, TPA$_EXIT)
	);

END
ELUDOM
