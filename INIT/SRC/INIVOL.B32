MODULE INIVOL (
		MAIN = INIT_VOLUME,
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 2
!
! ABSTRACT:
!
!	This is the main program for the INITIALIZE volume utility.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  9-Nov-1977  18:17
!
! MODIFIED BY:
!
!	V0103	ACG0072		Andrew C. Goldstein,	15-Oct-1979  16:03
!		Check both primary and secondary device char
!
!	V0102	ACG0069		Andrew C. Goldstein,	9-Oct-1979  16:31
!		Remove device data table
!
!	V0101	ACG25501	Andrew C. Goldstein,	21-Aug-1979  11:34
!		Clear volume valid only if volume was not mounted
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:28
!	Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.REQ';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';


FORWARD ROUTINE
	INIT_VOLUME,			! main program
	MAIN_HANDLER;			! condition handler

!+
!
! General impure storage for the INIT utility.
!
!-

GLOBAL LITERAL
	NAMEBUF_LEN	= 32,		! length of device name buffer
	USERNAME_LEN	= 12;		! maximum length of user name string

GLOBAL
	CLEANUP_FLAGS	: BITVECTOR [32], ! cleanup action flags
	CHANNEL,			! channel for all I/O
	PROCESS_UIC,			! UIC of this process
	DEVICE_CHAR	: BBLOCK [DIB$K_LENGTH],
					! buffer for device characteristics
	DEVICE_CHAR2	: BBLOCK [DIB$K_LENGTH],
					! buffer for sec. device characteristics
	PHYS_NAME	: VECTOR [2],	! physical device name descriptor
	NAME_BUFFER	: VECTOR [NAMEBUF_LEN, BYTE],
					! buffer for physical device name
	USER_STRING	: VECTOR [USERNAME_LEN, BYTE];
					! buffer for user name string

GLOBAL
	DEVCHAR_DESC	: VECTOR [2] INITIAL (DIB$K_LENGTH, DEVICE_CHAR),
					! descriptor for device characteristics
	DEVCHAR_DESC2	: VECTOR [2] INITIAL (DIB$K_LENGTH, DEVICE_CHAR2);
					! descriptor for sec. device characteristics

GLOBAL ROUTINE INIT_VOLUME (START_ADDRESS, CLI_CALLBACK) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the main routine of the INITIALIZE volume utility.
!
!
! CALLING SEQUENCE:
!	INIT_VOLUME (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: program start address
!	ARG2: CLI service callback address
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	assorted status values
!
! SIDE EFFECTS:
!	volume initialized
!
!--

BEGIN

LOCAL
	P,				! string scan pointer
	STATUS,				! system service status
	DEVICE_NAME	: VECTOR [2];	! device name descriptor

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! parser option flags
	DEVICE_STRING	: VECTOR,	! device name string descriptor
	LABEL_STRING	: VECTOR,	! volume label string descriptor
	USER_NAME	: VECTOR;	! user name string descriptor

EXTERNAL ROUTINE
	INIT_PARSE,			! command parser
	TRAN_LOGNAME,			! translate logical name
	INIT_TAPE,			! initialize magtape
	INIT_DISK;			! initialize disk

BIND OPTIONS = INIT_OPTIONS : VECTOR;

ENABLE MAIN_HANDLER;

! Get the UIC of this process for use in defaulting volume ownership.
!

$GETJPI (ITMLST = UPLIT (WORD (4), WORD (JPI$_UIC),
			 LONG (PROCESS_UIC, 0, 0)));

USER_NAME[1] = USER_STRING;
$GETJPI (ITMLST = UPLIT (WORD (USERNAME_LEN), WORD (JPI$_USERNAME),
			 LONG (USER_STRING, USER_NAME[0], 0)));

! Parse the command line. Errors are signalled.
!

CHANNEL = 0;

INIT_PARSE (.CLI_CALLBACK);

! First allocate the volume and assign a channel to it. Allocating does most
! of the checking that we in fact have a right to touch this device.
! Note that we append a zero to the device name if a unit number is not
! present. This prevents a generic device search, which is not desirable
! in doing an INIT.
!

DEVICE_NAME[0] = NAMEBUF_LEN;
DEVICE_NAME[1] = NAME_BUFFER;
TRAN_LOGNAME (DEVICE_STRING[0], DEVICE_NAME[0]);

P = CH$FIND_CH (.DEVICE_NAME[0], .DEVICE_NAME[1], ':');
IF CH$FAIL (.P)
THEN P = .DEVICE_NAME[0] + .DEVICE_NAME[1];
IF CH$RCHAR (.P-1) LSSU '0' OR CH$RCHAR (.P-1) GTRU '9'
THEN
    BEGIN
    CH$WCHAR_A ('0', P);
    CH$WCHAR_A (':', P);
    DEVICE_NAME[0] = .DEVICE_NAME[0] + 1;
    END;

PHYS_NAME[0] = NAMEBUF_LEN;
PHYS_NAME[1] = NAME_BUFFER;
STATUS = $ALLOC (DEVNAM = DEVICE_NAME[0],
		 PHYLEN = PHYS_NAME[0],
		 PHYBUF = PHYS_NAME[0]);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);

STATUS = $ASSIGN (DEVNAM = PHYS_NAME[0],
		  CHAN   = CHANNEL);
IF NOT .STATUS THEN ERR_EXIT (.STATUS);

! Get the device characteristics and make sure that the device can be
! initialized - i.e., that it is file oriented, etc. A mismatch between
! primary and secondary device characteristics indicates a spooled device
! or something else strange - reject it of so.
!

$GETCHN (CHAN = .CHANNEL, PRIBUF = DEVCHAR_DESC, SCDBUF = DEVCHAR_DESC2);

IF CH$NEQ (DIB$K_LENGTH, DEVICE_CHAR, DIB$K_LENGTH, DEVICE_CHAR2, 0)
OR NOT .DEVICE_CHAR[DEV$V_FOD]
THEN ERR_EXIT (SS$_NOTFILEDEV);

IF NOT .DEVICE_CHAR[DEV$V_AVL]
THEN ERR_EXIT (SS$_DEVOFFLINE);

IF .DEVICE_CHAR[DEV$V_MNT]
THEN ERR_EXIT (SS$_DEVMOUNT);

! Device is now known not to be mounted.
!

CLEANUP_FLAGS[CLF_CLEARVALID] = 1;

IF
    BEGIN
    IF .DEVICE_CHAR[DEV$V_SQD]
    THEN
	((.OPTIONS[0] AND NOT TAPE_OPTIONS) NEQ 0
	OR (.OPTIONS[1] AND NOT TAPE_OPTIONS2) NEQ 0 )
    ELSE
	((.OPTIONS[0] AND NOT DISK_OPTIONS) NEQ 0
	OR (.OPTIONS[1] AND NOT DISK_OPTIONS2) NEQ 0 )
    END
THEN ERR_EXIT (INIT$_ILLOPT);

! Now initialize the volume, depending on its type.
!

IF .DEVICE_CHAR[DEV$V_SQD]
THEN
    INIT_TAPE ()
ELSE
    INIT_DISK ();

$DASSGN (CHAN = .CHANNEL);
$DALLOC (DEVNAM = PHYS_NAME);

RETURN 1;

END;					! end of routine INIT_VOLUME

ROUTINE MAIN_HANDLER (SIGNAL, MECHANISM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main level condition handler for the INIT
!	utility. It cleans up and returns the error status to the caller
!	(the CLI).
!
!
! CALLING SEQUENCE:
!	MAIN_HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!	cleanup done on unwind
!
!--

BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal array
	MECHANISM	: REF BBLOCK;	! mechanism array

EXTERNAL ROUTINE
	CLEAR_VALID;			! clear software volume valid



IF .BBLOCK [SIGNAL[CHF$L_SIG_NAME], STS$V_FAC_NO] EQL 0
OR .BBLOCK [SIGNAL[CHF$L_SIG_NAME], STS$V_FAC_NO] EQL MOUN$_FACILITY
THEN BBLOCK [SIGNAL[CHF$L_SIG_NAME], STS$V_FAC_NO] = INIT$_FACILITY;

IF .BBLOCK [SIGNAL[CHF$L_SIG_NAME], STS$V_SEVERITY] EQL STS$K_SEVERE
THEN
    BEGIN

    IF .CHANNEL NEQ 0
    THEN
	BEGIN
	IF .CLEANUP_FLAGS[CLF_CLEARVALID]
	THEN KERNEL_CALL (CLEAR_VALID);
	$DASSGN (CHAN = .CHANNEL);
	CHANNEL = 0;
	END;

    $DALLOC (DEVNAM = PHYS_NAME);

    END;

RETURN SS$_RESIGNAL;

END;					! end of routine MAIN_HANDLER

END
ELUDOM
