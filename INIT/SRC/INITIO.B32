MODULE INITIO (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	These routines do basic disk I/O.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Nov-1977  19:42
!
! REVISION HISTORY:
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';


FORWARD ROUTINE
	READ_PHYSICAL,			! read block by physical address
	READ_BLOCK,			! read block by LBN
	WRITE_BLOCK	: NOVALUE;	! write block by LBN

GLOBAL ROUTINE READ_PHYSICAL (PBN, BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads a disk block by physical block number.
!
!
! CALLING SEQUENCE:
!	READ_PHYSICAL (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: physical block number
!	ARG2: buffer address
!
! IMPLICIT INPUTS:
!	CHANNEL: channel number assigned to disk
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	status of read
!
! SIDE EFFECTS:
!	block read into buffer
!
!--

BEGIN

LOCAL
	STATUS,				! system service status
	IO_STATUS	: VECTOR [4, WORD]; ! I/O status block

EXTERNAL
	CHANNEL;			! I/O channel number


STATUS = $QIOW (CHAN = .CHANNEL,
		FUNC = IO$_READPBLK,
		IOSB = IO_STATUS[0],
		P1   = .BUFFER,
		P2   = 512,
		P3   = .PBN
		);
IF .STATUS THEN STATUS = .IO_STATUS[0];
RETURN .STATUS;

END;					! end of routine READ_PHYSICAL

GLOBAL ROUTINE READ_BLOCK (LBN, BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads a disk block by logical block number.
!
!
! CALLING SEQUENCE:
!	READ_BLOCK (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: logical block number
!	ARG2: buffer address
!
! IMPLICIT INPUTS:
!	CHANNEL: channel number assigned to disk
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	status of read
!
! SIDE EFFECTS:
!	block read into buffer
!
!--

BEGIN

LOCAL
	STATUS,				! system service status
	IO_STATUS	: VECTOR [4, WORD]; ! I/O status block

EXTERNAL
	CHANNEL;			! I/O channel number


STATUS = $QIOW (CHAN = .CHANNEL,
		FUNC = IO$_READLBLK,
		IOSB = IO_STATUS[0],
		P1   = .BUFFER,
		P2   = 512,
		P3   = .LBN
		);
IF .STATUS THEN STATUS = .IO_STATUS[0];
RETURN .STATUS;

END;					! end of routine READ_BLOCK

GLOBAL ROUTINE WRITE_BLOCK (LBN, BUFFER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes a disk block by logical block number.
!
!
! CALLING SEQUENCE:
!	WRITE_BLOCK (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: logical block number
!	ARG2: buffer address
!
! IMPLICIT INPUTS:
!	CHANNEL: channel number assigned to disk
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	status of write
!
! SIDE EFFECTS:
!	block written from buffer
!
!--

BEGIN

LOCAL
	STATUS,				! system service status
	IO_STATUS	: VECTOR [4, WORD]; ! I/O status block

EXTERNAL
	CHANNEL;			! I/O channel number


STATUS = $QIOW (CHAN = .CHANNEL,
		FUNC = IO$_WRITELBLK OR IO$M_DATACHECK,
		IOSB = IO_STATUS[0],
		P1   = .BUFFER,
		P2   = 512,
		P3   = .LBN
		);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS
THEN ERR_EXIT (.STATUS);

END;					! end of routine WRITE_BLOCK

END
ELUDOM
