MODULE INIALL (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This module contains the routines that allocate the pieces of the
!	file structure on the disk.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  12-Nov-1977  20:02
!
! MODIFIED BY:
!
!	V02-004	ACG0191		Andrew C. Goldstein,	18-Feb-1981  19:49
!		Fix index file allocation at end of volume
!
!	V0102	ACG0152		Andrew C. Goldstein,	29-Feb-1980  17:01
!		Fix home block delta to correct blocking factor
!
!	V0101	ACG0069		Andrew C. Goldstein,	9-Oct-1979  16:37
!		Remove device data table
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:27
!	Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';


FORWARD ROUTINE
	INIT_ALLOCATE	: NOVALUE,	! main allocation routine
	ALLOCATE	: NOVALUE,	! general allocation scan
	ALLOCATE_HOME	: NOVALUE,	! allocate on home block sequence
	CHECK_ALLOC;			! verify a candidate allocation



!+
!
! Module own storage
!
!-

OWN
	HOMEBLOCK_DELTA;		! home block search increment on this volume

GLOBAL ROUTINE INIT_ALLOCATE : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the main allocation routine. It determines the size and
!	location of each portion of the file structure. Each allocation is
!	done by choosing a candidate location for the section and checking
!	for conflicts. If a conflict exists, a new candidate location is
!	chosen according an algorithm specific to the section being allocated.
!
!
! CALLING SEQUENCE:
!	INIT_ALLOCATE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	parser database
!	allocation table in INIDSK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	allocation table modified
!
!--

BEGIN

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	CLUSTER,			! volume cluster factor
	INDEX,				! requested LBN of initial index file
	HEADERS,			! initial number of file headers
	MAXIMUM,			! maximum number of files
	DIRECTORIES,			! number of MFD entries to allocate
	VOLUME_SIZE,			! size of volume rounded to next cluster
	DEVICE_CHAR	: BBLOCK,	! device charactreistics buffer
	BOOTBLOCK_CNT,			! block count of boot block cluster
	BOOTBLOCK_LBN,			! LBN of boot block cluster
	HOMEBLOCK1_CNT,			! block count of home block 1 cluster
	HOMEBLOCK1_LBN,			! LBN of home block 1 cluster
	HOMEBLOCK2_CNT,			! block count of home block 2 cluster
	HOMEBLOCK2_LBN,			! LBN of home block 2 cluster
	IDXFILE_CNT,			! block count of initial index file
	IDXFILE_LBN,			! LBN of initial index file
	IDXHDR2_CNT,			! block count of 2nd index header cluster
	IDXHDR2_LBN,			! LBN of 2nd index header cluster
	BITMAP_CNT,			! block count of storage bitmap
	BITMAP_LBN,			! LBN of storage bitmap
	MFD_CNT,			! block count of MFD
	MFD_LBN,			! LBN of MFD
	VOLEND_CNT,			! volume end allocation table entry - count
	VOLEND_LBN;			! volume end allocation table entry - LBN

EXTERNAL LITERAL
	BOOTBLOCK_IDX	: UNSIGNED (6),	! table index of boot block cluster
	HOMEBLOCK1_IDX	: UNSIGNED (6),	! table index of home block 1 cluster
	HOMEBLOCK2_IDX	: UNSIGNED (6),	! table index of home block 2 cluster
	IDXFILE_IDX	: UNSIGNED (6),	! table index of initial index file
	IDXHDR2_IDX	: UNSIGNED (6),	! table index of 2nd index header cluster
	BITMAP_IDX	: UNSIGNED (6),	! table index of storage bitmap
	MFD_IDX		: UNSIGNED (6);	! table index of MFD


! First make up an allocation pointer to represent the space from the end
! of the volume to the next 4096 cluster boundary (being the end of the
! storage map block).
!

VOLEND_CNT = (4096 - (.DEVICE_CHAR[DIB$L_MAXBLOCK] / .CLUSTER) MOD 4096) * .CLUSTER;
VOLEND_LBN = .DEVICE_CHAR[DIB$L_MAXBLOCK] / .CLUSTER * .CLUSTER;

! Allocate the boot block to the first available cluster (usually 0).
!

BOOTBLOCK_CNT = 1;
ALLOCATE (BOOTBLOCK_IDX, 0);

IF .BOOTBLOCK_LBN NEQ 0
THEN ERR_MESSAGE (INIT$_BLKZERO);

! Next allocate the primary and secondary home blocks. If the boot block is
! on LBN 0 and the cluster factor is greater than 1, then the primary home
! block cluster is a dummy since the real home block is LBN 1.
!

HOMEBLOCK1_CNT = 1;

IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN
    ALLOCATE_HOME (HOMEBLOCK1_IDX)
ELSE
    BEGIN
    IF .BOOTBLOCK_LBN EQL 0 AND .CLUSTER GTR 1
    THEN
	ALLOCATE (HOMEBLOCK1_IDX, 0)
    ELSE
	ALLOCATE_HOME (HOMEBLOCK1_IDX);

    HOMEBLOCK2_CNT = 1;
    ALLOCATE_HOME (HOMEBLOCK2_IDX);
    END;

! Now allocate the MFD, storage map, initial index file, and alternate
! index file header, in that order. This results in optimal locality of
! the most frequently referenced portions of the file structure. Note that
! if the index file is being placed at the end of the volume they are
! allocated in reverse to achieve the same effect.
!

MFD_LBN = .INDEX;
BITMAP_LBN = .INDEX;
IDXFILE_LBN = .INDEX;

IF NOT .INIT_OPTIONS[OPT_INDEX_END]
THEN
    BEGIN
    MFD_CNT = .DIRECTORIES/16 + 1;
    ALLOCATE (MFD_IDX, 0);
    BITMAP_CNT = ((.VOLUME_SIZE/.CLUSTER + 4095) / 4096) + 1;
    ALLOCATE (BITMAP_IDX, 0);
    IDXFILE_CNT = .HEADERS + (.MAXIMUM+4095)/4096;
    ALLOCATE (IDXFILE_IDX, 0);
    END
ELSE
    BEGIN
    IDXFILE_CNT = .HEADERS + (.MAXIMUM+4095)/4096;
    ALLOCATE (IDXFILE_IDX, 1);
    BITMAP_CNT = ((.VOLUME_SIZE/.CLUSTER + 4095) / 4096) + 1;
    ALLOCATE (BITMAP_IDX, 1);
    MFD_CNT = .DIRECTORIES/16 + 1;
    ALLOCATE (MFD_IDX, 1);
    END;

IF NOT .INIT_OPTIONS[OPT_STRUCTURE1]
THEN
    BEGIN
    IDXHDR2_CNT = 1;
    IDXHDR2_LBN = .IDXFILE_LBN + .HOMEBLOCK_DELTA;
    IF .INIT_OPTIONS[OPT_INDEX_END]
    THEN
	BEGIN
	IDXHDR2_LBN = .IDXFILE_LBN - .HOMEBLOCK_DELTA;
	ALLOCATE (IDXHDR2_IDX, 1);
	END
    ELSE
	ALLOCATE (IDXHDR2_IDX, 0);
    END;

END;					! end of routine INIT_ALLOCATE

ROUTINE ALLOCATE (INDEX, REVERSE) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates the given table entry in the first available
!	position after the given start, searching in the given direction.
!
!
! CALLING SEQUENCE:
!	ALLOCATE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: allocation table index of entry to allocate
!	ARG2: direction: 0 = forward
!			 1 = reverse
!
! IMPLICIT INPUTS:
!	allocation table
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	entry in allocation table
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	CONFLICT;			! index of conflicting table entry

EXTERNAL
	CLUSTER,			! volume cluster factor
	VOLUME_SIZE,			! size of volume rounded to next cluster
	ALLOC_TABLE_CNT	: VECTOR,	! allocation count table
	ALLOC_TABLE_LBN	: VECTOR;	! allocation LBN table


! Round the starting LBN and count down and up, respectively, to cluster boundaries.
! Iterate, checking the proposed location of the entry against the rest of
! the allocation table. When we encounter a conflict, adjust the location
! past the conflicting entry and try again.
!

ALLOC_TABLE_LBN[.INDEX] = .ALLOC_TABLE_LBN[.INDEX] / .CLUSTER * .CLUSTER;
ALLOC_TABLE_CNT[.INDEX] = (.ALLOC_TABLE_CNT[.INDEX] + .CLUSTER - 1) / .CLUSTER * .CLUSTER;
WHILE 1 DO
    BEGIN

! The limit test works in the reverse direction since we will wrap through
! zero.
!

    IF .ALLOC_TABLE_LBN[.INDEX] GEQU .VOLUME_SIZE
    THEN ERR_EXIT (INIT$_ALLOCFAIL);

    CONFLICT = CHECK_ALLOC (.INDEX);
    IF .CONFLICT EQL -1 THEN RETURN;

    IF NOT .REVERSE
    THEN				! search in forward direction
	ALLOC_TABLE_LBN[.INDEX] = .ALLOC_TABLE_LBN[.CONFLICT]
				+ .ALLOC_TABLE_CNT[.CONFLICT]

    ELSE				! search in reverse direction
	ALLOC_TABLE_LBN[.INDEX] = .ALLOC_TABLE_LBN[.CONFLICT]
				- .ALLOC_TABLE_CNT[.INDEX];
    END;

END;					! end of routine ALLOCATE

ROUTINE ALLOCATE_HOME (INDEX) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates the indicated allocation table entry to
!	the first available block on the home block search sequence.
!
!
! CALLING SEQUENCE:
!	ALLOC_HOME (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: table index of home block cluster
!
! IMPLICIT INPUTS:
!	allocation table in INIDSK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	entry in table
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	DELTA,				! home block search delta
	BLOCKFACT,			! device blocking factor
	LBN;				! home block candidate LBN

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	CLUSTER,			! volume cluster factor
	VOLUME_SIZE,			! size of volume rounded to next cluster
	REAL_HOMEBLOCK,			! LBN of "official" home block
	ALLOC_TABLE_CNT	: VECTOR,	! allocation count table
	ALLOC_TABLE_LBN	: VECTOR;	! allocation LBN table


! Compute the home block search delta. For structure level 1, this is simply
! 256, except that the first slot is on LBN 1 rather than 0. For level 2,
! compute the home block search delta from the volume geometry in the
! device table. This is done according to the following rules, where volume
! geometry is expressed in the order sectors, tracks, cylinders:
!
!	n x 1 x 1:	1
!	1 x n x 1:	1
!	1 x 1 x n:	1
!
!	n x m x 1:	n+1
!	n x 1 x m:	n+1
!	1 x n x m:	n+1
!
!	s x t x c:	(t+1)*s+1
!

IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN
    DELTA = 256
ELSE
    BEGIN
    BLOCKFACT = (.DEVICE_CHAR[DIB$B_SECTORS]
	       * .DEVICE_CHAR[DIB$B_TRACKS]
	       * .DEVICE_CHAR[DIB$W_CYLINDERS])
	       / .DEVICE_CHAR[DIB$L_MAXBLOCK];

    DELTA = 1;
    IF  .DEVICE_CHAR[DIB$W_CYLINDERS] GTR 1
    AND .DEVICE_CHAR[DIB$B_TRACKS] GTR 1
    THEN DELTA = .DELTA + .DEVICE_CHAR[DIB$B_TRACKS];

    IF  .DEVICE_CHAR[DIB$B_SECTORS] GTR 1
    AND (.DEVICE_CHAR[DIB$W_CYLINDERS] GTR 1
	OR .DEVICE_CHAR[DIB$B_TRACKS] GTR 1)
    THEN DELTA = (.DELTA * .DEVICE_CHAR[DIB$B_SECTORS] + .BLOCKFACT) / .BLOCKFACT;

    IF .DELTA EQL 0
    OR .DELTA GTRU .DEVICE_CHAR[DIB$L_MAXBLOCK] / 10
    THEN DELTA = 1;
    END;

HOMEBLOCK_DELTA = .DELTA;

! Round the starting LBN and count down and up, respectively, to cluster boundaries.
! Now find the first available cluster on the search sequence by starting
! with LBN 1 and incrementing by the delta for each try.
!

LBN = 1;

ALLOC_TABLE_CNT[.INDEX] = (.ALLOC_TABLE_CNT[.INDEX] + .CLUSTER - 1) / .CLUSTER * .CLUSTER;
WHILE 1 DO
    BEGIN
    ALLOC_TABLE_LBN[.INDEX] = .LBN / .CLUSTER * .CLUSTER;
    IF CHECK_ALLOC (.INDEX) EQL -1 THEN EXITLOOP;
    IF .INIT_OPTIONS[OPT_STRUCTURE1]
    THEN LBN = .LBN AND NOT 1;
    LBN = .LBN + .DELTA;
    IF .LBN GEQU .VOLUME_SIZE
    THEN ERR_EXIT (INIT$_ALLOCFAIL);
    END;

REAL_HOMEBLOCK = .LBN;			! save LBN of actual block

END;					! end of routine ALLOCATE_HOME

ROUTINE CHECK_ALLOC (INDEX) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the indicated allocation table entry for
!	conflicts against all other table entries.
!
!
! CALLING SEQUENCE:
!	CHECK_ALLOC (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: index of table entry to check
!
! IMPLICIT INPUTS:
!	allocation table in INIDSK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	index of conflicting table entry
!	or -1 if no conflict
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

EXTERNAL
	ALLOC_TABLE_CNT	: VECTOR,	! allocation count table
	ALLOC_TABLE_LBN	: VECTOR;	! allocation LBN table

EXTERNAL LITERAL
	ALLOC_MAX	: UNSIGNED (16); ! total size of allocation table


! Simply scan the entire table, doing a range compare on each entry (noting
! not to compare the candidate against itself). Active table entries are
! identified by a non-zero count.
!

INCR J FROM 0 TO ALLOC_MAX DO
    BEGIN
    IF .ALLOC_TABLE_CNT[.J] NEQ 0
    AND .J NEQ .INDEX
    AND .ALLOC_TABLE_LBN[.J] + .ALLOC_TABLE_CNT[.J] GTRU .ALLOC_TABLE_LBN[.INDEX]
    AND .ALLOC_TABLE_LBN[.J] LSSU .ALLOC_TABLE_CNT[.INDEX] + .ALLOC_TABLE_LBN[.INDEX]
    THEN EXITLOOP .J;
    END

END;					! end of routine CHECK_ALLOC

END
ELUDOM
