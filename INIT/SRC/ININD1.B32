MODULE ININD1 (
		LANGUAGE (BLISS32),
		IDENT = 'V03-002'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This module contains the routines that initialize the contents
!	of a disk's index file for structure level 1: boot and home blocks,
!	bitmap, and the	initial file headers.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Nov-1977  10:16
!
! MODIFIED BY:
!
!	V03-002	LMP0021		L. Mark Pilant		 5-Apr-1982  15:48
!		Add support for ODS-1 structure version 2.
!
!	V02-004	LMP0001		L. Mark Pilant		 4-Nov-1981  16:35
!		Create a multi-header index file if the number of headers
!		to be created cannot be contained in a single header
!
!	V02-003	ACG0191		Andrew C. Goldstein,	25-Feb-1981  18:18
!		Fix size of file header fill
!
!	V02-002	ACG0185		Andrew C. Goldstein,	3-Feb-1981  21:02
!		Add serial number to home block
!
!	V0101	ACG0075		Andrew C. Goldstein,	22-Oct-1979  10:00
!		Remove obsolete characteristics bits
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:27
!	Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';


FORWARD ROUTINE
	INIT_INDEX1	: NOVALUE,	! main index file initialization
	MAKE_POINTER;			! construct retrieval pointer

!+
!
! Own storage.
!
! Boot program. The following PDP-11 program will type out the attached
! message when the volume is booted on a PDP-11, informing the user that
! this is not a system disk.
!
!-

BIND
	BOOT_PROGRAM	= UPLIT WORD (

%O'000240',		     !  BOOTBK:	NOP			; NOP IDENTIFIES BOOT BLOCK
%O'012706',  %O'001000',     !		MOV	#1000,SP	; SET TEMP STACK
%O'010700',		     !	 	MOV	PC,R0		; SET ADDRESS
%O'062700',  %O'000036',     !		ADD	#BOTMSG-.,R0	; OF MESSAGE
%O'112001',		     !  10$:	MOVB	(R0)+,R1	; GET NEXT CHARACTER
%O'001403',		     !	 	BEQ	20$		; END
%O'004767',  %O'000006',     !		CALL	TYPIT		; NO, PRINT IT
%O'000773',		     !	 	BR	10$		; LOOP FOR NEXT CHARACTER
%O'000005',		     !  20$:	RESET			;
%O'000000',		     !	 	HALT			; HALT
			     !
			     !
%O'110137',  %O'177566',     ! 	TYPIT:	MOVB	R1,@#TPB	; PRINT CHARACTER
%O'105737',  %O'177564',     ! 	10$:	TSTB	@#TPS		; DONE?
%O'100375',		     !	 	BPL	10$		; NO, WAIT
%O'000207'		     !		RETURN			;
			     !
			     !
			     !	BOTMSG:

			);

LITERAL
	BOOT_PROG_LEN	= 38;

!+
!
! Boot message. Contains the volume label.
!
!-

BIND
	BOOT_MESSAGE	= UPLIT BYTE (13, 10, 10,
			  '             is not a system disk', 13, 10, 10, 0);

LITERAL
	BOOT_MESG_LEN	= 40;

MACRO
	BTB$T_VOLNAME	= 38, 0, 0, 0%;	! volume label in boot block message

!
! Volume format name string
!

BIND
	FORMAT_NAME	= UPLIT BYTE ('DECFILE11A  ');

!+
!
! Initial file header. The core image file is used since it is the first
! one written.
!
!-

BIND
	INITIAL_HEADER	= UPLIT (
						! HEADER area
	BYTE (FH1$C_LENGTH / 2),		! ident area offset
	BYTE ((FH1$C_LENGTH + FI1$C_LENGTH)/2),	! map area offset
	WORD (5, 5),				! file ID
	BYTE (1, 1),				! structure version and level
	WORD (0),				! file owner UIC
	WORD (0),				! file protection
	WORD (0),				! file characteristics
	BYTE (0),				! record type
	BYTE (0),				! no record attributes
	WORD (0),				! record size
	LONG (0, 0),				! HIBLK and EFBLK
	WORD (0),				! EOF byte offset
	BYTE (0, 0),				! bucket size & VFC length
	WORD (0),				! maximum record length
	WORD (0),				! default extend size
	WORD (0, 0, 0, 0, 0, 0),		! unused record attributes

						! IDENT area
	WORD (%RAD50_11'CORIMG   SYS', 1),	! file name, type and version
	WORD (1),				! revision number
	BYTE (REP 34 OF (0)),			! dates

						! MAP area
	BYTE (0),				! file segment number
	BYTE (0),				! extension RVN
	WORD (0, 0),				! extension file ID
	BYTE (1, 3),				! map pointer count & LBN size
	BYTE (0),				! map words in use
	BYTE ((512-2-FH1$C_LENGTH-FI1$C_LENGTH-FM1$C_LENGTH)/2)
						! map words available

	);

GLOBAL ROUTINE INIT_INDEX1 : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the contents of the disk's index file.
!	It writes a dummy boot block, the home blocks, index file bitmap,
!	and the initial headers.
!
!
! CALLING SEQUENCE:
!	INIT_INDEX1 ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	parser data base
!	allocation table in INIDSK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	index file blocks written
!
!--

BEGIN

BUILTIN
	ROT;

LOCAL
	DATE_TIME	: VECTOR [13, BYTE], ! buffer for current date/time
	LBN,				! current LBN
	MAP_COUNT,			! count field of map pointer
	MAP_LBN,			! start LBN of current map pointer
	IDXFILE_EXT_CNT,		! remaining count for index file size
	IDXFILE_EXT_LBN,		! starting block for remaining count
	EXTENSION_FID,			! file number for extension headers
	MAP_FULL_STATUS;		! map area full indicator

LITERAL
	IDXFILE_EXT_FID	= 6;		! first index file extension header file number

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	BUFFER		: BBLOCK,	! I/O buffer
	VOLUME_SIZE,			! size of volume rounded to next cluster
	PROTECTION,			! volume protection
	FILE_PROT,			! default file protection
	MAXIMUM,			! maximum number of files on volume
	OWNER_UIC,			! volume owner
	EXTENSION,			! default file extend
	WINDOW,				! default window size
	ACCESSED,			! default directory LRU limit
	SERIAL_NUMBER,			! pack serial number
	BADBLOCK_TOTAL,			! count of bad blocks on volume
	LABEL_STRING	: VECTOR,	! string descriptor of volume label
	USER_NAME	: VECTOR,	! string descriptor of user name
	ALLOC_TABLE_CNT	: VECTOR,	! allocation count table
	ALLOC_TABLE_LBN	: VECTOR,	! allocation LBN table
	BADBLOCK_CNT	: VECTOR,	! bad block count table
	BADBLOCK_LBN	: VECTOR,	! bad LBN table
	BOOTBLOCK_CNT,			! boot block cluster block count
	BOOTBLOCK_LBN,			! boot block cluster LBN
	HOMEBLOCK1_CNT,			! home block 1 cluster block count
	HOMEBLOCK1_LBN,			! home block 1 cluster LBN
	IDXFILE_CNT,			! initial index file count
	IDXFILE_LBN,			! initial index file LBN
	BITMAP_CNT,			! storage bitmap block count
	BITMAP_LBN,			! storage bitmap LBN
	MFD_CNT,			! MFD block count
	MFD_LBN;			! MFD LBN

EXTERNAL LITERAL
	BOOTBLOCK_IDX	: UNSIGNED (6),	! allocation table boot block index
	IDXFILE_IDX	: UNSIGNED (6);	! allocation table index file index

BIND
	IDENT_AREA	= BUFFER + FH1$C_LENGTH : BBLOCK,
	MAP_AREA	= BUFFER + FH1$C_LENGTH + FI1$C_LENGTH : BBLOCK;

EXTERNAL ROUTINE
	GET_TIME,			! get ASCII date/time string
	CHECKSUM2,			! compute block checksum
	READ_BLOCK,			! read a block from the disk
	WRITE_BLOCK;			! write block to disk


! First block to write is the boot block. Set up the message routine for
! the -11 and build the message.
!

CH$COPY (BOOT_PROG_LEN, BOOT_PROGRAM,
	 BOOT_MESG_LEN, BOOT_MESSAGE,
	 0, 512, BUFFER);
CH$MOVE (.LABEL_STRING[0], .LABEL_STRING[1], BUFFER[BTB$T_VOLNAME]);

WRITE_BLOCK (.BOOTBLOCK_LBN, BUFFER);

! Now construct and write the home block.
!

GET_TIME (DATE_TIME[0]);
CH$FILL (0, 512, BUFFER);

BUFFER[HM1$W_IBMAPSIZE]	= (.MAXIMUM + 4095) / 4096;
BUFFER[HM1$L_IBMAPLBN]	= ROT (.IDXFILE_LBN, 16);
BUFFER[HM1$W_MAXFILES]	= .MAXIMUM;
BUFFER[HM1$W_CLUSTER]	= 1;
BUFFER[HM1$W_STRUCLEV]	= HM1$C_LEVEL1;
CH$COPY (.LABEL_STRING[0], .LABEL_STRING[1],
	 0, HM1$S_VOLNAME, BUFFER[HM1$T_VOLNAME]);
(BUFFER[HM1$W_VOLOWNER])<0,8>	= .OWNER_UIC<0,8>;
(BUFFER[HM1$W_VOLOWNER])<8,8>	= .OWNER_UIC<16,8>;
BUFFER[HM1$W_PROTECT]	= .PROTECTION;
BUFFER[HM1$W_FILEPROT]	= .FILE_PROT;
BUFFER[HM1$B_WINDOW]	= .WINDOW;
BUFFER[HM1$B_EXTEND]	= .EXTENSION;
BUFFER[HM1$B_LRU_LIM]	= .ACCESSED;
BUFFER[HM1$L_SERIALNUM] = .SERIAL_NUMBER;

CH$MOVE (13, DATE_TIME[0], BUFFER[HM1$T_CREDATE]);
CH$COPY (.LABEL_STRING[0], .LABEL_STRING[1],
	 32, HM1$S_VOLNAME2, BUFFER[HM1$T_VOLNAME2]);
CH$COPY (.USER_NAME[0], .USER_NAME[1],
	 32, HM1$S_OWNERNAME, BUFFER[HM1$T_OWNERNAME]);
CH$MOVE (HM1$S_FORMAT, FORMAT_NAME, BUFFER[HM1$T_FORMAT]);

CHECKSUM2 (BUFFER, $BYTEOFFSET (HM1$W_CHECKSUM1));
CHECKSUM2 (BUFFER, $BYTEOFFSET (HM1$W_CHECKSUM2));
WRITE_BLOCK (.HOMEBLOCK1_LBN, BUFFER);

! Now write out the initial index file bitmap. The first block contains the
! reserved files marked in use; the rest are all zero.
!

CH$FILL (0, 512, BUFFER);
BUFFER<0,32> = %B'11111';
LBN = .IDXFILE_LBN;
WRITE_BLOCK (.LBN, BUFFER);

BUFFER<0,32> = 0;
DECR J FROM (.MAXIMUM+4095)/4096-1 TO 1 DO
    BEGIN
    LBN = .LBN + 1;
    WRITE_BLOCK (.LBN, BUFFER);
    END;

! Construct and write the initial core image file header.
!

CH$COPY (FH1$C_LENGTH+FI1$C_LENGTH+FM1$C_LENGTH, INITIAL_HEADER,
	 0, 512, BUFFER);
(BUFFER[FH1$W_FILEOWNER])<0,8> = .OWNER_UIC<0,8>;
(BUFFER[FH1$W_FILEOWNER])<8,8> = .OWNER_UIC<16,8>;
BUFFER[FH1$W_FILEPROT] = .FILE_PROT;
CH$MOVE (13, DATE_TIME, IDENT_AREA[FI1$T_REVDATE]);
CH$MOVE (13, DATE_TIME, IDENT_AREA[FI1$T_CREDATE]);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
WRITE_BLOCK (.LBN + 5, BUFFER);

! Turn the header into the index file header and write it.
!

BUFFER[FH1$W_FID_NUM] = 1;
BUFFER[FH1$W_FID_SEQ] = 1;
(IDENT_AREA[FI1$W_FILENAME])<0,32> = %RAD50_11 'INDEXF';
INCR J FROM BOOTBLOCK_IDX TO IDXFILE_IDX-1 DO
    BEGIN
    IF .ALLOC_TABLE_CNT[.J] NEQ 0
    THEN MAKE_POINTER (ALLOC_TABLE_CNT[.J], ALLOC_TABLE_LBN[.J], 0);
    END;

! Now that the basic information has been accounted for, account for
! space required to keep the index file headers.  This gets interresting
! if it is necessary to generate extension headers.
!

IDXFILE_EXT_CNT = .ALLOC_TABLE_CNT[IDXFILE_IDX];
IDXFILE_EXT_LBN = .ALLOC_TABLE_LBN[IDXFILE_IDX];

IF NOT MAKE_POINTER (IDXFILE_EXT_CNT, IDXFILE_EXT_LBN, 1)
THEN
    BEGIN

    LOCAL	BUFFER1		: BBLOCK [512];	! temp home block storage

    READ_BLOCK (.HOMEBLOCK1_LBN, BUFFER1);
    BUFFER1[HM1$W_STRUCLEV] = HM1$C_LEVEL2;
    CHECKSUM2 (BUFFER1, $BYTEOFFSET (HM1$W_CHECKSUM1));
    CHECKSUM2 (BUFFER1, $BYTEOFFSET (HM1$W_CHECKSUM2));
    WRITE_BLOCK (.HOMEBLOCK1_LBN, BUFFER1);

    EXTENSION_FID = IDXFILE_EXT_FID;
    MAP_AREA[FM1$B_EX_RVN] = 0;
    MAP_AREA[FM1$W_EX_FILNUM] = .EXTENSION_FID;
    MAP_AREA[FM1$W_EX_FILSEQ] = .EXTENSION_FID;
    MAP_AREA[FM1$B_EX_SEGNUM] = 0;
    CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
    WRITE_BLOCK(.LBN + 1, BUFFER);

    DO
	BEGIN
	BUFFER[FH1$W_FID_NUM] = .EXTENSION_FID;
	BUFFER[FH1$W_FID_SEQ] = .EXTENSION_FID;
	MAP_AREA[FM1$B_INUSE] = 0;
	CH$FILL (0, 512-FH1$C_LENGTH-FI1$C_LENGTH-FM1$C_LENGTH, BUFFER+FH1$C_LENGTH+FI1$C_LENGTH+FM1$C_LENGTH);
	MAP_FULL_STATUS = MAKE_POINTER (IDXFILE_EXT_CNT, IDXFILE_EXT_LBN, 1);
	MAP_AREA[FM1$W_EX_FILNUM] = .EXTENSION_FID + 1;
	MAP_AREA[FM1$W_EX_FILSEQ] = .EXTENSION_FID + 1;
	IF .MAP_FULL_STATUS
	THEN
	    BEGIN
	    MAP_AREA[FM1$W_EX_FILNUM] = 0;
	    MAP_AREA[FM1$W_EX_FILSEQ] = 0;
	    END;
	MAP_AREA[FM1$B_EX_SEGNUM] = .MAP_AREA[FM1$B_EX_SEGNUM] + 1;
	CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
	WRITE_BLOCK (.LBN + .EXTENSION_FID, BUFFER);
	EXTENSION_FID = .EXTENSION_FID + 1;
	END
    UNTIL .MAP_FULL_STATUS NEQ 0;

! Mark any created index file extension headers as in use
!

    READ_BLOCK (.IDXFILE_LBN, BUFFER);
    BUFFER<IDXFILE_EXT_FID-1,.EXTENSION_FID - IDXFILE_EXT_FID> = %X'FFFFFFFF';
    WRITE_BLOCK (.IDXFILE_LBN, BUFFER);

! Retrieve the primary index file header

    READ_BLOCK (.LBN + 1, BUFFER);
    MAP_AREA[FM1$W_EX_FILNUM] = 0;
    MAP_AREA[FM1$W_EX_FILSEQ] = 0;
    END
ELSE
    BEGIN
    CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
    WRITE_BLOCK (.LBN + 1, BUFFER);
    END;

! Turn the file header into the bad block file header and write it.
!

CH$FILL (0, 512-FH1$C_LENGTH-FI1$C_LENGTH-FM1$C_LENGTH, BUFFER+FH1$C_LENGTH+FI1$C_LENGTH+FM1$C_LENGTH);
BUFFER[FH1$W_FID_NUM] = 3;
BUFFER[FH1$W_FID_SEQ] = 3;

MAP_AREA[FM1$B_INUSE] = 0;
MAP_COUNT = 0;
INCR J FROM 0 TO .BADBLOCK_TOTAL-1 DO
    MAP_COUNT = .MAP_COUNT + .BADBLOCK_CNT[.J];

(IDENT_AREA[FI1$W_FILENAME])<0,32> = %RAD50_11 'BADBLK';
INCR J FROM 0 TO .BADBLOCK_TOTAL-1 DO
    BEGIN
    IF .MAP_AREA[FM1$B_INUSE] GTR (512 - FH1$C_LENGTH - FI1$C_LENGTH - FM1$C_LENGTH - 4 - 2) / 2
    THEN ERR_EXIT (INIT$_MAXBAD);
    MAKE_POINTER (BADBLOCK_CNT[.J], BADBLOCK_LBN[.J], 0);
    END;
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
WRITE_BLOCK (.LBN + 3, BUFFER);

! Turn the file header into the storage map file header and write it.
!

CH$FILL (0, 512-FH1$C_LENGTH-FI1$C_LENGTH-FM1$C_LENGTH, BUFFER+FH1$C_LENGTH+FI1$C_LENGTH+FM1$C_LENGTH);
BUFFER[FH1$W_FID_NUM] = 2;
BUFFER[FH1$W_FID_SEQ] = 2;
MAP_AREA[FM1$B_INUSE] = 0;

(IDENT_AREA[FI1$W_FILENAME])<0,32> = %RAD50_11 'BITMAP';
MAKE_POINTER (%REF(1), BITMAP_LBN, 0);
MAKE_POINTER (%REF(.BITMAP_CNT-1), %REF(.BITMAP_LBN+1), 0);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
WRITE_BLOCK (.LBN + 2, BUFFER);

! Turn the file header into the MFD header and write it.
!

CH$FILL (0, 512-FH1$C_LENGTH-FI1$C_LENGTH-FM1$C_LENGTH, BUFFER+FH1$C_LENGTH+FI1$C_LENGTH+FM1$C_LENGTH);
MAP_AREA[FM1$B_INUSE] = 0;
BUFFER[FH1$W_FID_NUM] = 4;
BUFFER[FH1$W_FID_SEQ] = 4;
BUFFER[FH1$V_CONTIG] = 1;
BBLOCK [BUFFER[FH1$W_RECATTR], FAT$B_RTYPE] = FAT$C_FIXED;
BBLOCK [BUFFER[FH1$W_RECATTR], FAT$W_RSIZE] = 16;
BBLOCK [BUFFER[FH1$W_RECATTR], FAT$L_EFBLK] = ROT (2, 16);
BBLOCK [BUFFER[FH1$W_RECATTR], FAT$L_HIBLK] = ROT (.MFD_CNT, 16);

(IDENT_AREA[FI1$W_FILENAME])<0,32> = %RAD50_11 '000000';
(IDENT_AREA[FI1$W_FILENAME])<32,32> = %RAD50_11 '   DIR';
MAKE_POINTER (MFD_CNT, MFD_LBN, 0);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH1$W_CHECKSUM));
WRITE_BLOCK (.LBN + 4, BUFFER);

END;					! end of routine INIT_INDEX

ROUTINE MAKE_POINTER (COUNT, LBN, SAVE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine appends retrieval pointers to the map area of the current
!	file header describing the given count and LBN.
!
!
! CALLING SEQUENCE:
!	MAKE_POINTER (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of block count
!	ARG2: address of start LBN
!	ARG3: 0 - don't write back resulting count and LBN
!	      1 - write back resulting count and LBN
!
! IMPLICIT INPUTS:
!	BUFFER contains file header
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	retrieval pointer added to header
!
! ROUTINE VALUE:
!	1 - if all went well
!	0 - if the map area was filled
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	CURRENT_COUNT,			! running block count
	CURRENT_LBN,			! running LBN
	MAP_AREA	: REF BBLOCK,	! pointer to map area
	MAP_POINTER	: REF BBLOCK;	! pointer to map area

EXTERNAL
	BUFFER		: BBLOCK;	! buffer containing file header


! Compute the address in the file header where the pointer should go.
! Then determine the format of the pointer and build it.
!

MAP_AREA = BUFFER + 2 * (.BUFFER[FH1$B_MPOFFSET]);
MAP_POINTER = .MAP_AREA + FM1$C_POINTERS + .MAP_AREA[FM1$B_INUSE]*2;
CURRENT_COUNT = ..COUNT;
CURRENT_LBN = ..LBN;

DO
    BEGIN
    MAP_AREA[FM1$B_INUSE] = .MAP_AREA[FM1$B_INUSE] + 2;
    MAP_POINTER[FM1$B_HIGHLBN] = .CURRENT_LBN<16,8>;
    MAP_POINTER[FM1$B_COUNT] = MIN (.CURRENT_COUNT, 256) - 1;
    MAP_POINTER[FM1$W_LOWLBN] = .CURRENT_LBN<0,16>;
    MAP_POINTER = .MAP_POINTER + 4;

    CURRENT_LBN = .CURRENT_LBN + MIN (.CURRENT_COUNT, 256);
    CURRENT_COUNT = .CURRENT_COUNT - MIN (.CURRENT_COUNT, 256);

    IF .MAP_POINTER GEQA BUFFER[FH1$W_CHECKSUM]
    THEN
	BEGIN
	IF .SAVE EQL 0 THEN RETURN 0;
	.COUNT = .CURRENT_COUNT;
	.LBN = .CURRENT_LBN;
	RETURN 0;
	END;

    END
UNTIL .CURRENT_COUNT EQL 0;
RETURN 1;

END;					! end of routine MAKE_POINTER

END
ELUDOM
