MODULE INIBAD (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This module contains the routines that do the bad block processing.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  10-Nov-1977  19:21
!
! MODIFIED BY:
!
!	V03-001	ACG0283		Andrew C. Goldstein,	8-Apr-1982  10:15
!		Clean up use of VERIFIED options
!
!	V0102	ACG0075		Andrew C. Goldstein,	19-Oct-1979  17:48
!		Add pack serial number to home block
!
!	V0101	ACG0069		Andrew C. Goldstein,	9-Oct-1979  16:44
!		Remove device data table; always look for DEC-144 data
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:27
!	Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';


FORWARD ROUTINE
	INIT_BADBLOCKS	: NOVALUE,	! main level bad block processing
	GET_FACTBAD,			! process factory bad block data
	GET_SOFTBAD	: NOVALUE,	! process bad block scan program data
	GET_USERBAD	: NOVALUE,	! process user specified data
	MARK_BAD	: NOVALUE;	! enter bad block in allocation table

GLOBAL ROUTINE INIT_BADBLOCKS : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the main bad block processing routine. It calls the software
!	data, factory data, and manually entered bad block routines as
!	is appropriate.
!
!
! CALLING SEQUENCE:
!	INIT_BADBLOCKS ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	parser data base
!	data base in INIT_DISK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	bad block area in allocation table
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	disk bad block data read
!
!--

BEGIN

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	VOLUME_SIZE,			! size of volume rounded to cluster
	SMALL_DISK;			! maximum size of a "small" disk


! Establish whether the volume has factory bad block data or not and
! call the appropriate routine. Then, if user data has been entered,
! call the routine to process it.
!

IF .INIT_OPTIONS[OPT_VERIFIED]
THEN
    BEGIN
    IF NOT  GET_FACTBAD ()
    THEN GET_SOFTBAD ();
    END
ELSE
    BEGIN
    IF .DEVICE_CHAR[DIB$L_MAXBLOCK] LSSU .VOLUME_SIZE
    THEN MARK_BAD (1, .DEVICE_CHAR[DIB$L_MAXBLOCK]);
    END;

IF .INIT_OPTIONS[OPT_BADBLOCKS]
THEN GET_USERBAD ();

END;					! end of routine INIT_BADBLOCKS

ROUTINE GET_FACTBAD =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the factory bad block data found on the last
!	track of the disk.
!
!
! CALLING SEQUENCE:
!	GET_FACTBAD ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	device table in INIT_DISK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	allocation table in INIT_DISK
!	SERIAL_NUMBER: pack serial number from bad block data
!
! ROUTINE VALUE:
!	LBS if factory data found
!	LBC if factory data not found
!
! SIDE EFFECTS:
!	disk blocks read
!
!--

BEGIN

MACRO					! format of physical block number
	PBN_SECTOR	= 0, 0, 8, 0%,	! sector number
	PBN_TRACK	= 1, 0, 8, 0%,	! track number
	PBN_CYLINDER	= 2, 0, 16, 0%;	! cylinder number

LABEL
	SEARCH_TRACK;			! main loop to search last track of disk

LOCAL
	LBN,				! LBN to mark bad
	BLOCKFACT,			! blocking factor of disk
	FIRST_TIME,			! first time through flag
	FIRST_BUFFER,			! first buffer flag
	NOGOOD,				! no blocks read without errors
	STATUS,				! return status
	P		: REF BBLOCK,	! pointer into bad block descriptors
	PHYS_BLOCK	: BBLOCK [4];	! current physical block number

OWN
	BUFFER2		: BBLOCK [512];	! buffer for second copy of data

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	SERIAL_NUMBER,			! pack serial number
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	BUFFER		: BBLOCK;	! I/O buffer

EXTERNAL ROUTINE
	READ_PHYSICAL;			! read block by physical address


! First mark the entire last track of the disk bad to prevent its use.
!

BLOCKFACT = (.DEVICE_CHAR[DIB$B_SECTORS]
	   * .DEVICE_CHAR[DIB$B_TRACKS]
	   * .DEVICE_CHAR[DIB$W_CYLINDERS])
	   / .DEVICE_CHAR[DIB$L_MAXBLOCK];

LBN = .DEVICE_CHAR[DIB$L_MAXBLOCK] - .DEVICE_CHAR[DIB$B_SECTORS]/.BLOCKFACT;
MARK_BAD (.DEVICE_CHAR[DIB$B_SECTORS]/.BLOCKFACT, .LBN);

! Now, if automatic bad block processing is not inhibited, find a good
! block on the last track and process the bad block list in it. Do this
! twice, once on the first good block and once on the first good block
! after sector 10 (if not redundant) to get both factory and software
! detected bad block data.
!

IF NOT .INIT_OPTIONS[OPT_VERIFIED] THEN RETURN 1;

FIRST_TIME = 1;
NOGOOD = 1;
PHYS_BLOCK[PBN_CYLINDER] = .DEVICE_CHAR[DIB$W_CYLINDERS] - 1;
PHYS_BLOCK[PBN_TRACK] = .DEVICE_CHAR[DIB$B_TRACKS] - 1;
PHYS_BLOCK[PBN_SECTOR] = 0;

SEARCH_TRACK: BEGIN
WHILE 1 DO
    BEGIN

    FIRST_BUFFER = 1;
    WHILE 1 DO
	BEGIN
	STATUS = READ_PHYSICAL (.PHYS_BLOCK, (IF .FIRST_BUFFER THEN BUFFER ELSE BUFFER2));
	IF .STATUS
	THEN
	    BEGIN
	    NOGOOD = 0;
	    IF .FIRST_BUFFER
	    THEN
		BEGIN
		IF .BUFFER[BBD$L_LASTWORD] EQL -1
		THEN FIRST_BUFFER = 0;
		END
	    ELSE
		BEGIN
		IF CH$EQL (512, BUFFER, 512, BUFFER2, 0)
		THEN EXITLOOP;
		END;
	    END
	ELSE IF .STATUS NEQ SS$_PARITY
	THEN ERR_EXIT (.STATUS);

	PHYS_BLOCK[PBN_SECTOR] = .PHYS_BLOCK[PBN_SECTOR]
				+ 2*.BLOCKFACT;
	IF .PHYS_BLOCK[PBN_SECTOR] GEQ .DEVICE_CHAR[DIB$B_SECTORS]
	THEN LEAVE SEARCH_TRACK;
	END;				! end of block search loop

! We have a good bad block list. Process its entries.
!

    IF .FIRST_TIME
    THEN SERIAL_NUMBER = .BUFFER[BBD$L_SERIAL];

    IF .BUFFER[BBD$W_FLAGS] EQL 65535
    THEN ERR_EXIT (INIT$_DIAGPACK);

    P = BUFFER + BBD$C_DESCRIPT;
    DO
	BEGIN
	IF .P[BBD$V_CYLINDER] EQL 32767
	THEN EXITLOOP;
	LBN = ((.P[BBD$V_CYLINDER] * .DEVICE_CHAR[DIB$B_TRACKS]
	      + .P[BBD$V_TRACK]) * .DEVICE_CHAR[DIB$B_SECTORS]
	      + .P[BBD$V_SECTOR]) / .BLOCKFACT;
	MARK_BAD (1, .LBN);
	P = .P + BBD$C_ENTRY;
	END
    UNTIL .P GEQA BUFFER+512;

! If we are not yet into the user data, position to it and try again.
!

    FIRST_TIME = 0;
    IF .PHYS_BLOCK[PBN_SECTOR] GEQ 10 THEN EXITLOOP;
    PHYS_BLOCK[PBN_SECTOR] = 10;
    END;				! end of outer loop
END;					! end of block SEARCH_TRACK

! If we found no good data at all, complain.
!

IF .NOGOOD
THEN ERR_EXIT (INIT$_FACTBAD);

RETURN NOT .FIRST_TIME;

END;					! end of routine GET_FACTBAD

ROUTINE GET_SOFTBAD : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the data left by the bad block scan program
!	somewhere near the end of the disk.
!
!
! CALLING SEQUENCE:
!	GET_SOFTBAD ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	device table in INIT_DISK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	allocation table in INIT_DISK
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	disk blocks read
!
!--

BEGIN

LOCAL
	LBN,				! LBN to mark bad
	STATUS,				! return status
	P		: REF BBLOCK;	! pointer into bad block map

EXTERNAL
	INIT_OPTIONS	: BITVECTOR, 	! command options
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	BUFFER		: BBLOCK;	! I/O buffer

EXTERNAL ROUTINE
	READ_BLOCK,			! read block by LBN
	CHECKSUM2;			! compute block checksum


! Scan from the end of the volume forward to find the bad block data.
! If none is found, output a warning and proceed.
!

LBN = .DEVICE_CHAR[DIB$L_MAXBLOCK];
IF
BEGIN
DECR J FROM 32 TO 1 DO
    BEGIN
    LBN = .LBN - 1;
    STATUS = READ_BLOCK (.LBN, BUFFER);

    IF .STATUS
    THEN
	BEGIN
	IF  CHECKSUM2 (BUFFER, $BYTEOFFSET (BBM$W_CHECKSUM))
	AND .BUFFER[BBM$B_COUNTSIZE] EQL 1
	AND .BUFFER[BBM$B_LBNSIZE] EQL 3
	AND .BUFFER[BBM$B_INUSE] LEQ (512 - BBM$C_POINTERS - 2) / 2
	THEN EXITLOOP 0;
	END
    ELSE IF .STATUS NEQ SS$_PARITY
    THEN ERR_EXIT (.STATUS);
    END
END
THEN
    BEGIN
    ERR_MESSAGE (INIT$_NOBADDATA);
    RETURN;
    END;

! Found a good bad block descriptor. Enter it in the bad block map and
! then process its contents.
!

MARK_BAD (.DEVICE_CHAR[DIB$L_MAXBLOCK] - .LBN, .LBN);

P = BUFFER + BBM$C_POINTERS;
DECR J FROM .BUFFER[BBM$B_INUSE]/2 TO 1 DO
    BEGIN
    LBN = .P[BBM$W_LOWLBN];
    LBN<16,8> = .P[BBM$B_HIGHLBN];
    MARK_BAD (.P[BBM$B_COUNT]+1, .LBN);
    P = .P + 4;
    END;

END;					! end of routine GET_SOFTBAD

ROUTINE GET_USERBAD : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the bad block data entered by the user in the
!	command line.
!
!
! CALLING SEQUENCE:
!	GET_USERBAD ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	device table in INIT_DISK
!	parser output database
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	allocation table in INIT_DISK
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	disk blocks read
!
!--

BEGIN

LOCAL
	BLOCKFACT,			! blocking factor of disk
	LBN;				! LBN to mark bad

EXTERNAL
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	BADBLOCK_TABLE	: BBLOCKVECTOR [,BAD_LENGTH],
					! user entered bad block table
	BADBLOCK_COUNT;			! count of entries


! Pick up each entry in the bad block table. If it was entered in
! sector - track - cylinder form, convert it to LBN. Enter it in the
! allocation table.
!

BLOCKFACT = (.DEVICE_CHAR[DIB$B_SECTORS]
	   * .DEVICE_CHAR[DIB$B_TRACKS]
	   * .DEVICE_CHAR[DIB$W_CYLINDERS])
	   / .DEVICE_CHAR[DIB$L_MAXBLOCK];

INCR J FROM 0 TO .BADBLOCK_COUNT-1 DO
    BEGIN
    IF .BADBLOCK_TABLE[.J, BAD_STC_FORM]
    THEN
	LBN = ((.BADBLOCK_TABLE[.J, BAD_CYLINDER] * .DEVICE_CHAR[DIB$B_TRACKS]
	      + .BADBLOCK_TABLE[.J, BAD_TRACK]) * .DEVICE_CHAR[DIB$B_SECTORS]
	      + .BADBLOCK_TABLE[.J, BAD_SECTOR]) / .BLOCKFACT
    ELSE
	LBN = .BADBLOCK_TABLE[.J, BAD_LBN];
    MARK_BAD (.BADBLOCK_TABLE[.J, BAD_COUNT], .LBN);
    END;

END;					! end of routine GET_USERBAD

ROUTINE MARK_BAD (BLOCK_COUNT, START_LBN) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine enters the indicated block(s) into the bad block part
!	of the allocation table. The table is maintained in reverse order
!	by LBN, and adjacent or overlapping areas are merged. Reverse order
!	is used to make the bad block data appear at the front of the volume's
!	bad block file.
!
!
! CALLING SEQUENCE:
!	MARK_BAD (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: count of blocks to mark bad
!	ARG2: start LBN of blocks
!
! IMPLICIT INPUTS:
!	allocation table
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	allocation table altered
!
!--

BEGIN

LOCAL
	LBN,				! start LBN of new bad cluster
	COUNT,				! block count of new bad cluster
	J,				! index into bad block allocation table
	C;				! merge loop counter

EXTERNAL
	CLUSTER,			! volume cluster factor
	VOLUME_SIZE,			! volume size rounded to next cluster
	BADBLOCK_TOTAL,			! count of bad areas so far
	BADBLOCK_LBN	: VECTOR,	! bad block LBN table
	BADBLOCK_CNT	: VECTOR;	! bad block count table

EXTERNAL LITERAL
	BADBLOCK_MAX	: UNSIGNED (16); ! length of bad block table


! Round the start LBN and count out to the cluster boundaries surrounding
! the bad area.
!

IF .BADBLOCK_TOTAL GEQ BADBLOCK_MAX
THEN ERR_EXIT (INIT$_MAXBAD);

LBN = .START_LBN / .CLUSTER * .CLUSTER;
COUNT = (.START_LBN + .BLOCK_COUNT + .CLUSTER - 1) / .CLUSTER * .CLUSTER - .LBN;

IF .LBN GEQU .VOLUME_SIZE
THEN ERR_EXIT (INIT$_BADRANGE);

! Search the allocation table until an entry is found with a start LBN lower
! than the new LBN. Shuffle the table down at this point and insert the
! new entry.
!

J = 0;
UNTIL .J GEQ .BADBLOCK_TOTAL DO
    BEGIN
    IF .BADBLOCK_LBN[.J] LSSU .LBN THEN EXITLOOP;
    J = .J + 1;
    END;

CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_LBN[.J], BADBLOCK_LBN[.J+1]);
CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_CNT[.J], BADBLOCK_CNT[.J+1]);
BADBLOCK_TOTAL = .BADBLOCK_TOTAL + 1;
BADBLOCK_CNT[.J] = .COUNT;
BADBLOCK_LBN[.J] = .LBN;

! Now check for adjacencies and merge if they exist. Start with the previous
! table entry and compare pairs.
!

IF .J NEQ 0 THEN J = .J-1;
C = 0;

UNTIL .J+1 GEQ .BADBLOCK_TOTAL DO
    BEGIN
    IF .BADBLOCK_LBN[.J] LEQ .BADBLOCK_LBN[.J+1] + .BADBLOCK_CNT[.J+1]
    THEN
	BEGIN
	BADBLOCK_CNT[.J+1] = MAXU (.BADBLOCK_LBN[.J] + .BADBLOCK_CNT[.J],
				   .BADBLOCK_LBN[.J+1] + .BADBLOCK_CNT[.J+1])
			   - .BADBLOCK_LBN[.J+1];
	BADBLOCK_TOTAL = .BADBLOCK_TOTAL - 1;
	CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_LBN[.J+1], BADBLOCK_LBN[.J]);
	CH$MOVE ((.BADBLOCK_TOTAL-.J)*4, BADBLOCK_CNT[.J+1], BADBLOCK_CNT[.J]);
	BADBLOCK_CNT[.BADBLOCK_TOTAL] = 0;
	END

    ELSE
	BEGIN
	J = .J + 1;
	C = .C + 1;
	IF .C GEQ 2 THEN EXITLOOP
	END;
    END;				! end of merge loop

END;					! end of routine MARK_BAD

END
ELUDOM
