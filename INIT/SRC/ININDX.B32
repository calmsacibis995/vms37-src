MODULE ININDX (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This module contains the routines that initialize the contents
!	of a disk's index file: boot and home blocks, bitmap, and the
!	initial file headers.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Nov-1977  10:16
!
! MODIFIED BY:
!
!	V02-004	ACG0240		Andrew C. Goldstein,	11-Dec-1981  22:17
!		Make default file protection more restrictive
!
!	V02-003	ACG0185		Andrew C. Goldstein,	3-Feb-1981  21:03
!		File structure updates; e.g., back links
!
!	V0102	ACG0075		Andrew C. Goldstein,	19-Oct-1979  17:51
!		Add pack serial number to home block
!
!	V0101	ACG0017		Andrew C. Goldstein,  18-Jan-1979  11:49
!	Fix generation of format 3 map pointers
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:27
!	Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';


FORWARD ROUTINE
	INIT_INDEX	: NOVALUE,	! main index file initialization
	WRITE_HOMEBLOCK	: NOVALUE,	! checksum and write home block
	MAKE_POINTER	: NOVALUE;	! construct retrieval pointer

!+
!
! Own storage.
!
! Boot program. The following PDP-11 program will type out the attached
! message when the volume is booted on a PDP-11, informing the user that
! this is not a system disk.
!
!-

BIND
	BOOT_PROGRAM	= UPLIT WORD (

%O'000240',		     !  BOOTBK:	NOP			; NOP IDENTIFIES BOOT BLOCK
%O'012706',  %O'001000',     !		MOV	#1000,SP	; SET TEMP STACK
%O'010700',		     !	 	MOV	PC,R0		; SET ADDRESS
%O'062700',  %O'000036',     !		ADD	#BOTMSG-.,R0	; OF MESSAGE
%O'112001',		     !  10$:	MOVB	(R0)+,R1	; GET NEXT CHARACTER
%O'001403',		     !	 	BEQ	20$		; END
%O'004767',  %O'000006',     !		CALL	TYPIT		; NO, PRINT IT
%O'000773',		     !	 	BR	10$		; LOOP FOR NEXT CHARACTER
%O'000005',		     !  20$:	RESET			;
%O'000000',		     !	 	HALT			; HALT
			     !
			     !
%O'110137',  %O'177566',     ! 	TYPIT:	MOVB	R1,@#TPB	; PRINT CHARACTER
%O'105737',  %O'177564',     ! 	10$:	TSTB	@#TPS		; DONE?
%O'100375',		     !	 	BPL	10$		; NO, WAIT
%O'000207'		     !		RETURN			;
			     !
			     !
			     !	BOTMSG:

			);

LITERAL
	BOOT_PROG_LEN	= 38;

!+
!
! Boot message. Contains the volume label.
!
!-

BIND
	BOOT_MESSAGE	= UPLIT BYTE (13, 10, 10,
			  '             is not a system disk', 13, 10, 10, 0);

LITERAL
	BOOT_MESG_LEN	= 40;

MACRO
	BTB$T_VOLNAME	= 38, 0, 0, 0%;	! volume label in boot block message

!
! Volume format name string
!

BIND
	FORMAT_NAME	= UPLIT BYTE ('DECFILE11B  ');

!+
!
! Initial file header. The core image file is used since it is the first
! one written.
!
!-

BIND
	INITIAL_HEADER	= UPLIT (
						! HEADER area
	BYTE (FH2$C_LENGTH / 2),		! ident area offset
	BYTE ((FH2$C_LENGTH + FI2$C_LENGTH)/2),	! map area offset
	BYTE ($BYTEOFFSET (FH2$W_CHECKSUM)/2),	! access control list offset
	BYTE ($BYTEOFFSET (FH2$W_CHECKSUM)/2),	! reserved area offset
	WORD (0),				! file segment number
	BYTE (1, 2),				! structure version and level
	WORD (5, 5, 0),				! file ID
	WORD (0, 0, 0),				! extension file ID
	BYTE (FAT$C_FIXED),			! fixed length record type
	BYTE (0),				! no record attributes
	WORD (512),				! record size
	LONG (0, 1^16),				! HIBLK and EFBLK
	WORD (0),				! EOF byte offset
	BYTE (0, 0),				! bucket size & VFC length
	WORD (512),				! maximum record length
	WORD (0),				! default extend size
	WORD (0, 0, 0, 0, 0, 0),		! unused record attributes
	LONG (0),				! file characteristics
	WORD (0),				! record protection
	BYTE (0, 0),				! mapwords in use & access mode
	LONG (0),				! file owner UIC
	WORD (0),				! file protection
	WORD (4, 4, 0),				! directory back link
	LONG (0),				! spare

						! IDENT area
	BYTE ('CORIMG.SYS;1        '),		! file name, type and version
	WORD (1),				! revision number
	LONG (0, 0, 0, 0, 0, 0, 0, 0)		! dates

	);

GLOBAL ROUTINE INIT_INDEX : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the contents of the disk's index file.
!	It writes a dummy boot block, the home blocks, index file bitmap,
!	and the initial headers.
!
!
! CALLING SEQUENCE:
!	INIT_INDEX ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	parser data base
!	allocation table in INIDSK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	index file blocks written
!
!--

BEGIN

BUILTIN
	ROT;

LOCAL
	DATE_TIME	: VECTOR [2],	! buffer for current date/time
	LBN,				! current LBN
	MAP_COUNT,			! count field of map pointer
	MAP_LBN;			! start LBN of current map pointer

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	BUFFER		: BBLOCK,	! I/O buffer
	VOLUME_SIZE,			! size of volume rounded to next cluster
	PROTECTION,			! volume protection
	FILE_PROT,			! default file protection
	RECORD_PROT,			! default record protection
	MAXIMUM,			! maximum number of files on volume
	CLUSTER,			! volume cluster factor
	OWNER_UIC,			! volume owner
	EXTENSION,			! default file extend
	WINDOW,				! default window size
	ACCESSED,			! default directory LRU limit
	SERIAL_NUMBER,			! pack serial number
	BADBLOCK_TOTAL,			! count of bad blocks on volume
	LABEL_STRING	: VECTOR,	! string descriptor of volume label
	USER_NAME	: VECTOR,	! string descriptor of user name
	ALLOC_TABLE_CNT	: VECTOR,	! allocation count table
	ALLOC_TABLE_LBN	: VECTOR,	! allocation LBN table
	BADBLOCK_CNT	: VECTOR,	! bad block count table
	BADBLOCK_LBN	: VECTOR,	! bad LBN table
	BOOTBLOCK_CNT,			! boot block cluster block count
	BOOTBLOCK_LBN,			! boot block cluster LBN
	HOMEBLOCK1_CNT,			! home block 1 cluster block count
	HOMEBLOCK1_LBN,			! home block 1 cluster LBN
	HOMEBLOCK2_CNT,			! home block 2 cluster block count
	HOMEBLOCK2_LBN,			! home block 2 cluster LBN
	IDXHDR2_CNT,			! secondary index file header count
	IDXHDR2_LBN,			! secondary index file header LBN
	IDXFILE_CNT,			! initial index file count
	IDXFILE_LBN,			! initial index file LBN
	BITMAP_CNT,			! storage bitmap block count
	BITMAP_LBN,			! storage bitmap LBN
	MFD_CNT,			! MFD block count
	MFD_LBN,			! MFD LBN
	REAL_HOMEBLOCK;			! LBN of secondary home block

EXTERNAL LITERAL
	BOOTBLOCK_IDX	: UNSIGNED (6),	! allocation table boot block index
	IDXFILE_IDX	: UNSIGNED (6);	! allocation table index file index

BIND
	IDENT_AREA	= BUFFER + FH2$C_LENGTH : BBLOCK;

EXTERNAL ROUTINE
	CHECKSUM2,			! compute block checksum
	WRITE_BLOCK;			! write block to disk


! First block to write is the boot block. Set up the message routine for
! the -11 and build the message.
!

CH$COPY (BOOT_PROG_LEN, BOOT_PROGRAM,
	 BOOT_MESG_LEN, BOOT_MESSAGE,
	 0, 512, BUFFER);
CH$MOVE (.LABEL_STRING[0], .LABEL_STRING[1], BUFFER[BTB$T_VOLNAME]);

WRITE_BLOCK (.BOOTBLOCK_LBN, BUFFER);

! Now construct the home block. It gets written to the remainder of the boot
! block cluster and to the two home block clusters.
!

$GETTIM (TIMADR = DATE_TIME[0]);
CH$FILL (0, 512, BUFFER);

BUFFER[HM2$L_HOMELBN]	= .BOOTBLOCK_LBN + 1;
BUFFER[HM2$L_ALHOMELBN]	= .REAL_HOMEBLOCK;
BUFFER[HM2$L_ALTIDXLBN]	= .IDXHDR2_LBN;
BUFFER[HM2$B_STRUCVER]	= 1;
BUFFER[HM2$B_STRUCLEV]	= 2;
BUFFER[HM2$W_CLUSTER]	= .CLUSTER;
BUFFER[HM2$W_HOMEVBN]	= 2;
BUFFER[HM2$W_ALHOMEVBN]	= .REAL_HOMEBLOCK - .HOMEBLOCK2_LBN + .CLUSTER * 2 + 1;
BUFFER[HM2$W_ALTIDXVBN]	= .CLUSTER * 3 + 1;
BUFFER[HM2$W_IBMAPVBN]	= .CLUSTER * 4 + 1;
BUFFER[HM2$L_IBMAPLBN]	= .IDXFILE_LBN;
BUFFER[HM2$L_MAXFILES]	= .MAXIMUM;
BUFFER[HM2$W_IBMAPSIZE]	= (.MAXIMUM + 4095) / 4096;
BUFFER[HM2$W_RESFILES]	= 9;
BUFFER[HM2$L_VOLOWNER]	= .OWNER_UIC;
BUFFER[HM2$W_PROTECT]	= .PROTECTION;
IF .INIT_OPTIONS[OPT_READCHECK]
THEN BUFFER[HM2$V_READCHECK] = 1;
IF .INIT_OPTIONS[OPT_WRITECHECK]
THEN BUFFER[HM2$V_WRITCHECK] = 1;
BUFFER[HM2$W_FILEPROT]	= .FILE_PROT;
BUFFER[HM2$W_RECPROT]	= .RECORD_PROT;
(BUFFER[HM2$Q_CREDATE])<0,32>	= .DATE_TIME[0];
(BUFFER[HM2$Q_CREDATE]+4)<0,32>	= .DATE_TIME[1];
BUFFER[HM2$B_WINDOW]	= .WINDOW;
BUFFER[HM2$B_LRU_LIM]	= .ACCESSED;
BUFFER[HM2$W_EXTEND]	= .EXTENSION;
BUFFER[HM2$L_SERIALNUM] = .SERIAL_NUMBER;

CH$FILL (32, HM2$S_STRUCNAME, BUFFER[HM2$T_STRUCNAME]);
CH$COPY (.LABEL_STRING[0], .LABEL_STRING[1],
	 32, HM2$S_VOLNAME, BUFFER[HM2$T_VOLNAME]);
CH$COPY (.USER_NAME[0], .USER_NAME[1],
	 32, HM2$S_OWNERNAME, BUFFER[HM2$T_OWNERNAME]);
CH$MOVE (HM2$S_FORMAT, FORMAT_NAME, BUFFER[HM2$T_FORMAT]);

DECR J FROM .CLUSTER-1 TO 1 DO
    WRITE_HOMEBLOCK ();

BUFFER[HM2$L_HOMELBN] = .HOMEBLOCK1_LBN;
DECR J FROM .CLUSTER TO 1 DO
    WRITE_HOMEBLOCK ();

BUFFER[HM2$L_HOMELBN] = .HOMEBLOCK2_LBN;
DECR J FROM .CLUSTER TO 1 DO
    WRITE_HOMEBLOCK ();

! Now write out the initial index file bitmap. The first block contains the
! reserved files marked in use; the rest are all zero.
!

CH$FILL (0, 512, BUFFER);
BUFFER<0,32> = %B'111111111';
LBN = .IDXFILE_LBN;
WRITE_BLOCK (.LBN, BUFFER);

BUFFER<0,32> = 0;
DECR J FROM (.MAXIMUM+4095)/4096-1 TO 1 DO
    BEGIN
    LBN = .LBN + 1;
    WRITE_BLOCK (.LBN, BUFFER);
    END;

! Construct and write the initial core image file header.
!

CH$COPY (FH2$C_LENGTH+FI2$C_LENGTH, INITIAL_HEADER,
	 0, 512, BUFFER);
BUFFER[FH2$L_FILEOWNER] = .OWNER_UIC;
BUFFER[FH2$W_FILEPROT] = .FILE_PROT;
BUFFER[FH2$W_RECPROT] = .RECORD_PROT;
(IDENT_AREA[FI2$Q_CREDATE]) = .DATE_TIME[0];
(IDENT_AREA[FI2$Q_CREDATE]+4) = .DATE_TIME[1];
(IDENT_AREA[FI2$Q_REVDATE]) = .DATE_TIME[0];
(IDENT_AREA[FI2$Q_REVDATE]+4) = .DATE_TIME[1];
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 5, BUFFER);

! Turn the header into the continuation file header and write it.
!

BUFFER[FH2$W_FID_NUM] = 7;
BUFFER[FH2$W_FID_SEQ] = 7;
CH$MOVE (6, UPLIT BYTE ('CONTIN'), IDENT_AREA[FI2$T_FILENAME]);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 7, BUFFER);

! Turn the header into the volume set list file header and write it.
!

BUFFER[FH2$W_FID_NUM] = 6;
BUFFER[FH2$W_FID_SEQ] = 6;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$W_RSIZE] = 64;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$W_MAXREC] = 64;
CH$MOVE (6, UPLIT BYTE ('VOLSET'), IDENT_AREA[FI2$T_FILENAME]);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 6, BUFFER);

! Turn the header into the backup journal file header and write it.
!

BUFFER[FH2$W_FID_NUM] = 8;
BUFFER[FH2$W_FID_SEQ] = 8;
CH$MOVE (6, UPLIT BYTE ('BACKUP'), IDENT_AREA[FI2$T_FILENAME]);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 8, BUFFER);

! Turn the header into the pending bad block log file header and write it.
!

BUFFER[FH2$W_FID_NUM] = 9;
BUFFER[FH2$W_FID_SEQ] = 9;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$W_RSIZE] = 16;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$W_MAXREC] = 16;
CH$MOVE (6, UPLIT BYTE ('BADLOG'), IDENT_AREA[FI2$T_FILENAME]);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 9, BUFFER);

! Turn the header into the index file header and write it.
!

BUFFER[FH2$W_FID_NUM] = 1;
BUFFER[FH2$W_FID_SEQ] = 1;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$W_RSIZE] = 512;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$W_MAXREC] = 512;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.CLUSTER*4 + .IDXFILE_CNT, 16);
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_EFBLK] = ROT (.CLUSTER*4 + (.MAXIMUM+4095)/4096 + 5 + 1, 16);
CH$MOVE (6, UPLIT BYTE ('INDEXF'), IDENT_AREA[FI2$T_FILENAME]);
MAP_COUNT = .BOOTBLOCK_CNT;
MAP_LBN = .BOOTBLOCK_LBN;
INCR J FROM BOOTBLOCK_IDX + 1 TO IDXFILE_IDX DO
BEGIN
    IF .MAP_COUNT + .MAP_LBN EQL .ALLOC_TABLE_LBN[.J]
    THEN
	MAP_COUNT = .MAP_COUNT + .ALLOC_TABLE_CNT[.J]
    ELSE
	BEGIN
	MAKE_POINTER (.MAP_COUNT, .MAP_LBN);
	MAP_COUNT = .ALLOC_TABLE_CNT[.J];
	MAP_LBN = .ALLOC_TABLE_LBN[.J];
	END;
    END;
MAKE_POINTER (.MAP_COUNT, .MAP_LBN);

CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 1, BUFFER);
WRITE_BLOCK (.IDXHDR2_LBN, BUFFER);

! Turn the file header into the bad block file header and write it.
!

CH$FILL (0, 512-FH2$C_LENGTH-FI2$C_LENGTH, BUFFER+FH2$C_LENGTH+FI2$C_LENGTH);
BUFFER[FH2$B_MAP_INUSE] = 0;
BUFFER[FH2$W_FID_NUM] = 3;
BUFFER[FH2$W_FID_SEQ] = 3;

MAP_COUNT = 0;
INCR J FROM 0 TO .BADBLOCK_TOTAL-1 DO
    MAP_COUNT = .MAP_COUNT + .BADBLOCK_CNT[.J];
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.MAP_COUNT, 16);
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_EFBLK] = ROT (.MAP_COUNT+1, 16);

CH$MOVE (6, UPLIT BYTE ('BADBLK'), IDENT_AREA[FI2$T_FILENAME]);
INCR J FROM 0 TO .BADBLOCK_TOTAL-1 DO
    BEGIN
    IF .BUFFER[FH2$B_MAP_INUSE] GTR (512 - FH2$C_LENGTH - FI2$C_LENGTH - 2) / 2 - 4
    THEN ERR_EXIT (INIT$_MAXBAD);
    MAKE_POINTER (.BADBLOCK_CNT[.J], .BADBLOCK_LBN[.J]);
    END;
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 3, BUFFER);

! Turn the file header into the storage map file header and write it.
!

CH$FILL (0, 512-FH2$C_LENGTH-FI2$C_LENGTH, BUFFER+FH2$C_LENGTH+FI2$C_LENGTH);
BUFFER[FH2$B_MAP_INUSE] = 0;
BUFFER[FH2$W_FID_NUM] = 2;
BUFFER[FH2$W_FID_SEQ] = 2;
BUFFER[FH2$V_CONTIG] = 1;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.BITMAP_CNT, 16);
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_EFBLK] = ROT ((.VOLUME_SIZE/.CLUSTER+4095)/4096 + 2, 16);

CH$MOVE (6, UPLIT BYTE ('BITMAP'), IDENT_AREA[FI2$T_FILENAME]);
MAKE_POINTER (.BITMAP_CNT, .BITMAP_LBN);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 2, BUFFER);

! Turn the file header into the MFD header and write it.
!

CH$FILL (0, 512-FH2$C_LENGTH-FI2$C_LENGTH, BUFFER+FH2$C_LENGTH+FI2$C_LENGTH);
BUFFER[FH2$B_MAP_INUSE] = 0;
BUFFER[FH2$W_FID_NUM] = 4;
BUFFER[FH2$W_FID_SEQ] = 4;
BUFFER[FH2$V_DIRECTORY] = 1;
BUFFER[FH2$W_FILEPROT] = .BUFFER[FH2$W_FILEPROT] AND NOT %X'4444';
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_EFBLK] = ROT (2, 16);
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.MFD_CNT, 16);
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$B_RTYPE] = FAT$C_VARIABLE;
BBLOCK [BUFFER[FH2$W_RECATTR], FAT$B_RATTRIB] = FAT$M_NOSPAN;

CH$MOVE (10, UPLIT BYTE ('000000.DIR'), IDENT_AREA[FI2$T_FILENAME]);
MAKE_POINTER (.MFD_CNT, .MFD_LBN);
CHECKSUM2 (BUFFER, $BYTEOFFSET (FH2$W_CHECKSUM));
WRITE_BLOCK (.LBN + 4, BUFFER);

END;					! end of routine INIT_INDEX

ROUTINE WRITE_HOMEBLOCK : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine computes the checksums in the home block currently
!	in the buffer, writes it, and then increments the block numbers
!	in the home block for the next write.
!
!
! CALLING SEQUENCE:
!	WRITE_HOMEBLOCK ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	BUFFER contains home block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	home block written
!
!--

BEGIN

EXTERNAL
	BUFFER		: BBLOCK;	! buffer containing home block

EXTERNAL ROUTINE
	CHECKSUM2,			! block checksum routine
	WRITE_BLOCK;			! write a block to the disk


! Compute the two checksums and then write the block.
!

CHECKSUM2 (BUFFER, $BYTEOFFSET (HM2$W_CHECKSUM1));
CHECKSUM2 (BUFFER, $BYTEOFFSET (HM2$W_CHECKSUM2));
WRITE_BLOCK (.BUFFER[HM2$L_HOMELBN], BUFFER);

! Advance the block numbers to those of the next home block.
!

BUFFER[HM2$L_HOMELBN] = .BUFFER[HM2$L_HOMELBN] + 1;
BUFFER[HM2$W_HOMEVBN] = .BUFFER[HM2$W_HOMEVBN] + 1;

END;					! end of routine WRITE_HOMEBLOCK

ROUTINE MAKE_POINTER (COUNT, LBN) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine appends a retrieval pointer to the map area of the current
!	file header describing the given count and LBN.
!
!
! CALLING SEQUENCE:
!	MAKE_POINTER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: block count
!	ARG2: start LBN
!
! IMPLICIT INPUTS:
!	BUFFER contains file header
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	retrieval pointer added to header
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

BUILTIN
	ROT;

LOCAL
	MAP_POINTER	: REF BBLOCK;	! pointer to map area

EXTERNAL
	BUFFER		: BBLOCK;	! buffer containing file header


! Compute the address in the file header where the pointer should go.
! Then determine the format of the pointer and build it.
!

MAP_POINTER = BUFFER + 2 * (.BUFFER[FH2$B_MPOFFSET] + .BUFFER[FH2$B_MAP_INUSE]);

IF .COUNT LEQU 256 AND .LBN LSSU 1^22
THEN
    BEGIN
    MAP_POINTER[FM2$V_FORMAT] = FM2$C_FORMAT1;
    MAP_POINTER[FM2$B_COUNT1] = .COUNT - 1;
    MAP_POINTER[FM2$V_HIGHLBN] = .LBN<16,6>;
    MAP_POINTER[FM2$W_LOWLBN] = .LBN<0,16>;
    BUFFER[FH2$B_MAP_INUSE] = .BUFFER[FH2$B_MAP_INUSE] + 2;
    END

ELSE IF .COUNT LEQU 16384
THEN
    BEGIN
    MAP_POINTER[FM2$V_FORMAT] = FM2$C_FORMAT2;
    MAP_POINTER[FM2$V_COUNT2] = .COUNT - 1;
    MAP_POINTER[FM2$L_LBN2] = .LBN;
    BUFFER[FH2$B_MAP_INUSE] = .BUFFER[FH2$B_MAP_INUSE] + 3;
    END

ELSE IF .COUNT LEQU 1^30
THEN
    BEGIN
    .MAP_POINTER = ROT (.COUNT-1, 16);
    MAP_POINTER[FM2$V_FORMAT] = FM2$C_FORMAT3;
    MAP_POINTER[FM2$L_LBN3] = .LBN;
    BUFFER[FH2$B_MAP_INUSE] = .BUFFER[FH2$B_MAP_INUSE] + 4;
    END

ELSE ERR_EXIT (INIT$_LARGECNT);

END;					! end of routine MAKE_POINTER

END
ELUDOM
