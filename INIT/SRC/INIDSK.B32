MODULE INIDSK (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This routine contains the main level logic to initialize a disk.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  9-Nov-1977  19:29
!
! MODIFIED BY:
!
!	V03-001	ACG0283		Andrew C. Goldstein,	8-Apr-1982  14:09
!		Disable bad block processing on MSCP disks;
!		limit ODS-1 max files to 65500.
!
!	V02-006	LMP0006		L. Mark Pilant,		 6-Jan-1982  10:40
!		Correct a bug so that structure level 1 can only have a
!		cluster size of 1.
!
!	V02-005	ACG0240		Andrew C. Goldstein,	11-Dec-1981  22:13
!		Make default file protection more restrictive,
!		make default index file position beginning for small disks
!
!	V02-004	LMP0001		L. Mark Pilant		 4-Nov-1981  16:35
!		Create a multi-header index file if the number of headers
!		to be created cannot be contained in a single header
!
!	V02-003	RLRDENS		Robert L. Rappaport		6-Oct-1980
!		Added /DENSITY=1 and /DENSITY=2 support for RX02's
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';

!+
!
! Impure data specific to disk initialization.
!
!-

GLOBAL LITERAL
	BADBLOCK_MAX	= 128,		! maximum size of bad block table
	ALLOC_MAX	= BADBLOCK_MAX + 8; ! total size of allocation table

GLOBAL
	BUFFER		: BBLOCK [512],	! all purpose I/O buffer

!
! Allocation table. Consists of 2 parallel tables, for size and LBN of
! allocated areas. Each contains 1 entry for each piece of the disk which
! is allocated to something.
!
	ALLOC_TABLE_CNT	: VECTOR [ALLOC_MAX],
	ALLOC_TABLE_LBN	: VECTOR [ALLOC_MAX];
!
! Various parts of the allocation table have dedicated meanings.
!

GLOBAL LITERAL
	BOOTBLOCK_IDX	= 0,
	HOMEBLOCK1_IDX	= 1,
	HOMEBLOCK2_IDX	= 2,
	IDXHDR2_IDX	= 3,
	IDXFILE_IDX	= 4,
	BITMAP_IDX	= 5,
	MFD_IDX		= 6,
	VOLEND_IDX	= 7,
	BADBLOCK_IDX	= 8;

GLOBAL BIND
	BOOTBLOCK_CNT	= ALLOC_TABLE_CNT [BOOTBLOCK_IDX],
	BOOTBLOCK_LBN	= ALLOC_TABLE_LBN [BOOTBLOCK_IDX],
	HOMEBLOCK1_CNT	= ALLOC_TABLE_CNT [HOMEBLOCK1_IDX],
	HOMEBLOCK1_LBN	= ALLOC_TABLE_LBN [HOMEBLOCK1_IDX],
	HOMEBLOCK2_CNT	= ALLOC_TABLE_CNT [HOMEBLOCK2_IDX],
	HOMEBLOCK2_LBN	= ALLOC_TABLE_LBN [HOMEBLOCK2_IDX],
	IDXHDR2_CNT	= ALLOC_TABLE_CNT [IDXHDR2_IDX],
	IDXHDR2_LBN	= ALLOC_TABLE_LBN [IDXHDR2_IDX],
	IDXFILE_CNT	= ALLOC_TABLE_CNT [IDXFILE_IDX],
	IDXFILE_LBN	= ALLOC_TABLE_LBN [IDXFILE_IDX],
	BITMAP_CNT	= ALLOC_TABLE_CNT [BITMAP_IDX],
	BITMAP_LBN	= ALLOC_TABLE_LBN [BITMAP_IDX],
	MFD_CNT		= ALLOC_TABLE_CNT [MFD_IDX],
	MFD_LBN		= ALLOC_TABLE_LBN [MFD_IDX],
	VOLEND_CNT	= ALLOC_TABLE_CNT [VOLEND_IDX],
	VOLEND_LBN	= ALLOC_TABLE_LBN [VOLEND_IDX],
	BADBLOCK_CNT	= ALLOC_TABLE_CNT [BADBLOCK_IDX]	: VECTOR,
	BADBLOCK_LBN	= ALLOC_TABLE_LBN [BADBLOCK_IDX]	: VECTOR;

!
! Other globals
!

GLOBAL BIND
	HOME_BLOCK	= BUFFER : BBLOCK; ! buffer to read original home block

GLOBAL
	VOLUME_SIZE,			! volume size rounded up to next cluster
	REAL_HOMEBLOCK,			! LBN of actual secondary home block
	BADBLOCK_TOTAL,			! current count of bad areas
	SERIAL_NUMBER,			! serial number of disk pack
	HOMEBLOCK_LBN,			! LBN of home block read
	MOUNT_OPTIONS	: BITVECTOR [64]; ! used by some subroutines

!
! Default parameters. All have global names so they can be patched.
!

GLOBAL BIND
	DEF_PRV_PROT	= UPLIT (%X'FF00'),	! default private protection
	DEF_GRP_PROT	= UPLIT (%X'F000'),	! default group protection
	DEF_SYS_PROT	= UPLIT (%X'0000'),	! default system protection
	DEF_SHR_PROT	= UPLIT (%X'0000'),	! default shared protection
	DEF_FIL_PROT	= UPLIT (%X'FA00'),	! default file protection
	DEF_FIL_PROT1	= UPLIT (%X'FE00'),	! default file protection, ODS1
	DEF_REC_PROT	= UPLIT (%X'FE00'),	! default record protection
	DEF_EXTEND	= UPLIT (5),		! default file extend
	DEF_WINDOW	= UPLIT (7),		! default window size
	DEF_ACCESSED	= UPLIT (3),		! default directory LRU limit
	DEF_HEADERS	= UPLIT (16),		! default initial # headers
	SMALL_DISK	= UPLIT (4096);		! maximum size of a "small" disk

GLOBAL ROUTINE INIT_DISK : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains the main line logic specific to initializing
!	a disk. It sets up the bad block table, allocates the system files,
!	initializes the storage map, and initializes the contents of the
!	other files.
!
!
! CALLING SEQUENCE:
!	INIT_DISK ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	parser data base
!	own storage of this module
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	disk volume initialized
!
!--

BEGIN

LOCAL
	J,				! device table index
	C,				! available clusters on volume
	VOLUME_OWNER,			! previous owner UIC of volume
	STATUS,				! system service status
	IO_STATUS	: VECTOR [2],	! I/O status block
	PRIVILEGE_MASK	: REF BBLOCK;	! process privilege mask

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command options
	DEVICE_CHAR	: BBLOCK,	! disk device characteristics
	DEVCHAR_DESC	: VECTOR,	! device characterictics descriptor
	CHANNEL,			! channel assigned to device
	PROCESS_UIC,			! UIC of this process
	PROTECTION,			! volume protection
	FILE_PROT,			! volume default file protection
	RECORD_PROT,			! volume default record protection
	OWNER_UIC,			! volume owner UIC
	EXTENSION,			! volume default file extend
	WINDOW,				! volume default window size
	ACCESSED,			! volume default directory LRU limit
	HEADERS,			! initial file header allocation
	CLUSTER,			! volume cluster factor
	MAXIMUM,			! maximum number of files
	INDEX,				! index file start LBN
	CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! vector page pointer to process header

EXTERNAL ROUTINE
	SET_VALID,			! set software volume valid
	READ_HOMEBLOCK,			! read volume home block
	CLEAR_VALID,			! clear software volume valid
	INIT_BADBLOCKS,			! do bad block processing
	INIT_ALLOCATE,			! allocate file structures
	INIT_BITMAP,			! set up the storage map
	INIT_INDEX,			! initialize contents of index file
	INIT_INDEX1,			! initialize contents of index file, ODS1
	INIT_MFD;			! initialize contents of MFD


! Set the software volume valid and do a packack. Then read the characterictics
! again, since the packack may have caused the driver to discover new data
! about the device.
!

KERNEL_CALL (SET_VALID);

STATUS = $QIOW (CHAN = .CHANNEL,
		FUNC = IO$_PACKACK,
		IOSB = IO_STATUS);
IF .STATUS THEN STATUS = .IO_STATUS<0,16>;
IF NOT .STATUS AND .STATUS NEQ SS$_ILLIOFUNC
THEN ERR_EXIT (.STATUS);

$GETCHN (CHAN = .CHANNEL, PRIBUF = DEVCHAR_DESC);

! If the process does not have VOLPRO privilege, attempt to read the old
! home block. If there is a home block, check the volume owner UIC. It must be
! zero (unowned) or match the UIC of the user.
!

PRIVILEGE_MASK = CTL$GL_PHD[PHD$Q_PRIVMSK];
IF NOT .PRIVILEGE_MASK[PRV$V_VOLPRO]
THEN
    BEGIN
    STATUS = READ_HOMEBLOCK (UPLIT (0, 0), 0);

    IF .STATUS
    OR .STATUS EQL SS$_INCVOLLABEL
    THEN
	BEGIN
	IF .HOME_BLOCK[HM2$B_STRUCLEV] EQL 2
	THEN VOLUME_OWNER = .HOME_BLOCK[HM2$L_VOLOWNER]
	ELSE
	    BEGIN
	    VOLUME_OWNER = .(HOME_BLOCK[HM1$W_VOLOWNER])<0,8>;
	    VOLUME_OWNER<16,8> = .(HOME_BLOCK[HM1$W_VOLOWNER])<8,8>;
	    END;

	IF .VOLUME_OWNER NEQ 0
	AND .VOLUME_OWNER NEQ .PROCESS_UIC
	THEN ERR_EXIT (SS$_NOPRIV);
	END;
    END;

! Establish defaults for volume parameters not specified in the command.
! Also, if structure level 1 is specified, use level 1 defaults and disallow
! options that are not supported.
!

IF .INIT_OPTIONS[OPT_DENSITY] THEN
BEGIN
     IF .DEVICE_CHAR[DIB$B_DEVTYPE] NEQ DT$_RX02 THEN ERR_EXIT (INIT$_ILLOPT);

     IF .INIT_OPTIONS[OPT_DENS_SING]
	THEN BEGIN
	      STATUS = $QIOW (CHAN = .CHANNEL,
			      IOSB = IO_STATUS[0],
			      FUNC = IO$_FORMAT,
			      P1 = 1);
	      IF .STATUS THEN STATUS = .IO_STATUS<0,16>;
	      IF NOT .STATUS THEN ERR_EXIT (.STATUS);
	     END
	ELSE IF .INIT_OPTIONS[OPT_DENS_DOUB]
	      THEN BEGIN
		      STATUS = $QIOW (CHAN = .CHANNEL,
				      IOSB = IO_STATUS[0],
				      FUNC = IO$_FORMAT,
				      P1 = 2);
		      IF .STATUS THEN STATUS = .IO_STATUS<0,16>;
		      IF NOT .STATUS THEN ERR_EXIT (.STATUS);
		   END
	      ELSE ERR_EXIT (INIT$_BADDENS);

     STATUS = $QIOW (CHAN = .CHANNEL,
		     FUNC = IO$_PACKACK,
		     IOSB = IO_STATUS);
     IF .STATUS THEN STATUS = .IO_STATUS<0,16>;
     IF NOT .STATUS AND .STATUS NEQ SS$_ILLIOFUNC
     THEN ERR_EXIT (.STATUS);

     $GETCHN (CHAN = .CHANNEL, PRIBUF = DEVCHAR_DESC);
END;

IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN
    BEGIN
    MAP INIT_OPTIONS : VECTOR;
    IF (.INIT_OPTIONS[0] AND LEVEL2_OPTIONS) NEQ 0
    AND (.INIT_OPTIONS[1] AND LEVEL2_OPTIONS2) NEQ 0
    THEN ERR_EXIT (INIT$_NOTSTRUC1);

    IF .DEVICE_CHAR[DIB$L_MAXBLOCK] GTRU 255^12
    THEN ERR_EXIT (INIT$_LARGECNT);
    END;

IF NOT .INIT_OPTIONS[OPT_PROTECTION]
THEN
    BEGIN
    IF .INIT_OPTIONS[OPT_SYSTEM]
    THEN PROTECTION = .DEF_SYS_PROT
    ELSE IF .INIT_OPTIONS[OPT_GROUP]
    THEN PROTECTION = .DEF_GRP_PROT
    ELSE PROTECTION = .DEF_PRV_PROT;
    IF .INIT_OPTIONS[OPT_SHARE]
    THEN PROTECTION = .PROTECTION AND .DEF_SHR_PROT;
    END;

IF NOT .INIT_OPTIONS[OPT_FILE_PROT]
THEN
    IF .INIT_OPTIONS[OPT_STRUCTURE1]
    THEN FILE_PROT = .DEF_FIL_PROT1
    ELSE FILE_PROT = .DEF_FIL_PROT;

IF NOT .INIT_OPTIONS[OPT_RECORD_PROT]
THEN RECORD_PROT = .DEF_REC_PROT;

IF NOT .INIT_OPTIONS[OPT_EXTENSION]
THEN EXTENSION = .DEF_EXTEND;

IF NOT .INIT_OPTIONS[OPT_WINDOW]
THEN WINDOW = .DEF_WINDOW;

IF NOT .INIT_OPTIONS[OPT_ACCESSED]
THEN ACCESSED = .DEF_ACCESSED;

IF NOT .INIT_OPTIONS[OPT_HEADERS]
THEN HEADERS = .DEF_HEADERS;

IF NOT .INIT_OPTIONS[OPT_OWNER_UIC]
THEN
    BEGIN
    OWNER_UIC = .PROCESS_UIC;
    IF .INIT_OPTIONS[OPT_GROUP]
    THEN OWNER_UIC<0,16> = 0;
    IF .INIT_OPTIONS[OPT_SYSTEM]
    THEN OWNER_UIC = %X'10001';
    END;

IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN CLUSTER = 1
ELSE
    BEGIN
    IF NOT .INIT_OPTIONS[OPT_CLUSTER]
    THEN
	IF .DEVICE_CHAR[DIB$L_MAXBLOCK] LEQU 50000
	    THEN CLUSTER = 1
	    ELSE CLUSTER = 3;
    END;

IF NOT .INIT_OPTIONS[OPT_MAXIMUM]
THEN MAXIMUM = .DEVICE_CHAR[DIB$L_MAXBLOCK] / ((.CLUSTER+1)*2);

IF NOT .INIT_OPTIONS[OPT_EXP_VER]
AND (.DEVICE_CHAR[DIB$L_MAXBLOCK] LEQU .SMALL_DISK
     OR .DEVICE_CHAR[DEV$V_RCT])
THEN INIT_OPTIONS[OPT_VERIFIED] = 0;

! Now verify the parameters against the volume size and characteristics.
!
! Compute volume size, rounded up to next cluster boundary.
!

VOLUME_SIZE = (.DEVICE_CHAR[DIB$L_MAXBLOCK] + .CLUSTER - 1) / .CLUSTER * .CLUSTER;

! Check the cluster factor against its lower bound such that the storage map
! does not exceed 255 blocks. Also check for a reasonable minimum number of
! clusters.
!

IF .VOLUME_SIZE / .CLUSTER GTRU 255^12
OR .VOLUME_SIZE / .CLUSTER LSS 50
THEN ERR_EXIT (INIT$_CLUSTER);

! Check maximum number of files against number of clusters.
!

C = .VOLUME_SIZE / (.CLUSTER+1);
IF .MAXIMUM GTR .C
THEN MAXIMUM = .C;

! Check initial index file size against max files.
!

IF .HEADERS LSSU 16 THEN HEADERS = 16;
IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN IF .MAXIMUM GTRU 65500 THEN MAXIMUM = 65500;
IF .HEADERS GTRU .MAXIMUM THEN HEADERS = .MAXIMUM;

! Check the position of ths initial index file.
!

IF .INIT_OPTIONS[OPT_INDEX_BEG]
THEN INDEX = 0

ELSE IF .INIT_OPTIONS[OPT_INDEX_END]
THEN INDEX = .DEVICE_CHAR[DIB$L_MAXBLOCK] - 1

ELSE IF .INIT_OPTIONS[OPT_INDEX_MID] OR NOT .INIT_OPTIONS[OPT_INDEX_LBN]
THEN
    BEGIN
    IF .DEVICE_CHAR[DIB$L_MAXBLOCK] LEQU .SMALL_DISK
    THEN INDEX = 0
    ELSE INDEX = .DEVICE_CHAR[DIB$L_MAXBLOCK] / 2;
    END;

IF .INDEX GTRU .DEVICE_CHAR[DIB$L_MAXBLOCK]
THEN ERR_EXIT (INIT$_INDEX);

! Now call the routines that do the work of initializing.
!

INIT_BADBLOCKS ();
INIT_ALLOCATE ();
INIT_BITMAP ();
IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN INIT_INDEX1 ()
ELSE INIT_INDEX ();
INIT_MFD ();

KERNEL_CALL (CLEAR_VALID);

END;					! end of routine INIT_DISK

END
ELUDOM
