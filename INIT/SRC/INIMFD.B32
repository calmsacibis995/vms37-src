MODULE INIMFD (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level 1
!
! ABSTRACT:
!
!	This routine writes the initial master file directory.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Nov-1977  19:19
!
! REVISION HISTORY:
!
!   Andrew C. Goldstein, 5-Jan-1978  19:17
!   X0002 - Correct file ID's in MFD
!
!   Andrew C. Goldstein, 14-Jan-1978  0:37
!   X0003 - Directory structure change
!
!   Andrew C. Goldstein, 23-May-78  11:33
!   X0004 - Add Structure Level 2 reserved files
!
!   Andrew C. Goldstein, 7-Jun-78  20:50
!   X0005 - Add structure level 1
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';

!+
!
! The following are the records of the initial MFD for structure level 1.
!
!-

BIND
	INITIAL_MFD1 = PLIT (
						! index file
	WORD (1, 1, 0),				! file ID
	WORD (%RAD50_11 'INDEXF   SYS'),	! file name
	WORD (1),				! version number

						! storage bitmap file
	WORD (2, 2, 0),				! file ID
	WORD (%RAD50_11 'BITMAP   SYS'),	! file name
	WORD (1),				! version number

						! bad block file
	WORD (3, 3, 0),				! file ID
	WORD (%RAD50_11 'BADBLK   SYS'),	! file name
	WORD (1),				! version number

						! MFD (itself)
	WORD (4, 4, 0),				! file ID
	WORD (%RAD50_11 '000000   DIR'),	! file name
	WORD (1),				! version number

						! core image file
	WORD (5, 5, 0),				! file ID
	WORD (%RAD50_11 'CORIMG   SYS'),	! file name
	WORD (1)				! version number
	);

!+
!
! The following are the records of the initial MFD for structure level 2.
!
!-

BIND
	INITIAL_MFD = PLIT (
					! MFD (itself)
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('000000.DIR'),		! name string
	WORD (1),			! version number
	WORD (4, 4, 0),			! file ID

					! backup journal file
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('BACKUP.SYS'),		! name string
	WORD (1),			! version number
	WORD (8, 8, 0),			! file ID

					! bad block file
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('BADBLK.SYS'),		! name string
	WORD (1),			! version number
	WORD (3, 3, 0),			! file ID

					! pending bad block log
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('BADLOG.SYS'),		! name string
	WORD (1),			! version number
	WORD (9, 9, 0),			! file ID

					! storage bitmap file
	WORD (22),			! record byte couþt
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('BITMAP.SYS'),		! name string
	WORD (1),			! version .umber
	WORD (2, 2, 0),			! file ID

					! standard continuation file
	WORD (22),			! record byte count
	WORD (1),			! v%rsion limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('CONTIN.SYS'),		! name string
	WORD (1),			! version number
	WORD (7, 7, 0),			! file ID

					! core image file
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('CORIMG.SYS'),		! name string
	WORD (1),			! version number
	WORD (5, 5, 0),			! file ID

					! index file
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('INDEXF.SYS'),		! name string
	WORD (1),			! version number
	WORD (1, 1, 0),			! file ID

					! volume set list file
	WORD (22),			! record byte count
	WORD (1),			! version limit
	BYTE (0),			! flags
	BYTE (10),			! name byte count
	BYTE ('VOLSET.SYS'),		! name string
	WORD (1),			! version number
	WORD (6, 6, 0),			! file ID

	WORD (-1)			! end marker

	);

GLOBAL ROUTINE INIT_MFD : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the initial master file directory.
!
!
! CALLING SEQUENCE:
!	INIT_MFD ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	allocation table in INIDSK
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	initial MFD written
!
!--

BEGIN

EXTERNAL
	INIT_OPTIONS	: BITVECTOR,	! command option flags
	MFD_LBN,			! LBN of MFD file
	BUFFER		: BBLOCK;	! I/O buffer

EXTERNAL ROUTINE
	WRITE_BLOCK;			! write a disk block


! Simply copy the MFD records into the buffer, zero filled and write it.
!

IF .INIT_OPTIONS[OPT_STRUCTURE1]
THEN
    CH$COPY (.(INITIAL_MFD1-4)*4, INITIAL_MFD1,
	     0, 512, BUFFER)
ELSE
    CH$COPY (.(INITIAL_MFD-4)*4, INITIAL_MFD,
	     0, 512, BUFFER);

WRITE_BLOCK (.MFD_LBN, BUFFER);

END;					! end of routine INIT_MFD

END
ELUDOM
