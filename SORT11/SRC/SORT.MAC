TITLE SORT,<RESIDENT CODE>,53,10-OCT-79,REILLY
;TITLE SORT,<RESIDENT CODE>,52,28-JAN-77,ALTMANN
;TITLE SORT,<RESIDENT CODE>,43,31-AUG-76,ALTMANN
;TITLE SORT,<RESIDENT CODE>,42,1-DEC-75,RASPALLO
;TITLE SORT,<RESIDENT CODE>,41,3/21/75,INFANTE
	.PSECT	SORT,OVR
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; MODIFICATIONS
;
; 53 10-OCT-79 REILLY: FORCES '?' IN FRONT OF ERROR MESSAGES
;		       RSTS/E PATCH 30.2.8
;

;GLOBALS:
 
;GLOBAL ENTRY POINTS IN OTHER MODULES:
 
	.GLOBL	$CBDSG,$CBOMG
	.GLOBL	SORTCX,SORTPX,SORTM,SNDMSG,INITIL
	.MCALL	GTIM$S
 
;GLOBAL ENTRY POINTS IN THIS MODULE:
 
	.GLOBL	SERROR,PRINT,SORTC$,SORTP$,SORTM$
	.GLOBL	BREAK0,PLIST,PUT02,GET02,PUT04,GET04
 
;GLOBAL LOCATIONS IN OTHER MODULES:
 
	.GLOBL	BOTTOM
 
;GLOBAL LOCATIONS IN THIS MODULE:
	
	.GLOBL	PHASE,FILES

	.SBTTL	  MAIN DESPATCHER
 
BEGIN:	MOV	SP,SSTACK	;SAVE THE ADDRESS OF SYSTEM STACK
;
;	RE-ENTRY POINT
;
SORTC$:	GTIM$S	#TIMPAR		;PICK UP THE START TIME
	MOV	#BOTTOM,R2	;R2==>BOTTOM OF WORK AREA
	MOV	#WA,WORKHI	;UPPER LIMIT OF WORK AREA
	CALL	INITIL		;I/O INITIALIZER
	MOV	R2,WORKLO	;SET LOWER LIMIT OF WORK AREA
	JMP	SORTCX		;PROCESS COMMAND STRING
;
;	CALL IN THE MAIN BODY
;
SORTP$:	MOV	SSTACK,SP	;RESET TO SYSTEM STACK
	JMP	SORTPX		;PRE-SORT 
SORTM$:	JMP	SORTM		;MERGE 
 
;	ERROR HANDLER
 
;R1 POINTS TO FILE NAME(IF USED)
;R2 CONTAINS SIZE OF FILE NAME(IF USED)
;R3 POINTS TO MESSAGE STRING DESCRIPTOR.
;IF 4(R3)<0 OUTPUT FILENAME.TYP;VERSION.
;OUTPUT CODE IN R0 AS DETERMINED BY CALLER'S STRING.
 
SERROR:	MOV	#PARAM,R4
	MOV	R0,(R4)+	;SET IN CODE
	TSTB	4(R3)		;FDB ADDR SPECIFIED?
	BPL	1$		;NO
	MOV	R2,(R4)+	;SET IN FILE SIZE(- IF ASCII)
	MOV	R1,@R4		;SET IN ADDR(FILE NAME)
1$:	MOV	R3,3$		;SET IN MSG DESCRP
	CALL5	PRINT		;PRINT MESSAGE
3$:	0			;ADDR OF STRING DESCRIPTOR
	BR	SORTC$		;BEGIN SORT ANEW
;

	.SBTTL	PRINT SUBROUTINE
 
;R5 POINTS TO CALLER'S MESSAGE STRING DESCRIPTOR
 
PRINT:	JSR	R5,SUB04		;SAVE R0-R4
	MOV	(R5)+,R0		;CALLER'S STRING DESCRIPTOR
	MOV	(R0)+,R1		;SIZE OF CALLER'S MESSAGE
	MOV	R1,SRT			;PICK UP LENGTH OF MESSAGE
	ADD	#SRT2,SRT		;ADD IN HEADER
	MOV	@R0,R2			;ADDR OF CALLER'S MESSAGE
	MOV	#SRT1,R3
	MOVB	#40,SRT0		;*53* ASSUME NO ERROR
	CMPB	#'?,(R2)		;*53* IS IT AN ERROR MESSAGE?
	BNE	1$			;*53* ...NO
	MOVB	#'?,SRT0		;*53* ERROR FORCE '? IN FRONT OF MSG
1$:	MOVB	(R2)+,(R3)+		;MOVE CALLER'S MESSAGE
	CMPB	-1(R3),#'%		;FILE NAME COMING UP?
	BNE	11$			;NO
	MOV	#PARAM,R4
	CMPB	-(R3),(R2)+		;BACK UP R3 TO KILL %
	MOV	R3,R0			;MOVE FILENAME TO MESSAGE
	CMPB	(R2),#'X		;A FILE?
	BEQ	4$			;YES
	CMPB	(R2),#'D		;NO, DECIMAL CODE?
	BEQ	12$			;YES
	MOV	PARAM,R1		;NO, PICK UP OCTAL CODE
	CLR	R2
	CALL	$CBOMG			;CONVERT OCTAL CODE
	BR	13$
4$:	MOV	#PARAM+2,R4		;SET UP PTR
	MOV	(R4)+,R2		;PICK UP SIZE
	MOV	@R4,R4			;R4==>ASCII FILE STRING
5$:	MOVB	(R4)+,(R0)+		;PUT IT IN OUTPUT BUF
	INC	R2			;DEC THE STRING COUNT
	BLT	5$			;CONTINUE
	MOVB	#' ,(R0)+		;BLANK FILL
	MOVB	#' ,(R0)+		;BLANK FILL
12$:	MOV	PARAM,R1
	CLR	R2
	CALL	$CBDSG
13$:	MOV	R0,SRT			;SET ENDING ADDRESS
	SUB	SRT+2,SRT		;SUB START ADDRESS
	BR	3$
11$:
	DEC	R1
	BGT	1$
3$:	MOV	#SRT,R1			;R1==>STRING DESCRIPTOR
	CALL	SNDMSG
	CALL5	SUB04X			;RESTORE REGISTERS
	RTS	R5			;GO HOME

	.SBTTL	DATA AREA
 
SSTACK:	.WORD	0		;STORAGE FOR SYSTEM STACK POINTER
PARAM:	.BLKW	6
SRT:	0			;MESSAGE SIZE
	SRT0			;MESSAGE ADDR
SRT0:	.ASCII	^ SRT -- ^
PHASE:	.BYTE	'C,':		;INDICATES WHICH PHASE WAS IN CONTROL
SRT1:	.BLKB	71.
	.EVEN
SRT2=SRT1-SRT0
 
;	PARAMETER LIST FOR 'RSORT' FILLED IN BYE SORTCB
 
	.WORD	0	;NUMBER OF SCRATCH FILES
	.WORD	0	;LOCATION OF KEY
	.WORD	0	;MAXIMUM RECORD SIZE
	.WORD	0	;KEY SIZE
PLIST:	.WORD	0	;EXTRA
;
;	GLOBAL PARAMETER
;
FILES:	.WORD	5	;DEFAULT NUMBER OF SCRATCH FILES

	.SBTTL	MISCELLANEOUS ROUTINES
 
BREAK0:	NOP
	EXIT5
;
PUT04:	MOV	R4,R4X
	MOV	R3,R3X
PUT02:	MOV	R2,R2X
	MOV	R1,R1X
	MOV	R0,R0X
	RTS	R5
GET04:	MOV	R4X,R4
	MOV	R3X,R3
GET02:	MOV	R2X,R2
	MOV	R1X,R1
	MOV	R0X,R0
	RTS	R5
R0X:	0
R1X:	0
R2X:	0
R3X:	0
R4X:	0
SUB04:	MOV	@SP,-12(SP)	;SAVE R0-R4 ON STACK
	MOV	R0,@SP
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	DEC	SP		;DON'T CHANGE C-BIT
	DEC	SP
	RTS	R5
SUB04X:	MOV	(SP)+,1$	;RESTORE R0-R4 FROM STACK
	MOV	(SP)+,R4
	MOV	(SP)+,R3
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	MOV	@SP,R0
	MOV	1$,@SP
	RTS	R5
1$:	.WORD	0
;
;

	.SBTTL	WORK AREA
 
;NOTE: .PSECTS LOADED ALPHABETICALLY
	.PSECT	AAAAAA,D,OVR
BOTTOM:
	.PSECT	AAAAAB,D,OVR
	WAMAC			;DEFINE WORKSPACE OFFSETS
INCNT:
WA:	.BLKB	120
	.=WA+4
OUTCNT:	.=WA+10
NEWCNT:	.=WA+14
INSZE:	.=WA+24
MAXFLD:	.=WA+26
KEYSZE:	.=WA+30
OUTSZE:	.=WA+32
OUTFRM:	.=WA+33
NORDER:	.=WA+34
CSQTAB:	.=WA+36
ECODE:
SPFLSQ:	.=WA+40
ASSW:	.=WA+41
PROCES:	.=WA+42
DATLOC:	.=WA+44
MAXPOS:	.=WA+46
RECSZE:	.=WA+50
INORG:	.=WA+51
INRFM:	.=WA+52
OUTORG:	.=WA+53
OUTRFM:	.=WA+54
KEYBLD:	.=WA+56
KEYBND:	.=WA+60
KEYCHN:	.=WA+62
RECLOC:	.=WA+64
OUTLOC:	.=WA+66
KEYBEG:	.=WA+74
WORKLO:	.=WA+76
WORKHI:	.=WA+100
TIMPAR:

.SBTTL	TABLE OF KEY CONVERSSION ROUTINES
	.PSECT	TABLES,D,OVR
	.GLOBL	PTAB,PFORCE,PCKEY,PZKEY,PDKEY,PPKEY,PBKEY
	.GLOBL	PFKEY,PECMP,PLCMP,PGCMP
	.GLOBL	PIKEY,PJKEY,PKKEY
PTAB:	.WORD	PFORCE,PCKEY,PZKEY,PDKEY,PPKEY,PBKEY,PFKEY
	.WORD	PECMP,PLCMP,PGCMP
	.WORD	PIKEY,PJKEY,PKKEY
	.PSECT	$PATCH,OVR
	.GLOBL	$PATCH
$PATCH:	.WORD	0
	.END	BEGIN
