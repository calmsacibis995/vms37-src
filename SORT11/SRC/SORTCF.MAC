TITLE SORTCF,<SPECIFICATION FILE DECODER>,66,10-OCT-79,REILLY
;TITLE SORTCF,<SPECIFICATION FILE DECODER>,63,02-FEB-77,ALTMANN
;TITLE SORTC,<COMMAND STRING PROCESSOR>,53,30-AUG-76,ALTMANN
;TITLE SORTC,<COMMAND STRING PROCESSOR>,52,1-DEC-75,RASPALLO
	.PSECT	SORTCF,OVR
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;SORT CONTROL PROGRAM - PHASE I
;
;VERSION NO.:-		V002
;			.03A
;
;	ERRORS ARE REPORTED TO THE USER BY MEANS OF AN
;	APPROPRIATE MESSAGE AT THE PRINTER AND A NEW INPUT
;	IS REQUESTED.
;
;THIS VERSION ALLOWS THE PARAMETERS FOR CONTROLLING THE SORT
;	TO BE ENTERED EITHER AS SWITCHES IN THE COMMAND STRING
;	BY WHICH THE FILES ARE DESIGNATED OR THROUGH A SPECIAL
;	SPECIFICATION FILE READ & PROCESSED IN THIS SECTION.
;	SELECTIVE SORTING IS POSSIBLE ONLY UNDER THE SECOND
;	METHOD.
;
;MODIFICATIONS
;
; 64 10-OCT-79 REILLY: ALLOWS ALTSEQ IN SPECIFICATION FILES
;		       RSTS/E PATCH 30.2.2
;
; 65 10-OCT-79 REILLY: FIX PROBLEM ON VAX COMPATIBILITY
;		       RSTS/E PATCH 30.2.5
; 66 10-OCT-79 REILLY: FIX PROBLEM WITH FLOATING PT. IN RECORD SPEC.
;		       RSTS/E PATCH 30.2.7 AND 30.2.13
;
	.SBTTL	  MISCELLANEOUS DEFINITIONS:
 
NUMKEY=100.			;TOTAL POSSIBLE KEYS/CHAIN
;
;FOLLOWING GLOBALS ARE ENTRY POINTS IN OTHER MODULES:
 
	.GLOBL	READC,OPENIC
	.GLOBL	CCVT,CCHKC,CCHKD,CVT,CSU1,COSW,CRPT
 
;FOLLOWING GLOBALS ARE ENTRY POINTS IN THIS MODULE:
 
	.GLOBL	CRDSF,CRSFR2
 
;FOLLOWING GLOBALS ARE LOCATIONS IN OTHER MODULES:
 
	.GLOBL	CILIN,CILINY,CILINX,CCSERM,CPRNT,ILLKEY
	WAMAC			;DEFINE WORKSPACE OFFSETS
 
;FOLLOWING GLOBALS ARE LOCATIONS IN THIS MODULE:
 
 
 

	.SBTTL 	WORKSPACE FOR TRANSMISSION OF DATA IN OVERLAY STRUCTURE:
 
;INCNT=WA			;COUNT OF INPUT RECORDS
;OUTCNT=WA+4			;COUNT OF OUTPUT RECORDS
;MAXFLD=WA+70			;LARGEST FIELD SPECIFIED
;KEYSZE=WA+72			;TOTAL SIZE OF KEY FIELDS
;OUTSZE=WA+74			;SORTR OUTPUT SIZE
;OUTFRM=WA+76			;OUTPUT OPTION
;NORDER=WA+77			;SORT ORDER SWITCH
;CSQTAB=WA+100			;START FOR CHAR. CVT. TABLE
;ECODE=WA+102			;SORTS RETURN ERROR CODE
;SPFLSQ=ECODE
;ASSW=WA+104			;ALT COLLATION SWITCH
;PROCES=WA+105			;TYPE OF SORT
;DATLOC=WA+106			;START OF SORTS DATA AREA
;MAXPOS=WA+110			;RELATIVE END OF HIGHEST KEY
;RECSZE=WA+112			;SIZE OF INPUT RECORD
;INORG=WA+114			;INPUT FILE ORGANIZATION
;INRFM=WA+115			;INPUT RECORD FORMAT
;OUTORG=WA+116			;OUTPUT
;OUTRFM=WA+117			;OUTPUT
;KEYBLD=WA+120			;START OF KEY-BUILDER
;KEYBND=WA+122			;LAST WORD OF KEY-BUILDER
;KEYCHN=WA+124			;KEYBLD CHAIN START
;RECLOC=WA+126			;START OF RECORD BUFFER
;OUTLOC=WA+130			;START OF OUTBUFFER
;KEYBEG=WA+132			;START OF KEY STORE

.SBTTL	READ SPECIFICATION FILE:
.SBTTL	  A)  DO SEQUENCE CHECK:
 
CRDSF:	BREAK
	MOV	R4,R3		;SET PTR TO WORKSPACE
	MOV	#CILIN+6,R4	;SET BUFFER ADDRES FOR OPEN
	CALL	OPENIC		;OPEN SPEC. FILE
	MOV	#CILIN,CILINX	;??????
CRDSFR:	MOV	R1,4(R3)	;SAVE KEYBLD PTR AGAINST ERROR
	PUSH	R1		;DOUBLE INSURANCE
	PUSH	R0
	MOV	#CILIN+6,R4	;R4==>BUFFER
CRDSFX:	CALL	READC		;GET SPEC. LINE
	BNE	CRSFH		;IF AT END OF FILE ...
	TST	R1		;... LOOK FOR DATA TO PROCESS
	BNE	CRSFH
	POP	R0
	POP	R1
	CMP	#2,@SP		;KEY FIELDS ONLY?
	BNE	1$
	CMPB	#'X,OUTFRM	;... KEYS STRIPPED?
	BNE	1$
	JSR	R5,@CPRNT	;REPORT ERROR
	.WORD	CRSQER
	JMP	CRPT
1$:
	CLR	@SP		;IF NONE SET EOF ...
CSUGO1:	MOV	#2,R5		;... RESTORE SET CONSTANT
	MOV	(R0)+,R4	;POINT AT END OF KEYBLD AREA
	JMP	CSU1		;... & GO PROCESS LAST SET
CRSFH:	CMPB	6(R4),#'*	;COMMENT LINE?
	BEQ	CRDSFX		;YES, GET ANOTHER LINE
	MOV	R1,-(R4)	;SET BYTE COUNT
	POP	R0
	POP	R1
	MOV	@R4,CILINY	;SET BUF COUNT
	ADD	#2,@R4		;FAKE A CR-LF
	MOV	R4,R5		;ELSE PAD EXPECTED DATA AREA
	ADD	(R4)+,R5
	MOVB	#40,(R5)+
	CMP	R5,#CILIN+46.
	BLO	.-10
	JSR	R5,CRCVT	;GET SEQUENCE #
	BCS	CRSFA		;COULD BE ALTSEQ IF NONE
CRSFH1:	TST	@SP		;IF HEADER SEEN BEFORE ...
	BNE	CRSFNH		;... SKIP NEXT ROUTINE

.SBTTL	  B)  DECODE HEADER SPECIFICATION:
 
	MOV	R5,SPFLSQ	;INIT. SEQ. COUNTER
	MOV	#CRNHER,CRERM	;PREPARE FOR WORST
	CMPB	(R4)+,#'H	;... & CHECK FOR HEADER
	BNE	CRSFSE
	CMP	(R4)+,(R4)+	;COLLECT & STORE PROCESS
	CMPB	@R4,#40		; (IF NONE GIVEN, ...
	BNE	.+6
	MOVB	#'R,@R4		; ... ASSUME SORTR)
	JSR	R5,CRCHKC
	.WORD	CPSW
	INC	R4		;IGNORE COL. 12
	JSR	R5,CRCVT	;LIKEWISE KEYSIZE
	MOV	R5,KEYSZE	;IF NONE GIVEN ...
	BEQ	CRSFHE		;... TELL OPERATOR
	CLRB	NORDER
	MOVB	(R4)+,-(SP)	;GET & STORE NORMAL ORDER
	BICB	#'D,(SP)+
	BNE	.+6
	INCB	NORDER
	ADD	#7,R4		;... & COLLATING SEQUENCE
	JSR	R5,CRCHKC
	.WORD	CCSW
	INC	R4		;IF SORTR/SORTT ...
	MOVB	PROCES,-(SP)
	DEC	(SP)+
	BGT	CRSFHX
	MOVB	(R4)+,OUTFRM	;... STORE OUTPUT OPTION
	MOVB	#15,4(R4)	;SET STOPPER ...
	JSR	R5,CRCVT	;... & GET OUTREC SZE
	MOV	R5,OUTSZE	;AGAIN IF NONE ..
	BNE	CRSFHX		;... OBJECT
CRSFHE:	DEC	@R3		; (HOLDING PTR AT FLD END)
	BR	CRSFFE
CRSFHX:	INC	@SP		;STOP FURTHER 'H' SPECS
CRSFAX:	BR	CRDSFR		;... & GET NEXT LINE

.SBTTL	  C)  TESTS IF NOT 'H' SPECIFICATION:
 
CRSFNH:	MOV	#CRSQER,CRERM	;PREPARE FOR ERROR ...
	CMP	R5,SPFLSQ	;... WHILE VERIFY SEQ.
	BLO	CRSFSE
	MOV	R5,SPFLSQ	;IF O.K. STORE NEW #
	MOVB	ASSW,R5		;CHECK FOR ALT. COLLATION
	DEC	R5
	BGT	CRSFCA		;IF NOT SPECIAL ...
CRSFOK:	CMPB	1(R4),#'*	;... LOOK FOR COMMENT
	BEQ	CRDSFR
	JSR	R5,CRCHKC	;IF NONE, GET SPEC. TYPE
	.WORD	CESW		;... & ACTION ACCORDINGLY
CRSFCA:	MOVB	#1,ASSW		;FOR 'ALTSEQ' ...
	DEC	R5		;... STOP THE CHECK
	BNE	CRSFOK		;... & IF NO ALTSEQ SEEN
	MOV	#CRASER,CRERM	;... OBJECT
CRSFSE:	JMP	CRERR2

.SBTTL	  D)  DECODE 'ALTSEQ' SPECIFICATION:
 
CRSFA:	CMP	(R4)+,(R4)+	;BUILD CHECK ON NAME
	MOV	R4,@R3		;... STORING PTR & RESULTS
	INC	(R3)+
	MOV	@R4,@R3
	ADD	-(R4),@R3
	ADD	-(R4),@R3
	TST	-(R3)
	CMP	ASSW,@SP	;STOP NOW IF NO 'ALTSEQ' REQD.
	BLOS	CRSFH1		; (ASSW>/=2;@SP=1 VALID)
	CMP	2(R3),#"AL+"TS+"EQ
	BNE	CRSFFE		;OBJECT IF NAME CHECK BOUNCES
	MOV	(R3)+,R4	;MOVE TO DATA FIELDS
	ADD	#3,R4
CRSFA1:	CMPB	@R4,#40		;EXIT IF NO ENTRY
	BEQ	CRSFA2
	MOV	R4,-(SP)	;OTHERWISE GET ENTRY ...
	MOV	#4,-(SP)	;... BY OCTAL CONVERSION
	CALL	CVT
	BVS	CRSFAE		;... & ALLOWING NO ERRORS
	BCS	CRSFAE
	ASLB	@SP		;ADJUST RESULTING BYTES
	BCS	CRSFAE		; (BASED ON 7-BIT ASCII)
	ROR	@SP
	MOVB	1(SP),R4	;USE 1ST CHARACTER ...
	ADD	CSQTAB,R4	;... AS INDEX TO ADJUST
	MOVB	(SP)+,@R4	;... APPROP. TABLE ENTRY
	MOV	(SP)+,R4	;GET NEXT ENTRY PTR
	CMP	R4,#CILIN+126	;CONTINUE IF NOT REC. END
	BLO	CRSFA1
CRSFA2:	INCB	ASSW		;ELSE SHOW ALTSEQ SEEN
	BR	CRSFAX		;... & GET NEXT SPEC. LINE
CRSFAE:	TST	(SP)+		;FOR ALTSEQ ERRORS ...
	MOV	(SP)+,-(R3)	;... HOLD FIELD END
CRSFFE:	JMP	CRERR1		;... $ GO TELL OPERATOR

.SBTTL	  E)  DECODE RECORD SPECIFICATION:
 
;	1)  CHECK FOR 'INCLUDE-ALL' & PROCESS IF FOUND:
 
CRSFR:	MOV	@SP,-(SP)	;IF FIELD SPEC. SEEN LAST
	DEC	@SP		;... GO PROCESS SO FAR
	BEQ	CRSFR1
	DEC	(SP)+		;... UNLESS KEY FIELDS ONLY
	BNE	CRSFR0
	MOVB	OUTFRM,@SP	;... & THESE ARE STRIPPED
	BICB	#40,@SP
	BNE	CRSFSE		;IN THIS CASE, COMPLAIN
CRSFR0:	MOV	#1,@SP		;RESET SWITCH
	JMP	CSUGO1		;... & REJOIN MAINSTREAM
CRSFR1:	MOV	2(R0),(SP)+	;IF 'INCLUDE-ALL' SEEN ...
	BNE	CRSFSE		;... REJECT NEW SPEC.
	CMP	R1,SP		;IF 1ST RECORD SPEC. ...
	BEQ	CRSFR2		;... OMIT CHECK FOR ...
	JSR	R5,CRCHKC	;... LOGICAL EXTENSION
	.WORD	CLSW
	DEC	R4		;BUT LEAVE PTR AT COL 7
CRSFR2:	MOV	R5,-(SP)	;CHECK IF THIS 'INCLUDE-ALL'
	BISB	(R4)+,@SP	; (R5=0 IF 'INCLUDE' ...
	BISB	10(R4),@SP	; (... & USE COLS 7/16)
	BICB	#40,(SP)+
	BNE	CRSFR3		;FOR SUCCESSFUL CHECK ...
	CMP	(R1)+,(R0)+	;... BUMP PTRS,
	MOV	#177400,(R1)+	;... SET STOP TO CHECK-CHAIN
	CLR	(R1)+		;... FOR RECORD TYPES,
	MOV	R1,@R0		;... SET SWITCH,
	CMP	-(R1),-(R0)	;... RESET PTRS
	BR	CRSFAX		;... & GET NEXT SPEC.

;	2)  COLLECT FIELD PARAMETERS (USED ALSO FOR FIELD SPEC.):
 
CRSFR3:	MOV	#41,-(SP)	;ROOM FOR NEW SPEC IN TABLE?
	TST	(R1)+
	ADD	R1,@SP
	MOV	#SPECXS,CRERM	;IF NOT COMPLAIN
	SUB	@R0,(SP)+
	BGE	CRSFSE
	CMP	(R1)+,(R1)+	;PREPARE CHAIN AREA
	JSR	R5,CRCHKC	;... GET DATA TYPE @R1
	.WORD	CDSW
CRSFR4:	MOV	@PC,-2(R1)	;... & MARK FOR 2 PASSES BELOW
	CMP	-(R1),-(R1)	;RESET POINTER
CRSFR5:	MOV	R4,R5		;SET STOP AT FIELD END
	ADD	#4,R5
	MOVB	@R5,@R1		;... THO' SAVE START OF NEXT
	MOVB	#15,@R5
	JSR	R5,CRCVT	;GET FIELD VALUE
	MOVB	@R1,@R4		;RESTORE SAVED BYTE
	MOV	R5,(R1)+	;... & SAVE FIELD VALUE INSTEAD
	TST	@R1		;GO BACK FOR END
	BMI	CRSFR5
	CMP	-(R1),MAXPOS	;REMEMBER LAST SPEC. POSITION
	BLOS	.+6
	MOV	@R1,MAXPOS
	CMP	@R1,-(R1)	;CHECK END AFTER START
	BLO	CRSFR7		;ERROR IF NOT
	DEC	@R1		;IF NO START GIVEN ...
	BPL	.+6
	ADD	2(R1),@R1	;... USE END
	SUB	(R1)+,@R1	;COMPUTE SIZE ...
	CMP	R4,#CILIN+27	;IF FACTOR 2 JUST DONE
	BHI	CRSFRA		;... CONTINUE ELSEWHERE
	JSR	R5,CCHKD	;OTHERWISE CHECK SIZE V MODE
	BR	CRSFR7		;CALL ERROR IF BAD
	MOV	@SP,-(SP)	;IF O.K. & HERE FROM FIELD SPEC
	DEC	(SP)+
	BEQ	.+6
	JMP	CRSFF4		;... RETURN THERE NOW

;	3)  GET FACTOR 2 FROM RECORD SPEC.(IF CONSTANT):
 
	CMP	(R1)+,(R1)+	;BUMP PTRS
	CMP	(R1)+,(R4)+
	CLR	@R1		;... TO CLEAR MODE
	MOVB	(R4)+,-(SP)	;... IN CASE FACTOR 2 = FLD
	ASR	(SP)+
	BCC	CRSFR4		;IF SO USE FORMER ROUTINE
	CMP	-(R1),-(R1)	;ELSE GO BACK TO ELEM. START
	MOV	@R0,R5		;FOR CONSTANT ...
	MOV	R4,@R1		;... HOLD ITS START
	CLR	@R3		;... SET COUNT FOR MOVE
	TSTB	-1(R1)		;MODE ALPHA?
	BNE	CRSFR6		;IF NOT
	CMP	-4(R1),#20.	;FIELD SIZE VS. MAX QUOTE
	BGT	CRSFCE		;ERROR THEN
	ADD	-4(R1),R4	;TO END OF QUOTE
	BR	CRSF91		;CONTINUE

CRSFR6:	CMP	R4,#CILIN+46.	;ENSURING STOP AT POS. 40
	BHIS	CRSFCE
	CMPB	(R4)+,#40	;... & FIND ITS END
	BNE	CRSFR6
	CMPB	-(R4),-(R1)	;ADJUST POINTERS
	CMPB	@R1,#4		;IF DATA MODE BINARY ...
	BNE	CRSFR9
	JSR	PC,CRCVTB	;... CONVERT CONSTANT NOW
	BCC	CRSFRA		;IF ERROR DETECTED ...
CRSFCE:	MOV	#ILLCON,CRERM	;... TAKE ERROR EXIT
	MOV	R4,@R3
	BR	CRSFFZ
CRSFR7:	DEC	@R3		;SIMILARLY ...
	JMP	CRSFFE	;... FOR OTHER FIELD ERRORS
CRSFR8:	JSR	PC,CRCVTP	;CALL FOR PACKED CONVERT
	BR	CRSFCE-2
CRSFR9:	CMPB	(R1)+,#3	;IF MODE IS NOT PACKED ...
	BEQ	CRSFR8
CRSF91:	MOVB	-(R4),-(R5)	;MOVE TO END OF KEYBLD AREA
	INC	@R3
	CMP	R4,@R1		;WHEN DONE ...
	BNE	.-6
	MOV	R1,R4		;...HOLD KEYBLD PTR
	MOV	R5,(R1)+	;... & STORE NEW START
	MOV	@R3,@R1		;... & SIZE
	MOV	R5,@R0		;SET NEW KEYBLD END
	ASR	@R3		;... & IF ODD SIZE
	SBC	@R0		;... RESET AT WORD-BOUND
	MOV	#1000,@R3	;SET FOR D MODE ...
	CMPB	-(R4),#11	;CHECK FOR "I","J","K"
	BNE	1$
	MOV	#11*400,@R3

1$:	CMPB	@R4,#12
	BNE	2$
	MOV	#12*400,@R3
2$:	CMPB	@R4,#13
	BNE	3$
	MOV	#13*400,@R3
3$:	CMPB	@R4,#1
	BGT	CRSFRC
CRSFRA:	MOV	R1,R4		;FOR THESE AS FOR ...
	TST	-(R4)		;... FACTOR 2 = FIELD
	MOV	-(R4),@R3	;... USE FACTOR 1 MODE
	CMP	@R1,-(R4)	;... & SIZES MUST AGREE
CRSFRB:	BNE	CRSFR7

;	4)  SET UP FOR COMPARISON REQD.:
 
CRSFRC:	TST	(R1)+		;STORE ADJUSTED MODE
	MOV	@R3,(R1)+
	MOVB	CILIN+13,@R1	;FOR COMPARE BLOCK ...
	BICB	#'I,(R1)+	;... STORE INCL/OMIT SW.
	MOVB	#-1,(R1)+	;SET STRING LIMIT
	MOV	-14(R1),@R1	;HOLD FACTOR 1 SIZE
	SWAB	@R3		; (ADJUSTED IF D OR F)
	CMPB	@R3,#11		;CHECK FOR "I","J","K"
	BEQ	1$
	CMPB	@R3,#12
	BEQ	1$
	CMPB	@R3,#13
	BEQ	1$
	ASRB	@R3
	BEQ	CRSFRD
	RORB	@R3
	BNE	CRSFRD		;*66* TRUE IF FLOATING PT. AND INTEGER
	CMPB	#5,@R4		;*66* IS IT A FLOATING PT. CONST.
	BNE	98$		;*66* ...NO SOMETHING ELSE
	CMPB	#4,@R1		;*66* IS IT SINGLE PREC. FLOATING PT.
	BEQ	1$		;*66* ...YES THEN SKIP THE REST
98$:	MOV	#8.,@R1		;*66* NO  D FORMAT
1$:
CRSFRD:	MOV	(R1)+,@R3	;HOLD THIS (DOUBLE)... 
	ASL	@R3
	CMP	@R3,MAXFLD	;... TO RESERVE SPACE LATER
	BLOS	.+6
	MOV	@R3,MAXFLD
	MOV	#CILIN+22.,R4	;GO BACK FOR RELATION
	MOV	R4,@R3		;STORE END IN CASE ERROR
	INC	@R3
	JSR	R5,CRSFRE	;SET PTR TO TABLE
	.WORD	3000,"EQ	;... OF COMPARE CODES
	.WORD	3001,"NE	; (3 PAIRS)
	.WORD	3400,"LT
	.WORD	3401,"GE
	.WORD	4000,"GT
	.WORD	4001,"LE
CRSFRE:	TST	(SP)+		;IGNORE CALL RETURN
CRSFRF:	TSTB	@R5		;IF NO MORE CODES ...
	BMI	CRSFR7+2	;... CALL ERROR
	MOV	(R5)+,@R1	;OTHERWISE STORE CODE ...
	CMP	@R4,(R5)+	;... IN CASE SUCCESSFUL
	BNE	CRSFRF
CRSFFX:	JMP	CRDSFR		;... & GET NEXT SPEC.

.SBTTL	  F)  DECODE FIELD SPECIFICATION:
 
;	1)  GENERAL CHECK BEFORE GET FIELD DATA:
CRSFF:	MOV	@SP,@R3		;IF FIRST TIME THRU HERE ...
	DEC	@R3
	BNE	CRSFF1
	INC	@SP		;... SET SWITCH
	MOV	R1,6(R0)	;... & REMEMBER KEY START
CRSFF1:	DEC	@R3		;IF NOW IN DATA FIELD SPECS ...
	BLE	CRSFF2
	CMPB	@R4,#'D		;... ACCEPT NOTHING ELSE
	BEQ	CRSFF3
CRSFFZ:	JMP	CRERR2		;ILLEGAL SEQUENCE OTHERWISE
CRSFF2:	CMPB	@R4,#'D		;DATA FIELD SPEC THIS TIME?
	BNE	CRSFF3
	INC	@SP		;IF SO, REMEMBER
	TST	(R1)+		;... & SET KEY STOP
	CLR	(R1)+
	CLR	@R1
CRSFF3:	INC	R4		;OMIT FIELD TYPE FOR NOW
	MOV	#14,-(SP)	;SET UP SPACE CHECK
	JMP	CRSFR3+4	;... & GET FIELD DETAIL

;	2)  SET UP KEY TYPE AFTER FIELD DATA IN:
 
CRSFF4:	CMP	-(R1),MAXFLD	;REMEMBER LARGEST FIELD
	BLOS	.+6
	MOV	@R1,MAXFLD
	TST	(R1)+
	SUB	#10.,R4		;... & GET TYPE
	JSR	R5,CRCHKC
	.WORD	COSW
	ADD	#9.,R4		;RESET AT FORCE CHARS IN CASE
	DEC	R5		;IF DATA, THAT'S IT
	BLT	CRSFFX
	BGT	CRSFF6		;IF FORCED ...
	CMPB	PROCES,#3	;... REJECT IF 'SORTI'
	BEQ	CRSFF7
	TST	@R1		;CHECK FOR C DATA
	BNE	CRSFRB		;REJECT IF OTHER
	DEC	-(R1)		;ALSO IF MORE THAN 1 POSITION
	BNE	CRSFRB
	MOV	(R4)+,(R1)+	;OTHERWISE STORE CHARS
	MOV	#177400,@R1	;SET ROUTINE CODE
	TST	-6(R1)		;IF NO FORCE LAST TIME ...
	BPL	CRSFF5
	CMPB	@R4,#40		;... REMEMBER IF CONTIN.
	BNE	CRSFFX
CRSFF5:	INC	@R1
	BR	CRSFFX		;... BEFORE GET NEXT SPEC.
CRSFF6:	MOVB	NORDER,@R1	;SET UP FOR NORMAL ORDER
	DEC	R5		;... & EXIT IF THAT'S REQD
	BEQ	CRSFFX
	INCB	@R1		;IF OPPOSITE REQUESTED ...
	BICB	#2,@R1		;... REVERSE NORMAL
	BR	CRSFFX		;... BEFORE EXIT
CRSFF7:	MOV	#ILLKEY,CRERM
	BR	CRSFFZ

.SBTTL	  J)  SPECIAL ROUTINES FOR SPEC. FILE PROCESSING:
;	THESE ROUTINES PREPARE INTERFACES TO THE GENERAL
;	PURPOSE ROUTINES FOR DECIMAL CONVERSION AND CHAR.
;	CHECKING USED BY THE SWITCH PROCESSORS.
;
.SBTTL		1)  DECIMAL CONVERSION SET UP:
;	CALL:	JSR	R5,CRCVT
;	EXPECTS R4 ON ENTRY TO POINT TO FIRST BYTE OF
;	FIELD; ON SUCCESSFUL COMPLETION R4 IS UPDATED.
;	THE CONVERSION IN THIS CASE IS RETURNED IN R5.
;	NORMALLY SUCH CONVERSION COVERS 5 DIGITS. HOWEVER
;	TWO ALTERNATIVES ARE PERMITTED:-
;		A)  CONVERSION IS STOPPED AT THE FIRST
;		CHAR. OF A LINE (PERHAPS 'ALTSEQ' RATHER
;		THAN SEQUENCE #.)
;		B)  CONVERSION IS STOPPED AT 4 DIGITS &
;		THE STOP CHARACTER IS <CR>.
;	FAILURE EITHER THRU OVERFLOW OR STOPPAGE OTHER
;	THAN AS INDICATED RESULTS IN AN 'ILLEGAL FIELD' ERROR
;	REPORT TO THE USER.
CRCVT:	MOV	R4,@R3		;HOLD POINTER ...
	ADD	#6,R4		;... AS REQD BY 'CCVT'
CRCVT1:	CMPB	-(R4),#40	;REPLACE ' ' BY '0'
	BNE	.+6
	MOVB	#60,@R4
	CMP	R4,@R3
	BNE	CRCVT1
	TST	(R3)+		;SET PTR TO RESULT BUFFER
	JSR	R5,CRCVT2	;... & CALL GENERAL CVT RTN
CRERR1:	TST	-(SP)		;RE-ENTRY FOR M/S ERROR
	MOV	#ILLFLD,CRERM	; (GOOD RETURN NOT USED -
	TST	(SP)+		; SEE 'CCVT' & BELOW)
	JMP	CRERR2		;CLEAN-UP & EXIT
CRCVT2:	JSR	R5,CCVT		;REQUEST CONVERSION
	BCC	CRCVT3		;IF CONVERT STOPPED ...
	CMP	-(R3),#CILIN+6	;... AT 1ST CHAR. IN LINE
	BNE	CRCVT4
	CMP	(R3)+,R5	;*64*... FORCE C-BIT ON EXIT
CRCVT3:	MOV	(SP)+,R5	;IGNORE RETURN ABOVE
	MOV	@R3,@SP		;PRODUCE VALUE IN R5
	MOV	-(R3),R4	;... & UPDATED PTR
	RTS	R5		;... ON EXIT
CRCVT4:	CMPB	@(R3)+,#15	;IF STOPPPED BY <CR> ...
	BEQ	CRCVT3		;... ACCEPT CONVERSION
	TST	(R5)+		;OTHERWISE TAKE ERROR EXIT
	ADD	#4,R4		;... WITH PTR AT FIELD END
	TST	4(SP)		;... UNLESS NOT HEADER SPEC.
	BEQ	.+4		;... IN WHICH CASE,
	MOVB	@R1,@R4		;... REPLACE BYTE SAVED IN M/S
	MOV	R4,-(R3)
	RTS	R5		;... BEFORE EXIT

.SBTTL		2)  SET-UP CHARACTER CHECK:
;	CALL:	JSR	R5,CRCHKC
;		.WORD	(ADDRESS OF ROUTINE REQD.)
;	EXPECTS R4 TO POINT TO BYTE TO BE CHECKED. ON
;	SUCCESSFUL EXIT, R4 WILL POINT TO THE NEXT BYTE.
;	FAILURE IN THE CHECK WILL CAUSE ERROR REPORT
;	TO THE USER ('INVALID CHARACTER').
CRCHKC:	MOV	R4,(R3)+	;SET PTR TO BYTE ...
	CLR	@R3		;... & CLEAR RESULT (V.'CHKC')
	MOV	(R5)+,CRCHKR	;TRANSFER ROUTINE ADDRESS
	JSR	R5,CRCHK1	;... & CONTINUE BELOW
CRCHKR:	.WORD	0
	MOV	-(R3),R4	;IF COME BACK RESET PTR
	RTS	R5		;... & EXIT
CRCHK1:	MOV	(R5)+,HLDADR	;*65* HLDADR = ADDR OF ROUTINE TO CALL
	JSR	R5,@HLDADR	;*65* CALL APPROPRIATE ROUTINE
	RTS	R5		;IF O.K., GO TO EXIT
	MOV	#ILLCHR,CRERM	;OTHERWISE REPORT ERROR
	CMP	(SP)+,(SP)+	;... HAVING CLEANED UP
	DEC	-(R3)		;... & RESET PTR

.SBTTL		3)  ERRORS IN THE SPECIFICATION FILE:
;	ON ENTRY EXPECTS THE APPROPRIATE MESSAGE ADDRESS
;	TO BE ALREADY SET INTO 'CRERM' AND THE VALUE @R3
;	TO SHOW THE POSITION OF THE ERROR IN THE SPEC.
;	LINE, IN ORDER TO OUTPUT RELEVANT DATA TO THE
;	USER. IF THE FIRST BYTE OF THE MESSAGE IS NEG.,
;	AND THE SORT IS NOT UNDER BATCH, THE OPERATOR WILL
;	BE GIVEN THE OPPORTUNITY TO REENTER THE DATA IN
;	ERROR AND THE DECODING OF THE SPEC. WILL BEGIN OVER.
;	A <CR> ENTERED WITHOUT DATA WILL INDICATE THAT THE
;	USER WISHES TO START THE WHOLE SORT AFRESH.
CRERR2:	JSR	R5,@CPRNT
CRERM:	.WORD	0
	CMP	@R3,#CILIN+6	;VALID PTR?
	BHIS	1$
	MOV	#CILIN+5,@R3	;... NO... OUTPUT ENTIRE LINE
	ADD	CILINY,@R3	;... RECORD SIZE
1$:
	MOV	#CILIN+2,R2
	MOV	@R3,@R2
	SUB	#CILIN+5,(R2)+	;CALCULATE INDEX OF ERROR BYTE
	MOV	#CILIN+6,@R2	;BUFFER ADDR
	JSR	R5,@CPRNT	;OUTPUT SPEC LINE UP TO ERROR BYTE
	.WORD	CILIN+2
	JMP	CRPT		;BEGIN SORT ANEW
	MOV	#CILIN+4,R4	;RESET CONTROLS
	MOV	4(R3),R1
	MOV	#80.,@R4	;STOP POSSIBLE PADDING
	JMP	CRSFH		;... & GO DECODE LINE AGAIN

.SBTTL		4)  ADDITIONAL 'SWITCH' ROUTINES:
;	ALL THESE ROUTINES ARE CALLED THRU 'CRCHKC' BY:-
;		JSR	R5,(ADDRESS)
;	WITH R3 POINTING AT A BUFFER FOR A CODE CORRESPONDING
;	TO THE APPROPRIATE LETTER IF FOUND & -2(R3)
;	CONTAINING THE POINTER TO THE RECORD POSITION TO BE
;	CHECKED. IF SUCCESSFUL, THE REQUIRED FACILITY IS SET
;	UP IN THE COMMUNICATION TABLE FOR THE SORT &
;	AN EXIT IS TAKEN AT CALL+2. IN GENERAL THE POINTER
;	AT -2(R3) IS BUMPED TO THE NEXT BYTE. AN EXIT AT 
;	CALL+4 FOLLOWS AN UNSUCCESSFUL CHARACTER SEARCH.
;
;		I)  ALT. COLLATION SPEC.:
CCSW:	JSR	R5,CCHKC	;CHECK REQUIREMENT
	.BYTE	' ,'E,'X,'X+200	;DON'T COME BACK IF NOT THERE
	MOVB	@R3,ASSW	;... & STORE RESULT
	BEQ	CCSW2		;IF SPECIAL SEQ. REQD. ...
	MOV	R2,-(SP)	;... FREE A POINTER
	MOV	@R0,R2		;SET AT KEYBLD AREA END
	DECB	@R3		;... & DETERMINE WHICH
	BNE	CCSW3
	MOV	#EBCDTB,R4	;IF EBCDIC, SET PTR TO TABLE
	MOV	(R4)+,-(R2)	;... & MOVE OVER FOR 'SORTP'
	TST	@R4
	BPL	.-4
CCSW1:	MOV	R2,@R0		;RESET KEYBLD END
	MOV	R2,CSQTAB	;... & STORE TABLE START
	MOV	(SP)+,R2	;RESTORE PREV. CONTENT
CCSW2:	RTS	R5		;... & EXIT
CCSW3:	MOV	(PC)+,R4	;FOR MODIFIED ASCII ...
	.BYTE	200,201		;... GENERATE STD TABLE
CCSW4:	SUB	(PC)+,R4	;... AGAIN AT KEYBLD END
	.BYTE	2,2
	MOV	R4,-(R2)
	TSTB	R4
	BNE	CCSW4
	BR	CCSW1

;EBCDIC CONVERSION TABLE:
EBCDTB:	.BYTE	120,5,61,143,130,131,126,127
	.BYTE	124,125,122,123,117,121,115,116
	.BYTE	113,114,111,112,107,110,105,106
	.BYTE	103,104,101,102,77,100,67,76
	.BYTE	56,64,155,51,165,42,163,164
	.BYTE	161,162,157,160,154,156,152,153
	.BYTE	150,151,146,147,144,145,141,142
	.BYTE	137,140,135,136,133,134,72,132
	.BYTE	65,66,44,74,70,55,176,177
	.BYTE	174,175,172,173,170,171,166,167
	.BYTE	43,60,62,57,53,46,45,54
	.BYTE	50,73,52,63,75,71,41,47
	.BYTE	24,25,22,23,40,30,20,21
	.BYTE	34,27,36,37,15,16,13,14
	.BYTE	11,12,7,10,26,6,17,4
	.BYTE	32,33,35,31,2,3,0,1
	.WORD	-1

;		II)  DATA MODE SPECIFICATION:
;	EXPECTS R1 TO SHOW STORE FOR RESULT.
CDSW:	JSR	R5,CCHKC	;GET MODE
	.BYTE	'C,'Z,'D,'P,'B,'F,'C,'C,'C,'I,'J,'K+200
	SWAB	@R3		;MOVE INTO CORRECT POSITION
	MOV	@R3,@R1		;... & STORE
	RTS	R5		;... BEFORE EXIT
;
;		III)  SPECIFICATION TYPE:
;	IF SEARCH SUCCESSFUL, EXITS TO APPROPRIATE ROUTINE
;	WITH R5 CONTAINING THE RELEVANT CODE
CESW:	JSR	R5,CCHKC	;GET TYPE
	.BYTE	'I,'O,'F,'F+200
	MOV	(SP)+,R5	;IGNORE NORMAL RETURN
	MOV	@R3,2(SP)	;SET R5 FOR FINAL EXIT
	MOV	#CRSFR,@SP	;... TO DECODE RECORD SPEC
	DEC	@R3
	BLE	.+6
	MOV	#CRSFF,@SP	;... OR FIELD AS APPROP.
	RTS	R5
;		IV)  LOGICAL COMBINATION OF RECORD TYPES:
;	ASSUMES R1 POINTS AT LAST WORD OF KEYBLD CHAIN
;	ELEMENT. DEPENDING UPON THE RESULT OF THE SEARCH,
;	THE COMPARE LINK (AT -3(R1) IS MODIFIED TO SHOW:-
;		-1  =  NO COMBINATION WITH NEXT ELEMENT
;		-2  =  'AND' WITH NEXT ELEMENT
;		-3  =  'OR' WITH NEXT ELEMENT
CLSW:	JSR	R5,CCHKC	;DO SEARCH
	.BYTE	' ,'A,'O,'O+200
	NEG	@R3		;IF COMBINATION REQD.
	BEQ	CLSWX
	MOV	R1,R4		;... SET PTR 
	CMP	-(R4),-(R4)	;... AT LAST LINK
	CLR	-(SP)		;COLLECT INCL/OMIT SWITCH
	TSTB	(R4)+
	BEQ	.+4
	INC	@SP
	CMP	(SP)+,4(SP)	;SAME AGAIN?
	BEQ	.+4
	TST	(R5)+		;IF NOT CAUSE ERROR CALL
	DEC	@R3		;STORE NEW LINK
	MOVB	@R3,@R4
CLSWX:	RTS	R5
;
;		V) PROCESS
;
CPSW:	JSR	R5,CCHKC	;CKECK REQUIREMENTS
	.BYTE	'R,'T,'A,'I+200
	MOVB	@R3,PROCESS
	RTS	R5

.SBTTL		5)  CONVERT BINARY CONSTANT:
;	CALL:	JSR	PC,CRCVTB
;	THIS ROUTINE ACCEPTS A SIGNED STRING OF DECIMAL
;	DIGITS (UP TO 19) AND CONVERTS IT TO POSSIBLE
;	QUADRUPLE PRECISION - THE ACTUAL SIZE BEING
;	DEPENDENT UPON THAT FOR THE FIELD AGAINST WHICH
;	THE EVENTUAL COMPARISON WILL BE MADE. ON ENTRY
;	THE FOLLOWING CONDITIONS ARE EXPECTED:-
;		@R0  =	END OF KEYBLD AREA
;		1(R1)=	ADDRESS OF STRING START
;		R3   =	ADDRESS OF WORKSPACE
;		R4   =	END OF STRING
;		R5   =	@R0
;	ON SUCCESSFUL EXIT, THE CONVERTED VALUE IS STORED
;	AT THE END OF THE KEYBLD AREA & @R0 IS ADJUSTED
;	TO PROTECT IT. THE KEYBLD CHAIN ELEMENT IS SET UP
;	ACCORDINGLY & THE C BIT IS CLEARED TO SHOW ALL O.K.
;	ANY ERROR (NON-DIGIT, OVERFLOW) IS INDICATED BY
;	C-BIT = 1 AND R4 REMAINS POINTING AT STRING END
;	FOR DIAGNOSTIC REPORTING
;	[NOTE:	THE GENERAL ALGORITHM IS TO CONVERT THE
;	STRING INTO A SERIES OF VALUES < 10000 AND THEN
;	MULTIPLY THESE IN Q.P. BY THE CORRESPONDING POWER
;	OF 10000. THE START POINT FOR THE MULTIPLY IS BASED
;	ON THE NUMBER OF VALUES; HOWEVER REGARDLESS OF THE
;	PRECISION, Q.P. MULTIPLY IS ALWAYS USED. THIS MAY
;	BE TIME-WASTING BUT THE FREQUENCY AT WHICH THIS
;	ROUTINE MAY BE CALLED IS MINIMAL: CORE-ECONOMY
;	IS CURRENTLY GIVEN HIGHER PRIORITY.]

;
;		I) GENERAL SET-UP (INCL. PROCESS SIGN):
CRCVTB:	MOV	R4,-(SP)	;SAVE STRING END ...
	MOV	R2,-(SP)	;... COMM TABLE PTR
	MOV	SP,(R3)+	;... & STACK IN CASE ERROR
	MOV	#24004,@R3	;SET COUNT - BYTE MOVE/TABLE
	MOV	@PC,-(R5)	;SET NON-DIGIT STOP
	MOVB	(R1)+,-(SP)	;CLEAR SWITCH FOR SIGN (=4)
	MOV	@R1,R2		;... & GET STRING START
	CMPB	(R2)+,#53	;OMIT + IF PRESENT
	BEQ	CRCB1
	CMPB	-(R2),#55	;... & REMEMBER IF -
	BNE	CRCB1
	MOVB	(R2)+,@SP

;		II)  OBTAIN VALUE SERIES:
CRCB1:	MOVB	#60,-(R5)	;PAD WITH ZERO ...
	CMP	R4,R2		;... IN CASE ISUFF. DIGITS
	BEQ	.+4
	MOVB	-(R4),@R5	;OTHERWISE SHIFT DIGITS
	DECB	@R3		; (FOUR IN ALL)
	BNE	CRCB1
	MOV	R5,-(SP)	;CONVERT UP TO 9999.
	CMP	(R5)+,(R5)+
	MOV	#2,-(SP)
	CALL	CVT
	CMP	2(SP),R5	;TAKE ERROR EXIT (C=1)
	BLO	CRCBX		;... IF 4 NOT DONE
	MOV	(SP)+,@SP	;OTHERWISE HOLD RESULT
	SUB	#3774,@R3	;ADJUST COUNT/TABLE PTR
	CMP	R4,R2		;... IN CASE MORE TO COME
	BNE	CRCB1
	MOV	@R0,R4		;WHEN DONE ...
	CLR	-(R4)		;... PREPARE RESULT AREA
	DECB	@R3
	BNE	.-4
	SWAB	@R3		;GET TABLE PTR
	MOV	@R3,R2
	ADD	#CRCBTB,R2
;		III)  Q.P. MULTIPLY VALUES:
CRCB2:	MOV	R4,R5		;COLLECT CONVERSION FACTOR
	MOV	(R2)+,-(R5)	;... FOR APPROP START TO
	MOV	(R2)+,-(R5)	;... MULTIPLICATION
	MOV	(R2)+,-(R5)	;... OF EACH VALUE BY
	MOV	(R2)+,-(R5)	;... CORR. POWER OF 10000
	COM	@SP		;ADJUST VALUE (C-BIT 0=ADD)
CRCB3:	MOV	@R0,R5		;SET PTR TO RESULT BUFFER
	MOV	#2004,@R3	;... & DOUBLE COUNTER (2X4)
	ASR	@SP		;CHECK VALUE BIT 0 ...
	BCS	CRCB4
	ADC	-(R5)		;... & Q.P. ADD FACTOR IF NEC.
	ADD	-(R4),@R5
	DECB	@R3
	BNE	.-6
	MOV	R5,R4		;RESET PTR WHEN DONE
CRCB4:	MOV	R4,R5		;ADJUST FACTOR FOR NEXT PASS
	SWAB	@R3
	ROL	-(R5)
	DECB	@R3
	BNE	.-4
	CMP	@SP,#-1		;... IF ANY
	BNE	CRCB3

;		IV)  CHECK RESULT FOR OVERFLOW:
	CMP	@R2,(SP)+	;WHEN ALL VALUES DONE ...
	BNE	CRCB2
	MOV	@R0,R5		;... RESET RESULT POINTER
	MOV	-4(R1),@R3	; (BASED ON FACTOR 1 FIELD)
	SUB	@R3,R5		;... AT REAL HIGH-ORDER WORD
	MOV	R5,@R1		;HOLD ITS POSITION ..,
	MOV	@R5,-(SP)	;... & LOOK FOR OVERFLOW
	ASL	(SP)+		;... IN IT OR ...
	BCS	CRCBX
CRCB5:	CMP	R4,R5		;... ANY WORDS BEFORE IT
	BEQ	CRCB6
	MOV	-(R5),@R5	; (LEAVES C=1 FROM COMPARE)
	BEQ	CRCB5
;		V)  GENERAL EXIT (C=0 IF RESULT O.K.):
CRCBX:	MOV	-(R3),SP	;FOR EXIT, CLEAN STACK IF NEC.
	MOV	(SP)+,R2	;... & RESTORE SAVED REGS.
CRCPX:	MOV	(SP)+,R4
	DEC	R4		;... ADJUSTED IN CASE ERROR
	RTS	PC
;		VI)  STORE KEYBLD ELEMENT & ADJUST RESULT:
CRCB6:	MOV	@R0,R5		;IF RESULT VALID ...
	MOV	(R1)+,@R0	;... RESET KEYBLD AREA END
	MOV	@R3,@R1		;STORE REAL SIZE
	ASR	@R3		;ADJ. SIZE FOR COUNT
	CMPB	(SP)+,#4	;... IN CASE RESULT NEG.
	BEQ	CRCBX
	TST	-(R5)		;... FOR WHICH COMPLEMENT
	NEG	@R5
	ADC	-(R5)
	DEC	@R3
	BNE	.-6
	BR	CRCBX		;... BEFORE EXIT
;		VII)  FACTOR TABLE:
CRCBTB:	.WORD	0,67701,103362,43	;= 10000000000000000
	.WORD	10000,152245,350,0	;= 1000000000000
	.WORD	160400,2765,0,0		;= 100000000
	.WORD	23420,0,0,0		;= 10000
	.WORD	1,0,0,0
	.WORD	-1

.SBTTL		6)  CONVERT PACKED CONSTANT:
;	CALL:	JSR	PC,CRCVTP
;	THIS ROUTINE ACCEPTS A STRING OF DECIMAL DIGITS 
;	FOLLOWED BY A SIGN (IN ASCII) AND CONVERTS THIS
;	INTO A STRING OF BYTES CONTAINING 2 BCD DIGITS
;	EACH. THE SIGN IS STORED AS '14' = '+' OR '15'
;	= '-' IN THE LAST HALF BYTE. ON ENTRY THE
;	FOLLOWING CONDITIONS ARE EXPECTED:-
;		@R0  =	END OF KEYBLD AREA
;		@R1  =	ADDRESS OF STRING START
;		@R3  =  0
;		R4   =	ADDRESS OF END OF STRING
;		R5   =  @R0
;	ON EXIT THE NEW STRING IS STORED AT THE END OF
;	THE KEYBLD AREA & @R0 IS ADJUSTED TO PROTECT IT.
;	THE C-BIT IN THE PROCESSOR STATUS IS CLEARED TO
;	INDICATE SUCCESSFUL CONVERSION. AN ERROR EXIT IS
;	TAKEN (C-BIT = 1) IF CHARACTERS OTHER THAN DIGITS
;	OR TERMINAL SIGN ARE DETECTED.
CRCVTP:	MOV	R4,-(SP)	;SAVE IN CASE ERROR
	MOVB	#14,-(R5)	;ASSUME POSITIVE ...
	CMPB	-(R4),#53	;... & CHECK
	BEQ	CRCP1		;CONTINUE IF O.K.
	BLO	CRCPX		;EXIT IF OBVIOUS ERROR
	CMPB	#55,@R4		;OTHERWISE PERHAPS NEGATIVE
	BLO	CRCPX
	INCB	@R5		;IF SO ADJUST STORED SIGN
CRCP1:	CMP	R4,@R1		;WHILE DIGITS TO DO ...
	BEQ	CRCP2
	MOVB	-(R4),-(SP)	;... CHECK VALIDITY
	SUB	#60,@SP
	MOVB	(SP)+,-(R5)
	CMPB	#11,@R5
	BLO	CRCPX		;OBJECT FOR NON-DIGIT
	COM	@R3		;IF START OF NEW PAIR ...
	BPL	CRCP1		;... THAT'S ALL
	ASLB	@R5		;IF SECOND ...
	ASLB	@R5		;... MOVE BCD INTO PLACE
	ASLB	@R5
	ASLB	@R5
	BISB	(R5)+,@R5	;... & COMBINE WITH FIRST
	DEC	@R3		;ALSO COUNT PAIRS
	BR	CRCP1
CRCP2:	COM	@R3		;IF TOTAL DIGITS IS ODD ...
	BPL	.+4
	NEG	@R3		;... ADD EXTRA PAIR
	MOV	R5,@R0		;SET NEW KEYBLD END
	BIC	#1,@R0		;... ON WORD-BOUND
	MOV	R5,(R1)+	;SET START INTO KEYBLD CHN
	MOV	@R3,@R1		;... & ALSO END
	CLRB	-(R5)		;JUST FOR SAFETY!
	BR	CRCPX		;EXIT THRU CRCVTB (C = 0)

.SBTTL	MESSAGES
 
	STRNG	CRNHER,<?NO HEADER>
	STRNG	CRSQER,<?INCORRECT SEQUENCE>
	STRNG	CRASER,<?NO ALTSEQ>
	STRNG	SPECXS,<?TOO MANY SPECIFICATIONS>
	NSTRNG	ILLCHR,<?INVALID CHARACTER>
	NSTRNG	ILLFLD,<?ILLEGAL FIELD>
	NSTRNG	ILLCON,<?ILLEGAL CONSTANT>
HLDADR: .WORD	0	;*65* HOLD ADDR OF THE ROUTINE	
	.END

