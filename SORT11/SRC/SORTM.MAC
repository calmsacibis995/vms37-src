TITLE SORTM,<MERGE PHASE>,44,10-OCT-79,REILLY
;TITLE SORTM,<MERGE PHASE>,43,25-FEB-77,ALTMANN
;TITLE SORTM,<MERGE PHASE>,32,08-OCT-76,ALTMANN
;TITLE SORTM,<MERGE PHASE>,31,30-AUG-76,ALTMANN
;TITLE SORTM,<MERGE PHASE>,30,12-APR-76,INFANTE
	.PSECT	SORTM,OVR
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;SORT CONTROL PROGRAM - PHASE III
;
;COPYRIGHT 1977:-	DIGITAL EQUIPMENT CORP.,MAYNARD,MASS.
;
;VERSION NO.:-		V002A
;			.1
;
;THIS PHASE RECEIVES CONTROL AFTER THE INPUT FILE HAS BEEN 
;	COMPLETELY READ & IF NECESSARY DESPATCHED TO THE
;	SCRATCH FILES FROM THE PRELIMINARY SORT. IT ASKS
;	THE 'SORTS' PACKAGE TO PERFORM THE SORT/MERGE
;	OPERATION & THEREAFTER MANAGES THE PRODUCTION OF
;	THE OUTPUT FILE AS SPECIFIED. FOR A 'SORTT' IN
;	PARTICULAR, THIS INCLUDES RE-ACCESSING THE
;	INPUT FILE. WHEN THE OUTPUT IS SATISFACTORILY
;	CONCLUDED, PHASE I IS RECALLED TO ALLOW THE USER
;	TO SPECIFY A NEW SORT.A SIMILAR RECALL OCCURS IF
;	ANY ERROR IS DETECTED.
;
;THE FOLLOWING ROUTINES FROM THE 'SORTS' PACKAGE ARE
;	CALLED BY THIS PHASE & SHOULD BE LINKED TO IT
;		'MERGE'	)
;		'RETRN'	) & ASSOCIATED SUBROUTINES
;
; MODIFICATIONS
;
; 44 10-OCT-79 REILLY: MAKE ALL ERROR MESSAGES BEGIN WITH '?'
;		       RSTS/E PATCH 30.2.10
;

	.SBTTL	  MISCELLANEOUS DEFINITIONS:
 
 
;FOLLOWING GLOBALS REFERENCE ARE LOCATIONS IN OTHER MODLUES:
 
	WAMAC			;DEFINE WORKSPACE OFFSETS
	.GLOBL	PTAB,PHASE,RCNSIZ
 
;FOLLOWING GLOBALS ARE ENTRY POINTS IN OTHER MODULES:
 
	.GLOBL	READM,WRITEM,OPENIM,COMEXT
	.GLOBL	MERGE,RETRN,ENDS,PRINT,$CBDAT
	.MCALL	GTIM$S
 
;FOLLOWING GLOBALS ARE ENTRY POINTS IN THIS MODULE:
 
	.GLOBL	SORTM

	.SBTTL	  REQUEST THE 'MERGE' FUNCTION
 
SORTM:	MOVB	#'M,PHASE	;SET THE PHASE CODE
	BREAK
	MOV	R5,-(SP)
	MOV	#MRGPAR,R5	;R5==>MERGE PARAM LIST
	CALL	MERGE
	CLR	R5
	MOV	ECODE,R0	;IF ANY ERRORS ...
	BEQ	MSU1
MSERR:	MOV	#MSRTER,R3	;... SCREAM!!!!
	JMP	MSEND		;CLOSE ALL FILES

	.SBTTL	  GENERAL INITIALIZATION
 
MSU1:	MOV	#RECSZE,R2	;SET POINTERS
	MOV	#DATLOC,R4
	MOV	#MRCSZE,R5
	MOV	R2,(R5)+	;SET SIZE STORE FOR 'SORTS'
	MOV	@R4,@R5		;... & DATA START ADDRESS
 
;DO SPECIAL INIT. BY PROCESS:
	ADD	RECLOC,MAXPOS	;GET ABS. LAST FLD END
	MOVB	-(R4),-(SP)	;SAVE PROCESS
	TSTB	@SP		;WHICH PROCESS?
	BNE	1$
	TSTB	OUTFRM		;SORTR,  IF OUTPUT TO BE RESTRUCTURED
	BNE	MSU3		;...THEN CONTINUE ON
	CLR	@R5		;ELSE USE 'LOCATE MODE' IN SORTS
	BR	MSU3
1$:	DECB	@SP
	BNE	MSU2		;FOR 'SORTT' ...
	PUSH	R5
	CALL	OPENIM		;... RE-OPEN THE INPUT FILE
	POP	R5
	SUB	#2,RECLOC	;... ALLOW OUTBLD PTR IN CASE
MSU2:	DECB	@SP		;WHICH PROCESS?...
	BLT	MSU3		;...SORTT, SKIP NEXT
	BGT	1$		;...SORTI, CONTINUE INIT
	MOV	RCNSIZ,OUTSZE	;...SORTA, SET OUTPUT SIZE AS REC NUM SIZ
	BR	MSU3		;...& SKIP NEXT
1$:	MOV	KEYSZE,R3	;FOR SORTI, CLEAR DATA BUFFER
	ADD	RCNSIZ,R3	;... &SET OUPUT SIZE
	MOV	R3,OUTSZE	;...SAVE IT
	ADD	@R5,R3
	CLR	-(R3)
	CMP	R3,@R5
	BNE	.-4
	MOV	OUTCNT,@R3	;SPR 8258 OUTPUT RECORD COUNT IN FIRST RECORD
	MOV	OUTCNT+2,2(R3)	;SPR 8258
	ADD	#2,2(R3)	;SPR 8258
	ADC	@R3		;SPR 8258
	PUSH	R5
	CALL	WRITEM		;DESPATCH CONTROL RECORDS
	MOV	#INCNT,R0	;POINT TO INPUT RECORD COUNT
	MOV	(R0)+,(R3)+
	MOV	(R0)+,@R3
	TST	-(R3)
	CALL	WRITEM
	POP	R5
MSU3:	CLR	NEWCNT		;SPR8258
	CLR	NEWCNT+2	;SPR 8258

	.SBTTL	  COLLECT A RECORD FROM 'SORTS':
 
	MOV	R5,R3		;SAVE R5
MGO:	PUSH	R2		;SAVE ACTIVE REGISTERS
	PUSH	R3
	MOV	#RTNPAR,R5
	CALL	RETRN
	POP	R3
	POP	R2
	MOV	ECODE,R0	;ANY ERRORS?
	BLT	MDONE		;IF ALL DONE, GO CLEAN UP
	BNE	MSERR		;OTHERWISE EXIT NOW
	MOV	@R3,R0		;GET DATA START
	MOV	(R2)+,R1	;GET RECORD SIZE
	TSTB	@SP		;IF 'SORTT' ...
	BPL	MGO1
	CLR	-(SP)		;PREPARE FOR TEST
	TSTB	OUTFRM		;IF OUTBULD...
	BEQ	1$		;...THEN
	MOV	(R0)+,@RECLOC	;MOVE OUTBLD PTR
	MOV	#2,@SP		;...AND INC REC SIZE BY TWO
1$:	CALL	READM		;... GET REAL RECORD
	SUB	@SP,R0		;... SUB FROM REC ADDR
	ADD	(SP)+,R1	;... ADD IN ANY EXTRA
MGO1:	TSTB	OUTFRM		;IF OUTPUT TO BE REORDERED
	BEQ	.+6
	JSR	R5,MBLDO	;... GO DO IT
	TST	-(R2)		;GO BACK TO RECSZE
	ADD	#1,NEWCNT+2	;COUNT OUTPUT REOCRDS
	ADC	NEWCNT
	CALL	WRITEM		;... & DESPATCH
	BR	MGO		;LOOP BACK FOR NEXT RECORD

	.SBTTL	  OUTPUT RECORDS COMPLETED
 
MDONE1:
MDONE:	CLR	R0		;PREPARE FOR WORST ...
	MOV	#BADCNT,R3
	MOV	#OUTCNT,R2	;... & CHECK NO RECORDS LOST
	CMP	(R2)+,NEWCNT
	BNE	MSEND		;COMPLAIN IF WRONG
	CMP	(R2)+,NEWCNT+2
	BNE	MSEND
;
;THE FOLLOWING 10 LINES COMMENTED OUT FOR SPR 8258
;THE COUNT OF OUTPUT RECORDS WAS DONE IN SORTP DURING RELES PROCESSING
;AND WRITTEN BACK AT MSU2:
;
;	TSTB	@SP		;OTHERWISE IF 'SORTI' ...
;	BLE	MDONE2
;	TST	(R2)+
;	MOV	@R2,@R5		; (CURRENTLY 2 GREATER THAN ...
;.IIF DF RSX ADD	#2,@R5	;****************************************
;.IIF DF DOS 	ADD	#1,@R5		; ...  # OF DATA ENTRIES ...
;	MOV	-(R2),-(R5)	; ... ON RELATIVE BASIS)
;	ADC	@R5
;	JSR	R5,MOPNU
;	.WORD	OUTFIL
MDONE2:
	MOV	#OUTCNT,R2		;SPR 8258 POINT TO OUTPUT RECORD COUNT
	MOV	#MSZEBF,R0	;PREPARE SIZE OUTPUT
	MOV	R0,R1
	TST	(R2)+
	JSR	R5,MDONE3	;... BY CVT TO OCTAL
	.WORD	35632,145000
	.WORD	2765,160400
	.WORD	230,113200
	.WORD	17,41100
	.WORD	1,103240
	.WORD	0,23420
	.WORD	0,1750
	.WORD	0,144
	.WORD	0,12
	.WORD	-1

	.SBTTL	  CONVERT RECORD COUNT & CALC ELAPSED TIME
 
MDONE3:	MOV	#57,R3		;SET ASCII BASE
	MOV	(R5)+,R4	;GET HIGH ORDER DIVIDEND
MDONE4:	ADD	#1,R3		;COUNT ...
	SUB	@R5,@R2		;.... WHILE TRIAL SUBTRACT
	SBC	-(R2)
	SUB	R4,(R2)+
	BPL	MDONE4
	MOVB	R3,(R1)+	;STORE RESULT
	ADD	(R5)+,@R2	;RESTORE REMAINDER
	ADC	-(R2)
	ADD	R4,(R2)+	;ALSO MOVES TO NEXT DIVIDEND
	TST	@R5
	BPL	MDONE3
	ADD	#60,@R2		;GET LAST DIGIT IF AT TABLE END
	MOVB	@R2,@R1
	MOVB	#40,(R0)+	;SUPPRESS LEADING ZEROS
	CMPB	@R0,#60
	BEQ	.-10
;
;	FIND ELAPSED TIME
;
	MOV	#TM2PAR,R4	;SET R4==>HEAD OF BLOCK
	GTIM$S	R4		;FIND CURRENT TIME
	BCS	5$		;IF ERROR, SKIP
	ADD	#12.,R4		;SET R4==>SECONDS
	MOV	#TIMPAR+12.,R3	;SET R3==>BEGINNING SECONDS
	SUB	-(R3),-(R4)	;SECONDS INTERV
	BGE	1$		;NO CARRY
	DEC	-2(R4)		;IF CARRY, THEN ...
	ADD	#60.,@R4	;... ADD IN 60 SECONDS
1$:	SUB	-(R3),-(R4)	;MINUTES INTERV
	BGE	2$		;NO CARRY
	DEC	-2(R4)		;IF CARRY, THEN ...
	ADD	#60.,@R4	;... ADD IN 60 MINUTES
2$:	SUB	-(R3),-(R4)	;HOURS INTERV
	BGE	3$		;NO CARRY
	ADD	#24.,@R4	;IF CARRY THEN ADD 24 HOURS
3$:	MOV	#TIMNUM,R0	;R0==>ASCII AREA FOR TIME
	MOV	(R4)+,R1	;R1 = HOURS
	CALL	$CBDAT		;CONVERT TO ASCII
	TSTB	(R0)+		;SKIP COLON
	MOV	(R4)+,R1	;R1 = MINUTES
	CALL	$CBDAT		;CONVERT
	TSTB	(R0)+		;SKIP COLON
	MOV	@R4,R1		;R1 = SECONDS
	CALL	$CBDAT		;CONVERT

;
;	PRINT THE ELAPSED TIME
;
	CALL5	PRINT		;PRINT THE ELAPSED TIME
	.WORD	ELPTIM
;
;	PRINT TOTAL RECORDS & EXIT
;
5$:	CLR	R0		;SET NO ERROR
	MOV	#TOTREC,R3
	CMP	(SP)+,(SP)+
MSEND:	JMP	COMEXT	

	.SBTTL	  RE-STRUCTURE OUTPUT RECORD WHEN SPECIFIED:
;	CALL:	JSR	R5,MBLDO
;	ASSUMES THE ORIGINAL RECORD, STARTING WITH A POINTER
;	TO THE APPROPRIATE CHAIN IN THE KEYBUILDER, IS
;	STORED IN THE BUFFER ADDRESSED AT 'RECLOC' AND THAT
;	R1 CONTAINS THE RECORD SIZE & R2 POINTS TO 'INORG'
;	(NOW ABSOLUTE VALUE) IN THE COMM. TABLE
;	ON EXIT THE REBUILT RECORD IS STORED IN THE BUFFER
;	ADDRESSED AT 'OUTLOC'.
MBLDO:	ADD	R0,R1		;GET INPUT REC END
7$:	CLRB	(R1)+		;... WHILE CLEAR ...
	CMP	R1,-4(R2)	;... POSS. EMPTY BUFF SPACE
	BLOS	7$
	MOV	(R0)+,R4	;GET OUTBLD START
	CLR	-(R2)		;PREPARE NEW REC. COUNT
	MOV	OUTLOC,R0	;... PTR TO OUT BUFFER
	TST	-(SP)		;... & TEMP. WORKSPACE
1$:	MOV	(R4)+,R1	;GET FIELD START ...
	MOV	(R4)+,@SP	;... & SIZE
	BEQ	.-4		;IF NONE, JUST DONE KEYFLDS
	BMI	6$		;IF NEG, OUTBLD DONE
	CMP	(R4)+,PTAB
	BLO	5$
	BHI	2$		;... & IT'S A CONTINUE,
	DEC	@R2
	INCB	-(R0)		;... CHECK IF DEFAULT STILL
	BEQ	2$		;IF SO, TRY THIS TIME
	DECB	@R0		;OTHERWISE LEAVE ALONE
	BNE	4$	
2$:	CLRB	@R0		;MOVE DEFAULT TO OUT BUFF
	TSTB	NORDER		;... BASED ON SPEC. SEQ.
	BNE	.+4
	COMB	@R0
	CMPB	@SP,#40		;IF FORCE UNCONDITIONAL ...
	BEQ	3$		;... MUST MOVE SPEC. CHAR
	BICB	#200,@R1	;ENSURING 7-BIT VALUE ...
	CMPB	@R1,@SP		;IF CONDITION NOT MET ...
	BNE	.+6		;... LEAVE DEFAULT
3$:	SWAB	@SP		;OTHERWISE STORE SPEC. CHAR
	MOVB	@SP,@R0
4$:	INC	R0		;MOVE TO NEXT BYTE
	INC	@R2		;... & COUNT THIS ONE
	BR	1$		;BACK FOR MORE!
5$:	ADD	@SP,@R2		;FOR OTHER DATA ...
	MOVB	(R1)+,(R0)+	;... BLD CNT & DO MOVE
	DEC	@SP
	BNE	.-4
	BR	1$		;THEN BACK FOR MORE
6$:	TST	(SP)+		;CLEAN-UP WHEN ALL DONE
	MOV	(R2)+,R1	;RETURN NEW RECORD SIZE
	RTS	R5

	.SBTTL	DATA AREA
 
	STRNG	MSRTER,<?SORT ERROR - CODE: %1O>
	STRNG	BADCNT,<? # OF OUTPUT RECORDS DOES NOT MATCH # INPUT> ;*44*
TOTREC:	TOTRC0-1$
	1$
1$:	.ASCII	"TOTAL RECORDS SORTED:"
MSZEBF:	.BLKB	12
TOTRC0:	.EVEN
ELPTIM:	ZZZ-1$
	1$
1$:	.ASCII	"ELAPSED REAL TIME: "
TIMNUM:	.ASCII	"XX:XX:XX"
ZZZ:	.EVEN
;
;	TIME PARAMETERS
;
TM2PAR:	.BLKW	8.
;
;	PARAMETER LIST FOR SORTS SUBROUTINE CALLS
;
MRGPAR:	.BYTE	1,0
	.WORD	ECODE
;
RTNPAR:	.BYTE	4,0
	.WORD	ECODE
MRCSZE:	.WORD	0
	.WORD	0
	.WORD	OUTLOC
 
;
	.END
