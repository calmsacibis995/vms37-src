TITLE QIORMS,<I/O ROUTINES FOR SORT>,46,10-OCT-79,REILLY
	.IF	EQ ORGX-1		;FOR SEQUENTIAL ONLY
	.PSECT	QIORMS,OVR
	.ENDC
	.IF	EQ ORGX-2		;FOR RELATIVE ONLY
	.PSECT	RIORMS,OVR
	.TITLE	RIORMS
	.ENDC
	.IF	EQ ORGX-3		;FOR INDEXED ONLY
	.PSECT	XIORMS,OVR
	.TITLE	XIORMS
	.ENDC
 
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
; 
;
;VERSION NO.:-		V002
;			.03A
; MODIFICATIONS
;
; 45 10-OCT-79 REILLY: MAKE SURE THAT EVERYTHING IS CLEANED UP BEFORE STARTING
;		       OVER.
;

	.SBTTL	  MISCELLANEOUS DEFINITIONS:
 
;GLOBAL LOCATIONS IN OTHER MODULES:
 
	.GLOBL	$SWKHI,$RXBFA,$RSCTG,$SMULT,$SDIVD,$RSDNS,$RSDNA
	WAMAC		;DEFINE WORK AREA LOCATIONS

 
;GLOBAL LOCATIONS IN THIS MODULE:
 
	.GLOBL	GCMLB,BLOCKI,BLOCKO,BUCKI,BUCKO,CLVALI,CLVALO
	.GLOBL	GCMLUN,MSGLUN,INLUN,OUTLUN,XLUN,INALQ,RCNSIZ
	.GLOBL	KEYNMI,KEYNMO,CONTGI,CONTGO,ALLCO,ALLCI,SBGBF
	.GLOBL	SDVDNA,SDVDNS,OUTAPP,WINSTR
 
;GLOBAL ENTRY POINTS IN OTHER MODULES:
 
	.GLOBL	SERROR,ENDS
 
;GLOBAL ENTRY POINTS IN THIS MODULE:
 
	.GLOBL	OPENIC,OPENIM,OPENIP,CLOSE,CLOSEI,GETRCN,INITIL
	.GLOBL	READC,READP,READM,WRITEM,INFERR,COMEXT,SNDMSG
	.GLOBL	PARSNM
 
;I/O MACROS
 
	.MCALL	FAB$B,RAB$B,$GNCAL,$RBCAL,$FBCAL,$RMSTAT
	.GLOBL	$RTBF1,$RTNCB,$ALBUF,$CLTFN
	.IF	EQ ORGX-3		;FOR INDEXED ONLY
	.GLOBL	$ALNCB
	.ENDC
	.MCALL	POOL$B,ORG$,$INIT,GCMLB$
	.MCALL	IRAOF$,IFAOF$,BDBOF$,IDXOF$
	IFAOF$	DEF$SZ
	IRAOF$	DEF$SZ
	BDBOF$	DEF$SZ
	IDXOF$	DEF$SZ
	$RBCAL
	$FBCAL
	$GNCAL
	$RMSTAT	DFIN$L
 
IDX=4

	.SBTTL	  A)  'INITIL' - DO ANY INITIALIZATION
 
;+
;	THIS ROUTINE ACCOMPLISHES TWO TASKS:
;	1)	FOR THE FIRST TIME THRU ONLY, IT ISSUES AN I/O INIT.
;	2)	IT CLEANS UP ANY DYNAMIC SPACE OUTSTANDING.
;-
 
;+
;INPUT:
;	R2==>LOW END OF WORKSPACE
;
;OUTPUT:
;	R2==>UPDATED LOW END
;-
 
INITIL:	PUSH	R2		;SAVE R2
	TST	INITF		;BEEN HERE BEFOR?
	BNE	1$		;YES, SKIP NEXT
	$INIT			;INITIALIZE RMS
	DEC	INITF		;SET FLAG
	MOV	TWOIDX,R1	;SET TOTAL SIZE(2 IFABS)
	MOV	#IF$BLN,R0	;SET SIZE OF BLOCK
	CALL	$RTNCB		;GIVE TO RMS
;
;	SECOND TIME THRU
;
1$:
	.IF	EQ ORGX-3	;FOR INDEX
	MOV	IDXSIZ,R1	;ANY IDX BLOCK OUTSTANDING?
	BEQ	2$		;NO
	SUB	TWOIDX,R1	;ALL EXCEPT TWO FOR IFABS
	BEQ	2$
	MOV	#ID$BLN,R0	;SET BLOCK SIZ
	CALL	$ALNCB		;GET THE SPACE BACK
	.ENDC
2$:	MOV	TWOIDX,R1	;SET TOTAL SIZE(2 IFABS)
	MOV	R1,IDXSIZ	;SET COUNTER
	ADD	R1,@SP		;UPDATE CORE POINTER
	MOV	IOBSIZ,R1	;PICK UP OUTSTANDING I/O BUFFER SPACE
	BEQ	3$		;IF NONE, SKIP
	CALL	$ALBUF		;GRAB IT BACK 
3$:	MOV	#1024.,R1	;NOW ALLOC TMP IOBUF OF 2 BLKS
	MOV	R1,IOBSIZ	;SET COUNTER
	MOV	@SP,R2		;GET CORE PTR
	ADD	TENIDX,R2	;OFFSET TEMP I/O BUF TO ALLOW FOR
	MOV	R2,@SP		;... ANY EXTRA KEYS AT OPENIP.
	ADD	R1,@SP		;UPDATE IT
	CALL	$RTBF1		;GIVE TO RMS
	MOV	#GBVNUM,R1	;R1 = NUMBER OF VARIABLE WORDS
	MOV	#ALLCI,R2	;R2==>START
4$:	CLR	(R2)+		;CLEAR OUT
	DEC	R1
	BGT	4$
	POP	R2
	RETURN

	.SBTTL	  B)  'OPENIC' - OPEN THE SPEC FILE
 
;	CALL:	JSR	PC,OPENIC
 
OPENIC:	PUSH	R0			;SAVE R0
	MOV	#XERBK,COMERR		;SET FOR ERORR
	MOV	#OPNIF,XERMG
	MOV	#COMFAB,R0		;R0==>FAB
	$STORE	#SDNA,DNA,R0		;STORE THE DEFAULT EXTENSION
	$STORE	#SDNS,DNS,R0		;...& ITS SIZE
	$STORE	#SFNA,FNA,R0		;STORE THE FILE NAME ADDR
	$STORE	SFNS,FNS,R0		;...& ITS SIZE
	$STORE	XLUN,LCH,R0		;SET THE LUN
	CALL	OPNCOM			;DO THE COMMON OPEN
	MOV	#INRAB,R0		;*46* R0==>INPUT RAB
	$STORE	#0,MBC,R0		;*46* CLEAR MULTI-BLOCK COUNT
	CALL	CONCOM			;DO THE COMMON CONNECT
	$STORE	R4,UBF,R0		;SET COMMAND BUFFER
	$STORE	#80.,USZ,R0		;...& ITS SIZE
	POP	R0
OPRET:	RETURN
;
;	OPNCOM - OPEN COMMON CODE
;
OPNCOM:	MOV	#FABPTR,R5		;SET FAB POINTER
	$STORE	#FB$GET,FAC,R0		;SET FOR READ ACCESS
	$OPEN				;OPEN THE FILE
	$COMPA	#0,STS,R0		;ANY ERRORS?
	BLT	OPXXX			;YES
	$FETCH	INIFI,IFI,R0		;*46* REMEMBER FOR CLOSE
	RETURN				;NO
OPXXX:	JMP	IOERR			;YES, FIELD THEM
;
;	CONNECT COMMON CODE
;
CONCOM:	$STORE	#RB$SEQ,RAC,R0		;SET FOR SEQUENTIAL ACCESS
CONCM1:	MOV	#INRPR,R5		;SET RAB POINTER
	$CONNECT			;CONNECT THE FAB-RAB PAIR
	$COMPA	#0,STS,R0		;ANY ERRORS?
	BLT	OPXXX			;YES
	RETURN				;NO

	.SBTTL	  C)  'OPENIP' - OPEN THE INPUT FILE FOR FIRST TIME
 
;+
;	THIS ROUTINE ACCOMPLISHES FOUR CHORES:
;	1)  COMPUTE THE BUFFER(S) SIZE(S) AND ALLOCATE IT FROM
;		HIGH WORKSPACE.
;	2)  IF FILE ORGANIZATION IS INDEX, THEN ALLOCATE
;		EXTRA BLOCKS FROM LOW WORKSPACE.
;	3)  OPEN THE INPUT FILE.
;	4)  DETERMINE OUTPUT FILE CHARACTERISTICS FROM INPUT FILE
;		AND USER SWITCHES.
;-
 
;+
;INPUT:
;
;	R2==>LOW END OF WORKSPACE
;	R3==>HIGH END OF WORKSPACE
;
;OUTPUT:
;
;	R2==>UPDATED LOW END OF WORKSPACE
;	R3==>UPDATED HIGH END OF WORKSPACE
;
;-
;	CALL	JSR	PC,OPENIP
 
OPENIP:	PUSH	R0
	SUB	TENIDX,R2		;RESET LOW CORE PTR FROM...
	SUB	IOBSIZ,R2		;EARLIER OFFSET
	PUSH	R2
	CMPB	#IDX,INORG		;IF INPUT ORGANIZATION IS INDEX
	BNE	24$			;...THEN...
	.IF	EQ ORGX-3		;FOR INDEXED ONLY
	MOVB	KEYNMI,R1		;...SET ASIDE SPACE FOR THE KEYS
	BNE	31$			;...(USER SPECIFIED)
	MOV	#10.,R1			;...(DEFAULT TO 10.)
31$:	CMP	R1,#10.			;...IF > 10 , 
	BGT	30$			;...COMPLAIN
	MOV	#ID$BLN,R0		;...(BLOCK SIZE)
	PUSH	R3			;SAVE R3(DEST BY MULT)
	CALL	$SMULT			;...CALCULATE TOTAL AMOUNT
	POP	R3			;RECOVER
	MOV	R0,R1			;RECOVER SIZE
	ADD	R1,IDXSIZ		;...SAVE FOR LATER RETURN
	MOV	#ID$BLN,R0		;...MULT WIPED IT OUT
	MOV	@SP,R2			;...START ADDR
	ADD	R1,@SP			;...UPDATE CORE POINTER
	CALL	$RTNCB			;...A BLOCK OF UP TO 10
	BR	24$
	.ENDC
;
30$:	MOV	#INAPRF,INERMG		;SET 'INAPPROPRATE' ERROR
	MOV	#INERBK,COMERR
	JMP	IOERR

;
;	STUFF FAB & RAB AND OPEN & CONNECT
;
24$:	MOV	#COMFAB,R0		;R0==>FAB
	MOV	#OPNIF,INERMG		;SET UP INPUT ERROR
	MOV	#INERBK,COMERR
	$STORE	#INDNA,DNA,R0		;SET DEFAULT NAME ADDR
	$STORE	#INDNS,DNS,R0		;...& ITS SIZE
	$STORE	#INFNA,FNA,R0		;SET FILE NAME STRING ADDR
	$STORE	INFNS,FNS,R0		;...& ITS SIZE
	$STORE	INLUN,LCH,R0		;SET INPUT LUN
	CALL	OPNCOM			;DO THE COMMON OPEN
	$FETCH	INIFI,IFI,R0		;REMEMBER FOR CLOSE
	$FETCH	INSZE,MRS,R0		;PICK UP MAX REC SIZE
	$COMPA	RECSZE,MRS,R0		;FOR BOTH, WILL RECORD FIT IN BUFF?
	BHIS	26$			;YES, CONTINUE
	MOV	#BADRSZ,INERMG		;BAD RECORD SIZE ERROR
	JMP	IOERR
26$:
	.IF	EQ ORGX-1		;SEQUENTIAL ONLY
	$COMPA	#FB$REL,ORG,R0		;IF RELATIVE THEN
	BEQ	30$			;...ERROR
	.ENDC
;
;	 DETERMINE OUTPUT FILE CHARACTERISTICS
;
 
	$FETCH	INORG,ORG,R0		;SAVE INPUT ORGANIZATION
	MOVB	OUTORG,R2		;IF USER HAS SPECIFIED...
	BEQ	1$			;...AN ORGANIZATION...
	CALL	TRANSL			;... DECODE IT ...
	$STORE	R2,ORG,R0		;... & SET IT IN
	BR	2$			;ELSE...
1$:	$STORE	#FB$SEQ,ORG,R0		;...SET TO SEQUENTIAL
2$:	CMPB	PROCESS,#1		;WHICH PROCESS?
	BLE	4$			;SORTR/T
	MOVB	OUTRFM,R2		;IF USER HAS SPECIFIED REC FRM...
	BEQ	3$			;
	CALL	TRANSL			;... DECODE IT ...
	$STORE	R2,RFM,R0		;... & SET IT IN
	BR	9$			;ELSE...
3$:	$STORE	#FB$FIX,RFM,R0		;... USE FIXED FORMAT
	BR	9$

;
4$:	MOVB	OUTRFM,R2		;SORTR/T: IF USER HAS SPECIFIED REC FRM
	BEQ	7$			;...DECODE IT
	CALL	TRANSL			;... DECODE IT...
	$STORE	R2,RFM,R0		;... & SET IT IN
	BR	9$
7$:	$COMPA	#FB$STM,RFM,R0		;UNLESS IT IS STREAM ASCII
	BNE	8$
	$STORE	#FB$VAR,RFM,R0		;... THEN USE VARIABLE
8$:
9$:	$TESTB	#FB$FTN,RAT,R0		;IF FORTRAN BIT...
	BNE	11$			;...NOT SET, THEN
	$SET	#FB$CR,RAT,R0		;...SET CR BIT
11$:
 
	.IF	EQ ORGX-1		;FOR SEQUENTIAL ONLY
	$COMPA	#FB$REL,ORG,R0		;IF RELATIVE THEN...
	BEQ	29$			;..ERROR
	.ENDC
	.IF	LE ORGX-2		;FOR NON-INDEXED
	$COMPA	#FB$IDX,ORG,R0		;IS THE ORG INDEXED
	BNE	10$			;NO, WE'RE OKAY
29$:	MOV	#INAPRF,OTERMG		;SET ERROR MESAGE
	MOV	#OTERBK,COMERR		
	JMP	IOERR
	.ENDC
;
;	DETERMINE ALLOCATION
;
10$:	MOV	COMFAB+O$ALQ,INALQ	;SAVE FOR LATER
	MOV	COMFAB+O$ALQ1,INALQ+2	;DITTO
	TSTB	CONTGO			;HAS USER SPEC CONTIG FILE?
	BEQ	A2			;NO
	$SET	#FB$CTG,FOP,R0		;SET CONTIG BIT
A2:	TSTB	CONTGI			;AND FOR TEMP FILE?
	BEQ	A1			;NO
	INC	$RSCTG			;SET IT
A1:	MOVB	SDVDNS,$RSDNS		;SET IN TEMP FILE DEVICE SIZE
	MOV	#SDVDNA,$RSDNA		;AND ADDR
;
;	RETURN TEMP I/O BUFFERS
;
	PUSH	R0
	MOV	#1024.,R1		;TWO BLOCKS
	CALL	$ALBUF			;GET IT BACK
	POP	R0

;
;	SET INPUT BUFFER SIZE
;
	CMPB	#FB$SEQ,INORG		;IF SEQUENTIAL INPUT...
	BNE	13$			;...THEN...
	$TESTB	#FB$SQD,DEV,R0		;...IF TAPE DEVICE...
	BEQ	12$			;...THEN...
	MOV	BLOCKI,R1		;...CHECK BLOCK INPUT
	BNE	15$			;...IF SET, SKIP NEXT
12$:	$STORE	#0,BKS,R0		;FOR RSTS/S ZERO OUT ANY UNDEF TRASH
13$:	MOV	BUCKI,R1		;CHECK BUCKET IN
	BNE	14$			;...IF SET, SKIP NEXT
	$FETCH	R1,BKS,R0		;IF NO USER SPEC, GET INPUT
	BNE	53$			;...IF SET, SKIP NEXT
	MOV	#1,R1			;DEFAULT OF 1 BLOCK
53$:	BIC	#177400,R1		;JUST TO BE SAFE!!!!!!
	MOV	R1,BUCKI		;...HOLD FOR LATER
14$:	CMPB	#FB$SEQ,INORG		;IF SEQ INPUT...
	BNE	54$			;...THEN...
	MOVB	R1,INRAB+O$MBC		;ENABLE BIG BLOCK
	BR	55$			;...AND SKIP NEXT
54$:	CMPB	#FB$IDX,INORG		;IF INDEXED INPUT...
	BNE	55$			;...THEN...
	ASL	R1			;USE A MBF OF 2
55$:	ASL	R1			;MULT BY 2
	SWAB	R1			;NOW 512.
;
;	SET OUTPUT BUFFER SIZE
;
15$:	$COMPA	#FB$SEQ,ORG,R0		;IF SEQUENTIAL OUTPUT...
	BNE	16$			;...THEN...
	MOV	BLOCKO,R2		;...CHECK BLOCK OUT
	$STORE	R2,BLS,R0		;...SET BLOCK SIZE
	BNE	18$			;...IF SET, SKIP NEXT
16$:	MOV	BUCKO,R2		;CHECK BUCKET OUT
	BNE	56$			;...IF SET, SKIP NEXT
	INC	R2			;...DEFAULT TO 1 BLOCK
	$COMPA	#FB$SEQ,ORG,R0		;...OR IF BIG BLOCK SEQ
	BEQ	17$			;...DO NOT COPY INPUT
	MOV	BUCKI,R2		;...ELSE PICK UP INPUT SIZE
56$:	$STORE	R2,BKS,R0		;...& STICK IT AWAY
17$:	$COMPA	#FB$IDX,ORG,R0		;IF INDEXED OUTPUT...
	BNE	57$			;...THEN...
	ASL	R2			;USE A MBF OF 2
57$:	ASL	R2			;MULT BY 2
	SWAB	R2			;NOW BY 512
18$:	MOV	R2,OTBSIZ		;SAVE OFR LATER

;
;	DETERMINE MAX OR TOTAL BUFFER SPACE
;
	CMPB	PROCES,#1		;IF PROCESS IS TAG
	BNE	19$			;...THEN...
	ADD	R2,R1			;...SUM THE TWO BUFFERS
	BR	20$			;...& FINISH
19$:	CMP	R1,R2			;ELSE FIND MAX
	BHIS	20$
	MOV	R2,R1
;
;	ALLOCATE THE BUFFER
;
20$:	CLR	SBGBF			;CLEAR BIG BUF
	$TESTB	#FB$REC!FB$SQD,DEV,R0	;IF INPUT IS NOT TAPE OR UNIT REC
	BNE	22$			;...AND
	CMPB	#FB$SEQ,INORG		;...IF SEQ FILE...
	BNE	22$			;...AND...
	CMP	BUCKI,#1		;...IF NO USER BUCKET
	BGT	22$			;...THEN...
	MOV	R3,R1			;PICK UP HI CORE
	SUB	@SP,R1			;SUB LO CORE
	CLC				;...GIVING CORE SPACE
	ROR	R1			;NOW HALF
	ASR	R1			;NOW QUARTER
	BIC	#100777,R1		;MAKE NUMBER OF BLOCKS
	MOV	R1,R0			;TRANSFER
	SWAB	R0			;DIV BY 256
	ASR	R0			;NOW BY 512
	MOVB	R0,INRAB+O$MBC		;SET INPUT MULTI-BLOCK
	MOV	R0,SBGBF		;SAVE IT
22$:	ADD	#3,R1			;ROUND TO NEXT HI MULT OF 4
	BIC	#3,R1
	CMP	R1,#1024.		;IF LESS THAN TWO BLOCKS
	BHIS	21$	
	MOV	#1024.,R1		;MINIMUM OF 2 BLOCKS
21$:	SUB	R1,R3			;ALLOC UP FROM BOTTOM
	BIC	#3,R3			;ROUND TO MULT OF 4
	MOV	R3,R2			;R2 IS INPUT FOR CALL
	MOV	R1,IOBSIZ		;UPDATE BUFSIZ
	CALL	$RTBF1			;GIVE IT TO RMS
;
;	CLEAN UP
;
	MOV	#INRAB,R0		;R1==>INPUT RAB
	CALL	CONCOM			;COMMON CONNECT
	$STORE	RECLOC,UBF,R0		;SET THE RECORD BUFFER
	$STORE	RECSZE,USZ,R0		;...& ITS SIZE
	POP	R2
	POP	R0
	RETURN

	.SBTTL	  D)  'OPENIM' - OPEN THE INPUT FILE
 
;+
;	THIS ROUTINE RECONNECTS THE INPUT FILE FOR 'RFA' ACCESS
;	IT IS USED ONLY FOR TAG SORTS.
;-
;	CALL	JSR	PC,OPENIM
 
OPENIM:	PUSH	R0			;ENTRY FROM SORTM MODULE
	MOV	#INRAB,R0		;R0==>INRAB
	$STORE	#RB$RFA,RAC,R0		;SET RFA ACCESS
	MOV	#OPNIF,INERMG		;SET UP FOR ERROR
	MOV	#INERBK,COMERR
	$STORE	#0,MBC,R0		;CLEAR OUT MULTI-BLOCK COUNT
	CALL	CONCM1			;DO THE COMMON CONNECT
	POP	R0
	RETURN

	.SBTTL	  E)  'OPENOM' - OPEN THE OUTPUT FILE:
 
;+
;	THIS ROUTINE OPENS THE OUTPUT FILE.  ITS CHARACTERISTICS
;	HAVE BEEN DETERMINED EARLIER, AND THE FAB FILLED IN.  IT
;	IS CALLED ONLY FROM WRITEM(INTERNALLY).
;-
;	CALL:	JSR	PC,OPENOM
 
 
OPENOM:	PUSH	R0
	PUSH	R1
	PUSH	R2
	PUSH	R3
	MOV	#COMFAB,R0		;R0==>FAB
	$COMPA	#FB$SEQ,ORG,R0		;IF NOT SEQ OUTPUT...
	BNE	1$			;...THEN SKIP THIS NICE OPTIMIZATION
	CLRB	OUTRAB+O$MBC		;CLEAR OUT ANY LEFT OVERS
	MOV	WORKHI,R1		;PCIK UP HI LIMIT
	MOV	$RXBFA,R2		;PICK UP START OF 'XTRA' BUF
	ADD	#3,R2			;ROUND TO MULT OF 4
	BIC	#3,R2			;ROUND TO MULT OF 4
	SUB	R2,R1			;...& ITS SIZE
	BEQ	1$			;...IF ZERO, NO BIG BLOCKING
	ADD	R1,IOBSIZ		;UPDATE COUNTER
	CALL	$RTBF1			;GIVE TO RMS
	BIC	#511.,R1		;ROUND DOWN
	SWAB	R1
	ASR	R1			;DIVDE BY 512.
	MOVB	R1,OUTRAB+O$MBC		;SET THE BIG BLOCK FEATURE
1$:	CLR	R3
	MOV	ALLCO,R0		;DID USER SPECIFY?
	BNE	12$			;YES
	CMPB	PROCES,#2		;NO, AND IF PROCESS IS SORTI/A
	BLT	10$			;...THEN...
	MOV	OUTCNT+2,R0		;PICK UP RECORDS
	MOV	OUTCNT,R3		;...AND HI ORDER
	MOV	#512.,R1		;DIVIDE BY 512>(BYTES IN BLOCK)
	CALL	$SDIVD
	INC	R0			;ADD 1 BLOCK FOR LUCK
	MOV	OUTSZE,R1		;PICK UP OUPUT REC SIZE
	CMPB	#FB$FIX,COMFAB+O$RFM	;IF NOT FIXED...
	BEQ	11$
	CMPB	(R1)+,(R1)+		;ADD IN RECORD OVERHEAD
11$:	CALL	$SMULT			;MULT
12$:	MOV	R0,COMFAB+O$ALQ0	;SET IN LOW ORDER ALLOC
	MOV	R3,COMFAB+O$ALQ1	;...AND HI ORDER

10$:	MOV	#COMFAB,R0		;REPLACE R0
	MOV	#FABPTR,R5		;R5==>OUTPUT FAB PAR
	MOV	#OPNOF,OTERMG		;SET UP FOR ERROR
	MOV	#OTERBK,COMERR
	$STORE	#OUTDNA,DNA,R0		;SET DEFAULT FILE NAME
	$STORE	#OUTDNS,DNS,R0		;...& ITS SIZE
	$STORE	#OUTFNA,FNA,R0		;SET FILE NAME STRING ADDR
	$STORE	OUTFNS,FNS,R0		;...& ITS SIZE
	$STORE	#FB$PUT,FAC,R0		;SET FOR OUTPUT ONLY
	$STORE	OUTLUN,LCH,R0		;SET LUN
	CMP	CLVALO,#256.		;**RSTS/E-RMS KLUDGE
	BLT	3$			;IF CLUSTER IS 256...
	MOV	#255.,CLVALO		;MAKE IT 255 (A BYTE!!!)
3$:	$STORE	CLVALO,RTV,R0		;SET CLUSTERSIZE FOR RSTS/E
	CLR	REFOUT			;CLEAR THE REFORMATTED OUTPUT FLG
	MOV	OUTSZE,R2		;PICK UP OUTSZE SPEC
	BNE	5$			;IF THERE IS NONE...
	$COMPA	#FB$FIX,RFM,R0		;IF OUTPUT IS NOT FIXED
	BEQ	4$			;...THEN...
	MOV	INSZE,R2		;USE INPUT SIZE
	BR	6$
4$:	MOV	INSZE,R2		;IF FIXED, USE INPUT SIZE
	BNE	5$			;...BUT IF ZERO
	MOV	R1,R2			;USE ACTUAL RECORD SIZE
5$:	INC	REFOUT			;SET REFORMATTED OUTPUT
6$:	$STORE	R2,MRS,R0		;SET MAX REC
	MOV	R2,OUTRAB+O$RSZ		;AND RECORD SIZE
	TSTB	OUTAPP			;IS IT APPEND TO OUTPUT?
	BEQ	7$			;NO, GO CREAT
	$OPEN				;YES, OPEN
	MOV	#RB$EOF,OUTRAB+O$ROP	;SET POSITION TO EOF
	BR	8$			;TEST
7$:	$CREATE
8$:	$COMPA	#0,STS,R0		;ANY ERRORS?
	BLT	IRX			;YES
	$FETCH	OUTIFI,IFI,R0		;SAVE THE IFI FOR CLOSE
	MOV	#OUTRPR,R5		;R5==>OUTPUT RAB PAR
	$CONNECT
	TST	OUTRAB+O$STS		;ANY ERRORS?
	BLT	IRX			;YES
	TST	WINSTR			;IS IT NON ZERO?
	BEQ	9$			;NO, IGNORE
	DEC	WINSTR			;SUBTRACT ONE
9$:	POP	R3
	POP	R2
	POP	R1
	POP	R0
	RETURN

	.SBTTL	  F)  'READC' - READ THE SPEC FILE
 
;+
;
;	THIS ROUTINE READS THE SPECIFICATION FILE.
;
;INPUTS:
;	NONE
;
;OUTPUTS:
;	R1 = RECORD SIZE (BYTE COUNT)
;	Z-BIT SET ON EOF
;
;-
 
READC:	MOV	#INRAB,R0		;R0==>RAB
	MOV	#XERBK,COMERR		;SET UP FOR EROR
	MOV	#BADRED,XERMG
	CALL	REDCM1			;DO THE COMMON READ
	RETURN

	.SBTTL	  G)  'READP' - READ THE INPUT FILE:
 
;+
;	THIS ROUTINE READS ONE RECORD FROM THE INPUT FILE, REGARDLESS
;	OF ACCESS METHOD.
;-
 
;+
;INPUT:
;	NONE
;
;OUTPUT:	
;	R0==>RECORD ADDRESS
;	R1 = RECORD SIZE(BYTE COUNT)
;	Z-BIT SET ON EOF
;-
;	CALL:	JSR	PC,READP
 
 
READP:	MOV	#INRAB,R0		;SET R0==>INRAB
 
REDCOM:	MOV	#BADRED,INERMG		;SET ERROR MESSAGE
	MOV	#INERBK,COMERR
REDCM1:	MOV	#INRPR,R5
	$GET
	$COMPA	#0,STS,R0		;ANY ERRORS?
	BGE	R1X			;NO
	$COMPA	#ER$RTB,STS,R0		;RECORD TOO BIG?
	BNE	R2X			;NO
	MOV	#BADRSZ,INERMG		;SET NEW ERROR MESSAGE
IRX:	JMP	IOERX			;...AND FIELD IT
R2X:	$COMPA	#ER$EOF,STS,R0		;END OF FILE?
	BNE	IRX			;NO, SOMETHING ELSE
	CLR	R1			;SET BYTE COUNT = 0 & Z-BIT
	RETURN
;
R1X:	$FETCH	R1,RSZ,R0		;PICK UP BYTE COUNT
	$FETCH	R0,RBF,R0		;PICK UP RECORD BUFFER ADDRESS
	CLZ				;CLEAR ZERO BIT
	RETURN

	.SBTTL	  H)  'READM' - READ INPUT FILE RANDOMLY
 
;	CALL	JSR	PC,READM
 
;+
;INPUT:
;	R0==>RECORD FILE ADDRESS
;
;OUTPUT:
;	R0==>RECORD BUFFER
;	R1 = RECORD SIZE(BYTE COUNT)
;-
 
READM:	MOV	R0,R1			;SAVE POINTER
	MOV	#INRAB,R0		;R0==>INRAB
	$STORE	(R1)+,RFA,R0		;SET IN RECORD FILE ADDR
	CALL	REDCOM			;EXEC READ COMMON CODE
	RETURN

	.SBTTL	  I)  'WRITEM' - WRITE A RECORD TO THE OUTPUT FILE:
 
;	CALL:	JSR	PC,WRITEM
 
;ON ENTRY R1==>BYTE COUNT
;	  OUTLOC==>RECORD
 
WRITEM:	MOV	#OUTRAB,R0		;R0==>OUTRAB
	TST	OUTIFI			;IS THE OUTPUT FILE OPEN?
	BNE	1$			;YES, SKIP THE OPEN
	CALL	OPENOM
1$:	MOV	#OUTRPR,R5		;R5==>OUTPUT RAB PTR
	TST	REFOUT			;REFORMATTED OUTPUT?
	BNE	2$			;YES, SKIP NEXT
	$STORE	R1,RSZ,R0		;SET THE RECORD SIZE
2$:	$STORE	OUTLOC,RBF,R0		;SET THE BUFFER ADDRESS
	ADD	WINSTR,OUTRAB+O$RBF	;OFFSET BUFFER FOR WINDOWING
	MOV	#BADWRT,OTERMG		;SET ERROR CODE
	MOV	#OTERBK,COMERR
	$PUT
	$COMPA	#0,STS,R0		;ANY ERRORS?
	BGE	4$			;NO
	$COMPA	#ER$RSZ,STS,R0		;BAD RECORD SIZE?
	BNE	IRX			;NO, SOMETHING ELSE
	MOV	#BADRSZ,OTERMG		;YES, TELL THEM
	BR	IRX
4$:	RETURN

	.SBTTL	  J)  'CLOSEI' - CLOSE THE INPUT FILE:
 
;	CALL:	JSR	PC,CLOSEI
 
CLOSEI:	PUSH	R0
	MOV	#INRPR,R5		;...(R5==>INPUT RAB PAR)
	$DISCONNECT			;DISCONNECT
	CMPB	PROCES,#1		;IF TAG SORT...
	BEQ	2$			;...THEN LEAVE
	MOV	#INIFI,R0		;SET FOR INPUT FILE
	CALL	COMCLS			;CALL THE COMMON CLOSE
	CMP	OTBSIZ,#1024.		;IS THE OUTPUT BLOCK BIGGER THAN 2?
	BHI	2$			;THEN SKIP THIS OPTIMAZTION
	PUSH	R1
	PUSH	R2
	MOV	IOBSIZ,R1		;PICK UP OLD I/O BUFFER
	CMP	R1,#1024.		;IF LESS OR EQUAL THAN TWO BLOCKS...
	BLOS	3$			;... SKIP NEXT
	CALL	$ALBUF			;GET IT BACK FROM RMS
	BCS	3$			;SOMETHING WRONG
	MOV	#1024.,R1		;KEEP A MIN OF TWO BLOCKS
	MOV	IOBSIZ,R2		;CALC START ADDR
	MOV	R1,IOBSIZ		;UPDATE COUNTER
	SUB	R1,R2			;NOW ADDR OF TWO BLOCKS
	ADD	WORKHI,R2		;
	CALL	$RTBF1			;GIVE THEM TO RMS
	MOV	R2,$SWKHI		;UPDATE NEW WORKHI IN 'SORTS'
	MOV	R2,WORKHI		; DITTO IN 'SORT'
3$:	POP	R2
	POP	R1
2$:	POP	R0
	RETURN

	.SBTTL	  K)  'CLOSE' - CLOSE THE SPEC FILE:
 
;	CALL:	JSR	PC,CLOSE
;
;	THIS FILE CAN BE CLOSED WITHOUT RESTORING THE IFI, BECAUSE
;	NO OTHER FILE HAS BEEN OPENED IN BETWEEN.
;
 
COMCLS:	MOV	@R0,COMFAB+O$IFI	;SET THE INTERNAL FILE ID
	CLR	@R0			;CLEAR THE SWITCH
	CMP	R0,#INIFI		;INPUT FILE?
	BNE	AB			;NO
CLOSE:	MOV	#INRPR,R5		;IN RAB PTR
	BR	AC
AB:	MOV	#OUTRPR,R5		;OUTPUT POINTER
AC:	$DISCONNECT
	MOV	#FABPTR,R5
	$CLOSE
	RETURN
;
 

	.SBTTL	  L)  'COMEXT' - I/O ERROR ROUTINE
 
INFERR:	MOV	R3,INERMG		;SET THE ERROR TEXT
	MOV	#INERBK,COMERR		;...& STICK IN INDICATOR
	MOV	#300,R0			;SET FOR FILE NAME
	BR	COMEXT			;...& CONTINUE
IOERR:	TST	(SP)+			;DUMP THE STACK
IOERX:
;
;	COMMON  EXIT  FOR  ALL  ERRORS
;
COMEXT:	PUSH	R0
	PUSH	R2
	PUSH	R5
	PUSH	COMFAB+O$STS		;SAVE FAB STATUS
	TST	INIFI			;IS IT OPEN?
	BEQ	1$			;CLOSED, CONTINUE
	MOV	#INIFI,R0		;SET FOR INPUT FILE
	CALL	COMCLS			;CALL COMMON CLOSE
1$:	TST	OUTIFI			;IS IT OPEN?
	BEQ	2$			;CLOSED, CONTINUE
	MOV	#OUTIFI,R0		;SET INTERNAL ID
	CALL	COMCLS			;YES,CLOSE IT
2$:	CMP	COMERR,#XERBK		;CALLED FROM SORTC?
	BNE	3$			;NO, DO A CALL TO ENDS
	CALL	CLOSE			;YES, CLOSE THE SPEC FILE
	BR	6$			;...AND SKIP CALL TO ENDS
3$:	MOV	#PARM,R5		;GET PARAMETER LIST
	CALL	ENDS			;CLOSE OUT SORTS
6$:	POP	COMFAB+O$STS		;RESTORE FAB STATUS
	POP	R5
	POP	R2
	POP	R0
	BEQ	4$			;ZERO ERROR OUT
	CMP	R0,#4			;IS THE ERROR FROM SORTS & I/O?
	BLOS	5$			;YES
	CMP	R0,#100			;IS IT AN ERROR CODE?
	BLOS	4$			;YES, SKIP NEXT
	MOV	COMERR,R3		;SET R3==>ERROR BLOCK
	MOV	(R3)+,R1		;ADDR OF FILE NAME
	MOV	(R3)+,R2		;...& ITS SIZE
	MOV	@R3,R3			;R3==>MESSAGE TEXT
	NEG	R2			;INIDCATE ASCII
	$FETCH	R0,STS,R0		;PICK UP ERROR CODE
4$:	JMP	SERROR			;JUMP TO ERROR HANDLER
;
5$:	MOV	#TMPFLR,R3		;SET TEMP FILE ERROR MESSAGE
	MOV	R2,R0			;PICK UP RMS CODE
	BR	4$			;LEAVE

	.SBTTL	  M)  'SNDMSG' - OUTPUT A MESSAGE
 
;+
;INPUT:
;	R1==>STRING DESCR:  SIZE
;			    ADDR
;
;OUTPUT:
;	NONE
;-
;	CALL	JSR	PC,SNDMSG

SNDMSG:	PUSH	R0
	PUSH	R5
	TST	INIFI			;*46* IS IT OPEN?
	BEQ	1$			;*46* CLOSED, CONTINUE
	MOV	#INIFI,R0		;*46* SET FOR SPEC FILE
	CALL	COMCLS			;*46* CALL COMMON CLOSE
1$:	TST	OUTIFI			;*46*IS IT OPEN?
	BEQ	2$			;CLOSED, CONTINUE
	MOV	#OUTIFI,R0		;SET INTERNAL ID
	CALL	COMCLS			;YES,CLOSE IT
2$:	MOV	#FABPTR,R5		;R5==>FAB PAR
	MOV	#COMFAB,R0		;SET POINTER
	$STORE	#0,DNS,R0		;NO DEFAULTS
	$STORE	#FB$PUT,FAC,R0		;SET FOR OUTPUT
	$STORE	#MSGFNA,FNA,R0		;SET MESSAGE FILE NAME
	$STORE	#MSGFNS,FNS,R0		;...& ITS SIZE
	$STORE	MSGLUN,LCH,R0		;SET CHANNEL NUMBER
	$STORE	#FB$SEQ,ORG,R0		;SEQ ORG
	$OPEN
	MOV	#OUTRAB,R0		;R0==>OUTRAB
	MOV	#OUTRPR,R5		;R5==>OUT RAB PTR
	$CONNECT
	$STORE	(R1)+,RSZ,R0		;SET SIZE OF MESSAGE
	$STORE	@R1,RBF,R0		;SET ADDR OF MESSAGE
	$PUT
	MOV	#FABPTR,R5		;R5==>FAB PAR
	$CLOSE
	POP	R5
	POP	R0
	RETURN

	.SBTTL	  N)  'GETRCN' - GET THE RECORD NUMBER(OR ADDRESS)
 
;	CALL	JSR	PC,GETRCN
	
;ON EXIT R3==>RECORD NUMBER OR ADDRESS
;	  RCNSIZ = SIZE OF THE NUMBER OR ADDRESS
 
GETRCN:	MOV	#INRAB+O$RFA,R3		;SET R3
	RETURN

	.SBTTL	  O)  'TRANSL' - TRANSLATE THE SWITCH SPECIFICATIONS
 
TRANSL:	ASL	R2
	MOV	FIX-2(R2),R2	;PICK UP BIT PATTERN
	RETURN
 
FIX:	.WORD	FB$FIX		;FIXED RECORD MODE
	.WORD	FB$STM		;STREAM ASCII MODE
	.WORD	FB$VAR		;VARIABLE RECORD MODE
	.WORD	FB$IDX		;ISAM FILE
	.WORD	FB$REL		;RELATIVE FILE
	.WORD	FB$SEQ		;SAM FILE

	.SBTTL	  P)  'PARSNM' - PARSE THE FILE NAME
 
;	CALL	JSR	PC,PARSNM

;ON ENTRY R2==>DATA SET BLOCK IN CSI
;	  R3 = 0 FOR INPUT FILE
;	       2 FOR OUTPUT FILE
;	       4 FOR SPECIFICATION FILE
 
;ON EXIT  C-BIT CLEAR IF SUCCESS
;R5 MUST BE PRESERVED!!!
 
PARSNM:	MOV	FILFNA(R3),R1	;SET ADDRESS OF RECEIVING STRING
	PUSH	R3		;SAVE R3
	CALL	$CLTFN		;COLLECT THE FILENAME
	POP	R3		;RESTORE R3
	MOV	R2,@FILFNS(R3)	;STICK LENGHT IN PROPER PLACE
	CLC			;INDICATE SUCCESS
	RETURN
;
;	FILE TABLE
;
FILFNA:	.WORD	INFNA
	.WORD	OUTFNA
	.WORD	SFNA
FILFNS:	.WORD	INFNS
	.WORD	OUTFNS
	.WORD	SFNS

	.SBTTL	  Q) DATA AREAS
 
INFNA:	.BLKB	32.		;INPUT FILE NAME BLOCK
OUTFNA:	.BLKB	32.		;OUTPUT FILE NAME BLOCK
SFNA:	.BLKB	32.		;SPEC FILE FILE NAME BLOCK
 
INITF:	.WORD	0		;INIT FLAG
RCNSIZ:	.WORD	6		;SIZE OF RMS-11 RECORD NUMBER(FILE ADDR)
MSGFNA:	.ASCII	/MSG.SRT/
MSGFNS=.-MSGFNA
SDNA	= MSGFNA+3			;USE THE EXTENSION ONLY
SDNS	= 4
INDNA:	.ASCII	/SRT.DAT/
INDNS=.-INDNA
OUTDNA:	.ASCII	/OUT.DAT/
OUTDNS=.-OUTDNA
	.EVEN
;
;
REFOUT:	.WORD	0		;REFORMATTED OUTPUT
INIFI:	.WORD	0		;INPUT INTERNAL FILE ID
OUTIFI:	.WORD	0		;OUTPUT DITTO
;
OTBSIZ:	.WORD	0		;SIZE OF OUTPUT BUFFER
IOBSIZ:	.WORD	0		;SIZE OF THE IOBUFFER REGION
IDXSIZ:	.WORD	0		;SIZE OF THE KEY AREA 
IDXADR:	.WORD	0		;START OF IDX AREA
TWOIDX:	.WORD	<ID$BLN+ID$BLN>	;SIZE OF TWO IFABS OR IDXS
TENIDX:	.WORD	<10.*ID$BLN>	;SIZE OF TEN INDEX BLOCKS
;
INERBK:	.WORD	INFNA
INFNS:	.WORD	32.
INERMG:	.WORD	OPNIF
OTERBK:	.WORD	OUTFNA
OUTFNS:	.WORD	32.
OTERMG:	.WORD	OPNOF
XERBK:	.WORD	SFNA
SFNS:	.WORD	32.
XERMG:	.WORD	OPNIF
COMERR:.WORD	INERBK		;ERROR BLOCK POINTER

;	GLOBAL PARAMATERS
;
GCMLUN:	.WORD	1
MSGLUN:	.WORD	2
INLUN:	.WORD	3
OUTLUN:	.WORD	4
XLUN:	.WORD	5
;	GLOBAL VARIABLES
;
ALLCI:	.WORD	0,0		;ALLOCATION FOR TEMPORARY FILE
ALLCO:	.WORD	0,0		;ALLOCATION FOR OUTPUT FILE
BLOCKI:	.WORD	0		;BLOCK SIZE FOR INPUT TAPE
BLOCKO:	.WORD	0		; DITTO FOR OUTPUT
BUCKI:	.WORD	0		;INPUT BUCKETSIZE
BUCKO:	.WORD	0		;OUTPUT DITTO
CLVALO:	.WORD	0		;CLUSTER VALUE
CLVALI:	.WORD	0		;FOR TEMP FILE
CONTGO:	.BYTE	0		;SET IF CONTIG TEMP FILE
CONTGI:	.BYTE	0		;SET IF CONTIG OUTPUT FILE
INALQ:	.WORD	0,0		;STORE INPUT FILE ALQ
KEYNMI:	.BYTE	0		;NUMBER OF KEYS ON INDEX FILE
KEYNMO:	.BYTE	0		;NUMBER OF OUTPUT KEYS
OUTAPP:	.BYTE	0		;SET IF APPENDING
SDVDNS:	.BYTE	0		;SIZE OF TEMP DEVICE
SDVDNA:	.WORD	0,0,0		;TEXT OF DEVICE
WINSTR:	.WORD	0		;BUFFER OFFSET FOR WINDOW
SBGBF:	.WORD	0		;SCRATCH FILE BIG BUF
GBVNUM=<.-ALLCI>/2		;NUMBER OF WORDS
;
;
;	PARAMTER LIST FOR RMS CALLS
;
FABPTR:	.WORD	1,COMFAB
INRPR:	.WORD	1,INRAB
OUTRPR:	.WORD	1,OUTRAB
;
;	PARAMETER LIST FOR  'ENDS'
;
PARM:	.BYTE	1,0
	.WORD	ECODE
 
;
GCMLB:	GCMLB$	1,SRT,0		;GCML BLOCK

	.LIST	MEB
COMFAB:	FAB$B
	F$FOP	FB$SUP		;SUPERCEDE OLD FILE
	FAB$E

INRAB:	RAB$B
	R$FAB	COMFAB
	RAB$E

OUTRAB:	RAB$B
	R$FAB	COMFAB
	RAB$E

	NSTRNG	BADRED,<?-INPUT ERROR ON %1X %1D>
	NSTRNG	BADWRT,<?-OUTPUT ERROR ON %1X %1D>
	NSTRNG	OPNIF,<?-OPEN(IN)  FAILURE ON %1X %1D>
	NSTRNG	OPNOF,<?-OPEN(OUT) FAILURE ON %1X %1D>
	NSTRNG	BADRSZ,<?-BAD RECORD SIZE ON %1X>
	NSTRNG	TMPFLR,<?-TEMP FILE ERROR %1D>
	NSTRNG	INAPRF,<?-INAPPROPRIATE FILE ORGANIZATION>

;
.ENABL	GBL
	POOL$B
	.IF	EQ ORGX-1		;SEQUENTIAL ONLY
	P$RAB	2
	P$BDB	2
	.ENDC
	.IF	EQ ORGX-2		;FOR RELATIVE ONLY
	P$RAB	2
	P$BDB	4
	.ENDC
	.IF	EQ ORGX-3		;FOR INDEXED
	P$RAB	1
	P$RABX	1,255
	P$BDB	6
	.ENDC
	POOL$E
;
	ORG$	SEQ,<CRE,FIN,GET,PUT>
	.IF	GE ORGX-2		;FOR REL & INDX
	ORG$	REL,<CRE,FIN,GET,PUT>
	.ENDC
	.IF	EQ ORGX-3		;FOR INDEXED ONLY
	ORG$	IDX,<GET,FIN>
	.ENDC
	.END
