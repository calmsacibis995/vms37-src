TITLE SORTP,<PRE-SORT PHASE>,51,20-FEB-77,ALTMANN
;TITLE SORTP,<PRE-SORT PHASE>,36,30-AUG-76,ALTMANN
;TITLE SORTP,<PRE-SORT PHASE>,35,07-APR-76,INFANTE
;TITLE SORTP,<PRE-SORT PHASE>,32,5/15/75,INFANTE
	.PSECT	SORTP,OVR
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
; 
;SORT CONTROL PROGRAM - PHASE II
;
;COPYRIGHT 1977:-	DIGITAL EQUIPMENT CORP.,MAYNARD,MASS.
;
;VERSION NO.:-		V002
;			.03A
;
;THIS PHASE READS THE INPUT FILE (PROVIDED THAT THIS EXISTS &
;	IS SUITABLE FOR THE TYPE OF SORT REQUIRED) AND PASSES
;	RECORDS TO THE 'SORTS' PACKAGE TO BUILD THE NECESSARY
;	SCRATCH FILES. IF NO ERRORS ARE DETECTED, CONTROL IS
;	PASSED TO PHASE III FOR MERGE & OUTPUT.
;	ERRORS ARE REPORTED BY MEANS OF AN APPROPRIATE MESSAGE
;	AND A NEW SORT IS REQUESTED THROUGH A RECALL OF PHASE I.
;
;THIS ROUTINE REQUIRES 'RSORT' & 'RELES' FROM THE 'SORTS' PACKAGE
;	AND THE DOUBLE-PREC. ASCII CONVERT FROM FORTRAN IV OTS
;
;ON ENTRY, 'SORTP' EXPECTS THE FOLLOWING REGISTER CONTENTS:-
;		R2 =  ADDRESS OF 'PROCES' IN WORKSPACE.
;		R3 = MAXREC
;		R5 =  1
;

	.SBTTL	  MISCELLANEOUS DEFINITIONS:
 
;
;FOLLOWING GLOBALS ARE ENTRY POINTS IN OTHER MODLUES:
 
	.GLOBL	SORTM$,RSORT,RELES,COMEXT,INFERR,$DCI
	.GLOBL	READP,CLOSEI,OPENIP,GETRCN
 
;FOLLOWING GLOBALS ARE ENTRY POINTS IN THIS MODULE:
 
	.GLOBL	SORTP
	.GLOBL	PCKEY,PZKEY,PDKEY,PPKEY,PBKEY,PFKEY
	.GLOBL	PIKEY,PJKEY,PKKEY
	.GLOBL	PFORCE,PECMP,PLCMP,PGCMP
 
;FOLLOWING GLOBALS ARE LOCATIONS IN OTHER MODULES:
 
	.GLOBL	PHASE,PLIST,RCNSIZ,ALLCI,CLVALI,INALQ,SBGBF
	WAMAC				;DEFINE WORKSPACE OFFSETS
 

	.SBTTL	  INITIALIZATION 
 
SORTP:	MOVB	#'P,PHASE	;SET PHASE CODE
	BREAK
	MOV	R3,PSZE		;SET SIZE OF RECORD FOR 'RELES'
 
;	REPLACE "ACTUAL" ARGUMENTS BY ADDRESSES OF ARGUMENTS
 
	MOV	PLIST-6,RSTPAR+10	;SET IN LOCATION OF KEY
 
;	OPEN THE INPUT FILE + ALLOC BUFFER SPACE
 
	MOV	R2,-(SP)	;SAVE
	MOV	WORKLO,R2	;PICK UP THE WORK AREA POINTER
	MOV	WORKHI,R3	;PICK UP WORK HIGH
	CALL	OPENIP		;CALL THE OPEN ROUTINE
	MOV	R2,RSTPAR+12	;SET IN NEW WORKAREA POINTER
	MOV	R3,WORKHI	;RETRUN WORK HI
	SUB	R2,R3		;SIZE OF WORKAREA
	MOV	R3,WRKSIZ	;STORE IT AWAY
	TST	SBGBF		;HAS QIORMS SPECIFIED A BIG BUFFER?
	BEQ	5$		;NO, SKIP
	MOV	SBGBF,PBGBF	;YES, SET IN PARAMETER LIST
5$:	TST	CLVALI		;HAS USER SPECIFIED?
	BEQ	6$		;NO, USE DEFALUT
	MOV	CLVALI,PSCLV	;
6$:	MOV	ALLCI,R1	;PICK UP USER INPUT ALLOCATION
	BNE	4$		;DO NOT CALC DEFAULT
	MOV	INALQ,R1	;PICK UP INPUT FILE ALQ
	MOV	R1,R2		;** COPY
	ASR	R2		;** MAKE 1/2
	ADD	R2,R1		;** NOW 1 1/2
4$:	MOV	R1,PPALQ	;SET IN PARAMETER LIST
 
;	CALL 'RSORT'
 
	MOV	#RSTPAR,R5	;SET R5==>RSORT PARAM LIST
	CALL	RSORT
	MOV	ECODE,R0	;IF ANY ERRORS ...
	BEQ	2$
	MOV	#PSRTER,R3	;... SET FOR PRINT
1$:	JMP	PERR		;... & EXIT
2$:	CALL	READP		;READ FIRST RECORD
	BNE	3$		;IF NONE AVAILABLE ...
	MOV	#NODATA,R3	;... SCREAM!!!
	JMP	PINERR		;... BY EXITING
3$:

	MOV	@SP,R2
	MOV	#240,@SP	;IF ALT COLLATION REQD. ...
	TSTB	-(R2)
	BEQ	.+6
	MOV	(PC)+,@SP	;... SET UP FOR CHAR. CONVERSION
	BR	.+14
	MOV	(SP)+,PCKYSW	;... BY APPROP. SWITCH OP.
	MOV	(R2)+,-(SP)	;CLEAR EOF SW & BUMP PTR
	MOV	(R2)+,PREC	;GIVE DATA START TO 'RELES'
	TST	(R2)+		;HOLD RECORD SIZE
	MOV	(R2)+,-(SP)
	BR	PRDRC0

	.SBTTL	  START OF MAIN LOOP
 
;END-OF-FILE REACHED ON INPUT FILE
 
PNDFL:	CMP	(SP)+,(SP)+	;CLEAN STACK
	CALL	CLOSEI		;CLOSE INPUT FILE
	JMP	SORTM$		;EXIT TO MERGE PHASE
PRDRC:	CALL	READP		;READ ONE INPUT RECORD
	BEQ	PNDFL		;EOF?
 
;RETURN WITH R0 POINTING TO INPUT RECORD AND R1 = BYTE COUNT
 
PRDRC0:	ADD	#1,INCNT+2	;INCREMENT COUNT OF INPUT
	ADC	INCNT		;DOUBLE WORD
	TST	R1		;ZERO LENGTH RECORD?
	BEQ	PRDRC		;YES, COUNT AND GET ANOTHER
	MOV	R0,R3		;R3==>BEGINNING OF REC
	ADD	R1,R3		;PTR TO END OF INPUT RECORD
	MOV	R1,R4		;SIZE OF INPUT RECORD
PNDRC2:	MOV	R1,-(SP)	;SAVE BUFFER CONTROLS
	MOV	R0,-(SP)
	MOV	R2,-(SP)
	MOV	-(R2),-(SP)	;... & RECORD SIZE
	MOV	-(R2),R1	;GET HIGHEST KEY END ...
	MOV	-(R2),R0	;... & DATA START
	SUB	R4,R1		;IF RECORD END < KEY END,
	BLE	3$
	CLRB	(R3)+		;... PAD WITH NULL
	DEC	R1
	BNE	.-4
3$:	MOV	R4,R3		;HOLD DATA SIZE ...
	TSTB	OUTFRM		;... WHILE EXTRA WORD ADDED
	BEQ	.+6		;... IF SPEC. FILE USED ...
	TST	(R0)+		;... FOR VARIABLE OUTPUT
	CMPB	(R3)+,(R3)+
	MOVB	-(R2),R2	;IF SORTR ...
	BNE	4$
	MOV	R3,PSZE		;... GIVE 'SORTS' REC. SZE
4$:	MOV	KEYCHN,@SP	;... & PREPARE KEY BUILD

	.SBTTL 	  CHECK IF RECORD SELECTION REQUIRED:
 
PSND1:	MOV	(SP)+,R1	;GET KEY CHAIN START
	BEQ	PSND9		;IF NO MORE LINKS IGNORE RECORD
	MOV	#KEYBLD,R3	;OTHERWISE SAVE KEY START
	MOV	(R1)+,(R3)+
	MOV	(R1)+,@R3	;... & END
	MOV	(R1)+,-(SP)	;SAVE LINK TO NEXT CHAIN
	CMP	R1,-(R3)	;ANY RECORD SPEC.?
	BEQ	PSND2		;NO, CONTINUE
	MOV	R0,-(SP)	;YES, GO PROCESS
	MOV	R2,-(SP)	;HOLD FOR LATER
	BR	PSND4
 
;COMPLETE DATA BUILD IF NECESSARY:
 
PSND2:	DEC	R2		;IF SORTR, OMIT NEXT
	BLT	PSND3A
	MOV	RCNSIZ,R5	;PICK UP SIZE
	ASR	R5		;CONVERT TO WORDS
	CALL	GETRCN		;PICK UP THE RECORD NUMBER POINTER
3$:	MOV	(R3)+,(R0)+	;MOVE  IT IN
	DEC	R5		;...UNTIL
	BGT	3$		;...FINISHED
2$:	DEC	R2		;FOR SORTI ONLY ...
	BLE	PSND3A
	MOV	R1,R4		;... HOLD BUILDER START
	MOV	(R4)+,R2	;GET KEY START & SIZE
PSND3:	MOV	(R4)+,@SP
	TST	(R4)+		;IGNORE KEY PROCESS
	MOVB	(R2)+,(R0)+	;MOVE DATA TO FORM KEY COPY
	DEC	@SP
	BNE	.-4
	MOV	(R4)+,R2	;CONTINUE UNTIL ALL DONE
	BNE	PSND3
	CLRB	@R0		;LAST BYTE 0 IF ODD
 
;BUILD KEY AS PREVIOUSLY DETERMINED:
PSND3A:
PSND4:	MOV	KEYBEG,R0	;GET START OF KEY AREA
PSND5:	MOV	#10000,R2	;SET BUILDER CONTROLS
	MOV	#600,-(SP)
PSND6:	MOV	(R1)+,R3	;COLLECT FIRST START & SIZE
	MOV	(R1)+,R4
	BLE	PSND7		; (UNLESS NOW STOPPER)
	MOV	#1,R5		;USED AS CONSTANT
	JMP	@(R1)+		;... & DO BUILD

	.SBTTL	  IF RECORD NOW READY - GIVE TO 'SORTS':
 
PSND7:	MOV	R3,(SP)+	;IF RECORD SPEC. ONLY DONE ...
	BMI	PSNDB		;... THERE'S  MORE TO DO!
	MOVB	OUTFRM,@SP	;IF VARIABLE OUTPUT ...
	ASLB	(SP)+		;... STORE KEYCHN PTR HERE
	BEQ	PSND8		;... IF NO KEYS IN O/P
	BMI	.+6
	MOV	KEYBLD,R1	;... OR START OF KEYBLD
	MOV	R1,@DATLOC	;... WITH DATA FOR LATER
PSND8:	CMP	R0,MAXFLD	;IF KEY IS SMALL ...
	BLOS	.+6
	CLRB	-(R0)		;... CLEAR REST OF AREA
	BR	PSND8
	ADD	#1,OUTCNT+2	;INCREMENT OUPUT RECORD COUNT
	ADC	OUTCNT		;CARRY INTO HIGH ORDER
	MOV	#RELPAR,R5
	CALL	RELES		;CALL 'SORTS' TO TAKE RECORDS
	MOV	ECODE,R0	;IF NO ERROR ...
	BEQ	PSND9		;... CONTINUE
	MOV	#PSRTER,R3	;BUT IF THERE IS,
	BR	PERR		;...PROCESS IT
PSND9:	MOV	(SP)+,R2	;... RESTORE REGS.
	MOV	(SP)+,R0
	MOV	(SP)+,R1	;IF MORE INPUT WAITING
	JMP	PRDRC		;... GET NEXT RECORD
 
;	'INCLUDE-ALL' STOPPER SEEN - PREPARE DO KEYS:
 
PSNDB:	MOV	(SP)+,R2	;RESTORE REGS SAVED ABOVE
	MOV	(SP)+,R0
	BR	PSND2		;... & RETURN TO PROCESS KEYS
 
;	ERROR PROCESSING
 
PINERR:	JMP	INFERR		;JUMP TO COMMON INPUT ERROR
PERR:	JMP	COMEXT		;JUMP TO COMMON ERROR EXIT

	.SBTTL	SUBSIDIARY SUBROUTINES
	.SBTTL	  A)  KEY TRANSFER ROUTINES:
;	CALLED FROM THREADED STRING WITH R3 & R4 POINTING AT
;	START & SIZE OF KEY DATA FOR PROCESSING; ALSO R0 SHOWS
;	NEXT KEY AREA TO LOAD (IN REVERSE); R1 ADDRESSES
;	NEXT KEY ENTRY IN STRING.
;	IN EACH CASE, ENTRY AT THE FIRST LOCATION SIGNIFIES
;	THAT THE KEY IS TO BE SORTED IN NORMAL OR ASCENDING
;	SEQUENCE; ENTRY AT THE SECOND LOCATION MEANS
;	OPPOSITE. THIS ALLOWS THE FOLLOWING SEQUENCE TO
;	PRODUCE THE DESIRED ACTION:-
;
;	START:	BIS	R2,@PC	 ;FOR 'NORMAL' MAKE NEXT 'BIS'
;		BIC	@SP,TSTI ;CONVERTS 'TST' TO 'COM'
;		BIC	R2,.-4	 ;LEAVE LAST ALWAYS AS 'BIC'
;
;	EXIT IS BY WAY OF 'JMP PSND6' TO MOVE TO NEXT KEY
;	ENTRY (CHARACTER KEY) OR OF 'JMP PSND5' TO RESET
;	CONSTANTS BEFORE THIS (ALL OTHER KEYS).
;
;	1)  CHARACTER KEY;
;	MOVES BYTES FROM RECORD TO KEY AREA COMPLEMENTED IF
;	NECESSARY - AFTER COLATION CONVERSION IF SPECIFIED.
PCKEY:	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PCTSTI
	BIC	R2,.-4
PCKEY1:	MOVB	(R3)+,-(R0)	;TRANSFER IN REVERSE
PCKYSW:	NOP			; ('BR PCKEY2' IF CNVT REQD)
PCTSTI:	TSTB	@R0		;... AS REQD BY 'SORTSZ'
	DEC	R4
	BNE	PCKEY1
PCKEYX:	JMP	PSND6		;GET NEXT KEY
PCKEY2:	BICB	@SP,@R0		;FOR COLLATION CONVERSION ...
	CLR	-(SP)
	MOVB	@R0,@SP		;... ENSURE 7-BIT VALUE
	ADD	CSQTAB,@SP	;... & USE CHAR. AS INDEX
	MOVB	@(SP)+,@R0	;... INTO LOOK-UP TABLE
	BR	PCTSTI		;RETURN FOR COMPL. IF NEC.
;
;******	NOTE:-	IF ANY INSERTION IS MADE BETWEEN 'PCKYSW'
;	AND 'PCKEY2', THEN 'BR .+14' AT 'PSU2+10' MUST ALSO
;	BE MODIFIED!

;	2)  ZONE KEY:
;	CONVERTS CHARACTER TO ZONE VALUE BY TABLE LOOK-UP.
;	THIS TABLE IS IN FOUR SECTIONS, EACH OF WHICH
;	BEGINS WITH A RANGE OF CONSEC. VALUES FOR CHARS
;	WITH EQUAL ZONE VALUE FOLLOWED BY 6 INDIVIDUAL
;	VALUES FOR CHARS. ALSO EQUAL ZONE-WISE.
;	HENCE THE RESULTANT KEY VALUE LIES BETWEEN 0-3.
PZKEY:	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PZTSTI
	BIC	R2,.-4
	CLRB	-(R0)		;ZERO ZONE VALUE
	MOV	#PZKTB,R4	;SET TABLE PTR
	BISB	(R4)+,R2	;SAVE LOW END OF RANGE
	BICB	@SP,@R3		;ENSURE 7-BIT VALUE
PZKEY1:	CMPB	@R3,(R4)+	;IN RANGE FOR THIS VALUE?
	BGT	PZKEY2
	CMPB	R2,@R3
	BLE	PZKEY4		;IF SO THAT'S IT
PZKEY2:	MOV	#10006,R2	;OTHERWISE SET COUNT
PZKEY3:	CMPB	@R3,(R4)+	;... FOR INDIV CHAR CHECK
	BEQ	PZKEY4
	DECB	R2
	BNE	PZKEY3
	INCB	@R0		;IF NOT THERE ...
	BISB	(R4)+,R2	;... STEP VALUE & RETRY
	BPL	PZKEY1		;... THO' IF AT TABLE END
	BR	PDKEYE		;... MUST NOW CALL ERROR
PZKEY4:	CLRB	R2		;RESTORE ENTRY CONSTANT
PZTSTI:	TSTB	@R0		;COMPL. VALUE FOR DESC SEQ
	BR	PCKEYX		;... & EXIT THRU PCKEY
;
PZKTB:	.BYTE	101,111,46,50,53,56,74,174
	.BYTE	112,122,41,44,51,52,55,73
	.BYTE	123,132,45,54,57,60,76,77
	.BYTE	61,72,40,42,43,47,75,100

;	3)  BINARY KEY:
;	MOVES AS WORDS (BYTES ADJUSTED) ALWAYS STARTING ON
;	WORD BOUND. IN ORDER TO USE 'BHI' COMPARISON ON
;	EVERY WORD, THE SIGN BIT ON THE HIGH ORDER WORD
;	MUST BE COMPLEMENTED.
PBKEY:	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PBTSTI
	BIC	R2,.-4
PBKEY1:	MOV	#100000,R2	;SET UP SIGN COMPLEMENT
PBKEY2:	BIT	R5,R0		;GET WORD-BOUND START (R5 = 1)
	BEQ	.+4
	CLRB	-(R0)		;ENSURE LAST BYTE CLEAR
	ASR	R4		;COUNT AS WORDS ...
PBKEY3:	MOVB	(R3)+,-(R0)	;... THO MOVE OUT AS BYTES
	MOVB	(R3)+,-(R0)	;... IN CASE DATA ON ODD ADDR
	SWAB	@R0		;ADJUST FOR CORRECT ORDER
	ADD	R2,@R0		;COMPLEMENT SIGN IF NEC.
PBTSTI:	TST	@R0		;COMPLEMENT WORD IF NEC.
	CLR	R2		;NO MORE SIGN COMPL.
	DEC	R4
	BNE	PBKEY3
	TST	(SP)+
	JMP	PSND5		;RESET CONSTANTS & GET NEXT

;	4)  FLOATING-POINT KEY:
;	FOR CORRECT SEQUENCE, POSITIVE VALUES MUST BE
;	IN THE RANGE 100000-177777, I.E. SIGN BIT = 1 AS
;	FOR NORMAL BINARY. NEGATIVE VALUES ASCENDING FROM
;	0 TO 77777 ARE IN FACT REPRESENTED AS 177777 TO
;	100000, I.E. IN REVERSE. REQUIRED SEQUENCE IS 
;	OBTAINED MERELY BY USING 'COM' FOR ASCENDING AND
;	'TST' FOR DESCENDING SEQUENCES.
PFKEY:	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PBTSTI	;... THO USES BINARY RTN
	BIC	R2,.-4
PFKEY1:	TSTB	1(R3)		;IF VALUE POSITIVE,
	BPL	PBKEY1		;... TREAT AS BINARY
	BIT	@SP,PBTSTI	;OTHERWISE OPP. SEQ. ...
	BEQ	.+4		;... TO THAT SPECIFIED
	NEG	@SP		;SO XOR SPECIAL INSTR
	ADD	@SP,PBTSTI
	BR	PBKEY2		;... & OMIT SIGN COMPL.

;	5) DIGIT KEY:
;	IN ORDER TO ALLOW FOR VARIOUS FORMATS, E.G. RPG
;	TYPE DATA CONTAINING LETTERS AND HAVING SIGN
;	IMPOSED ON LAST BYTE, FLOATING POINT VALUES OR
;	STRAIGHT INTEGER, THIS ROUTINE SCANS LINE AND
;	REMOVES PECULIARITIES WHICH MIGHT CAUSE FAILURE
;	IN THE FORTRAN IV ASCII CONVERTER WHICH IT THEN
;	CALLS. THE SCAN HOWEVER IS STOPPED AS SOON AS IT
;	BECOMES OBVIOUS THAT THE DATA IS FLOATING-POINT.
;	THE CONVERTED DATA IS THEN HANDLED AS FOR 'F'
;	KEY (DOUBLE-PRECISION)
;GENERAL SCANNER:
PDKEY:	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PBTSTI	;AGAIN BINARY RTN USED
	BIC	R2,.-4
PDKEY0:	MOV	R3,-(SP)	;SAVE PARAMS.
	MOV	R4,-(SP)	;... (ALSO FOR F IV CALL)
PDKEY1:	BICB	#200,@R3	;ENSURE 7-BIT VALUES
	DEC	R4		;COUNT BYTES DURING SCAN
	CLR	R5		;HANDLE BYTES IN RANGES
	JSR	R5,PDKEY2	;SO DETERMINE RANGE
	.BYTE	57,71,100,132,175,177
	INC	@SP
PDKEY2:	CMPB	@R3,(R5)+
	BGT	.-4
	MOV	(SP)+,R5	;BUILD RELEVANT DESPATCH ADDR
	ASL	R5
	JMP	@PDKTAB(R5)	;... & GO TO IT
PDKTAB:	.WORD	PDKEYP,PDKEYD,PDKEYE,PDKEYA,PDKEYS,PDKEYE

;SPECIAL PUNCTUATION CHARACTERS:
PDKEYP:	MOVB	(R3)+,R5	;IGNORE SPACES
	SUB	#40,R5
	BEQ	PDKEYD+2
	SUB	#13,R5		;IF PLUS SIGN...
	BEQ	PDKYP2
	SUB	#2,R5		;... OR MINUS,
	BEQ	PDKYP1		;... MORE CHECKING TO DO
	DEC	R5		;EXIT SCAN IMMEDIATELY ...
	BEQ	PDKEYX		;... IF PERIOD
	MOVB	#61,-(R3)	;REPLACE / WITH 1 (RPG FORM)
;DIGITS:
PDKEYD:	CMPB	(R2)+,(R3)+	;SET DIGIT SEEN FLAG IN R2
	TST	R4		;... & CHECK IF END OF SCAN
	BNE	PDKEY1		;REPEAT WITH NEXT BYTE IF NOT
	BR	PDKEYX
;MORE SPECIAL CHARACTERS (LAST BYTE SIGN):
PDKYP1:	NEGB	R2		;FOR MINUS SIGN SET NEG FLAG
PDKYP2:	TSTB	R2		;IF NO DIGITS IN FRONT ...
	BEQ	PDKEYX		;... STOP SCAN NOW
	DEC	R3
	BR	PDKYS1		;OTHERWISE MUST BE LAST BYTE
PDKEYS:	CMPB	@R3,#173	;SIMILARLY IF SPECIAL SIGN ON 0
	BEQ	PDKYS1		;... A LA RPG
	COMB	R2		;SET NEG FLAG IN CASEIT'S MINUS
	CMPB	@R3,#175
	BNE	PDKEYE		;IF NEITHER IT'S AN ERROR
PDKYS1:	MOVB	#60,@R3		;REPLACE WITH 0
	TST	R4		;LAST BYTE?
	BEQ	PDKEYX
	BR	PDKEY1		;
PDKEYE:	MOV	#BADATA,R3	;IF NOT WE FAIL
	JMP	PINERR

;LETTERS:
PDKEYA:	JSR	R5,PDKYA1	;MUST BE 'RPG DIGIT' AS IN F/P
	.WORD	20,11,10	;... WILL COME AFTER . SEEN ALRDY
PDKYA1:	MOVB	@R3,@SP		;SO DETERMINE RANGE
	SUB	(R5)+,@SP	;... & REPLACE BY RELEVANT DIGIT
	CMPB	@SP,#72
	BGE	.-6
	MOVB	(SP)+,@R3
	TST	R4		;IF AT END OF SCAN ...
	BNE	PDKEYD
	CMP	@R5,#10		;... CHECK FOR J > R
	BNE	.+4
	COMB	R2		;SET NEG FLAG IF FOUND
PDKEYX:	MOV	#1,R5		;RESTORE CONSTANT
	CLR	-(SP)		;COMPLETE SET UP FORTRAN CALL
	CLR	-(SP)		;(NO D OR P FACTORS)
	JSR	PC,$DCI		;... & MAKE IT
	BCS	PDKEYE		;IF ERRORS, REPORT
	TST	PDTYPE		;"DIGIT" KEY?
	BEQ	2$		;... YES
	CMPB	#'-,PDSIGN	;NEGATIVE FIELD?
	BNE	1$
	BIS	#100000,@SP	;...YES
	CMP	#PKKEY,PDTYPE	;LEADING OVERPUNCH?
	BNE	1$
	CMPB	#'-,PDSIGN	;... REPLACE SIGN BYTE
	BNE	1$
	MOVB	PDSAVE,@PDPTR	;... ONLY FOR NEGATIVE FIELDS
1$:	CLR	PDTYPE		;RE-SET FLAG
	BR	PDKEYZ
2$:
	TSTB	R2		;CHECK IF SHOULD BE NEG.
	BPL	PDKEYZ
	BIS	#100000,@SP	;SET SIGN IF SO
	TST	R4		;IF LAST BYTE SCANNED ...
	BNE	PDKEYZ
	MOVB	@R3,-(SP)	;... RESTORE SIGN COMPONENT
	CMPB	@SP,#60		;... (ALLOWING FOR VALUE = 0)
	BNE	.+6
	ADD	#64,@SP
	ADD	#31,@SP
	MOVB	(SP)+,@R3
PDKEYZ:	CLRB	R2		;RESTORE CONSTANT VALUE
	MOV	#PDUMB,R3	;REMOVE RESULT FROM STACK
	MOV	#8.,R4
	MOV	(SP)+,(R3)+
	MOV	(SP)+,(R3)+
	MOV	(SP)+,(R3)+
	MOV	(SP)+,(R3)+
	SUB	R4,R3
	JMP	PFKEY1		;... & CONTINUE AS F KEY

;  6)  PACKED KEY:
;	CONSISTS OF UP TO 15 DIGITS STORED TWO PER BYTE
;	WITH LAST HALF-BYTE SET AS SIGN (13 OR 15 = -)
;	THIS ROUTINE MOVES THE WHOLE FIELD ONE BIT TO
;	THE RIGHT TO LEAVE A SIGN POSITION (SET TO 1
;	FOR LOGICAL COMPARISON). THE ORIGINAL END SIGN IS
;	REMOVED, THO' IF NEGATIVE THE SHIFTED FIELD IS
;	COMPLEMENTED. A FURTHER COMPLEMENT OCCURS TO TAKE
;	CARE OF THE SORT SEQUENCE.
PPKEY:	BIS	R2,@PC		;STANDARD ENTRY AS BEFORE
	BIC	@SP,PPTSTI
	BIC	R2,.-4
	BISB	R4,R2		;SET BYTE COUNT
	MOV	R0,R4		;USE AS SECOND PTR TO KEY AREA
	SEC			;SET INITIAL POSITIVE SIGN
	MOVB	(R3)+,-(R0)	;MOVE KEY OVER ...
	RORB	@R0		;... WITH DISPLACEMENT
	DECB	R2
	BNE	.-6
	MOVB	@R0,R3		;LOOK AT LAST PACKED CHAR.
	BIC	#177770,R3
	BICB	R3,@R0		;... & REMOVE FROM STORE
	BCC	PPTSTI
	SUB	#5,R3		;IF ORIGINALLY '13' ...
	BEQ	.+6
	DEC	R3		;... OR '15' ...
	BNE	PPTSTI
	MOV	@SP,R3		;... SET TO COMPL. FIELD
	BIC	PPTSTI,R3	; (BY INVERTING CNTRL INSTR)
	BIC	@SP,PPTSTI
	BIS	R3,@PC
PPTSTI:	TSTB	-(R4)		;... DURING SECOND PASS
	CMP	R4,R0		;... TO CONSIDER SORT ORDER
	BNE	.-4
	JMP	PSND6		;THEN GO FOR NEXT KEY

;  F)  FORCED CHARACTER KEY:
;	ALSO CALLED FROM THREADED STRING WITH R3 POINTING
;	AT THE RELEVANT CHARACTER IN THE INPUT BUFFER. R4
;	HOWEVER NOW CONTAINS THE CHARACTER TO BE REPLACED
;	(OR BLANK = UNCONDITIONAL FORCE) AND ITS REPLACEMENT.
;	THE ROUTINE IS ENTERED AT 'PFORCE'+2 IF THIS ENTRY
;	IS A NEW ONE; AT 'PFORCE' IF IT IS A CONTINUATION
;	FROM A PREVIOUS ONE. AN UNSATISFIED CONDITIONAL
;	FORCE CAUSES THE KEY TO HAVE A VALUE OF '200' IF
;	NORMAL SEQUENCE IS ASCENDING, 0 IF DESCENDING.
PFORCE:	BR	PFRCE4		;CONTINUATION - GO BELOW
	CLRB	-(R0)		;NEW ENTRY - MOVE TO NEXT BYTE
	TSTB	NORDER		;IF NORMAL ORDER = ASCENDING
	BNE	PFRCE1
	MOVB	@SP,@R0		;... SET AT HIGH VALUE
PFRCE1:	CMPB	R4,#40		;IF UNCOND. FORCE ...
	BEQ	PFRCE2		;... MUST USE REPLACEMENT
	BICB	@SP,@R3		; (ONLY 7-BIT VALUE CONSIDERED)
	CMPB	R4,@R3		;ALSO IF COND. MET
	BNE	PFRCE3
PFRCE2:	SWAB	R4		;GET REQD. CHAR
	MOVB	R4,@R0		;... & STORE IT
PFRCE3:	JMP	PSND6		;... BEFORE EXIT
PFRCE4:	TSTB	@R0		;IF CONT. & STILL DEFAULT
	BLE	PFRCE1		;... TRY AGAIN NOW
	BR	PFRCE3		;OTHERWISE LEAVE STORED BYTE


	.SBTTL	  B)  COMPARISON ROUTINES FOR RECORD SELECTION:
;	ON ENTRY, THE TWO FIELDS FOR COMPARISON HAVE
;	BEEN PREPARED IN REVERSE ORDER IN A BUFFER
;	ORIGINATING '@KEYBEG'. R4 CONTAINS THE SIZE OF
;	EACH FIELD. EACH ROUTINE IS ENTERED EITHER AT ITS
;	START OR START+2 DEPENDING UPON THE REQUIRED
;	CONDITION FOR A SUCCESSFUL COMPARISON AND A METHOD
;	SIMILAR TO THAT ALREADY DESCRIBED FOR KEY TRANSFER
;	IS USED TO SET UP THE NECESSARY BRANCH INSTRUCTION
;	(SINCE, FOR EXAMPLE, 'BEQ' [1400] AND 'BNE'[1000]
;	REQUIRE MERELY THE COMPLEMENTING OF BIT 8). A
;	GENERAL COMPARISON ROUTINE IS CALLED AND RETURNS
;	WITH THE APPROP. CONDITION CODES SET FOR AN
;	IMMEDIATE TEST. THE FOLLOW-ON TO A SUCCESS DEPENDS
;	UPON THE CONTENT OF R3 ON ENTRY: 0 IN ITS LOW ORDER
;	BYTE SIGNIFIES INCLUDE THE RECORD, NON-0 OMIT
;	PROVIDED THAT THE SWITCH SETTING OF THE HIGH-ORDER
;	BYTE IS CONSIDERED, I.E.:-
;		-1  =  NO OTHER LOGICAL COMBINATION
;		-2  =  'AND' THE FOLLOWING ELEMENT
;		-3  =  'OR' THE FOLLOWING ELEMENT
;	AN UNSATISFIED CONDITION RESULTS IN A FURTHER
;	SEARCH OF THE KEYBUILDER CHAIN IF MORE EXISTS.
;
;	1)  TEST FOR EQUALITY V. NON-EQUALITY:
PECMP:	BIS	R2,@PC		;ENTRY HERE > 'BEQ'
	BICB	1(SP),PECBRI+1	;  - " -    > 'BNE'
	BIC	R2,.-6
	JSR	R5,PCMP		;DO COMPARISON
PECBRI:	BEQ	PCMPOK		;... & ACTION ACCORDINGLY
	BR	PCMPNG
;
;	2)  TEST FOR LESS V. GREATER/EQUAL:
PLCMP:	BIS	R2,@PC		;ENTRY HERE > 'BLO' (*)
	BICB	1(SP),PLCBRI+1	;  - " -    > 'BHIS'
	BIC	R2,.-6
	JSR	R5,PCMP		; (AS ABOVE)
PLCBRI:	BLO	PCMPOK
;
PCMPNG:	MOV	KEYBEG,R0	;IF CONDITION NOT MET ...
	BIT	#1000,R3	;... RESET BUFFER PTR
	BNE	.+6		;... & TRY NEXT ELEMENT
PCNGX:	JMP	PSND6		;... IF 'OR' COMBINATION
PCNG1:	SWAB	R3		;IF AT END OF COMBINATION
	INCB	R3
	BEQ	PCNG2		;... CHECK FOR MORE
	ADD	#14,R1		;OTHERWISE FIND END
	MOV	(R1)+,R3	;... BY CHECK FLAG
	CMP	(R1)+,(R1)+	;... FOR NEXT ELEMENT
	BR	PCNG1
PCNG2:	CMP	R1,KEYBLD	;IF MORE BEFORE KEYS IN ...
	BLO	PCNGX		;... KEYBLD CHAIN, CONTINUE
	TST	(SP)+		;OTHERWISE UNSAVE REGS.
	MOV	(SP)+,R2
	MOV	(SP)+,R0
	JMP	PSND1		;... & CHECK FOR NEW CHAIN

;	3)  TEST FOR GREATER V. LESS/EQUAL:
PGCMP:	BIS	R2,@PC		;ENTRY HERE > 'BLOS' (*)
	BICB	1(SP),PGCBRI+1	;  - " -    > 'BHI'
	BIC	R2,.-6
	JSR	R5,PCMP		;AS BEFORE ...
PGCBRI:	BLOS	PCMPNG		;... EXCEPT TEST REVERSED
;
PCMPOK:	BIT	R3,(SP)+	;FOR SUCCESSFUL COMPARE ...
	BNE	.+6		;... TRY NEXT ELEMENT
	JMP	PSND4		;... IF 'AND' COMBINATION
	MOV	KEYBLD,R1	;OTHERWISE SET TO DO KEYS
	MOV	(SP)+,R2	;... & UNSAVE REGS.
	MOV	(SP)+,R0
	TSTB	R3		;IF 'INCLUDE' ...
	BNE	.+6
	JMP	PSND2		;... GO PROCESS KEYS
	TST	(SP)+		;OTHERWISE CLEAN-UP ...
	ADD	#1,INCNT+2		;INCREMENT COUNTER WHEN OMITTING
	ADC	INCNT			;OVERFLOW TO SECOND HIGH ORDER
	JMP	PSND9		;... & GO FOR NEXT RECORD

;
; (*)	DATA CONVERSIONS PROVIDE FOR LOGICAL COMPARISONS
;	WHICH GIVE CORRECT ALGEBRAIC RESULTS WHEN REQUIRED.
;
;	4)  GENERAL COMPARISON ROUTINE:
PCMP:	MOV	KEYBEG,R0	;GET START OF FIRST FIELD
	NEG	R4		;SET SIZE AS INDEX
	MOV	R4,.+6		;... FOR CMP INSTR.
PCMP1:	CMPB	-(R0),0(R0)	;CHECK STRINGS
	BNE	PCMP2		;IF NO FAILURE ...
	INC	R4		;... CONTINUE TILL END
	BNE	PCMP1
PCMP2:	RTS	R5		;EXIT WITH CORRECT STATUS
;SIGN LEADING SEPARATE
PIKEY:
	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PBTSTI
	BIC	R2,.-4
	MOV	R4,-(SP)
	DEC	(SP)+		;1 CHR FIELD?
	BEQ	2$
1$:	MOV	#PIKEY,PDTYPE
	DEC	R4
	MOVB	(R3)+,PDSIGN
2$:	JMP	PDKEY0		;CONTINUE AS "DIGIT" KEY
;SIGN TRAILING SEPARATE
PJKEY:
	BIS	R2,@PC		;STANDARD ENTRY AS ABOVE
	BIC	@SP,PBTSTI
	BIC	R2,.-4
	MOV	R4,-(SP)
	DEC	(SP)+		;1 CHR FIELD?
	BEQ	2$
1$:	MOV	#PJKEY,PDTYPE
	DEC	R4
	MOV	R3,-(SP)
	ADD	R4,@SP
	MOVB	@(SP)+,PDSIGN
2$:	JMP	PDKEY0		;CONTINUE AS "DIGIT" KEY
;LEADING OVERPUNCH
PKKEY:
	BIS	R2,@PC
	BIC	@SP,PBTSTI
	BIC	R2,.-4
	MOV	#PKKEY,PDTYPE
	CLR	PDSIGN		;ASSUME POSITIVE
	MOVB	@R3,PDSAVE	;SAVE SIGN BYTE
	MOV	R3,PDPTR	;SAVE ADDR OF SIGN BYTE
	CMPB	@R3,#'I		;POSITIVE?
	BLE	3$
	CMPB	@R3,#'R		;NEGATIVE?
	BGT	4$
	MOVB	#'-,PDSIGN
	BR	3$
4$:	CMPB	#173,@R3	;+0?
	BEQ	1$
	CMPB	#175,@R3	;-0?
	BNE	3$
	MOVB	#'-,PDSIGN
1$:	MOVB	#'0,@R3
3$:	JMP	PDKEY0		;CONTINUE AS "DIGIT"
;
PDSIGN:	.WORD	0		;SIGN FOR PIKEY,PJKEY,PKKEY
PDTYPE:	.WORD	0		;SET EQUAL TO #PIKEY,#PJKEY,#PKKEY
PDSAVE:	.WORD	0		;SIGN BYTE FOR PKKEY
PDPTR:	.WORD	0		;ADDR OF SIGN BYTE FOR PKKEY
;

	.SBTTL	DATA BLOCKS FOR 'SORTP':
 
RELPAR:	.BYTE	3,0		;PARAMETER LIST FOR 'RELES'
	.WORD	ECODE		;ADDR(ERROR CODE)
	.WORD	PSZE		;ADDR(SIZE OF RECORD)
PREC:	.WORD	0		;LOCATION OF RECORD
;
PSZE:	.WORD	0		;SIZE OF RECORD
;
RSTPAR:	.BYTE	10.,0		;PARAMETER LIST FOR 'RSORT'
	.WORD	ECODE		;ADDR(ERROR CODE)
	.WORD	PLIST-2		;ADDR(KEY SIZE)
	.WORD	PLIST-4		;ADDR(MAX RECORD SIZE)
	.WORD	0		;LOCATION OF KEY
	.WORD	0		;LOCATION OF WORK AREA
	.WORD	WRKSIZ		;ADDR(SIZE OF WORK AREA)
	.WORD	PLIST-10	;ADDR(NUMBER OF SCRATCH FILES)
	.WORD	PBGBF		;ADDR(BIG BUFFER SIZE)
	.WORD	PSCLV		;ADDR(SCRATCH FILE CLUSTERSIZE)
	.WORD	PPALQ		;ADDR(SCRATCH FILE PRI ALQ)
WRKSIZ:	.WORD	0
PBGBF:	.WORD	0
PSCLV:	.WORD	0
PPALQ:	.WORD	0
 
PDUMB:	.=.+16.			;TEMP STORE FOR DIGITS/PACKED
 
	NSTRNG	NODATA,<?NO DATA IN INPUT FILE %1X>
	STRNG	PSRTER,<?SORT ERROR - CODE: %1O>
	NSTRNG	BADATA,<?INVALID KEY FIELD DATA %1X>
 

	.SBTTL	SPECIAL PSECT FOR OVERLAYING
 
	.PSECT	SORTPX,GBL,OVR
	.GLOBL	SORTPX,SORTP
SORTPX:	JMP	SORTP
;
;	THIS PSECT NECESSARY TO PREVENT REFERENCES TO P-KEY 
;	ROUTINES FROM THE ROOT GENERATING AUTOLOAD VECTORS.
;
	.END

