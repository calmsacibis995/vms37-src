	.TITLE	MAC$OHDOUT	OUTPUT OBJECT MODULE HEADER INFO
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 20-AUG-78
;
; MODIFIED BY:
;
;	V02.03	PCG0002		Peter George	16-Apr-1981
;		Set DBGOUT flag to prevent filtering of debugger
;		records for abs psects.  Also, filter out symbols
;		in abs psects that are not referenced by rel psects.
;
;	V02.02	CNH0039		Chris Hume	 7-Oct-1980
;		Closed off a few remaining object record length checking
;		errors.  (IODAT.MAR 02.08, P2ACT1.MAR 02.09)
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;
	$MAC_OBJCODDEF			;DEFINE OBJECT CODE RECORD TYPES
	$MAC_SYMBLKDEF			;DEFINE SYMBOL BLOCK OFFSETS
	$MAC_CTLFLGDEF			;DEFINE CONTROL FLAGS
;
; EQUATED SYMBOLS:
;

	.PSECT	MAC$RO_CODE_P2,NOWRT,GBL,LONG

	.SBTTL	MAC$OBJHDROUT OUTPUT OBJECT MODULE HEADER RECORDS

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE OUTPUTS THE OBJECT MODULE HEADER RECORDS AT THE
;	BEGINNING OF PASS 2.  THESE INCLUDE THE GSD RECORDS.
;
;--

MAC$OBJHDROUT::
	BBSS	#FLG$V_DBGOUT,(R11),.+4	;SET DEBUGGER RECORD FLAG
	MOVAB	W^MAC$AB_OBJBUF,R10	;POINT TO OBJECT BUFFER
	MOVB	#OBJ$C_HDR,(R10)	;SET RECORD TYPE
	MOVZBL	(R10)+,W^MAC$GL_RECTYP	;MAKE TYPE VISIBLE FOR MAC$WRTOBJ
	MOVB	#OBJ$C_HDR_MHD,(R10)+	;MODULE HEADER RECORD
	CLRB	(R10)+			;STRUCTURE LEVEL 0
	MOVW	#512,(R10)+		;RECORD SIZE MAX IS 512 BYTES
;
; OUTPUT TITLE INFORMATION
;
	MOVAB	W^MAC$AB_TITLE,R0	;POINT TO TITLE STRING
	MOVZBL	(R0),R1			;GET COUNT OF TITLE CHARACTERS
	BNEQ	10$			;IF NEQ THERE WAS A TITLE STATEMENT
	MOVAB	MAC$AB_DEF_TITL,R0	;POINT TO DEFAULT TITLE STRING
	MOVZBL	(R0),R1			;GET LENGTH OF DEFAULT TITLE
10$:	INCL	R1			;COPY COUNT BYTE ALSO
	MOVC3	R1,(R0),(R10)		;COPY INTO OBJECT BUFFER
	MOVL	R3,R10			;UPDATE CODE POINTER
;
; OUTPUT IDENT
;
	MOVAB	W^MAC$AB_IDENT,R0	;POINT TO IDENT STRING
	MOVZBL	(R0)+,R1		;GET LENGTH OF IDENT
	BEQL	20$			;IF EQL NO IDENT--USE DEFAULT
	MOVB	R1,(R10)+		;SET LENGTH OF IDENT INTO BUFFER
	MOVC3	R1,(R0),(R10)		;COPY IDENT INTO BUFFER
	MOVL	R3,R10			;UPDATE POINTER
	BRB	30$			;CONTINUE
20$:	MOVB	#1,(R10)+		;DEFAULT LENGTH OF 1 CHARACTER
	MOVB	#^A/0/,(R10)+		;DEFAULT IDENT = '0'
;
; OUTPUT ASSEMBLY DATE/TIME AND PATCH DATE/TIME
;
30$:	MOVC3	#17,W^MAC$AB_ATIM_BUF,(R10) ;PUT ASSEMBLY TIME INTO BUFFER
	MOVC5	#0,(SP),#^A/ /,#17,(R3) ;BLANK FILL PATCH TIME
	MOVL	R3,R10			;UPDATE POINTER
	BSBW	MAC$WRTOBJ		;WRITE THE MODULE HEADER RECORD
;
; OUTPUT SUBHEADER RECORDS
;
	MOVB	#OBJ$C_HDR_LNM,(R10)+	;LANGUAGE PROCESSOR SUB-HEADER RECORD
	MOVAB	MAC$AB_VERSION,R0	;POINT TO VERSION STRING
	MOVZBL	(R0)+,R1		;GET LENGTH OF VERSION STRING
	MOVC3	R1,(R0),(R10)		;COPY INTO OBJECT BUFFER
	MOVL	R3,R10			;UPDATE BUFFER POINTER
	BSBW	MAC$WRTOBJ		;WRITE OUT THE RECORD
;
; OUTPUT COMMAND LINE
;
	MOVB	#OBJ$C_HDR_SRC,(R10)+	;COMMAND LINE
	MOVC3	W^MAC$GL_CMDLEN,@W^MAC$GL_CMDLIN,- ;COPY COMMAND LINE
			(R10)			   ;INTO CODE BUFFER
	MOVL	R3,R10			;UPDATE CODE POINTER
	BSBW	MAC$WRTOBJ		;OUTPUT THE RECORD
;
; OUTPUT TITLE SUB-TEXT
;
	MOVB	#OBJ$C_HDR_TTL,(R10)+	;TITLE RECORD
	MOVL	W^MAC$GL_TTX_SIZ,R0	;GET LENGTH OF TITLE SUB-TEXT
	BEQL	80$			;IF EQL NONE
	MOVC3	R0,W^MAC$AB_HD_TSTRG,(R10) ;COPY SUB-TEXT INTO BUFFER
	MOVL	R3,R10			;UPDATE POINTER
	BRB	90$			;CONTINUE
80$:	MOVB	#1,(R10)+		;IF NONE USE DEFAULT
	MOVB	#^A/ /,(R10)+		;SPACE IS DEFAULT
90$:	MOVZBL	#OBJ$C_GSD,W^MAC$GL_RECTYP ;NEXT RECORD IS GSD
	BSBW	MAC$WRTOBJ		;WRITE OUT LAST HEADER RECORD

	.SBTTL	OUTPUT GLOBAL SYMBOL DIRECTORY

	MOVL	W^MAC$GL_LINK_PTR,R6	;POINT TO LINKED SYMBOL LIST
	BEQL	GSD_DONE		;IF EQL NO SYMBOL LIST
;
; CHAIN THROUGH THE SYMBOL TABLE (ALREADY FORMED INTO A LINKED LIST)
; AND OUTPUT SYMBOLS TO OBJECT CODE
;
	.DEBUG	WRT_GSD

WRT_GSD:
	BITW	#SYM$M_GLOBL!SYM$M_EXTRN,- ;GLOBAL OR EXTERNAL?
			SYM$W_FLAG(R6)
	BEQL	60$			;IF EQL NO
	BBS	#SYM$V_EPT,SYM$W_FLAG(R6),60$ ;YES--BRANCH IF EPT
	BBC	#SYM$V_RELPSECT, -	;IF NOT REFERENCED IN A REL PSECT
		SYM$W_FLAG(R6),60$	;THEN DO NOT OUTPUT RECORD
;
; SYMBOL IS GLOBAL OR EXTERNAL, AND IS NOT AN EPT
;
	$OBJ_OUTBYT_0 #OBJ$C_GSD_SYM	;SYMBOL DEFINITION
	$OBJ_OUTBYT_0 #0		;DATA TYPE (UNKNOWN?)
	CLRL	R0			;ASSUME REFERENCE
	BBC	#SYM$V_DEF,SYM$W_FLAG(R6),20$ ;IS SYMBOL DEFINED?
	MOVZBL	#SYM$F_DEF,R0		;YES
20$:	BBS	#SYM$V_ABS,SYM$W_FLAG(R6),30$ ;IS SYMBOL ABSOLUTE?
	BISB	#SYM$F_REL,R0		;NO--MARK AS RELOCATABLE
30$:	BBC	#SYM$V_WEAK,SYM$W_FLAG(R6),40$ ;IS SYMBOL WEAKLY DEFINED?
	BISB	#SYM$F_WEAK,R0		;YES--MARK AS SUCH
40$:	$OBJ_OUTBYT_0 R0		;OUTPUT FLAGS (LOW BYT_0E)
	$OBJ_OUTBYT_0 #0		;OUTPUT FLAGS (HIGH BYT_0E)
	BBC	#SYM$V_DEF,SYM$W_FLAG(R6),50$ ;BRANCH IF NOT DEFINITION
	$OBJ_OUTBYT_0 SYM$B_SEG(R6)	;OUTPUT SYMBOL PSECT INDEX
	MOVAB	SYM$L_VAL(R6),R5	;POINT TO SYMBOL VALUE
	BSBW	MAC$OUT_LW		;WRITE VALUE TO OBJECT CODE
50$:	BSBW	MAC$SYMNAMOUT		;WRITE OUT SYMBOL NAME
	CMPW	R10,#MAC$AB_OBJWRN	;ROOM FOR ANOTHER SYMBOL?
	BLSSU	60$			;IF LSS YES
	BSBW	MAC$WRTOBJ		;NO--DUMP THE BUFFER
60$:	MOVL	(R6),R6			;LINK TO NEXT SYMBOL
	BNEQ	WRT_GSD			;LOOP IF THERE IS MORE
;
; GSD HAS BEEN OUTPUT
;
70$:
GSD_DONE:
	MOVZBL	#OBJ$C_TIR,W^MAC$GL_RECTYP ;ASSUME TIR FROM NOW ON
	CMPW	R10,#MAC$AB_OBJBUF+1	;FLUSH BUFFER IF ANYTHING THERE
	BLEQU	80$			;IF LEQ NOTHING THERE
	BSBW	MAC$WRTOBJ
80$:	BBCC	#FLG$V_DBGOUT,(R11),.+4 ;CLEAR DEBUGGER OUTPUT FLAG
	RSB

	.END
