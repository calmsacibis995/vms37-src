	.TITLE	MAC$TIMER	TIMER ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 20-AUG-78
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$JPIDEF				;DEFINE JOB/PROCESS INFO ITEM CODES


;
; LOCAL STORAGE
;

	.PSECT	MAC$TIMER_DATA,NOEXE,LONG

GETJPI_ARGBLK:				;ARGUMENT BLOCK FOR GETJPI
	$GETJPI	ITMLST=GETJPI_LIST

GETJPI_LIST:
	.WORD	8,JPI$_CPUTIM		;RESULT IS 8 BYTES LONG
	.LONG	CPU_TIME		;WHERE TO RETURN CPU TIME
	.LONG	0			;DON'T CARE HOW LONG RESULT IS
	.WORD	4,JPI$_PAGEFLTS		;4 BYTES, GET # OF PAGE FAULTS
	.LONG	PAGE_FAULTS		;WHERE TO STORE RESULT
	.LONG	0			;DON'T CARE HOW LONG RESULT IS
	.LONG	0			;END OF LIST

	.DEBUG	CPU_TIME,TIME,PAGE_FAULTS

CPU_TIME:.BLKQ	1			;CPU TIME RETURNED FROM GETJPI
TIME:
	.BLKQ	1
PAGE_FAULTS:
	.BLKL	1			;# PAGE FAULTS 

	.PSECT	MAC$RO_CODE_P15,NOWRT,GBL,LONG

	.SBTTL	MAC$TIMER_ON	BEGIN TIMING A BLOCK OF CODE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SETS THE STARTING TIME FOR A BLOCK OF CODE.
;
;	CALLING SEQUENCE:
;
;	PUSHAB	DUAL_QUAD_WORDS
;	CALLS	#1,MAC$TIMER_ON
;
;	INPUTS:
;
;	DUAL_QUAD_WORDS	IS THE ADDRESS OF TWO QUADWORDS.  THE FIRST
;			WILL RECEIVE THE CPU TIME FOR THE BLOCK OF
;			CODE (DELTA FORMAT) AND THE SECOND WILL RECEIVE
;			THE ELAPSED TIME FOR THE BLOCK OF CODE.
;
;
;--

MAC$TIMER_ON::
	.WORD	0
	$GETJPI_G GETJPI_ARGBLK		;GET ACCUMULATED CPU TIME
	MOVL	4(AP),R0		;GET ADDRESS OF DUAL_QUAD_WORDS
	MOVQ	W^CPU_TIME,(R0)+	;SAVE STARTING CPU TIME
	PUSHAB	(R0)			;STACK ADDRESS OF STARTING ELAPSED TIME
	MOVL	W^PAGE_FAULTS,8(R0)	;STORE STARTING # PAGE FAULTS
	CALLS	#1,G^SYS$GETTIM		;GET STARTING WALL CLOCK TIME
	RET

	.SBTTL	MAC$TIMER_OFF	FINISH TIMING A BLOCK OF CODE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE COMPUTES THE CPU TIME AND ELAPSED TIME REQUIRED
;	FOR A BLOCK OF CODE.
;
;	CALLING SEQUENCE:
;
;	PUSHAB	DUAL_QUAD_WORD 
;	CALLS	#1,MAC$TIMER_OFF
;
;	INPUTS:
;
;	DUAL_QUAD_WORD	IS THE ADDRESS OF THE SAME DUAL QUAD WORD PASSED
;			TO MAC$TIMER_ON TO START TIMING THE BLOCK.
;			THE ACCUMULATED CPU TIME IS RETURNED IN THE FIRST
;			QUAD WORD (DELTA FORMAT) AND THE ELAPSED TIME
;			IS RETURNED IN THE SECOND QUAD WORD.
;
;--

	.ALIGN	LONG
MAC$TIMER_OFF::
	.WORD	^M<R9,R10>		;REGISTER SAVE MASK
	$GETJPI_G GETJPI_ARGBLK		;GET ACCUMULATED CPU TIME
	MOVAB	W^TIME,R10		;POINT TO QUADWORD
	PUSHAB	(R10)			;STACK QUADWORD ADDRESS
	CALLS	#1,G^SYS$GETTIM		;GET CURRENT WALL CLOCK TIME
	MOVL	4(AP),R0		;POINT TO FIRST QUAD WORD
	MOVAB	W^CPU_TIME,R9		;POINT TO CPU-TIME QUAD WORD
	SUBL3	(R0),(R9)+,(R0)+	;COMPUTE ACCUMULATED CPU TIME
	SBWC	(R0),(R9)		;...
	MOVL	(R9),(R0)+		;STORE IN THE QUADWORD
	SUBL2	(R10)+,(R0)+		;FIGURE ELAPSED REAL TIME
	SBWC	(R10),(R0)+		;...
	SUBL3	(R0),W^PAGE_FAULTS,(R0)	;COMPUTE # OF PAGE FAULTS THIS PHASE
	RET

	.END
