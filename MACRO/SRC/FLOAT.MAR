	.TITLE	MAC$FLOAT	FLOATING POINT INPUT CONVERSION ROUTINE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY: VAX-11 MACRO assembler.
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
;--
;
; VERSION: 01
;
; HISTORY:
;
; AUTHOR:
;	Peter Yuo, 25-Apr-77: Version 01
;
; MODIFIED BY:
;
; 02-16	PCG0010		Peter George		Sep-08-1981
;	Push R7 at subroutine calls.
;
; 02-15 PCG0008		Peter George		Aug-27-1981
;	Rewrite all floating point routines.
;
; 01-4	Peter Yuo, 3-Jun-77
;
; 01-11	Benn Schreiber, 2-May-78
;
; 01-12 Benn Schreiber, 19-SEP-78, Implement rounding for MACRO32
;
; 01-13	R. Newland, 18-Oct-1979, Implement G_floating and H_floating support
;
; 01-14 R. Newland, 3-Nov-1979, New message codes
; 01-15 R. Newland, 13-Jan-1980, Trap floating oveflow when rounding floating
;				 point number.
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 01 of FOR$FCNVIR
;
; 01-4	Add code to handle optional scale factor and digits in fraction
; 01-5  Fix bug in scale factor introduced in 01-4. Also shorten code
; 01-7	Fix bug in calculating S if there is a scale_factor
; 01-8	Fix bug in calculating S. If exponent field exists in input
;	P factor should be ignored.
; 01-9	Fixed bug in calculating S in order to take care of oveflow happened.
; 01-10	Change order of parameters to conform to standard.  JMT 15-Feb-78
; 01-11 Modify to work with VAX MACRO assembler

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$MAC_SYMBLKDEF			; Define symbol block offsets
	$MAC_CTLFLGDEF			; Define control flags
	$MAC_GENVALDEF			; Define general values
	$MAC_GRAMMARDEF			; Define terminal grammar symbols
	$MAC_INTCODDEF			; Define int. buffer codes
	$MAC_INTCODDEF			; Define int. buffer codes
	$MAC_OPRDEF			; Define operand descriptor bits
	$MACMSGDEF			; Define message codes
	$SSDEF				; Define status codes

;
; PSECT DECLARATIONS:
;

	.PSECT	MAC$RO_DATA,NOEXE,NOWRT,GBL,LONG
;
OTS_CVT:
	.ADDRESS  OTS$CVT_T_F		; Addresses of text to floating point
	.ADDRESS  OTS$CVT_T_D		; conversion routines
	.ADDRESS  OTS$CVT_T_G
	.ADDRESS  OTS$CVT_T_H

	.PSECT	MAC$RO_CODE_P1,NOWRT,GBL,LONG

;
; EQUATED SYMBOLS:
;
; The following symbols are used to indicate the bit position of the flag
; register.
;

	V_DEC_POINT	= 0		; Flag bit: 1 if decimal point is seen
	M_DEC_POINT	= ^X01		; Mask for V_DEC_POINT
	V_EXP_LET	= 1		; Flag bit: 1 if exponent is seen
	M_EXP_LET	= ^X02		; Mask for V_EXP_LET

;
; The following macro is used to store the current character in the temporary
; buffer, to increment the buffer length, and to get the next character.
;

	.MACRO  GETCHR
	MOVB	R10,(R4)+		; Move character to TMPBUF
	INCL	(R3)			; Increment string size
	BSBW	MAC$GETCHR		; Get next character
	.ENDM	GETCHR


	.SBTTL	MAC$READFLOAT		; {D,E,F,G} format text reading routine

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine copies floating point text from the input file,
;	into a temporary buffer.  It then calls the appropriate RTL
;	conversion routine to convert the text into the appropriate
;	internal floating point representation.
;
; INPUT PARAMETERS:
;
;	MAC$GL_CVTADDR	The address of the appropriate RTL routine to call.
;
; OUTPUT PARAMETERS:
;
;	MAC$GQ_VALUEQ	Contains the result.
;
; COMPLETION CODES:
;
;	R0		0	error in floating point syntax
;			1	good floating point number
;
;--

MAC$READFLOAT::

	CLRL	R5			; Clear flags
	MOVAB	W^MAC$AB_TMPBUF,R3	; Set TMPBUF pointer
	MOVAB	8(R3),4(R3)		; and string descriptor pointer
	CLRL	(R3)			; Initialize string size to zero
	MOVAB	8(R3),R4		; and set output pointer

SIGN:	CMPB	R10,#^A/-/		; Is current char a "-" sign?
	BEQL	SIGN_CONT		; Branch if yes
	CMPB	R10, #^A/+/		; Is current char a "+" sign?
	BNEQ	DEC_PT			; No, branch to decimal point test
SIGN_CONT:
	GETCHR				; Yes, get next character

DEC_PT:
	CMPB	R10, #^A/./		; Is current char a "."?
	BNEQ	DIGIT_LOOP		; No, branch to check if it is a digit
	BISB	#M_DEC_POINT, R5	; Set decimal point encounted flag
	GETCHR				; Get next character

DIGIT_LOOP:
	MOVZBL	R10,R6			; Copy char for destruction
	SUBL	#^A/0/, R6		; R6 = ASCII(current_char) - ASCII("0")
	BLSS	NOT_DIGIT		; If lss then not a digit
	CMPL	R6, #9			; Check if current char is a digit
	BGTRU	NOT_DIGIT		; Branch if it is a digit
DIGIT_CONT:
	GETCHR				; Get next character
	BRB	DIGIT_LOOP		; Check if it is a digit

NOT_DIGIT:
	CMPB	R10,#^A/./		; Check if current char is a "."
	BNEQ	EXP_LET			; No, process exponent
	BBSS	#V_DEC_POINT,R5,ERROR	; If second decimal point, then error
	BRB	DIGIT_CONT		; Get next digit

EXP_LET:
	BBSS	#V_EXP_LET,R5,CONVERT	; If exponent already processed, 
					; Then finished reading number
	BISB	#M_DEC_POINT,R5		; Flag decimal point as seen
	CMPB	R10,#^A/D/		; "D"?
	BEQL	EXP_SIGN		; Process exponent sign
	CMPB	R10,#^A/E/		; "E"?
	BEQL	EXP_SIGN		; Process exponent sign
	CMPB	R10,#^A/Q/		; "Q"?
	BEQL	EXP_SIGN		; Process exponent sign
	CMPB	R10, #^A/d/		; "d"?
	BEQL	EXP_SIGN		; Process exponent sign
	CMPB	R10, #^A/e/		; "e"?
	BEQL	EXP_SIGN		; Process exponent sign
	CMPB	R10, #^A/q/		; "q"?
	BNEQ	CONVERT			; No exponent, so finished

EXP_SIGN:
	GETCHR				; Get next character
	BRW	SIGN			; Process sign character

CONVERT:
	CLRQ	W^MAC$GQ_VALUEQ		; Clear value
	CLRQ	W^MAC$GQ_VAL2
	PUSHL	#1			; Ignore spaces
	PUSHL	#0
	PUSHL	#0
	PUSHAB	W^MAC$GO_VALUEO		; Address to put output
	PUSHL	R3			; String descriptor address
	CALLS	#5,@W^MAC$GL_CVTADDR	; Call RTL conversion routine
	BLBS	R0,FINI			; OK if LBS

ERROR:
	CLRQ	W^MAC$GQ_VALUEQ		; Set result to zero
	CLRQ	W^MAC$GQ_VAL2
	$INTOUT_LW INT$_ERR,<#MAC$_FLTPNTSYNX,W^MAC$GL_LINEPT> ; Issue error
	CLRL	R0			; Flag an error

FINI:
	MOVZBL	#DINTEGER,R8		; Return token is DINTEGER
	RSB

	.SBTTL	FLOATING POINT LITERALS

;
;	These routines are called to process floating point literals.
;

MAC$GETFLOAT::
	MOVAL	L^OTS$CVT_T_F,-		; Load address of RTL routine
		W^MAC$GL_CVTADDR 		
	BSBW	MAC$READFLOAT		; Call input and conversion routine
	RSB

MAC$GETDOUBLE::
	MOVAL	L^OTS$CVT_T_D,-		; Load address of RTL routine
		W^MAC$GL_CVTADDR 		
	BSBW	MAC$READFLOAT		; Call input and conversion routine
	MOVL	W^MAC$GL_VAL3,-		; Copy upper longword of value
		W^MAC$GL_HIGH_32
	RSB

MAC$GETGFLOAT::
	MOVAL	L^OTS$CVT_T_G,-		; Load address of RTL routine
		W^MAC$GL_CVTADDR 		
	BSBW	MAC$READFLOAT		; Call input and conversion routine
	MOVL	W^MAC$GL_VAL3,-		; Copy upper longword of value
		W^MAC$GL_HIGH_32
	RSB

MAC$GETHFLOAT::
	MOVAL	L^OTS$CVT_T_H,-		; Load address of RTL routine
		W^MAC$GL_CVTADDR 		
	BSBW	MAC$READFLOAT		; Call input and conversion routine
	MOVL	W^MAC$GL_VAL3,-		; Copy upper longword of value
		W^MAC$GL_HIGH_32
	MOVQ	W^MAC$GQ_VAL2,-		; Copy upper quadword of value
		W^MAC$GQ_HIGH_64
	RSB


	.SBTTL	FLOATING POINT DIRECTIVES

;
;	FLOAT, DOUBLE, GFLOAT, and HFLOAT are called to process 
;	the .FLOAT, .DOUBLE, .G_FLOAT, and .H_FLOAT directives,
;	respectively.  
;

FLOAT::					;DATA_STAT = KFLOAT
	PUSHL	R7			; Save R7
	MOVL	#RDX$V_FLOAT,R7		; Indiate data type
	BRB	GET_FLT_ARGS		; Join common code

DOUBLE::				;DATA_STAT = KDOUBLE
	PUSHL	R7			; Save R7
	MOVL	#RDX$V_DOUBLE,R7	; Indiate data type
	BRB	GET_FLT_ARGS		; Join common code

GFLOAT::				;DATA_STAT = KGFLOAT
	PUSHL	R7			; Save R7
	MOVL	#RDX$V_GFLOAT,R7	; Indiate data type
	BRB	GET_FLT_ARGS		; Join common code

HFLOAT::				;DATA_STAT = KHFLOAT
	PUSHL	R7			; Save R7
	MOVL	#RDX$V_HFLOAT,R7	; Indiate data type
	BRB	GET_FLT_ARGS		; Join common code

;
; Loop until the end-of-line, reading floating point numbers.  Emit
; code to pass 2 to stack the value, and if double precision, also
; stack the high order 32 bits.
;

GET_FLT_ARGS:
	BICL2	#4,R7			; Calculate RTL routine address
	ASHL	#2,R7,R7
	MOVL	W^OTS_CVT(R7),W^MAC$GL_CVTADDR 		

10$:	BSBW	MAC$SKIPSP		; Skip any spaces
	BSBW	MAC$READFLOAT		; Read floating point text
	$INTOUT_LW INT$_STIL,<W^MAC$GL_VALUE> ; Output bits 0-31
	$INC_PC #4			; Count them
	TSTL	R7			; Is it FLOAT?
	BEQL	20$			; Yes, then done outputing value
	$INTOUT_LW INT$_STIL,<W^MAC$GL_VAL3>  ; Output bits 32-63
	$INC_PC	#4			; Count them
	CMPL	R7,#<RDX$V_HFLOAT-RDX$V_FLOAT>*4  ; Is it HUGE?
	BNEQ	20$			; No, then done outputing value
	$INTOUT_LW INT$_STIL,<W^MAC$GQ_VAL2+0> ; Output bits 64-95
	$INTOUT_LW INT$_STIL,<W^MAC$GQ_VAL2+4> ; Output bits 96-127
	$INC_PC	#8			; Count them

20$:	BSBW	MAC$SKIPSP		; Skip spaces
	CMPB	R10,#CR			; End of line
	BEQL	40$			; Yes if EQL
	CMPB	R10,#^A/,/		; No--comma?
	BEQL	30$			; if eql yes
	$MAC_ERR FLTPNTSYNX		; No--get error code
	BSBW	MAC$ERRORLN		; Issue error to pass 2
	BSBW	MAC$SKP_OPR		; Skip to comma or eol
	CMPB	R10,#CR			; Skip to end of line?
	BEQL	40$			; If eql yes--all done
30$:	BSBW	MAC$GETCHR		; Skip the comma
	BRB	10$			; Continue
40$:	MOVL	(SP)+,R7		; Restore R7
	RSB				; All done

	.END
