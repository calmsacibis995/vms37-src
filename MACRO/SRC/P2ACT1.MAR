	.TITLE	MAC$P2ACT1 ACTION ROUTINES FOR PASS 2
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 25-AUG-78
;
; MODIFIED BY:
;
;	V03.00	MTR0008		Mike Rhodes	15-Mar-1982
;		Modify routine P2$END to test the setting of the "external"
;		error flags FLG$V_EXTERR and FLG$V_EXTWRN, exiting with the
;		more severe status if set.  Else, it will check and set the
;		completion status as in the past, according to the type of
;		assembly errors encountered.  Fixes SPR #11-41651(A).
;
;	V02.09	CNH0039		Chris Hume	 7-Oct-1980
;		Closed off a few remaining object record length checking
;		errors.  (IODAT.MAR 02.08, OHDOUT.MAR 02.02)
;
;	V02.08	CNH0036		Chris Hume	14-Jul-1980
;		Closed off some more areas where the assembler was writing
;		object records too long for the linker.  (P2ACT2.MAR 02.11)
;
;	V02.07	CNH0034		Chris Hume	14-May-1980
;		Restrained the assembler from occasionally writing object
;		records too long for the linker.
;
;	V01.06	RN0023		R. Newland	 3-Nov-1979
;		New message codes to get error messages from system
;		message file.
;
;	V01.05	RN0007		R. Newland	28-Aug-1979
;		Store signed byte for non-optimised, not PC relative
;		8-bit displacment and deferred displacement
;
;	V01.04	RN0005		R. Newland	13-Aug-1979
;		Remove .ALIGN LONG statements
;
;	V01.03	RN0003		R. Newland	22-May-1979
;		Store signed word for not PC-relative, non-optimised
;		16-bit displacement and deferred displacement
;
;	V01.02	RN0002		R. Newland	01-Feb-1979
;		Changes for Source Update Merge
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$MAC_SYMBLKDEF			;DEFINE SYMBOL BLOCK OFFSETS
	$MAC_CTLFLGDEF			;DEFINE CONTROL FLAGS
	$MAC_ADRMODDEF			;DEFINE ADDRESSING MODES
	$MAC_TIRCMDDEF			;DEFINE TIR COMMANDS
	$MAC_OBJCODDEF			;DEFINE OBJECT MODULE CODES
	$MACMSGDEF			; Define message codes
	$MAC_GENVALDEF			; Define VAX-11 MACRO commom symbols

	.PSECT	MAC$RO_CODE_P2,NOWRT,GBL,LONG

	.SBTTL	P2$STKG	STACK GLOBAL, EXTERNAL SYMBOL

;++
; FUNCTIONAL DESCRIPTION:
;
;	EMIT TEXT TO OBJECT FILE TO STACK A GLOBAL SYMBOL.
;
; INPUTS:
;
;	R8	POINTS INTO INTERMEDIATE BUFFER
;
;--

P2$STKG::
	MOVL	(R8)+,R6		;GET SYMBOL BLOCK ADDRESS
	$VPUSH	SYM$L_VAL(R6)		;PUSH SYMBOL VALUE ONTO STACK
	$OBJ_CHKBYT #TIR$C_STA_GBL	;EMIT COMMAND FOR LINKER TO STACK GLOBAL
	BRW	MAC$SYMNAMOUT		;EMIT SYMBOL NAME AND RETURN

	.SBTTL	P2$STKS	STACK SYMBOL

;++
; FUNCTIONAL DESCRIPTION:
;
;	STACK THE SYBMOL POINTED TO BY THE WORD IN THE INTERMEDIATE
;	FILE.  IF THE SYMBOL IS ABSOLUTE IT IS TREATED LIKE A
;	'STACK LITERAL'.  IF IT IS EXTERNAL IT IS TREATED LIKE A
;	'STACK GLOBAL'.
;
; INPUTS:
;
;	R8	POINTER INTO INTERMEDIATE FILE
;
;--

P2$STKS::
	MOVL	(R8),R6			;GET SYMBOL BLOCK ADDRESS
	BEQL	80$			;IF EQL SPECIAL CANCEL COMMAND
					;  FOR BRANCH DESTINATION
	BBC	#SYM$V_ABS,SYM$W_FLAG(R6),10$ ;BRANCH IF NOT ABSOLUTE SYMBOL
;
; PRETEND ITS A STACK LITERAL
;
	MOVAB	SYM$L_VAL(R6),R8	;POINT TO SYMBOL VALUE
	BRW	P2$STKL			;AND TREAT LIKE STACK LITERAL
;
; RELOCATABLE SYMBOL
;
10$:	BBS	#SYM$V_DEF,SYM$W_FLAG(R6),40$ ;BRANCH IF SYMBOL DEFINED
	BBS	#SYM$V_LOCAL,SYM$W_FLAG(R6),20$ ;BRANCH IF LOCAL SYMBOL
	BBS	#SYM$V_EXTRN,SYM$W_FLAG(R6),30$ ;BRANCH IF DECLARED EXTERNAL
;
; SYMBOL LOCAL AND NOT DEFINED, OR NOT EXTERNAL
;
20$:	$MAC_P2_ERR UNDEFSYM		; Report undefined symbol
;
; TREAT AS GLOBAL SYMBOL
;
30$:	BRW	P2$STKG			;AND TREAT AS STACK GLOBAL
;
; SYMBOL IS DEFINED
;
40$:	$VPUSH	SYM$L_VAL(R6)		;STACK SYMBOL VALUE
	MOVZBL	SYM$B_SEG(R6),R4	;GET SYMBOL SEGMENT
	MOVAB	SYM$L_VAL(R6),R3	;POINT TO SYMBOL VALUE
	MOVZBL	#4,R2			;ASSUME LONGWORD
	MOVZBL	#TIR$C_STA_PL,R1	;STACK PSECT BASE PLUS LONGWORD
	TSTW	2(R3)			;CAN WE OPTIMIZE?
	BNEQ	60$			;IF NEQ NO
	TSTW	(R3)			;
	BLSS	60$			;IF LSS CANNOT OPTIMIZE
	MOVZBL	#2,R2			;MAKE WORD
	MOVZBL	#TIR$C_STA_PW,R1	;STACK PSECT BASE PLUS WORD
	TSTB	1(R3)			;OPTIMIZE TO BYTE?
	BNEQ	60$			;IF NEQ NO
	TSTB	(R3)			;
	BLSS	60$			;IF LSS CANNOT OPTIMIZE
	MOVZBL	#1,R2			;MAKE BYTE
	MOVZBL	#TIR$C_STA_PB,R1	;STACK PSECT BASE PLUS BYTE
;
; R1 -- COMMAND
; R4 -- SEGMENT
; R3 -- POINTS TO SYMBOL VALUE
;
60$:	$OBJ_CHKBYT R1			;STACK COMMAND
	$OBJ_OUTBYT_0 R4		;STACK SEGMENT #
70$:	$OBJ_OUTBYT_0 (R3)+		;EMIT VALUE
	SOBGTR	R2,70$			;LOOP FOR ALL BYTES
80$:	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	EMIT TEXT TO OBJECT FILE TO REDEFINE TRANSFER ADDRESS.
;
;--

P2$REDEF::
	MOVL	(R8)+,R6		;GET SYMBOL BLOCK ADDRESS
	$VPUSH	SYM$L_VAL(R6)		;STACK VALUE
	$OBJ_CHKBYT #TIR$C_OPR_REDEF	;EMIT REDEFINE COMMAND
	BRW	MAC$SYMNAMOUT		;EMIT SYMBOL NAME AND RETURN

	.SBTTL	P2$STKL	STACK LITERAL VALUE

;++
; FUNCTIONAL DESCRIPTION:
;
;	STACK THE LITERL VALUE SUPPLIED IN THE INTERMEDIATE BUFFER.
;	IF POSSIBLE, IT WILL BE OPTIMIZED TO A BYTE OR WORD.
;
; INPUTS:
;
;	R8	POINTS INTO INTERMEDIATE BUFFER
;
;--

P2$STKL::
	$VPUSH	(R8)			;STACK THE VALUE
	MOVZBL	#4,R5			;ASSUME LONGWORD VALUE
	MOVZBL	#TIR$C_STA_LW,R4	;...
	TSTW	2(R8)			;CAN WE OPTIMIZE TO WORD?
	BNEQ	10$			;MAYBE--SEE IF NEGATIVE
	MOVZBL	#2,R5			;YES--MAKE WORD VALUE
	MOVZBL	#TIR$C_STA_UW,R4	;STACK UNSIGNED WORD
	TSTB	1(R8)			;OPTIMIZE TO BYTE?
	BNEQ	20$			;IF NEQ NO
	MOVZBL	#1,R5			;YES--MAKE BYTE VALUE
	MOVZBL	#TIR$C_STA_UB,R4	;STACK UNSIGNED BYTE
	BRB	20$
;
; HIGH ORDER WORD IS NON-ZERO
;
10$:	CMPW	#-1,2(R8)		;IS HI-ORDER WORD -1?
	BNEQ	20$			;IF NE NO--CANNOT OPTIMIZE
	TSTW	(R8)			;LOW ORDER WORD NEGATIVE?
	BGEQ	20$			;IF GE NO--CANNOT OPTIMIZE
	MOVZBL	#2,R5			;YES--OPTIMIZE TO WORD
	MOVZBL	#TIR$C_STA_SW,R4	;STACK SIGNED WORD
	CMPB	#-1,1(R8)		;CAN WE OPTIMIZE TO BYTE?
	BNEQ	20$			;IF NE NO
	TSTB	(R8)			;MAYBE
	BGEQ	20$			;IF GE CANNOT OPTIMIZE
	MOVZBL	#1,R5			;MAKE BYTE
	MOVZBL	#TIR$C_STA_SB,R4	;STACK SIGNED BYTE
20$:	$OBJ_CHKBYT R4			;EMIT COMMAND
30$:	$OBJ_OUTBYT_0 (R8)+		;EMIT DATA
	SOBGTR	R5,30$			;LOOP FOR ALL BYTES
	RSB

	.SBTTL	P2$BDST	BRANCH DESTINATION GENERATION

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE GENERATES BRANCH DESTINATIONS.
;
;
; INPUTS:
;
;	R8 >>	2 BYTES OF MAC$GL_OPSIZE
;		4 BYTES OF 0 OR SYMBOL ID ADDRESS (IF SPECIAL RESOLUTION)
;		1 BYTE OF 0 OR PSECT # (IF SPECIAL RESOLUTION)
;
;--

P2$BDST::
	MOVZWL	(R8),W^MAC$GL_OPSIZE	;COPY FLAGS
	BBCC	#OPF$V_LASTOPR,(R8),5$	;CLEAR LAST OPERAND FLAG IN BUFFER
5$:	CMPW	W^MAC$GL_LIST_PTR,#MAC$AB_LST_OP1 ;IN OPERAND FIELD?
	BLEQU	10$			;IF LEQU POINTER OK
	MOVAB	W^MAC$AB_LST_OP1,-	;POSITION TO OPERAND
			W^MAC$GL_LIST_PTR
	CLRL	W^MAC$GL_MOPNUM
10$:	MOVL	2(R8),R6		;GET SYMBOL ADDRESS
	TSTB	1(R8)			;SPECIAL PASS 2 RESOLUTION?
	BNEQ	50$			;IF NEQ NO
	TSTL	R6			;YES--SYMBOL SPECIFIED?
	BEQL	50$			;IF EQL NO
	CMPB	6(R8),SYM$B_SEG(R6)	;YES--SAME PSECT?
	BNEQ	40$			;IF NEQ NO
	BBC	#SYM$V_DEF,SYM$W_FLAG(R6),40$ ;YES--SYMBOL DEFINED?
;
; SYMBOL IS DEFINED, AND LIVES IN SAME PSECT.  RESOLVE SYMBOL
; AND PRETEND OPTIMIZATION.
;
	MOVL	SYM$L_VAL(R6),2(R8)	;SET SYMBOL VALUE
	MOVB	#1,1(R8)		;PRETEND OPTIMIZED
	BRB	50$			;SKIP SOME
;
; SYMBOL IN DIFFERENT PSECT OR NOT DEFINED.  TREAT LIKE SYMBOL
;
40$:	PUSHR	#^M<R5,R6,R8>		;SAVE REGISTERS
	TSTW	(R8)+			;POINT TO ID POINTER
	BSBW	P2$STKS			;STACK THE SYMBOL
	POPR	#^M<R5,R6,R8>		;RESTORE REGISTERS
50$:	TSTB	1(R8)			;OPTIMIZED?
	BEQL	60$			;IF EQL NO
	$VPUSH	2(R8)			;YES--STACK TARGET ADDRESS
60$:	$VPUSH	W^MAC$GL_PC		;STACK CURRENT PC
	CMPB	(R8),#1			;ONE BYTE BRANCH DESTINATION?
	BNEQ	120$			;IF NE NO
;
; ONE BYTE BRANCH DESTINATION
;
	INCL	W^MAC$AL_VALSTACK[R7]	;ADD 1 TO PC
	BSBW	P1$ARITH_SUB		;COMPUTE BRANCH OFFSET
	MOVAL	W^MAC$AL_VALSTACK[R7],R5;POINT TO RESULT
	TSTB	1(R8)			;OPTIMIZED?
	BEQL	100$			;IF EQL NO
	TSTW	2(R5)			;YES--CHECK FOR DEST. OUT OF RANGE
	BNEQ	70$			;IF NEQ CHECK NEGATIVE DEST. OUT OF RANGE
	BITW	#^C<^X7F>,(R5)		;POSITIVE DEST. OUT OF RANGE?
	BNEQ	80$			;IF NEQ YES--REPORT ERROR
	BRB	90$			;NO--CONTINUE
;
; CHECK NEGATIVE DEST. OUT OF RANGE
;
70$:	BISW3	(R5),#^X7F,R3		;HOPEFULLY MAKE -1
	CMPW	2(R5),#-1		;HI WORD ALL ONES?
	BNEQ	80$			;IF NEQ NO--DEST. OUT OF RANGE
	CMPW	R3,#-1			;YES--LOW WORD AND ^XFF ALL ONES?
	BEQL	90$			;IF EQL YES--OK
;
; DEST. OUT OF RANGE
;
80$:	$MAC_P2_ERR BRDESTRANG		; Report branch destination out of range
90$:	MOVB	(R5),R0			;GET DESTINATION OFFSET
	BSBW	MAC$STOIM		;STORE INTO OBJECT FILE
	BRB	110$
;
; UN-OPTIMIZABLE BRANCH DESTINATION
;
100$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_BD	;STORE BYTE DISPLACED
;
; FINISH UP 1-BYTE BRANCH DESTINATION PROCESSING
;
110$:	$MAC_LIST_BYTE #1		;SEND ONE BYTE TO LISTING
	BRB	180$			;
;
; TWO-BYTE BRANCH DESTINATION GENERATION
;
120$:	ADDL2	#2,W^MAC$AL_VALSTACK[R7];ADD TWO TO PC
	BSBW	P1$ARITH_SUB		;COMPUTE OFFSET
	MOVAL	W^MAC$AL_VALSTACK[R7],R5;POINT TO OFFSET RESULT
	TSTB	1(R8)			;OPTIMIZED OFFSET?
	BEQL	160$			;IF EQL NO
	MOVW	2(R5),R3		;YES--CHECK FOR DEST. OUT OF RANGE
	BEQL	130$			;IF EQL CHECK FOR FORWARD OUT OF RANGE
	CMPW	R3,#-1			;NEGATIVE--IS HI WORD ALL ONES?
	BNEQ	140$			;IF NEQ NO--RANGE ERROR
	TSTW	(R5)			;YES--IS LO WORD NEGATIVE?
	BGEQ	140$			;IF GEQ NO--RANGE ERROR
	BRB	150$			;YES--OK
;
; CHECK FORWARD RANGE ERROR
;
130$:	TSTW	(R5)			;FORWARD DEST. OUT OF RANGE
	BGEQ	150$			;IF GEQ NO
;
; REPORT BRANCH DESTINATION OUT OF RANGE
;
140$:	$MAC_P2_ERR BRDESTRANG		; Emit message
;
; FINISH TWO-BYTE BRANCH DESTINATION PROCESSING
;
150$:	MOVB	(R5)+,R0		;GET LOW BYTE
	BSBW	MAC$STOIM		;STORE INTO OBJECT FILE
	MOVB	(R5),R0			;GET HIGH BYTE
	BSBW	MAC$STOIM		;STORE INTO OBJECT FILE
	TSTB	-(R5)			;KEEP R5 POINTING AT TOP OF VALUE STACK
	BRB	170$			;FINISH BRANCH DEST. PROCESSING
;
; NON-OPTIMIZED TWO BYTE BRANCH DESTINATION
;
160$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;STORE QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_WD	;STORE WORD DISPLACED
;
; FINISH TWO-BYTE BRANCH DESTINATION PROCESSING
;
170$:	$MAC_LIST_BYTE #2		;SEND TWO BYTES TO LISTING
;
; FINISH BRANCH DESTINATION PROCESSING
;
180$:	RSB				; Return

	.SBTTL	P2$LGLAB LABEL ROUTINE--CHECK FOR PHASE ERRORS

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE CHECKS THAT THE VALUE FOR THE SYMBOL IS
;	THE SAME AS THE CURRENT PC.  IF NOT, AN ERROR MESSAGE
;	IS ISSUED.
;
;--

P2$LGLAB::
	MOVL	(R8),R6			;POINT TO SYMBOL BLOCK
	CMPL	W^MAC$GL_PC,SYM$L_VAL(R6) ;PC MATCH SYMBOL VALUE?
	BEQL	10$			;IF EQL YES
	$MAC_P2_ERR SYMOUTPHAS		; No--report phase error
10$:	BBCS	#FLG$V_MEBLST,(R11),20$	;FORCE LABELS TO BE LISTED
20$:	RSB

	.SBTTL	P2$OP	OPCODE GENERATOR

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE WRITES THE OPCODE TO THE OBJECT AND LISTING
;	FILES.
; INPUTS:
;
;	R8 >>	OPCODE VALUE (1 WORD)
;
;--

P2$OP::
	MOVAB	W^MAC$AB_LST_OPR,W^MAC$GL_LIST_PTR ;MOVE TO OPCODE FIELD
	CLRL	R7			;PREVENT STACK UNDERFLOW
	$VPUSH	(R8)			;PUSH OPCODE VALUE
	MOVAL	W^MAC$AL_VALSTACK[R7],R5;KEEP R5 POINTING TO TOP OF STACK
	MOVZBL	#1,R0			;ASSUME 1 BYTE OPCODE
	TSTB	1(R8)			;TWO BYTE OPCODE?
	BEQL	10$			;IF EQL NO
	INCL	R0			;YES--EMIT TWO BYTES
10$:	$MAC_LIST_BYTE R0		;SEND OPCODE VALUE TO LISTING
	TSTB	1(R8)			;TWO BYTE OPCODE?
	BNEQ	20$			;IF NEQ YES
	SUBL2	#2,W^MAC$GL_LIST_PTR	;TWO SPACES FOR ONE BYTE OPCODE
20$:	MOVB	(R8)+,R0		;EMIT LOW BYTE OF OPCODE
	BSBW	MAC$STOIM
	MOVB	(R8),R0			;TWO BYTE OPCODE?
	BEQL	30$			;IF EQL NO
	BRW	MAC$STOIM		;YES--STORE INTO OBJECT FILE
30$:	RSB				;AND RETURN

	.SBTTL	P2$REF	OPERAND REFERENCE GENERATION

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE GENERATES OPERAND REFERENCES.  THE VALUE ASSOCIATED
;	WITH THE REFERENCE (IF ANY) IS LEFT ON THE VALUE STACK.
;
; INPUTS:
;
;	R8 >>	MODE	(1 BYTE)	OPERAND MODE ('E' MODE IF INDEXED)
;		IMODE	(1 BYTE)
;		REG	(1 BYTE)	OPERAND REGISTER ('E' REG. IF INDEXED)
;		IREG
;		FLAGS	(1 WORD)
;		VALUE	(1 LONGWORD)	ONLY IF OPTIMIZED
;
;--

P2$REF::
	MOVZWL	4(R8),W^MAC$GL_OPSIZE	;COPY FLAGS
	BBCC	#OPF$V_LASTOPR,4(R8),5$	;CLEAR LAST OPERAND FLAG
5$:	CMPW	W^MAC$GL_LIST_PTR,-	;POINTER OK?
			#MAC$AB_LST_OP1
	BLEQU	10$			;IF LEQU OK
	MOVAB	W^MAC$AB_LST_OP1,-	;NO--SET POINTER
			W^MAC$GL_LIST_PTR
10$:	BBCC	#FLG$V_EXPOPT,(R11),20$	;CLEAR OPTIMIZED EXPRESSION FLAG
20$:
P2$XREF:
	TSTB	5(R8)			;OPTIMIZED?
	BEQL	10$			;IF EQL NO
	PUSHL	R7			;YES--SAVE VALUE STACK POINTER
	$VPUSH	6(R8)			;STACK VALUE
	BBCS	#FLG$V_EXPOPT,(R11),10$	;SET OPTIMIZED EXPRESSION FLAG
10$:	MOVZBL	(R8),R0			;GET MODE OF REFERENCE
	BLSS	20$			;IF LSS THEN ILLEGAL MODE
	CMPB	R0,#15			;
	BLEQ	30$			;IF LEQ THEN LEGAL MODE
20$:	$MAC_P2_ERR ILLMODE		; Report mode error
	CLRL	R0			;USE MODE 0
30$:	MOVZBL	R0,R3			;SAVE MODE
	ASHL	#4,R0,R2		;SHIFT MODE TO UPPER 4 BITS OF BYTE
	MOVZBL	2(R8),R4		;GET REGISTER OF REFERENCE
	BLSS	40$			;IF LSS THEN ILLEGAL REGISTER
	CMPB	R4,#15			;LEGAL REGISTER?
	BLEQ	50$			;IF LEQ YES
40$:	$MAC_P2_ERR ILLREGNUM		; No-report register error
50$:
	BISB2	R4,R2			;PACK MODE AND REGISTER
	$VPUSH	R2			;AND STORE ONTO VALUE STACK
	MOVAL	W^MAC$AL_VALSTACK[R7],R5 ;POINT TO VALUE ON TOP OF STACK
;
; CALL REFERENCE PROCESSING ROUTINE WITH:
;
;	R8	POINTER INTO INTERMEDIATE CODE BUFFER
;	R7	VALUE STACK POINTER
;	R6
;	R5	POINTER TO TOP VALUE ON VALUE STACK (MAC$AL_VALSTACK[R7])
;	R4	REGISTER FOR REFERENCE
;	R2	Number of characters to display operand
;
	MOVB	W^REF_SIZE[R3],R2	; Get characters required
	MOVL	W^REF_DISP[R3],R3	;GET DISPATCH ROUTINE ADDRESS
	JSB	(R3)			;DISPATCH TO MODE ROUTINE
	BBCC	#FLG$V_EXPOPT,(R11),60$	;BRANCH IF NOT OPTIMIZED REFERENCE
	MOVL	(SP)+,R7		;YES--RESTORE VALUE STACK PTR
60$:	RSB				; and return
					;AND RETURN

	.MACRO	REF_PRO	ROUTINE
	.DEBUG	ROUTINE
	.LONG	ROUTINE
	.ENDM	REF_PRO
REF_DISP:				;OPERAND REFERENCE DISPATCH TABLE
	REF_PRO	REF_0			;LITERAL
	REF_PRO	REF_1			;IMMEDIATE (PC)+
	REF_PRO	REF_2			;DEFERRED IMMEDIATE @(PC)+
	REF_PRO	REF_3			;POSITION INDEPENDENT (G^)
	REF_PRO	REF_4			;INDEXED
	REF_PRO	REF_5			;REGISTER
	REF_PRO	REF_6			;REGISTER DEFERRED
	REF_PRO	REF_7			;AUTO DECREMENT
	REF_PRO	REF_8			;AUTO INCREMENT
	REF_PRO	REF_9			;DEFERRED AUTO INCREMENT
	REF_PRO	REF_A			;BYTE DISPLACEMENT
	REF_PRO	REF_B			;DEFERRED BYTE DISPLACEMENT
	REF_PRO	REF_C			;WORD DISPLACEMENT
	REF_PRO	REF_D			;DEFERRED WORD DISPLACEMENT
	REF_PRO	REF_E			;LONG WORD DISPLACEMENT
	REF_PRO	REF_F			;DEFERRED LONG WORD DISPLACEMENT
;
; Table of characters required to display operand
;
REF_SIZE:
	.BYTE	2			; Literal
	.BYTE	3			; Immediate (PC)+
	.BYTE	3			; Deferred immediate (PC)+
	.BYTE	11			; Position independent (G^)
	.BYTE	2			; Indexed
	.BYTE	2			; Register
	.BYTE	2			; Register deferred
	.BYTE	2			; Auto decrement
	.BYTE	2			; Auto increment
	.BYTE	2			; Deferred auto increment
	.BYTE	5			; Byte displacement
	.BYTE	5			; Deferred byte displacement
	.BYTE	7			; Word displacment
	.BYTE	7			; Deferred word displacment
	.BYTE	11			; Long word displacment
	.BYTE	11			; Deferred word long displacment

	.SBTTL	ROUTINES CALLED BY P2$REF

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE PROCESSES LITERAL REFERENCES
;
;--

REF_0:					;LITERAL MODE
	BSBW	OPND_CHECK		; Check listing space for operand
	DECL	R7			;IGNORE MODE/REG ON STACK
	TSTL	-(R5)			;BACKUP STACK POINTER
	BBC	#FLG$V_EXPOPT,(R11),30$	;BRANCH IF NOT OPTIMIZED EXPRESSION
	TSTW	2(R5)			;CHECK FOR LEGAL LITERAL
	BNEQ	10$			;IF NEQ THEN TRUNCATION
	CMPW	(R5),#63		;LARGEST LITERAL
	BLEQU	20$			;IF LEQ THEN OK
10$:	$MAC_P2_ERR DATATRUNC		; Error message
20$:	MOVB	(R5),R0			;GET BYTE OF DATA
	BSBW	MAC$STOIM		;STORE INTO OBJECT FILE
	BRB	40$
;
; NOT OPTIMIZED
;
30$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_LI	;STORE LITERAL 
40$:	$MAC_LIST_BYTE #1		;LIST THE BYTE
	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	REF_2 PROCESSES ABSOLUTE [@(PC)+] REFERENCES.  REF_1
;	PROCESSES IMMEDIATE REFERENCES
;
;--

REF_2:					;ABSOLUTE @(PC)+
	MOVZWL	#<ADM$_DFRAUTOINC@4>+15,R0;SET MODE/REGISTER
	BRB	IMM
REF_1:					;IMMEDIATE MODE (PC)+
	MOVZWL	#<ADM$_REGAUTOINC@4>+15,R0;SET MODE/REGISTER
IMM:	MOVL	R0,(R5)			;SET MODE/REGISTER ON STACK
	BSBW	MAC$STOIM		;STORE MODE/REGISTER IN OBJECT CODE
	MOVZBL	4(R8),R0		; Get type of reference (byte, word, long)
	ASHL	#1,R0,R0		; Convert to number of chars required
	ADDL2	R0,R2			; add to initial size
	BSBW	OPND_CHECK		; Check listing space for operand
	$MAC_LIST_BYTE #1		;LIST MODE/REGISTER
	CMPB	4(R8),#1		;BYTE FORMAT?
	BNEQ	30$			;IF NEQ NO
;
; BYTE FORMAT IMMEDIATE REFERENCE
;
	BBC	#FLG$V_EXPOPT,(R11),10$	;BRANCH IF NOT OPTIMIZED EXPRESSION
	BSBW	MAC$CK_BYT_TRUN		;YES--CHECK TRUNCATION
	MOVB	(R5),R0			;GET THE VALUE
	BSBW	MAC$STOIM		;STORE INTO OBJECT CODE
	BRB	20$
;
; NON-OPTIMIZED BYTE
;
10$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE INTO LISTING
	$OBJ_CHKBYT #TIR$C_STO_B	;STORE BYTE COMMAND
20$:	$MAC_LIST_BYTE #1		;LIST BYTE VALUE
	RSB
;
; NOT BYTE REFERENCE
;
30$:	CMPB	4(R8),#2		;WORD FORMAT?
	BNEQ	60$			;IF NEQ NO--LONGWORD
	BBC	#FLG$V_EXPOPT,(R11),40$	;YES--BRANCH IF NOT OPTIMIZED
	BSBW	MAC$CK_WRD_TRUN		;OPTIMIZED--CHECK TRUNCATION
	MOVZBL	#2,R4			;SET COUNT
	BRB	65$			;GO STORE BYTES
;
; NON-OPTIMIZED WORD REFERENCE
;
40$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;STORE QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_W	;STORE WORD COMMAND
50$:	$MAC_LIST_BYTE #2		;LIST WORD
	RSB
;
; LONGWORD FORMAT
;
60$:	BBC	#FLG$V_EXPOPT,(R11),80$	;BRANCH IF NOT OPTIMIZED
	MOVZBL	#4,R4			;GET LOOP COUNT
;
; EMIT VALUE TO OBJECT CODE, 1 BYTE AT A TIME
;
65$:	PUSHL	R4			;SAVE BYTE COUNT
70$:	MOVB	(R5)+,R0		;GET NEXT BYTE
	BSBW	MAC$STOIM		;STORE INTO OBJECT CODE
	SOBGTR	R4,70$			;LOOP FOR ALL
	MOVL	(SP)+,R4		;RESTORE BYTE COUNT
	SUBL2	R4,R5			;ADJUST THE STACK POINTER
	BRB	90$
;
; NON-OPTIMIZED LONGWORD
;
80$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;STORE QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_LW	;STORE LONGWORD COMMAND
	MOVZBL	#4,R4			;SET TO LIST 4 BYTES
90$:	$MAC_LIST_BYTE R4		;LIST LONGWORD
	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	STORE POSITION INDEPENDENT REFERENCES.
;
;--

REF_3:
	BSBW	OPND_CHECK		; Check listing space for operand
	DECL	R7			;IGNORE MODE/REGISTER
	TSTL	-(R5)			;BACK R5 UP TOO
	BBC	#FLG$V_EXPOPT,(R11),30$	;BRANCH IF NOT OPTIMIZED REFERENCE
	MOVZBL	#TIR$C_STA_PL,R3	;ASSUME LONGWORD
	MOVZBL	#4,R2			;...
	TSTW	2(R5)			;CAN WE OPTIMIZE SOME MORE?
	BNEQ	10$			;IF NEQ NO
	TSTW	(R5)			;MAYBE--CHECK LOW WORD
	BLSS	10$			;IF LSS CANNOT OPTIMIZE
	MOVZBL	#TIR$C_STA_PW,R3	;CHANGE TO STACK WORD
	MOVZBL	#2,R2			;...
	TSTB	1(R5)			;WE'RE DOING GOOD--OPTIMIZE TO BYTE?
	BNEQ	10$			;IF NEQ NO
	TSTB	(R5)			;MAYBE
	BLSS	10$			;IF LSS NO
	MOVZBL	#TIR$C_STA_PB,R3	;YES--CHANGE TO BYTE
	MOVZBL	#1,R2			;...
10$:	$OBJ_CHKBYT R3			;OUTPUT COMMAND
	$OBJ_OUTBYT_0 W^MAC$GL_PSECT	;OUTPUT CURRENT PSECT NUMBER
	PUSHL	R2			;SAVE BYTE COUNT
20$:	$OBJ_OUTBYT_0 (R5)+		;EMIT ONE BYTE OF VALUE
	SOBGTR	R2,20$			;LOOP FOR ALL
	SUBL2	(SP)+,R5		;ADJUST STACK POINTER
30$:	$OBJ_CHKBYT #TIR$C_STO_PICR	;GENERATE POS. IND. REF.
	MOVZBL	#^A/F/,R0		;PRINT 'F'
	BSBW	MAC$LST_CHAR
	MOVZBL	#^A/G/,R0		;PRINT 'G'
	BSBW	MAC$LST_CHAR
	MOVZBL	#^A/'/,R0		;PRINT QUOTE
	BSBW	MAC$LST_CHAR
	$INC_PC				;COUNT MODE/REGISTER
	$MAC_LIST_BYTE #4		;PRINT LONGWORD ON STACK
	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	PROCESS INDEX MODE REFERENCES
;
;--

REF_4:					;INDEXED REFERENCE
	MOVZBL	1(R8),R0		; Get mode of reference
	ADDB2	W^REF_SIZE[R0],R2	; and add bytes required
	BSBW	OPND_CHECK		; Check listing space for operand
	MOVB	(R5),R0			;GET MODE/REGISTER
	BSBW	MAC$STOIM		;STORE INTO OBJECT CODE
	$MAC_LIST_BYTE #1		;LIST MODE/REGISTER
	INCL	W^MAC$GL_LIST_PTR	; Back up over space
	BBSS	#FLG$V_OPNDCHK,(R11),10$ ; Flag that operand check is done
10$:
	MOVB	1(R8),(R8)		;MOVE MODES
	CLRB	1(R8)			;
	MOVB	3(R8),2(R8)		;
	CLRB	3(R8)
	BICL3	#^C<FLG$M_EXPOPT>,(R11),-(SP) ;SAVE OLD EXPOPT FLAG
	BSBW	P2$XREF			;CALL XREF FOR REST OF OPERAND
	BISL2	(SP)+,(R11)		;SET EXPOPT FLAG IF SET BEFORE
	RSB				;ALL DONE

REF_5:					;REGISTER
REF_6:					;REGISTER DEFERRED
REF_7:					;AUTODECREMENT
REF_8:					;AUTOINCREMENT
REF_9:					;AUTOINCREMENT DEFERRED
	BSBW	OPND_CHECK		; Check listing space for operand
	MOVB	(R5),R0			;GET MODE/REGISTER
	BSBW	MAC$STOIM		;STORE IN OBJECT CODE
	$MAC_LIST_BYTE #1		;LIST MODE/REGISTER
	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE PROCESSES 8-BIT DISPLACEMENT REFERENCES
;
;--

REF_A:					;8-BIT DISPLACEMENT
REF_B:					;8-BIT DEFERRED DISPLACEMENT
	BSBW	OPND_CHECK		; Check listing space for operand
	MOVB	(R5),R0			;GET MODE/REGISTER
	BSBW	MAC$STOIM		;OUTPUT TO OBJECT CODE
	$MAC_LIST_BYTE #1		;LIST MODE/REGISTER
	CMPB	2(R8),#15		;PC RELATIVE REFERENCE?
	BNEQ	20$			;IF NEQ NO
	BBC	#FLG$V_EXPOPT,(R11),10$	;YES--BRANCH IF NOT OPTIMIZED
	$VPUSH	W^MAC$GL_PC		;OPTIMIZED--STACK PC
	TSTL	(R5)+			;BUMP R5
	INCL	(R5)			;ADD 1 FOR OPERAND
	BSBW	P1$ARITH_SUB		;
	TSTL	-(R5)			;BACK UP MY POINTER
	BSBW	MAC$CK_SBY_TRUN		;CHECK FOR TRUNCATION
	MOVB	(R5),R0			;GET BYTE
	BSBW	MAC$STOIM		;AND STORE IN OBJECT CODE
	BRB	40$
;
; NON-OPTIMIZED PC-RELATIVE
;
10$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE INTO LISTING
	$OBJ_CHKBYT #TIR$C_STO_BD	;STORE BYTE DISPLACED
	BRB	40$
;
; NOT PC-RELATIVE
;
20$:	BBC	#FLG$V_EXPOPT,(R11),30$	;BRANCH IF NOT OPTIMIZED
	BSBW	MAC$CK_SBY_TRUN		;YES--CHECK FOR TRUNCATION
	MOVB	(R5),R0			;GET THE BYTE
	BSBW	MAC$STOIM		;STORE INTO OBJECT CODE
	BRB	40$
;
; NOT PC-RELATIVE, NOT OPTIMIZED
;
30$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE INTO LISTING
	$OBJ_CHKBYT #TIR$C_STO_SB	; Store signed byte
;
; FINISH PROCESSING
;
40$:	$MAC_LIST_BYTE #1		;LIST THE BYTE
	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	PROCESS 16-BIT DISPLACEMENT AND 16-BIT DEFERRED DISPLACEMENT
;	REFERENCES.
;
;--

REF_C:					;16-BIT DISPLACEMENT
REF_D:					;16-BIT DEFERRED DISPLACEMENT
	BSBW	OPND_CHECK		; Check listing space for operand
	MOVB	(R5),R0			;GET MODE/REGISTER
	BSBW	MAC$STOIM		;WRITE TO OBJECT CODE
	$MAC_LIST_BYTE #1		;LIST MODE/REGISTER
	CMPB	R4,#15			;PC-RELATIVE?
	BNEQ	20$			;IF NEQ NO
	BBC	#FLG$V_EXPOPT,(R11),10$	;YES--BRANCH IF NOT OPTIMIZED
	$VPUSH	W^MAC$GL_PC		;OPTIMIZED--STACK PC
	TSTL	(R5)+			;BUMP THE POINTER
	ADDL2	#2,(R5)			;PLUS SIZE OF OPERAND
	BSBW	P1$ARITH_SUB
	TSTL	-(R5)			;BACK UP POINTER
	BSBW	MAC$CK_SWD_TRUN		;CHECK FOR TRUNCATION
	BRB	30$			;GO EMIT CODE AND EXIT
;
; PC-RELATIVE, NOT OPTIMIZED
;
10$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_WD	;STORE WORD DISPLACED
	BRB	50$
;
; NOT PC-RELATIVE
;
20$:	BBC	#FLG$V_EXPOPT,(R11),40$	;BRANCH IF NOT OPTIMIZED
	BSBW	MAC$CK_SWD_TRUN		;YES--CHECK TRUNCATION
30$:	MOVB	(R5)+,R0		;GET A BYTE
	BSBW	MAC$STOIM		;SEND IT TO OBJECT CODE
	MOVB	(R5),R0			;GET SECOND BYTE
	BSBW	MAC$STOIM		;SEND IT TO OBJECT CODE
	TSTB	-(R5)			;KEEP R5 POINTING TO TOP OF STACK
	BRB	50$
;
; NOT PC-RELATIVE, NOT OPTIMIZED
;
40$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_SW	;STORE SIGNED WORD
50$:	$MAC_LIST_BYTE #2		;LIST THE WORD
	RSB

;++
; FUNCTIONAL DESCRIPTION:
;
;	PROCESS 32-BIT DISPLACEMENT AND 32-BIT DEFERRED DISPLACEMENT
;	REFERENCES
;
;--

REF_E:					;32-BIT DISPLACEMENT
REF_F:					;32-BIT DEFERRED DISPLACEMENT
	BSBW	OPND_CHECK		; Check listing space for operand
	MOVB	(R5),R0			;GET MODE/REGISTER
	BSBW	MAC$STOIM		;WRITE TO OBJECT CODE
	$MAC_LIST_BYTE #1		;LIST MODE/REGISTER
	CMPB	R4,#15			;PC-RELATIVE?
	BNEQ	20$			;IF NEQ NO
	BBC	#FLG$V_EXPOPT,(R11),10$	;YES--BRANCH IF NOT OPTIMIZED
	$VPUSH	W^MAC$GL_PC		;OPTIMIZED--STACK PC
	TSTL	(R5)+			;BUMP THE POINTER
	ADDL2	#4,(R5)			;PLUS SIZE OF OPERAND
	BSBW	P1$ARITH_SUB
	TSTL	-(R5)			;BACKUP THE POINTER
	BRB	30$			;GO EMIT CODE AND EXIT
;
; PC-RELATIVE, NOT OPTIMIZED
;
10$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_LD	;STORE LONGWORD DISPLACED
	BRB	60$
;
; NOT PC-RELATIVE
;
20$:	BBC	#FLG$V_EXPOPT,(R11),50$	;BRANCH IF NOT OPTIMIZED
30$:	MOVZBL	#4,R3			;SET A LOOP COUNT
40$:	MOVB	(R5)+,R0		;GET NEXT BYTE
	BSBW	MAC$STOIM		;STORE IN OBJECT CODE
	SOBGTR	R3,40$			;LOOP FOR 4 BYTES
	TSTL	-(R5)			;KEEP R5 POINTING TO TOP OF STACK
	BRB	60$			;AND EXIT
;
; NOT PC-RELATIVE, NOT OPTIMIZED
;
50$:	MOVB	#^A/'/,@W^MAC$GL_LIST_PTR ;PUT QUOTE IN LISTING
	$OBJ_CHKBYT #TIR$C_STO_LW	;STORE LONGWORD
60$:	$MAC_LIST_BYTE #4		;LIST THE WORD
	RSB

	.SBTTL	OPND_CHECK
;
; ++
; Functional description:
;
;	This routine checks that there is space on the current
;	listing line to write the next operand
;
; Inputs:
;
;	R2 = Number of characters required to write operand
;
; Outputs:
;
;	None
;
;
OPND_CHECK:
	BBSC	#FLG$V_OPNDCHK,(R11),30$ ; Branch if check has been performed
	SUBL3	#MAC$AB_LST_END, -	; Compute number of characters still
		W^MAC$GL_LIST_PTR,R0	; available on line
	BBC	#FLG$V_UPDFIL,(R11),10$	; If updating file
	SUBL2	#AUD$K_SIZE,R0		; subtract size of audit trail
10$:
	CMPL	W^MAC$GL_LIST_PTR, -	; First operand?
		#MAC$AB_LST_OP1
	BEQL	20$			; Yes if EQL
	ADDL2	#2,R2			; Two more characters required for
					; separating spaces
	SUBL2	#2,W^MAC$GL_LIST_PTR	; Move pointer back two spaces
20$:
	CMPL	R0,R2			; Required characters available?
	BGEQ	30$			; Yes if GEQ
	BSBW	MAC$WRTLST		; No, Write line
	MOVAB	W^MAC$AB_LST_OP1, -	; and reset pointer
		W^MAC$GL_LIST_PTR
30$:
	RSB

	.SBTTL	P2$END	THE END OF PASS 2

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED WHEN THE END COMMAND IS ENCOUNTERED IN
;	THE INTERMEDIATE FILE.  THE PC IS SET, THE FINAL RECORDS ARE
;	WRITTEN OUT TO THE OBJECT MODULE, AND THEN A JMP IS EXECUTED
;	TO THE END OF PASS 2.
;
;--

P2$END::
	BSBW	MAC$SET_PC		;UPDATE PC
	BSBW	MAC$WRTLST		;WRITE OUT LISTING
	BSBW	MAC$FINISH_ASM		;FINISH ASSEMBLY, WRITE OUT
					; TRACEBACK, DEBUG, AND SYMBOLS
	MOVZBL	#OBJ$C_EOM,W^MAC$GL_RECTYP ;SET END OF MODULE RECORD TYPE
	BSBW	MAC$WRTOBJ		;WRITE OUT ANY PREVIOUS RECORD
	MOVL	#OBJ$C_EOM_OK,R0	;ASSUME MODULE OK
	MOVL	#1,R6			;ASSUME SUCCESS
	BBS	#FLG$V_EXTERR,(R11),5$	;ANY EXTERNAL FACILITY ERRORS?
	BBS	#FLG$V_EXTWRN,(R11),8$	;ANY EXTERNAL FACILTY WARNINGS?
	BISL3	W^MAC$GL_ERRCT,-	;WERE THERE ANY ERRORS?
		W^MAC$GL_WARNCT,R1	;OR WARNINGS?
	BEQL	10$			;IF EQL NO--GOOD MODULE
5$:	MOVL	#OBJ$C_EOM_ERR,R0	;ASSUME SEVERE ERRORS
	MOVL	#2,R6			;...
	TSTL	W^MAC$GL_ERRCT		;WERE THERE ERRORS?
	BNEQ	10$			;IF NEQ YES--GO SET STATUS
	BBS	#FLG$V_EXTERR,(R11),10$	;MAKE SURE ABOUT EXTERNAL ERRORS TOO!
8$:	MOVL	#OBJ$C_EOM_WRN,R0	;NO--SET WARNING STATUS
	MOVL	#0,R6			;...
10$:	MOVL	R6,W^MAC$GL_STATUS	;SAVE STATUS FOR EXITING
	$OBJ_OUTBYT_0 R0		;STORE STATUS
	MOVL	W^MAC$GL_XFRADR,R5	;GET TRANSFER ADDRESS
	BEQL	30$			;IF EQL NO TRANSFER ADDRESS
;
; OUTPUT TRANSFER ADDRESS INFORMATION
;
	$OBJ_OUTBYT_0 SYM$B_SEG(R5)	;OUTPUT SYMBOL'S PSECT
	MOVAB	SYM$L_VAL(R5),R5	;POINT TO SYMBOL VALUE
	MOVZBL	#4,R4			;SET COUNT
20$:	$OBJ_OUTBYT_0 (R5)+		;OUTPUT BYTE OF THE VALUE
	SOBGTR	R4,20$			;LOOP FOR 4 BYTES
30$:	CLRL	W^MAC$GL_XFRADR		;RESET TRANSFER ADDRESS POINTER
	BSBW	MAC$WRTOBJ		;WRITE OUT FINAL RECORD TO OBJECT FILE
	BRW	W^MAC$PASS_2_END	;PASS 2 IS COMPLETED

	.END
