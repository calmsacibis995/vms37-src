	.TITLE	MAC$DATA	STORAGE ALLOCATION FOR VAX NATIVE ASSEMBLER
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 30-AUG-78
;
; MODIFIED BY:
;
;	V03-01	MTR0014		Mike Rhodes	16-Apr-1982
;		Fix data declaration for MAC$GL_CVTADDR, which
;		caused occassional access violations.
;
;	V02.23	PCG0008		Peter George	26-Aug-1981
;		Fix the data allocation for MAC$GO_VALUEO.
;		Add MAC$GL_CVTADDR.
;
;	V02.22	CNH0045		Chris Hume	 1-Dec-1980
;		Increased size of parser value stack.  Stack overflow remains
;		undetected.  Also advanced displayed IDENT to 2.46.
;		(DATA1.MAR 02.26, MAIN.MAR 02.46)
;
;	V02.21	HJ0002		Herb Jacobs	18-Aug-1980
;		Make $DEF's global using standard $GBLINI macro.
;
;	V01.20	RN0023		R. Newland	 3-Nov-1979
;		New message codes to get error messages from system
;		message file.
;
;	V01.19	RN0022		R. Newland	31-Oct-1979
;		Translate SYS$LP_LINES to set lines/page
;
;	V01.19	RN0014		R. Newland	12-Oct-1979
;		Support for G_floating, H_floating and Octaword data types
;
;	V01.18	RN0011		R. Newland	11-Sep-1979
;		New librarian support
;
;	V01.17	RN0008		R. Newland	29-Aug-1979
;		31 character symbols
;
;	V01.16	RN0005		R. Newland	10-Aug-1979
;		Symbolically defined maximum argument size
;	V01.15	RN0002		R. Newland	01-Feb-1979
;		Changes for Source Update Merge
;	V01.17	RN0007		R. Newland	22-Aug-1979
;		Fix character table error for { \ } ~ and DEL.
;
;	V01.14	008		B. Schreiber		22-JAN-1979
;		Better bookkeeping of allocated pages.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$MAC_GRAMMARDEF		;DEFINE VAX-11 MACRO TERMINAL GRAMMAR SYMBOLS
	$MAC_GENVALDEF		;DEFINE VAX-11 MACRO COMMON SYMBOLS
	$MAC_INPBLKDEF		;DEFINE INPUT BLOCK OFFSETS
	$MAC_SYMBLKDEF		;SYMBOL BLOCK DEFINTIONS
	$FABDEF			;DEFINE FAB OFFSETS
	$NAMDEF			;DEFINE NAME BLOCK OFFSETS
	DEFSUMCBL			; Define SUM control block symbols
	$LBRDEF				; Define LBR offsets

;
; EQUATED SYMBOLS:
;

	$GBLINI	GLOBAL		;FORCE DATA ALLOCATION TO BE GLOBAL

;
; OWN STORAGE:
;


	.SBTTL	CHARACTER TOKEN TABLE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THE CHARACTER TABLE ('MAC$AL_CHRTAB') IS USED TO DETERMINE WHICH
;	TOKENS CAN POSSIBLY BE STARTED WITH A GIVEN CHARACTER.  THE
;	PROCEDURE IS TO OBTAIN THE FIRST CHARACTER OF THE TOKEN AND
;	GET THE TABLE ENTRY CORRESPONDING TO THE ASCII VALUE OF THE
;	CHARACTER.  IF THE CHARACTER ITSELF IS A TOKEN (LIKE DDPLUS)
;	THEN THE HIGH ORDER BIT WILL BE SET IN THE TABLE ENTRY.  IF
;	THE HIGH ORDER BIT IS NOT SET IT IS THE NAME OF A ROUTINE TO
;	CALL TO DECIDE THE TOKEN TYPE.  THIS ROUTINE MAY SCAN FURTHER
;	AS IN THE CASE OF A SYMBOL, OR IT MAY SIMPLY LOOK AHEAD TO
;	RESOLVE AN AMBIGUITY.  IN ANY CASE, THE ROUTINE INVOLVED WILL
;	RETURN THE TOKEN CLASS IN R8, THE ASSOCIATED VALUE (IF ANY)
;	IN MAC$VALUE, AND THE CHARACTER POINTER WILL BE UPDATED PAST
;	THE TOKEN SCANNED.
;
;	AN ADDITIONAL TABLE, MAC$AB_CMSK_TAB IS ALSO GENERATED.  THIS
;	IS A BYTE-ORIENTED TABLE, CONTAINING ONE BYTE FOR EACH CHARACTER.
;	THE VALUES ARE SET FROM THE FLAGS ARGUMENT AND ARE USED IN
;	SCANC/SPANC INSTRUCTIONS TO LOOK FOR A PARTICULAR TYPE OF CHARACTER
;
;
;
;
;--

	SPECIAL	=	^X80000000		;FLAG THAT CHAR IS SPECIAL

	.MACRO	$CHR_TABENTRY	VAL=0, SPF=0, FLAGS=0
	.LONG	SPF+VAL
	.PSECT	MAC$CHR_FLG_TAB,NOWRT,NOEXE,GBL,LONG
	.BYTE	FLAGS
	.PSECT	MAC$CHRTAB,NOWRT,NOEXE,GBL,LONG
	.ENDM	$CHR_TABENTRY

	.PSECT	MAC$CHR_FLG_TAB,NOWRT,NOEXE,GBL,LONG

MAC$AB_CMSK_TAB::			;FLAG BITS FOR CHARACTERS

	.PSECT	MAC$CHRTAB,NOWRT,NOEXE,GBL,LONG

MAC$AL_CHRTAB::				;CHARACTER TOKENS

	$CHR_TABENTRY	0,,CHR$M_SPA_MSK!CHR$M_SYM_DLM	;IGNORE NULLS
	.REPT	8
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM ;0-8 ARE ILLEGAL CHARACTERS
	.ENDR
	$CHR_TABENTRY	0,,CHR$M_SPA_MSK!CHR$M_SYM_DLM	;IGNORE TAB
	$CHR_TABENTRY	0,,CHR$M_SPA_MSK!CHR$M_SYM_DLM 	;IGNORE LINE FEED
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM ;VERTICAL TAB IS ERROR
	$CHR_TABENTRY	0,,CHR$M_SPA_MSK!CHR$M_SYM_DLM	;IGNORE FORM FEED
	$CHR_TABENTRY	DEOL,SPECIAL,CHR$M_COMMA_CR!CHR$M_SYM_DLM ;CR IS END OF LINE
	.REPT	18.
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM ;CTRL-N TO CTRL-SHIFT-O ARE ERRORS
	.ENDR
	$CHR_TABENTRY	0,,CHR$M_SPA_MSK!CHR$M_SYM_DLM	;IGNORE SPACE
	$CHR_TABENTRY	DOR,SPECIAL,CHR$M_SYM_DLM	;(!)
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM ;(") IS AN ERROR
	$CHR_TABENTRY	MAC$XPOUND,,CHR$M_SYM_DLM ;(#)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;($)
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM	;(%)
	$CHR_TABENTRY	DAND,SPECIAL,CHR$M_SYM_DLM	;(&)
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM	;(')
	$CHR_TABENTRY	DOPN,SPECIAL,CHR$M_SYM_DLM	;(()
	$CHR_TABENTRY	DCLS,SPECIAL,CHR$M_SYM_DLM	;())
	$CHR_TABENTRY	DTIMES,SPECIAL,CHR$M_SYM_DLM	;(*)
	$CHR_TABENTRY	DPLUS,SPECIAL,CHR$M_SYM_DLM	;(+)
	$CHR_TABENTRY	DCOMMA,SPECIAL,CHR$M_SYM_DLM!CHR$M_COMMA_CR ;(,)
	$CHR_TABENTRY	DMINUS,SPECIAL,CHR$M_SYM_DLM	;(-)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(.)
	$CHR_TABENTRY	DDIV,SPECIAL,CHR$M_SYM_DLM	;(/)
	.REPT	10.
	$CHR_TABENTRY	MAC$NUMBER,,CHR$M_SYM_CH1!CHR$M_NUM_BER	;DIGITS
	.ENDR
	$CHR_TABENTRY	DCOLON,SPECIAL,CHR$M_SYM_DLM	;(:)
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM	;(;)
	$CHR_TABENTRY	DANGOPN,SPECIAL,CHR$M_SYM_DLM	;(<)
	$CHR_TABENTRY	DEQ,SPECIAL,CHR$M_SYM_DLM	;(=)
	$CHR_TABENTRY	DANGCLS,SPECIAL,CHR$M_SYM_DLM	;(>)
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM	;(?)
	$CHR_TABENTRY	DAT,SPECIAL,CHR$M_SYM_DLM	;(@)
	.REPT	6
	$CHR_TABENTRY	MAC$SYMNUM,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;LETTERS A-F CAN START SYMBOL OR NUMBER
	.ENDR
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(G)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(H)
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(I)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(J)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(K)
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(L)
	.REPT	6
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(M-R)
	.ENDR
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(S)
	.REPT	3
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(T-V)
	.ENDR
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(W)
	.REPT	3
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(X-Z)
	.ENDR
	$CHR_TABENTRY	DSQOPN,SPECIAL,CHR$M_SYM_DLM	;([)
	$CHR_TABENTRY	DXOR,SPECIAL,CHR$M_SYM_DLM	;(\)
	$CHR_TABENTRY	DSQCLS,SPECIAL,CHR$M_SYM_DLM	;(])
	$CHR_TABENTRY	MAC$XUPARROW,,CHR$M_SYM_DLM	;(^)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CH1!CHR$M_SYM_CHR	;(_)
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SYM_DLM	;(`)
	.REPT	6
	$CHR_TABENTRY	MAC$SYMNUM,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;LETTERS A-F CAN START SYMBOL OR NUMBER
	.ENDR
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(G)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(H)
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(I)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(J)
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(K)
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(L)
	.REPT	6
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(M-R)
	.ENDR
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(S)
	.REPT	3
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(T-V)
	.ENDR
	$CHR_TABENTRY	MAC$XSYMBL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(W)
	.REPT	3
	$CHR_TABENTRY	MAC$SYMBOL,,CHR$M_SYM_CHR!CHR$M_SYM_CH1	;(X-Z)
	.ENDR
	.REPT	<255-^A/z/>		;FILL OUT TABLE
	$CHR_TABENTRY	MAC$CHRERR,,CHR$M_SPA_MSK!CHR$M_SYM_DLM
	.ENDR

	.SBTTL	"XUPARROW" AND "XSYMBOL" CHARACTERS

;++
;	THESE TABLES ARE USED TO SCAN RADIX CONTROL FUNCTIONS.
;	FUNCTIONS ARE EITHER "^"<CHAR> OR <CHAR>"^". "^" IS THE UPARROW
;	OR "HAT".
;	'MAC$AB_UPXTAB' POINTS TO A LIST OF CHARACTERS LEGAL AFTER A "^"
;	'MAC$AB_UPXTOKEN' POINTS TO A LIST OF CORRESPONDING TOKEN TYPES.
;
;	'MAC$AB_XUPTAB' POINTS TO A LIST OF CHARACTERS LEGAL BEFORE A "^"
;	'MAC$AB_XUPTOKEN' POINTS TO A CORRESPONDING LIST OF TOKEN TYPES.
;--

	.PSECT	MAC$RO_DATA,NOEXE,NOWRT,GBL,LONG

MAC$AB_UPXTAB::
	.ASCII	/ABCDFMOXabcdfmox/	;^'X' CHARACTERS
LEN$K_UPXTAB==.-MAC$AB_UPXTAB

	.ALIGN	LONG
MAC$AB_UPXTOKEN::
	.BYTE	DUPA,DUPB,DUPC,DUPD,DUPF,DUPM,DUPO,DUPX
	.BYTE	DUPA,DUPB,DUPC,DUPD,DUPF,DUPM,DUPO,DUPX

	.ALIGN	LONG
MAC$AB_XUPTAB::
	.ASCII	/SBWLIGsbwlig/		;'X'^ CHARACTERS
LEN$K_XUPTAB==.-MAC$AB_XUPTAB

	.ALIGN	LONG
MAC$AB_XUPTOKEN::
	.BYTE	DSUP,DBUP,DWUP,DLUP,DIUP,DGUP
	.BYTE	DSUP,DBUP,DWUP,DLUP,DIUP,DGUP

	.SBTTL	INITIALIZED DATA STORAGE DEFINITIONS

;++
;	THIS SECTION DEFINES THE GLOBAL DATA STORAGE USED BY
;	THE VAX-11 MACRO ASSEMBLER THAT IS INITIALIZED AT
;	ASSEMBLY TIME.
;--

	.ALIGN	LONG

MAC$GK_ZERO::
	.LONG	0			;A GUARANTEED ZERO WORD
MAC$GK_ONE::				;A CONSTANT 1
	.LONG	1
MAC$GK_INTSIZ::				;SIZE OF INTERMEDIATE BUFFER
	.LONG	INT$K_BUFSIZ+<3*4>	;SIZE OF INT. BUFFER WE NEED
					;TO ALLOCATE (2 LINK WORDS AND
					;SIZE WORD)
MAC$G_1_PAGE::
	$ARGLST	2,MAC$GK_1_PG_SIZ,-	;ARG BLOCK TO ALLOCATE 1 PAGE
		MAC$GL_BASEADDR
MAC$G_2_PAGES::
	$ARGLST	2,MAC$GK_2_PG_SIZ,-	;ARG BLOCK TO ALLOCATE 2 PAGES
		MAC$GL_BASEADDR		;AND STORE BASE ADDRESS HERE
MAC$GK_1_PG_SIZ::
	.LONG	512			;SIZE OF ONE PAGE
MAC$GK_2_PG_SIZ::			;SIZE OF TWO PAGES
	.LONG	1024			;...
MAC$G_LSTBUFDES::			;DESCRIPTOR FOR FAO
	.LONG	MAC$AB_LINE_END-MAC$AB_LST_END
	.LONG	MAC$AB_LST_END
MAC$AL_ATIM_DSC::			;STRING DESCRIPTOR TO GET ASCII TIME
	.LONG	20.			;TWENTY-THREE BYTE BUFFER
	.LONG	MAC$AB_ATIM_BUF		;ADDRESS OF BUFFER
MAC$AL_FTIM_DSC::			;STRING DESCRIPTOR FOR SUBTITLE LINE DATE
	.LONG	20.
	.LONG	MAC$AB_SBT_DATE
MAC$GL_LIBTYPE::			; Library type = MACRO
	.LONG	LBR$C_TYP_MLB
MAC$GL_LIBFUNC::			; Library function = READ
	.LONG	LBR$C_READ
MAC$GQ_LINEBFDS::			; Descriptor for line buffer
	.LONG	INP$K_BUFSIZ,MAC$AB_LINEBF
MAC$GQ_LISTBFDS::			; Descriptor for listing buffer
	.LONG	INP$K_BUFSIZ,MAC$AB_LST_END

	.SBTTL	UNINITIALIZED DATA STORAGE DEFINITIONS

;++
;	THIS SECTION DEFINES THE GLOBAL DATA STORAGE USED BY THE
;	VAX-11 MACRO ASSEMBLER.
;--

	.PSECT	MAC$RW_DATA,NOEXE,LONG

$DEF	MAC$GL_FLAGS	.BLKL	2	;GLOBAL ASSEMBLY FLAGS POINTED TO
					; BY R11
$DEF	MAC$GL_CLIADDR	.BLKL	1	;CLI CALL BACK ADDRES
$DEF	MAC$GL_CMDLIN	.BLKL	1	;ADDRESS OF COMMAND LINE
$DEF	MAC$GL_CMDLEN	.BLKL	1	;LENGTH OF COMMAND LINE
$DEF	MAC$GL_DIRFLG	.BLKL	1	;FLAG WORD FOR DIRECTIVES
$DEF	MAC$GL_ENLISF	.BLKL	1	;FLAGS SET BY /SHOW/ENABLE IN
					;COMMAND LINE
$DEF	MAC$GL_INI_AP	.BLKL	1	;INITIAL AP
$DEF	MAC$GL_INI_FP	.BLKL	1	;INITIAL FP
$DEF	MAC$GL_INI_SP	.BLKL	1	;INITIAL SP
;***THE FOLLOWING 4 ITEMS MUST NOT BE SEPARATED
;
$DEF	MAC$GB_MODE	.BLKB	1	;PRIMARY MODE OF OPERAND
$DEF	MAC$GB_IMODE	.BLKB	1	;INDEXED MODE
$DEF	MAC$GB_REG	.BLKB	1	;REGISTER
$DEF	MAC$GB_IREG	.BLKB	1	;...
;
;***THE ABOVE 4 ITEMS MUST NOT BE SEPARATED
$DEF	MAC$GL_IMP_BEG	.BLKL	0	;BEGINNING OF IMPURE AREA
$DEF	MAC$GL_ARGPTR	.BLKL	1	;POINTER TO FREE SPOT ON PAGE
					;DURING MACRO DEFINITION
$DEF	MAC$GL_ASCCNT	.BLKL	1	;CHARACTER COUNT FOR .ASCIX DIRECTIVES
$DEF	MAC$GL_ABSFLAG	.BLKL	1	;ABSOLUTE FLAG 
$DEF	MAC$GL_ASNPTR	.BLKL	1	;POINTER TO SYM BLOCK FOR ASSIGNMENT EXPR
$DEF	MAC$GL_BASEADDR	.BLKL	1	;RETURNS BASE ADDRESS FROM VM_GET
$DEF	MAC$GL_BLKPTR	.BLKL	1	;POINTER TO INPUT BLOCK (GETARGS)
$DEF	MAC$GL_CTLMSK	.BLKL	1	;MASK OF FLAG BITS SET FROM CLI
$DEF	MAC$GL_CRF_CNT	.BLKL	1	;COUNT # TIMES CREF CALLED FOR SYMBOLDEF/REF
$DEF	MAC$GL_CRF_FLG	.BLKL	1	;FLAGS FOR CREF--WHAT TO CREF
$DEF	MAC$GL_CRF_DCNT	.BLKL	1	;# DIRECTIVE DEF/REF CREF CALLS
$DEF	MAC$GL_CRF_MCNT	.BLKL	1	;# MACRO DEF/REF CREF CALLS
$DEF	MAC$GL_CRF_OCNT	.BLKL	1	;# OPCODE REF CALLS
$DEF	MAC$GL_CRF_RCNT	.BLKL	1	;# REGISTER REF CALLS
$DEF	MAC$GL_CRSYM	.BLKL	1	;CREATED SYMBOL NUMBER
$DEF	MAC$GL_CURINFDB	.BLKL	1	;POINTER TO CURRENT INPUT FDB
$DEF	MAC$GL_DFPC_DSP	.BLKL	1	;0 OR INDEX FOR DEFAULT DISPLACEMENT
					;FOR PC-RELATIVE W/NO "X^"
$DEF	MAC$GL_ERRCT	.BLKL	1	;COUNT OF ERRORS ENCOUNTERED
$DEF	MAC$GL_ERR_LIST	.BLKL	2	;QUEUE HEAD FOR ERROR LIST
$DEF	MAC$AB_ETXBUF	.BLKB	512	;ERROR TEXT BUFFER
$DEF	MAC$GL_ETXLEN	.BLKL	1	;LENGTH OF TEXT IN ETXBUF
$DEF	MAC$GL_EXPOPVL1	.BLKL	1
$DEF	MAC$GL_EXPOPVL2	.BLKL	1
$DEF	MAC$GL_FINPTF	.BLKL	1	;NON-ZERO WHEN FIRST INPUT FILE HAS BEEN PARSED
$DEF	MAC$GL_FREE_LST	.BLKL	2	;QUEUE HEAD FOR FREE PAGES
$DEF	MAC$GL_HIGH_32	.BLKL	1	;HIGH ORDER 32 BITS OF OPERAND
$DEF	MAC$GQ_HIGH_64	.BLKQ	1	;High order 64 bits of octaword operand
$DEF	MAC$GL_HSHVAL	.BLKL	1	;HASH VALUE RETURNED FROM GETSYM
$DEF	MAC$AB_IDENT	.BLKB	SYM$K_MAXLEN+1 ;IDENT OF ASSEMBLY
$DEF	MAC$GL_IF_CNDPT	.BLKL	1	;POINTER TO IF CONDITION ROUTINE
$DEF	MAC$GL_IF_COUNT	.BLKL	1	;COUNT OF NESTED IF'S IN FALSE CONDITIONALS
$DEF	MAC$GL_IF_LEVEL	.BLKL	1	;'IF' LEVEL
$DEF	MAC$GL_IF_VALUE	.BLKL	1	;LOW BIT CLEAR IF CURRENT LEVEL IS TRUE
$DEF	MAC$GL_INFOCNT	.BLKL	1	; Count of information messages
$DEF	MAC$GL_INTFRMPT	.BLKL	1	;POINTER TO CURRENT INT. FRAME BLOCK
$DEF	MAC$GL_INTWRNPT	.BLKL	1	;POINTER TO WARNING SPOT
$DEF	MAC$GL_INTPAGRQ	.BLKL	1	;# OF PAGES USED FOR INT. BUFFER
$DEF	MAC$GL_INTCNT	.BLKL	1	;COUNT OF BYTES LEFT IN INTBUF
$DEF	MAC$GL_INTQUE	.BLKL	2	;HEAD OF QUEUE FOR INT. BUFFERS
$DEF	MAC$GL_PRMINBL	.BLKB	INP$K_BLKSIZ ;PRIMARY INPUT BLOCK
	.ALIGN	LONG
$DEF	MAC$GL_INPQUE	.BLKL	2	;QUEUE_HEAD TO INPUT FILE FDB LIST
$DEF	MAC$GL_INPUTP	.BLKL	1	;POINTER TO CURRENT INPUT BLOCK
$DEF	MAC$GL_KEYMAC	.BLKL	1	;
$DEF	MAC$GL_KEYPTR	.BLKL	1	;
$DEF	MAC$GL_LINBAS	.BLKL	1	;BASE LINE NUMBER OF CURRENT FILE
$DEF	MAC$GL_LINENUM	.BLKL	1	;SEQUENTIAL LINE # FOR ASSEMBLY
$DEF	MAC$GL_LINELN	.BLKL	1	;LENGTH OF CURRENT SOURCE LINE
$DEF	MAC$GL_LINE_CNT	.BLKL	1	;NUMBER OF LINES REMAINING IN CURRENT PAGE
$DEF	MAC$GL_LN_PAGE	.BLKL	1	; # of text lines on page
$DEF	MAC$GL_LINK_PTR	.BLKL	1	;POINTER TO LINKED, ALPHABETIZED SYMBOL TBL
$DEF	MAC$GL_LIST_IT	.BLKL	1	;LISTING FLAG
$DEF	MAC$GL_LIST_LVL	.BLKL	1	;LISTING LEVEL
$DEF	MAC$AB_LPBUF	.BLKB	16	;BUFFER TO CREATE LINE/PAGE FOR CREF
$DEF	MAC$GL_LPTPAG	.BLKL	1	;CURRENT PAGE NUMBER
$DEF	MAC$GL_LSB	.BLKL	1	;LOCAL SYMBOL BLOCK NUMBER
$DEF	MAC$GL_LSB_MAX	.BLKL	1	;HIGHEST LSB ** MUST FOLLOW MAC$GL_LSB
$DEF	MAC$GL_MACPTR	.BLKL	1	;POINTER TO MACRO CURRENTLY BEING DEFINED
$DEF	MAC$GL_MC_ARGCT	.BLKL	1	;MACRO ARGUMENT COUNT
$DEF	MAC$GL_MCDEF	.BLKL	1	;# MACROS DEFINED
$DEF	MAC$GL_MCLVL	.BLKL	1	;MACRO DEFINITION LEVEL
$DEF	MAC$GL_MCPGRQ	.BLKL	1	;# PAGES REQUIRED TO DEFINE MACROS
$DEF	MAC$GL_MLB_CNT	.BLKL	1	;# OF MLB'S WE KNOW ABOUT
$DEF	MAC$GL_MLB_NDB	.BLKL	1	;# INDEX BLOCKS USED FOR ALL MLB'S
$DEF	MAC$GL_MLB_GET	.BLKL	1	;# GETS TO DEFINE MACROS
$DEF	MAC$GL_MLB_MDF	.BLKL	1	;# MACROS DEFINED OUT OF ALL MLB'S
$DEF	MAC$GL_MLB_QUE	.BLKL	2	;MLB FDB QUEUE HEADER
$DEF	MAC$GL_MLIN_LEN	.BLKL	1	;LENGTH OF MACRO LINE IN TMPBUF (P2)
$DEF	MAC$GL_MOPNUM	.BLKL	1	;NUMBER OF OPERANDS IN INSTR.
$DEF	MAC$GL_MOPPTR	.BLKL	1	;POINTER TO OPERAND DESCRIPTORS
$DEF	MAC$GL_OBJ_RCNT	.BLKL	1	;NO. OBJECT RECORDS WRITTEN
$DEF	MAC$GL_OPCPGPTR	.BLKL	1	;POINTER TO CURRENT OPDEF PAGES
$DEF	MAC$GL_OPCLSTPT	.BLKL	1	;POINTER TO OPDEF LIST
$DEF	MAC$GL_OPSIZE	.BLKL	1	;NUMBER OF BYTES IN OPERAND
$DEF	MAC$GL_P2_LINE	.BLKL	1	;LINE NUMBER IN PASS 2
$DEF	MAC$GL_PC	.BLKL	1	;CURRENT PC
$DEF	MAC$GL_PRMSEG	.BLKL	1	;SEGMENT OF EXPRESSION SYMBOL
$DEF	MAC$GL_PSC_BLKP	.BLKL	1	;POINTER TO FREE CORE FOR PSECT BLOCKS
$DEF	MAC$GL_PSC_LIST	.BLKL	1	;POINTER TO PSECT DEF. BLOCKS
$DEF	MAC$GL_PSC_MAX	.BLKL	1	;HIGHEST PSECT # ALLOCATED
$DEF	MAC$AB_PSC_SBF	.BLKB	32	;PSECT CONTEXT SAVE BUFFER
$DEF	MAC$AL_PSC_SLB	.BLKL	32	;PSECT LSB CONTEXT SAVE BUFFER
$DEF	MAC$GL_PSC_SBP	.BLKL	1	;BYTE INDEX INTO CONTEXT SAVE BUFFER
$DEF	MAC$GL_PSECT	.BLKL	1	;NUMBER OF CURRENT PSECT
$DEF	MAC$GL_PSECTPTR	.BLKL	1	;POINTER TO CURRENT PSECT BLOCK
$DEF	MAC$GB_RDXNDX	.BLKB	1	;INDEX FOR CURRENT RADIX
$DEF	MAC$GL_RECHDBUF	.BLKL	1	;INPUT RECORD HEADER BUFFER
$DEF	MAC$GL_RECTYP	.BLKL	1	;RECORD TYPE BEING OUTPUT IN PASS 2
$DEF	MAC$GL_SAVE_PC	.BLKL	1	;SAVE PC FOR LISTING HERE
$DEF	MAC$GL_STATUS	.BLKL	1	;EXIT STATUS SET BY P2$END
$DEF	MAC$GL_STOIMPTR	.BLKL	1	;POINTER TO BEGINNING OF STORE IMMEDIATE CODE
$DEF	MAC$GL_SAVE_SP	.BLKL	1	;SAVE STACK POINTER HERE
$DEF	MAC$GL_SAV_BAS	.BLKL	1	;SAVE LINE BASE
$DEF	MAC$GL_SAV_LIN	.BLKL	1	;SAVE LINE NO.
$DEF	MAC$GL_SAV_PAG	.BLKL	1	;AND PAGE NO. FOR CERTAIN GRAMMAR CONSTRUCTS
$DEF	MAC$GL_SRC_LCNT	.BLKL	1	;NO. SRC LINES READ IN PASS 1
$DEF	MAC$GL_SRCPAG	.BLKL	1	;SOURCE PAGE NUMBER
$DEF	MAC$GL_SYM_NLOC	.BLKL	1	;NO. NON-LOCAL SYMBOLS
$DEF	MAC$GL_SYM_LOCL	.BLKL	1	;NO. LOCAL SYMBOLS
$DEF	MAC$GL_SYM_PAGL	.BLKL	2	;QUE OF ALLOCATED SYMBOL PAGES
$DEF	MAC$GL_SYMPGPTR	.BLKL	1	;POINTER TO CURRENT PAGE OF SYMBOLS
$DEF	MAC$GL_SYMPGREQ	.BLKL	1	;# OF GET_VM'S FOR SYMBOL TABLE
$DEF	MAC$GL_MLFPTR	.BLKL	1	; Currect Macro library (MLF) pointer
$DEF	MAC$GL_TXTRFA	.BLKL	2	; Librarian text RFA
	$$=512
	.IIF GREATER <ARG$K_SIZE-$$>, $$=ARG$K_SIZE
$DEF	MAC$AB_TMPBUF	.BLKB	$$	;TEMP BUFFER FOR ARGUMENTS, ETC.
$DEF	MAC$AB_TMPSYM	.BLKB	SYM$K_MAXLEN+1 ;TEMP SYMBOL NAME HOLDER
$DEF	MAC$AB_TMPSY1	.BLKB	SYM$K_MAXLEN+1 ;SECONDARY MAC$AB_TMPSYM
$DEF	MAC$AB_TITLE	.BLKB	SYM$K_MAXLEN+1 ;HOLDS STRING FROM .TITLE DIRECTIVE
$DEF	MAC$GL_TTX_SIZ	.BLKL	1	;LENGTH OF TITLE TEXT STRING
$DEF	MAC$GL_WARNCT	.BLKL	1	;COUNT OF WARNINGS ENCOUNTERED
$DEF	MAC$GL_XFRADR	.BLKL	1	;POINTER TO SYMBOL BLOCK FOR TRANSFER ADDRESS
$DEF	MAC$GW_LST_LINE	.BLKW	1	; Listing line number
$DEF	MAC$GW_LST_INST	.BLKW	1	; Listing insert number
$DEF	MAC$GT_SCB	.BLKB	SUM_K_BLN ; SUM control block
$DEF    MAC$GL_CVTADDR	.BLKL	1	; RTL floating pt. conversion routine addr
$DEF	MAC$GL_IMP_END	.BLKL	0	;END OF IMPURE AREA
	MAC$GK_IMP_SIZ==MAC$GL_IMP_END-MAC$GL_IMP_BEG

	.PSECT	MAC$PARSE_DATA,NOEXE,LONG

$DEF	MAC$GL_ERRPT	.BLKL	1	;POINTER TO LAST TOKEN SCANNED
$DEF	MAC$GL_ERRPTX	.BLKL	1	;POINTER TO CURRENT TOKEN SCANNED
$DEF	MAC$GL_EXPPTR	.BLKL	1	;POINTER TO EXPR START IN INT CODE
$DEF	MAC$GL_EXPEND	.BLKL	1	;POINTER TO EXPR END IN INT CODE
$DEF	MAC$GL_NEXT	.BLKL	1	;NEXT SYMBOL TO PARSE
$DEF	MAC$AL_PSTACK	.BLKL	100.	;PARSE STACK
$DEF	MAC$AL_VALSTACK	.BLKL	256.	;PARSE VALUE STACK
$DEF	MAC$GL_VALUE	.BLKL	0	;PARSER CURRENT VALUE
$DEF	MAC$GO_VALUEO	.BLKO	0	; 128-bit value for number getters
$DEF	MAC$GQ_VALUEQ	.BLKQ	0	;64-BIT VALUE FOR NUMBER-GETTERS
$DEF	MAC$GW_VAL1	.BLKW	0	;FIRST WORD OF VALUE
$DEF	MAC$GB_VAL1	.BLKB	1	;FIRST BYTE OF VALUE
$DEF	MAC$GB_VAL2	.BLKB	1	;SECOND BYTE OF VALUE
$DEF	MAC$GW_VAL2	.BLKW	0	;SECOND WORD OF VALUE
$DEF	MAC$GB_VAL3	.BLKB	1	;THIRD BYTE OF VALUE
$DEF	MAC$GB_VAL4	.BLKB	1	;FOURTH BYTE OF VALUE
$DEF	MAC$GL_VAL3	.BLKL	1	;THIRD AND FOURTH WORDS OF VALUE
$DEF	MAC$GQ_VAL2	.BLKQ	1	; Second quadword of octaword value
$DEF	MAC$GL_VNEXT	.BLKL	1	;VALUE DURING LOOKAHEAD

	.PSECT	MAC$LISTING_BUF,NOEXE,LONG

	.BLKB	2			;LISTING BUFFER OVERFLOW PROTECTION
$DEF	MAC$AB_LST_END	.BLKB	16	;END OF CODE LISTING BUFFER
$DEF	MAC$AB_LST_OP2	.BLKB	14	;START OF SECOND OPERAND FIELD
$DEF	MAC$AB_LST_OP1	.BLKB	5	;START OF FIRST  OPERAND FIELD
$DEF	MAC$AB_LST_OPR	.BLKB	6	;START OF OPCODE FIELD
$DEF	MAC$AB_SEQ_NUM	.BLKB	7	;SOURCE LINE SEQUENCE NUMBER
$DEF	MAC$AB_LST_LIN	.BLKB	0	;BEGINNING OF CODE LISTING BUFFER
	MAC$K_LIST_SIZE==.-MAC$AB_LST_END	;SIZE OF CODE LISTING BUFFER
	MAC$AB_LST_AUDT = MAC$AB_LST_END+AUD$K_SIZE ; Start of audit trail
					; (THIS BUFFER GOES BACKWARDS!)
$DEF	MAC$AB_LINEBF	.BLKB	INP$K_BUFSIZ	;SOURCE LINE BUFFER
$DEF	MAC$AB_LINE_END	.BLKB	0	;END OF SOURCE LINE BUFFER
	.BLKL	1			;OVERFLOW PADDING
$DEF	MAC$GL_LIST_PTR	.BLKL	1	;POINTER INTO MAC$AB_LST_LIN
$DEF	MAC$GL_LINEPT	.BLKL	1	;POINTER INTO LINEBF

	.PSECT	MAC$PAGE_HEADER,NOEXE,LONG

MAC$AB_HD_NEWPG::			;TO OUTPUT FORM-FEED ALSO
	.BYTE	FF			;WANT NEW PAGE
$DEF	MAC$AB_HD_TITLE	.BLKB	SYM$K_MAXLEN+1 ; Chars for title and sub string
$DEF	MAC$AB_HD_TSTRG	.BLKB	LST$K_TITLE_SIZ+1
					;BUFFER FOR TITLE SUB-STRING
$DEF	MAC$AB_ATIM_BUF	.BLKB	22	; 22 bytes for date/time
$DEF	MAC$AB_HD_VERSN	.BLKB	28	; 28 bytes to hold assembler version string
$DEF	MAC$AB_HD_PAGE	.BLKB	8	;"PAGE nnnn"
$DEF	MAC$AB_HD_END	.BLKB	0	;END OF PAGE HEADER BUFFER
	MAC$K_HD_SIZE==.-MAC$AB_HD_TITLE	;SIZE
$DEF	MAC$AB_SBT_IDNT	.BLKB	SYM$K_MAXLEN+1 ; Ident from .IDENT
$DEF	MAC$AB_SBT_SBTL	.BLKB	LST$K_TITLE_SIZ+1 ;SPACE FOR SUBTTL LINE
$DEF	MAC$AB_SBT_DATE	.BLKB	22	; Creation date of source file
$DEF	MAC$AB_SBT_FILE	.BLKB	32	; Source file specification
$DEF	MAC$AB_SBT_PAGE	.BLKB	5	;SOURCE PAGE NUMBER
$DEF	MAC$AB_SBT_END	.BLKB	0	;END OF SUBTITLE LINE
	MAC$K_SBT_SIZ==.-MAC$AB_SBT_IDNT

	.PSECT	MAC$PRO_TIMES,NOEXE,LONG

$DEF	MAC$GQ_RNT_TOT	.BLKQ	1	;TOTAL CPU TIME FOR RUN
$DEF	MAC$GQ_TIM_TOT	.BLKQ	1	;TOTAL ELAPSED TIME FOR RUN
$DEF	MAC$GL_PFL_TOT	.BLKL	1	;PAGE FAULTS FOR TOTAL RUN
$DEF	MAC$GQ_RNT_CRF	.BLKQ	1	;TOTAL CPU TIME FOR CREF
$DEF	MAC$GQ_TIM_CRF	.BLKQ	1	;TOTAL ELAPSED TIME FOR CREF
$DEF	MAC$GQ_PFL_CRF	.BLKL	1	;PAGE FAULTS FOR CREF
$DEF	MAC$GQ_RNT_INI	.BLKQ	1	;TOTAL CPU TIME FOR INITIALIZATION
$DEF	MAC$GQ_TIM_INI	.BLKQ	1	;ELAPSED TIME FOR INITIALIZATION
$DEF	MAC$GL_PFL_INI	.BLKL	1	;PAGE FAULTS FOR INITIALIZATION
$DEF	MAC$GQ_RNT_CMD	.BLKQ	1	;CPU TIME FOR COMMAND PROCESSING
$DEF	MAC$GQ_TIM_CMD	.BLKQ	1	;ELAPSED TIME FOR COMMAND PROCESSING
$DEF	MAC$GL_PFL_CMD	.BLKL	1	;PAGE FAULTS IN COMMAND PROCESSING
$DEF	MAC$GQ_RNT_P1	.BLKQ	1	;CPU TIME FOR PASS 1
$DEF	MAC$GQ_TIM_P1	.BLKQ	1	;ELAPSED TIME FOR PASS 1
$DEF	MAC$GL_PFL_P1	.BLKL	1	;PAGE FAULTS IN PASS 1
$DEF	MAC$GQ_RNT_SRT	.BLKQ	1	;CPU TIME FOR SYMBOL TABLE SORT
$DEF	MAC$GQ_TIM_SRT	.BLKQ	1	;ELAPSED TIME FOR SYMBOL TABLE SORT
$DEF	MAC$GL_PFL_SRT	.BLKL	1	;PAGE FAULTS IN SYMBOL SORT
$DEF	MAC$GQ_RNT_P2	.BLKQ	1	;CPU TIME FOR PASS 2
$DEF	MAC$GQ_TIM_P2	.BLKQ	1	;ELAPSED TIME FOR PASS 2
$DEF	MAC$GL_PFL_P2	.BLKL	1	;PAGE FAULTS IN PASS 2
$DEF	MAC$GQ_RNT_SYO	.BLKQ	1	;CPU TIME FOR SYMBOL TABLE OUTPUT
$DEF	MAC$GQ_TIM_SYO	.BLKQ	1	;ELAPSED TIME FOR SYMBOL TABLE OUTPUT
$DEF	MAC$GL_PFL_SYO	.BLKL	1	;PAGE FAULTS IN SYMBOL TABLE OUTPUT
$DEF	MAC$GQ_RNT_PSY	.BLKQ	1	;CPU TIME FOR PSECT SYNOPSIS OUTPUT
$DEF	MAC$GQ_TIM_PSY	.BLKQ	1	;ELAPSED TIME FOR PSECT SYNO. OUTPUT
$DEF	MAC$GL_PFL_PSY	.BLKL	1	;PAGE FAULTS FOR PSECT SYNO. OUTPUT

	.END
