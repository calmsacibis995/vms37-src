	.TITLE	MAC$ARGSCN	SCAN MACRO REAL/KEYWORD ARGS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 20-AUG-78
;
; MODIFIED BY:
;
;	V02.08	CNH0047		Chris Hume	22-Dec-1980
;		Count null argument after trailing comma for .NARG directive.
;		(DEFINE.MAR 02.18, GETARG.MAR 02.06)
;
;	V01.07	RN0023		R. Newland	 3-Nov-1979
;		New error codes to get error message from system
;		message file.
;
;	V01.06	RN0018		R. Newland	20-Oct-1979
;		Convert argument to upper case if UPMARG set.
;
;	V01.05	RN0012		R. Newland	26-Sep-1979
;		Fix problem with angle bracket processing of .IRPC
;		string argument. SPR 11-25871
;
;	V01.04	RN0006		R. Newland	28-Aug-1979
;		Fix problem with continuation lines on macro calls
;		SPR 11-24902
;
;	V01.03	RN0005		R. Newland	13-Aug-1979
;		Remove .ALIGN LONG and DEBUG statements and use
;		symbolic value for maximum argument size
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$MAC_GENVALDEF			;DEFINE GENERAL VALUES
	$MAC_MNBDEF			;DEFINE MNB OFFSETS
	$MAC_CTLFLGDEF			;DEFINE CONTROL FLAGS
	$MAC_SYMBLKDEF			;DEFINE SYMBOL BLOCK OFFSETS
	$MACMSGDEF			; Define message codes
;
; LOCAL DATA
;

	.PSECT	MAC$RO_DATA,NOWRT,NOEXE,GBL,LONG

MAC$AB_SPLARGS:				;SPECIAL MACRO ARG CHARACTERS
	.BYTE	^A/\/,^A/</,^A/^/
MAC$K_SPLARG=.-MAC$AB_SPLARGS

	.PSECT	MAC$RO_CODE_MAC,NOWRT,GBL,LONG

	.SBTTL	MAC$MAC_ARG_SCN	SCAN MACRO KEYWORD/REAL ARGS

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SCANS A 'REAL' ARGUMENT AND ACCUMULATES IT IN
;	MAC$AB_TMPBUF.  THE ROUTINE OPERATES AS FOLLOWS:
;
;		1) SKIP SPACES
;		2) IF ARRIVE AT COMMA OR EOL RETURN NULL ARGUMENT
;		3) IF ALPHABETIC CHARACTER AND KEYWORD ARGUMENTS PRESENT
;		   (SET BY STAT4), SEE IF POSSIBLY KEYWORD ARG.  IF IT
;		   IS A KEYWORD ARG, STORE THE MAB ADDRESS IN MAC$GL_KEYPTR
;		   AND SCAN PAST THE EQUAL SIGN.
;		4) CHECK FOR SPECIAL CHARACTERS:
;
;			A) "\" - THE VALUE OF THE SYMBOL FOLLOWING THE
;			   BACKSLASH IS SUBSTITUTED.  IF THE SYMBOL IS
;			   UNDEFINED, A VALUE OF 0 IS SUBSTITUTED.
;
;			B) "<" - THE STRING WITHIN THE MATCHED PAIR OF
;			   ANGLE BRACKETS IS STORED.  THE OUTER PAIR OF
;			   ANGLE BRACKETS IS NOT STORED.
;
;			C) "^" - THE CHARACTER FOLLOWING THE "^" IS TAKEN
;			   AS THE DELIMITER.  THE STRING WITHIN THE DELIMITERS
;			   IS STORED.
;
;		5) IF THERE IS NO SPECIAL CHARACTER THE STRING IS COPIED
;		   UNTIL A COMMA, EOL, OR RIGHT ANGLE BRACKET (IRP ONLY)
;		   IS FOUND.
;
; OUTPUTS:
;
;	R0	LENGTH OF ARGUMENT STORED IN MAC$AB_TMPBUF
;
;--
.ENABLE LSB

MAC$MAC_ARG_SCN::
	PUSHR	#^M<R6,R7,R8,R12>	;SAVE REGISTERS
	
	CLRL	W^MAC$GL_KEYPTR		;ASSUME NOT KEYWORD ARGUMENT
	MOVAB	W^MAC$AB_TMPBUF,R8	;POINT TO TEMP BUF
	MOVZWL	#ARG$K_SIZE,R12		; Set up temp buffer counter
	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#CR			;GET TO EOL?
	BEQL	20$			;IF EQL YES
	CMPB	R10,#^A/,/		;NO--STOP ON A COMMA?
	BNEQ	30$			;IF NEQ NO
	BBS	#FLG$V_IFSTAT,(R11),20$	;YES--BRANCH IF IN AN IF
	BSBW	MAC$GETCHR		;NO--SKIP THE COMMA
	BSBW	MAC$SKIPSP		;AND SPACES
	BRW	ARG_FOLLOWS		; Note trailing comma at exit.
20$:	BRW	ARG_SCAN_DONE		;GO FINISH UP
;
; PICK UP FORMAL ARG NAME IF KEYWORD MACRO DEFINITION OR MACRO CALL.
; OTHERWISE TREAT AS POSITIONAL ARGUMENT.
;
30$:	BBC	#CHR$V_SYM_CHR,-	;CAN IT BE A SYMBOL?
		W^MAC$AB_CMSK_TAB(R10),70$ ;BRANCH IF NO
	MOVL	W^MAC$GL_KEYMAC,R5	;YES--GET PTR TO KEYWORD ARGS
	BEQL	70$			;IF EQL NO KEYWORD ARGS
	PUSHL	R10			;SAVE INPUT CONTEXT
	PUSHL	W^MAC$GL_LINEPT		;...
	CLRB	-(SP)			;ASSUME NO CONTINUATION LINES
	BBCC	#FLG$V_CONT,(R11),40$	;CLEAR FLAG AND SEE IF IT WAS SET
	INCB	(SP)			;IT WAS--REMEMBER THAT
40$:	BSBW	MAC$SYMSCNUP		;SCAN A SYMBOL
	BSBW	MAC$SRC_LIST		;LOOK IT UP AMONG THE KEYWORDS
	BSBW	MAC$SKIPSP		; Skip spaces after name
	TSTB	(SP)+			;CHECK OLD CONT FLAG
	BEQL	50$			;BRANCH IF CLEAR
	BBCS	#FLG$V_CONT,(R11),.+1	;ELSE SET IT AGAIN
50$:	MOVQ	R0,R5			;COPY FLAG/ADDRESS
	BSBW	MAC$SKIPSP		;SKIP SPACES
	BLBC	R5,60$			;BRANCH IF KEYWORD NOT FOUND
	CMPB	R10,#^A/=/		;KEYWORD--FOLLOWED BY EQUAL SIGN?
	BNEQ	60$			;IF NEQ NO
	ADDL2	#2*4,SP			;YES--THROW AWAY SAVED CONTEXT
	MOVL	R6,W^MAC$GL_KEYPTR	;REMEMBER KEYWORD ADDRESS
	BSBW	MAC$GETCHR		;GET NEXT CHARACTER
	BSBW	MAC$SKIPSP		;SKIP SPACES
	BRB	70$

;
; NOT A KEYWORD OR NO EQUAL SIGN FOLLOWING IT
;
60$:	POPL	W^MAC$GL_LINEPT		;RESTORE SAVED CONTEXT
	POPL	R10			;...
;
; LOOK FOR SPECIAL CHARACTERS THAT CAN START MACRO ARGS
;
70$:	LOCC	R10,#MAC$K_SPLARG,W^MAC$AB_SPLARGS ;SEE IF SPECIAL
	BNEQ	90$			;IF NEQ WE FOUND IT
80$:	BRW	500$			;NOT SPECIAL--GO PICK UP ARG
90$:	SUBL3	#MAC$AB_SPLARGS,R1,R0	;COMPUTE INDEX
	CASEB	R0,#0,#MAC$K_SPLARG-1	;DISPATCH TO ROUTINE
100$:	.WORD	200$-100$		;"\"
	.WORD	300$-100$		;"<"
	.WORD	400$-100$		;"^"
	BRW	500$			;THIS REALLY SHOULD NOT BE HAPPENING...
					;BUT JUST TREAT AS NON-SPECIAL
;
; PROCESS SPECIAL CHARACTERS IN MACRO ARGUMENTS
;
;
; CHARACTER IS A BACKSLASH.  THE VALUE OF THE SYMBOL FOLLOWING THE
; BACKSLASH IS SUBSTITUTED.  IF THE SYMBOL IS NOT DEFINED A VALUE
; OF 0 IS SUBSTITUTED.
;
200$:	BSBW	MAC$GETCHR		;SKIP THE BACKSLASH
	BSBW	MAC$SYMSCNUP		;SCAN THE SYMBOL
	BLBC	R0,230$			;BRANCH IF NO SYMBOL FOUND
	BSBW	MAC$SRCUSRSYMTB		;LOOK IT UP
	BLBS	R0,210$			;BRANCH IF FOUND
	MOVAB	W^MAC$GK_ZERO-SYM$L_VAL,R1 ;ELSE FAKE A ZERO
210$:	MOVL	SYM$L_VAL(R1),R0	;GET THE VALUE
	BGEQ	220$			;BRANCH IF GEQ 0
	MOVB	#^A/-/,(R8)+		;NEGATIVE--EMIT A SIGN
	MNEGL	R0,R0			;GET POSITIVE VALUE
220$:	MOVL	R8,R1			;SET POINTER FOR DECOUT
	BSBW	MAC$DEC_OUT_L2X		;EMIT THE VALUE (DECIMAL)
	MOVL	R0,R8			;GET UPDATED POINTER
230$:	BRW	600$			;FINISH UP

;
; CHARACTER IS LEFT ANGLE BRACKET.  THE STRING WITHIN THE ANGLE BRACKETS
; IS COPIED INTO MAC$AB_TMPBUF.
;
300$:	BISL2	#FLG$M_ALLCHR,(R11)	;PASS SEMI COLONS
	CLRL	R5			;NESTING LEVEL COUNTER STARTS AT 0
310$:	BSBW	MAC$GETCHR		;GET THE NEXT CHARACTER
	DECL	R12			;ROOM TO STORE IT?
	BLSS	315$			;IF LSS NO
	MOVB	R10,(R8)+		;STORE IT
315$:	CMPB	R10,#^A/</		;ANOTHER LEFT ANGLE BRACKET?
	BNEQ	320$			;IF NEQ NO
	INCL	R5			;YES--UP THE NESTING LEVEL
	BRB	310$			;KONTINUE SKANNING
320$:	CMPB	R10,#^A/>/		;RIGHT ANGLE BRACKET?
	BNEQ	330$			;IF NEQ NO
	SOBGEQ	R5,310$			;YES--DECREMENT NESTING LEVEL AND
					;GO FOR NEXT CHAR IF NOT DONE
	DECL	R8			;DONE--DON'T STORE FINAL ">"
	BRB	420$			;GO FINISH UP
330$:	CMPB	R10,#CR			;END OF LINE?
	BNEQ	310$			;IF NEQ NO--KEEP SKANNING
	BRB	420$			;YES--FINISH UP
;
; CHARACTER IS UP-ARROW.  THE CHARACTER FOLLOWING THE UP-ARROW IS TAKEN
; AS THE DELIMITER.  THE STRING WITHIN THE DELIMITERS IS COPIED INTO
; MAC$AB_TMPBUF.
;
400$:	BSBW	MAC$GETCHR		;GET THE DELIMITER
	CMPB	R10,#CR			;IS IT EOL?
	BEQL	440$			;IF EQL OOPS!
	MOVL	R10,R5			;SAVE THE DELIMITER
	BISL2	#FLG$M_ALLCHR,(R11)	;AND PASS SEMI COLONS
410$:	BSBW	MAC$GETCHR		;GET A CHARACTER
	CMPB	R10,R5			;IS IT THE DELIMITER?
	BEQL	420$			;IF EQL YES
	CMPB	R10,#CR			;END OF LINE?
	BEQL	420$			;IF EQL YES (OOPS)
	DECL	R12			;NO--HAVE WE OVERFLOWED BUFFER?
	BLSS	410$			;IF LSS YES--DO NOT STORE
	MOVB	R10,(R8)+		;NO--STORE THE CHAR
	BRB	410$			;LOOP FOR MORE
;
; FINISH UP PROCESSING. RESET LOWER CASE LIMIT, AND CHECK FOR PROPER
; END OF LINE.
;
420$:	BICL2	#FLG$M_ALLCHR,(R11)	;DO NOT PASS SEMICOLONS
430$:	CMPB	R10,#CR			;DID WE END WITH EOL?
	BNEQ	450$			;IF NEQ NO--OK
440$:	$MAC_ERR UNTERMARG		; Yes--that is an error
	BSBW	MAC$ERRORLN		;ISSUE MESSAGE TO PASS 2
	BRB	600$			;GO FINISH UP
450$:	BSBW	MAC$GETCHR		;GET THE NEXT CHARACTER
	BRB	600$			;FINISH UP
;
; NOTHING SPECIAL--MUST BE SYMBOLIC ARGUMENT.  COPY STRING UNTIL
; A COMMA, END OF LINE OR RIGHT ANGLE BRACKET (IRP ONLY) IS FOUND.
;
500$:	DECL	R12			;ROOM TO STORE THE CHARACTER?
	BLSS	505$			;IF LSS NO
	BBC	#FLG$V_UPMARG,(R11),502$ ; Branch if not to convert to upper case
	BSBW	MAC$CVT_LOWER		; Convert possible lower case to upper
502$:
	MOVB	R10,(R8)+		;COPY THE CHARACTER
505$:	BSBW	MAC$GETCHR		;GET A CHARACTER
	CMPB	R10,#^A/>/		;RIGHT ANGLE BRACKET?
	BNEQ	510$			;IF NEQ NO
	BBC	#FLG$V_RPTIRP,(R11),510$ ; Branch if not .REPT, .IRP or .IRPC
	BBC	#FLG$V_IRPC,(R11),600$	; Branch if not .IRPC
510$:	CMPB	R10,#^A/,/		;IS IT A COMMA?
	BEQL	600$			;IF EQL YES--DONE
	CMPB	R10,#CR			;NO--END OF LINE?
	BEQL	600$			;IF EQL YES
	CMPB	R10,#^A/)/		;RIGHT PARENS?
	BNEQ	520$			;IF NEQ NO
	BBS	#FLG$V_LEXOP,(R11),600$	;YES--THAT IS TERMINATION IF LEXICAL OPERATOR
520$:	BBC	#CHR$V_SPA_MSK,-	;NO--KEEP GOING UNLESS A SPACE
		W^MAC$AB_CMSK_TAB(R10),500$
;
; ALL DONE (REALLY)
;
600$:	TSTL	R12			;WAS LINE TOO LONG?
	BGEQ	605$			;IF GEQ NO
	$MAC_ERR ARGTOOLONG		; Yes--get error code
	BSBW	MAC$ERRORLN		;ISSUE ERROR TO PASS 2
605$:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#^A/,/		;IS IT A COMMA?
	BNEQ	610$			;IF NEQ NO
	BBS	#FLG$V_IFSTAT,(R11),610$;YES--BRANCH IF AN IF STATEMENT
	BBS	#FLG$V_LEXOP,(R11),610$	;OR IS THIS A LEXICAL OPERATOR?
	BSBW	MAC$GETCHR		;NO--GET NEXT CHARACTER
	BSBW	MAC$SKIPSP		;SKIP SPACES

ARG_FOLLOWS:				; Note presence of trailing comma.
	BBSS	#FLG$V_MOREARG,(R11),615$
	BRB	615$
610$:
ARG_SCAN_DONE:				; Clear trailing comma flag.
	BBCC	#FLG$V_MOREARG,(R11),615$
615$:	SUBL3	#MAC$AB_TMPBUF,R8,R0	;FIGURE LENGTH OF ARG
	POPR	#^M<R6,R7,R8,R12>	;SAVE REGISTERS
	RSB

.DISABLE LSB
.END
