	.TITLE	MAC$MACLIB	MACRO LIBRARY PROCESSOR
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 24-AUG-78
;
; MODIFIED BY:
;
;	V02.17	MTR0001		Mike Rhodes	09-Nov-1981
;		Add default name descriptor use in opening the system
;		library STARLET.
;
;	V02.16	PCG0007		P. George	20-Aug-1981
;		Report .LIBRARY errors in listing and with exit status.
;
;	V01.15	RN0023		R. Newland	 3-Nov-1979
;		New message codes to get error messages from system
;		message file.
;
;	V01.14	RN0011		R. Newland		11-Sep-1979
;		New librarian support
;
;	V01.11	004		B. Schreiber	10-JAN-1979
;		Correct "illegal block size" error if macro library
;		has MNT entries allocated but none used.
;	V01.12	008		B. Schreiber	23-JAN-1979
;		Clear index number of pages for SYSLIB FDB on setup.
;	V01.13	RN0003		R. Newland	18-Feb-1979
;		Correct initial values of macro library binary
;		chop routine
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$MAC_CTLFLGDEF			;DEFINE CONTROL FLAGS
	$MAC_GRAMMARDEF			;DEFINE TERMINAL GRAMMAR SYMBOLS
	$MAC_MLFDEF			; Define MLF offsets
	$MAC_GENVALDEF			;DEFINE GENERAL VALUES
	$MAC_SYMBLKDEF			;DEFINE SYMBOL BLOCK OFFSETS
	$NAMDEF				;DEFINE NAM OFFSETS
	$RABDEF				;DEFINE RAB OFFSETS
	$RMEDEF				;DEFINE RME
	$FABDEF				;DEFINE FAB OFFSETS
	$MACMSGDEF			; Define message codes

;
; LOCAL DATA
;

	.PSECT	MAC$RO_DATA,NOEXE,NOWRT,GBL,LONG

MLF_ARGLIST:
	$ARGLST	2,MLF_SIZE,MAC$GL_BASEADDR
;
MLF_SIZE:
	.LONG	MLF$K_BLKSIZ

	.PSECT	MAC$RW_DATA,NOEXE,LONG

MAC$TMPSYMDS:				; Temp sym descriptor (used for
	.LONG	0,MAC$AB_TMPSYM+1	; LBR$LOOKUP_KEY calls)

	.PSECT	MAC$RO_CODE_MAC,NOWRT,GBL,LONG

	.SBTTL	MCALL		EXPLICIT MACRO CALL ROUTINE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED WHEN THE .MCALL DIRECTIVE IS FOUND.
;	ANY MACRO NAMES FOLLOWING THE DIRECTIVE THAT ARE NOT DEFINED
;	ARE DEFINED BY DOING IMPLICIT MACRO CALLS ON THEM.
;
;--

MCALL::					;DIRECITVE = KMCALL
	SUBL3	#1,W^MAC$GL_LINEPT,R0	;SET UP ERROR POINTER
	MOVL	R0,W^MAC$GL_ERRPT	;...
	BSBW	MAC$SYMSCNUP		;SCAN A MACRO NAME
	BLBS	R0,10$			;BRANCH IF WE FOUND ONE
	$MAC_ERR DIRSYNX		; Else directive syntax error
	BRW	MAC$ERRORPT		;ISSUE ERROR AND RETURN
10$:	MOVAB	W^MAC$AL_UMCHSHTB,R3	;LOOK UP NAME IN MACRO HASH TABLE
	BSBW	MAC$SRCSYMTAB		;IF IT IS THERE WE CAN SAVE SOME TIME
	BLBS	R0,20$			;BRANCH IF FOUND
	BSBB	MAC$IMPLMCALL		;NO--DO AN IMPLICIT MACRO CALL
	CMPL	R8,#MACTXT		;DID WE FIND IT?
	BEQL	20$			;IF EQL YES
	$MAC_ERR CANTLOCMAC		; No--set message code
	BSBW	MAC$ERRORPT		;ISSUE MESSAGE TO PASS 2
20$:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#^A/,/		;STOP ON A COMMA?
	BNEQ	30$			;IF NEQ NO
	BSBW	MAC$GETCHR		;YES--SKIP IT
	BSBW	MAC$SKIPSP		;THEN SKIP SPACES
30$:	CMPB	R10,#CR			;GET TO EOL?
	BNEQ	MCALL			;IF NEQ NO--KEEP GOING
	RSB				;YES--MCALL IS DONE

	.SBTTL	MAC$IMPLMCALL	IMPLICIT MACRO CALL ROUTINE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED EITHER BY "MCALL" OR BY THE MAC$SYMBOL
;	ROUTINE WHEN AN UNIDENTIFIED NAME IS DETECTED.  THE IN-CORE
;	INDICES OF ALL "KNOWN" MACRO LIBRARIES ARE SEARCHED STARTING
;	WITH THE LAST ONE SPECIFIED.  THE FOLLOWING METHOD IS USED:
;
;		1) THE IN-CORE INDEX OF EACH MLB IS SEARCHED USING
;		   A MATCHC INSTRUCTION.  IF THE NAME IS FOUND, THE
;		   MLB IS OPENED AND THE MACRO IS DEFINED.
;
;		2) IF THE NAME IS NOT FOUND IN ANY OF THE MACRO
;		   LIBRARIES, A TOKEN OF "ERR03" IS RETURNED.
;
;--

MAC$IMPLMCALL::
	PUSHL	R7			;SAVE R7
	MOVAB	W^MAC$AB_TMPSYM,R6	;POINT TO THE NAME WE ARE LOOKING FOR
	MOVZBW	(R6),W^MAC$TMPSYMDS	; Set up descriptor for macro name
	MOVAB	W^MAC$GL_MLB_QUE,R7	;POINT TO MLB QUE HEADER

NEXT_MLB:
	MOVL	(R7),R7			;LINK TO NEXT MLB FDB
	CMPL	R7,#MAC$GL_MLB_QUE	;ARE WE DONE?
	BNEQ	10$			;IF NEQ NO
	POPL	R7			;YES--RESTORE R7
	MOVL	#ERR03,R8		;RETURN ERROR TOKEN
	RSB
;
; Call librarian procedure to look up macro name
;
10$:
	PUSHAB	W^MAC$GL_TXTRFA		; Address to store text RFA
	PUSHAB	W^MAC$TMPSYMDS		; Address of name descriptor
	PUSHAB	MLF$L_CTINDEX(R7)	; Address of control table index
	CALLS	#3,G^LBR$LOOKUP_KEY	; Look-up macro name
	BLBC	R0,NEXT_MLB		; Not found if LBC
	MOVL	R7,W^MAC$GL_MLFPTR	; Save MLF pointer
;
	BSBW	MAC$ALL_1_PAGE		;ALLOCATE A VIRTUAL PAGE
	PUSHL	R0			;SAVE ITS ADDRESS
	MOVC3	#LST$K_BUFSIZ,W^MAC$AB_LINEBF,(R0) ;COPY CURRENT LINE OUT
	MOVL	W^MAC$GL_LINENUM,(R3)+	;SAVE CURRENT STATE
	BICL3	#^C<FLG$M_CONT>,(R11),(R3)+ ;SAVE CONTINUATION STATE
	MOVL	R10,(R3)+		;SAVE CURRENT CHARACTER
	MOVL	W^MAC$GL_LINEPT,(R3)+	;SAVE LINE POINTER
	MOVL	W^MAC$GL_LINELN,(R3)+	;SAVE LINE LENGTH
	BSBW	MAC$ALL_1_PAGE		;ALLOCATE AN INPUT BLOCK
	MOVL	W^MAC$GL_INPUTP,(R0)	;LINK TO LAST INPUT BLOCK
	MOVAL	(R0)+,W^MAC$GL_INPUTP	;MAKE NEW BLOCK CURRENT BLOCK
	CLRL	(R0)+			;CLEAR TEXT LINK
	MOVAB	W^MAC$GET_MLB_LIN,(R0)+	;SET NEW LINE ROUTINE
;
; THE REST OF THE INPUT BLOCK IS NOT USED. HENCE IT IS NOT INITIALIZED.
;
	MOVZBL	#CR,R10			;FORCE READING OF NEW LINE
	BSBW	MAC$GETCHR		;GET FIRST CHARACTER OF MACRO
	BSBW	MAC$SYMSCNUP		;SCAN FIRST SYMBOL
	BLBC	R0,MAC_LIB_FMT_ERR	; If not found then error
	MOVAB	MAC$AL_PRMHSHTB,R3	;LOOK IN PERMANENT SYMBOL TABLE
	BSBW	MAC$SRCSYMTAB		;...
	BLBC	R0,MAC_LIB_FMT_ERR	; If not found then error
	CMPB	SYM$B_TOKEN(R1),#KMACRO	;WAS IT ".MACRO"?
	BNEQ	MAC_LIB_FMT_ERR		; If NEQ no -- bad library
	BSBW	MACRO			; Define the MACRO
;
; NOW RESTORE THINGS TO PRE-MLB READING STATE
;
	INCL	W^MAC$GL_MLB_MDF	;COUNT MACRO DEFINED FROM MACRO LIBRARY
	INCL	MLF$L_MCDEF(R7)		;ALSO COUNT IN MLB FDB
	MOVL	W^MAC$GL_INPUTP,R0	;POINT TO THE INPUT BLOCK	
	MOVL	(R0),W^MAC$GL_INPUTP	;RESTORE LAST INPUT BLOCK
	BSBW	MAC$DEA_1_PAGE		;DEALLOCATE INPUT BLOCK
	MOVL	(SP),R0			;GET ADDRESS OF SAVED LINE BLOCK
	MOVC3	#LST$K_BUFSIZ,(R0),W^MAC$AB_LINEBF ;RESTORE INPUT LINE
	MOVL	(R1)+,W^MAC$GL_LINENUM	;RESTORE LINE NUMBER
	TSTL	(R1)+			;CHECK CONT FLAG
	BEQL	50$			;IF EQL CLEAR IT
	BBCS	#FLG$V_CONT,(R11),60$	;NO--SET IT
	BRB	60$
50$:	BBCC	#FLG$V_CONT,(R11),60$	;CLEAR CONT FLAG
60$:	MOVL	(R1)+,R10		;RESTORE CURRENT CHARACTER
	MOVL	(R1)+,W^MAC$GL_LINEPT	;RESTORE LINE POINTER
	MOVL	(R1)+,W^MAC$GL_LINELN	;RESTORE LINE LENGTH
	POPL	R0			;RESTORE ADDRESS OF SAVE PAGE
	POPL	R7			;RESTORE R7
	MOVL	#MACTXT,R8		;RETURN TOKEN FOR MACRO
	BSBW	MAC$DEA_1_PAGE		;DEALLOCATE PAGE
	MOVL	W^MAC$GL_MACPTR,R1	;RETURN PTR TO MNB IN R1
	RSB				;RETURN

;
; MACRO LIBRARY FORMAT ERROR.  THE CODE TO REPORT THE ERROR IN PASS 2
; IS EMITTED TO THE INTERMEDIATE FILE, AND THE ASSEMBLY IS TERMINATED.
; PASS 2 IS THEN EXECUTED TO REPORT THE ERRORS.
;
MAC_LIB_FMT_ERR:
	$MAC_ERR MACLBFMTER		; Get the message code
	BSBW	MAC$ERRORPT		;REPORT ERROR TO PASS 2
	BRW	MAC$ABORT_PASS1		;ABORT PASS 1

	.SBTTL	MAC$GET_MLB_LIN	READ LINE FROM MACRO LIBRARY

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED BY MAC$GETCHR WHEN IT IS TIME TO
;	READ ANOTHER MACRO DEFINITION LINE FROM A MACRO LIBRARY.
;	THE LINE IS PLACED IN THE INPUT BUFFER MAC$AB_LINELN.
;
;--

MAC$GET_MLB_LIN::
	MOVL	W^MAC$GL_MLFPTR,R1	; Get current MLF pointer
	PUSHAB	W^MAC$GL_LINELN		; Address to store line length
	PUSHAB	W^MAC$GQ_LINEBFDS	; Address of buffer descriptor
	PUSHAB	MLF$L_CTINDEX(R1)	; Address of control table index
	CALLS	#3,G^LBR$GET_RECORD	; Get record
	BLBC	R0,MAC_LIB_FMT_ERR	;IF LBC THEN LIBRARY ERROR
10$:	INCL	W^MAC$GL_MLB_GET	;COUNT ANOTHER MLB GET
	MOVL	W^MAC$GL_LINELN,R0	; Get line length
	BEQL	MAC$GET_MLB_LIN		;SKIP NULL LINES
	MOVAB	W^MAC$AB_LINEBF,R1	;POINT TO THE LINE BUFFER
	MOVL	R1,W^MAC$GL_LINEPT	;SET UP THE LINE POINTER
	MOVL	R1,W^MAC$GL_ERRPTX	;AND THE ERROR TOKEN POINTER
	MOVB	#CR,(R0)[R1]		;STORE CR AT END OF LINE
	RSB

	.SBTTL	LIBRY		PROCESS .LIBRARY DIRECTIVE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO PROCESS THE .LIBRARY DIRECTIVE.
;	THE FILENAME WITHIN THE DELIMITERS IS SCANNED.  THE FILE
;	IS THEN OPENED, AND AN IN-CORE INDEX IS CREATED.  THE FDB
;	FOR THE NEW MLB IS THEN ADDED TO THE FRONT OF THE MLB QUEUE.
;
;--

LIBRY::					;DIRECTIVE = KLIBRARY
	PUSHL	R8			;SAVE R8
	BSBW	MAC$SKIPSP		;FIND THE DELIMITER
	CMPB	R10,#CR			;DID WE GET TO END OF LINE?
	BNEQ	10$			;IF NEQ NO
5$:	$MAC_ERR DIRSYNX		; Yes-get message code
	BRB	40$			;ISSUE ERROR AND RETURN
10$:	MOVB	R10,R6			;COPY THE DELIMITER
	MOVAB	W^MAC$AB_TMPBUF+8,R8	; Point to temp buffer to accumalate name
					; (a descriptor will be formed at start)
	BISL2	#FLG$M_ALLCHR,(R11)	;PASS SEMI-COLONS IN CASE SOME
					;TURKEY PUTS A VERSION NUMBER ON
					;HIS LIBRARY FILE NAME
20$:	BSBW	MAC$GETCHR		;GET A CHARACTER OF FILENAME
	CMPB	R10,R6			;END OF FILENAME?
	BEQL	50$			;IF EQL YES
	CMPB	R10,#CR			;BAD ENDING?
	BEQL	30$			;IF EQL YES
	MOVB	R10,(R8)+		;NO--STORE CHAR OF FILENAME
	BRB	20$			;CONTINUE LOOPING FOR NAME
;
; HERE IF CR BEFORE DELIMITER
;
30$:	$MAC_ERR UNTERMARG		; Set message code
40$:	POPL	R8			;RESTORE R8
	BICL2	#FLG$M_ALLCHR,(R11)	;CLEAR ALLCHR FLAG
	BRW	MAC$ERRORPT		;ISSUE ERROR AND RETURN
;
; HERE WHEN DELIMITER SEEN
;
50$:	BICL2	#FLG$M_ALLCHR,(R11)	;CLEAR ALLCHR FLAG
	BSBW	MAC$GETCHR		;SKIP OVER DELIMITER
	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#CR			;STOP ON EOL?
	BNEQ	5$			;IF NEQ NO--LOSE
	SUBL3	#MAC$AB_TMPBUF+8,R8, -	; Form descriptor to library
		W^MAC$AB_TMPBUF		; file name
	MOVAB	W^MAC$AB_TMPBUF+8, -
		W^MAC$AB_TMPBUF+4
	BSBW	MAC$ALL_MLB_MLF		; Get memory block for MLF
;
; Call librarian procedure to initialise library
;
	PUSHAB	MLF$X_NAMBLK(R6)	; Address of NAM block
	PUSHAB	W^MAC$GL_LIBTYPE	; Address of type = MLB
	PUSHAB	W^MAC$GL_LIBFUNC	; Address of function = READ
	PUSHAB	MLF$L_CTINDEX(R6)	; Address of control table index
	CALLS	#4,G^LBR$INI_CONTROL	; Initialise library
	BLBC	R0,55$			; Error if LBC
;
; Call librarian procedure to open library file
;
	PUSHAB	MLF$Q_FNAMDS(R6)	; Address of resultant length
	PUSHAB	MLF$Q_FNAMDS(R6)	; Address of resultant descriptor
	PUSHL	#0			; No related file name
	PUSHAB	W^MAC$MLB_DEFNAM	; Address of default name
	PUSHL	#0			; No create options
	PUSHAB	W^MAC$AB_TMPBUF		; Address of file name
	PUSHAB	MLF$L_CTINDEX(R6)	; Address of control table index
	CALLS	#7,G^LBR$OPEN		; Open library file
	POPL	R8			;RESTORE R8
	BLBS	R0,60$			;BRANCH IF GOOD OPEN
55$:
	PUSHL	R6			; Address of MLF
	CALLS	#1,MAC$ERR_LBROPEN	; Report library open error
	$MAC_ERR MLBOPNERR		;REPORT ERROR WITHIN LISTING
	BSBW	MAC$ERRORPT		;AND EXIT WITH ERROR STATUS
	BRW	MAC$ABORT_PASS1		;GO ABORT PASS 1
60$:	INSQUE	(R6),W^MAC$GL_MLB_QUE	;INSERT IN MLB QUEUE
	INCL	W^MAC$GL_MLB_CNT	; Increment macro library count
	RSB

	.SBTTL	MAC$SYSLIB_SET	SET UP THE SYSTEM LIBRARY

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED AT MACRO-32 INITIALIZATION TO ENSURE
;	THAT THE SYSTEM LIBRARY EXISTS, AND CREATES AN IN-CORE INDEX
;	OF IT.  THE MACRO LIBRARY QUEUE IS ALSO INITIALIZED.
;
;--

MAC$SYSLIB_SET::
	MOVAB	W^MAC$GL_MLB_QUE,R0	;INIT THE MLB QUEUE
	MOVAL	(R0),(R0)		;...
	MOVAL	(R0)+,(R0)		;...
	MOVAB	W^MAC$SYSLIB_MLF,R6	; Point to SYSLIB MLF entry
	CLRL	MLF$L_CTINDEX(R6)	; Clear control table index
	MOVW	#MLF$K_RSFNLN,MLF$Q_FNAMDS(R6) ; Initialise file
	MOVAL	MLF$T_FNAM(R6),MLF$Q_FNAMDS+4(R6) ; name descriptor
;
; Call librarian procedure to initialise library
;
	PUSHAB	MLF$X_NAMBLK(R6)	; Address of NAM block
	PUSHAB	W^MAC$GL_LIBTYPE	; Address of type = MLB
	PUSHAB	W^MAC$GL_LIBFUNC	; Address of function = READ
	PUSHAB	MLF$L_CTINDEX(R6)	; Address of control table index
	CALLS	#4,G^LBR$INI_CONTROL	; Initialise library
	BLBC	R0,10$			; Error if LBC
;
; Call librarian procedure to open library file
;
	PUSHAB	MLF$Q_FNAMDS(R6)	; Address of resultant length
	PUSHAB	MLF$Q_FNAMDS(R6)	; Address of resultant descriptor
	PUSHL	#0			; No related file name
	PUSHAB	G^MAC$SYSLIB_DFN	; Address of default name descriptor
	PUSHL	#0			; No create options
	PUSHAB	W^MAC$SYSLIB_FNM	; Address of file name descriptor
	PUSHAB	MLF$L_CTINDEX(R6)	; Address of control table index
	CALLS	#7,G^LBR$OPEN		; Open library file
	BLBC	R0,10$			;IF LBC THEN ERROR
	INSQUE	(R6),W^MAC$GL_MLB_QUE	;INSERT IN MLB QUEUE
	INCL	W^MAC$GL_MLB_CNT	; Increment macro library count
	RSB
10$:
	PUSHL	R6			; Address of MLF
	CALLS	#1,MAC$ERR_LBROPEN	; Report library open error
	BRW	MAC$LAST_CHANCE		; and go die

	.SBTTL	ALLOCATE MLF BLOCK
;
; Functional description:
;
;	This routine is called to allocate a blcok of memory for
;	a MLF (Macro Library File) entry.  The allocated memory block
;	is zeroed and the NAM block and file name descriptors initialised.
;
; Inputs:
;
;	None
;
; Outputs:
;
;	R6 = Address of MLF
;
;--

MAC$ALL_MLB_MLF::
	CALLG	MLF_ARGLIST,G^LIB$GET_VM ; Get memory block
	BLBC	R0,10$			; Error if LBC
	MOVL	W^MAC$GL_BASEADDR,R6	; Get base address of memory block
	MOVC5	#0,(SP),#0,#MLF$K_BLKSIZ,(R6) ; Clear MLF
	MOVW	#MLF$K_RSFNLN,MLF$Q_FNAMDS(R6) ; Initialise file name
	MOVAL	MLF$T_FNAM(R6),MLF$Q_FNAMDS+4(R6) ; descriptor
	MOVW	#<<NAM$C_BLN>@8+NAM$C_BID>,- ; Identify NAM block
		MLF$X_NAMBLK(R6)
	RSB
10$:
	CALLS	#0,W^MAC$ERR_NOMEM_0	; Report the error
	BRW	MAC$LAST_CHANCE		; and go die

	.END
