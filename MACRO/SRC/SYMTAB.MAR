	.TITLE	MAC$SYMTAB	PERMANENT SYMBOL TABLE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 20-AUG-78
;
; MODIFIED BY:
;
;	V02.20	MTR0001		Mike Rhodes	09-Nov-1981
;		Add new symbol block for /DEBUG parameter symbols.
;		The functions are the same as combinations of the
;		/Enable and /Disable qualifers utilizing the DEBUG
;		and TRACEBACK parameters.
;
;	V02.19	PCG0009		Peter George	28-Aug-1981
;		Delete multiple CLRG definition.
;
;	V02.18	CNH0042		Chris Hume	28-Oct-1980
;		De-optimize boundary valued backward references if indexing
;		requested.  Allow the architecturally legal immediate mode in
;		address and vield contexts and also the practically useless
;		indexed immediate mode.
;		(ACTREF.MAR 02.15, ACTSTA.MAR 02.15, DEFINE.MAR 02.17)
;
;	V01.17	RN0014		R. Newland	10-Oct-1979
;		Support for G_floating, H_floating and Octaword datatypes
;
;	V01.16	RN0013		R. Newland	27-Sep-1979
;		Add VEC attribute name to PSECT options
;
;	V01.15	RN0005		R. Newland	12-Aug-1979
;		Variable symbol name storage
;
;	V01.13	RN0004		R. Newland	15-Mar-1979
;		Insert CLRG, MOVAG and PUSHAG into opcode definitions
;
;	V01.14	RN0006		R. Newland	21-Aug-1979
;		Insert .REPEAT into table of directives treated
;		specially within a macro body
;
;	V01.12	RN0001		R. Newland	01-FEB-1979
;		Insert CVTDH and CVTGF into opcode definitions
;
;--

	$MAC_GENVALDEF		;DEFINE COMMONLY USED SYMBOLS
	$MAC_SYMBLKDEF		;DEFINE SYMBOL BLOCK OFFSETS
	$MAC_CTLFLGDEF		;DEFINE FLAG BIT VALUES
	$MAC_CRFLAGDEF		;DEFINE CROSS REF FLAG BITS
	$MAC_GRAMMARDEF		;DEFINE VAX-11 MACRO TERMINAL GRAMMAR
	$MAC_ADRMODDEF		;DEFINE ADDRESSING MODES
	$MAC_OPRDEF		;DEFINE OPERAND DESCRIPTOR BITS

	.SBTTL	SYM	ENTER SYMBOL INTO SYMBOL TABLE

	.PSECT	MAC$PRMSYMTAB,GBL,NOEXE,NOWRT,LONG
	.NLIST ME
;++
;	SYM -- ENTER SYMBOL INTO SYMBOL TABLE
;
;	THE FOLLOWING MACRO IS USED TO CREATE THE INITIAL SYMBOL TABLE.
;
;	FORMAT IS:	SYM	SYMBOL_NAME,TOKEN<,VALUE><,SEGMENT><,FLG>
;
; INPUTS:
;
;	SYMBOL_NAME	IS THE SYM$K_MAXLEN-CHARACTER OR LESS NAME
;	TOKEN		IS THE TOKEN TO BE ENTERED
;	VALUE		IS THE INITIAL VALUE
;			IF NO VALUE IS GIVEN, THE DEFAULT IS 0
;	SEGMENT		IS THE SEGMENT TO DEFINE THE SYMBOL IN
;	FLG		ARE THE INITIAL FLAGS (DEFAULT IS 0)
;
;--

	.MACRO	SYM	NME,	TKN=0,	VLE=0,	SEG=0,	FLG=0
	.NCHR	SYMLN,<'NME>		;DETERMINE SYMBOL LENGTH
	HASHVL	= SYMLN
	.IRPC	HASHCH,	<'NME>
	HASHVL = HASHVL + ^A/HASHCH/	;HASH THE SYMBOL
	.ENDR

	HASHVL	= HASHVL & HASHSZ	;MASK DOWN TO HASH TABLE SIZE

	.ASCIC	/'NME/		; Counted name string

	ENTERSYM	\HASHVL		;ENTER SYMBOL INTO TABLES

	.LONG 0			;LINK TO NEXT SYMBOL
	.BYTE	SYMLN+1		; Offset to name
	.LONG	VLE
	.WORD	FLG
	.BYTE	TKN		;TOKEN VALUE
	.BYTE	SEG		;SEGMENT
	.ENDM	SYM

	.SBTTL	MACRO TO ENTER SYMBOL INTO LINKED LIST FROM HASH TABLE

;++
;	ENTERSYM -- ENTER SYMBOL INTO LINKED LIST FROM HASH TABLE
;
; INPUTS:
;
;	HASHNM	HASH VALUE OF SYMBOL
;
; OUTPUTS:
;
;	SYMBOL IS LINKED INTO HASH BUCKET
;
;--

	.MACRO	ENTERSYM	HASHNM

	.PSECT	MAC$PRMSYMTAB,GBL,NOEXE,NOWRT,LONG

	HASHPT	= .		;SAVE CURRENT LOCATION

	.IF EQ C$'HASHNM
	.PSECT	MAC$PHASHTAB,GBL,NOEXE,NOWRT,LONG
	.=MAC$AL_PRMHSHTB	;RELOCATE TO START OF HASH TABLE
	.=.+<HASHNM*4>		;RELOCATE TO HASH POSITION IN HASH TABLE
	.LONG	HASHPT		;POINT FROM HASH TABLE TO SYMBOL
	.IFF
	.=S$'HASHNM + SYM$L_LINK	; Relocate to previous symbol linkage
	.LONG	HASHPT		;POINT FROM LAST SYMBOL IN CHAIN
	.=.-SYM$L_LINK			; Point to base of entry
	.ENDC

	C$'HASHNM = C$'HASHNM + 1	;COUNT ENTRIES IN BUCKET

	.PSECT	MAC$PRMSYMTAB,GBL,NOEXE,NOWRT,LONG
	.=HASHPT		;RELOCATE BACK TO END OF FREE STORAGE
	S$'HASHNM = .		;UPDATE LINKED LIST POINTER

	.ENDM	ENTERSYM


	.SBTTL	PERMANENT SYMBOL HASH TABLE

;
; THIS CODE INITIALIZES THE PERMANENT SYMBOL TABLE WHICH CONTAINS
; THE NAMES OF ALL DIRECTIVES AND MACHINE INSTRUCTIONS.  THIS CODE
; ALSO INITIALIZES THE VARIABLES USED BY THE ASSEMBLER TO CONSTRUCT
; THE INITIAL HASH TABLE ENTRIES.
;
	.PSECT	MAC$PHASHTAB,GBL,NOEXE,NOWRT,LONG

MAC$AL_PRMHSHTB::			;START OF HASH TABLE

XXX=0						; DUMMY COUNTER

	.REPT	HASHSZ+1
	.NLIST
	.IRP XX,\XXX
	.BLKL	1			;ALLOCATE HASH ENTRY
	C$'XX= 0		;CLEAR HASH INDEX
	.ENDR
	XXX=XXX+1		;MOVE TO NEXT SYMBOL
	.LIST
	.ENDR


	.SBTTL	USER SYMBOL HASH TABLE

;
; THE USER SYMBOL TABLE CONSISTS OF ALL SYMBOLS (EXCEPT MACRO NAMES)
; DEFINED BY THE USER.  THE CODE BELOW INITIALIZES THIS TABLE TO BE
; EMPTY.  (IE. EACH OF THE HASH TABLE ENTRIES ARE ZEROED.)
;
	.PSECT	MAC$USERHASHTAB,NOEXE,LONG

MAC$AL_USYHSHTB::			;START OF USER HASH TABLE

	.BLKL	HASHSZ+1		;ALLOCATE HASH TABLE

	.SBTTL	MACRO NAME HASH TABLE

;
; THE MACRO NAME TABLE CONTAINS THE NAMES OF ALL MACROS DEFINED BY
; THE USER.  THE CODE BELOW INITIALIZES THIS TABLE TO BE EMPTY.
;

	.PSECT	MAC$USRMACROHSH,NOEXE,LONG

MAC$AL_UMCHSHTB::			;START OF MACRO NAME HASH TABLE

	.BLKL	HASHSZ+1		;ALLOCATE HASH TABLE


	.SBTTL	PERMANENT SYMBOLS

;
;
; THE PERMANENT SYMBOLS RESIDE IN THE 'MAC$PRMSYMTAB' PSECT.
;
;
	.PSECT	MAC$PSECT_TAB,NOEXE,LONG

INSYMP = 0					; START OF PSECT LIST

	.ASCIC	/.  ABS  ./
PSECT$MAIN::
	.LONG	0			;LINK
	.BYTE	9+1			; Offset to name
	.LONG	0			;MAX LENGTH
	.WORD	SYM$M_DEF		;SYMBOL (PSECT) FLAGS
	.BYTE	0,0			;SEGMENT #0, UNUSED BYTE
	.WORD	0			;PSECT OPTIONS
	.LONG	0			;CURRENT LOCATION COUNTER

	.ASCIC	/. BLANK ./
PSECT$BLANK::
	.LONG	0			;LINK
	.BYTE	9+1			; Offset to name
	.LONG	0			;MAX LENGTH
	.WORD	SYM$M_DEF		;SYMBOL (PSECT FLAGS)
	.BYTE	0,1			;UNUSED, SEGMENT # 1
	.WORD	PSC$M_DEFAULT		;PSECT DEFAULT OPTIONS
	.LONG	0			;CURRENT LOCATION COUNTER

	.SBTTL	PSECT OPTION TABLE

	.PSECT	MAC$PSC_OPTIONS,NOEXE,NOWRT,GBL,LONG

;
; MASK DEFINITIONS
;

MSK_LH	=	^XFFFF0000		;MASK TO GET LH WORD ONLY
MSK_RH	=	^XFFFF			;MASK TO GET RH WORD ONLY
SHF_LH	=	16			;SHIFT COUNT TO LH WORD
SIGN_BIT=	^X80000000		;MASK FOR SIGN BIT

	INSYMP	=	0

	$MAC_INSERT_SYX	PIC,-			;POSITION INDEPENDENT CODE
		<<PSC$M_PIC&MSK_RH>+<PSC$M_PIC@SHF_LH>>
	$MAC_INSERT_SYX	NOPIC,-			;NON-PIC CODE
		<<PSC$M_NOPIC&MSK_RH>+<<<PSC$M_NOPIC\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	LIB,-			;UNIVERSAL
		<<PSC$M_LIB&MSK_RH>+<PSC$M_LIB@SHF_LH>>
	$MAC_INSERT_SYX	USR,-			;USER (NOT UNIVERSAL)
		<<PSC$M_USR&MSK_RH>+<<<PSC$M_USR\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	OVR,-			;OVERLAID
		<<PSC$M_OVR&MSK_RH>+<PSC$M_OVR@SHF_LH>>
	$MAC_INSERT_SYX	CON,-			;CONCATENATED
		<<PSC$M_CON&MSK_RH>+<<<PSC$M_CON\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	REL,-			;RELOCATABLE
		<<PSC$M_REL&MSK_RH>+<PSC$M_REL@SHF_LH>>
	$MAC_INSERT_SYX	ABS,-			;ABSOLUTE
		<<PSC$M_ABS&MSK_RH>+<<<PSC$M_ABS\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	GBL,-			;GLOBAL
		<<PSC$M_GBL&MSK_RH>+<PSC$M_GBL@SHF_LH>>
	$MAC_INSERT_SYX	LCL,-			;LOCAL
		<<PSC$M_LCL&MSK_RH>+<<<PSC$M_LCL\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	SHR,-			;SHAREABLE
		<<PSC$M_SHR&MSK_RH>+<PSC$M_SHR@SHF_LH>>
	$MAC_INSERT_SYX	NOSHR,-			;NON-SHAREABLE
		<<PSC$M_NOSHR&MSK_RH>+<<<PSC$M_NOSHR\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	EXE,-			;EXECUTABLE
		<<PSC$M_EXE&MSK_RH>+<<PSC$M_EXE\PSC$M_RD>@SHF_LH>>
	$MAC_INSERT_SYX	NOEXE,-			;NON-EXECUTABLE
		<<PSC$M_NOEXE&MSK_RH>+<<<PSC$M_NOEXE\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	RD,-			;READABLE
		<<PSC$M_RD&MSK_RH>+<PSC$M_RD@SHF_LH>>
	$MAC_INSERT_SYX	NORD,-			;NOT READABLE
		<<PSC$M_NORD&MSK_RH>+<<<PSC$M_NORD\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	WRT,-			;WRITEABLE
		<<PSC$M_WRT&MSK_RH>+<<PSC$M_WRT\PSC$M_RD>@SHF_LH>>
	$MAC_INSERT_SYX	NOWRT,-			;NOT WRITEABLE
		<<PSC$M_NOWRT&MSK_RH>+<<<PSC$M_NOWRT\SIGN_BIT>@SHF_LH>&MSK_LH>>
	$MAC_INSERT_SYX	BYTE,-			;BYTE ALIGNMENT
		<<PSC$M_BYTE&MSK_RH>+<PSC$M_BYTE@SHF_LH>>
	$MAC_INSERT_SYX	WORD,-			;WORD ALIGNMENT
		<<PSC$M_WORD&MSK_RH>+<PSC$M_WORD@SHF_LH>>
	$MAC_INSERT_SYX	LONG,-			;LONGWORD ALIGNMENT
		<<PSC$M_LONG&MSK_RH>+<PSC$M_LONG@SHF_LH>>
	$MAC_INSERT_SYX	QUAD,-			;QUADWORD ALIGNMENT
		<<PSC$M_QUAD&MSK_RH>+<PSC$M_QUAD@SHF_LH>>
	$MAC_INSERT_SYX	PAGE,-			;PAGE ALIGNMENT
		<<PSC$M_PAGE&MSK_RH>+<PSC$M_PAGE@SHF_LH>>
	$MAC_INSERT_SYX	VEC,-
		<<PSC$M_VEC&MSK_RH>+<PSC$M_VEC@SHF_LH>>
	$MAC_INSERT_SYX	NOVEC,-
		<<PSC$M_NOVEC&MSK_RH>+<<<PSC$M_NOVEC\SIGN_BIT>@SHF_LH>&MSK_LH>>,-
		PSC$G_OPTIONS

.SBTTL	SPECIAL MACRO DIRECTIVE SYMBOLS

;
; THE FOLLOWING DIRECTIVES ARE TREATED SPECIAL WHEN THEY ARE ENCOUNTERED
; WHILE SCANNING A MACRO BODY TO LOAD IT INTO MEMORY.  THE ARGUMENT IS
; THE NAME OF THE ROUTINE TO CALL.
;

	.PSECT	MAC$PRMSYMTAB,GBL,NOEXE,NOWRT,LONG

INSYMP = 0					; START OF LIST

	$MAC_INSERT_SYX	.ERROR, MAC$SET_ALL_CHR	;.ERROR WITHIN MACRO DEF
	$MAC_INSERT_SYX	.WARN,  MAC$SET_ALL_CHR	;.WARN WITHIN MACRO DEF
	$MAC_INSERT_SYX	.PRINT, MAC$SET_ALL_CHR	;.PRINT WITHIN MACRO DEF
	$MAC_INSERT_SYX	.ASCII,	MAC$SET_ALL_CHR	;.ASCII WITHIN MACRO DEF
	$MAC_INSERT_SYX	.ASCIZ,	MAC$SET_ALL_CHR	;.ASCIZ WITHIN MACRO DEF
	$MAC_INSERT_SYX	.ASCIC,	MAC$SET_ALL_CHR	;.ASCIC WITHIN MACRO DEF
	$MAC_INSERT_SYX	.ASCID, MAC$SET_ALL_CHR	;.ASCID WITHIN MACRO DEF
	$MAC_INSERT_SYX	.REPT,	MAC$MAC_IN_MAC	;.REPT
	$MAC_INSERT_SYX	.REPEAT,MAC$MAC_IN_MAC	;.REPEAT
	$MAC_INSERT_SYX	.IRP,	MAC$MAC_IN_MAC	;.IRP
	$MAC_INSERT_SYX	.IRPC,	MAC$MAC_IN_MAC	;.IRPC
	$MAC_INSERT_SYX	.ENDR,	MAC$MAC_DEF_END	;.ENDR
	$MAC_INSERT_SYX	.END,	MAC$MAC_DEF_END	;.END
	$MAC_INSERT_SYX	.MACRO,	MAC$MAC_IN_MAC	;.MACRO
	$MAC_INSERT_SYX	.ENDM,	MAC$MAC_DEF_END,-;.ENDM
				MAC$G_SPLMC_DIR

	.SBTTL	CROSS REFERENCE QUALIFIER VALUE OPTIONS

;++
; THE /CROSS QUALIFIER WILL TAKE THE FOLLOWING VALUES:
;
;	ALL		ALL VALUES FOLLOWING
;	DIRECTIVES	CREF DIRECTIVES
;	MACROS		MACROS
;	OPCODES		OPCODES
;	REGISTERS	REGISTERS
;	SYMBOLS		SYMBOLS
;
;--

	INSYMP	=	0

	$MAC_INSERT_SYX	ALL,-
CRF$M_DIR!CRF$M_MACROS!CRF$M_OPCODES!CRF$M_REGISTERS!CRF$M_SYMBOLS ;ALL OF THEM
	$MAC_INSERT_SYX DIRECTIVES,CRF$M_DIR		;DIRECTIVES
	$MAC_INSERT_SYX	MACROS,CRF$M_MACROS		;MACROS
	$MAC_INSERT_SYX	OPCODES,CRF$M_OPCODES		;OPCODES
	$MAC_INSERT_SYX	REGISTERS,CRF$M_REGISTERS	;REGISTERS
	$MAC_INSERT_SYX NONE,CRF$M_MACROS!CRF$M_SYMBOLS	;/CROSS W/NO VALUES
	$MAC_INSERT_SYX	SYMBOLS,CRF$M_SYMBOLS,MAC$CRF_OPTIONS	;SYMBOLS

	.SBTTL	LIST/NLIST OPTION TABLE

	.PSECT	MAC$ENBDSABLTAB,NOEXE,LONG

	ENABLE =  -1
	DISABLE = 0

;
; LISTING CONTROL DIRECTIVES.  THE VALUE IS THE INITIAL SWITCH SETTING
;
;
; NOTE:  THE SYM$B_TOKEN FIELD IS USED INTERNALLY TO STORE THE INITIAL
;	 SETTING OF EACH OPTION (TRUE OF ENABLE OPTIONS ALSO). THESE
;	 ARE SET UP IN PASS 1 AND THE SYM$L_VAL FIELD IS RESET FROM THE
;	 TOKEN FIELD AT THE BEGINNING OF PASS 2.
;
	INSYMP = 0

	$MAC_INSERT_SYM	CND, ENABLE, 1, LST$G_CONDITION	; Conditional code
;
	$MAC_INSERT_SYM	MD,  ENABLE, 2, LST$G_MACRODEF	; Macro defintions
;
	$MAC_INSERT_SYM	MC,  ENABLE, 4, LST$G_MACROCALL	; Macro calls
;
	$MAC_INSERT_SYM	ME,  DISABLE,8, LST$G_MACROXPAN	; Macro expansions
;
	$MAC_INSERT_SYM	MEB, DISABLE,16,LST$G_MACROBIN	; Macro binary code
;
LST$G_DIRLIST == LST$G_MACROBIN		;START OF TABLE
;
; LONG FORMS OF THE LISTING CONTROL DIRECTIVES.  THE VALUE CONTAINED
; IS A POINTER TO ONE OF THE ABOVE NAME BLOCKS.
;
	INSYMP	=	0

	$MAC_INSERT_SYX NONE,		0		;SPECIAL FOR /SHOW
							;WITH NO VALUE
	$MAC_INSERT_SYX	CONDITIONALS,	LST$G_CONDITION	;CONDITIONAL CODE
	$MAC_INSERT_SYX	DEFINITIONS,	LST$G_MACRODEF	;MACRO DEFINITIONS
	$MAC_INSERT_SYX	CALLS,		LST$G_MACROCALL	;MACRO CALLS
	$MAC_INSERT_SYX	EXPANSIONS,	LST$G_MACROXPAN	;MACRO EXPANSIONS
	$MAC_INSERT_SYX	BINARY,		LST$G_MACROBIN,-; Macro expansions
			LST$G_LONGNAMES

	.SBTTL	ENABLE/DISABLE OPTIONS

;
; ENABLE/DISABLE OPTIONS.  VALUE IS INITIAL SETTING.
;

	INSYMP = 0

	$MAC_INSERT_SYM	AMA, DISABLE,	256,-	; Absolute addressing
			ENB$G_ABSADDR
;
	$MAC_INSERT_SYM	FPT, DISABLE,	512,-	; Floating point truncation
			ENB$G_FLPTRUNC
;
	$MAC_INSERT_SYM	LSB, DISABLE,	0,-	; Local symbol block
			ENB$G_LOCALSYMB
;
	$MAC_INSERT_SYM	DBG, DISABLE,	2048,-	; Debugger symbol generation
			ENB$G_DEBUG
;
	$MAC_INSERT_SYM	GBL, ENABLE,	4096,-	; Undefined to externals
			ENB$G_GLOBAL
;
	$MAC_INSERT_SYM	TBK, ENABLE,	8192,-	; Traceback/debug info output
			ENB$G_TRACEBACK
;
	$MAC_INSERT_SYM	SUP, DISABLE,	16384,-	; Suppress of unreferenced symbols
			ENB$G_SUPPRESS
;
ENB$G_OPTIONS	==	ENB$G_SUPPRESS		;START OF TABLE
;
; LONG FORMS OF THE ENABLE OPTIONS.  THE VALUE CONTAINED
; IS A POINTER TO ONE OF THE ABOVE NAME BLOCKS.
;
	INSYMP	=	0

	$MAC_INSERT_SYX NONE,		0		;SPECIAL FOR GETCMD
							;(NEEDED FOR /ENABLE
							;WITH NO VALUES)
	$MAC_INSERT_SYX	ABSOLUTE,	ENB$G_ABSADDR	;ABSOLUTE ADDRESSING
	$MAC_INSERT_SYX	TRUNCATION,	ENB$G_FLPTRUNC	;FLOATING POINT TRUNCATION
	$MAC_INSERT_SYX	LOCAL_BLOCK,	ENB$G_LOCALSYMB	;LOCAL SYMBOL BLOCK
	$MAC_INSERT_SYX	DEBUG,		ENB$G_DEBUG	;DEBUGGER SYMBOL GENERATION
	$MAC_INSERT_SYX TRACEBACK,	ENB$G_TRACEBACK	;DEBUG/TRACEBAC INFO
	$MAC_INSERT_SYX	SUPPRESSION,	ENB$G_SUPPRESS	;SUPPRESS UNREFERENCED SYMBOLS
	$MAC_INSERT_SYX	GLOBAL,		ENB$G_GLOBAL,-	; Undefined globals
			ENB$G_LONGNAMES

;
; LONG FORMS OF THE DEBUG OPTIONS.  THE VALUE CONTAINED IS AN INDEX USED
; TO SELECTIVELY SET AND/OR CLEAR COMBINATIONS OF THE DEBUG/TRACEBACK FLAGS
; SPECIFIED IN THE ENABLE/DISABLE OPTIONS TABLE ABOVE.  THE CORRESPONDING
; BITS IN MAC$GL_ENLISF ARE ALSO SET/CLEARED AS REQUIRED.
;

	INSYMP	=	0

	$MAC_INSERT_SYX	ALL,		3	;ENABLE BOTH DBG AND TBK
	$MAC_INSERT_SYX	TRACEBACK,	2	;ENABLE TBK DISABLE DBG
	$MAC_INSERT_SYX	SYMBOLS,	1	;ENABLE DBG DISABLE TBK
	$MAC_INSERT_SYX	NONE,		0,-	;DISABLE BOTH DBG AND TBK
			DBG$G_LONGNAMES

;
; NAMES FOR LOCAL SYMBOL BLOCK OPTION TO THE .PSECT_SAVE DIRECTIVE
;
	INSYMP	=	0

	$MAC_INSERT_SYX	LSB,0		;ALLOW "LSB"
	$MAC_INSERT_SYX	LOCAL_BLOCK,0,-	; or "LOCAL_BLOCK"
			MAC$G_LSBNAM

	.SBTTL	SYMBOLS FOR .DEFAULT DIRECTIVE

;
; THE .DEFAULT DIRECTIVE TAKES AN ARGUMENT DESCRIBING WHAT IS
; BEING DEFAULTED.
;
	INSYMP	=	0

	$MAC_INSERT_SYX	DISPLACEMENT,0,-	; PC-displacement
			MAC$DFLT_LIST

;
; THE DISPLACEMENT CAN BE 'BYTE', 'WORD', OR 'LONG'
; THE VALUE IS THE INDEX (1-3) INTO A TABLE.
;
	INSYMP	=	0
	$MAC_INSERT_SYX	LONG,	3		;LONGWORD--4 BYTES
	$MAC_INSERT_SYX	WORD,	2		;WORD--2 BYTES
	$MAC_INSERT_SYX	BYTE,	1,MAC$DSPL_ARGS	;BYTE--1 BYTE

	.SBTTL	OPCODE DEFINITIONS

;
;
;		OPCODE DEFINITIONS
;
;
;
;THE FOLLOWING MACRO IS USED TO DEFINE THE STAR OPCODE SET.  THE
;CALLING FORMAT IS:
;
;	OPDEF	NAME,OPCODE,<ARG1,ARG2,....>
;
;WHERE 'NAME' IS THE NAME OF THE MACHINE INSTRUCTION, 'OPCODE' IS
;THE VALUE OF THE OPCODE (POSSIBLY 2 BYTES), AND 'ARG(N)'
;ARE THE N'TH OPERAND DESCRIPTORS.  'ARG(N)' CONSISTS OF ONE BYTE WITH
;THE LOWER 4 BITS CONTAINING THE WIDTH (IN BYTES) OF THE OPERAND, AND THE
;UPPER 4 BYTS CONTAINING FLAGS DESCRIBING THE OPERAND TYPE.;
;

	.MACRO	OPDEF	NME,CODE,ARGS	;NAME, OPCODE, <MODE1,ARG1,...>

	$COUNT = 0			;FIRST COUNT THE OPERANDS
	.IRP	X,<ARGS>
	$COUNT = $COUNT + 1
	.ENDM
	SYM	NME,DOPCODE,CODE,\$COUNT

	.IRP	X,<ARGS>		;FILL IN OPERAND DESCRIPTORS
	.WORD X
	.ENDR
	.ENDM	OPDEF

;
; TABLE OF ILLEGAL ADDRESSING MODES
; A BIT IS SET FOR EACH ILLEGAL MODE FOR EACH OPERAND ACCESS TYPE
;
	.MACRO	ILL_MOD	ARG1
	Z=0
	.IRP	DARG,<ARG1>
	.IF NB	DARG
	Z=Z+<1@<ADM$_'DARG>>
	.ENDC
	.ENDR
	.WORD	Z
	.ENDM


	.PSECT	MAC$PRMSYMTAB,GBL,NOEXE,NOWRT,LONG

MAC$AW_ILLMODTB::
	ILL_MOD	<LITERAL,REGISTER>		;ADDRESS
	.WORD	0				;READ
	ILL_MOD	<LITERAL,IMMEDIATE>		;MODIFY
	ILL_MOD	<LITERAL,IMMEDIATE>		;WRITE
	ILL_MOD	<LITERAL>			;FIELD
	ILL_MOD	<LITERAL,IMMEDIATE,ABSOLUTE,PIC,- ;BRANCH BYTE
		INDEX,REGISTER,RRIND,REGAUTODEC,-
		REGAUTOINC,DFRAUTOINC,DFBYTEDISP,-
		DFWORDDISP,DFLONGDISP>
	ILL_MOD	<LITERAL,IMMEDIATE,ABSOLUTE,PIC,- ;BRANCH WORD
		INDEX,REGISTER,RRIND,REGAUTODEC,-
		REGAUTOINC,DFRAUTOINC,DFBYTEDISP,-
		DFWORDDISP,DFLONGDISP>

;++
;	NOTE:	ALL OPCODE VALUES ARE IN HEXADECIMAL
;--

BB==OPD$M_BB			;DEFINE BRANCH BYTE
BW==OPD$M_BW			;DEFINE BRANCH WORD

OPDEF	HALT	<<<0>>>
OPDEF	NOP	<<<1>>>
OPDEF	REI	<<<2>>>
OPDEF	BPT	<<<3>>>
OPDEF	RET	<<<4>>>
OPDEF	RSB	<<<5>>>
OPDEF	LDPCTX	<<<6>>>
OPDEF	SVPCTX	<<<7>>>

OPDEF	CVTPS	<<<^X8>>>	<RW	AB	RW	AB>
OPDEF	CVTSP	<<<^X9>>>	<RW	AB	RW	AB>
OPDEF	INDEX	<<<^XA>>>	<RL	RL	RL	RL	RL	WL>
OPDEF	CRC	<<<^XB>>>	<AB	RL	RW	AB>
OPDEF	PROBER	<<<^XC>>>	<RB	RW	AB>
OPDEF	PROBEW	<<<^XD>>>	<RB	RW	AB>
OPDEF	INSQUE	<<<^XE>>>	<AB	AB>
OPDEF	REMQUE	<<<^XF>>>	<AB	WL>

OPDEF	BSBB	<<<^X10>>>	BB
OPDEF	BSB	<<<^X10>>>	BB
OPDEF	BRB	<<<^X11>>>	BB
OPDEF	BNEQ	<<<^X12>>>	BB
OPDEF	BNEQU	<<<^X12>>>	BB
OPDEF	BEQL	<<<^X13>>>	BB
OPDEF	BEQLU	<<<^X13>>>	BB
OPDEF	BGTR	<<<^X14>>>	BB
OPDEF	BLEQ	<<<^X15>>>	BB
OPDEF	JSB	<<<^X16>>>	AB
OPDEF	JMP	<<<^X17>>>	AB

OPDEF	BGEQ	<<<^X18>>>	BB
OPDEF	BLSS	<<<^X19>>>	BB
OPDEF	BGTRU	<<<^X1A>>>	BB
OPDEF	BLEQU	<<<^X1B>>>	BB
OPDEF	BVC	<<<^X1C>>>	BB
OPDEF	BVS	<<<^X1D>>>	BB
OPDEF	BGEQU	<<<^X1E>>>	BB
OPDEF	BCC	<<<^X1E>>>	BB
OPDEF	BLSSU	<<<^X1F>>>	BB
OPDEF	BCS	<<<^X1F>>>	BB

OPDEF	ADDP4	<<<^X20>>>	<RW	AB	RW	AB>
OPDEF	ADDP	<<<^X20>>>	<RW	AB	RW	AB>
OPDEF	ADDP6	<<<^X21>>>	<RW	AB	RW	AB	RW	AB>
OPDEF	SUBP4	<<<^X22>>>	<RW	AB	RW	AB>
OPDEF	SUBP	<<<^X22>>>	<RW	AB	RW	AB>
OPDEF	SUBP6	<<<^X23>>>	<RW	AB	RW	AB	RW	AB>
OPDEF	CVTPT	<<<^X24>>>	<RW	AB	AB	RW	AB>
OPDEF	MULP	<<<^X25>>>	<RW	AB	RW	AB	RW	AB>
OPDEF	CVTTP	<<<^X26>>>	<RW	AB	AB	RW	AB>
OPDEF	DIVP	<<<^X27>>>	<RW	AB	RW	AB	RW	AB>

OPDEF	MOVC3	<<<^X28>>>	<RW	AB	AB>
OPDEF	MOVC	<<<^X28>>>	<RW	AB	AB>
OPDEF	CMPC3	<<<^X29>>>	<RW	AB	AB>
OPDEF	CMPC	<<<^X29>>>	<RW	AB	AB>
OPDEF	SCANC	<<<^X2A>>>	<RW	AB	AB	RB>
OPDEF	SPANC	<<<^X2B>>>	<RW	AB	AB	RB>
OPDEF	MOVC5	<<<^X2C>>>	<RW	AB	RB	RW	AB>
OPDEF	CMPC5	<<<^X2D>>>	<RW	AB	RB	RW	AB>
OPDEF	MOVTC	<<<^X2E>>>	<RW	AB	RB	AB	RW	AB>
OPDEF	MOVTUC	<<<^X2F>>>	<RW	AB	RB	AB	RW	AB>

OPDEF	BSBW	<<<^X30>>>	BW
OPDEF	BRW	<<<^X31>>>	BW
;;OPDEF	BR	<<<^X31>>>	BW
OPDEF	CVTWL	<<<^X32>>>	<RW	WL>
OPDEF	CVTWB	<<<^X33>>>	<RW	WB>
OPDEF	MOVP	<<<^X34>>>	<RW	AB	AB>
OPDEF	CMPP3	<<<^X35>>>	<RW	AB	AB>
OPDEF	CMPP	<<<^X35>>>	<RW	AB	AB>
OPDEF	CVTPL	<<<^X36>>>	<RW	AB	WL>
OPDEF	CMPP4	<<<^X37>>>	<RW	AB	RW	AB>

OPDEF	EDITPC	<<<^X38>>>	<RW	AB	AB	AB>
OPDEF	MATCHC	<<<^X39>>>	<RW	AB	RW	AB>
OPDEF	LOCC	<<<^X3A>>>	<RB	RW	AB>
OPDEF	SKPC	<<<^X3B>>>	<RB	RW	AB>
OPDEF	MOVZWL	<<<^X3C>>>	<RW	WL>
OPDEF	ACBW	<<<^X3D>>>	<RW	RW	MW	BW>
OPDEF	MOVAW	<<<^X3E>>>	<AW	WL>
OPDEF	PUSHAW	<<<^X3F>>>	AW


OPDEF	ADDF2	<<<^X40>>>	<RF	MF>
OPDEF	ADDF	<<<^X40>>>	<RF	MF>
OPDEF	ADDF3	<<<^X41>>>	<RF	RF	WF>
OPDEF	SUBF2	<<<^X42>>>	<RF	MF>
OPDEF	SUBF	<<<^X42>>>	<RF	MF>
OPDEF	SUBF3	<<<^X43>>>	<RF	RF	WF>
OPDEF	MULF2	<<<^X44>>>	<RF	MF>
OPDEF	MULF	<<<^X44>>>	<RF	MF>
OPDEF	MULF3	<<<^X45>>>	<RF	RF	WF>
OPDEF	DIVF2	<<<^X46>>>	<RF	MF>
OPDEF	DIVF	<<<^X46>>>	<RF	MF>
OPDEF	DIVF3	<<<^X47>>>	<RF	RF	WF>

OPDEF	CVTFB	<<<^X48>>>	<RF	WB>
OPDEF	CVTFW	<<<^X49>>>	<RF	WW>
OPDEF	CVTFL	<<<^X4A>>>	<RF	WL>
OPDEF	CVTRFL	<<<^X4B>>>	<RF	WL>
OPDEF	CVTBF	<<<^X4C>>>	<RB	WF>
OPDEF	CVTWF	<<<^X4D>>>	<RW	WF>
OPDEF	CVTLF	<<<^X4E>>>	<RL	WF>
OPDEF	ACBF	<<<^X4F>>>	<RF	RF	MF	BW>

OPDEF	MOVF	<<<^X50>>>	<RF	WF>
OPDEF	CMPF	<<<^X51>>>	<RF	RF>
OPDEF	MNEGF	<<<^X52>>>	<RF	WF>
OPDEF	TSTF	<<<^X53>>>	RF
OPDEF	EMODF	<<<^X54>>>	<RF	RB	RF	WL	WF>
OPDEF	POLYF	<<<^X55>>>	<RF	RW	AB>
OPDEF	CVTFD	<<<^X56>>>	<RF	WD>
;	RESERVED 57

OPDEF	ADAWI	<<<^X58>>>	<RW	MW>
;	RESERVED 59
;	RESERVED 5A
;	RESERVED 5B
OPDEF	INSQHI	<<<^X5C>>>	<AB	AQ>
OPDEF	INSQTI	<<<^X5D>>>	<AB	AQ>
OPDEF	REMQHI	<<<^X5E>>>	<AQ	WL>
OPDEF	REMQTI	<<<^X5F>>>	<AQ	WL>

OPDEF	ADDD2	<<<^X60>>>	<RD	MD>
OPDEF	ADDD	<<<^X60>>>	<RD	MD>
OPDEF	ADDD3	<<<^X61>>>	<RD	RD	WD>
OPDEF	SUBD2	<<<^X62>>>	<RD	MD>
OPDEF	SUBD	<<<^X62>>>	<RD	MD>
OPDEF	SUBD3	<<<^X63>>>	<RD	RD	WD>
OPDEF	MULD2	<<<^X64>>>	<RD	MD>
OPDEF	MULD	<<<^X64>>>	<RD	MD>
OPDEF	MULD3	<<<^X65>>>	<RD	RD	WD>
OPDEF	DIVD2	<<<^X66>>>	<RD	MD>
OPDEF	DIVD	<<<^X66>>>	<RD	MD>
OPDEF	DIVD3	<<<^X67>>>	<RD	RD	WD>

OPDEF	CVTDB	<<<^X68>>>	<RD	WB>
OPDEF	CVTDW	<<<^X69>>>	<RD	WW>
OPDEF	CVTDL	<<<^X6A>>>	<RD	WL>
OPDEF	CVTRDL	<<<^X6B>>>	<RD	WL>
OPDEF	CVTBD	<<<^X6C>>>	<RB	WD>
OPDEF	CVTWD	<<<^X6D>>>	<RW	WD>
OPDEF	CVTLD	<<<^X6E>>>	<RL	WD>
OPDEF	ACBD	<<<^X6F>>>	<RD	RD	MD	BW>

OPDEF	MOVD	<<<^X70>>>	<RD	WD>
OPDEF	CMPD	<<<^X71>>>	<RD	RD>
OPDEF	MNEGD	<<<^X72>>>	<RD	WD>
OPDEF	TSTD	<<<^X73>>>	RD
OPDEF	EMODD	<<<^X74>>>	<RD	RB	RD	WL	WD>
OPDEF	POLYD	<<<^X75>>>	<RD	RW	AB>
OPDEF	CVTDF	<<<^X76>>>	<RD	WF>
;	RESERVED 77

OPDEF	ASHL	<<<^X78>>>	<RB	RL	WL>
OPDEF	ASHQ	<<<^X79>>>	<RB	RQ	WQ>
OPDEF	EMUL	<<<^X7A>>>	<RL	RL	RL	WQ>
OPDEF	EDIV	<<<^X7B>>>	<RL	RQ	WL	WL>
OPDEF	CLRQ	<<<^X7C>>>	WQ
OPDEF	CLRD	<<<^X7C>>>	WD
OPDEF	CLRG	<<<^X7C>>>	WG
OPDEF	MOVQ	<<<^X7D>>>	<RQ	WQ>
OPDEF	MOVAQ	<<<^X7E>>>	<AQ	WL>
OPDEF	MOVAD	<<<^X7E>>>	<AD	WL>
OPDEF	MOVAG	<<<^X7E>>>	<AG	WL>
OPDEF	PUSHAQ	<<<^X7F>>>	AQ
OPDEF	PUSHAD	<<<^X7F>>>	AD
OPDEF	PUSHAG	<<<^X7F>>>	AG

OPDEF	ADDB2	<<<^X80>>>	<RB	MB>
OPDEF	ADDB	<<<^X80>>>	<RB	MB>
OPDEF	ADDB3	<<<^X81>>>	<RB	RB	WB>
OPDEF	SUBB2	<<<^X82>>>	<RB	MB>
OPDEF	SUBB	<<<^X82>>>	<RB	MB>
OPDEF	SUBB3	<<<^X83>>>	<RB	RB	WB>
OPDEF	MULB2	<<<^X84>>>	<RB	MB>
OPDEF	MULB	<<<^X84>>>	<RB	MB>
OPDEF	MULB3	<<<^X85>>>	<RB	RB	WB>
OPDEF	DIVB2	<<<^X86>>>	<RB	MB>
OPDEF	DIVB	<<<^X86>>>	<RB	MB>
OPDEF	DIVB3	<<<^X87>>>	<RB	RB	WB>

OPDEF	BISB2	<<<^X88>>>	<RB	MB>
OPDEF	BISB	<<<^X88>>>	<RB	MB>
OPDEF	BISB3	<<<^X89>>>	<RB	RB	WB>
OPDEF	BICB2	<<<^X8A>>>	<RB	MB>
OPDEF	BICB	<<<^X8A>>>	<RB	MB>
OPDEF	BICB3	<<<^X8B>>>	<RB	RB	WB>
OPDEF	XORB2	<<<^X8C>>>	<RB	MB>
OPDEF	XORB	<<<^X8C>>>	<RB	MB>
OPDEF	XORB3	<<<^X8D>>>	<RB	RB	WB>
OPDEF	MNEGB	<<<^X8E>>>	<RB	WB>
OPDEF	CASEB	<<<^X8F>>>	<RB	RB	RB>

OPDEF	MOVB	<<<^X90>>>	<RB	WB>
OPDEF	CMPB	<<<^X91>>>	<RB	RB>
OPDEF	MCOMB	<<<^X92>>>	<RB	WB>
OPDEF	BITB	<<<^X93>>>	<RB	RB>
OPDEF	CLRB	<<<^X94>>>	WB
OPDEF	TSTB	<<<^X95>>>	RB
OPDEF	INCB	<<<^X96>>>	MB
OPDEF	DECB	<<<^X97>>>	MB

OPDEF	CVTBL	<<<^X98>>>	<RB	WL>
OPDEF	CVTBW	<<<^X99>>>	<RB	WW>
OPDEF	MOVZBL	<<<^X9A>>>	<RB	WL>
OPDEF	MOVZBW	<<<^X9B>>>	<RB	WW>
OPDEF	ROTL	<<<^X9C>>>	<RB	RL	RL>
OPDEF	ACBB	<<<^X9D>>>	<RB	RB	MB	BW>
OPDEF	MOVAB	<<<^X9E>>>	<AB	WL>
OPDEF	PUSHAB	<<<^X9F>>>	AB

OPDEF	ADDW2	<<<^XA0>>>	<RW	MW>
OPDEF	ADDW	<<<^XA0>>>	<RW	MW>
OPDEF	ADDW3	<<<^XA1>>>	<RW	RW	WW>
OPDEF	SUBW2	<<<^XA2>>>	<RW	MW>
OPDEF	SUBW	<<<^XA2>>>	<RW	MW>
OPDEF	SUBW3	<<<^XA3>>>	<RW	RW	WW>
OPDEF	MULW2	<<<^XA4>>>	<RW	MW>
OPDEF	MULW	<<<^XA4>>>	<RW	MW>
OPDEF	MULW3	<<<^XA5>>>	<RW	RW	WW>
OPDEF	DIVW2	<<<^XA6>>>	<RW	MW>
OPDEF	DIVW	<<<^XA6>>>	<RW	MW>
OPDEF	DIVW3	<<<^XA7>>>	<RW	RW	WW>

OPDEF	BISW2	<<<^XA8>>>	<RW	MW>
OPDEF	BISW	<<<^XA8>>>	<RW	MW>
OPDEF	BISW3	<<<^XA9>>>	<RW	RW	WW>
OPDEF	BICW2	<<<^XAA>>>	<RW	MW>
OPDEF	BICW	<<<^XAA>>>	<RW	MW>
OPDEF	BICW3	<<<^XAB>>>	<RW	RW	WW>
OPDEF	XORW2	<<<^XAC>>>	<RW	MW>
OPDEF	XORW	<<<^XAC>>>	<RW	MW>
OPDEF	XORW3	<<<^XAD>>>	<RW	RW	WW>
OPDEF	MNEGW	<<<^XAE>>>	<RW	WW>
OPDEF	CASEW	<<<^XAF>>>	<RW	RW	RW>

OPDEF	MOVW	<<<^XB0>>>	<RW	WW>
OPDEF	CMPW	<<<^XB1>>>	<RW	RW>
OPDEF	MCOMW	<<<^XB2>>>	<RW	WW>
OPDEF	BITW	<<<^XB3>>>	<RW	RW>
OPDEF	CLRW	<<<^XB4>>>	WW
OPDEF	TSTW	<<<^XB5>>>	RW
OPDEF	INCW	<<<^XB6>>>	MW
OPDEF	DECW	<<<^XB7>>>	MW

OPDEF	BISPSW	<<<^XB8>>>	RW
OPDEF	BICPSW	<<<^XB9>>>	RW
OPDEF	POPR	<<<^XBA>>>	RW
OPDEF	PUSHR	<<<^XBB>>>	RW
OPDEF	CHMK	<<<^XBC>>>	RW
OPDEF	CHME	<<<^XBD>>>	RW
OPDEF	CHMS	<<<^XBE>>>	RW
OPDEF	CHMU	<<<^XBF>>>	RW

OPDEF	ADDL2	<<<^XC0>>>	<RL	ML>
OPDEF	ADDL	<<<^XC0>>>	<RL	ML>
OPDEF	ADDL3	<<<^XC1>>>	<RL	RL	WL>
OPDEF	SUBL2	<<<^XC2>>>	<RL	ML>
OPDEF	SUBL	<<<^XC2>>>	<RL	ML>
OPDEF	SUBL3	<<<^XC3>>>	<RL	RL	WL>
OPDEF	MULL2	<<<^XC4>>>	<RL	ML>
OPDEF	MULL	<<<^XC4>>>	<RL	ML>
OPDEF	MULL3	<<<^XC5>>>	<RL	RL	WL>
OPDEF	DIVL2	<<<^XC6>>>	<RL	ML>
OPDEF	DIVL	<<<^XC6>>>	<RL	ML>
OPDEF	DIVL3	<<<^XC7>>>	<RL	RL	WL>

OPDEF	BISL2	<<<^XC8>>>	<RL	ML>
OPDEF	BISL	<<<^XC8>>>	<RL	ML>
OPDEF	BISL3	<<<^XC9>>>	<RL	RL	WL>
OPDEF	BICL2	<<<^XCA>>>	<RL	ML>
OPDEF	BICL	<<<^XCA>>>	<RL	ML>
OPDEF	BICL3	<<<^XCB>>>	<RL	RL	WL>
OPDEF	XORL2	<<<^XCC>>>	<RL	ML>
OPDEF	XORL	<<<^XCC>>>	<RL	ML>
OPDEF	XORL3	<<<^XCD>>>	<RL	RL	WL>
OPDEF	MNEGL	<<<^XCE>>>	<RL	WL>
OPDEF	CASEL	<<<^XCF>>>	<RL	RL	RL>

OPDEF	MOVL	<<<^XD0>>>	<RL	WL>
OPDEF	CMPL	<<<^XD1>>>	<RL	RL>
OPDEF	MCOML	<<<^XD2>>>	<RL	WL>
OPDEF	BITL	<<<^XD3>>>	<RL	RL>
OPDEF	CLRL	<<<^XD4>>>	WL
OPDEF	CLRF	<<<^XD4>>>	WF
OPDEF	TSTL	<<<^XD5>>>	RL
OPDEF	INCL	<<<^XD6>>>	ML
OPDEF	DECL	<<<^XD7>>>	ML

OPDEF	ADWC	<<<^XD8>>>	<RL	ML>
OPDEF	SBWC	<<<^XD9>>>	<RL	ML>
OPDEF	MTPR	<<<^XDA>>>	<RL	RL>
OPDEF	MFPR	<<<^XDB>>>	<RL	WL>
OPDEF	MOVPSL	<<<^XDC>>>	WL
OPDEF	PUSHL	<<<^XDD>>>	RL
OPDEF	POPL	<<<^X8ED0>>>	WL
OPDEF	MOVAL	<<<^XDE>>>	<AL	WL>
OPDEF	MOVAF	<<<^XDE>>>	<AF	WL>
OPDEF	PUSHAL	<<<^XDF>>>	AL
OPDEF	PUSHAF	<<<^XDF>>>	AF

OPDEF	BBS	<<<^XE0>>>	<RL	VB	BB>
OPDEF	BBC	<<<^XE1>>>	<RL	VB	BB>
OPDEF	BBSS	<<<^XE2>>>	<RL	VB	BB>
OPDEF	BBCS	<<<^XE3>>>	<RL	VB	BB>
OPDEF	BBSC	<<<^XE4>>>	<RL	VB	BB>
OPDEF	BBCC	<<<^XE5>>>	<RL	VB	BB>
OPDEF	BBSSI	<<<^XE6>>>	<RL	VB	BB>
OPDEF	BBCCI	<<<^XE7>>>	<RL	VB	BB>

OPDEF	BLBS	<<<^XE8>>>	<RL	BB>
OPDEF	BLBC	<<<^XE9>>>	<RL	BB>
OPDEF	FFS	<<<^XEA>>>	<RL	RB	VB	WL>
OPDEF	FFC	<<<^XEB>>>	<RL	RB	VB	WL>
OPDEF	CMPV	<<<^XEC>>>	<RL	RB	VB	RL>
OPDEF	CMPZV	<<<^XED>>>	<RL	RB	VB	RL>
OPDEF	EXTV	<<<^XEE>>>	<RL	RB	VB	WL>
OPDEF	EXTZV	<<<^XEF>>>	<RL	RB	VB	WL>

OPDEF	INSV	<<<^XF0>>>	<RL	RL	RB	VB>
OPDEF	ACBL	<<<^XF1>>>	<RL	RL	ML	BW>
OPDEF	AOBLSS	<<<^XF2>>>	<RL	ML	BB>
OPDEF	AOBLEQ	<<<^XF3>>>	<RL	ML	BB>
OPDEF	SOBGEQ	<<<^XF4>>>	<ML	BB>
OPDEF	SOBGTR	<<<^XF5>>>	<ML	BB>
OPDEF	CVTLB	<<<^XF6>>>	<RL	WB>
OPDEF	CVTLW	<<<^XF7>>>	<RL	WW>

OPDEF	ASHP	<<<^XF8>>>	<RB	RW	AB	RB	RW	AB>
OPDEF	CVTLP	<<<^XF9>>>	<RL	RW	AB>
OPDEF	CALLG	<<<^XFA>>>	<AB	AB>
OPDEF	CALLS	<<<^XFB>>>	<RL	AB>
OPDEF	XFC	<<<^XFC>>>
OPDEF	ESCD	<<<^XFD>>>	; RESERVED
OPDEF	ESCE	<<<^XFE>>>	; RESERVED
OPDEF	ESCF	<<<^XFF>>>	; RESERVED
OPDEF	BUGW	<<<^XFEFF>>>
OPDEF	BUGL	<<<^XFDFF>>>
OPDEF	CVTDH	<<<^X32FD>>>	<RD	WH>
OPDEF	CVTGF	<<<^X33FD>>>	<RG	WF>
OPDEF	ADDG2	<<<^X40FD>>>	<RG	MG>
OPDEF	ADDG3	<<<^X41FD>>>	<RG	RG	WG>
OPDEF	SUBG2	<<<^X42FD>>>	<RG	MG>
OPDEF	SUBG3	<<<^X43FD>>>	<RG	RG	MG>
OPDEF	MULG2	<<<^X44FD>>>	<RG	MG>
OPDEF	MULG3	<<<^X45FD>>>	<RG	RG	WG>
OPDEF	DIVG2	<<<^X46FD>>>	<RG	MG>
OPDEF	DIVG3	<<<^X47FD>>>	<RG	RG	WG>
OPDEF	ADDH2	<<<^X60FD>>>	<RH	MH>
OPDEF	ADDH3	<<<^X61FD>>>	<RH	RH	WH>
OPDEF	SUBH2	<<<^X62FD>>>	<RH	MH>
OPDEF	SUBH3	<<<^X63FD>>>	<RH	RH	WH>
OPDEF	MULH2	<<<^X64FD>>>	<RH	MH>
OPDEF	MULH3	<<<^X65FD>>>	<RH	RH	WH>
OPDEF	DIVH2	<<<^X66FD>>>	<RH	MH>
OPDEF	DIVH3	<<<^X67FD>>>	<RH	RH	WH>
OPDEF	CVTGB	<<<^X48FD>>>	<RG	WB>
OPDEF	CVTGW	<<<^X49FD>>>	<RG	WW>
OPDEF	CVTGL	<<<^X4AFD>>>	<RG	WL>
OPDEF	CVTRGL	<<<^X4BFD>>>	<RG	WL>
OPDEF	CVTBG	<<<^X4CFD>>>	<RB	WG>
OPDEF	CVTWG	<<<^X4DFD>>>	<RW	WG>
OPDEF	CVTLG	<<<^X4EFD>>>	<RL	WG>
OPDEF	ACBG	<<<^X4FFD>>>	<RG	RG	MG	BW>
OPDEF	CVTHB	<<<^X68FD>>>	<RH	WB>
OPDEF	CVTHW	<<<^X69FD>>>	<RH	WW>
OPDEF	CVTHL	<<<^X6AFD>>>	<RH	WL>
OPDEF	CVTRHL	<<<^X6BFD>>>	<RH	WL>
OPDEF	CVTBH	<<<^X6CFD>>>	<RB	WH>
OPDEF	CVTWH	<<<^X6DFD>>>	<RW	WH>
OPDEF	CVTLH	<<<^X6EFD>>>	<RL	WH>
OPDEF	ACBH	<<<^X6FFD>>>	<RH	RH	MH	BW>
OPDEF	MOVG	<<<^X50FD>>>	<RG	WG>
OPDEF	CMPG	<<<^X51FD>>>	<RG	RG>
OPDEF	MNEGG	<<<^X52FD>>>	<RG	WG>
OPDEF	TSTG	<<<^X53FD>>>	RG
OPDEF	EMODG	<<<^X54FD>>>	<RG	RW	RG	WL	WG>
OPDEF	POLYG	<<<^X55FD>>>	<RG	RW	AB>
OPDEF	CVTGH	<<<^X56FD>>>	<RG	WH>
OPDEF	MOVH	<<<^X70FD>>>	<RH	WH>
OPDEF	CMPH	<<<^X71FD>>>	<RH	RH>
OPDEF	MNEGH	<<<^X72FD>>>	<RH	WH>
OPDEF	TSTH	<<<^X73FD>>>	RH
OPDEF	EMODH	<<<^X74FD>>>	<RH	RW	RH	WL	WH>
OPDEF	POLYH	<<<^X75FD>>>	<RH	RW	AB>
OPDEF	CVTHG	<<<^X76FD>>>	<RH	WG>
OPDEF	CLRH	<<<^X7CFD>>>	WH
OPDEF	CLRO	<<<^X7CFD>>>	WO
OPDEF	MOVO	<<<^X7DFD>>>	<RO	WO>
OPDEF	MOVAH	<<<^X7EFD>>>	<AH	WL>
OPDEF	MOVAO	<<<^X7EFD>>>	<AO	WL>
OPDEF	PUSHAH	<<<^X7FFD>>>	AH
OPDEF	PUSHAO	<<<^X7FFD>>>	AO
OPDEF	CVTFH	<<<^X98FD>>>	<RF	WH>
OPDEF	CVTFG	<<<^X99FD>>>	<RF	WG>
OPDEF	CVTHF	<<<^XF6FD>>>	<RH	WF>
OPDEF	CVTHD	<<<^XF7FD>>>	<RH	WD>

.SBTTL	DIRECTIVES
;
; LISTED BELOW ARE THE DIRECTIVES FOR THE MARS LANGUAGE.
;
;

SYM	.ADDRESS, KADDRESS
SYM	.ALIGN,	KALIGN
SYM	.ASCIC,	KASCIC
SYM	.ASCID, KASCID
SYM	.ASCII,	KASCII
SYM	.ASCIZ,	KASCIZ
SYM	.BLKA,	KBLKA
SYM	.BLKB,	KBLKB
SYM	.BLKD,	KBLKD
SYM	.BLKF,	KBLKF
SYM	.BLKG,	KBLKG
SYM	.BLKH,	KBLKH
SYM	.BLKL,	KBLKL
SYM	.BLKO,	KBLKO
SYM	.BLKQ,	KBLKQ
SYM	.BLKW,	KBLKW
SYM	.BYTE,	KBYTE
SYM	.CROSS, KCROSS
SYM	.DEBUG,	KDEBUG
SYM	.DEFAULT, KDFLT
SYM	.DISABLE, KDSABL
SYM	.DOUBLE, KDOUBLE
SYM	.DSABL,	KDSABL
SYM	.D_FLOATING, KDOUBLE
SYM	.ENABL,	KENABL
SYM	.ENABLE, KENABL
SYM	.END,	KEND
SYM	.ENDC,	KENDC
SYM	.ENDM,	KENDM
SYM	.ENDR,	KENDR
SYM	.ENTRY,	KENTRY
SYM	.ERROR,	KERROR
SYM	.EVEN,	KEVEN
SYM	.EXTERNAL, KEXTRN
SYM	.EXTRN,	KEXTRN
SYM	.FLOAT,	KFLOAT
;SYM	.FIELD,	KFIELD
SYM	.F_FLOATING, KFLOAT
SYM	.GLOBAL, KGLOBL
SYM	.GLOBL,	KGLOBL
SYM	.G_FLOATING, KGFLOAT
SYM	.H_FLOATING, KHFLOAT
SYM	.IDENT,	KIDENT
SYM	.IF,	KIF
SYM	.IFF,	KIFF
SYM	.IF_FALSE, KIFF
SYM	.IFT,	KIFT
SYM	.IF_TRUE, KIFT
SYM	.IFTF,	KIFTF
SYM	.IF_TRUE_FALSE, KIFTF
SYM	.IIF,	KIIF
SYM	.IRPC,	KIRPC
SYM	.IRP,	KIRP
SYM	.LIBRARY, KLIBRARY
SYM	.LIST,	KLIST
SYM	.LONG,	KLONG
SYM	.MACRO,	KMACRO
SYM	.MASK,  KVECTOR
SYM	.MDELETE, KMDELETE
SYM	.MCALL,	KMCALL
SYM	.MEXIT,	KMEXIT
SYM	.NARG,	KNARG
SYM	.NCHR,	KNCHR
SYM	.NLIST,	KNLIST
SYM	.NOCROSS, KNCROS
SYM	.NOSHOW, KNLIST
SYM	.NTYPE,	KNTYPE
SYM	.OCTA,	KOCTA
SYM	.ODD,	KODD
SYM	.OPDEF,	KOPDEF
SYM	.PACKED, KPACKED
SYM	.PAGE,	KPAGE
SYM	.PRINT,	KPRINT
SYM	.PSECT,	KPSECT
SYM	.QUAD,	KQUAD
SYM	.REF1,	KREF1
SYM	.REF2,	KREF2
SYM	.REF4,	KREF4
SYM	.REF8,	KREF8
SYM	.REF16,	KREF16
SYM	.REPEAT, KREPT
SYM	.REPT,	KREPT
SYM	.RESTORE, KRESTORE
SYM	.RESTORE_PSECT, KRESTORE
SYM	.SAVE,	KSAVE
SYM	.SAVE_PSECT, KSAVE
SYM	.SBTTL,	KSBTTL
SYM	.SHOW, KLIST
SYM	.SIGNED_BYTE, KSGNB
SYM	.SIGNED_WORD, KSGNW
SYM	.SUBTITLE, KSBTTL
SYM	.TITLE,	KTITLE
SYM	.TRANSFER, KXFER
SYM	.WARN,	KWARN
SYM	.WEAK,	KWEAK
SYM	.WORD,	KWORD
SYM	.VECTOR, KVECTOR

.END
