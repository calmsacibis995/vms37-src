	.TITLE	MAC$ACTONE ONCE-ONLY ACTION ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX MACRO ASSEMBLER OBJECT LIBRARY
;
; ABSTRACT:
;
; The VAX-11 MACRO assembler translates MACRO-32 source code into object
; modules for input to the VAX-11 LINKER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR: Benn Schreiber, CREATION DATE: 31-AUG-78
;
; MODIFIED BY:
;
;	V01.15	RN0029		R. Newland	10-Mar-1980
;		Align table of contents so that subtitles containing
;		tabs remain correctly aligned.
;
;	V01.14	RN0023		R. Newland	 2-Nov-1979
;		New message codes to get error message from system
;		message file.
;
;	V01.13	RN0022		R. Newland	31-Oct-1979
;		Translate SYS$LP_LINES to set lines/page
;
;	V01.12	RN0019		R. Newland	25-Oct-1979
;		Improve error pointer positioning
;
;	V01.11	RN0005		R. Newland	27-Aug-1979
;		Remove .ALIGN LONG statments
;
;	V01.12	RN0009		R. Newland	31-Aug-1979
;		Allow maximum size IDENT
;
;	V01.10	;RN0002		R. Newland	01-Feb-1979
;		Changes for Source Update Merge, .SBTTL line number
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$RABDEF					;DEFINE RAB OFFSETS
	$MAC_ADRMODDEF				;DEFINE ADDRESSING MODES
	$MAC_CTLFLGDEF				;DEFINE CONTROL FLAGS
	$MAC_INTCODDEF				;DEFINE INT. FILE CODES
	$MAC_GENVALDEF				;DEFINE COMMON SYMBOLS
	$MAC_SYMBLKDEF				;DEFINE SYMBOL BLOCK OFFSETS
	$MACMSGDEF			; Define message codes
	DEFSUMCBL			; Define SUM control block symbols


	.PSECT	MAC$RO_CODE_P1,NOWRT,GBL,LONG

	.SBTTL	ERRORS FOUND BY THE GRAMMAR/PARSER

ERRENT::				;ILLEGAL FORMAT FOR .ENTRY
	$MAC_ERR BADENTRY		; Get message code
	BRB	ERR_0

ERROPD::				;ILLEGAL FORMAT FOR .OPDEF
	$MAC_ERR ILLOPDEF		; Get message code
	BRB	ERR_0

BDEND1::				;.ENDM DIRECTIVE SEEN
					;OUTSIDE A MACRO DEFINITION
BDEND2::				;.ENDR DIRECTIVE SEEN
					;OUTSIDE REPEAT BODY
	$MAC_ERR NOTINMACRO		; Get message code
	BRB	ERR_0			;ISSUE ERROR, SET CR AND RETURN

ERRMRS::				;MARS_TEXT = ERR01
	$INTOUT_X INT$_CHKL		;ALIGN LISTING
	$MAC_ERR UNRECSTMT		; Get message code
	BSBW	MAC$ERRORPX		;ISSUE ERROR TO PASS 2
	BRB	ERR_1			;JOIN COMMON CODE

ERRDOL::				;STATEMENT = DIRECTIVE ERR02
	$MAC_ERR DIRSYNX		; Get message code
	BRB	ERR_0

ERRASN::				;ASSIGNMENT = ASSIGN_HEAD ERR02
	$MAC_ERR ASGNMNTSYN		; Get message code
	BRB	ERR_0

ERRMST::				;MACHINE_STAT = MACHINE_INST ERR03
	$MAC_ERR MCHINSTSYN		; Get message code
ERR_0:	BSBW	MAC$ERRORPX		; Report error to pass-2
ERR_1:	MOVZBL	#CR,R10			;FORCE READING OF NEW LINE
	RSB

ERRREF::				;OPERANDS = OPERANDS ERR04
					;REF = ERR06
	$MAC_ERR OPRNDSYNX		; Get message code
	BSBW	MAC$ERRORPX		; Issue error to pass-2
	BRW	W^MAC$SKP_OPR		;SKIP TO NEXT OPERAND FIELD

ERRIIF::				;IIF_STAT = IIF_HEAD ERR03
	$MAC_ERR MSGCMAIIF		; Get message code
	BRB	ERR_3			;

ERRDAR::				;DATA_LIST = DATA_ARGS ERR04
					;DATA_ARGS = DATA_LIST DSQOPN EXPR ERR04
	$MAC_ERR DATALSTSYN		; Get message code
	BRB	ERR_3

ERRADR::				;ADDR_LIST = ADDR_LIST ERR04
					;ADDR_STAT = ADDR_TYPE
	$MAC_ERR ADRLSTSYNX		; Get message code
	BRB	ERR_3

ERRCHA::				;CHAR_ARGS = CHAR_ARGS ERR06
	$MAC_ERR ILLASCARG		; Get message code
	BRB	ERR_3

ERRBLK::				;BLOCK_STAT = BLOCK_TYPE ERR03
	$MAC_ERR BLKDIRSYNX		; Get message code
ERR_3:	BSBW	MAC$ERRORPT		;ISSUE MESSAGE TO PASS 2
	RSB

ERREXP::				;EXPRESSION ERROR
	$MAC_ERR ILLEXPR		; Get message code
	BSBW	MAC$ERRORPT		;ISSUE ERROR TO PASS 2
	BRW	MAC$SKP_OPR		;SKIP TO NEXT OPERAND FIELD

ERRBRF::				;BASIC_REF = DOPN ERR01
					;BASIC_REF = DAT RRREG
	$MAC_ERR REGOPSYNX		; Get message code
	BSBW	MAC$ERRORPT		;ISSUE MESSAGE TO PASS 2
	MOVB	#ADM$_RRIND,W^MAC$GB_MODE ;SET MODE TO INDIRECT REGISTER
	CLRB	W^MAC$GB_REG		;USING REGISTER 'R0'
	$INC_PC				;COUNT ONE BYTE
	BRW	MAC$SKP_OPR		;SKIP TO CR OR COMMA AND RETURN

	.SBTTL	IDENT	PROCESS .IDENT STATEMENT

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED WHEN A .IDENT IS SCANNED.  THE IDENT
;	IS COPIED INTO THE BUFFER MAC$AB_IDENT.
;
;--

IDENT::
	MOVAB	W^MAC$AB_IDENT,R6	;POINT TO IDENT STORAGE
	CLRB	(R6)+			;CLEAR IN CASE NULL IDENT
	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#CR			;ARE WE AT END OF LINE?
	BEQL	40$			;IF EQL YES
	MOVB	R10,-(SP)		;NO--SAVE DELIMITER
	MOVZBL	#SYM$K_MAXLEN,R5	;SET MAX NUMBER OF CHARACTERS
;
; LOOP, COLLECTING IDENT. LOOK FOR END OF LINE OR MATCHING DELIMITER
;
10$:	BSBW	MAC$GETCHR		;GET NEXT CHARACTER
	CMPB	R10,(SP)		;FIND DELIMITER?
	BEQL	20$			;IF EQL YES
	CMPB	R10,#CR			;NO--END OF LINE?
	BEQL	20$			;IF EQL YES
	CMPB	R10,#^A/A/+^X20		;IS CHARACTER LOWER CASE?
	BLSSU	15$			;IF LSSU NO
	CMPB	R10,#^A/Z/+^X20		;MAYBE...
	BGTRU	15$			;IF GTRU NO
	BICB	#^X20,R10		;YES--MAKE UPPER CASE
15$:	MOVB	R10,(R6)+		;NO--STORE CHARACTER
	SOBGEQ	R5,10$			; Loop if there is room
	DECL	R5			;MAKE R5 NEGATIVE FOR IDENT TOO LONG
20$:	SUBL3	R5,#SYM$K_MAXLEN,R0	;FIGURE LENGTH OF IDENT
	MOVB	R0,W^MAC$AB_IDENT	;STORE AS FIRST BYTE OF IDENT
	CMPB	R10,(SP)+		;END WITH DELIMITER?
	BEQL	40$			;IF EQL YES
	$MAC_ERR UNTERMARG		; No--assume unterminated arg
	TSTL	R5			;BUT CHECK TO SEE
	BGEQ	30$			;IF GEQ UNTERM. ARG
	$MAC_ERR ILLSYMLEN		; else IDENT is too long
30$:	BSBW	MAC$ERRORPT		;REPORT ERROR
40$:	MOVZBL	#CR,R10			;FORCE READING OF NEW LINE
	RSB

	.SBTTL	TITLE	PROCESS .TITLE STATEMENT

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED WHEN A .TITLE DIRECTIVE IS SCANNED.
;	THE REST OF THE SOURCE LINE IS READ AND THE FIRST WORD IS
;	STORED AS THE PROGRAM TITLE, AND THE REST IS STORED AS THE
;	TITLE SUB-COMMENT IN THE LISTING HEADER BUFFER.
;
;--

TITLE::
	BSBW	MAC$SYMSCNUP		;SCAN THE SYMBOL
	BLBC	R0,40$			;BRANCH IF NO TITLE SCANNED
	MOVAB	W^MAC$AB_TMPSYM,R6	;POINT TO TEMP SYMBOL NAME BLOCK
	MOVZBL	(R6),R5			;GET LENGTH OF SYMBOL
	INCL	R5			;COPY THE BYTE COUNT ALSO
	MOVC5	R5,(R6),#^A/ /,-	;COPY INTO BUFFER WITH BLANK PADDING
		#SYM$K_MAXLEN+1,W^MAC$AB_TITLE ;INTO TITLE BUFFER
	MOVZBL	(R6)+,R5		;GET TITLE LENGTH AGAIN
	MOVC5	R5,(R6),#^A/ /,#SYM$K_MAXLEN,- ;COPY INTO PAGE HEADER BUFFER
			W^MAC$AB_HD_TITLE
	BSBW	MAC$SKIPSP		;SKIP SPACES
	MOVAB	W^MAC$AB_HD_TSTRG,R6	;POINT TO WHERE TITLE SUBSTRING GOES
	MOVC5	#0,(SP),#^A/ /,-	;BLANK FILL THE TITLE BUFFER
			#LST$K_TITLE_SIZ,(R6) ;...
	ADDL3	W^MAC$GL_LINELN,#MAC$AB_LINEBF+1,R5 ;COMPUTE LENGTH OF SUBSTRING
	SUBL2	W^MAC$GL_LINEPT,R5	;...
	BLEQ	40$			;IF LEQ NO SUBSTRING
	CMPB	R5,#LST$K_TITLE_SIZ	;STRING TOO LONG?
	BLEQU	10$			;IF LEQ NO
	MOVZBL	#LST$K_TITLE_SIZ,R5	;YES--USE MAXIMUM SIZE
10$:	MOVL	R5,W^MAC$GL_TTX_SIZ	;SAVE SUBSTRING LENGTH
	SUBL3	#1,W^MAC$GL_LINEPT,R4	;POINT TO BEGINNING OF TITLE SUBSTRING
;
; COPY TITLE SUBSTRING INTO PAGE HEADER BUFFER
;
20$:	MOVB	(R4)+,(R6)		;COPY A BYTE
	CMPB	(R6)+,#TAB		;IS CHARACTER A TAB?
	BNEQ	30$			;IF NEQ NO
	MOVB	#^A/ /,-1(R6)		;YES--MAKE INTO A SPACE
30$:	SOBGTR	R5,20$			;DO WHOLE STRING
40$:	MOVZBL	#CR,R10			;FORCE READING OF NEW LINE
	RSB

	.SBTTL	SBTTL	PROCESS .SBTTL STATEMENT

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE PROCESSES THE .SBTTL STATEMENT.  THE SUBTITLE
;	LINE IS READ AND WRITTEN TO THE INTERMEDIATE FILE.  IF WE
;	ARE LISTING, THE SUBTITLE LINE IS OUTPUT TO THE LISTING FILE
;
;--

SBTTL::
	ADDL3	#MAC$AB_LINEBF+1,W^MAC$GL_LINELN,R6 ;FIGURE LENGTH OF SUBTITLE
	SUBL2	W^MAC$GL_LINEPT,R6	;...
	CMPB	R6,#LST$K_TITLE_SIZ	;IS SIZE OK?
	BLEQU	10$			;IF LEQU YES
	MOVZBL	#LST$K_TITLE_SIZ,R6	;NO--USE MAXIMUM
10$:	ADDL3	R6,R9,R0		;SEE IF THERE IS ENOUGH ROOM IN THE BUFFER
	ADDL2	#3,R0			;COUNT THE 2 COUNT BYTES AND ACTION BYTE
	CMPL	R0,W^MAC$GL_INTWRNPT	;ROOM IN THE BUFFER?
	BLEQU	20$			;IF LEQ YES
	BSBW	MAC$OUTFRAME		;NO--DUMP THE BUFFER
20$:	ADDL3	R6,#3,R0		;FIGURE TOTAL LENGTH OF FRAME
	BSBW	MAC$INTOUT_N		;SET TO STORE SBTTL IN BUFFER
	MOVB	#INT$_SBTTL,(R9)+	;STORE THE ACTION CODE
	MOVB	R6,(R9)+		;STORE LENGTH OF SBTTL STRING
	BGTR	40$			;IF GTR THERE IS A SUBTITLE STRING
30$:	BRW	100$			;ELSE WE ARE DONE NOW
40$:	SUBL3	#1,W^MAC$GL_LINEPT,R5	;POINT TO REAL START OF SBTTL STRING
	PUSHL	R5			;SAVE OVER MOVC
	PUSHL	R9			;SAVE POINTER INTO INTERMEDIATE BUFFER
	MOVC3	R6,(R5),(R9)		;COPY STRING TO INTERMEDIATE BUFFER
	MOVL	R3,R9			;UPDATE POINTER INTO INTERMEDIATE BUFFER
	POPL	R2			;GET POINTER TO START OF SUBTTL IN BUFFER
50$:	LOCC	#TAB,R6,(R2)		;FIND ANY TABS IN THE SUBTITLE IN INT. BUFFER
	BEQL	60$			;IF EQL NO MORE
	MOVB	#^A/ /,(R1)		;FOUND ONE--CHANGE TO SPACE
	BRB	50$			;LOOK FOR MORE
60$:	POPL	R5			;RESTORE POINTER TO SBTTL STRING
	MOVC3	R6,(R5),W^MAC$AB_LINEBF	;COPY FOR TABLE OF CONTENTS
	BBC	#FLG$V_LSTXST,(R11),30$	;BRANCH IF NOT DOING LISTINGS
	BBSS	#FLG$V_TOCFLG,(R11),70$	;SET TOC FLAG AND SEE IF WE NEED A HEADER
;
; OUTPUT TABLE OF CONTENTS HEADER
;
	MOVL	W^MAC$GL_LN_PAGE,W^MAC$GL_LINE_CNT ; Set # lines left on page
	MOVAB	W^MAC$LIST_RAB,R5	;POINT TO LISTING RAB
	MOVW	#MAC$K_HD_SIZE+1,RAB$W_RSZ(R5) ;SET THE RECORD SIZE
	MOVAB	W^MAC$AB_HD_NEWPG,RAB$L_RBF(R5) ;AND THE RECORD ADDRESS
	BSBW	SBT_PUT_LIN		;WRITE THE TITLE LINE
	MOVAB	W^MAC$AB_TOC_MSG,R0	;POINT TO TABLE OF CONTENTS MSG
	MOVZBW	(R0)+,RAB$W_RSZ(R5)	;SET THE RECORD SIZE
	MOVL	R0,RAB$L_RBF(R5)	;AND THE RECORD ADDRESS
	BSBW	SBT_PUT_LIN		;WRITE THE LINE
	CLRW	RAB$W_RSZ(R5)		;WRITE A BLANK LINE
	BSBW	SBT_PUT_LIN		;WRITE THE BLANK LINE
70$:	MOVAB	W^MAC$AB_LINEBF-24,R1	; Point into listing buffer
	MOVL	#^A/    /,(R1)+		; Store four spaces
	MOVB	#^A/(/,(R1)+		; and left parenthesis
	MOVL	W^MAC$GL_SRCPAG,R0	;GET THE SOURCE PAGE NUMBER
	BSBW	MAC$DEC_OUT_L2X		;OUTPUT THE PAGE NUMBER
	MOVW	#^A/) /,(R0)+		;STORE RIGHT PAREN-SPACE
80$:	MOVB	#^A/ /,(R0)+		;PAD WITH SPACES
	CMPW	R0,#MAC$AB_LINEBF	;DONE PADDING?
	BLSSU	80$			;LOOP FOR ALL
	SUBL3	#8,R0,R1		; Form pointer to line number
	MOVL	R1,W^MAC$GL_LIST_PTR	; Set up pointer
	MOVZWL	W^MAC$GW_LST_LINE,R0	; Get listing line number
	BSBW	MAC$DEC_OUT_R2L		;OUTPUT PAGE NUMBER
	BBC	#FLG$V_UPDFIL,(R11),90$	; Branch if file is not being updated
	BBC	#SUM_V_SRCUPD, -	; Branch if line is from source
		W^MAC$GT_SCB+SUM_B_FLAGS,90$
	MOVB	#^A/./,(R1)+		; Store period
	MOVZWL	W^MAC$GW_LST_INST,R0	; Get insert number
	BSBW	MAC$DEC_OUT_L2X		; Output the insert number
90$:
	ADDL2	#24,R6			; Count the line/page
	MOVAB	W^MAC$LIST_RAB,R5	;POINT TO LISTING RAB
	MOVL	R6,RAB$W_RSZ(R5)	;STORE RECORD SIZE
	MOVAB	W^MAC$AB_LINEBF-24,RAB$L_RBF(R5) ; and the record address
	BSBW	SBT_PUT_LIN		;WRITE THE TOC LINE
	DECL	W^MAC$GL_LINE_CNT	;ONE LESS LINE TO GO
	BNEQ	100$			;IF NEQ MORE ROOM ON PAGE
	BBCC	#FLG$V_TOCFLG,(R11),100$	;ELSE FLAG NEW HEADER NEEDED
100$:	MOVZBL	#CR,R10			;FORCE READING OF NEW LINE
	RSB

SBT_PUT_LIN:
	BBC	#FLG$V_LSTXST,(R11),10$	;BRANCH IF LISTING DISABLED
	$PUT	RAB=(R5),-		;WRITE LINE TO LISTING FILE
		ERR=W^MAC$ERR_PUT	;REPORT ANY ERRORS
	BLBS	R0,10$			;BRANCH IF GOOD PUT
	BSBW	MAC$CLOSE_LIST		;ELSE CLOSE THE LISTING FILE
10$:	RSB				;KEEP ASSEMBLING

	.SBTTL	ENABL/DSABL PROCESS .ENABL/.DSABL

;++
; FUNCTIONAL DESCRIPTION:
;
;	THESE TWO ROUTINES PROCESS .ENABL/.DSABL DIRECTIVES.  THE
;	APPROPRIATE FLAGS ARE SET/CLEARED ON PASS 1 AND CODE IS 
;	PUT IN THE INTERMEDIATE BUFFER TO DO THE SAME ON PASS 2.
;
;--

ENABL::					;DIRECTIVE = KENABL
	CVTBL	#-1,R0			;ENABLE ANY OPTIONS
	BRB	ENABL_DSABL		;GO TO COMMON CODE

DSABL::					;DIRECTIVE = KDSABL
	CLRL	R0			;DISABLE ANY OPTIONS

ENABL_DSABL:

	MOVL	R0,W^MAC$GL_DIRFLG	;SET THE FLAG FOR LATER
	BSBW	MAC$SYMSCNUP		;SCAN NEXT OPTION
	BLBC	R0,50$			;BRANCH IF NO OPTION SCANNED
	MOVAB	W^ENB$G_OPTIONS,R5	;POINT TO ENABLE OPTIONS LIST
	BSBW	MAC$SRC_LIST		;LOOK FOR THE OPTION WE SCANNED
	BLBS	R0,20$			;BRANCH IF FOUND
	MOVAB	W^ENB$G_LONGNAMES,R5	;NO--TRY THE LONG NAMES
	BSBW	MAC$SRC_LIST		;LOOK FOR IT
	BLBC	R0,10$			;BRANCH IF NOT FOUND
	MOVL	SYM$L_VAL(R1),R1	;POINT TO THE REAL BLOCK
	BRB	20$			;AND CONTINUE
10$:	$MAC_ERR NOTENABOPT		; Get error message code
	BSBW	MAC$ERRORLN		;SEND TO PASS 2
	BRB	40$			;
20$:	CMPW	R1,#ENB$G_LOCALSYMB	;WAS THIS '.ENABL LSB'?
	BNEQ	30$			;IF NEQ NO
	BLBC	W^MAC$GL_DIRFLG,30$	;YES--BRANCH IF DISABLE
	BSBW	MAC$SET_NEW_LSB		;NO--ENABLE A NEW LSB
30$:	BITW	SYM$W_FLAG(R1),W^MAC$GL_ENLISF ;SET BY COMMAND?
	BNEQ	40$			;IF NEQ YES--DO NOT CHANGE HERE
	MOVAB	SYM$L_VAL(R1),R2	;POINT TO THE VALUE WORD FOR OPTION
	MOVL	W^MAC$GL_DIRFLG,(R2)	;SET/CLEAR THE OPTION
	$INTOUT_LW INT$_SETLONG,<W^MAC$GL_DIRFLG,R2> ;SET/CLEAR FLAG ON PASS 2
40$:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#^A/,/		;SCAN TO A COMMA?
	BNEQ	ENABL_DSABL		;IF NEQ NO--SCAN FOR NEXT OPTION
	BSBW	MAC$GETCHR		;YES--SKIP THE COMMA
	BRB	40$			;CONTINUE
50$:	RSB

	.SBTTL	LIST/NLIST PROCESS .LIST/.NLIST

;++
; FUNCTIONAL DESCRIPTION:
;
;	THESE TWO ROUTINES PROCESS THE .LIST/.NLIST DIRECTIVES.
;	THE LINE IS SCANNED TO GET THE OPTIONS (IF ANY) AND THE
;	APPROPRIATE FLAGS ARE CLEARED IN PASS 1 AND CODE IS SENT
;	TO THE INTERMEDIATE BUFFER TO DO SO ON PASS 2.
;
;--

LIST::					;DIRECTIVE = KLIST
	CVTBL	#-1,R0			;SET ANY FLAGS
	PUSHL	#1			;INCREMENT LISTING LEVEL
	BRB	LIST_NLIST

NLIST::					;DIRECTIVE = KNLIST
	CLRL	R0			;CLEAR ANY FLAGS
	CVTBL	#-1,-(SP)		;DECREMENT LEVEL

LIST_NLIST:

	MOVL	R0,W^MAC$GL_DIRFLG	;SET THE FLAG FOR LATER
	BSBW	MAC$SYMSCNUP		;SCAN FOR AN OPTION
	BLBS	R0,10$			;BRANCH IF OPTION SCANNED
	ADDL2	(SP)+,W^MAC$GL_LIST_LVL	;NO--ADJUST LISTING LEVEL
	$INTOUT_LW INT$_SETLONG,-	;SEND CODE FOR PASS 2 TO DO THE SAME
		<W^MAC$GL_LIST_LVL,#MAC$GL_LIST_LVL>
	$INTOUT_LW INT$_SETLONG,<#1,#MAC$GL_LIST_IT> ;SET '.LIST/.NLIST' FLAG
	RSB				;ALL DONE
;
; THERE WAS AT LEAST ONE OPTION ON THE LINE
;
10$:	TSTL	(SP)+			;CLEAR THE STACK
20$:	MOVAB	W^LST$G_DIRLIST,R5	;POINT TO OPTION NAMES
	BSBW	MAC$SRC_LIST		;LOOK UP THE OPTION NAME
	BLBS	R0,40$			;BRANCH IF FOUND
	MOVAB	W^LST$G_LONGNAMES,R5	;NO--TRY THE LONG NAMES
	BSBW	MAC$SRC_LIST		;LOOK FOR IT
	BLBC	R0,30$			;BRANCH IF NOT FOUND
	MOVL	SYM$L_VAL(R1),R1	;POINT TO THE REAL BLOCK
	BRB	40$			;AND CONTINUE
30$:	$MAC_ERR NOTLGLISOP		; Get message code
	BSBW	MAC$ERRORLN		;SEND TO PASS 2
	BRB	50$			;
;
; OPTION WAS FOUND
;
40$:	BITW	SYM$W_FLAG(R1),W^MAC$GL_ENLISF ;SET BY COMMAND?
	BNEQ	50$			;YES--DO NOT CHANGE HERE
	MOVAB	SYM$L_VAL(R1),R2	;POINT TO VALUE
	MOVL	W^MAC$GL_DIRFLG,(R2)	;SET/CLEAR FLAG
	$INTOUT_LW INT$_SETLONG,<(R2),R2> ;TELL PASS 2 TO DO IT TOO
50$:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#^A/,/		;DID WE GET TO A COMMA?
	BNEQ	60$			;IF NEQ NO
	BSBW	MAC$GETCHR		;YES--GET NEXT CHARACTER
	BRB	50$			;
60$:	BSBW	MAC$SYMSCNUP		;FIND AN OPTION
	BLBS	R0,20$			;BRANCH IF OPTION SCANNED
	RSB

	.SBTTL	PROCESS .CROSS/.NOCROSS DIRECTIVES

;++
; FUNCTIONAL DESCRIPTION:
;
;	THESE TWO ROUTINES PROCESS THE .CROSS AND .NOCROSS
;	DIRECTIVES.
;
;--

CROENB::				;DIRECTIVE = KCROSS
	PUSHAB	W^CLR_XCRF		;ACTION ROUTINE FOR SYMBOLS
	CLRL	R6			;FLAG THIS IS ENABLE
	BRB	CROS_0			;JOIN COMMON CODE

CRODSB::				;DIRECTIVE = KNCROS
	PUSHAB	W^SET_XCRF		;ACTION ROUTINE FOR SYMBOLS
	MOVL	#1,R6			;FLAG THIS IS DISABLE
CROS_0:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#CR			;JUST THE DIRECTIVE?
	BEQL	70$			;IF EQL YES
;
; LOOP, SCANNING SYMBOL NAMES.  SET OR CLEAR SYM$M_XCRF IN THE
; SYMBOL FLAGS FOR EACH SYMBOL FOUND, AS APPROPRIATE.
;
20$:	BSBW	MAC$SYMSCNUP		;SCAN A SYMBOL NAME
	BLBS	R0,30$			;BRANCH IF WE GOT ONE
	$MAC_ERR DIRSYNX		; No--syntax error
	BSBW	MAC$ERRORPT		;REPORT THE ERROR
	BRB	60$			;FINISH UP
30$:	BSBW	MAC$INSUSRSYMTB		;LOOK UP THE SYMBOL NAME (INSRT IF NOT FOUND)
	BLBC	R0,40$			;IF NOT FOUND, JUST IGNORE IT
	JSB	@(SP)			;CALL ACTION ROUTINE TO SET/CLEAR XCRF
40$:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#^A/,/		;STOP ON A COMMA?
	BNEQ	50$			;IF NEQ NO
	BSBW	MAC$GETCHR		;YES--GET NEXT CHAR
	BSBW	MAC$SKIPSP		;AND THEN SKIP SPACES
50$:	CMPB	R10,#CR			;END OF LINE?
	BNEQ	20$			;IF NEQ NO
60$:	TSTL	(SP)+			;YES--CLEAR STACK
	RSB
;
; THERE WERE NO SYMBOL NAMES ON THE LINE.  IF .CROSS, CLEAR THE XCRF
; BIT IN FLAGS.   IF .NOCROSS, SET IT.
;
70$:	TSTL	(SP)+			;CLEAR THE STACK
	BLBC	R6,90$			;BRANCH IF THIS WAS .CROSS
	BBCS	#FLG$V_XCRF,(R11),.+1	;.NOCROSS--SET XCRF FLAG
	RSB				;ALL DONE
90$:	BBCC	#FLG$V_XCRF,(R11),.+1	;.CROSS--CLEAR XCRF FLAG
	RSB

	.DEBUG	SET_XCRF, CLR_XCRF

SET_XCRF:
	BBCS	#SYM$V_XCRF,SYM$W_FLAG(R1),.+1 ;DISABLE CREF FOR THIS SYMBOL
	RSB

CLR_XCRF:
	BBCC	#SYM$V_XCRF,SYM$W_FLAG(R1),.+1 ;ENABLE CREF FOR THIS YSMBOL
	RSB

	.SBTTL	SETDFL	PROCESS .DEFAULT DIRECTIVE

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE PROCESSES THE .DEFAULT DIRECTIVE.  THE ONLY
;	ARGUMENT CURRENTLY IMPLEMENTED IS "DISPLACEMENT".  THIS
;	SETS THE DEFAULT DISPLACEMENT TO USE IN PC-RELATIVE EXPRESSIONS
;	WHEN NO EXPLICIT DISPLACEMENT IS SPECIFIED.
;
;--

SETDFL::				;DIRECTIVE = KDFLT
	BSBW	MAC$SYMSCNUP		;GET THE THING WE ARE DEFAULTING
	BLBS	R0,10$			;BRANCH IF WE FOUND SOMETHING
	$MAC_ERR DIRSYNX		; No symbol--that's an erroR
	BRB	60$			;REPORT ERROR AND RETURN
10$:	MOVAB	W^MAC$DFLT_LIST,R5	;POINT TO THE LIST OF VALID ARGS
	BSBW	MAC$SRC_LIST		;LOOK UP THE ARG
	BLBS	R0,20$			;BRANCH IF FOUND
	$MAC_ERR ILLDFLTARG		; No--report the error
	BRB	60$			;AND RETURN
;
; THERE IS CURRENTLY ONLY ONE THING DEFAULTED.  HENCE, IT IS
; NOT CHECKED.
;
20$:	BSBW	MAC$SKIPSP		;SKIP SPACES
	CMPB	R10,#^A/,/		;SKIP TO A COMMA?
	BNEQ	30$			;IF NEQ NO
	BSBW	MAC$GETCHR		;YES--SKIP IT
	BSBW	MAC$SKIPSP		;THEN SKIP SPACES
30$:	BSBW	MAC$SYMSCNUP		;SCAN FOR ANOTHER SYMBOL
	BLBS	R0,40$			;BRANCH IF WE FOUND ONE
	$MAC_ERR DIRSYNX		; No--syntax error
	BRB	60$			;REPORT ERROR
40$:	MOVAB	W^MAC$DSPL_ARGS,R5	;POINT TO DISPLACEMENT ARGS LIST
	BSBW	MAC$SRC_LIST		;LOOK UP THE OPTION
	BLBS	R0,50$			;BRANCH IF FOUND
	$MAC_ERR ILLDFLTARG		; No--illegal arg
	BRB	60$			;REPORT ERROR
50$:	MOVL	SYM$L_VAL(R1),W^MAC$GL_DFPC_DSP ;SET DEFAULT DISPLACEMENT
	BSBW	MAC$SKIPSP		;NOW SKIP SPACES
	CMPB	R10,#CR			;MAKE SURE WE FOUND END OF LINE
	BEQL	70$			;IF EQL WE FOUND IT
	$MAC_ERR DIRSYNX		;OOPS--AND WE WERE DOING SO WELL
60$:	BSBW	MAC$ERRORLN		;REPORT THE ERROR
	MOVL	#CR,R10			;FORCE END OF LINE
70$:	RSB

	.SBTTL	ENDPRG  PROCESS .END STATEMENT

;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED WHEN THE '.END' STATEMENT IS ENCOUNTERED.
;	IT WILL SCAN FOR A TRANSFER ADDRESS AND STORE IT AWAY IF IT
;	IS PRESENT.  A JUMP IS THEN EXECUTED TO END PASS 1.
;
;--

ENDPRG::				;DIRECTIVE = KEND
	BSBW	MAC$SYMSCNUP		;SCAN FOR A SYMBOL NAME
	BLBS	R0,10$			;BRANCH IF SYMBOL SCANNED
	CMPB	R10,#CR			;NO--BUT DID WE FIND END OF LINE?
	BEQL	40$			;IF EQL YES--OK
	$MAC_ERR DIRSYNX		; Else issue syntax error
	BRB	20$			;ISSUE MESSAGE
10$:	BSBW	MAC$SRCUSRSYMTB		;YES--LOOK UP NAME
	BLBS	R0,30$			;IF LBS THEN NAME FOUND OK
	$MAC_ERR UNDEFXFRAD		; Undefined--set to issue message
20$:	BSBW	MAC$ERRORLN		;ISSUE MESSAGE TO PASS 2
	BRB	40$
30$:	MOVL	R1,W^MAC$GL_XFRADR	;SET POINTER TO SYMBOL BLOCK
40$:	TSTL	W^MAC$GL_IF_LEVEL	;ANY OUTSTANDING CONDITIONALS?
	BLEQ	50$			;IF LEQ NO
	$MAC_ERR UNTERMCOND		; Yes--get message code
	BSBW	MAC$ERRORLN		;SEND MESSAGE TO PASS 2
50$:	BSBW	MAC$SET_PC		;RECORD PC
	BRW	W^MAC$PASS1_END		;FINISH PASS 1

	.END
