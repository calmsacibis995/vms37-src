	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;++
;--
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		15-Sep-1981
;		Modified to conform to the new Magtape ANSI standard.
;**
;
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment, user mode priv, rmsbug,

;
; and optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  the $begin macro defines the following switches for rms assembly
;	(bits in $$rmstest):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$rms_umode)	assemble code for user mode
;	bit 3	($$rms_tbugchk)	include optional debugging code
;	bit 4	($$rms_pbugchk)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTEST6,007,__RMSTEST,<TEST MAGTAPE>,<GBL,LONG>


	.ENABL	DBG


	$DEVDEF
	.NLIST	MEB

;
;  macros:
;

	.MACRO	BUFF NAM,SIZE
NAM'BUF::
	.BLKB	SIZE
	NAM'BSZ==SIZE
	.ENDM	BUFF


	.MACRO	TYPE STRING, ?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE


	.MACRO	WTTYPE STRING
	$WAIT	RAB=CMDORAB
	TYPE	<STRING>
	.ENDM	WTTYPE


	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE



	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN
	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH
	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD
	.MACRO	MBPT, ?L
	BLBC	VERBOSITY,L
	BPT
L:
	.ENDM	MBPT



	.PSECT	__RMSTEST,GBL,LONG
	.ALIGN	LONG
T6START::
MTAFAB:	$FAB	DNM=<TST$MTA:.FIL;1>,fns=fnsize
MTARAB:	$RAB	RHB=RHBBUF,UBF=IOBUF,FAB=MTAFAB
	BUFF	IO,512.
BUF:	.LONG	0			; key for random lookup

;
;  file names for various files
;

MTVAR_FNM:
	.ASCII	\MTVAR\
	FNSIZE=.-MTVAR_FNM
MTFIX_FNM:
	.ASCII	\MTFIX\
MTVFC_FNM:
	.ASCII	\MTVFC\
MTST1_FNM:
	.ASCII	\MTST1\
NONFIL_FNM:
	.ASCII	\NFFIX\


;
;
; this is a test program to test out the use of magtapes through rms-32
; it exercises the basic functionality
;

TST$MTA::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; create 3 files on the tape - with different record formats, and fill them
;

	BEGIN	<MAGTAPE TESTS>

;
; the 1st file -- rfm=fix
;

	MOVAL	MTARAB,R9
	$FAB_STORE	FAB=MTAFAB,RFM=FIX,MRS=#50,FNA=MTFIX_FNM,-
	FOP=<RWO,SUP>,RAT=<CR,BLK>,FAC=PUT
	$RAB_STORE	RAB=R9,RSZ=#50,RBF=IOBUF

;
; create a file and close it in order to discover if the device is mounted foreign
;

	$CREATE	FAB=MTAFAB,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CLOSE_MT
	BBS	#DEV$V_FOR,FAB$L_DEV+MTAFAB,5$
	BSBW	STRMT
	RET
5$:	BSBW	NON_FILE
	RET
STRMT:
	TYPE	<CREATE 3 TEST FILES ON TAPE>
	MOVL	#50,R6			; alternate record size
	BSBW	DO_PUT

;
;  now the 2nd file w/ rfm = var
;

	$FAB_STORE	FAB=MTAFAB,FNA=MTVAR_FNM,RFM=VAR,MRS=#0,BLS=#512,-
	FOP=<POS,SUP>
	BBC	#DEV$V_SQD,FAB$L_DEV(R0),10$; branch if not magtape
	BICB2	#FAB$M_BLK,FAB$B_RAT(R0); verify blk defaulting
10$:	$RAB_STORE	RAB=R9,RSZ=#79	; primary length
	MOVZBL	#59,R6			; alternate size
	BSBW	DO_PUT

;
;  now the 3rd file w/ rfm = vfc
;

	$FAB_STORE	FAB=MTAFAB,FNA=MTVFC_FNM,RFM=VFC,BLS=#1024,-
	FOP=<POS,RWC,SUP>,FSZ=#4
	$RAB_STORE	RAB=R9,RSZ=#75	; primary size
	MOVL	#55,R6			; alternate size
	BSBW	DO_PUT


;++
;
;  reread 3 created files and verify their contents
;
;--

	TYPE	<RE-READ FILES CREATED IN STEP 1>
	$RAB_STORE	RAB=R9,ROP=<LOC>
	$FAB_STORE	FAB=MTAFAB,FNA=MTFIX_FNM,FOP=#0,-
	RAT=#0,ORG=REL,FAC=<GET,BRO>
	BSBW	OPEN_MT
	CMPB	MTAFAB+FAB$B_RFM,#FAB$C_FIX; is it fixed rfm?
	BEQL	RMT1
	FIELD	<RFM (NOT = FIXED)>
RMT1:	BBC	#DEV$V_SQD,FAB$L_DEV+MTAFAB,RMT2; skip test if disk
	CMPW	MTAFAB+FAB$W_BLS,#2048	; is block size right?
	BEQL	RMT2
	FIELD	<BLS>
RMT2:	CMPW	MTAFAB+FAB$W_MRS,#50	; is record size right?
	BEQL	RMT3
	FIELD	<MRS>
RMT3:	BSBW	READ_MT			; read and verify records
	.BYTE	50,50
	BSBW	EOF_CLOSE		; check eof and close

;
;  2nd file
;

	$FAB_STORE	FAB=MTAFAB,FNA=MTVAR_FNM,RAT=#0,ORG=REL
	BSBW	OPEN_MT
	CMPB	MTAFAB+FAB$B_RFM,#FAB$C_VAR
	BEQL	RMT4
	FIELD	<RFM (NOT = VAR)>
RMT4:	CMPW	MTAFAB+FAB$W_BLS,#512	; is block size correct?
	BEQL	RMT5
	FIELD	<BLS>
RMT5:	TSTW	MTAFAB+FAB$W_MRS	; is max record size right?
	BEQL	RMT6
	FIELD	<MRS>
RMT6:	BSBW	READ_MT_VAR		; read & verify records
	BSBW	EOF_CLOSE

;
;  3rd file
;

	$FAB_STORE	FAB=MTAFAB,FNA=MTVFC_FNM,RAT=#0,ORG=REL
	BSBW	OPEN_MT
	CMPB	FAB$B_RFM+MTAFAB,#FAB$C_VFC; right record format?
	BEQL	RMT7
	FIELD	<RFM (NOT = VFC)>
RMT7:	BBC	#DEV$V_SQD,FAB$L_DEV+MTAFAB,RMT8; skip test if disk
	CMPW	MTAFAB+FAB$W_BLS,#1024	; right block size?
	BEQL	RMT8
	FIELD	<BLS>
RMT8:	TSTW	MTAFAB+FAB$W_MRS	; mrs ok?
	BEQL	RMT9
	FIELD	<MRS>
RMT9:	BSBW	READ_MT
	.BYTE	75,55
	BSBW	EOF_CLOSE


;++
;
;  re-open mtvar.fil and test spacing and rewind
;
;--

	TYPE	<PERFORM SPACING AND REWIND TESTS>
	$FAB_STORE	FAB=MTAFAB,FNA=MTVAR_FNM
	BSBW	OPEN_MT
	$RAB_STORE	RAB=R9,BKT=#16	; space count
	$SPACE	R9
	BSBW	CHKEOF1			; verify at eof
	$RAB_STORE	R9,BKT=#16
	$SPACE	R9			; space forward at eof
	BSBW	CHKEOF1			; verify still at eof
	$RAB_STORE	R9,BKT=#-16	; backspace count
	$SPACE	R9
	BSBW	CHKBOF			; verify at start of file
	$RAB_STORE	R9,BKT=#8
	$SPACE	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	$RAB_STORE	R9,BKT=#0	; count = 0
	$SPACE	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	$RAB_STORE	R9,BKT=#-4
	$SPACE	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR

;
;  read records from block 4 thru end of file, verifying goodness
;

	MOVZBL	#^A/!/+24,R7		; starting rec #
	BSBW	LOOP1			; verify records
	.BYTE	79,59
	$RAB_STORE	R9,BKT=#-100
	$SPACE	R9
	BSBW	CHKBOF			; verify at start
	BSBW	READ_MT_VAR
	$REWIND	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	READ_MT_VAR
	BSBW	EOF_CLOSE


;++
;
;  test of "create if" and $nxtvol
;
;--

	TYPE	<PERFORM "CREATE IF", $TRUNCATE  AND $NXTVOL TESTS>
	$FAB_STORE	FAB=MTAFAB,FAC=PUT,FNA=MTST1_FNM,-
	FOP=CIF,RFM=VAR
	$ERASE	FAB=R0			; erase in case disk file
	BSBW	CREATE_MT
	CMPL	MTAFAB+FAB$L_STS,#RMS$_CREATED
	BEQL	RMT11
	FIELD	<STS (EXPECTED "RMS$_CREATED")>
	BSBW	ERR
RMT11:	$RAB_STORE	RAB=R9,RBF=IOBUF,RSZ=#50
	BISB2	#RAB$M_TPT,RAB$L_ROP(R9); allow put not at eof
	$PUT	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CLOSE_MT

;
;  now re-open file just created above and overwrite record
;

	$FAB_STORE	FAB=MTAFAB,FAC=<GET,PUT,TRN>,FOP=<CIF,NEF>
	BSBW	CREATE_MT
	CMPL	MTAFAB+FAB$L_STS,#RMS$_NORMAL
	BEQL	RMT12
	FIELD	<STS (EXPECTED "NORMAL")>
	BSBW	ERR
RMT12:	$RAB_STORE	RAB=R9,RBF=IOBUF,RSZ=#79
	MOVL	#59,R6			; alternate rec size
	BSBW	PUTRECS

;
;	test truncate
;

	BSBW	PUTRECS			; write 2nd half of file
	$REWIND	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	READ_MT_VAR		; read 1st half of file
	$GET	RAB=R9,ERR=REPORT_ERROR	; need to advance the current
	BSBW	ERR			; record pointer before truncate
	$TRUNCATE	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR			; truncate 2nd half of file
	BSBW	CHKEOF			; check for eof
	$RAB_STORE	RAB=R9,RBF=IOBUF,RSZ=#79
	MOVL	#59,R6
	BSBW	PUTRECS			; re-put 2nd half
	$REWIND	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	READ_MT_VAR		; read 1st half
	BSBW	READ_MT_VAR		; read 2nd half, verifying
	BSBW	CHKEOF			; check for eof again
	$REWIND	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	READ_MT_VAR		; read 1st half
	$GET	RAB=R9,ERR=REPORT_ERROR	; need to advance the current
	BSBW	ERR			; record pointer before truncate
	$TRUNCATE	RAB=R9,ERR=REPORT_ERROR; trunc 2nd half
	BSBW	ERR			; leave file as before
	BBC	#DEV$V_SQD,FAB$L_DEV+MTAFAB,20$; branch if not really mt
	BLBC	VERBOSITY,20$		; branch if not interactive
	$NXTVOL	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
20$:	$RAB_STORE	RAB=R9,RBF=IOBUF,RSZ=#79
	MOVL	#59,R6
	BSBW	PUTRECS
	$REWIND	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	READ_MT_VAR		; read recs from rel vol 1
	BSBW	READ_MT_VAR		; read recs form rel vol 2
	$FAB_STORE	FAB=MTAFAB,FOP=<RWC>; cause volume set rewind
	BSBW	EOF_CLOSE
	FINISH	<MAGTAPE TESTS>

	RSB


;++
; non-file structured tests
;--

;
; first write out a fix length 512 byte record file
; note:  set tst$mta to disk if non_file structured disk test wanted.
; mount/fo dev /rec=512/blo=512
;

NON_FILE:
	TYPE	<NON_FILE STRUCTURE CREATE TEST>
	MOVAL	MTARAB,R9
	$FAB_STORE	FAB=MTAFAB,RFM=FIX,MRS=#512,FNA=NONFIL_FNM,-
	RAT=#0,FAC=PUT,BLS=#512
	$RAB_STORE	RAB=R9,RSZ=#512,RBF=IOBUF
	MOVL	#512,R6
	BSBW	DO_PUT

;
; now open file and check attributes
;

	$RAB_STORE	RAB=R9,ROP=<LOC>
	$FAB_STORE	FAB=MTAFAB,FNA=NONFIL_FNM,FOP=#0,RAT=#0,-
	FAC=<GET,BRO>
	BSBW	OPEN_MT
	$REWIND	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CLOSE_MT
	MOVL	#MTAFAB,R0
	BSBW	OPEN_MT
	CMPB	MTAFAB+FAB$B_RFM,#FAB$C_FIX
	BEQL	NF10
	FIELD	<RFM(NOT FIXED)>
NF10:	BBC	#DEV$V_SQD,FAB$L_DEV+MTAFAB,NF20
	CMPW	MTAFAB+FAB$W_BLS,#512
	BEQL	NF20
	FIELD	<BLS>
NF20:	CMPW	MTAFAB+FAB$W_MRS,#512
	BEQL	NF30
	FIELD	<MRS>
NF30:	BBS	#DEV$V_SQD,FAB$L_DEV+MTAFAB,NF35
	BRW	NF40
NF35:	TYPE	<NON-FILE STRUCTURED MT TESTS>
	$RAB_STORE	RAB=R9,BKT=#10
	$SPACE	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR

;
; read records from block 11 thru end
;

	MOVZBL	#^A/!/ + 10,R7
	BSBW	LOOP1
	.BYTE	0,0
	$RAB_STORE	RAB=R9,BKT=#-10
	$SPACE	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	MOVZBL	#^X71,R7
	BSBW	LOOP1
	.BYTE	0,0
	BSBW	EOF_CLOSE
	FINISH	<NON-FILE STRUCTURED MT TESTS>
	RSB

;
; non-file structured random disk test
;

NF40:	TYPE	<NON_FILE STRUCTURED RANDOM DISK TEST>

;
; now open for keyed access
;

	$RAB_STORE	RAB=R9,ROP=<LOC>,RAC=<KEY>,KBF=BUF
	MOVZBL	#1,BUF
	BSBW	CHECK_ONE
	MOVZBL	#89,BUF
	BSBW	CHECK_ONE
	MOVZBL	#25,BUF

NF50:	BSBW	CHECK_ONE
	AOBLEQ	#89,BUF,NF50
	BSBW	CLOSE_MT
	FINISH	<NON-FILE STRUCTURE DISK TESTS>
	RSB

;
; check one disk record
;

CHECK_ONE:
	$GET	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	MOVZBL	#^A/!/,R0
	ADDL2	BUF,R0
	CMPW	#512,RAB$W_RSZ(R9)
	BEQL	ONE10
	FIELD	<RSZ>
ONE10:	CMPC5	RAB$W_RSZ(R9),@RAB$L_RBF(R9),R0,-
	#0,(SP)
	BEQL	ONE20
	FIELD	<RECORD>
ONE20:	RSB


;++
;
;  subroutines to do the nitty-gritties of the magtape tests
;
;--
;
;	routine to create a magtape test file
;
;	r9 points to the rab
;	rab$w_rsz(r9) contains the size of the records to be output
;	r6 is the alternate size of the records to be output
;	r7 will be destroyed
;	r0 has fab address
;
;--

DO_PUT:
	BSBW	CREATE_MT
	BSBB	PUTRECS			; create the records
	$DISCONNECT	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
CLOSE_MT:
	$CLOSE	FAB=MTAFAB,ERR=REPORT_ERROR
	BSBW	ERR
	RSB

;
;  subroutine to actually put the records in the file
;

PUTRECS:
	MOVL	#^A/!/,R7		; starting character
LOOP:					; loop to put  records out
	MOVC5	#0,(SP),R7,RAB$W_RSZ(R9),IOBUF; fill iobuf w/ characters
	MOVL	R7,@RAB$L_RHB(R9)	; fill in header
	$PUT	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	MOVW	RAB$W_RSZ(R9),R0	; swap rec lengths
	MOVW	R6,RAB$W_RSZ(R9)
	MOVL	R0,R6
	AOBLSS	#^X7B,R7,LOOP
	RSB


;
;  routine to create a file
;

CREATE_MT:
	$CREATE	FAB=MTAFAB,ERR=REPORT_ERROR
	BSBW	ERR
	CLRL	FAB$L_FOP+MTAFAB
	$CONNECT	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	RSB


;
;  routine to open a mt file
;

OPEN_MT:
	$OPEN	FAB=R0,ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	CMPB	MTAFAB+FAB$B_ORG,#FAB$C_SEQ
	BEQL	OPN1
	FIELD	<ORG (NOT SEQUENTIAL)>
OPN1:	BBS	#DEV$V_FOR,FAB$L_DEV+MTAFAB,OPN2; branch if foreign test
	BITB	#FAB$M_CR,MTAFAB+FAB$B_RAT
	BNEQ	OPN2
	FIELD	<RAT (CR NOT SET)>
OPN2:	RSB


;
;  read and check magtape file
;

READ_MT_VAR:
	BSBB	READ_MT
	.BYTE	79,59
	RSB

READ_MT:
	MOVL	#^A/!/,R7		; starting character
LOOP1:
	MOVL	RAB$L_FAB(R9),R1	; Get the FAB address
	CMPB	#FAB$C_FIX,FAB$B_RFM(R1) ; See if file is fixed
	BNEQ	10$			; If not then skip next test
	CMPL	#^A/^/,R7		; otherwise is the record of carret's
	BNEQ	10$			; Not carrets then continue
	INCL	R7			; Skip that record
10$:
	$GET	RAB=R9,ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	RAB$L_RBF(R9),#IOBUF
	BNEQ	LP1			; branch if locate mode worked
	FIELD	<RBF (INDICATES MOVE MODE)>
	MBPT
LP1:	MOVZBL	@(SP),R0		; get expected size
	BNEQ	5$
	MOVZWL	#512,R0
	BRW	10$
5$:	BLBS	R7,10$			; branch unless alternate
	MOVL	(SP),R0
	MOVZBL	1(R0),R0		; get alternate record size
10$:	CMPW	R0,RAB$W_RSZ(R9)	; size right?
	BEQL	LP2			; branch if right
	FIELD	<RSZ>
	MBPT
LP2:	CMPC5	#0,(SP),R7,R0,@RAB$L_RBF(R9); record contents ok?
	BEQL	LP3			; branch if yes
	FIELD	<RBF (BAD RECORD CONTENTS)>
	MBPT
LP3:	CMPB	MTAFAB+FAB$B_RFM,#FAB$C_VFC
	BNEQ	LP4			; branch if not vfc rfm
	CMPL	@RAB$L_RHB(R9),R7	; rhb contents ok?
	BEQL	LP4
	FIELD	<RHB>
	MBPT
LP4:	ACBB	#^X7A,#1,R7,LOOP1
	ADDL2	#2,(SP)			; bump past args
	RSB


;
;  subroutine to check for at eof and close mt file
;

EOF_CLOSE:
	BSBB	CHKEOF
	BRW	CLOSE_MT


;
;  subroutine to check for at eof
;

CHKEOF:	$GET	R9			; expect eof
CHKEOF1:
	CMPL	R0,#RMS$_EOF
	BEQL	CK5
	MOVL	R9,R10
	BSBW	EOFPUT			; give error mesg's
CK5:	RSB


;
;  subroutine to check for error code = rms$_bof
;

CHKBOF:	CMPL	R0,#RMS$_BOF
	BEQL	CKBEND
	MOVL	R9,R10
	BSBW	REPORT_ERR
	FIELD	<STS (EXPECTED RMS$_BOF)>
	BSBW	ERR
CKBEND:	RSB


	.END
