	.IDENT	'V03-000'
	.NLIST
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; Modified By:
;
;	V02-001	REFORMAT	Keith B. Thompson	30-Jul-1980
;
;--

;
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	/IDNUM/
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment,
					;  user mode priv, rmsbug,

;
; and optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  the $BEGIN macro defines the following switches for rms assembly
;	(bits in $$RMSTEST):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$RMS_UMODE)	assemble code for user mode
;	bit 3	($$RMS_TBUGCHK)	include optional debugging code
;	bit 4	($$RMS_PBUGCHK)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTEST3,009,__RMSTEST,<RELATIVE TEST PROGRAM>,<GBL,LONG>

;

	.ENABL	DBG

;
; this program tests the relative file org
;
;

;
;  macros:
;

	.MACRO	BUFF NAM,SIZE
NAM'BUF::
	.BLKB	SIZE
	NAM'BSZ==SIZE
	.ENDM	BUFF

;
;
;

	.MACRO	TYPE STRING, ?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE

;

	.MACRO	WTTYPE STRING
	$WAIT	CMDORAB
	TYPE	<STRING>
	.ENDM	WTTYPE

;

	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE


;

	.MACRO	FNM STRING
	STORE	<STRING>
	MOVB	#$$.TMPX1,FAB$B_FNS+RELATIVE_FAB
	MOVL	#$$.TMPX,FAB$L_FNA+RELATIVE_FAB
	.ENDM

	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN
	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH
	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD
	.MACRO	MBPT ?L
	BLBC	VERBOSITY,L
	BPT
L:
	.ENDM	MBPT

;


	.PSECT	__RMSTEST,GBL,LONG
	.ALIGN	LONG
T3START::
RELATIVE_FAB:
	$FAB	FAC=<GET,PUT,DEL,UPD>,-
		DNM=<TST$DISK:.FIL;1>,-
		NAM=NAMBLK,-
		FOP=<DFW,SUP>,-
		ORG=REL,-
		RAT=CR,-
		MRS=52,-
		MRN=500,-
		ALQ=0,-			; alq=0 forces extend
		FSZ=4

RELATIVE_RAB:
	$RAB	FAB=RELATIVE_FAB,-
		UBF=RELBUF,-
		USZ=RELBSZ,-
		RBF=RELBUF,-
		RHB=HEAD,-
		MBF=3,-
		ROP=UIF
ALLOC_XAB:
	$XABALL	AID=0,-
		DEQ=4,-
		ALQ=4
COUNTER:
	.BYTE	0
COUNT2:	.BYTE	0
HEAD:	.LONG	0
KEY:	.LONG	0
RFATBL:	.BLKQ	6
	.ALIGN	LONG
	BUFF	REL,200
RFMSTR:	.LONG	RFML,RFMS
RFMS:	.ASCII	'OPENED RELATIVE FILE WITH FILE ORG !AD !/'
	RFML=.-RFMS

RMT$TEST_3A::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	BEGIN	<RELATIVE TESTS>

;
;VARIABLE
;

	TYPE	<TEST WITH VARIABLE RECORD FORMAT>
	FNM	<RELVAR>
	MOVB	#FAB$C_VAR,FAB$B_RFM+RELATIVE_FAB
	BSBW	REL_TEST

;
;VFC
;

	TYPE	<TEST WITH VFC RECORD FORMAT>
	FNM	<RELVFC>
	$FAB_STORE	FAB=RELATIVE_FAB,-
		RFM=VFC,-
		FSZ=#4; need to set fsz
	BISL2	#FAB$M_CIF,FAB$L_FOP(R0)	; do create-if
	BICL2	#FAB$M_SUP,FAB$L_FOP(R0)	; not supercede
	$CREATE	FAB=RELATIVE_FAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	R0,#RMS$_CREATED		; was it created
	BEQL	10$
	BISL2	#RAB$M_UIF,-			; if opened, do updates
		RAB$L_ROP+RELATIVE_RAB
10$:	BSBW	REL_TEST2
	BICL2	#FAB$M_CIF,-			; restore bits
		FAB$L_FOP+RELATIVE_FAB
	BISL2	#FAB$M_SUP,-
		FAB$L_FOP+RELATIVE_FAB

;
;fix
;

	TYPE	<TEST WITH FIXED LENGTH RECORDS>
	FNM	<RELFIX>
	MOVB	#FAB$C_FIX,FAB$B_RFM+RELATIVE_FAB
	BSBW	REL_TEST
	CLRL	FAB$L_XAB+RELATIVE_FAB		; clear it for restart
	FINISH	<RELATIVE TESTS>
	RET


REL_TEST:

;
;routine to put relative thru its paces, and call the locking routine
;

	$FAB_STORE	FAB=RELATIVE_FAB,-
		ALQ=#0				; make sure it's 0
	$CREATE	FAB=R0,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$XABALL_STORE	XAB=ALLOC_XAB,-
		ALQ=#4
	$FAB_STORE	FAB=RELATIVE_FAB,-
		XAB=ALLOC_XAB
	$EXTEND	FAB=R0,-
		ERR=REPORT_ERROR		; extend 4 blks, from alq
	BSBW	ERR
	CMPL	FAB$L_STV+RELATIVE_FAB,#4	; check returned stv
	BGEQ	STVOK
	FIELD	<STV ( NOT = ALLOC QTY, AFTER EXTEND)>
STVOK:	CMPL	XAB$L_ALQ+ALLOC_XAB,#4		; check alq
	BGEQ	ALQOK
	FIELD	<ALQ IN XAB ( NOT = ALLOC QTY, AFTER EXTEND)>
ALQOK:	$CLOSE	FAB=RELATIVE_FAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$XABALL_STORE	XAB=ALLOC_XAB,-
		ALQ=#0
	$OPEN	FAB=RELATIVE_FAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	ALLOC_XAB+XAB$L_ALQ,#5		; alq=4 from extend + 1 since rel
	BGEQ	ALQOK1
	FIELD	<ALQ IN XAB ( NOT = ALLOC QTY, AFTER OPEN)>
ALQOK1:	CMPB	RELATIVE_FAB+FAB$B_RFM,#FAB$C_FIX
	BEQL	REL_TEST2			; on w/ it
	$FAB_STORE	FAB=RELATIVE_FAB,-	; if var clear xab
		XAB=#0

REL_TEST2:

;
;entry point to bypass create
;

	$CONNECT	RAB=RELATIVE_RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR

;
;do 26 sequential puts with 'bad' data into file
;then delete 5 of those records and do puts to put right data into them
;update the other records and then do gets to make sure it's all ok
;

	MOVL	#1,R9			; r9 is record number
	MOVAL	RELATIVE_RAB,R11	; r11 is address of rab
	TYPE	<FILL FILE>
PUT_RECORD_SEQ::
	MOVL	#15,R6			; all of length 15
	CMPB	#FAB$C_FIX,FAB$B_RFM+RELATIVE_FAB
	BNEQ	30$
	MOVL	#52,R6			; len of fixed rec. is 52
30$:	MOVC5	#0,(SP),#^A/1/,R6,RELBUF; fill buffer for output
					; put ascii '1's into records
	MOVW	R6,RAB$W_RSZ(R11)	; give size of record
	MOVL	R9,HEAD			; fill header in case it's vfc

;
;seq mode is default
;

	$PUT	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	RAB$L_BKT(R11),R9		; bkt should be rec. # on output
	BEQL	BKT_OK
	FIELD	<BKT IN RAB (RECORD NUMBER)>
BKT_OK:	AOBLEQ	#26,R9,PUT_RECORD_SEQ		; keep going?

;
;check one record just to be sure
;

	MOVL	#15,R9
	MOVAL	KEY,RAB$L_KBF(R11)
	MOVB	#RAB$C_KEY,RAB$B_RAC(R11)
	MOVL	R9,KEY
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHK_BAD_DATA
	BICL2	#RAB$M_UIF,RAB$L_ROP(R11)	; in case its set
	MOVL	#5,R9
FIND_DEL:

;
;do some finds and deletes by keyed access
;

	MOVL	R9,KEY
	$FIND	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$DELETE	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	ADDL	#5,R9
	CMPL	R9,#26
	BLSS	FIND_DEL


;
;done with deletes, now 'put' into the deleted records correct data
;

	MOVL	#5,R9
PUT_RECORD_KEY:

;
;try to get deleted records, hoping it fails
;then set nxr and get the deleted records and check them
;finally put the corrected (previously deleted)records
;

	MOVC5	#0,(SP),#0,#200,RELBUF	; clr relbuf, to make sure
	MOVL	R9,KEY			; gets by key
	$GET	RAB=R11			; hope it fails
	CMPL	R0,#RMS$_RNF		; record not found?
	BEQL	ERR_OK
	FIELD	<RETURNED ERROR CODE>
	MOVL	R11,R10
	BSBW	REPORT_ERR
	BSBW	ERR
ERR_OK:	BISL	#RAB$M_NXR,-		; get non-existant record
		RAB$L_ROP+RELATIVE_RAB
	$GET	RAB=R11,-		; this should work
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHK_BAD_DATA		; check it out
	BICL	#RAB$M_NXR,-		; clear bit
		RAB$L_ROP+RELATIVE_RAB
	BSBW	SETUP			; fills buffer,rsz,head
	MOVL	R9,KEY			; keyed access
	$PUT	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	ADDL	#5,R9
	CMPL	R9,#26
	BGEQ	10$
	BRW	PUT_RECORD_KEY
10$:

;
;all done with that
;

	MOVL	#1,R9

;
;do updates on all other records, by keyed access
;

UPDATE_RECORD:
	CLRL	R10
	EDIV	#5,R9,R2,R6
	TSTL	R6			; is it 5,10,15,20,25
	BNEQ	20$
	AOBLEQ	#26,R9,UPDATE_RECORD	; if so, skip it
	BRW	NO_MORE			; all done
20$:	MOVL	R9,KEY
	$FIND	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	SETUP			; set up for put
	$UPDATE	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	AOBLEQ	#26,R9,UPDATE_RECORD
NO_MORE:
	MOVB	#RAB$C_SEQ,RAB$B_RAC+RELATIVE_RAB
	TYPE	<VERIFY CONTENTS OF FILE>
	$REWIND	RAB=R11,-		; can now do gets
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	DO_SOME_GETS
	$DISCONNECT	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	DO_SOME_GETS
	$DISCONNECT	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$CLOSE	FAB=RELATIVE_FAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
					; tell locking test which file
	MOVB	FAB$B_FNS+RELATIVE_FAB,-
		FAB$B_FNS+LOCK_FAB
	MOVL	FAB$L_FNA+RELATIVE_FAB,-
		FAB$L_FNA+LOCK_FAB
					; do locking tests
	BSBW	RMT$TEST_5A
	RSB

;
;subroutine to check 'bad' data ( 1st pass of puts)
;r11 is pointer to relative_rab
;routine checks rsz and contents of record, now in buffer
;

CHK_BAD_DATA:
	MOVL	#15,R6			; len of non-fixed records
	CMPB	#FAB$C_FIX,-
		RELATIVE_FAB+FAB$B_RFM
	BNEQ	10$			; if fix len is 52
	MOVL	#52,R6
10$:	CMPW	R6,RAB$W_RSZ(R11)	; check rsz
	BEQL	RSZ_OK
	FIELD	<RSZ>
RSZ_OK:
	CMPC5	R6,@RAB$L_RBF(R11),#^A/1/,#0,(SP)
	BEQL	REC_OK
	FIELD	<RECORD>
REC_OK:
	RSB

DO_SOME_GETS::
	MOVAL	RFATBL,R4			; r4 is index to rfatbl
	CLRB	COUNTER				; record number
	CLRB	COUNT2
	MOVL	#26,R7				; 1st pass-r7 is # of rec.
	MOVAL	RELATIVE_RAB,R11		; pointer to rab
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)	; do all sequential gets
	BSBW	GET_RECORD_SEQ
	MOVB	#RAB$C_RFA,RAB$B_RAC(R11)	; do some gets by rfa
	MOVAL	RFATBL,R4
	BSBW	GET_RECORD_RFA
	MOVB	#RAB$C_KEY,RAB$B_RAC(R11)	; do some gets by key
	BSBW	GET_RECORD_KEY
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)	; do some seq gets
	MOVL	#13,R7				; 2nd pass-r7 is # of rec.
	MOVAL	RFATBL+24,R4			; 24=8.*3, starting in the middle
	MOVB	#13,COUNTER			; 		ditto
	CLRB	COUNT2
	BSBW	GET_RECORD_SEQ
	RSB


;
; subroutines to do gets and checks
;

CHECK_REC:

;
;	r9 is the record number
;	as before r11 is the addr of the rab
;

	CMPB	#FAB$C_VFC,FAB$B_RFM+RELATIVE_FAB
	BNEQ	NO_HEADER
100$:	CMPL	R9,@RAB$L_RHB(R11)	; compare header
	BEQL	NO_HEADER
	FIELD	<HEADER OF A VFC RECORD>
NO_HEADER:
	CMPL	R9,#26			; is it last record?
	BNEQ	10$
	MOVL	#26,R6			; length is 26
	BRB	20$
10$:	CLRL	R10			; quadword divide
	EDIV	#26,R9,R2,R6		; r6 = r9 mod 26, rec. size
20$:	ADDL3	#^A/A/-1,R6,R5		; r5 is char.
	CMPB	#FAB$C_FIX,FAB$B_RFM+RELATIVE_FAB
	BNEQ	GOT_RS
	MOVL	#52,R6			; mrs for fixed is 26
GOT_RS:
	CMPW	R6,RAB$W_RSZ(R11)	; check rsz
	BEQL	OK_RSZ
	FIELD	<RSZ FIELD IN RAB>
OK_RSZ:
10$:	CMPC5	R6,@RAB$L_RBF(R11),R5,#0,(SP)
	BNEQ	BADREC
	RSB				; return
BADREC:
	FIELD	<RECORD>
	RSB

SETUP:

;
;routine to do setup for puts of correct data
;r9 is record number -- input
;output -- relbuf is filled in with correct char
;	-- head is filled in, and rsz is also
;

	CMPL	R9,#26
	BNEQ	10$
	MOVL	#26,R6			; len of last rec. is 26
	BRB	20$
10$:	CLRL	R10
	EDIV	#26,R9,R2,R6		; r6 is rec. # mod 26
20$:	ADDL3	#^A/A/-1,R6,R5		; r5 is char. to fill buffer
	CMPB	#FAB$C_FIX,-
		FAB$B_RFM+RELATIVE_FAB
	BNEQ	30$
	MOVL	#52,R6			; len. of fixed rec. is 52
30$:	MOVC5	#0,(SP),R5,R6,RELBUF	; fill relbuf
	MOVW	R6,RAB$W_RSZ(R11)	; fill rsz
	MOVL	R9,HEAD			; fill header, in case vfc
	RSB


GET_RECORD_SEQ:

;
;			routine to sequentially get and check records
;

	$GET	R11
	CMPL	R0,#RMS$_EOF
	BNEQ	MORE
	CMPB	COUNT2,R7
	BNEQ	BADNR
	RSB
BADNR:
	MOVL	R11,R10
	BSBW	EOFPUT
	RSB
MORE:
	BLBS	R0,10$
	MOVL	R11,R10
	BSBW	REPORT_ERR
	BSBW	ERR
10$:	CMPB	COUNT2,R7
	BLEQ	20$
	BRB	BADNR
20$:	INCB	COUNTER
	INCB	COUNT2
	MOVZBL	COUNTER,R9
	CMPL	R9,RAB$L_BKT(R11)
	BEQL	RNOK
	FIELD	<BKT FIELD IN RAB>
RNOK:
	BSBW	CHECK_REC
	CLRL	R10			; quad word divide
	EDIV	#5,R9,R0,R2
	CMPL	R2,#1
	BEQL	SAV_RFA
	BRW	GET_RECORD_SEQ		; continue
SAV_RFA:

;
; save record numbers 1,6,11,16,21,26 on 1st pass
; check record numbers 16,21,26 on 2nd pass
;

	BLBC	R7,SAV			; which pass?
	CMPC3	#6,RAB$W_RFA(R11),(R4)	; 2nd, check them
	BEQL	RFA_OK
	FIELD	<RFA>
	MBPT
RFA_OK:
	ADDL2	#8,R4
	BRW	GET_RECORD_SEQ		; on to next record
SAV:
	MOVQ	RAB$W_RFA(R11),(R4)+	; 1st pass, save them
	SUBL3	#1,R4,R2
	MOVB	R9,(R2)			; also store record number
	BRW	GET_RECORD_SEQ

GET_RECORD_RFA:

;
;	get records by rfa
;

	CMPL	R4,#RFATBL+48		; more rfa entries
	BGEQ	END_OF_RFA
	MOVQ	(R4)+,RAB$W_RFA(R11)	; load rab w/ rfa
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVB	RAB$W_RFA+7(R11),R9	; get record number, as stored
	BSBW	CHECK_REC		; r9 is now rec. #
	BRB	GET_RECORD_RFA
END_OF_RFA:
	RSB

GET_RECORD_KEY:

;
;get records by key
;

	MOVAL	KEY,RAB$L_KBF(R11)
	MOVL	#1,KEY			; get 1st record
	BSBW	GETCHK			; get and check
	MOVL	#26,KEY
	BSBW	GETCHK
	MOVL	#13,KEY
	BRW	GETCHK

GETCHK:
	$GET	RAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	MOVL	KEY,R9
	BRW	CHECK_REC
	.END


