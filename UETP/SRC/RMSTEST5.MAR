	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;
; This macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries.
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment, user mode priv, rmsbug,

;
; And optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  The $begin macro defines the following switches for rms assembly
;	(bits in $$rmstest):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$rms_umode)	assemble code for user mode
;	bit 3	($$rms_tbugchk)	include optional debugging code
;	bit 4	($$rms_pbugchk)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTEST5,009,__RMSTEST,<TEST RECORD LOCKING>,<GBL,LONG>

;

	.ENABL	DBG

;

	$RMSDEF
	.NLIST	MEB

;
;  macros:
;

	.MACRO	BUFF NAM,SIZE
NAM'BUF::
	.BLKB	SIZE
	NAM'BSZ==SIZE
	.ENDM	BUFF

	.MACRO	TYPE STRING, ?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE


	.MACRO	WTTYPE STRING
	$WAIT	RAB=CMDORAB
	TYPE	<STRING>
	.ENDM	WTTYPE


	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE



	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN
	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH
	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD
	.MACRO	MBPT, ?L
	BLBC	VERBOSITY,L
	BPT
L:
	.ENDM	MBPT



	.PSECT	__RMSTEST,GBL,LONG
	.ALIGN	LONG
T5START::
LOCK_FAB::
	$FAB	FAC=<GET,PUT,UPD>,DNM=<TST$DISK:.FIL;1>,shr=mse,nam=namblk
RAB1:	$RAB	FAB=LOCK_FAB,UBF=LCKBUF,USZ=LCKBSZ,RBF=LCKBUF,-
		RSZ=15,KBF=KEY
RAB2:	$RAB	FAB=LOCK_FAB,UBF=LCK2BUF,USZ=LCKBSZ,-
		RBF=LCK2BUF,RSZ=15,ROP=ULK,KBF=KEY
	BUFF	LCK,200
	BUFF	LCK2,200
KEY:	.LONG	0

RMT$TEST_5A::
	BEGIN	<LOCKING TESTS>
	$OPEN	FAB=LOCK_FAB,ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=RAB1,ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=RAB2,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	RAB1,R7			; r7 will be addr of rab1
	MOVAL	RAB2,R8			; r8 will be addr of rab2

;
; force lots of collisions
; 1st stream 1 does a get (seq., so 1st record), locking it
; the 2nd stream asks for the same record, but fails
; the 1st stream releases it and the 2nd stream takes it
; using manual locking the 2nd stream gets the 2nd record (locking 2 records)
; the 1st stream asks for the 2nd record, finding it locked
; until the 2nd stream frees both records
; at which time the 1st stream takes the 2nd record
;

	$GET	RAB=R7,ERR=REPORT_ERROR	; get 1st rec., locking it
	BSBW	ERR
	$GET	RAB=R8			; this should fail
	CMPL	R0,#RMS$_RLK
	BEQL	OK_LCK
	FIELD	<RMS RETURNED STATUS CODE>
	MOVAL	RAB2,R10
	BSBW	REPORT_ERR
	BSBW	ERR
OK_LCK:
	$RELEASE	RAB=R7,ERR=REPORT_ERROR; release it
	BSBW	ERR


	$GET	RAB=R8,ERR=REPORT_ERROR	; now get it
	BSBW	ERR
	$GET	RAB=R8,ERR=REPORT_ERROR	; and another
	BSBW	ERR
	$GET	RAB=R7			; this should fail
	CMPL	R0,#RMS$_RLK
	BEQL	OK_LCK1
	FIELD	<RMS RETURNED STATUS CODE>
	MOVAL	RAB1,R10
	BSBW	REPORT_ERR
	BSBW	ERR
OK_LCK1:
	$FREE	RAB=R8,ERR=REPORT_ERROR	; free both records
	BSBW	ERR
	$GET	RAB=R7,ERR=REPORT_ERROR
	BSBW	ERR			; should get it this time
	CMPL	RAB$L_BKT(R7),#2	; should have been 2nd
	BEQL	BKT_OK
	FIELD	<BKT IN RAB (RECORD NUMBER)>
BKT_OK:


;
; test 2
; one stream now, using manual locking gets a record
; when it tries to get it again, it succeeds with the code, already locked
; shifting to automatic, it gets the 2nd record (actually locking them both)
; so when it tries to get the 1st again, it succeeds w/ the code, already locked
; but this released the 2nd record, so when it tries to release the 2nd, it fails
;

	$GET	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR			; get a record
	MOVB	#RAB$C_KEY,RAB$B_RAC(R8); control which rec.
	MOVL	RAB$L_BKT(R8),KEY	; move rec. # into key
	$GET	RAB=R8,ERR=REPORT_ERROR	; get same one
	BSBW	ERR
	CMPL	R0,#RMS$_OK_ALK		; funny success
	BEQL	OK_ALK
	FIELD	<RETURNED SUCCESS CODE>
OK_ALK:	BICL	#RAB$M_ULK,RAB$L_ROP(R8); shift to automatic
	INCL	KEY			; get next record
	$GET	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR			; get 2nd rec.,
					; maintaining hold on 1st
	MOVQ	RAB$W_RFA(R8),RAB$W_RFA(R7); save rfa for
					; release of 2nd
	DECL	KEY			; get 1st again, making sure it
					; was still locked
	$GET	RAB=R8,ERR=REPORT_ERROR	; releasing 2nd one
	BSBW	ERR
	CMPL	R0,#RMS$_OK_ALK
	BEQL	OK_ALK1
	FIELD	<RETURNED SUCCESS CODE>
OK_ALK1:
	MOVQ	RAB$W_RFA(R7),RAB$W_RFA(R8); restore rfa for release
	$RELEASE	RAB=R8		; release 2nd one
	CMPL	R0,#RMS$_RNL		; r0 = rec. not locked?
	BEQL	OK_RNL
	FIELD	<RMS RETURNED ERROR CODE>
	MOVAL	RAB2,R10
	BSBW	REPORT_ERR		; report error
	BSBW	ERR
OK_RNL:
	BISL	#RAB$M_ULK,RAB$L_ROP(R8); back to manual


; 
; test 3
; with manual locking, get 1st record, locking it
; second user can't get it
; update it successfully, which will not unlock it
; so when updating it again, it will succeed because it's still manually locked
;

	MOVL	#1,KEY			; 1st record
	$GET	RAB=R8,ERR=REPORT_ERROR	; get w/ manual locking
	BSBW	ERR
	MOVB	#RAB$C_KEY,RAB$B_RAC(R7)
	$GET	RAB=R7			; try to get same record
	CMPL	R0,#RMS$_RLK
	BEQL	RLK_OK
	FIELD	<RMS STATUS CODE>
	MOVAL	RAB1,R10
	BSBW	REPORT_ERR
	BSBW	ERR
RLK_OK:
	BICL	#RAB$M_ULK,RAB$L_ROP(R8); switch to automatic
	$UPDATE	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR
	$FIND	RAB=R8,ERR=REPORT_ERROR	; get a current record
	BSBW	ERR			; this should not fail
	$UPDATE	RAB=R8,ERR=REPORT_ERROR	; this should succeed
	BSBW	ERR
	$RELEASE	RAB=R8,ERR=REPORT_ERROR; this should not fail
	BSBW	ERR
STS_OK:


;
; test 4
; asynchronously do 2 gets on records in the same bucket
;

	MOVL	#RAB$M_ASY,RAB$L_ROP(R7)
	MOVL	#RAB$M_ASY,RAB$L_ROP(R8)
	MOVL	#1,KEY
	$GET	RAB=R7,ERR=REPORT_ERROR	; gets 1st record
	INCL	KEY
	$GET	RAB=R8,ERR=REPORT_ERROR	; gets 2nd record
	$WAIT	RAB=R7
	$WAIT	RAB=R8			; wait them out
	CLRL	RAB$L_ROP(R8)		; rop in r7 will be set soon

;
; that's it for test 4
;



;
; test 5
; do threee tests,  getting the same record with each rab
; with no locking, supposedly.
; 1st, set the nlk bit. then the rlk bit. and then let fac=get
; all these should cause no locking
;

	MOVL	#RAB$M_NLK,RAB$L_ROP(R7)
	MOVL	#1,KEY
	BSBW	GET_TWO			; try to get the record twice
	MOVL	#RAB$M_RLK,RAB$L_ROP(R7)
	MOVL	#RAB$M_NLK,RAB$L_ROP(R8); can't try to lock record
	INCL	KEY
	BSBW	GET_TWO
	CMPL	RAB$L_STS(R8),#RMS$_OK_RLK
	BEQL	RLK_OK2
	FIELD	<RMS SUCCESS CODE>
RLK_OK2:
	MOVL	#RAB$M_LOC,RAB$L_ROP(R7); locate mode
	MOVL	#RAB$M_LOC,RAB$L_ROP(R8); diito
	MOVB	#FAB$M_GET,FAB$B_FAC+LOCK_FAB; only get access

;
; have to reopen file w/ fac=get
;

	$DISCONNECT	RAB=R7,ERR=REPORT_ERROR
	BSBW	ERR
	$DISCONNECT	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR
	$CLOSE	FAB=LOCK_FAB,ERR=REPORT_ERROR
	BSBW	ERR
	$OPEN	FAB=LOCK_FAB,ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=R7,ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR
	DECL	KEY
	BSBW	GET_TWO

;
; clean up
;

	MOVB	#RAB$C_SEQ,RAB$B_RAC(R7)
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R8)
	CLRL	RAB$L_ROP(R7)
	MOVL	#RAB$M_ULK,RAB$L_ROP(R8)
	BISL	#FAB$M_PUT,FAB$B_FAC+LOCK_FAB
	BISL	#FAB$M_UPD,FAB$B_FAC+LOCK_FAB

;
;	close up
;

	$DISCONNECT	RAB=R7,ERR=REPORT_ERROR
	BSBW	ERR
	$DISCONNECT	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR
	$CLOSE	FAB=LOCK_FAB,ERR=REPORT_ERROR
	BSBW	ERR
	FINISH	<LOCKING TESTS>
	RSB

GET_TWO:

;
; subroutine to get the same record w/ two rabs
; and then compare the results
;

	$GET	RAB=R7,ERR=REPORT_ERROR
	BSBW	ERR
	$GET	RAB=R8,ERR=REPORT_ERROR
	BSBW	ERR
	CMPW	RAB$W_RSZ(R7),RAB$W_RSZ(R8)
	BEQL	RSZ_OK
	FIELD	<RSZ>
RSZ_OK:
	CMPC3	RAB$W_RSZ(R7),@RAB$L_RBF(R7),@RAB$L_RBF(R8)
	BEQL	REC_OK
	FIELD	<RECORDS>
REC_OK:	RSB
	.END
