	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment, user mode priv, rmsbug,

;
; and optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  the $begin macro defines the following switches for rms assembly
;	(bits in $$rmstest):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$rms_umode)	assemble code for user mode
;	bit 3	($$rms_tbugchk)	include optional debugging code
;	bit 4	($$rms_pbugchk)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTEST1,009,__RMSTEST,<GENERAL RMS TEST PROGRAM>,<GBL,LONG>

;

	.ENABL	DBG

;
;  this program tests the sequential file org, for a disk device,
;  with vfc record format.
;
;
;  test 1a:
;
;	create known test file of 1000 records, where each record has
;	a 4-byte fixed control field giving the record # and a variable
;	length portion of n mod 100 bytes of the ascii character n mod 10
;	(where 'n' is the record number).
;

	$RMSDEF
	.NLIST	MEB

;
;  macros:
;

	.MACRO	BUFF NAM,SIZE
NAM'BUF::
	.BLKB	SIZE
	NAM'BSZ==SIZE
	.ENDM	BUFF

;
;
;

	.MACRO	TYPE STRING, ?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE

;

	.MACRO	WTTYPE STRING
	$WAIT	RAB=CMDORAB
	TYPE	<STRING>
	.ENDM	WTTYPE

	.MACRO	WFIELD STRING
	$WAIT	RAB=CMDORAB
	FIELD	<STRING>
	.ENDM

;


	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE

;

	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN
	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH
	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD
	.MACRO	MBPT, ?L
	BLBC	VERBOSITY,L
	BPT
L:
	.ENDM	MBPT

;


	.PSECT	__RMSTEST,GBL,LONG
	.ALIGN	LONG
T1START::
WTRAB::	$RAB
RFATBL:	.BLKQ	100
T1FAB::	$FAB	FAC=PUT,FNM=<TST$DISK:T1FILE.DAT;1>,org=seq,rfm=vfc,-
	RAT=CR,FSZ=4,MRS=100,NAM=NAMBLK,FOP=<SUP,CTG>,-
	ALQ=48,DEQ=12,SHR=<PUT,GET,UPI>
T1RAB::	$RAB	FAB=T1FAB,UBF=CPYBUF,USZ=CPYBSZ,RBF=CPYBUF,MBC=4,MBF=2,-
	ROP=<WBH>,RHB=RECCNT,KBF=RECCNT
RECCNT::
	.LONG	0,0

;

T1STR:	.LONG	T1L,T1S
T1S:	.ASCII	'!4UL. RECORDS WRITTEN.  RFA = !XL,!XW'
	T1L=.-T1S

;

T2STR:	.LONG	T2L,T2S
T2S:	.ASCII	' RECORD # = !4UL, RHB = !4UL!/'
	.ASCII	' SIZE = !3UL, RSZ = !UW!/'
	.ASCII	' SAVED RFA = !XL,!XW, FILE RFA = !XL,!XW'
	T2L=.-T2S

;

T3STR:	.LONG	T3L,T3S
T3S:	.ASCII	"RECORD ='!AF'!/"
	T3L=.-T3S
RHBSW:	.BYTE	1			; switch for modifying rhb contents

RMT$TEST_1A::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	BEGIN	<SEQUENTIAL TESTS>
	MOVW	CMDORAB+RAB$W_ISI,WTRAB+RAB$W_ISI; copy output isi for

;
;DIFFERENT RAB $WAIT TEST
;

	BICL2	#FAB$M_CTG,T1FAB+FAB$L_FOP; don't want ctg set
	BISL2	#RAB$M_ASY,CMDORAB+RAB$L_ROP
	MOVL	#1,RECCNT
	MOVAL	RFATBL,R8
	$CREATE	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	T1RAB,R11
	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR

;

NXTREC:	EDIV	#100,RECCNT,R2,R6	; compute record length
	EDIV	#10,RECCNT,R2,R7	; compute character for record
	ADDB	#48,R7			;  make it ascii
	MOVW	R6,RAB$W_RSZ(R11)	; tell rms the record size
	MOVC5	#0,(SP),R7,R6,CPYBUF	; fill record with character
	$PUT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	R7,#48			; is this 10th record?
	BNEQ	T1CNT			; branch if not
	MOVQ	RAB$W_RFA(R11),(R8)+	; save rfa in table
	TSTL	R6			; is this 100th record?
	BNEQ	T1CNT
	BSBW	TYPRFA			; type out the rfa

;

T1CNT:	ACBW	#1000,#1,RECCNT,NXTREC
	$CLOSE	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR
	CLRW	T1RAB+RAB$W_ISI		; allow rab to be re-used
	$WAIT	CMDORAB
	TYPE	<FINISHED TEST 1A - CREATED TEST FILE>


;
;  test 1b
;
;	re-read file created in test 1a and try random and sequential
;	access via $get and $find.
;

	$WAIT	RAB=CMDORAB
	TYPE	<BEGINNING TEST 1B - $GET AND $FIND>
	BISL2	#FAB$M_NAM,T1FAB+FAB$L_FOP
	BISB2	#FAB$M_GET,T1FAB+FAB$B_FAC
	$OPEN	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR

;
;  \eventually include code here to verify file attributes.\
;

	MOVL	#RAB$M_LOC,RAB$L_ROP(R11); locate mode
	$CONNECT	RAB=T1RAB,ERR=REPORT_ERROR
	BSBW	ERR
	MOVB	#RAB$C_RFA,RAB$B_RAC(R11); rfa access
	MOVZWL	#1000,R9		; starting record number
	CLRL	R10			;  as a quadword for ediv
	CLRL	R7			; flag for 1st pass

;

T1BLOOP1:
	SUBL	#8,R8			; move to previous rfa
	BSBW	GETANDCHK
	ACBW	#10,#-10,R9,T1BLOOP1
	MOVL	#10,R9			; start with record # 10

;

T1BLOOP2:
	BSBW	GETANDCHK
	ADDL	#8,R8			; move to next rfa
	ACBW	#990,#10,R9,T1BLOOP2

;

	BBSS	#0,R7,T1BDONE		; branch if 2nd pass
	$WAIT	CMDORAB
	TYPE	<PASS 1 O.K.>
	MOVZWL	#990,R9			; start with rec # 990
	BRB	T1BLOOP1
T1BDONE:
	$WAIT	CMDORAB
	TYPE	<PASS 2 O.K.>
	$CLOSE	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR


;
;  test 1c
;
;  use update to modify records created in test 1a
;

	WTTYPE	<START TEST 1C  -  $UPDATE>
	BISB2	#FAB$M_UPD,T1FAB+FAB$B_FAC
	$OPEN	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR
	CLRW	RAB$W_ISI(R11)
	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVB	#RAB$C_RFA,RAB$B_RAC(R11)
	MOVL	#10,R9			; start at record 10
	MOVAL	RFATBL,R8
	CLRL	R7			; get single record

;

T1BLOOP4:
	BSBW	GETANDCHK
	INCL	RECCNT			; modify rhb
	MNEGB	RHBSW,RHBSW		; toggle rhb modify flag
	BLSS	10$
	CLRL	RAB$L_RHB(R11)		; don't modify rhb (default)
10$:	MOVL	RAB$L_RBF(R11),R5	; get record addr
	MOVZWL	RAB$W_RSZ(R11),R4	; and len
20$:	INCB	(R5)+			; modify record contents
	SOBGTR	R4,20$
	$UPDATE	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	RECCNT,RAB$L_RHB(R11)	; restore rhb addr
	ADDL	#8,R8			; bump to next rfa entry
	ACBW	#1000,#10,R9,T1BLOOP4	; modify every 10th record

;
;  now reread the modified file and check that every 10th (and only
;  every 10th) record has been correctly modified
;

	MOVAL	RFATBL,R8
	CLRL	R9			; reset record #
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)

;
;	$disconnect	r11
;	bsbw	err
;	$connect	r11		;do an effective rewind
;	bsbw	err
;

	$REWIND	RAB=R11,ERR=REPORT_ERROR; so do a rewind
	BSBW	ERR

;

T1BLOOP5:
	INCL	R7			; set switch for no rfa compare
	PUSHL	#9			; # gets of unmodified recs
10$:	INCL	R9			; bump rec #
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHKREC
	SOBGTR	(SP),10$
	TSTL	(SP)+
	INCL	R9			; bump rec #
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	CLRL	R7			; specify rfa to be checked
	MNEGB	RHBSW,RHBSW		; toggle rhb modified switch
	BLSS	15$
	INCL	RECCNT
15$:	SUBL3	R9,RECCNT,R0		; rhb contents = rec # + 1?
	DECL	R0
	BEQL	20$			; branch if yes
	BSBW	BADRHB			; report error
20$:	BSBW	CHKRC1			; check record len, rfa, and contents
	ADDL	#8,R8			; bump rfa table addr
	CMPW	R9,#1000		; done?
	BNEQ	T1BLOOP5		; branch if not
	$CLOSE	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR


;
;  test 2  -  random i/o test for sequential file org
;
;  test 2a
;
;  create a known test file of 1000 records of fixed length = 49. bytes,
;  1st longword has the record # (n) followed by 45 bytes of the ascii
;  character (n mod 42) + 48.
;

	WTTYPE	<START TEST 2A  -  RANDOM SEQ I/O>
T2SETUP:
	CLRW	RAB$W_ISI(R11)
	MOVAL	CPYBUF,RAB$L_RBF(R11)
	MOVZBW	#49,RAB$W_RSZ(R11)
	MOVAL	T1FAB,R10
	MOVZBL	#48,FAB$L_ALQ(R10)
	BICL2	#FAB$M_NAM,FAB$L_FOP(R10)
	CLRB	FAB$B_FAC(R10)		; check for put default
	MOVB	#FAB$C_FIX,FAB$B_RFM(R10)
	MOVW	#49,FAB$W_MRS(R10)	; rec len
	$RAB_STORE	RAB=(R11),ROP=<LOC,UIF>
	$CREATE	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	#RMS$_SUPERSEDE,T1FAB+FAB$L_STS
	BEQL	SUPOK
	FIELD	<STATUS WORD IS NOT SUPERSEDE, THEREFORE IT>
SUPOK:	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR

;
;  pre-extend file on 1st pass, put sequentially on second pass
;

	BBS	#FAB$V_BLK,FAB$B_RAT(R10),10$; branch if pass 2
	MOVZWL	#1000,RECCNT
	MOVB	#RAB$C_KEY,RAB$B_RAC(R11)
	$PUT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BRB	20$
10$:	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)
20$:	MOVZWL	#1,RECCNT

;

NXTRC2:	EDIV	#42,RECCNT,R2,R7	; compute char for record
	ADDB2	#48,R7			; make it ascii
	MOVL	RECCNT,CPYBUF		; insert rec #
	MOVC5	#0,(SP),R7,#45,CPYBUF+4	; fill rec with char
	$PUT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHKRFA

;
;  print message every 100 records
;

	EDIV	#100,RECCNT,R2,R7
	TSTL	R7
	BNEQ	T2CNT
	BSBW	TYPRFA

;

T2CNT:	ACBW	#1000,#1,RECCNT,NXTRC2
	$CLOSE	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	CLRW	RAB$W_ISI(R11)
	WTTYPE	<END STEP 2A  -  START STEP 2B>


;
;  test 2b
;
;  reread file created in step 2a and try random and sequential
;  access via $get
;

	MOVB	#FAB$M_PUT!FAB$M_UPD,FAB$B_FAC(R10); upd implies get access
	BISL2	#FAB$M_NAM,FAB$L_FOP(R10)
	$OPEN	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR

;
;	movl	#rab$m_loc,rab$l_rop(r11)
;

	$RAB_STORE	RAB=(R11),ROP=<LOC,UIF>
	MOVB	#RAB$C_KEY,RAB$B_RAC(R11)
	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVZWL	#1000,RECCNT

;
;  get all records in reverse order
;

10$:	BSBW	GTCHK2
	ACBW	#2,#-1,RECCNT,10$

;
;  now get them all forward
;

20$:	BSBW	GTCHK2
	ACBW	#1000,#1,RECCNT,20$

;
;  now get every 10th record in reverse order followed by the
;  next 10 in sequential order
;

	MOVW	#990,RECCNT
30$:	BSBW	GTCHK2
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)
	MOVL	#10,R8
25$:	INCL	RECCNT
	BSBW	GTCHK2
	SOBGTR	R8,25$
	MOVB	#RAB$C_KEY,RAB$B_RAC(R11)
	ACBW	#1,#-20,RECCNT,30$

;

	WTTYPE	<PASS 1 O.K.>


;
;  do 10 random puts, changing record contents
;

	MOVB	#^A/0/,R6		; updating character
	MOVZBL	#91,RECCNT
40$:	MOVL	RECCNT,CPYBUF
	MOVC5	#0,(SP),R6,#45,CPYBUF+4	; change the record
	$PUT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHKRFA
	ACBW	#1000,#101,RECCNT,40$
	BSBW	CHKMOD			; go verify changes

;
;  do 10 random get/update pairs
;

	MOVB	#^A/1/,R6		; updating character
	MOVZBL	#91,RECCNT		; starting rec #
50$:	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	CPYBUF+4,R8		; get addr of record char
	MOVL	#45,R9
55$:	INCB	(R8)+			; bump contents
	SOBGTR	R9,55$
	$UPDATE	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHKRFA
	ACBW	#1000,#101,RECCNT,50$
	BSBW	CHKMOD			; go verify changes

;

	WTTYPE	<PASS 2 O.K.>
	$CLOSE	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	BBSS	#FAB$V_BLK,FAB$B_RAT(R10),DONE
	WTTYPE	<DUPLICATE TEST WITH RECORDS NOT CROSSING BLOCK BOUNDARIES>
	BRW	T2SETUP

;

DONE:	MOVB	#FAB$M_PUT,FAB$B_FAC(R10)
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)
	$WAIT	CMDORAB
	MOVL	#RAB$M_WBH,RAB$L_ROP+CMDORAB
	BICL2	#FAB$M_NAM,T1FAB+FAB$L_FOP


;
;BUT FIRST -- TEST 3
;
;	test truncate
;

	$FAB_STORE	FAB=R10,SHR=#0,FAC=<PUT,GET,TRN>; set up for trn
	$OPEN	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	$GET	RAB=R11,ERR=REPORT_ERROR; get 1st record, setting up cp
	BSBW	ERR
	$TRUNCATE	RAB=R11,ERR=REPORT_ERROR; truncate all
	BSBW	ERR
	$GET	RAB=R11			; should get eof
	CMPL	R0,#RMS$_EOF
	BEQL	TROK
	MOVL	R11,R10
	BSBW	EOFPUT			; too bad
TROK:	TYPE	<TRUNCATE SUCCEEDED!>
	$DISCONNECT	RAB=R11,ERR=REPORT_ERROR; clean up
	BSBW	ERR
	$CLOSE	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	$FAB_STORE	FAB=R10,SHR=<PUT,GET,UPI>,FAC=PUT
	MOVB	#FAB$C_VFC,FAB$B_RFM(R10)
	MOVZBW	#100,FAB$W_MRS(R10)
	MOVB	#FAB$M_CR,FAB$B_RAT(R10)
	MOVL	#48,FAB$L_ALQ(R10)
	MOVB	#4,FAB$B_FSZ(R10)
	MOVAL	CPYBUF,RAB$L_RBF(R11)

;
;	try to erase the file!
;

	$ERASE	FAB=T1FAB,ERR=REPORT_ERROR
	BSBW	ERR
	TYPE	<T1FILE.DAT HAS BEEN ERASED>
	BISL2	#FAB$M_CTG,FAB$L_FOP+T1FAB; for 'f' test
	FINISH	<SEQUENTIAL TESTS>
	RET


;
;  subroutine to read in a record
;

GETANDCHK:
	MOVC3	#6,(R8),RAB$W_RFA(R11)	; rfa to rab
	BLBS	R7,PASS2		; branch if pass 2
	$GET	RAB=R11,ERR=REPORT_ERROR; get via rfa
	BSBW	ERR
	BSBB	CHKREC
	RSB
PASS2:
	MOVB	#RAB$C_RFA,RAB$B_RAC(R11)
	$FIND	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11); switch back to sequential
	PUSHL	#10			; loop count
T1BLOOP3:
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBB	CHKREC
	INCL	R9			; bump record count
	SOBGTR	(SP),T1BLOOP3
	SUBL2	#10,R9			; restore record count
	TSTL	(SP)+			; clean up stack
	RSB


;
;  subroutine to check that record read is really the right record
;

CHKREC:
	CMPL	R9,RECCNT		; fixed header = record #?
	BNEQ	BADRHB
CHKRC1:	EDIV	#100,R9,R2,R6		; compute record length
	CMPW	R6,RAB$W_RSZ(R11)	; = rms record len?
	BNEQ	BADRSZ
	EDIV	#10,RECCNT,R2,R5	; compute character
	ADDB	#48,R5			; make ascii
	CMPC5	R6,@RAB$L_RBF(R11),R5,#0,(SP); match the record?
	BNEQ	BADRBF
	BLBS	R7,10$			; branch if pass 2
	CMPC3	#6,(R8),RAB$W_RFA(R11)	; rfa the same?
	BNEQ	BADRFA
10$:	RSB


;
;  handle errors
;

BADRFA:	FIELD	<RFA>
	BRB	ERROR
BADRHB:	FIELD	<RHB>
	BRB	ERROR
BADRSZ:	FIELD	<RSZ>
	BRB	ERROR
BADRBF:	FIELD	<RBF>
	BRB	ERROR

;

DONT:	RSB
ERROR:
	BLBC	VERBOSITY,DONT
	$WAIT	RAB=CMDORAB
	BICL2	#RAB$M_ASY,RAB$L_ROP+CMDORAB
	$FAO_S	T2STR,CMDORAB+RAB$W_RSZ,FAOBUF,-
	R9,RECCNT,R6,RAB$W_RSZ(R11),-
	(R8),4(R8),RAB$W_RFA(R11),RAB$W_RFA+4(R11)
	BLBC	R0,.
	MOVAB	CMDBUF,CMDORAB+RAB$L_RBF
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
	MOVZWL	RAB$W_RSZ(R11),R0
	$FAO_S	T3STR,CMDORAB+RAB$W_RSZ,FAOBUF,-
	R0,RAB$L_RBF(R11)
	BLBC	R0,.
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
	RSB

;
;  output a message
;

TYPRFA:	BLBC	VERBOSITY,NO
	$WAIT	RAB=WTRAB		; wait on different rab for i/o to complete
	$FAO_S	T1STR,CMDORAB+RAB$W_RSZ,FAOBUF,RECCNT,RAB$W_RFA(R11),-
	RAB$W_RFA+4(R11)
	BLBC	R0,.
	MOVAB	CMDBUF,CMDORAB+RAB$L_RBF
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
NO:	RSB


;
;  subroutines for test 2
;
;  subroutine to check rfa correctness
;

CHKRFA:	SUBL3	#1,RECCNT,R0		; get rec # - 1
	BBS	#FAB$V_BLK,FAB$B_RAT(R10),10$
	EMUL	R0,#50,#0,R1		; get byte addr
	EDIV	#512,R1,R1,R2		; compute vbn-1 & offset
	BRB	20$

;
;  alternate calc for records not crossing blk boundaries
;

10$:	CLRL	R1			; zero extend record #
	EDIV	#10,R0,R1,R2		; compute vbn-1 & rec # in blk
	MULW2	#50,R2			; compute offset
20$:	INCL	R1			; vbn
	CMPL	R1,RAB$W_RFA(R11)
	BNEQ	ERRRFA
	CMPW	R2,RAB$W_RFA+4(R11)
	BNEQ	ERRRFA
	RSB
ERRRFA:	WFIELD	<RFA>
	MBPT
	RSB


;
;  subroutine to get and check a record for test 2
;

GTCHK2:	EDIV	#42,RECCNT,R0,R7	; compute char
	ADDB	#48,R7
GTCHK2A:
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHKRFA
	MOVL	RAB$L_RBF(R11),R2	; get rec addr
	CMPL	(R2)+,RECCNT		; reccnt o.k.?
	BNEQ	ERRREC
	CMPC5	#45,(R2),R7,#0,(SP)	; match?
	BNEQ	ERRREC
	RSB
ERRREC:	WFIELD	<RECORD CONTENTS>
	MBPT
	RSB

;
;  subroutine to verify that updated records were changed but not
;  the preceeding or following records
;

CHKMOD:
	MOVZBL	#90,RECCNT		; starting rec #
CHKNXT:	BSBW	GTCHK2
	INCL	RECCNT
	MOVL	R6,R7			; check character
	BSBW	GTCHK2A
	INCL	RECCNT
	CMPW	RECCNT,#1001		; all done?
	BEQL	10$
	BSBW	GTCHK2
	ADDW	#99,RECCNT
	BRB	CHKNXT
10$:	$GET	R11
	CMPL	R0,#RMS$_EOF
	BNEQ	20$
	RSB
20$:
	$WAIT	RAB=CMDORAB
	PUSHL	R10			; save it
	MOVL	R11,R10			; bad structure!!!
	BSBW	EOFPUT
	POPR	#^M<R10>
	MBPT
	RSB

	.END
