	.TITLE	TST10B
	.IDENT	/V03000/
	.PSECT	TST10B
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; VERSION X01
;
; WRITTEN BY LOUIS REICH, FEBRUARY, 1973
; MODIFIED BY TOM MILLER FOR RSX-11M, SEPTEMBER,1974
; MODIFIED BY LARRY JONES FOR VAX/VMS, APRIL,1978
;+
;
; MODULE 'TST10B' IS PART OF TST10 OF THE RSX-11M TEST SYSTEM,
; DESIGNED TO TEST THE FOLLOWING RSX-11M SYSTEM DIRECTIVES:
;	SEND DATA
;	RECEIVE DATA
;	SPECIFY RECEIVE AST
;	RECEIVE DATA OR EXIT
;
;-
	.PAGE
	.MCALL	CALL,RCVD$,CLEF$S,WTSE$S,DECL$S,EXIT$S,SETF$S,SPND$S
	.MCALL	RCVX$,ASTX$S,SRDA$,DSAR$S,ENAR$S,DECL$S
;
; LOCAL DATA
;
TST10A:	.RAD50	/TST10A/
TST10X:	.RAD50	/10X/
BDDPB1:	.BYTE	75.,1
GDDPB1:	.BYTE	75.,4
BDDPB2:	.BYTE	77.,1
GDDPB2:	.BYTE	77.,4
RBLK:	.BLKW	15.
	.NLIST	BEX
SBLK1:	.ASCII	/1BCDEFGHIJKLMNOPQRSTUVWXYZ/
SBLK2:	.ASCII	/2B/
SBLK3:	.ASCII	/3B/
LEM1:	.ASCIZ	/%NRECEIVED DATA NOT THE SAME AS SENT DATA/
LEM2:	.ASCIZ	/%NSENT DATA NOT RECEIVED IN FIRST IN FIRST OUT ORDER/
LEM3:	.ASCIZ	/%NSENDER'S NAME WRONG IN RECEIVE BLOCK/
LEM4:	.ASCIZ	/%NSPECIFIED RECEIVE DATA AST WAS NOT EXECUTED/
LEM5:	.ASCIZ	/%NAN ILLEGALLY SPECIFIED RECEIVE DATA AST WAS EXECUTED/
LEM6:	.ASCIZ	/%NATTEMPT TO UNSPECIFY RECEIVE DATA AST FAILED/
LEM7:	.ASCIZ	/%NRECEIVE DATA OR EXIT FAILED TO EXIT/
	.LIST	BEX
	.EVEN
	.PAGE
;
; THIS PSECT CONTAINS ONLY DPB'S
;

	.PSECT	$DPB$$
RVDDPB:	RCVD$	,RBLK
SPDPB:	SRDA$	RDAST
RVXDPB:	RCVX$	,RBLK
	.PAGE
	.PSECT	TST10B
;+
;
; THE FIRST SET OF STEPS TESTS THE RECEIVE DATA
; DIRECTIVE. TST10A HAS SENT THREE BLOCKS
; TO TST10B. THE FIRST SERIES OF STEPS CHECKS THE VALIDITY AND 
; ORDERING OF THE DATA BLOCKS.
;
;-
	$$TEST	10,B
	SPND$S			; WAIT FOR REQUEST FROM TST10A
	MOV	#RVDDPB,R3	;GET ADDRESS OF RECEIVE DPB
	DIR$	R3,.RJCT	;INVOKE RECEIVE DPB
	CALL	.SUCC		;CHECK FOR VALID RETURN CODE
	MOV	#SBLK1,R0	;GET SBLK1 ADDRESS
	MOV	#RBLK+4,R1	;GET RECEIVED DATA ADDRESS
	MOV	#13,R2		;PUT WORD COUNT IN R2
LP1:	CMP	(R0)+,(R1)+	;COMPARE SENT AND RECEIVED DATA
	BNE	ERR1		;IF DIFFERENT, OUTPUT ERROR MESSAGE
	SOB	R2,LP1		;CHECK WORD COUNT
	BR	OK		;IF OK CONTINUE TESTING
ERR1:	CALL	.IDOUT		;GET STEP ID
	MOV	#LEM1,R1	;GET ADDRESS OF MESSAGE FORMAT
	CALL	.PRTMG		;OUTPUT ERROR MESSAGE
;+
;
; THE NEXT STEP TESTS THAT THE ORDERING OF THE SENT AND RECEIVED
; BLOCKS WAS FIFO.
;
;-
OK:
	$$STEP
	DIR$	R3,.RJCT	;INVOKE RECEIVE DATA DIRECTIVE
	CMP	SBLK2,RBLK+4	;CHECK FIRST WORD OF DATA
	BNE	ERR2A		;IF NOT EQUAL GO TO ERROR ROUTINE
	DIR$	R3,.RJCT	;INVOKE RECEIVE DIRECTIVE
	CMP	SBLK3,RBLK+4	;CHECK FIRST WORD OF DATA
	BNE	ERR2B		;IF NOT EQUAL GO TO ERROR ROUTINE
	BR	OK0		;IF OK CONTINUE TESTING
ERR2A:	DIR$	R3,.RJCT	;EMPTY  RECEIVE QUEUE
ERR2B:	CALL	.IDOUT		;GET STEP ID
	MOV	#LEM2,R1	;GET ADDRESS OF MESSAGE FORMAT
	CALL	.PRTMG		;OUTPUT ERROR MESSAGE
;+
;
; THE NEXT STEP CHECKS THAT THE SENDING PROGRAM'S TASK NAME IS IN
; THE FIRST TWO WORDS OF THE RECEIVE BLOCK,AND THEN DOES A RECEIVE
; WITH NO DATA QUEUED. IT THEN GOES INTO WAIT TO ALLOW TST10A TO
; CONTINUE TESTING OF THE SEND DATA DIRECTIVE.
;
;-
OK0:
	$$STEP
	CMP	TST10A,RBLK	;COMPARE FIRST WORD OF TASKNAME
	BNE	ERR3		;IF NOT EQUAL OUTPUT ERROR MESSAGE
	CMP	TST10A+2,RBLK+2	;COMPARE SECOND WORD OF NAMES
	BEQ	OK1		;IF EQUAL CONTINUE TESTING
ERR3:	CALL	.IDOUT		;GET STEP ID
	MOV	#LEM3,R1	;GET ADDRESS OF MESSAGE FORMAT
	CALL	.PRTMG		;OUTPUT ERROR MESSAGE
OK1:	DIR$	R3		;INVOKE RECEIVE DIRECTIVE
	MOV	#IE.ITS,R1	;PUT EXPECTED RETURN CODE IN R1
	CALL	.FAIL		;CHECK RETURN CODE
	CLEF$S	#47.,.RJCT	;CLEAR EF47 (FLAG SPECIFIED IN SEND
				;DIRECTIVE IN TST10A)
	SETF$S	#48.,.RJCT	;SET EF48
	DECL$S	,.RJCT		;DECLARE SIGNIFICANT EVENT
	WTSE$S	#47.,.RJCT	;WAIT FOR NEXT SEND
	.PAGE
;+
;
; THE NEXT SET OF STEPS WILL CHECK ERROR CONDITIONS OF THE RECEIVE DATA
;DIRECTIVE.  FIRST A BAD DPB SIZE.
;
;-
	$$STEP
	MOV	BDDPB1,(R3)	;PUT BAD DPB SIZE INTO DPB
	DIR$	R3		;INVOKE RECEIVE DATA DIRECTIVE
	MOV	#IE.SDP,R1	;PUT EXPECTED ERROR CODE IN R1
	CALL	.FAIL		;CHECK RETURN CODE
	MOV	GDDPB1,(R3)	;RESTORE DPB
;+
;
; NEXT AN ODD RECEIVING BLOCK ADDRESS
;
;-
	CALL	$ADCHK		;IS SYSTEM PERFORMING ADDRESS CHECKING?
	BCS	NADCK1		;IF NOT, SKIP TESTS REQUIRING CHECKING
	$$STEP
	INC	R.VDBA(R3)	;PUT ODD RECEIVE BLOCK ADDRESS IN DPB
	DIR$	R3		;INVOKE RECEIVE DIRECTIVE
	MOV	#IE.ADP,R1	;PUT EXPECTED ERROR CODE IN R1
	CALL	.FAIL		;CHECK ERROR CODE
	DEC	R.VDBA(R3)	;RESTORE DPB
NADCK1:
	.PAGE
;+
;
; THE NEXT STEP DOES A GOOD RECEIVE TO MAKE SURE THAT THE 
; BLOCK SENT BY TST10A IS STILL QUEUED. IT THEN BEGINS THE
; TESTING OF THE SPECIFY RECEIVE DATA AST DIRECTIVE.  FIRST
; A VALID CALL TO THE DIRECTIVE, SPECIFYING AN AST ROUTINE.
;
;-
	$$STEP
	DIR$	R3,.RJCT	;MAKE SURE SENT BLOCK IS STILL THERE
	MOV	#SPDPB,R4	;LOAD SPECIFY DPB ADDRESS IN R4
	DIR$	R4		;INVOKE IT
	CALL	.SUCC		;CHECK FOR VALID RETURN CODE
;+
;
; NOW WE WILL HAVE TST10A SEND A MESSAGE AND SEE IF THE SPECIFIED
; AST IS EXECUTED.  TO SEE IF IT WAS EXECUTED, EF10 IS CLEARED AND
; IF THE AST IS EXECUTED IT WILL SET IT.
;
;-
	$$STEP
	CLEF$S	#10.,.RJCT	;INITIALLY CLEAR EF10
	CLEF$S	#47.,.RJCT	;CLEAR EF47 FOR MESSAGE WAIT
	SETF$S	#48.,.RJCT	;SIGNAL TST10A TO SEND MESSAGE
	DECL$S	,.RJCT		;DECLARE SIGNIFICANT EVENT
	WTSE$S	#47.,.RJCT	;WAIT FOR MESSAGE
	BR	OK2		;PROCEED
	.PAGE
;+
;
; THIS IS THE RECEIVE DATA AST ROUTINE.  IT FIRST SETS EF10 TO SHOW
; THAT IT WAS EXECUTED.  THEN IT ATTEMPTS TO SPECIFY ANOTHER AST
; ROUTINE TO CHECK AN ERROR CONDITION OF THE SPECIFY RECEIVE DATA
; AST DIRECTIVE.
;
;-
RDAST:
	$$STEP
	SETF$S	#10.,.RJCT	;SHOW ROUTINE WAS EXECUTED
	MOV	#ERRAST,S.RDAE(R4) ;CHANGE ADDRESS IN DPB
	DIR$	R4		;INVOKE IT
	MOV	#IE.AST,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK RETURNED ERROR CODE
	ASTX$S	.RJCT		;RETURN FROM AST TO PROGRAM
;+
;
; THIS IS THE AST SPECIFIED IN ERRONEOUS CALLS TO THE SPECIFY
; RECEIVE DATA AST DIRECTIVE.  THEREFORE IF THIS AST IS EVER EXECUTED
; IT SIMPLY PRINTS AN ERROR MESSAGE AND RETURNS
;
;-
ERRAST:	CALL	.IDOUT		;IDENTIFY STEP
	MOV	#LEM5,R1	;PASS ERROR MESSAGE ADDRESS
	CALL	.PRTMG		;AND PRINT IT
	ASTX$S	.RJCT		;RETURN
	.PAGE
;+
;
; IN THIS STEP THE MESSAGE IS RECEIVED AND A CHECK IS MADE TO SEE IF
; THE AST ROUTINE WAS EXECUTED, THAT IS, SEE IF EF10 IS SET
;
;-
OK2:
	$$STEP
	DIR$	R3,.RJCT	;FIRST READ THE MESSAGE
	CLEF$S	#10.,.RJCT	;USE CLEAR FLAG TO READ EF10
	CMP	$DSW,#IS.SET	;WAS IT SET?
	BEQ	OK3		;OK IF IT WAS
	CALL	.IDOUT		;OTHERWISE, IDENTIFY STEP
	MOV	#LEM4,R1	;PASS ERROR MESSAGE ADDRESS
	CALL	.PRTMG		;AND PRINT IT
;+
;
; HERE WE ATTEMPT TO SPECIFY AN AST ROUTINE WHILE ASTS ARE
; DISABLED TO TEST ANOTHER ERROR CONDITION OF THE DIRECTIVE.
;
;-
OK3:
	$$STEP
	DSAR$S	.RJCT		;DISABLE ASTS
	MOV	#ERRAST,S.RDAE(R4) ;SET ROUTINE ADDRESS IN DPB
	DIR$	R4		;INVOKE DIRECTIVE
	MOV	#IE.AST,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
	ENAR$S	.RJCT		;ENABLE ASTS
	.PAGE
;+
;
; IN THIS STEP WE DESPECIFY THE RECEIVE DATA AST ROUTINE.
;
;-
	$$STEP
	CLR	S.RDAE(R4)	;CLEAR ADDRESS FIELD
	DIR$	R4,.RJCT	;UNSPECIFY
	CALL	.SUCC		;CHECK FOR VALID RETURN CODE
;+
;
; NOW SIGNAL TST10A TO SEND A MESSAGE
;
;-
	$$STEP
	CLEF$S	#47.,.RJCT	;PREPARE FOR WAIT
	SETF$S	#48.,.RJCT	;SIGNAL TST10A TO SEND
	DECL$S	,.RJCT		;DECLARE SIGNIFICANT EVENT
	WTSE$S	#47.,.RJCT	;WAIT FOR IT
;+
;
; NOW WE WILL SEE IF THE AST ROUTINE WAS EXECUTED BY MAKING SURE
; EF10 IS STILL CLEAR.
;
;-
	$$STEP
	DIR$	R3,.RJCT	;RECEIVE THE MESSAGE
	CLEF$S	#10.,.RJCT	;USE CLEAR FLAG TO READ EF10
	CMP	$DSW,#IS.CLR	;WAS IT STILL CLEAR?
	BEQ	OK4		;IF IT WAS CONTINUE
	CALL	.IDOUT		;OTHERWISE IDENTIFY STEP
	MOV	#LEM6,R1	;PASS ERROR MESSAGE ADDRESS
	CALL	.PRTMG		;PRINT IT
	.PAGE
;+
;
; NOW TRY TO UNSPECIFY THE AST ROUTINE AGAIN
;
;-
OK4:
	$$STEP
	DIR$	R4		;UNSPECIFY
	MOV	#IE.ITS,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK IT
;+
;
; NOW WITH AN INVALID DPB SIZE
;
;-
	$$STEP
	MOVB	#3,1(R4)	;MOVE IN INCORRECT SIZE
	DIR$	R4
	MOV	#IE.SDP,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK IT
	.PAGE
;+
;
; THE NEXT SERIES OF STEPS TESTS THE RECEIVE DATA OR EXIT DIRECTIVE
; FIRST WE WILL TRY A BAD DPB SIZE.
;
;-
	$$STEP
	MOV	#RVXDPB,R3	;LOAD DPB ADDRESS IN R3
	MOV	BDDPB2,(R3)	;MOVE IN WRONG SIZE
	DIR$	R3		;INVOKE DIRECTIVE
	MOV	#IE.SDP,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
	MOV	GDDPB2,(R3)	;RESTORE
;+
;
; NEXT AN ODD RECEIVE BLOCK ADDRESS
;
;-
	CALL	$ADCHK		;IS SYSTEM PERFORMING ADDRESS CHECKING?
	BCS	NADCK2		;IF NOT, SKIP TESTS REQUIRING CHECKING
	$$STEP
	INC	R.VXBA(R3)	;PUT ODD RECEIVE BLOCK ADDRESS IN DPB
	DIR$	R3
	MOV	#IE.ADP,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK	RETURN CODE
	DEC	R.VXBA(R3)	;RESTORE DPB
NADCK2:
;+
;
; THE NEXT STEP SIGNALS TST10A TO SEND ANOTHER MESSAGE.  IT THEN
; RECEIVES THIS MESSAGE WITH THE RECEIVE DATA OR EXIT DIRECTIVE.
;
;-
	$$STEP
	CLEF$S	#47.,.RJCT	;PREPARE FOR WAIT
	SETF$S	#48.,.RJCT	;SIGNAL TST10A
	DECL$S	,.RJCT		;DECLARE SIGNIFICANT EVENT
	WTSE$S	#47.,.RJCT	;WAIT FOR SEND
	DIR$	R3,.RJCT	;INVOKE DIRECTIVE
	CALL	.SUCC		;CHECK FOR VALID RETURN CODE
	SETF$S	#48.,.RJCT	;SIGNAL THAT MESSAGE WAS RECEIVED
				;WITHOUT EXIT
;+
;
; NOW THERE SHOULD BE NO MESSAGES PENDING.  INVOKING THE SHOULD
; CAUSE TST10B TO EXIT.  IF THE EXIT DOES NOT OCCUR, THEN AN ERROR
; MESSAGE IS PRINTED AND TST10B EXITS THEN.
;
;-
	$$STEP
	DIR$	R3,.RJCT	;INVOKE RECEIVE OR EXIT
	CALL	.IDOUT		;IF NO EXIT THEN PRINT STEP ID
	MOV	#LEM7,R1	;PASS ERROR MESSAGE ADDRESS
	CALL	.PRTMG		;OUTPUT ERROR MESSAGE
	EXIT$S	.RJCT
	.END	STP0
