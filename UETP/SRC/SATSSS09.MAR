	.TITLE	SATSSS09 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS09 module tests the execution of the following
;		VMS system services:
;
;		$FAO
;		$FAOL
;
;
; ENVIRONMENT:	User and Kernal mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: SEP, 1979
;
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	.LIBRARY /SYS$LIBRARY:STARLET.MLB/
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$STSDEF
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
	NUL = 00
	CR  = 13
	LF  = 10
	TAB = 09
	FF  = 12
;
; MACROS
;
	.MACRO FAONTST CS,RS,RSL,TYPE
		.IF NOT_EQUAL %LENGTH(TYPE)
			$FAOL_S	CTRSTR = W^CS,-
				OUTLEN = W^LEN,-
				OUTBUF = W^BUFFER,-
				PRMLST = W^PARAM	; try _S
		.IF_FALSE
		MOVAL	W^PL6+8,R10		; set the arg pntr
		PUSHL	#0			; push a dummy parameter
		CALLS	#1,W^REG_SAVE		; save a reg snapshot
			$FAO_S	CTRSTR = W^CS,-
				OUTLEN = W^LEN,-
				OUTBUF = W^BUFFER,-
				    P1 = -(R10),-
				    P2 = -(R10),-
				    P3 = -(R10),-
				    P4 = -(R10),-
				    P5 = -(R10),-
				    P6 = -(R10)	; try _S
		MOVAL	W^PL6+8,R10		; reset the parameter pntr
		.ENDC
		FAIL_CHECK SS$_NORMAL		; check success
		.LIST MEB
		MOVAL	W^RS,R7		; set good data adr
		MOVL	#RSL,R8		; set byte count
		CALLS	#0,W^BUF_CHECK		; check results
		MOVAL	W^CS,W^FAO'TYPE'P+FAO$_CTRSTR ; set new cntrl str
		PUSHL	#0			; push a dummy parameter
		CALLS	#1,W^REG_SAVE		; save a reg snapshot
		$FAO'TYPE'_G W^FAO'TYPE'P		; try _G
		FAIL_CHECK SS$_NORMAL			; check success
	.LIST MEB
		CALLS	#0,W^BUF_CHECK			; check results
		.NLIST MEB
		.ENDM	FAONTST
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS09/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS09/		; module name
TEST_MOD_BEGIN:				; start end and fail messages
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
CS1:					; failure messages
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS4:
	.ASCID	\Required channel not received.\
CS5:
	.ASCID	\Mode was !AS.\
CS6:
	.ASCID	\Expected byte offset !UB(10) = !XB(16) received !XB(16).\
UM:					; mode message
	.ASCID	\user\
FAO:
	.ASCIC	/FAO/			; service names
FAOL:
	.ASCIC	/FAOL/
EXP:
	.ASCID	\status\
MSGVEC:
	.LONG	3			; PUTMSG message vector
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
STR1:					; string variables
	.ASCIC	/TEST/
STR2:
	.ASCII	/TEST/<NUL>
	STR2L=.-STR2
STR3:
	.ASCID	/TEST/
PL1:					; parameter list
	.ADDRESS STR1
	.ADDRESS STR1
PL2:
	.LONG	STR2L
	.ADDRESS STR2
	.LONG	STR2L
	.ADDRESS STR2
PL3:
	.ADDRESS STR3
	.ADDRESS STR3
PL4:
	.LONG	0		; smallest byte value
	.LONG	^XFF		; largest byte value
PL5:
	.LONG	0		; smallest word value
	.LONG	^XFFFF		; largest word value
PL6:
	.LONG	0		; smallest long word value
	.LONG	-1		; largest long word value
PL7:
	.LONG	1		; a one
	.LONG	0		; a zero
;
FCS1:				; control strings
	.LONG	FCS1L
	.ADDRESS .+4
	.ASCII	/A!ACB!-!2(AC)C!2(-)!3ACD!-!2(3AC)/
	.ASCII	/E!ADF!2(-)!2(AD)G!4(-)!3ADH!2(-)!2(3AD)!4(-)/
	.ASCII	/I!AFJ!2(-)!2(AF)K!4(-)!3AFL!2(-)!2(3AF)/
	.ASCII	/M!ASN!-!2(AS)O!2(-)!3ASP!-!2(3AS)Q/
	FCS1L=.-FCS1-8
FCS2:
	.LONG	FCS2L
	.ADDRESS .+4
	.ASCII	/A!OBB!-!2(OB)C!2(-)!2OBD!-!2(2OB)/
	.ASCII	/E!OWF!-!2(OW)G!2(-)!3OWH!-!2(3OW)/
	.ASCII	/I!OLJ!-!2(OL)K!2(-)!3OLL!-!2(3OL)M/
	FCS2L=.-FCS2-8
FCS3:
	.LONG	FCS3L
	.ADDRESS .+4
	.ASCII	/A!XBB!-!2(XB)C!2(-)!1XBD!-!2(1XB)/
	.ASCII	/E!XWF!-!2(XW)G!2(-)!3XWH!-!2(3XW)/
	.ASCII	/I!XLJ!-!2(XL)K!2(-)!3XLL!-!2(3XL)M/
	FCS3L=.-FCS3-8
FCS4:
	.LONG	FCS4L
	.ADDRESS .+4
	.ASCII	/A!ZBB!-!2(ZB)C!2(-)!3ZBD!-!2(3ZB)/
	.ASCII	/E!ZWF!-!2(ZW)G!2(-)!3ZWH!-!2(3ZW)/
	.ASCII	/I!ZLJ!-!2(ZL)K!2(-)!3ZLL!-!2(3ZL)M/
	FCS4L=.-FCS4-8
FCS5:
	.LONG	FCS5L
	.ADDRESS .+4
	.ASCII	/A!UBB!-!2(UB)C!2(-)!3UBD!-!2(3UB)/
	.ASCII	/E!UWF!-!2(UW)G!2(-)!3UWH!-!2(3UW)/
	.ASCII	/I!ULJ!-!2(UL)K!2(-)!3ULL!-!2(3UL)M/
	FCS5L=.-FCS5-8
FCS6:
	.LONG	FCS6L
	.ADDRESS .+4
	.ASCII	/A!SBB!-!2(SB)C!2(-)!3SBD!-!2(3SB)/
	.ASCII	/E!SWF!-!2(SW)G!2(-)!3SWH!-!2(3SW)/
	.ASCII	/I!SLJ!-!2(SL)K!2(-)!3SLL!-!2(3SL)M/
	FCS6L=.-FCS6-8
FCS7:
	.ASCID	\A!/B!_C!^D!!E!%SF!UB!-G!%SH!5*AI!#*B!-J!+!XBK\
FCS8:
	.ASCID	/!23%D!-!11%T/
;
RS1:				; resultant strings
	.ASCII	/ATESTBTESTTESTCTESDTESTES/
	.ASCII	/ETEST/<NUL>/FTEST/<NUL>/TEST/<NUL>/GTESHTESTES/
	.ASCII	/ITEST.JTEST.TEST.KTESLTESTES/
	.ASCII	/MTESTNTESTTESTOTESPTESTESQ/
	RS1L=.-RS1
RS2:
	.ASCII	/A000B000377C00D0077/
	.ASCII	/E000000F000000177777G000H000777/
	.ASCII	/I00000000000J0000000000037777777777K000L000777M/
	RS2L=.-RS2
RS3:
	.ASCII	/A00B00FFC0D0F/
	.ASCII	/E0000F0000FFFFG000H000FFF/
	.ASCII	/I00000000J00000000FFFFFFFFK000L000FFFM/
	RS3L=.-RS3
RS4:
	.ASCII	/A0B0255C000D000255/
	.ASCII	/E0F065535G000H000***/
	.ASCII	/I0J04294967295K000L000***M/
	RS4L=.-RS4
RS5:
	.ASCII	/A0B0255C  0D  0255/
	.ASCII	/E0F065535G  0H  0***/
	.ASCII	/I0J04294967295K  0L  0***M/
	RS5L=.-RS5
RS6:
	.ASCII	/A0B0-1C  0D  0 -1/
	.ASCII	/E0F0-1G  0H  0 -1/
	.ASCII	/I0J0-1K  0L  0 -1M/
	RS6L=.-RS6
RS7:
	.ASCII	/A/<CR><LF>/B/<TAB>/C/<FF>/D!ESF1GHAAAAAIBJ00K/
	RS7L=.-RS7
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG			; put it on a long word boundry
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
MODE:
	.LONG	0			; current mode string pointer
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF1
BUF:
	.BLKB	256
BUF1:
	.BLKB	80
LEN:
	.LONG	0
	.ADDRESS BUF
TLEN:
	.LONG	0
BUFFER:
	.LONG	256
	.ADDRESS BUF
PARAM:
	A=PL1
	.REPT 8
	.ADDRESS A
	A=A+4
	.ENDR
CTRSTR:
	.LONG	132			; same as above
	.ADDRESS .+4
	.BLKB	132
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF1
SERV_NAME:
	.LONG	0			; service name pointer
MSGVEC1:				; PUTMSG message vector
	.LONG	3
	.LONG	UETP$_TEXT
	.LONG	1
	.LONG	0
FAOP:
	$FAO	FCS1,LEN,BUFFER,PL1,PL1+4,PL2,PL2+4,PL2+8,PL2+12,PL3,PL3+4
FAOLP:
	$FAOL	FCS1,LEN,BUFFER,PARAM
PL8:
	.QUAD	0			; time parameter
RS8:
	.LONG	24
	.ADDRESS .+4
	.BLKB	24
.PAGE
	.PSECT	SATSSS09,RD,WRT,EXE,LONG
	.SBTTL	SATSSS09
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS09  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS09.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS09 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS09 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS09 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS09 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--

	TEST_START SATSSS09			; let the test begin
	.SBTTL FAO TESTS
;+
;
; $FAO tests
;
; test ascii directives
;
;-
	MOVAL	W^FAO,W^SERV_NAME		; set service name
	MOVAL	W^UM,W^MODE			; set the mode
	MOVAL	W^PL3+8,R10			; set param pointer
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAO_S	CTRSTR = W^FCS1,-
		OUTLEN = W^LEN,-
		OUTBUF = W^BUFFER,-
		    P1 = -(R10),-
		    P2 = -(R10),-
		    P3 = -(R10),-
		    P4 = -(R10),-
		    P5 = -(R10),-
		    P6 = -(R10),-
		    P7 = -(R10),-
		    P8 = -(R10)			; try _S
	MOVAL	W^PL1,W^REG_SAVE_AREA+32	; fix the reg_save_area for R10
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^BUF,R6			; set buffer adr
	MOVAL	W^RS1,R7			; set good data adr
	MOVL	#RS1L,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
	MOVC3	#32,W^PL1,W^FAOP+FAO$_P1	; set the param list
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAO_G	W^FAOP				; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^BUF_CHECK			; check results
;+
;
; test octal conversion, zero filled directives
;
;-
	NEXT_TEST
	MOVC3	#24,W^PL4,W^FAOP+FAO$_P1	; set new parameters
	.LIST MEB
	FAONTST	FCS2,RS2,RS2L
;+
;
; test hex conversion, zero filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS3,RS3,RS3L
;+
;
; test unsigned decimal, zero filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS4,RS4,RS4L
;+
;
; test unsigned decimal, blank filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS5,RS5,RS5L
;+
;
; test signed decimal, blank filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS6,RS6,RS6L
;+
;
; test output string formatting and parameter interpretation directives
;
;-
	NEXT_TEST
	$FAO_S	CTRSTR = W^FCS7,-
		OUTLEN = W^LEN,-
		OUTBUF = W^BUFFER,-
		    P1 = W^PL7,-
		    P2 = W^PL7+4		; try _S
	FAIL_CHECK SS$_NORMAL
	MOVAL	W^RS7,R7			; set good data address
	MOVL	#RS7L,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
	MOVAL	W^FCS7,W^FAOP+FAO$_CTRSTR	; set new cntrl string
	MOVL	W^PL7,W^FAOP+FAO$_P1		; set new parameters
	MOVL	W^PL7+4,W^FAOP+FAO$_P2
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAO_G	W^FAOP				; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^BUF_CHECK			; check results
;+
;
; test %D and %T directives
;
;-
	NEXT_TEST
	$GETTIM_S TIMADR=W^PL8			; get a binary time
	$ASCTIM_S TIMBUF=W^RS8,-
		  TIMADR=W^PL8,-
		  TIMLEN=W^TLEN			; make it ascii for result string
	MOVC3	#11,W^RS8+8+12,W^RS8+8+23	; copy the time parameter
	ADDL2	#11,W^RS8			; fix the descriptor
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAO_S	CTRSTR = W^FCS8,-
		OUTLEN = W^LEN,-
		OUTBUF = W^BUFFER,-
		    P1 = #PL8			; try _S
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^RS8+8,R7			; set good data adr
	MOVL	W^TLEN,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
	MOVAL	W^FCS8,W^FAOP+FAO$_CTRSTR 	; set cntrl str address
	MOVAL	W^PL8,W^FAOP+FAO$_P1		; set parameter list
	PUSHL	#0				; push dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAO_G	W^FAOP				; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^BUF_CHECK			; check results
	MOVC3	#32,W^PL1,W^PARAM		; set FAOL parameters

	.SBTTL	FAOL TESTS
;+
;
; $FAOL tests
;
; test ascii directives
;
;-
	NEXT_TEST
	MOVAL	W^FAOL,W^SERV_NAME		; set service name
	$FAOL_S	CTRSTR = W^FCS1,-
		OUTLEN = W^LEN,-
		OUTBUF = W^BUFFER,-
		PRMLST = W^PARAM		; _S
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^RS1,R7			; set good data adr
	MOVL	#RS1L,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAOL_G	W^FAOLP				; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^BUF_CHECK			; check results
;+
;
; test octal conversion, zero filled directives
;
;-
	NEXT_TEST
	MOVC3	#24,W^PL4,W^PARAM		; set new parameters
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	.LIST MEB
	FAONTST FCS2,RS2,RS2L,L
;+
;
; test hex conversion, zero filled  directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS3,RS3,RS3L,L
;+
;
; test unsigned decimal, zero filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS4,RS4,RS4L,L
;+
;
; test unsigned decimal, blank filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST FCS5,RS5,RS5L,L
;+
;
; test signed decimal, blank filled directives
;
;-
	NEXT_TEST
	.LIST MEB
	FAONTST	FCS6,RS6,RS6L,L
	MOVL	W^PL7,W^PARAM			; set the new params
	MOVL	W^PL7+4,W^PARAM+4
;+
;
; test output string formatting and parameter interpretation directives
;
;-
	NEXT_TEST
	$FAOL_S	CTRSTR = W^FCS7,-
		OUTLEN = W^LEN,-
		OUTBUF = W^BUFFER,-
		PRMLST = W^PARAM		; try _S
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^RS7,R7			; set good data adr
	MOVL	#RS7L,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
	PUSHL	#0				; push a dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	MOVAL	W^FCS7,W^FAOLP+FAOL$_CTRSTR	; set new control string
	$FAOL_G	W^FAOLP				; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^BUF_CHECK			; check results
;+
;
; test %D and %T directives
;
;-
	NEXT_TEST
	$GETTIM_S TIMADR=W^PL8			; get a binary time
	$ASCTIM_S TIMBUF=W^RS8,-
		  TIMADR=W^PL8,-
		  TIMLEN=W^TLEN			; make it ascii for result string
	MOVC3	#11,W^RS8+8+12,W^RS8+8+23	; copy the time parameter
	ADDL2	#11,W^RS8			; fix the descriptor
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	MOVAL	W^PL8,W^PARAM			; set the param list
	$FAOL_S	CTRSTR = W^FCS8,-
		OUTLEN = W^LEN,-
		OUTBUF = W^BUFFER,-
		PRMLST = W^PARAM		; try _S
	FAIL_CHECK SS$_NORMAL			; check success
	MOVAL	W^RS8+8,R7			; set good data adr
	MOVL	W^TLEN,R8			; set byte count
	CALLS	#0,W^BUF_CHECK			; check results
	MOVAL	W^FCS8,W^FAOLP+FAOL$_CTRSTR 	; set cntrl str address
	PUSHL	#0				; push dummy param
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$FAOL_G	W^FAOLP				; try _G
	FAIL_CHECK SS$_NORMAL			; check success
	CALLS	#0,W^BUF_CHECK			; check results
	TEST_END
.PAGE
	.SBTTL BUF_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check the contents of a buffer against known good 
;	data.
;
; CALLING SEQUENCE:
;	CALLS #0,W^BUF_CHECK		; check buffer
;
; INPUT PARAMETERS:
;	R6 = buffer address
;	R7 = good data address
;	R8 = byte count
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

BCSD:
	.LONG	80
	.ADDRESS BCBUF
BCBUF:
	.BLKB	80
BCOSD:
	.LONG	0
	.ADDRESS BCBUF
PARAM1:
	.BLKL	3
;
BUF_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	R6,R9				; save a copy of the buffer address
	CMPC3	R8,(R7),(R6)			; check the buffer
	BEQL	10$				; br if good
	MOVAL	B^PARAM1,R10			; set parameter pointer
	MOVZBL	(R3),(R10)+			; save bad data
	MOVZBL	(R1),(R10)+			; save good data
	SUBL3	R9,R3,(R10)+			; save byte offset
	MOVAL	B^PARAM1,R10			; reset address pointer
	$FAO_S	CTRSTR = W^CS6,-
		OUTLEN = W^BCOSD,-
		OUTBUF = W^BCSD,-
		    P1 = (R10)+,-
		    P2 = (R10)+,-
		    P3 = (R10)+			; make the string
	PUSHAL	B^BCOSD				; push the string variable
	CALLS	#1,W^PRINT_FAIL			; print the failure
10$:
	RET					; return
.PAGE
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)			; set number past R0-R1 and save
	BICL2	#3,R1				; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; Mode	#3	PUSHAL STRING_VAR
;		CALLS #1,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	CMPB	(AP),#1				; is this just a message?
	BEQL	20$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	30$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
	BRB	30$				; goto output message
20$:
	MOVL	4(AP),W^MSGVEC1+12		; save string address
	$PUTMSG_S W^MSGVEC1			; print the message
	BRB	40$				; skip the other message
30$:
	$PUTMSG_S W^MSGVEC			; print the message
40$:
	CALLS	#0,W^MODE_ID			; identify the mode
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MODE_ID
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to identify the mode that an exit handler is in.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^MODE_ID
;
; INPUT PARAMETERS:
;	MODE contains an address pointing to an ascii string desc.
;	of the current CPU mode.
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

MODE_ID:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS5,W^MESSAGEL,W^MSGL,MODE ; format the error message
	$PUTMSG_S W^MSGVEC		; print the mode message
	RET

.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSS09
