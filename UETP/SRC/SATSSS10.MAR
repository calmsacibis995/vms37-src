	.TITLE	SATSSS10 - SATS SYSTEM SERVICE TESTS  (SUCC S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSS10 module tests the execution of the following
;		VMS system services:
;
;		$GETMSG
;		$PUTMSG
;
;
; ENVIRONMENT:	User mode image.
;		Needs CMKRNL privilege and dynamically acquires other
;		privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: JULY, 1978
;
; MODIFIED BY:
;
;	V03-002	LDJ0002		Larry D. Jones,		14-Dec-1981
;		Modified to conform to new $PUTMSG argument modification which
;		made a BR out of range error in routine CHECK_RESULTS.
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	$PRVDEF				; privilege definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$STSDEF				; STS definitions
	$UETPDEF			; UETP message definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
;
; MACROS
;
.PAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSS10/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID /SATSSS10/		; module name
TEST_MOD_BEGIN:
	.ASCIC	/begun/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
GETMSG:
	.ASCIC	/GETMSG/
PUTMSG:
	.ASCIC	/PUTMSG/
CS1:
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
CS4:
	.ASCID	\Expected= !AS!/-UETP-I-TEXT, Received= !AS\
EXP:
	.ASCID	\status\
LEN:
	.ASCID	\length\
OUT:
	.ASCID	\OUTADR\
MSGID:
	.LONG	UETP$_DDB		; message ID used in the tests
MSGVEC:
	.LONG	3			; PUTMSG message vector
	.LONG	UETP$_TEXT
	.LONG	1
	.ADDRESS MESSAGEL
MSGTBL:
	.ADDRESS M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15
MSGTBL1:
	.ADDRESS M23,M16,M2,M17,M4,M18,M6,M19,M8,M20,M10,M21,M12,M22,M14,M23,M24
	.NLIST BINARY
M1:
	.ASCIC	/UETINIT00 DDB 0 !AS 00000000 00000000/
M2:
	.ASCIC	/%DDB/
M3:
	.ASCIC	/%DDB, UETINIT00 DDB 0 !AS 00000000 00000000/
M4:
	.ASCIC	/%S/
M5:
	.ASCIC	/%S, UETINIT00 DDB 0 !AS 00000000 00000000/
M6:
	.ASCIC	/%S-DDB/
M7:
	.ASCIC	/%S-DDB, UETINIT00 DDB 0 !AS 00000000 00000000/
M8:
	.ASCIC	/%UETP/
M9:
	.ASCIC	/%UETP, UETINIT00 DDB 0 !AS 00000000 00000000/
M10:
	.ASCIC	/%UETP-DDB/
M11:
	.ASCIC	/%UETP-DDB, UETINIT00 DDB 0 !AS 00000000 00000000/
M12:
	.ASCIC	/%UETP-S/
M13:
	.ASCIC	/%UETP-S, UETINIT00 DDB 0 !AS 00000000 00000000/
M14:
	.ASCIC	/%UETP-S-DDB/
M15:
	.ASCIC	/%UETP-S-DDB, UETINIT00 DDB 0 !AS 00000000 00000000/
M16:
	.ASCIC	/UETINIT00 DDB 0 TDA 00000000 00000000/
M17:
	.ASCIC	/%DDB, UETINIT00 DDB 0 TDA 00000000 00000000/
M18:
	.ASCIC	/%S, UETINIT00 DDB 0 TDA 00000000 00000000/
M19:
	.ASCIC	/%S-DDB, UETINIT00 DDB 0 TDA 00000000 00000000/
M20:
	.ASCIC	/%UETP, UETINIT00 DDB 0 TDA 00000000 00000000/
M21:
	.ASCIC	/%UETP-DDB, UETINIT00 DDB 0 TDA 00000000 00000000/
M22:
	.ASCIC	/%UETP-S, UETINIT00 DDB 0 TDA 00000000 00000000/
M23:
	.ASCIC	/%UETP-S-DDB, UETINIT00 DDB 0 TDA 00000000 00000000/
M24:
	.ASCIC	/%TEST-S-DDB, UETINIT00 DDB 0 TDA 00000000 00000000/
TEST:
	.ASCID	/TEST/
	.LIST BINARY
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
STATUS:
	.LONG	0
GET:
	$GETMSG	UETP$_DDB,MSGLEN,BUFADR,0,OUTADR ; GETMSG parameter list
PUT:
	$PUTMSG MSGVEC1,ACT,0		; PUTMSG parameter list
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	512			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	512
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS BUF			
SERV_NAME:
	.LONG	0			; service name pointer
MSGLEN:
	.LONG	0			; message length parameter
OUTADR:
	.LONG	0			; output address parameter
BUFADR:
	.LONG	256			; GETMSG & PUTMSG buffer
	.ADDRESS .+4
	.BLKB	256			; maximum message length
BADATA:
	.LONG	0			; bad string desc.
	.ADDRESS BUFADR+8
GOODATA:
	.LONG	0			; expected string desc.
	.ADDRESS 0
MSGVEC1:
	.LONG	3			; PUTMSG test message vector
	.LONG	UETP$_DDB
	.LONG	1
	.ADDRESS DEV_NAM
DEV_NAM:
	.ASCID	/TDA/			; test device name
MSG:
	.LONG	0			; correct message pointer
.PAGE
	.PSECT	SATSSS10,RD,WRT,EXE,LONG
	.SBTTL	SATSSS10
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their normal conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSS10  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSS10.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSS10 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSS10 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSS10 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSS10 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--

	TEST_START SATSSS10		; let the test begin
	.SBTTL	GETMSG TESTS
;+
;
; $GETMSG tests
;
; The tests are executed in the following order:
;
;	STP #	FLAG value	message content
;	-----	----------	---------------
;	STP0	    0		no message
;	STP1	    1		only text
;	STP2	    2		only mesg ID
;	STP3	    3		text and mesg ID
;	STP4	    4		only severity code
;	STP5	    5		severity code & text
;	STP6	    6		severity code & mesg ID
;	STP7	    7		severity code, mesg ID, & text
;	STP8	    8		only facility name
;	STP9	    9		facility name & text
;	STP10	   10		facility name & mesg ID
;	STP11	   11		facility name, mesg ID, & text
;	STP12	   12		facility name & severity code
;	STP13	   13		facility name, severity code, & text
;	STP14	   14		facility name, severity code, & mesg ID
;	STP15	   15		every thing
;
;
;-
.PAGE
	MOVAL	W^GETMSG,W^SERV_NAME		; set service name
	MOVAL	W^MSGTBL,R6			; set table pointer
	MOVL	#1,R7				; set initial flag value
GETMSG_LOOP:
	MOVL	(R6)+,W^MSG			; get string pointer from table
	PUSHL	#0				; save a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$GETMSG_S MSGID=W^MSGID,-
		  MSGLEN=W^MSGLEN,-
		  BUFADR=W^BUFADR,-
		  FLAGS=R7,-
		  OUTADR=W^OUTADR
	FAIL_CHECK SS$_NORMAL			; check for success
	CALLS #0,W^CHECK_RESULTS		; check returned message
	MOVL	R7,W^GET+GETMSG$_FLAGS		; set flag value
	PUSHL	#0				; save a dummy 
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$GETMSG_G W^GET				; try _G form
	FAIL_CHECK SS$_NORMAL			; check for success
	CALLS #0,W^CHECK_RESULTS		; check returned message
	INCL	W^CURRENT_TC			; bump the test number
	AOBLEQ	#14,R7,B^GETMSG_LOOP		; bump the flag & do it again
	STEP=STEP+15
.PAGE
	.SBTTL PUTMSG TESTS
;+
;
; $PUTMSG tests
;
; The tests are executed if the following order:
;
;	STP #	FLAG value	message content
;	-----	----------	---------------
;	STP17	    0		no message
;	STP18	    1		only text
;	STP19	    2		only mesg ID
;	STP20	    3		text and mesg ID
;	STP21	    4		only severity code
;	STP22	    5		severity code & text
;	STP23	    6		severity code & mesg ID
;	STP24	    7		severity code, mesg ID, & text
;	STP25	    8		only facility name
;	STP26	    9		facility name & text
;	STP27	   10		facility name & mesg ID
;	STP28	   11		facility name, mesg ID, & text
;	STP29	   12		facility name & severity code
;	STP30	   13		facility name, severity code, & text
;	STP31	   14		facility name, severity code, & mesg ID
;	STP32	   15		every thing
;
;
;-
	NEXT_TEST
	MOVAL	W^PUTMSG,W^SERV_NAME		; set service name
	MOVAL	W^MSGTBL1,R6			; set table pointer
	CLRL	R7				; set initial flag value
PUTMSG_LOOP:
	MOVL	(R6)+,W^MSG			; get string pointer from table
	MOVW	R7,W^MSGVEC1+10			; set a new flag value
	PUSHL	#0				; save a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$PUTMSG_S MSGVEC=W^MSGVEC1,-
		  ACTRTN=W^ACT			; try it
	FAIL_CHECK SS$_NORMAL			; check for success
	PUSHL	#0				; save a dummy 
	CALLS	#1,W^REG_SAVE			; save a register snapshot
	$PUTMSG_G W^PUT				; try _G form
	FAIL_CHECK SS$_NORMAL			; check for success
	INCL	W^CURRENT_TC			; bump the test number
	AOBLEQ	#15,R7,B^PUTMSG_LOOP		; bump the flag & do it again
;+
;
; test the facility name parameter
;
;-
	NEXT_TEST
	MOVL	(R6)+,W^MSG			; get string pointer from table
	PUSHL	#0				; save a dummy
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$PUTMSG_S MSGVEC=W^MSGVEC1,-
		  ACTRTN=W^ACT,-
		  FACNAM=W^TEST			; try the _S form
	FAIL_CHECK SS$_NORMAL			; check for success
	PUSHL	#0				; save a dummy
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	MOVAL	W^TEST,W^PUT+PUTMSG$_FACNAM	; set facility name adr
	$PUTMSG_G W^PUT				; try the _G form
	FAIL_CHECK SS$_NORMAL			; check for success
	TEST_END
.PAGE
	.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,-(SP)		; set number past R0-R1 and save
	BICL2	#3,R1			; backup to register boundrys
	BICL2	#3,R3
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
.PAGE
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	$PUTMSG_S W^MSGVEC			; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	20$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
20$:
	
	$PUTMSG_S W^MSGVEC			; print the message
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL CHECK_RESULTS 
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to check message content, message length, and OUTADR.
;
; CALLING SEQUENCE:
;	CALLS	#0,W^CHECK_RESULTS ; check returned message
;
; INPUT PARAMETERS:
;	MSG = pointer to correct resultant counted string
;	MSGBUF = returned string
;	OUTADR = outadr parameter returned by the service
;	MSGLEN = contains returned message length
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

CHECK_RESULTS:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVZBL	@W^MSG,R8		; get the length
	CMPB	W^MSGLEN,R8		; is the length OK?
	BEQL	10$			; br if yes
	PUSHL	W^MSGLEN		; push received
	PUSHL	R8			; push expected
	PUSHAL	W^LEN			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
10$:
	CMPL	W^OUTADR,#^X100		; is OUTADR param OK?
	BEQL	20$			; br if OK
	PUSHL	W^OUTADR		; push received
	PUSHL	#^X100			; push expected
	PUSHAL	W^OUT			; push string variable
	CALLS	#3,W^PRINT_FAIL		; print the failure
20$:
	MOVL	W^MSG,R9		; get message pointer
	CMPC3	R8,B^1(R9),W^BUFADR+8 	; check the string
	BNEQ	25$			; br if not OK
	BRW	30$			; BR if OK
25$:
	MOVAL	B^1(R9),W^GOODATA+4	; fill in good data desc.
	MOVL	R8,W^GOODATA
	MOVL	W^MSGLEN,W^BADATA	; fill in bad data desc.
	$FAO_S W^CS1,W^MESSAGEL,W^MSGL,-
		#TEST_MOD_NAME,W^SERV_NAME,-
		W^CURRENT_TC		; form 1st line and
	$PUTMSG_S W^MSGVEC		;  print it
	$FAO_S W^CS4,W^MESSAGEL,W^MSGL,-
	       #GOODATA,#BADATA		; form 2nd line and
	$PUTMSG_S W^MSGVEC		; print it
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR ; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE ; set severity code
30$:
	RET
.PAGE
	.SBTTL ACT
;++
; FUNCTIONAL DESCRIPTION:
;	Routine to take action on a PUTMSG call. The message is checked
;	for proper content and printing is disabled.
;
; CALLING SEQUENCE:
;	Entered via ACTRTN parameter specified with PUTMSG.
;
; INPUT PARAMETERS:
;	MSG = pointer to correct resultant counted string
;	MSGBUF = returned string
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

ACT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R6		; get the desc. address
	MOVL	(R6),W^MSGLEN		; set length for CHECK_RESULTS
	MOVL	4(R6),R7		; get string pointer
	MOVC3	(R6),(R7),W^BUFADR+8	; get string for CHECK_RESULTS
	CALLS #0,W^CHECK_RESULTS	; check the PUTMSG results
	MOVL	#SS$_ABORT,R0		; don't really print it
	RET
.PAGE
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<MOD_MSG_CODE,#2,TMN_ADDR,TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSS10
