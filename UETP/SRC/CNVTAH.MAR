	.TITLE	CNVTAH SUBROUTINE CONVERTS ASCII STRING TO HEX LONGWORD
	.IDENT 'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:  UETP (USER ENVIRONMENT TEST PACKAGE)
;
; ABSTRACT:
;
;	CONVERT AN ASCII STRING TO HEX DIGITS PACKED IN A LONGWORD.
;	THE STRING MUST REPRESENT A HEXADECIMAL QUANTITY.
;	THE ASCII CHARACTERS ARE LIMITED TO DIGITS 0-9 AND CAPITAL
;	LETTERS A-F.  THE STRING MUST BE LESS THAN 9 CHARACTERS LONG.
;	THE HEX LONGWORD IS RIGHT-JUSTIFIED AND ZERO-FILLED.
;
; AUTHOR:
;	R. A. BATOR		CREATED:   27-APR-78
;
; INPUT PARAMETERS:
;
;	TWO LONG WORDS MUST BE ON THE STACK
;
;	1)	LENGTH OF THE ASCII STRING IN BYTES (1-8 INCLUSIVE)
;	2)	ADDRESS OF THE ASCII STRING
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	THE LONG WORD RESULT IS RETURNED IN R11
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; CALLING SEQUENCE:
;
;		PUSHL	LENGTH
;		PUSHAL	ADDRESS
;		CALLS	#2,CNVTAH
;
; COMPLETION CODES:
;
;	IF ERROR	R0 CONTAINS SS$_BADPARAM
;	IF SUCCESS	R0 CONTAINS SS$_NORMAL
;
; MODIFIED BY:
;  1.01	-	CLEANED UP COMMENTS, ABSTRACT		RAB 4-JAN-79
;--

	.ENTRY	CNVTAH,^M<R2,R3,R4>	; ENTRY MASK
	MOVQ	4(AP),R3		; GET COUNT IN R4, ADDRESS IN R3
	TSTL	R4			; CHECK FOR ZERO LENGTH
	BLEQ	20$			; EXIT IF LENGTH .LE. 0
	CMPL	R4,#9			; CHECK FOR LENGTH TOO BIG
	BGEQ	20$			; EXIT IF LENGTH .GE. 9
	CLRL	R11			; INIT THE OUTPUT NUMBER
10$:
	MOVZBL	(R3)+,R2		; GET A BYTE
	CMPB	R2,#^A/0/		; IS THE CHAR NON-NUMERIC?
	BLSS	20$			; LESS THAN A '0'
	CMPB	R2,#^A/9/		; NO
	BLEQ	30$			; OR UP TO A '9'?
	CMPB	R2,#^A/A/		; NO.  IS THE CHARACTER
	BLSS	20$			; LESS THAN AN 'A'
	CMPB	R2,#^A/F/		; NO
	BLEQ	29$			; OR UP TO AN 'F'?
20$:
	MOVL	#SS$_BADPARAM,R0	; SET BAD CHAR
	RET				; RETURN
;
29$:
	ADDL2	#9,R2			; MAKE LOW 4 BITS HEX A-F
30$:
	BICB2	#^XF0,R2		; ISOLATE LOW 4 BITS
	ROTL	#4,R11,R11		; POSITION THE NIBBLE
	ADDL2	R2,R11			; PUT NEW DIGIT INTO R11
	ACBB	#1,#-1,R4,10$		; DONE WITH 8 CHAR?
	MOVL	#SS$_NORMAL,R0		; SET SUCCESS RETURN
	RET				; RETURN
	.END
