	.TITLE UETNETS00 VAX/VMS UETP checker for DECnet counters
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;	This module will be distributed with VAX/VMS under the [SYSTEST]
;	account.
;
; ABSTRACT:
;	This program will report all error indicating non-zero node and
;	circuit counters for all nodes and circuits indicated in the 
;	UETININET.DAT file.  If no counters indicate error then the node
;	name and circuit name will be reported with a success message.
;
; ENVIRONMENT:
; 	This program will run in user access mode, with interrupts enabled
;	at all times.  This program requires the following privileges and
;	quotas:
;		NETMBX
;
;--
;
; AUTHOR: Larry D. Jones,	CREATION DATE: November, 1981
;
; MODIFIED BY:
;
;	V03-001	LDJ0001		Larry D. Jones,		24-Dec-1981
;		Fixed missing node name access violation bug.
;
;**

	.SBTTL	Declarations
;
; INCLUDE FILES:
;
	.LIBRARY /SHRLIB$:NMALIBRY.MLB/

;
; MACROS:
;
	$CHFDEF				; Condition handler frame definitions
	$DIBDEF				; Device information block definitions
	$NMADEF				; DECnet definitions
	$SHRDEF				; Shared messages
	$STSDEF				; Status return
	$UETPDEF			; UETP

	.MACRO	TBL_ENT ENT,VALUE,STRING
		.=PC1...
		.WORD	<ENT@15>!VALUE
		.ADDRESS PC2...
		PC1...= .
		.=PC2...
		.ASCIC	/STRING/
		PC2...=.
	.ENDM	TBL_ENT
;
; EQUATED SYMBOLS:
;
;   Facility number definitions:
	UETP_K = 116
	RMS_K = 1

;   SHR message definitions:
	UETP = UETP_K@STS$V_FAC_NO	; Define the UETP facility code
;
	UETP$_ABENDD = UETP!SHR$_ABENDD	; Define the UETP message codes
	UETP$_BEGIND = UETP!SHR$_BEGIND
	UETP$_ENDEDD = UETP!SHR$_ENDEDD
	UETP$_OPENIN = UETP!SHR$_OPENIN
	UETP$_TEXT   = UETP!SHR$_TEXT

;   Internal flag bits...:
	SHRT_RPRTV   = 0		; Set if short report format desired
	CONTROL_CV   = 1		; Set if CTRL/C AST received
	CIR_CNT_BADV = 2		; Set if a bad circuit counter was detected
	NOD_CNT_BADV = 3		; Set if a bad node counter was detected
	BEGIN_MSGV   = 6		; Set when "begin" msg has been output
;   ...and corresponding masks:
	SHRT_RPRTM   = 1@SHRT_RPRTV
	CONTROL_CM   = 1@CONTROL_CV
	CIR_CNT_BADM = 1@CIR_CNT_BADV
	NOD_CNT_BADM = 1@NOD_CNT_BADV
	BEGIN_MSGM   = 1@BEGIN_MSGV
	BIT7M	     = ^X80
;   Miscellany:
	TEXT_BUFFER  = 132		; Internal text buffer size
	NOD          = 0		; Node ID constant
	CIR	     = 1		; Circuit ID constant
	TBL_SIZE     = 26		; Network counter table size

	.SBTTL	Read-Only Data
	.PSECT	RODATA,NOEXE,NOWRT,PAGE

ACNT_NAME:				; Process name on exit
	.ASCID	/SYSTEST/

TSTNAM:					; This test name
	.ASCID	/UETNETS00/


MODE:					; Run mode logical name
	.ASCID	/MODE/

TTNAME_ROPTR:
	.WORD	63,0
	.ADDRESS TTNAME

LOGEXT:					; Log file extention
	.ASCII	/.LOG/


CNTRLCMSG:
	.ASCID	\Aborted via a user CTRL/C\


FILE:					; Fills in RMS_ERR_STRING
	.ASCID	/file/

RECORD:					; Fills in RMS_ERR_STRING
	.ASCID	/record/

RMS_ERR_STRING:				; Announces an RMS error
	.ASCID	/RMS !AS error in file !AD/

ERR_MSG_CTR:
	.ASCID	/NICE response error code !XB, error message: !AC./

COUNTER_MSG:
	.ASCID	/!AC !AC !AC !AC !AC = !UL./

NODE:
	.ASCIC	/Node /

CIRCUIT:
	.ASCIC	/Circuit/

TO:
	.ASCIC	/to/

THRU:
	.ASCIC	/over/

CASE_FAILED:
	.ASCID	/CASE instruction failed!/

CIRCUIT_OK:
	.ASCID	/Circuit !AC to !AC OK./

ZERO:
	.LONG	0
CNTR_TBL:
	PC1... = .
	.=.+<TBL_SIZE*6>
TBL_END:
	PC2... = .
	.LIST MEB
	TBL_ENT CIR,NMA$C_CTCIR_ACL,<arriving congestion loss>
	.NLIST MEB
	TBL_ENT CIR,NMA$C_CTCIR_CRL,<corruption loss>
	TBL_ENT CIR,NMA$C_CTCIR_TCL,<transit congestion loss>
	TBL_ENT CIR,NMA$C_CTCIR_LDN,<line down>
	TBL_ENT CIR,NMA$C_CTCIR_IFL,<initialization failure>
	TBL_ENT CIR,NMA$C_CTCIR_DEI,<data errors inbound>
	TBL_ENT CIR,NMA$C_CTCIR_DEO,<data errors outbound>
	TBL_ENT CIR,NMA$C_CTCIR_RRT,<remote reply timeouts>
	TBL_ENT CIR,NMA$C_CTCIR_LRT,<local reply timeouts>
	TBL_ENT CIR,NMA$C_CTCIR_RBE,<remote buffer errors>
	TBL_ENT CIR,NMA$C_CTCIR_LBE,<local buffer errors>
	TBL_ENT CIR,NMA$C_CTCIR_SLT,<selection timeouts>
	TBL_ENT CIR,NMA$C_CTCIR_RPE,<remote process errors>
	TBL_ENT CIR,NMA$C_CTCIR_LPE,<local process errors>
	TBL_ENT CIR,NMA$C_CTCIR_LIR,<locally initiated resets>
	TBL_ENT CIR,NMA$C_CTCIR_RIR,<remotely initiated resets>
	TBL_ENT CIR,NMA$C_CTCIR_NIR,<network initiated resets>
	TBL_ENT NOD,NMA$C_CTNOD_RTO,<response timeouts>
	TBL_ENT NOD,NMA$C_CTNOD_RSE,<received connect resource errors>
	TBL_ENT NOD,NMA$C_CTNOD_APL,<aged packet loss>
	TBL_ENT NOD,NMA$C_CTNOD_NUL,<node unreachable packet loss>
	TBL_ENT NOD,NMA$C_CTNOD_NOL,<node out of range packet loss>
	TBL_ENT NOD,NMA$C_CTNOD_OPL,<oversized packet loss>
	TBL_ENT NOD,NMA$C_CTNOD_PFE,<packet format error>
	TBL_ENT NOD,NMA$C_CTNOD_RUL,<partial routing update loss>
	TBL_ENT NOD,NMA$C_CTNOD_VER,<verification reject>

	.SBTTL	Read/Write Data
	.PSECT	RWDATA,WRT,NOEXE,PAGE

TTCHAN:					; Channel associated with ctrl. term.
	.WORD	0

TTNAME_RWPTR:
	.WORD	TTNAME_LEN,0
	.ADDRESS TTNAME
TTNAME:
	.ASCII	/SYS$COMMAND/
	TTNAME_LEN = .-TTNAME
	.BLKB	63-TTNAME_LEN


FLAG:					; Miscellaneous flag bits
	.WORD	0			; (See Equated Symbols for definitions)

AST_MODE:				; Prior setting of AST delivery
	.LONG	0

SS_FAIL_MODE:				; Prior setting of SS failure mode
	.LONG	0

DEV:
	.LONG	DIB$K_LENGTH		; Device Information Block
	.ADDRESS DEVBUF
DEVBUF:
	.BLKB	DIB$K_LENGTH

FAO_BUF:				; FAO output string descriptor
	.WORD	TEXT_BUFFER,0
	.ADDRESS BUFFER

BUFFER_PTR:				; Fake .ASCID buffer for misc. strings
	.WORD	TEXT_BUFFER,0		; A word for length, a word for desc.
	.ADDRESS BUFFER

BUFFER:					; FAO output and other misc. buffer
	.BLKB	TEXT_BUFFER

ERROR_COUNT:				; Cumulative error count at runtime
	.LONG	0

STATUS:					; Status value on program exit
	.LONG	0


MSG_BLOCK:				; Auxiliary $GETMSG info
	.BLKB	4

EXIT_DESC:				; Exit handler descriptor
	.LONG	0
	.ADDRESS EXIT_HANDLER
	.LONG	1
	.ADDRESS STATUS

ARG_COUNT:				; Argument counter used by ERROR_EXIT
	.LONG	0

NODE_ADR_DESC:
	.LONG	0
	.ADDRESS 0

NICE_MSG:
	.LONG	NICE_SIZE
	.ADDRESS NICE_MESSAGE

NICE1_MSG:
	.LONG	NICE1_SIZE
	.ADDRESS NICE1_MESSAGE
;
; *** Warning ***
; The following section of data must remain contiguous.
;
; NICE packets used to get the counters.
;

NICE_MESSAGE:
	.BYTE	NMA$C_FNC_REA		; Read information function code
	.BYTE	NMA$C_OPINF_COU@NMA$V_OPT_INF ; OPTION = Node, Counters, Volatile
	.BYTE	NMA$C_ENT_NOD		; Node format = node address
NODE_WRD:
	.WORD	0
	NICE_SIZE = .-NICE_MESSAGE

NICE1_MESSAGE:
	.BYTE	NMA$C_FNC_REA		; Read information function code
	.BYTE	<<NMA$C_OPINF_COU@NMA$V_OPT_INF>!-
		 <NMA$C_ENT_CIR>> 	; OPTION = Circuit, Counters, Volatile
	NICE1_SIZE = .-NICE1_MESSAGE

CIRC_NAME:
	.BLKB	10

;
; *** End of warning ***
;

NODE_NAME:
	.BLKB	7

NODE_ADR:
	.BLKB	5

NAME:
	.BLKB	25

COUNTER:
	.LONG	0

TYPE:
	.LONG	0

TYPE1:
	.LONG	0

TYPE2:
	.LONG	0

END_ADR:
	.LONG	0

	.SBTTL	RMS-32 Data Structures
	.ALIGN	LONG

INI_FAB:				; Allocate FAB for UETINIDEV
	$FAB-
	FAC = GET,-
	RAT = CR,-
	SHR = GET,-
	FNM = <UETININET.DAT>

INI_RAB:				; Allocate RAB for UETINIDEV
	$RAB-
	FAB = INI_FAB,-
	UBF = BUFFER,-
	USZ = TEXT_BUFFER,-
	RBF = BUFFER


LOG_FAB:				; Log file FAB
	$FAB	FNM = <UETNETS00.LOG>,-
		RAT = CR,-
		FAC = PUT
LOG_RAB:				; Log file RAB
	$RAB	FAB = LOG_FAB,-
		RBF = BUFFER,-
		RSZ = TEXT_BUFFER

	.SBTTL	Main Program
	.PSECT	UETNETS00,EXE,NOWRT,PAGE

	.DEFAULT DISPLACEMENT,WORD

.ENTRY UETNETS00,^M<>			; Entry mask

	MOVAL	SSERROR,(FP)		; Declare exception handler
	$SETSFM_S ENBFLG = #1		; Enable system service failure mode
	$DCLEXH_S DESBLK = EXIT_DESC	; Declare an exit handler
	$CREATE FAB = LOG_FAB,-
		ERR = RMS_ERROR		; Create the log file
	$CONNECT RAB = LOG_RAB,-
		 ERR = RMS_ERROR	; Connect the RAB
	$OPEN	FAB = INI_FAB,-
		ERR = RMS_ERROR		; Open the UETININET.DAT file
	$CONNECT RAB = INI_RAB,-
		 ERR = RMS_ERROR	; Connect the RAB
	CLRL	-(SP)			; Set the time stamp flag
	PUSHAL	TSTNAM			; Set the test name
	PUSHL	#2			; Push the argument count
	PUSHL	#UETP$_BEGIND!STS$K_SUCCESS ; Set the message code
	CALLS	#4,G^LIB$SIGNAL		; Print the startup message
	BISW2	#BEGIN_MSGM,FLAG	; Set flag so we don't type it twice
	$SETPRN_S PRCNAM = TSTNAM	; Set the process name
10$:
	$TRNLOG_S LOGNAM = TTNAME_RWPTR,-
		  RSLLEN = TTNAME_RWPTR,-
		  RSLBUF = TTNAME_ROPTR	; Translate the logical name
	MOVAL	TTNAME,TTNAME_RWPTR+4	; Undo possible previous PPF fixup
	CMPL	R0,#SS$_NOTRAN		; Have we reached the end yet?
	BEQL	20$			; Br if yes
	CMPB	#^X1B,TTNAME		; Is this a process permanent file?
	BNEQ	10$			; Br if not
	SUBW	#4,TTNAME_RWPTR		; Remove  RMS overhead from PPF name...
	ADDL	#4,TTNAME_RWPTR+4	; ...
	BRB	10$			; Now it's safe to retranslate
20$:
	$GETDEV_S DEVNAM = TTNAME_RWPTR,-
		  PRIBUF = DEV		; Get its device type
	CMPB	DEVBUF+DIB$B_DEVCLASS,#DC$_TERM ; Is this a terminal?
	BNEQ	30$			; BR if no
	$ASSIGN_S DEVNAM = TTNAME_RWPTR,- ; Set up for CTRL/C AST's
		  CHAN   = TTCHAN
	$QIOW_S	CHAN     = TTCHAN,-	; Enable CTRL/C AST's...
		FUNC     = #IO$_SETMODE!IO$M_CTRLCAST,-
		P1       = CCASTHAND
	PUSHAL	TSTNAM			; ...and tell the user...
	PUSHL	#1			; ...
	PUSHL	#UETP$_ABORTC!STS$K_SUCCESS ; ...how to abort gracefully...
	CALLS	#3,G^LIB$SIGNAL		; ...
30$:
	CALLS	#0,G^NML$INITIALIZE
LOOP:
	$GET	RAB = INI_RAB,-		; Get a record
		ERR = RMS_ERROR
	CMPL	#^A/END /,BUFFER	; End of the file?
	BNEQ	10$			; BR if not
	BRW	SUC_EXIT		; Else end
10$:
	LOCC	#^A/ /,INI_RAB+RAB$W_RSZ,-
		BUFFER			; Find the end of the circuit name
	SUBL3	#BUFFER,R1,R6		; Get circuit name size
	MOVB	R6,CIRC_NAME		; Set circuit name length
	ADDL3	#1,R1,R7		; Set start of node address
	MOVC3	R6,BUFFER,CIRC_NAME+1	; Save circuit name
	SUBW3	R6,INI_RAB+RAB$W_RSZ,R3	; Get remaining string length
	MOVZWL	R3,R3			; Clean the high word out
	DECW	R3			; Get back to end of string
	LOCC	#^A/ /,R3,(R7)		; Find node adr end
	SUBL3	R7,R1,R6		; Get node adr length
	MOVB	R6,NODE_ADR		; Set node adr length
	MOVL	R1,R8			; Save end of string address
	MOVC3	R6,(R7),NODE_ADR+1	; Save node adr
	MOVZBW	R6,NODE_ADR_DESC	; Init node address descriptor
	MOVAL	(R7),NODE_ADR_DESC+4
	PUSHL	#2			; Two byte number returned
	PUSHAL	NODE_WRD		; Address of output
	PUSHAL	NODE_ADR_DESC		; Address of input
	CALLS	#3,G^OTS$CVT_TI_L	; Make the string a word value
	SUBL3	#BUFFER,R8,R6		; Calculate string size
	SUBW3	R6,INI_RAB+RAB$W_RSZ,R6
	MOVZBL	R6,NODE_NAME		; Only use one byte worth of node name length
	BEQL	30$			; BR if no node name
	DECB	NODE_NAME		; Correct node name size
	DECB	R6
	ADDL3	#1,R1,R8		; Set start of node name
	MOVC3	R6,(R8),NODE_NAME+1	; Save node name
30$:
	PUSHAL	NICE_ROUTINE		; Get the node counters
	PUSHAL	NICE_MSG
	CALLS	#2,G^NML$PROCESS_NICE
	BBC	#CIR_CNT_BADV,FLAG,40$	; BR if no node counter data
	BISW2	#NOD_CNT_BADM,FLAG	; Save a copy of the flag
40$:
	MOVL	#NICE1_SIZE+1,NICE1_MSG	; Calculate NICE packet size
	ADDB2	CIRC_NAME,NICE1_MSG	; Add in circuit name size
	PUSHAL	NICE_ROUTINE		; Get the circuit counters
	PUSHAL	NICE1_MSG
	CALLS	#2,G^NML$PROCESS_NICE
	BBSC	#NOD_CNT_BADV,FLAG,60$	; BR if counters found bad
	BBSC	#CIR_CNT_BADV,FLAG,60$	; BR if counters found bad
	MOVAL	NODE_NAME,TYPE		; Save the node name address
	TSTB	NODE_NAME		; Anything there?
	BNEQ	50$			; BR if yes else...
	MOVAL	NODE_ADR,TYPE		; ...use the node address
50$:
	$FAO_S	CTRSTR = CIRCUIT_OK,-	; Print the circuit OK message
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = #NAME,-
		P2     = TYPE
	PUSHAL	BUFFER_PTR		; Push the string address
	PUSHL	#1			; Push the parameter counter
	PUSHL	#UETP$_TEXT!STS$K_SUCCESS ; Push signal name
	CALLS	#3,G^LIB$SIGNAL		; Print circuit OK
60$:
	BRW	LOOP			; Do the next record

SUC_EXIT:
	CALLS	#0,G^NML$TERMINATE	; Terminate the NML session
	PUSHL	#0			; Set the time flag
	PUSHAL	TSTNAM			; Push the test name
	PUSHL	#2			; Push arg count
	PUSHL	#UETP$_ENDEDD!STS$K_SUCCESS ; Push signal name
	CALLS	#4,G^LIB$SIGNAL		; Output the message
	MOVL	#SS$_NORMAL!STS$M_INHIB_MSG,STATUS ; Set successful exit status
	$EXIT_S STATUS			; Exit with the status

	.SBTTL	NICE_ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;	This routine is the NICE response servicing routine. All calls to
;	NML$PROCESS_NICE specify this routine as the action routine.
;
; CALLING SEQUENCE:
;	PUSHAL	NICE_ROUTINE
;	PUSHAL	NICE_MSG_DESC
;	CALLS	#2, G^NML$PROCESS_NICE
;
; INPUT PARAMETERS:
;	4(AP) = Address of a response message descriptor
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Error or success messages
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

NICE_ROUTINE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R6		; Get the descriptor address
	MOVZWL	(R6),R7			; Get the response size
	ADDL3	R7,4(R6),END_ADR	; Save the response end address
	MOVL	4(R6),R6		; Get the response address
	MOVZBL	(R6)+,R8		; Get the status code
	CMPB	R8,#NMA$C_STS_MOR	; If this is a more message then...
	BNEQ	10$
	BRW	NICE_EXIT		; ...exit
10$:
	CMPB	R8,#NMA$C_STS_DON	; If this is a done message then...
	BNEQ	20$
	BRW	NICE_EXIT		; ...exit
20$:
	CMPB	R8,#NMA$C_STS_SUC	; If this is a success then...
	BEQL	CHECK_IT		; ...process the response
;
; The nice response is in error and it is reported to the user.
;
	MOVZBL	-1(R6),R9		; Get error code
	MOVAL	2(R6),R10		; Get the error message address
	$FAO_S	CTRSTR = ERR_MSG_CTR,-
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = R9,-
		P2     = R10
	PUSHAL	BUFFER_PTR		; Push the string address
	PUSHL	#1			; Push the argument count
	PUSHL	#UETP$_TEXT!STS$K_ERROR ; Push the signal name
	CALLS	#3, G^LIB$SIGNAL	; Print the error message
	BISW2	#CIR_CNT_BADM,FLAG	; Set failure bit
	MOVL	#SS$_BADPARAM,STATUS	; Set return status failure code
	BRW	NICE_EXIT		; Thats it
CHECK_IT:
	ADDL2	#3,R6			; Skip error stuff
	MOVAL	CNTR_TBL,R9		; Set table address
	BICW2	#CIR_CNT_BADM,FLAG	; Clear the bad flag
	CMPW	(R6),NODE_WRD		; Is this a node response?
	BNEQ	10$			; BR if not...
	ADDL2	#2,R6			; ...else skip the node address word
10$:
	MOVZBL	(R6),R7			; Get the size of the name
	BICB2	#BIT7M,R7		; Incase this is the executor node
	INCL	R7			; Add in the count byte
	MOVC3	R7,(R6),NAME		; Save the name
	ADDL2	R7,R6			; Skip the name
CHK_LOOP:
	CMPL	R6,END_ADR		; All done?
	BNEQ	10$			; BR if not...
	BRW	NICE_EXIT		; ...else bail out
10$:
	MOVZWL	(R6)+,R8		; Get cntrl desc
	EXTZV	#NMA$V_CNT_TYP,-
		#NMA$S_CNT_TYP,-
		R8,R8			; Get the counter type
20$:
	MOVZWL	(R9)+,R10		; Get a table code
	EXTZV	#NMA$V_CNT_TYP,-
		#NMA$S_CNT_TYP,-
		R10,R11			; Get the counter type
	CMPL	R8,R11			; Is this it?
	BEQL	80$			; BR if yes
	ADDL2	#4,R9			; Skip name pointer
	CMPL	R9,#TBL_END		; End of table?
	BNEQ	20$			; BR if not
	MOVAL	CNTR_TBL,R9		; Set table address
	EXTZV	#NMA$V_CNT_WID,-
		#NMA$S_CNT_WID,-
		-2(R6),R8		; Get the counter width
	BBC	#NMA$V_CNT_MAP,-2(R6),30$ ; If not a mapped counter then carry on else...
	ADDL2	#2,R6			; ...skip the map word
30$:
	CASEB	R8,#1,#2		; Skip the counter
40$:
	.WORD	50$-40$
	.WORD	60$-40$
	.WORD	70$-40$
	PUSHAL	CASE_FAILED		; Push the string address
	PUSHL	#1			; Push the argument count
	PUSHL	#UETP$_TEXT!STS$K_ERROR ; Push the signal name
	PUSHL	#3			; Push the argument count
	BRW	ERROR_EXIT		; Thats it
50$:
	INCL	R6			; Skip a byte counter
	BRW	CHK_LOOP
60$:
	ADDL2	#2,R6			; Skip a word counter
	BRW	CHK_LOOP
70$:
	ADDL2	#4,R6			; Skip a long word counter	
	BRW	CHK_LOOP
80$:
	EXTZV	#NMA$V_CNT_WID,-
		#NMA$S_CNT_WID,-
		-2(R6),R8		; Get the counter width
	BBC	#NMA$V_CNT_MAP,-2(R6),90$ ; If not a mapped counter then carry on else...
	ADDL2	#2,R6			; ...skip the map word
90$:
	CASEB	R8,#1,#2		; Skip the counter
100$:
	.WORD	110$-100$
	.WORD	120$-100$
	.WORD	130$-100$
	PUSHAL	CASE_FAILED		; Push the string address
	PUSHL	#1			; Push the argument count
	PUSHL	#UETP$_TEXT!STS$K_ERROR ; Push the signal name
	PUSHL	#3			; Push the argument count
	BRW	ERROR_EXIT		; Thats it
110$:
	MOVZBL	(R6)+,COUNTER		; Get a byte counter
	BRW	140$
120$:
	MOVZWL	(R6)+,COUNTER		; Get a word counter
	BRW	140$
130$:
	MOVL	(R6)+,COUNTER		; Get a long word counter	
140$:
	BNEQ	150$
	MOVAL	CNTR_TBL,R9		; Reset the table address
	BRW	CHK_LOOP		; BR if counter was zero
150$:
	BISW2	#CIR_CNT_BADM,FLAG	; Set the bad one flag
	MOVAL	NODE,TYPE		; Set the default entity type of node
	MOVAL	NODE_NAME,R10		; Save the node name address
	TSTB	(R10)			; Anything there
	BNEQ	160$			; BR if yes else...
	MOVAL	NODE_ADR,R10		; ...use the node address
160$:
	MOVAL	THRU,TYPE1		; Set for node THRU circuit format
	MOVAL	CIRC_NAME,TYPE2
	BBC	#7,-1(R9),170$		; Check to see if we guessed right
	MOVAL	CIRCUIT,TYPE		; If not set type to circuit
	MOVAL	TO,TYPE1		; Set up for circuit to node format
	MOVL	R10,TYPE2
	MOVAL	NAME,R10
170$:
	$FAO_S	CTRSTR = COUNTER_MSG,-	; Generate a bad counter message
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = TYPE,-
		P2     = R10,-
		P3     = TYPE1,-
		P4     = TYPE2,-
		P5     = (R9),-
		P6     = COUNTER
	PUSHAL	BUFFER_PTR		; Push the string address
	PUSHL	#1			; Push the argument count
	PUSHL	#UETP$_TEXT!STS$K_INFO	; Push the signal name
	CALLS	#3, G^LIB$SIGNAL	; Print the error message
	MOVAL	CNTR_TBL,R9		; Reset the counter table pointer
	BRW	CHK_LOOP		; Thats it
	
NICE_EXIT:
	RET

	.SBTTL	System Service Exception Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine is executed if a system service or RMS error occurs or
;	if a LIB$SIGNAL system service is used to output a message.
;	Information about this method of handling messages and errors can be
;	found in the VMS COMMON RUN-TIME manual and in the VMS SYSTEM SERVICE
;	manual.
;
; CALLING SEQUENCE:
;	Entered via an exception from the system
;
; INPUT PARAMETERS:
;	ERROR_COUNT   = previous cumulative error count
;	                -----------------
;	   AP ---->     !       2       !
;			!---------------!
;			! SIGNL ARY PNT !
;			!---------------!
;			! MECH  ARY PNT !
;			!---------------! ---------
;			!       4       !         ^
;			!---------------!         !
;			! ESTABLISH FP  !         !
;			!---------------!         !
;			!    DEPTH      ! Mechanism Array
;			!---------------!         !
;			!      R0       !         !
;			!---------------!         !
;			!      R1       !         v
;			!---------------! ---------
;			!       N       !         ^
;			!---------------!         !
;			! CONDITION NAME!         !
;			!---------------!         !
;			! N-3 ADDITIONAL!    Signal Array
;			! LONG WORD ARGS!         !
;			!---------------!         !
;			!      PC       !         !
;			!---------------!         !
;			!      PSL      !         v
;			!---------------! ---------
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;--

SSERROR:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$SETAST_S ENBFLG = #0		; Disable AST delivery
	CLRL	AST_MODE		; Assume it was disabled
	CMPL	R0,#SS$_WASSET		; Were AST's enabled?
	BNEQ	10$			; BR if not enabled
	MOVL	#1,AST_MODE		; Set it to be reenabled
10$:	$SETSFM_S ENBFLG = #0		; Disable SS failure mode for PUTMSG
	CLRL	SS_FAIL_MODE		; Assume it was disabled
	CMPL	R0,#SS$_WASSET		; Was SS failure mode enabled?
	BNEQ	20$			; BR if not enabled
	MOVL	#1,SS_FAIL_MODE		; Set it to be reenabled
20$:	MOVL	CHF$L_SIGARGLST(AP),R6	; Get the signal array pointer
	CMPZV	#STS$V_FAC_NO,#STS$S_FAC_NO,- ; Is this a message from LIB$SIGNAL?
		CHF$L_SIG_NAME(R6),#UETP_K
	BNEQ	30$			; BR if this is a system exception
	SUBL2	#2,CHF$L_SIG_ARGS(R6)	; Drop the PC and PSL
	$PUTMSG_S MSGVEC = CHF$L_SIG_ARGS(R6),-
		  ACTRTN = 70$		; Print the message
	$SETSFM_S ENBFLG = SS_FAIL_MODE	; Set to previous state
	$SETAST_S ENBFLG = AST_MODE	; Set to previous state
	RET				; Return to the program
30$:
	CMPZV	#STS$V_FAC_NO,#STS$S_FAC_NO,- ; Is it an RMS failure?
		CHF$L_SIG_ARG1(R6),#RMS_K
	BNEQ	40$			; BR if not
	$SETSFM_S ENBFLG = SS_FAIL_MODE	; Set to previous state
	$SETAST_S ENBFLG = AST_MODE	; Set to previous state
	RET				; Yes, RMS_ERROR gets to handle them
40$:
	MOVL	CHF$L_SIG_NAME(R6),STATUS ; Save the status
	CLRL	R8			; Assume for now it's not SS failure
	CMPL	#SS$_SSFAIL,STATUS	; But is it a System Service failure?
	BNEQ	60$			; BR if not - no special case message
	$GETMSG_S MSGID = CHF$L_SIG_ARG1(R6),- ; Get SS failure code associated text
		 MSGLEN = BUFFER_PTR,-
		 BUFADR = FAO_BUF,-
		 FLAGS  = #14,-
		 OUTADR = MSG_BLOCK
	TSTB	MSG_BLOCK+1		; Get FAO arg count for SS failure code
	BEQL	50$			; Don't use $GETMSG if no $FAO args...
	PUSHAL	BUFFER_PTR		; ...else build up...
	PUSHL	#1			; ...a message describing...
	PUSHL	#UETP$_TEXT		; ...why the System Service failed
	INSV	CHF$L_SIG_ARG1(R6),-	; Give the message...
		#STS$V_SEVERITY,-	; ...the correct severity code
		#STS$S_SEVERITY,(SP)
	MOVL	#3,R8			; Count the number of args we pushed
	BRB	60$
50$:
	PUSHL	CHF$L_SIG_ARG1(R6)	; Save SS failure code
	MOVL	#1,R8			; Count the number of args we pushed
60$:
	MULL3	#4,CHF$L_SIG_ARGS(R6),R7 ; Convert longwords to bytes
	SUBL2	R7,SP			; Save the current signal array...
	MOVC3	R7,CHF$L_SIG_NAME(R6),(SP) ; ...on the stack
	ADDL3	R8,CHF$L_SIG_ARGS(R6),-(SP) ; Push the current arg count
	BRW	ERROR_EXIT

70$:
	.WORD	^M<R2>			; PUTMSG action routine
	MOVL	4(AP),R2		; Get the message descriptor address
	MOVZWL	(R2),LOG_RAB+RAB$W_RSZ	; Get the message size
	MOVL	4(R2),LOG_RAB+RAB$L_RBF ; Set the message address
	$PUT	RAB = LOG_RAB,-
		ERR = RMS_ERROR		; Write the log file
	MOVL	#SS$_NORMAL,R0		; Set the return status code
	RET

	.SBTTL	RMS Error Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles error returns from RMS calls.
;
; CALLING SEQUENCE:
;	Called by RMS when a file processing error is found.
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	The FAB or RAB associated with the RMS call.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Error message
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Program may exit, depending on severity of the error.
;
;--

RMS_ERROR:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	MOVL	4(AP),R6		; See whether we're dealing with...
	CMPB	#FAB$C_BID,FAB$B_BID(R6) ; ...a FAB or a RAB
	BNEQ	10$			; BR if it's a RAB
	MOVAL	FILE,R7			; FAB-specific code:  text string...
	MOVL	R6,R8			; ...address of FAB...
	PUSHL	FAB$L_STV(R6)		; ...STV field for error...
	PUSHL	FAB$L_STS(R6)		; ...STS field for error...
	MOVL	FAB$L_STS(R6),STATUS	; ...and save the error code
	BRB	RMS_COMMON		; FAB and RAB share other code
10$:
	MOVAL	RECORD,R7		; RAB-specific code:  text string...
	MOVL	RAB$L_FAB(R6),R8	; ...address of associated FAB...
	PUSHL	RAB$L_STV(R6)		; ...STV field for error...
	PUSHL	RAB$L_STS(R6)		; ...STS field for error...
	MOVL	RAB$L_STS(R6),STATUS	; ...and save the error code
RMS_COMMON:
	MOVZBL	FAB$B_FNS(R8),R10	; Get the file name size
	$FAO_S	CTRSTR = RMS_ERR_STRING,- ; Common code, prepare error message...
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = R7,-
		P2     = R10,-
		P3     = FAB$L_FNA(R8)
	PUSHAL	BUFFER_PTR		; ...and arguments for ERROR_EXIT...
	PUSHL	#1			; ...
	PUSHL	#UETP$_TEXT		; ...
	EXTZV	#STS$V_SEVERITY,-
		#STS$S_SEVERITY,-
		STATUS,R9 		; ...get the severity code...
	BISB2	R9,(SP)			; ...and add it into the signal name
	PUSHL	#5			; Current arg count
	BRW	ERROR_EXIT

	.SBTTL	CTRL/C Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles CTRL/C AST's
;
; CALLING SEQUENCE:
;	Called via AST
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CCASTHAND:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	PUSHAL	CNTRLCMSG		; Set message pointer
	PUSHL	#1			; Set arg count
	PUSHL	#UETP$_TEXT!STS$K_WARNING ; Set signal name
	PUSHL	#0			; Indicate an abnormal termination
	PUSHAL	TSTNAM			; ...
	PUSHL	#2			; ...
	PUSHL	#UETP$_ABENDD!STS$K_WARNING ; ...
	CALLS	#7,G^LIB$SIGNAL		; Output the message
	BISW2	#CONTROL_CM,FLAG	; Set CTRL/C flag bit...
	MOVL	#<SS$_CONTROLC&^C7-	; ...and exit status
		!STS$K_WARNING-
		!STS$M_INHIB_MSG>,STATUS
	$EXIT_S	STATUS			; Terminate program cleanly

	.SBTTL	Error Exit
;++
; FUNCTIONAL DESCRIPTION:
;	This routine prints an error message and exits.
;
; CALLING SEQUENCE:
;	MOVx  error status value,STATUS
;	PUSHx error specific information on the stack
;	PUSHL current argument count
;	BRW   ERROR_EXIT
;
; INPUT PARAMETERS:
;	Arguments to LIB$SIGNAL, as above
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	Message to SYS$OUTPUT and SYS$ERROR
;
; IMPLICIT OUTPUTS:
;	Program exit
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

ERROR_EXIT:

	$SETAST_S ENBFLG = #0		; ASTs can play havoc with messages
	BBS	#BEGIN_MSGV,FLAG,10$	; BR if "begin" msg has already been output
	CLRL	-(SP)			; Set the time stamp flag
	PUSHAL	TSTNAM			; Set the test name
	PUSHL	#2			; Push the argument count
	PUSHL	#UETP$_BEGIND!STS$K_SUCCESS ; Set the message code
	CALLS	#4,G^LIB$SIGNAL		; Print the startup message
10$:
	ADDL3	(SP)+,#7,ARG_COUNT	; Get total # args, pop partial count
	INCL	ERROR_COUNT		; Keep running error count
	PUSHL	#0			; Push the time parameter
	PUSHAL	TSTNAM			; Push test name...
	PUSHL	#2			; ...arg count...
	PUSHL	#UETP$_ABENDD!STS$K_ERROR ; ...and signal name
	PUSHL	ERROR_COUNT		; Finish off arg list...
	PUSHL	#1			; ...
	PUSHL	#UETP$_ERBOX!STS$K_ERROR ; ...for error box message
	CALLS	ARG_COUNT,G^LIB$SIGNAL	; Truly bitch

	BISL	#STS$M_INHIB_MSG,STATUS	; Don't print messages twice!
	$EXIT_S STATUS			; Exit in error

	.SBTTL	Exit Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles cleanup on exits.
;
; CALLING SEQUENCE:
;	Invoked automatically by $EXIT System Service.
;
; INPUT PARAMETERS:
;	Location STATUS contains the exit status, FLAG has synchronizing bits.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Various files are de-accessed, the process name is reset, and any
;	necessary synchronization with UETPDEV01 is carried out.
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

EXIT_HANDLER:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$SETSFM_S ENBFLG = #0		; Turn off System Service failure mode
	$SETAST_S ENBFLG = #0		; We're finished - no more ASTs
	$DISCONNECT  RAB = INI_RAB	; Disconnect the RAB from the FAB
	$CLOSE	     FAB = INI_FAB	; Close the UETINIDEV.DAT file
	$DISCONNECT  RAB = LOG_RAB	; Disconnect the RAB from the FAB
	$CLOSE	     FAB = LOG_FAB	; Close the UETNETS00.LOG file
	$SETPRN_S PRCNAM = ACNT_NAME	; Reset the process name
	RET				; That's all folks!

	.END	UETNETS00
