	.IDENT	'V03-000'
	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; Modified By:
;
;	V02-001	REFORMAT	Keith B. Thompson	30-Jul-1980
;
;--

;
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL
	.IDENT	/IDNUM/
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30	; get test point increment, user mode priv, rmsbug,

;
; and optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  the $begin macro defines the following switches for rms assembly
;	(bits in $$RMSTEST):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$RMS_UMODE)	assemble code for user mode
;	bit 3	($$RMS_TBUGCHK)	include optional debugging code
;	bit 4	($$RMS_PBUGCHK)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTEST4,009,__RMSTEST,<XAB RMS TEST PROGRAM>,<GBL,LONG>

;

	.ENABL	DBG

;
;  macros:
;
;
;
;

	.MACRO	TYPE STRING, ?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE

;

	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE


;

	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN
	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH
	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD

	.PSECT	__RMSTEST,GBL,LONG
	.ALIGN	LONG
T4START::
T4FAB::	$FAB	FNM=<TST$DISK:T4FILE.DAT;1>,-
		ORG=SEQ,-
		RFM=VFC,-
		RAT=CR,-
		FSZ=4,-
		MRS=100,-
		NAM=NAMBLK,-
		DEQ=12
FLUSH_FAB::
	$FAB	FAC=<PUT,GET>,-
		FNM=<TST$DISK:T4FILE.DAT;1>,-
		NAM=NAMBLK,-
		SHR=<PUT,GET,UPI>,-
		XAB=FHCXAB

;
;	attention: in order to assemble this module, t4rab and FLUSH_RAB
;		have been put into another module, RMSTESTR
;

FHCXAB::
	$XABFHC	NXT=ALQXAB
ALQXAB::
	$XABALL	NXT=PROXAB,-
		DEQ=15
PROXAB::
	$XABPRO
DATXAB::
	$XABDAT
RDTXAB::
	$XABRDT
TRMXAB::
	$XABTRM
	$RMSDEFEND
		EXTRA=XAB$L_SBN-4	; 4 bytes of extra (spare) char.
SAVEPRO:
	.WORD	0			; word to save pro in

;
;THESE ARE THE DATA STRUCTURES FOR DATE AND TIME XAB CHECKS
;

CDT:	.ASCII	/ 3-MAR-1963 03:03:03.03/
	CDTL=.-CDT
RDT:	.ASCII	/ 4-APR-1944 04:04:04.04/
	RDTL=.-RDT
EDT:	.ASCII	/ 8-AUG-1988 08:08:08.08/
	EDTL=.-EDT
RDT2:	.ASCII	/12-DEC-1948 12:12:12.12/
	RDTL2=.-RDT2
CDTDEC:	.LONG	CDTL,CDT
RDTDEC:	.LONG	RDTL,RDT
EDTDEC:	.LONG	EDTL,EDT
RDT2DEC:
	.LONG	RDTL2,RDT2

CURRVN:	.WORD	0
LEN:	.WORD	0			; length of returned string
CMPDAT:	.BLKB	25			; has room for longest possible date
CMPDATDEC:
	.LONG	25,CMPDAT
CURRDT:	.LONG	0			; address of current rdt string
UIC:	.LONG	0			; room to save current uic
	DATLEN=11			; length of date
	TIMLEN=20			; length of ascii date and time



RMT$TEST_4A::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	BEGIN	<XAB TESTS>

;
; create a file -- sys$disk:t4file.dat;1 -- with controlled attributes
; and write 1 record to it, to further control the attributes
;

	MOVAL	T4FAB,R11		; r11 will be fab throughout
					; initialize values for restartability
	$FAB_STORE	FAB=R11,-
		SHR=<PUT,GET,UPI>,-
		FOP=<SUP,CTG>,-
		XAB=FHCXAB,-
		ALQ=#0,-
		FAC=PUT

	MOVL	#999,EXTRA+FHCXAB	; stuff something in spare
	CLRW	XAB$W_LRL+FHCXAB	; make sure lrl is 0
	$XABPRO_STORE	XAB=PROXAB,-
		PRO=<RWED,RWED,RD,RWED>,-
		UIC=<333,44>
	MOVL	XAB$L_UIC(R0),UIC	; save it for checking
	MOVW	XAB$W_PRO(R0),SAVEPRO	; ditto
	$XABALL_STORE	XAB=ALQXAB,-
		ALQ=#10,-
		AOP=CTG
	$CREATE	FAB=R11,-		; with all xabs linked in
		ERR=REPORT_ERROR
	BSBW	ERR
	BBC	#DEV$V_SQD,-
		FAB$L_DEV(R11),10$
	BRW	MTA			; if mta, skip this
10$:	CMPL	ALQXAB+XAB$L_ALQ,#10	; allocated 10 blks?
	BGEQ	RIGHT
	FIELD	<ALQ IN XAB ( NOT = DESIRED ALLOC ON CREATE)>
RIGHT:
	BBC	#FAB$V_CBT,FAB$L_FOP(R11),OK1
	FIELD	<CBT BIT SET, THEREFORE>
OK1:	BBS	#FAB$V_CTG,FAB$L_FOP(R11),OK2
	FIELD	<CTG BIT CLEAR, THEREFORE>
OK2:
	BSBW	ZERO_XABS
	$DISPLAY	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHECK_CR		; check xabs
	TYPE	<OK AFTER CREATE AND DISPLAY>

;
;extend
;

	MOVL	#48,XAB$L_ALQ+ALQXAB	; set up
	CLRL	XAB$L_NXT+ALQXAB
	MOVAL	ALQXAB,FAB$L_XAB(R11)
	$EXTEND	FAB=R11,-		; extend file after create
		ERR=REPORT_ERROR

;
;using alq from xab
;

	BSBW	ERR
	CMPL	ALQXAB+XAB$L_ALQ,#48	; alq in xab should ret actual alq
	BGEQ	ALQOK
	FIELD	<ALQ IN XAB (NOT = DESIRED ALLOC ON EXTEND)>
ALQOK:

;
;undo damage to xab links
;

	MOVAL	FHCXAB,FAB$L_XAB(R11)
	MOVAL	ALQXAB,XAB$L_NXT+FHCXAB
	MOVAL	PROXAB,XAB$L_NXT+ALQXAB
	$CONNECT	RAB=T4RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	MOVC5	#0,(SP),#^A/A/,#50,CPYBUF; move 50 a's into cpybuf
	MOVAL	CPYBUF,RAB$L_RBF+T4RAB
	MOVW	#50,RAB$W_RSZ+T4RAB
	$PUT	RAB=T4RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR


;
; take some time to try out flush
;

	$FLUSH	RAB=T4RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	ZERO_XABS
	$OPEN	FAB=FLUSH_FAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHECK_XABS
	$CONNECT	RAB=FLUSH_RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$GET	RAB=FLUSH_RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	CMPW	RAB$W_RSZ+FLUSH_RAB,#50	; got right rec. size
	BEQL	RSZ_OK
	FIELD	<RSZ IN RAB>
RSZ_OK:
	CMPC5	#50,CPYBUF,#^A/A/,#0,(SP); is record ok?
	BEQL	YES
	FIELD	<RECORD>
YES:
	$GET	FLUSH_RAB		; this should be eof
	CMPL	R0,#RMS$_EOF
	BEQL	10$
	MOVAL	FLUSH_RAB,R10
	BSBW	EOFPUT
10$:
	CLRL	FAB$L_XAB+FLUSH_FAB	; no xabs on close for now
	$DISCONNECT	RAB=FLUSH_RAB,-	; clean up after flush
		ERR=REPORT_ERROR
	BSBW	ERR
	$CLOSE	FAB=FLUSH_FAB,-		; all done w/ flush test
		ERR=REPORT_ERROR
	BSBW	ERR
	TYPE	<ALL DONE WITH FLUSH TEST>

;
; all done with flush test
;




	$DISCONNECT	RAB=T4RAB,-
		ERR=REPORT_ERROR
	BSBW	ERR
	$CLOSE	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR

	CLRB	FAB$B_SHR(R11)
	MOVAL	FHCXAB,FAB$L_XAB(R11)	; set up xab links again
	BSBW	ZERO_XABS
	$OPEN	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR

	BBC	#FAB$V_CBT,FAB$L_FOP(R11),CC
	FIELD	<CBT BIT WAS SET, THEREFORE>
CC:	BBC	#FAB$V_CTG,FAB$L_FOP(R11),OK; after extend, not ctg
	FIELD	<CTG BIT WAS SET, THEREFORE>

;
; check fhc xab
;

OK:	BSBW	CHECK_XABS

;
;do another extend, forcing it to get the value from the alq of the fab
;

	CLRL	FAB$L_XAB(R11)
	MOVL	#12,FAB$L_ALQ(R11)
	$EXTEND	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	FAB$L_ALQ(R11),#12	; alq in fab=12
	BGEQ	ALQOK1
	FIELD	<ALQ IN FAB (NOT = DESIRED ALLOCATION AFTER EXTEND)>
ALQOK1:

;
;change protection and uic on close
;

	$XABPRO_STORE	XAB=PROXAB,-
		PRO=<RWED,RWED,RED,RWED>,-
		UIC=<222,55>
	MOVL	R0,FAB$L_XAB(R11)		; set up xab
	MOVW	XAB$W_PRO(R0),SAVEPRO		; for check
	MOVL	XAB$L_UIC(R0),UIC		; ditto
	$CLOSE	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	FHCXAB,FAB$L_XAB(R11)
	$OPEN	FAB=R11,-			; check changes after ext
		ERR=REPORT_ERROR
	BSBW	ERR
	BBC	#FAB$V_CBT,FAB$L_FOP(R11),NOCBT
	FIELD	<CBT BIT WAS SET, THEREFORE>
NOCBT:	BBC	#FAB$V_CTG,FAB$L_FOP(R11),NOCTG	; shouldn't be ctg, after extend
	FIELD	<CTG BIT WAS SET, AFTER 2 EXTENDS, THEREFORE>
NOCTG:
	MOVAL	FHCXAB,R9			; check pertinent fields
	CMPL	XAB$L_HBK(R9),#70		; alq=10+48+12
	BGEQ	HBKOK
	FIELD	<HBK IN FHCXAB (AFTER 2ND EXTEND)>
HBKOK:	CMPL	XAB$L_SBN(R9),#0		; not ctg anymore
	BEQL	STILL_OK
	FIELD	<SBN IN FHCXAB (AFTER 2ND EXTEND)>
STILL_OK:
	BSBW	CHECK_ALL
	.BYTE	70,0				; values for alq,ctg (not ctg)
	BSBW	CHECK_PRO
	TYPE	<DONE WITH 2ND EXTEND, NOW TEST DATES>
	CLRL	FAB$L_XAB(R11)			; no xabs on this close, for now
MTA:	$CLOSE	FAB=R11,-			; continue if mta
		ERR=REPORT_ERROR
	BSBW	ERR

;
;before finishing up, have some fun with the dat and rdt xabs
;

	MOVAL	DATXAB,R9
	$BINTIM_S	CDTDEC,XAB$Q_CDT(R9)
	$BINTIM_S	RDTDEC,XAB$Q_RDT(R9)
	$BINTIM_S	EDTDEC,XAB$Q_EDT(R9)
	MOVW	#200,XAB$W_RVN(R9)
	MOVW	#200,CURRVN
	MOVL	R9,FAB$L_XAB(R11)
	CLRL	XAB$L_NXT(R9)
	MOVAL	RDT,CURRDT			; current rdt str
	BISL	#FAB$M_RWO,FAB$L_FOP(R11)	; rewind if mta
	$CREATE	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	RDTXAB,XAB$L_NXT+DATXAB
	BSBW	ZERO_DAT_XABS
	$DISPLAY	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHECK_DATES
	MOVAL	RDT2,CURRDT			; get a new rdt
	MOVAL	RDTXAB,R9
	$BINTIM_S	RDT2DEC,XAB$Q_RDT(R9)
	MOVW	#300,XAB$W_RVN(R9)
	MOVW	#300,CURRVN
	MOVL	R9,FAB$L_XAB(R11)		; only rdt for close
	$CLOSE	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	DATXAB,FAB$L_XAB(R11)		; only dat for open
	CLRL	XAB$L_NXT+DATXAB
	BSBB	ZERO_DAT_XABS
	$FAB_STORE	FAB=R11,-		; can't "put" to mta
		FAC=GET
	$OPEN	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	RDTXAB,FAB$L_XAB(R11)		; get rdt on display
	$DISPLAY	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR
	BSBW	CHECK_DATES
	CLRL	FAB$L_XAB(R11)			; no xabs for this close
	$CLOSE	FAB=R11,-
		ERR=REPORT_ERROR
	BSBW	ERR


	$FAB_STORE	FAB=R11,-		; restore fac
		FAC=PUT
	BICL	#FAB$M_RWO,FAB$L_FOP(R11)	; and fop
	FINISH	<XAB TESTS>
	RET


;
;2 routines to zero out the xabs before checking the results
;

ZERO_DAT_XABS:

;
;zero out the dat and rdt xabs
;

	MOVC5	#0,(SP),#0,#<XAB$C_DATLEN-6>,DATXAB+6
	MOVC5	#0,(SP),#0,#<XAB$C_RDTLEN-6>,RDTXAB+6
	RSB

ZERO_XABS:

;
;zero out the fhc, all and pro xabs
;

	MOVC5	#0,(SP),#0,#<XAB$C_FHCLEN-6>,FHCXAB+6
	MOVC5	#0,(SP),#0,#<XAB$C_ALLLEN-6>,ALQXAB+6
	MOVC5	#0,(SP),#0,#<XAB$C_PROLEN-6>,PROXAB+6
	RSB

CHECK_CR:

;
;routine to check xabs after create and subsequent display
;

	BSBW	CHECK_FHC
	.BYTE	0,10,0,1		; values for lrl,alq,ffb,sbn
	BSBW	CHECK_ALL
	.BYTE	10,1			; values for alq,ctg ( should be)
	BSBW	CHECK_PRO
	RSB

CHECK_XABS:

;
;general routine to check out all xabs
;

	BSBW	CHECK_FHC
	.BYTE	50,58,56,0		; values for lrl,alq,ffb,sbn(not ctg)
	BSBW	CHECK_ALL
	.BYTE	58,0			; values for alq,ctg ( not ctg anymore)
	BSBW	CHECK_PRO
	RSB

CHECK_ALL:

;
;routine to check out the allocation xab
;

	MOVAL	ALQXAB,R9
	CMPW	XAB$W_DEQ(R9),#15
	BEQL	DEQOK
	FIELD	<DEQ IN ALL. XAB>
DEQOK:	CMPB	XAB$B_BKZ(R9),#0
	BEQL	BKZOK
	FIELD	<BKZ IN ALL. XAB>
BKZOK:	MOVZBL	@(SP),R0
	INCL	(SP)
	CMPL	R0,XAB$L_ALQ(R9)
	BLEQ	ALQOK2
	FIELD	<ALQ IN ALL. XAB>
ALQOK2:	MOVZBL	@(SP),R0
	INCL	(SP)
	BLBC	R0,NOTCTG
	BBS	#XAB$V_CTG,XAB$B_AOP(R9),AOPOK	; should be set
	FIELD	<CTG CLR IN AOP, THEREFORE>
NOTCTG:	BBC	#XAB$V_CTG,XAB$B_AOP(R9),AOPOK	; should be clear
	FIELD	<CTG SET IN AOP, THEREFORE>
AOPOK:	RSB

CHECK_PRO:

;
;check the protection xab
;

	MOVAL	PROXAB,R9
	CMPW	SAVEPRO,XAB$W_PRO(R9)	; cmp to saved value
	BEQL	PROOK
	FIELD	<PROT FIELD IN PROT XAB>
PROOK:	CMPL	UIC,XAB$L_UIC(R9)
	BEQL	UICOK
	FIELD	<UIC FIELD IN PROT. XAB>
UICOK:	RSB


CHECK_FHC:

;
;  check fhc xab carefully
;

	MOVAL	FHCXAB,R9		; r9 is ptr to xab thru-out cmp's
	CMPL	EXTRA(R9),#999		; check spare char.
	BEQL	EXTC
	FIELD	<SPARE CHARACTERISTICS IN FHC XAB>
EXTC:
	CMPB	XAB$B_RFO(R9),#FAB$C_VFC; check rec. format & org.
	BEQL	RFOC
	FIELD	<RFO IN FHC XAB>
RFOC:	BITB	#FAB$M_CR,XAB$B_ATR(R9)	; check rat field
	BNEQ	ATRC
	FIELD	<ATR IN FHC XAB>
ATRC:	MOVZBL	@(SP),R0
	INCL	(SP)
	CMPW	XAB$W_LRL(R9),R0	; check longest record len
	BEQL	LRLC
	FIELD	<LRL IN FHC XAB>
LRLC:	MOVZBL	@(SP),R0
	INCL	(SP)
	CMPL	XAB$L_HBK(R9),R0	; check alq
	BGEQ	HBKC
	FIELD	<HBK IN FHC XAB>
HBKC:	CMPL	XAB$L_EBK(R9),#1	; check end block
	BEQL	EBKC
	FIELD	<EBK IN FHC XAB>
EBKC:	MOVZBL	@(SP),R0
	INCL	(SP)
	CMPW	XAB$W_FFB(R9),R0	; check first free byte
	BEQL	FFBC			; its len of rec + fsz + 2
	FIELD	<FFB IN FHC XAB>
FFBC:	CMPB	XAB$B_BKZ(R9),#0	; check bucket size
	BEQL	BKZC
	FIELD	<BKZ IN FHC XAB>
BKZC:	CMPB	XAB$B_HSZ(R9),#4	; check fixed area size
	BEQL	HSZC
	FIELD	<HSZ IN FHC XAB>
HSZC:	CMPW	XAB$W_MRZ(R9),#100	; check max. rec size
	BEQL	MRZC
	FIELD	<MRZ IN FHC XAB>
MRZC:	CMPW	XAB$W_DXQ(R9),#15	; check def ext. qty
	BEQL	DXQC
	FIELD	<DXQ IN FHC XAB>
DXQC:	MOVZBL	@(SP),R0
	INCL	(SP)
	BLBC	R0,10$
	CMPL	XAB$L_SBN(R9),#0	; make sure non-zero lbn

;
;since it's ctg
;

	BNEQ	FHC_OK
	BRB	20$
10$:	CMPL	XAB$L_SBN(R9),#0	; make sure zero lbn
	BEQL	FHC_OK			; since it isn't contig.
20$:	FIELD	<SBN IN FHC XAB>
FHC_OK:	RSB


CHECK_DATES:

;
;routine to check edt and cdt in dat xab
;and rdt and rvn in both dat and rdt xab's
;

	MOVW	#DATLEN,LEN			; default is check date only
	BBS	#DEV$V_SQD,FAB$L_DEV(R11),10$
	MOVW	#TIMLEN,LEN			; if not mta, check date and time
10$:	MOVAL	DATXAB,R9
	$ASCTIM_S	,CMPDATDEC,XAB$Q_CDT(R9)
	CMPC3	LEN,CDT,CMPDAT
	BEQL	CDTOK
	FIELD	<CDT IN DAT XAB>
CDTOK:
	$ASCTIM_S	,CMPDATDEC,XAB$Q_EDT(R9)
	CMPC3	#DATLEN,EDT,CMPDAT		; only check date
	BEQL	EDTOK
	FIELD	<EDT IN DAT XAB>
EDTOK:
	BBC	#DEV$V_SQD,FAB$L_DEV(R11),10$
	RSB					; that's it if mta
10$:	$ASCTIM_S	,CMPDATDEC,XAB$Q_RDT(R9)
	CMPC3	LEN,@CURRDT,CMPDAT
	BEQL	RDTOK
	FIELD	<RDT IN DAT XAB>
RDTOK:
	$ASCTIM_S	,CMPDATDEC,XAB$Q_RDT+RDTXAB
	CMPC3	LEN,@CURRDT,CMPDAT
	BEQL	RDTOK1
	FIELD	<RDT IN RDT XAB>
RDTOK1:
	CMPW	CURRVN,XAB$W_RVN(R9)
	BEQL	RVNOK
	FIELD	<RVN IN DAT XAB>
RVNOK:	CMPW	CURRVN,XAB$W_RVN+RDTXAB
	BEQL	RVNOK1
	FIELD	<RVN IN RDT XAB>
RVNOK1:	RSB
	.END
