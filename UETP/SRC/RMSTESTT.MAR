	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;++
;
; Modified by:
;
;	V02-001	REFORMAT	Paulina S Knibbe	28-Jul-1980
;
;--
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment, user mode priv, rmsbug,

;
; and optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  the $begin macro defines the following switches for rms assembly
;	(bits in $$rmstest):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$rms_umode)	assemble code for user mode
;	bit 3	($$rms_tbugchk)	include optional debugging code
;	bit 4	($$rms_pbugchk)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTRANS,020,__RMSTEST,<TRANS LOG NAME>,<LONG,GBL>
	.ENABL	DBG
	$SSDEF				; define system codes
	.PSECT	__RMSTEST,GBL,LONG
VERBSTR:
	.LONG	VERBL,VERBS
VERBS:	.ASCII	/RMS$TST_VERBOSITY_FLAG/
	VERBL=.-VERBS
VERBOSITY::
	.BYTE	0			; flag for amount of verbosity

;
; 0 for go-no go messages, 1 for interactive
;

VERBLEN:
	.WORD	0			; catch len of translation

;
; this is a routine to translate the logical name rms$tst_verbosity_flag
; and set the verbosity flag depending on the results
; a translation greater than 1 character implies go-no-go testing, with
; less output (verbosity=0)
; no translation implies interactive debugging-testing, with much verbosity
; (verbosity := 1)
;

TRAN::	$TRNLOG_S	VERBSTR,-
			VERBLEN,-
			VERBSTR		; this obviously isn't re-entrant

;
; but there's no reason for it to be
;

	CMPL	R0,#SS$_NOTRAN		; no translation?
	BEQL	NOTRAN
	BLBC	R0,.			; any other error
	CMPW	VERBLEN,#1		; only translated to 1 char.
	BEQL	NOTRAN			; doesn't count as translation
	RSB
NOTRAN:	MOVB	#1,VERBOSITY		; set interactiveness bit
	RSB

;

	.END
