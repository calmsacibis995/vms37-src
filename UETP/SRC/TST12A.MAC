	.TITLE	TST12A
	.IDENT	/V03000/
	.PSECT	TST12A
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; VERSION X01
;
; WRITTEN BY LOUIS REICH,   JANUARY,1973
; MODIFIED BY CLARK A. D'ELIA
; MODIFIED BY TOM MILLER FOR RSX-11M,  AUGUST, 1974
;	7/15/75 (CHANGE EXPECTED ERROR CODE ON INVALID DPB SIZE)
; MODIFIED BY LARRY JONES FOR VAX/VMS, JULY, 1978
;
;+
;
; MODULE 'TST12A' IS DESIGNED TO RUN COOPERATIVELY WITH MODULE 'TST12B'
; TO TEST THE FOLLOWING RSX-11M SYSTEM DIRECTIVES:
;	ABORT
;	EXIT-IF
;	EXIT
;
; TST12A PERFORMS ALL TESTS ON THE ABORT DIRECTIVE
; TST12B PERFORMS ALL TESTS ON THE EXITIF DIRECTIVE
;
; THE TESTING SEQUENCE IS AS FOLLOWS:
; FIRST TST12A CLEARS EF53 AND EF54, REQUESTS TST12B, AND WAITS FOR
; EF53 TO BE SET.  (TST12B IS REQUESTED TWICE AND PERFORMS DIFFERENT
; TESTS EACH TIME.  IT USES EF54 TO DETERMINE WHICH SET OF TESTS
; TO PERFORM.)  TST12B SETS EF54 AND NOTICING THAT IT WAS CLEAR
; IT PERFORMS TESTS CHECKING ALL ERROR CONDITIONS ON EXITIF CALLS.
; AT THE CONCLUSION OF THESE TESTS, TST12B SETS EF53 AND ENTERS AN
; INDEFINATE WAIT.  WHEN EF53 IS SET TST12A IS ALLOWED TO CONTINUE.
; IT FIRST PERFORMS A VALID ABORT ON TST12B AND THEN CHECKS ALL THE
; ERROR CONDITIONS FOR CALLS TO THE ABORT DIRECTIVE.  IT THEN REQUESTS
; TST12B AGAIN AND WAITS FOR 30 SECONDS BEFORE EXITING.  THIS TIME TST12BB
; SETS EF54 AGAIN BUT NOTICES THAT IT WAS ALREADY SET.  IT THEREFORE
; PERFORMS TESTS ON VALID CALLS TO EXITIF AND EVENTUALLY EXITING FROM THE
; SYSTEM.  AFTER ITS 30 SECOND WAIT, TST12A PRINTS THE END OF TEST
; MESSAGE AND EXITS.
;-
	.MCALL	CALL,RQST$,ABRT$,EXIT$S,CLEF$S
	.MCALL	WTSE$S,MRKT$S
;
; LOCAL DATA
;
TST12B:	.RAD50	/12B/
TST12X:	.RAD50	/12X/
BDDPB:	.BYTE	83.,6
	.EVEN
	.PAGE

;	
; THE NEXT PSECT CONTAINS ONLY DPB'S
;
	.PSECT	$DPB$$
RQDPB:	RQST$	TST12B
ABDPB:	ABRT$	TST12B
	.PAGE
	.PSECT	TST12A
;+
;
; THIS STEP INITIATES THE TESTING AND PRINTS AN
; IDENTIFYING MESSAGE
;
;-
	$$TEST 	12,A
	CALL	.STST
;+
;
; HERE TST12A CLEARS EF53 AND EF54, REQUESTS TASK TST12B, AND WAITS
; FOR EF53 TO BE SET.  TST12B PERFORMS SOME TESTS ON THE EXITF DIRECTIVE,
; SETS EF53 TO ALLOW THIS TASK TO CONTINUE, AND THEN WAITS TO BE ABORTED.
;
;-
	CLEF$S	#53.,.RJCT	;CLEAR EF53
	CLEF$S	#54.,.RJCT	;CLEAR EF54 TO INSURE INITIAL TEST SEQ.
	DIR$	#RQDPB,.RJCT	;REQUEST TST12B
	WTSE$S #53.,.RJCT	;WAIT FOR TST12B TO SET EF53.
	.PAGE
;+
;
; NOW THAT TST12B HAS COMPLETED ITS TESTS AND IS WAITING,
; WE WILL TRY A VALID ABORT ON IT.
;
;-
	$$STEP
	MOV	#ABDPB,R0	
;GET ABORT DPB ADDRESS
	DIR$	R0,.RJCT	;INVOKE ABORT FOR TST12B
	CALL	.SUCC		;CHECK FOR VALID RETURN CODE
;+
;
; NEXT TST12X WHICH IS NOT INSTALLED
;
;-
	$$STEP
	MOV	TST12X,A.BTTN+2(R0) ;PUT TASK NAME INTO DPB
	DIR$	R0		;INVOKE ABORT FOR TST12X
	MOV	#IE.INS,R1	;MOVE EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
;+
;
; NEXT TST12B AGAIN WHICH SHOULD BE INACTIVE THIS TIME
;
;-
	$$STEP
;*****
	JMP	STP4
;*****
	MRKT$S	#8.,#30.,#SECOND,,.RJCT	;MARK-TIME
	WTSE$S	#8.,.RJCT	;WAIT FOR PREVIOUS ABORT
	MOV	TST12B,A.BTTN+2(R0) ;PUT TASK NAME INTO DPB
	DIR$	R0		;INVOKE ABORT FOR TST12B
	MOV	#IE.ACT,R1	;MOVE EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
;+
;
; NEXT AN INVALID DPB SIZE
;
;-
	$$STEP
	MOV	BDDPB,(R0)	;MOVE IN BAD SIZE
	DIR$	R0		;INVOKE DIRECTIVE
	MOV	#IE.SDP,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
	.PAGE
;+
;
; IN THIS STEP WE REQUEST TST12B AGAIN AND WAIT 30 SECONDS FOR IT TO
; PERFORM TWO VALID CALLS TO EXITIF, AFTER WHICH IT SHOULD POSSIBLY
; PRINT ERROR MESSAGES, BUT EVENTUALLY EXIT.
;
;-
	$$STEP
;*****
	JMP	STP6
;*****
	DIR$	#RQDPB,.RJCT	;REQUEST TST12B
	MRKT$S	#8.,#30.,#SECOND,,.RJCT	;MARK TIME FOR 30 SECONDS
	WTSE$S	#8.,.RJCT	;AND WAIT
;+
;
; FINALLY IN THIS LAST STEP WE WILL TEST AN ERROR CONDITION OF THE
; EXIT DIRECTIVE, EXIT WITH AN INVALID DPB SIZE.
;
;-
	$$STEP
	MOV	(PC)+,-(SP)	;EXIT DIC WITH INVALID DPB SIZE TO STACK
	.BYTE	51.,0
	DIR$			;INVOKE DIRECTIVE
	MOV	#IE.SDP,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
	MOV	(PC)+,-(SP)	;PUSH DIC WITH INVALID DPB SIZE
	.BYTE	51.,2		;
	DIR$			;INVOKE DIRECTIVE
	MOV	#IE.SDP,R1	;SET EXPECTED ERROR CODE
	CALL	.FAIL		;CHECK ERROR CODE
	CALL	.ETST		;PRINT END OF TEST MESSAGE
	EXIT$S	.RJCT		;BYE
	.END	STP0
