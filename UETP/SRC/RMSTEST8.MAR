	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment, user mode priv, rmsbug,
					; and optional debug code

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
; RMSTEST8
;
;	Indexed sequential test program
;
;
;  The $BEGIN macro defines the following switches for rms assembly
;	(bits in $$RMSTEST):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$rms_umode)	assemble code for user mode
;	bit 3	($$rms_tbugchk)	include optional debugging code
;	bit 4	($$rms_pbugchk)	include "semi-permanent" debugging code
;
;
; Written by:	????		Date: ???
;
; Modified by:
;
;	V02-002	REFORMAT	Maria del C. Nasr	25-Jul-1980
;

	.LIST
	.EXTERNAL	REPORT_ERROR,BEG_DESCR,BEGPUT,FIN_DESCR,FINPUT,FLD_DESCR,FLDPUT,VERBOSITY,ERR,EOFPUT
	$BEGIN	RMSTEST8,002,__RMSTEST,<INDEXED FILE TEST PROGRAM>,<GBL,LONG>

;
; Macros...
;

	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE

	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN

	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH

	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD

	.MACRO	MBPT ?L			; bpt, maybe?
	BLBC	VERBOSITY,L
	BPT
L:
	.ENDM	MBPT

;
; IXVAR1 -- program to create and populate the rms-11 file
;	     idxvr1.dat  ;  records are variable length
;	     keys cannot change;  dupes are fixed
;


	.ENABL	DBG
	.NLIST	MEB
	$RMSDEF


;
;  buffer area
;

DELBUF:	.BLKB	32.			; store deleted record numbers
BASLEN:	.WORD	56.			; record 0 base length (changes)
PSTEP:	.WORD	1			; pseudo-step buffer

RFABUF:	.BLKW	768.			; rfa storage, in rec # order

;
; Step and first have to be such that recnum is not duplicated in 255 puts
;

STEP:	.BYTE	255.			; set byte by odt to desired step val
	.BYTE	0			; key to get 1st record on find random

FIRST:	.BYTE	255.			; set byte by odt to desired step val

COUNT:	.BYTE	0
LAST:	.BYTE	0
OPERATION:
	.LONG

;
; this is the record buffer:
;

MASBUF:	.BLKB	2			; rec # byte, dup control byte
	.ASCII	/ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ/

RECNUM:	.REPT	131.			; rec # byte, nbytes fill, check byte,
	.WORD	0			; 5 bytes for rfa update, 255.-n bytes
	.ENDM				; left over (n= rec#)

;
; structure area
;


	.PSECT	DATA,LONG
FAB1:	$FAB	FAC=<PUT,GET,UPD,DEL>,-
		FNM=<TST$DISK:IDXVAR1.DAT>,-
		ORG=IDX,-
		XAB=XAB0,-
		ALQ=300,-
		DEQ=100,-
		NAM=NAMBLK,-
		FOP=<NAM>,-
		BKS=1

NAMBLK:	$NAM

RAB1:	$RAB	RAC=KEY,-
		RBF=MASBUF,-
		UBF=MASBUF,-
		USZ=311,-
		KBF=STEP+1,-
		KSZ=1,-
		ROP=<KGE>,-
		MBF=10,-
		FAB=FAB1
;
; key is a,a-z(2),a,a,a,a,a-z(2),a-z(2),rec#
;  therefore they are ordered by recnum
;

XAB0:	$XABKEY	NXT=XAB1,-
	POS=<2,2,2,2,2,2,2,2>,-
	SIZ=<1,52,1,1,1,1,52,53>,-
	REF=0

;
; key is a,a-z(2),a,a,a,a,a-z(2),a-z(2),rec#
; therefore they are ordered by recnum
;

XAB1:	$XABKEY	NXT=XAB2,-
	POS=<2,2,2,2,2,2,2,2>,-
	SIZ=<1,52,1,1,1,1,52,53>,-
	REF=1

;
; key is a-z(2),a-z(2),a-z(2),a,a,a,a-b,a
; therefore recnums appear in order of input
;

XAB2:	$XABKEY	NXT=XAB3,-
	POS=<2,2,2,2,2,2,2,2>,-
	SIZ=<52,52,52,1,1,1,2,1>,-
	REF=2

;
; key is a,a,a,a-z(2),a-z(2),a-z(2),a-b,(127,128)
; therefore mostly dups, but not all
;

XAB3:	$XABKEY	NXT=XAB4,-
	POS=<2,2,2,2,2,2,2,1>,-
	SIZ=<1,1,1,52,52,52,2,1>,-
	REF=3

;
; key is a-a,a-z(2),recnum
; so is ordered by recnum
;

XAB4:	$XABKEY	NXT=XAB5,-
	POS=<2,2>,-
	SIZ=<27,53>,-
	REF=4

;
; key is rec# only
;

XAB5:	$XABKEY	NXT=XAB6,-
	POS=<0>,-
	SIZ=<1>,-
	REF=5

;
; key is a
; therefore records are in input order
;

XAB6:	$XABKEY	NXT=XAB7,-
	POS=<2>,-
	SIZ=<1>,-
	REF=6

;
; key is (127,128)
; mostly all dups

XAB7:	$XABKEY	POS=<1>,-
	SIZ=<1>,-
	REF=7


;
; begin code
;

	.PSECT	__RMSTEST,LONG

RMT$INDEX::

START:	.WORD	0
	MOVAB	FAB1,R10		; address of fab
	BEGIN	<INDEXED TEST>
	CLRL	OPERATION		; indicate create operation
	$CREATE	FAB=R10,ERR=REPORT_ERROR; do create
	BSBW	ERR

1$:	MOVAB	RAB1,R10
	INCL	OPERATION		; indicate connect operation
	$CONNECT RAB=R10,-
		 ERR=REPORT_ERROR	; do connect
	BSBW	ERR

2$:	MOVB	#127.,MASBUF+1		; set up for inserts
	MOVZBL	FIRST,R3		; start record #

PNEXT:	BICL2	#^X<FFFFFF00>,R3	; insert the records
	MOVB	R3,MASBUF
	MOVB	R3,RECNUM
	MOVB	R3,L^RECNUM+1(R3)
	$RAB_STORE	RAB=R10,-
			RSZ=R3
	ADDW2	BASLEN,RAB$W_RSZ(R10)
	MOVZBL	#2,OPERATION		; indicate put
	$PUT	RAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	MOVZBL	#6,R0
	MULL2	R3,R0
	MOVL	RAB$L_RFA0(R10),-
		 L^RFABUF(R0)		; move rfa of record
	MOVW	RAB$W_RFA4(R10),-
		 L^RFABUF+4(R0)		; 6 char long
	MCOMB	MASBUF+1,MASBUF+1
	CLRB	L^RECNUM+1(R3)
	MOVZBL	STEP,R0
	ADDL2	R0,R3
	ADDB2	#4,COUNT
	BNEQ	PNEXT
	SUBB3	R0,R3,LAST		; move last key put into  last
	JSB	CHKALL			;  check all the indexes

	$RAB_STORE	RAB=R10,-
			RAC=KEY
	INCL	OPERATION
	$FIND	RAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	$RAB_STORE	RAB=R10,-
			RAC=SEQ
	MOVZBL	LAST,R3
	MULL3	#6,R3,R4
	ADDL2	#RFABUF,R4
	MOVW	#61.,BASLEN

UNEXT:	MOVZBL	#4,OPERATION
	$GET	RAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	MOVZBL	MASBUF,R6
	CMPL	R6,R3
	BEQL	DAT_OK
	FIELD	<DATA>

DAT_OK:	MOVAL	RECNUM+2,R0
	ADDL2	R3,R0			; position to end of buffer
	MOVL	(R4)+,(R0)+		; move rfa in for update
	MOVB	(R4)+,(R0)+
	INCL	R4
	ADDW2	#5,RAB$W_RSZ(R10)
	MOVZBL	#5,OPERATION
	$UPDATE	RAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	RECNUM+2,R0		; position to end of buffer
	ADDL2	R3,R0
	CLRB	-1(R0)
	CMPL	RAB$L_RFA0(R10),(R0)	; check rfa after update
	BEQL	RFA_OK
	FIELD	<DATA (RFA) AFTER UPDATE>

RFA_OK:	CLRL	(R0)+
	CMPB	RAB$W_RFA4(R10),(R0)
	BEQL	RFA_OK1
	FIELD	<DATA (RFA) AFTER UPDATE>
RFA_OK1:
	CLRB	(R0)
	INCB	R3			; r3 started as last key put
					; and they increase by 1
	BEQL	10$
	BRW	UNEXT
10$:	$RAB_STORE	RAB=R10,-
			USZ=#316.
	MOVW	#1,PSTEP
	JSB	CHKALL

;
; test delete
;

	CLRB	COUNT
	MOVZBL	LAST,R3
	$RAB_STORE	RAB=R10,RAC=RFA

DNEXT:	MOVZBL	#4,OPERATION
	MOVZBL	#6,R0
	MULL2	R3,R0
	MOVL	L^RFABUF(R0),-
		 RAB$L_RFA0(R10)	; move rfa into rab for get
	MOVW	L^RFABUF+4(R0),RAB$W_RFA4(R10)
	$GET	RAB=R10,ERR=REPORT_ERROR; get the record, locking it
	BSBW	ERR
	MOVZBL	COUNT,R0
	MOVB	MASBUF,L^DELBUF(R0)	; store away its rec number
	MOVZBL	#6,OPERATION
	$DELETE	RAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	INCB	COUNT
	ADDB2	#8,R3
	BNEQ	DNEXT			; deleted 32 records (every 8th)

;
; check deleted records no longer appear anywhere
;

	MOVB	#7,RAB$B_KRF(R10)	; do all 8 keys
	$RAB_STORE	RAB=R10,RAC=SEQ

KNEXT:	MOVZBL	#8.,OPERATION
	$REWIND	RAB=R10,ERR=REPORT_ERROR; rewind on new key of reference
	BSBW	ERR
	MOVL	#56.,R3			; get all the records sequentially
	MOVZBL	#4,OPERATION

GNEXTD:	$GET	RAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	DELBUF,R6
	ADDL3	#8.,R6,R0
CHK_DEL:
	CMPB	(R6)+,MASBUF		; make sure it wasn't deleted
	BNEQ	DEL_OK
	FIELD	<DATA (RECORD WAS DELETED)>
DEL_OK:	CMPL	R6,R0
	BLSSU	CHK_DEL
	SOBGTR	R3,GNEXTD
	$GET	RAB=R10			; verify end of file
	CMPL	R0,#RMS$_EOF
	BEQL	EOF
	BSBW	EOFPUT
	MBPT

EOF:
	DECB	RAB$B_KRF(R10)
	BGEQ	KNEXT
	MOVZBL	#7,OPERATION		; indicate close
	MOVAL	FAB1,R10
	MOVL	#<FAB$M_NAM!FAB$M_DLT>,FAB$L_FOP(R10)
	$CLOSE	FAB=R10,ERR=REPORT_ERROR
	BSBW	ERR
	FINISH	<INDEXED TEST>
	RET


;
; subroutines
;

;
; this routine checks the indices in various ways
;

CHKALL:	MOVZBL	LAST,R3			; set up to check index on key 0
	BSBW	CHKIDX			; and do so
	MOVZBL	LAST,R3			; set up to check index on key 1
	INCB	RAB$B_KRF(R10)
	BSBW	CHKIDX
	MOVZBL	LAST,R3			; set up to check index on key 4
	$RAB_STORE	RAB=R10,-
			KRF=#4
	BSBW	CHKIDX			; and do so
	MOVZBL	LAST,R3			; set up to check index on key 5
	INCB	RAB$B_KRF(R10)
	BSBW	CHKIDX			; and do so
	MOVZBW	STEP,PSTEP		; set up to check index on key 6
	MOVZBL	FIRST,R3
	INCB	RAB$B_KRF(R10)
	BSBW	CHKIDX			; and do so
	MOVZBL	FIRST,R3		; set up to check index on key 2
	$RAB_STORE	RAB=R10,-
			KRF=#2
	BSBB	CHKIDX			; and do so
	MOVZWL	#2,R0
	MULW2	R0,PSTEP
	MOVZBL	FIRST,R3		; start at beginning
	INCB	RAB$B_KRF(R10)		; index =3
	MOVB	#128.,COUNT		; check half
	BSBB	CHKIDX
	MOVZBL	FIRST,R3		; setup to check second half
	ADDB2	STEP,R3
	MOVB	#128.,COUNT
	BSBB	GNEXT			; cont where left off
	MOVZBL	FIRST,R3
	$RAB_STORE	RAB=R10,-
			KRF=#7
	MOVB	#128.,COUNT
	BSBB	CHKIDX
	MOVZBL	FIRST,R3
	MOVZBL	STEP,R6
	ADDL2	R6,R3
	MOVB	#128.,COUNT
	BSBB	GNEXT
	CLRB	RAB$B_KRF(R10)
	RSB

;
; this routine checks one index
; input:	r3 - start record number
;

CHKIDX:	$RAB_STORE	RAB=R10,-
			RAC=KEY
	MOVZBL	#3,OPERATION		; indicate find function
	$FIND	RAB=R10,ERR=REPORT_ERROR
	$RAB_STORE	RAB=R10,-
			RAC=SEQ

GNEXT:	BICL2	#^X<FFFFFF00>,R3
	MOVZBL	#4,OPERATION		; indicate get function
	$GET	RAB=R10,ERR=REPORT_ERROR
	MOVZBL	MASBUF,R6
	CMPB	R6,R3
	BEQL	D_OK
	FIELD	<DATA>

D_OK:	CMPB	L^RECNUM+1(R3),R3
	BEQL	D_OK1
	FIELD	<DATA>
D_OK1:	SUBW3	BASLEN,RAB$W_RSZ(R10),R0; calc rec # from record length
	CMPW	R0,R3
	BEQL	RSZ
	FIELD	<RSZ>

RSZ:	MOVZBL	#6,R0
	MULL2	R3,R0
	CMPL	RAB$L_RFA0(R10),L^RFABUF(R0)
	BEQL	RFA_OK100
	FIELD	<RFA>

RFA_OK100:
	CMPW	RAB$W_RFA4(R10),L^RFABUF+4(R0)
	BEQL	RFA_OK101
	FIELD	<RFA>
RFA_OK101:
	MOVZWL	PSTEP,R6
	ADDL2	R6,R3
	ADDB2	#4,COUNT
	BEQL	10$
	BRW	GNEXT
10$:	RSB

;
; this is the error subroutine
; operation 	-	0 create
;		1 connect
;		2 put
;		3 find
;		4 get
;		5 update
;		6 delete
;		7 close
;		8 rewind
;

	.END
