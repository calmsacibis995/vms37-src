	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30
	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN
	.LIST
	$BEGIN	RMSTEST7,002,__TMSTEST,<FILE SHARING TEST PROGRAM>,<LONG,GBL>
	.ENABL	DBG
	.NLIST	MEB

;
;	This test program tests the file sharing capability of rms.
;	Both sharing between processes and within a process is tested.
;	Sharing between processes is accomplished by submitting a
;	command file which executes a program which synchronizes itself
;	with this program, through the use of group event flags.   The
;	command file which must be present is "detached.com", as well
;	as the file "detached.exe".
;
; Written by:	R. A. Newell	29 aug 78
;
; Modified By:
;
;	V02-002	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
; Revision History:
;
;	D. M. Bousquet		1 nov 78
;	Created a cif race with the two processes and added a prompt
;	feature that asks for the record #, and step
;
;
;
;	macros
;

	.MACRO	TYPE STRING,?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE

;

	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE

;
;

	.ALIGN	LONG
SHRFAB::
	$FAB	FAC=<GET,PUT,UPD>,FNM=<TST$DISK:[RMS.TEST]SHARED.DAT>,ORG=IDX,-
	MRS=80,FOP=CIF,SHR=<PUT,GET>,RFM=VAR,XAB=SHRXAB0

SHRRAB::
	$RAB	UBF=RECBUF,USZ=80,FAB=SHRFAB,RBF=RECBUF,RSZ=80,RAC=KEY
SHRXAB0::
	$XABKEY	REF=0,POS=0,SIZ=4,DTP=BN4
	.ALIGN	LONG
DPFAB::	$FAB	FAC=GET,FNM=<TST$DISK:[RMS.TEST]DETACHED.COM>,-
	NAM=BCHBLK,FOP=SCF
BCHBLK::
	$NAM	RSA=NAMBCH,RSS=48
NAMBCH:	.BLKB	48
CLUSTER:
	.LONG	EFLNG
	.LONG	EFNAM
EFNAM:	.ASCII	/NOVA/
	EFLNG=	.-EFNAM
RECBUF:	.BLKB	80
TSTWRD:	.ASCII	/TEST/
SH2FAB::
	$FAB	FAC=<GET,PUT>,FNM=<TST$DISK:[RMS.TEST]SHARED.DAT>,-
	MRS=80,SHR=<PUT,GET>,ORG=IDX,RFM=VAR,XAB=SHRXAB0
SH2RAB::
	$RAB	UBF=RECBUF,USZ=80,FAB=SH2FAB,RBF=RECBUF,RSZ=80

;
;
;

SHRSTRT::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	$ASCEFC_S	EFN=#64,NAME=CLUSTER; create cluster 2
	BSBW	ERR			; check for error

	$OPEN	FAB=DPFAB,-
		 ERR=REPORT_ERROR	; open detached.com file
	BSBW	ERR			; check for error

	$CLOSE	FAB=DPFAB,-
		 ERR=REPORT_ERROR	; close and submit com file
	BSBW	ERR			; check for error

	$CREATE	FAB=SHRFAB,-
		 ERR=REPORT_ERROR	; open shared file
	BSBW	ERR			; check for error

	MOVL	R0,R2			; save r0, was it created?
	$CONNECT	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; connect to shared file
	BSBW	ERR			; check for error

	CMPL	R2,#RMS$_CREATED	; opened or created?
	BNEQ	OK0			; opened - synchronized w/d.p.
	MOVL	#1,R2			;  initialize reg 2
OK:	MOVL	R2,RECBUF		;  set up record buffer
	$PUT	RAB=SHRRAB		;  put the record
	AOBLSS	#5,R2,OK		;  put 4 records
OK0:	$WAITFR_S	EFN=#64		; wait for sync with d.p.
	$CLREF_S	EFN=#64		; clear ef #64
	TYPE	<*** WE ARE NOW SYNCHRONIZED WITH THE DETACHED PROCESS ***>
	$SETEF_S	EFN=#65		; turn on d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. for restart

;
;	The detached process is now going to read record 1 from the shared
;	file.  This controlling program will then attempt to read record 2
;	which is in the same bucket as record 1.  This read should be
;	successful.  it will then try to read record 1 which should be
;	automatically locked by the detached process.  Therefore, a record
;	locked error should be returned to this program.
;

	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#2,RECBUF		; set key=rec 2
	TYPE	< AUTOMATIC LOCKING TEST >
	$GET	RAB=SHRRAB,ERR=REPORT_ERROR; get rec 2
	BLBS	R0,OK1			; branch if rec read ok
	TYPE	<*** UNEXPECTED BUCKET LOCKED STATUS ***>
					; rec shouldn't be locked

OK1:	MOVL	#1,RECBUF		; set key=rec 1
	$GET	RAB=SHRRAB,ERR=REPORT_ERROR; get rec 1
	BLBC	R0,OK2			; branch if rec locked
	TYPE	<*** AUTO LOCK FAILURE ON REC 1 *** >
					; rec should be locked

OK2:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart

;
;	The detached process will now read record 2.  This should release the
;	automatic lock on record 1, allowing this controlling process to read
;	it.  This program will then attempt to modify record 1 and store it
;	out to the shared file.  If this succeeds, we will read it back and
;	make sure that the update did indeed succeed.  Finally, we will also
;	try to read record 2 as a double-check on the previous test.
;

	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#1,RECBUF		; set key=rec 1
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; get rec 1
	BLBS	R0,OK3			; branch if rec read ok
	TYPE	<*** AUTO UNLOCK FAILURE ***>
					; record still locked
	BRW	OK4			; bypass update test

OK3:	MOVL	TSTWRD,RECBUF		; update record 1
	TYPE	< UPDATE SHARING TEST >
	$UPDATE	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; put the updated rec
	BLBS	R0,OK3A			; says ok, check it
	TYPE	<*** UPDATE ON REC 1 FAILED ***>
					; record 1 wasn't updated
	BRB	OK4			; bypass check of update

OK3A:	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; get the updated record
	BLBS	R0,OK3B			; branch if rec read ok
	TYPE	<*** READ OF UPDATED RECORD FAILED ***>
					; error on read of rec
	BRB	OK4			; bypass rest of check

OK3B:	CMPL	TSTWRD,RECBUF		; check the update
	BEQL	OK4			; branch if update succeeded
	TYPE	<*** UPDATE OF RECORD DIDN'T MAKE IT ***>
					; comparison failed

OK4:	MOVL	#2,RECBUF		; set key=rec 2
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 2
	BLBC	R0,OK5			; branch if rec not read
	TYPE	<*** AUTO LOCK FAILURE ON REC 2 ***>
					; rec not locked

OK5:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart

;
;	The detached process will now read record 3 with a manual lock.
;	This program will then attempt to read record 3 and expects to get
;	a locked status returned.  The detached process will then be
;	restarted and record 4 will be read with a manual lock.  This
;	program will then attempt to read both records 3 and 4, and expects
;	to get locked status back on each of the read attempts.
;

	$CLREF_S	EFN=#64		; clear ef #64
	TYPE	< MANUAL LOCKING TEST >
	MOVL	#3,RECBUF		; set key=rec 3
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to get rec 3
	BLBC	R0,OK6			; branch if error on get
	TYPE	<*** MANUAL LOCK FAILURE ON REC 3 ***>
					; rec not locked

OK6:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart
	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to get rec 4
	BLBC	R0,OK7			; branch if locked
	TYPE	<*** MANUAL LOCK FAILURE ON REC 4 ***>
					; should be locked

OK7:	MOVL	#3,RECBUF		; set key=rec 3
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to get rec 3
	BLBC	R0,OK8			; branch if locked
	TYPE	<*** PREMATURE MANUAL UNLOCK ON REC 3 ***>
					; should still be locked
OK8:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart

;
;	The detached process will now release the manual lock on record 3,
;	but will not unlock record 4.  This program will then try to read
;	both records 3 and 4 again, expecting to be able to read record 3
;	but not record 4.
;

	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#3,RECBUF		; set key=rec 3
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; get record 3
	BLBS	R0,OK9			; branch if rec 3 read ok
	TYPE	<*** MANUAL UNLOCK FAILURE ON REC 3 ***>
					; should be unlocked

OK9:	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; get record 4
	BLBC	R0,OK10			; branch if rec not read
	TYPE	<*** PREMATURE MANUAL UNLOCK ON REC 4 ***>
					; should still be locked

OK10:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart

;
;	The detached process will now read record 1 without manual locking.
;	This program will then try to read both records 1 and 4, expecting
;	to fail on both.  The detached process will then read record 2,
;	automatically unlocking record 1.  This program will then again try
;	to read records 1 and 4, this time expecting to be able to read
;	record 1, but still not record 4 as it should still be manually
;	locked.  Finally, the detached process will release record 4 and
;	we will try to read it from this program, expecting to be able to.
;

	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#1,RECBUF		; set key=rec 1
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 1
	BLBC	R0,OK11			; branch if not read
	TYPE	<*** AUTO LOCK 2 FAILURE ON REC 1 ***>
					; should be locked
OK11:	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 4
	BLBC	R0,OK12			; branch if not read
	TYPE	<*** PREMATURE MANUAL UNLOCK ON REC 4 ***>
					; should still be locked

OK12:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart
	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#1,RECBUF		; set key=rec 1
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 1
	BLBS	R0,OK13			; branch if able to read
	TYPE	<*** AUTO UNLOCK 2 FAILURE ON REC 1 ***>
					; should be unlocked

OK13:	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 4
	BLBC	R0,OK14			; branch if unable to read
	TYPE	<*** PREMATURE UNLOCK 2 FAILURE ON REC 4 ***>
					; should be locked

OK14:	$SETEF_S	EFN=#65		; restart d.p.
	$WAITFR_S	EFN=#64		; wait for d.p. restart
	$CLREF_S	EFN=#64		; clear ef #64
	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 4
	BLBS	R0,OK15			; branch if able to read
	TYPE	<*** MANUAL UNLOCK 2 FAILURE ON REC 4 ***>
					; should be unlocked

OK15:	$RELEASE RAB=SHRRAB,-
		  ERR=REPORT_ERROR	; release record 4
	BLBS	R0,OK16			; branch if successful
	TYPE	<*** RELEASE FAILURE ON REC 4 ***>
					; release failed??

OK16:

;
;	We have completed the file sharing tests for multi-process
;	sharing of a file.  Now we will test file sharing within one
;	process.  This is accomplished by multiple opens on the same
;	file.  The results should be identical to those experienced
;	by the multi-process file sharing tests.
;
;	We begin by closing the current shared file and the doing two
;	opens on it using different fabs and rabs.
;

	$DISCONNECT RAB=SHRRAB,-
		     ERR=REPORT_ERROR	; disconnect from file
	BSBW	ERR			; check for error
	$CLOSE	FAB=SHRFAB,-
		 ERR=REPORT_ERROR	; close the file
	BSBW	ERR			; check for error

;
;	ok, we are ready to start the multi-open tests
;

	TYPE	< MULTI-OPEN SHARING TEST >
	$OPEN	FAB=SHRFAB,-
		 ERR=REPORT_ERROR	; open the shared file
	BSBW	ERR			; check for error
	$CONNECT RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; connect to the file
	BSBW	ERR			; check for error
	$OPEN	FAB=SH2FAB,-
		 ERR=REPORT_ERROR	; open it again
	BSBW	ERR			; check for error
	$CONNECT RAB=SHRRAB,-
		  ERR=REPORT_ERROR	; connect to it again
	BSBW	ERR			; check for error

;
;	RAB 1 will now read the first record of the file, hopefully
;	causing an automatic lock to come up on it.  RAB 2 will try to
;	read it, expecting to get an error.
;

	MOVL	#1,RECBUF		; set key=rec 1
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; get record 1
	BSBW	ERR			; check for error
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; attempt to get rec 1
	BLBC	R0,OK20			; branch if rec not read
	TYPE	<*** MULTI-OPEN AUTO LOCK FAILURE ***>
					; rec should be locked
	BRB	OK21			; bypass auto lock test

OK20:

;
;	Now rab 1 will read record 2.  This should automatically unlock
;	record 1 and rab 2 should be able to read it.
;

	MOVL	#2,RECBUF		; set key=rec 2
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; get record 2
	BSBW	ERR			; check for error
	MOVL	#1,RECBUF		; set key=rec 1
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; rab 2 tries to read rec 1
	BLBS	R0,OK21			; branch if rec 2 read ok
	TYPE	<*** MULTI-OPEN AUTO UNLOCK FAILURE ***>
					; rec should be unlocked

OK21:

;
;	Continuing with the multi-open file sharing tests, we shall now
;	read record 3 (rab 1) with manual locking specified.  This should
;	unlock record 2 and lock record 3, as will be verified by read
;	attempts by rab 2.
;

	$RAB_STORE RAB=SHRRAB,ROP=ULK	; set manual lock bit
	MOVL	#3,RECBUF		; set key=rec 3
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; read record 3
	BSBW	ERR			; check for error
	MOVL	#2,RECBUF		; set key=rec 2
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; rab 2 read rec 2
	BLBS	R0,OK22			; branch if rec read ok
	TYPE	<*** MULTI-OPEN AUTO UNLOCK 2 FAILURE ***>
					; rec should be unlocked

OK22:	MOVL	#3,RECBUF		; set key=rec 3
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 3
	BLBC	R0,OK23			; branch if rec not read
	TYPE	<*** MULTI-OPEN MANUAL LOCK FAILURE ***>; rec should be locked

OK23:

;
;	Now we will read record 4 with manual locking.  This should not,
;	however, unlock the manually locked record 3.
;

	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; read record 4
	BSBW	ERR			; check for error
	MOVL	#3,RECBUF		; set key=rec 3
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; attempt to read rec 3
	BLBC	R0,OK24			; branch if rec not read
	TYPE	<*** MULTI-OPEN PREMATURE MANUAL UNLOCK ***>
					; rec should be locked

OK24:	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; read record 4
	BLBC	R0,OK25			; branch if rec not read
	TYPE	<*** MULTI-OPEN MANUAL LOCK 2 FAILURE ***>
					; rec should be locked

OK25:

;
;	The test program will not unlock record 3, but will maintain the
;	lock on record 4.
;

	MOVL	#3,RECBUF		; set key=rec 4
	$RAB_STORE RAB=SHRRAB,ROP=#0	; clear manual lock bit
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; read record 3 again
	BSBW	ERR			; check for error
	$RELEASE RAB=SHRRAB,-
		  ERR=REPORT_ERROR	; release record 3
	BSBW	ERR			; check for error
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; rab2 tries to read rec 3
	BLBS	R0,OK26			; branch if read ok
	TYPE	<*** MULTI-OPEN MANUAL UNLOCK FAILURE ***>
					; rec should be unlocked

OK26:

;
;	Finally, the test program will read record 5 without manual
;	locking.  This should put an auto lock on rec 5 and also
;	maintain the manual lock on record 4.
;

	MOVL	#5,RECBUF		; set key=rec 5
	$GET	RAB=SHRRAB,-
		 ERR=REPORT_ERROR	; read record 5
	BSBW	ERR			; check for error
	MOVL	#4,RECBUF		; set key=rec 4
	$GET	RAB=SH2RAB,-
		 ERR=REPORT_ERROR	; read rec 4
	BLBC	R0,OK27			; branch if rec not read
	TYPE	<*** MULTI-OPEN PREMATURE MANUAL UNLOCK 2 ***>
					; rec should be locked

OK27:

;
;	This completes the test section on multi-open file sharing.
;

	$EXIT_S				; end
	.END

