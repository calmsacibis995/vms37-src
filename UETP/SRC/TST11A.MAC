	.TITLE TST11A
	.IDENT /V03000/
	.PSECT TST11A
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; VERSION X01
;
; WRITTEN BY LOUIS REICH, JANUARY 1973
; MODIFIED BY TOM MILLER FOR RSX-11M, SEPTEMBER, 1974
;	7/15/75 TO CHANGE EXPECTED ERROR ON INVALID DPB SIZE
; MODIFIED BY LARRY JONES FOR VAX/VMS, APRIL, 1978
;+
;
; MODULE'TST11A' IS DESIGNED TO RUN COOPERATIVELY WITH
; MODULE 'TST11B' TO TEST THE FOLLOWING RSX-11M SYSTEM
; DIRECTIVES:
;	SUSPEND
;	RESUME
;
; IT IS IMPORTANT TO NOTE THAT 'TST11A' IS BUILT WITH A PRIORITY OF 50,
; WHILE 'TST11B' IS BUILT WITH PRIORITY 49.
;
;-
	.MCALL CALL,RQST$,SPND$S,DIR$,CLEF$S,WTSE$S,EXIT$S,RSUM$

;
; LOCAL DATA
;
	.NLIST	BEX
LEM1:	.ASCIZ /RESUME ERROR%N RESUME REACTIVATED A NONSUSPENDED TASK/
LEM2:	.ASCIZ /SUSPEND ERROR%N SUSPENDED TASK RESUMED PRIOR TO RESUME/
	.LIST	BEX
	.EVEN
	.PAGE
;
;THE NEXT PSECT CONTAINS ONLY DPB'S
;
	.PSECT	$DPB$$
RQDPB:	RQST$	TST11B
RSDPB:	RSUM$	TST11B
	.PAGE
	.PSECT	TST11A
;+
;
; THE FIRST STEP OF THE TEST OUTPUTS A START OF TEST MESSAGE AND 
; REQUESTS 'TST11B' WITH A LOWER PRIORITY THAN ITSELF.
;
;-
	$$TEST 11,A		;START TEST
	CALL	.STST		;OUTPUT START 0F TEST MESSAGE
	CLEF$S	#51.,.RJCT	;INITIALLY CLEAR EF51
	MOV    #RQDPB,R0	;GET ADDR OF REQUEST DPB
	DIR$	R0,.RJCT	;INVOKE REQUEST FOR 'TST11B'
;+
;
; THE NEXT STEP SUSPENDS 'TST11A' ALLOWING 'TST11B'
; WHICH HAS A LOWER PRIORITY TO BEGIN EXECUTION
;
;-
	$$STEP
;*****
	JMP	STP3		; PRIORITY IS NOT EFFECTIVE IN VMS
;*****
	CLEF$S	#50.,.RJCT	;CLEAR EF50
	SPND$S	.RJCT		;SUSPEND 'TST11A'
	MOV	#IS.SET,R1	;EXPECTED RETURN CODE TO R1
;	CALL	.STAT		;CHECK THE RETURN CODE
	.PAGE
;+
;
; EXECUTION OF 'TST11A' SHOULD HAVE BEEN RESUMED BY A 'RESUME'
; DIRECTIVE ISSUED BY 'TST11B' WHICH ALSO SETS EVENT FLAG 50
; PRIOR TO THE RESUME. THE NEXT STEP CHECKS THE POLARITY OF
; EF50 TO INSURE THAT THE INITIAL SUSPEND DID HALT 'TST11A'
; ALLOWING 'TST11B' TO EXECUTE. IF THE SUSPEND DID NOT WORK,
; THEN EF50 WILL BE CLEAR.  IN THIS CASE
; A FATAL ERROR MESSAGE WILL BE OUTPUT TO THE CONSOLE AND THE
; TEST WILL BE TERMINATED.
;
;-
	$$STEP
	CLEF$S	#50.,.RJCT	;USE CLEAR FLAG TO READ EF50
	CMP	$DSW,#IS.SET	;WAS IT SET?
	BNE	FATAL		;EXIT WITH MESSAGE IF IT WAS NOT
;+
;
; THE NEXT STEPS WILL ISSUE INVALID SUSPENDS AND CHECK THE RETURNED
; ERROR CODES. FIRST INVALID DPB SIZE SPECIFICATION.
;
;-
	$$STEP
	MOV	(PC)+,-(SP)	;PUT BAD DPB ON STACK
	.BYTE	45.,0
	DIR$			;INVOKE SUSPEND
	MOV	#IE.SDP,R1	;MOVE EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK ERROR CODE
	MOV	(PC)+,-(SP)	;PUT BAD DPB ON STACK
	.BYTE	45.,2		;
	DIR$			;INVOKE SUSPEND
	MOV	#IE.SDP,R1	
	CALL	.FAIL		;CHECK ERROR CODE
;+
;
; NOW 'TST11A' WILL BE PUT INTO A WAIT STATE DURING WHICH 'TST11B'
; TESTS THE ERROR CONDITIONS OF THE RESUME DIRECTIVE.
;
;-
	$$STEP

	CLEF$S	#51.,.RJCT	;CLEAR EF51
	CMP	$DSW,#IS.SET	;WAS THE FLAG SET?
	BEQ	10$		;IF EQ YES, ASSUME ERROR DETECTED AND
				;   AVOID INDEFINATE WAIT
	WTSE$S	#51.,.RJCT	;WAIT FOR EF51 TO BE SET
10$:				;REFERENCE LABEL
	.PAGE
;+
;
; 'TST11B' HAS TRIED TO ISSUE A RESUME FOR 'TST11A' WITHOUT
; SETTING EF51. IT THEN SETS EF51  AND EXITS. THIS STEP TESTS THAT
; EF51 WAS SET BEFORE 'TST11A' COULD CONTINUE. IF IT WAS NOT SET
; THEN AN ERROR MESSAGE IS GENERATED AND OUTPUT TO THE CONSOLE.
;
;-
	$$STEP
	CLEF$S	#50.,.RJCT	;USE CLEAR FLAG TO READ EF50
	CMP	$DSW,#IS.SET	;WAS IT SET?
	BEQ	20$		;IF IT WAS, THEN CONTINUE
	CALL	.IDOUT		;GET STEP ID
	MOV	#LEM1,R1	;GET MESSAGE FORMAT ADDRESS
	CALL	.PRTMG		;OUTPUT MESSAGE
	BR	EXT		;EXIT
20$:				;REFERENCE LABEL
;+
;
; THIS STEP TESTS AN ERROR CONDITION OF THE RESUME DIRECTIVE.  'TST11B'
; HAS EXITTED AND IS THEREFORE INACTIVE, BUT IT IS STILL INSTALLED.
; IF WE ISSUE A RESUME FOR 'TST11B' THE RETURN CODE SHOULD TELL US THAT
; 'TST11B' IS INACTIVE.
;
;-
	$$STEP
;*****
	JMP	EXT		;NO SUCH THING AS INSTALLED IN VMS
;*****
	DIR$	#RSDPB		;RESUME TST11B
	MOV	#IE.ACT,R1	;EXPECTED ERROR CODE TO R1
	CALL	.FAIL		;CHECK FOR VALID ERROR CODE
	BR	EXT		;EXIT
;+
;
; THE NEXT STEP OUTPUTS A FATAL ERROR MESSAGE IF THE INITIAL SUSPEND
; FAILS. THIS STEP ALSO EXITS FROM THE TEST.
;
;-
FATAL:	CALL	.IDOUT		;GET STEP ID
	MOV	#LEM2,R1	;GET ADDRESS OF MESSAGE FORMAT
	CALL	.PRTMG		;OUTPUT MESSAGE
EXT:	CALL	.ETST		;OUTPUT END OF TEST MESSAGE
	EXIT$S	.RJCT		;EXIT FROM TEST
	.END	STP0
