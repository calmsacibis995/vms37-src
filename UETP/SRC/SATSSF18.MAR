	.TITLE	SATSSF18 - SATS SYSTEM SERVICE TESTS  (FAILING S.C.)
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SATS SYSTEM SERVICE TESTS
;
; ABSTRACT:	The SATSSF18 module tests the execution of the following
; VMS system services, invoked in such a way as to expect failing
; status codes:
;		$CREPRC
;		$SETPRV
;		$UNWIND
;		
;
; ENVIRONMENT:	User mode image; needs CMKRNL privilege,
;		dynamically acquires other privileges, as needed.
;
; AUTHOR: Larry D. Jones,		CREATION DATE: NOVEMBER, 1979
;
; MODIFIED BY:
;
;	V03-002	LDJ0002		Larry D. Jones,		07-Aug-1981
;		Modified for addition of disable WS adjust status flag.
;
;	V03-001	LDJ0001		Larry D. Jones,		17-Sep-1980
;		Modified to conform to new build command procedures.
;**
;--
.PAGE
.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
	$CHFDEF				; condition handler frame offsets
	$JPIDEF				; GETJPI definitions
	$PQLDEF				; process quota list definitions
	$PRVDEF				; privilege definitions
	$UETPDEF			; UETP message definitions
	$SFDEF				; stack frame offset definitions
	$SHR_MESSAGES UETP,116,<<TEXT,INFO>> ; UETP$_TEXT definition
	$SSDEF				; SS definitions
	$STSDEF				; STS definitions
;
; Equated symbols
;
WARNING		= 0			; warning severity value for msgs
SUCCESS		= 1			; success     "      "    "   "
ERROR		= 2			; error       "      "    "   "
INFO		= 3			; information "      "    "   "
SEVERE		= 4			; fatal       "      "    "   "
PRVHND_SXV40	= 1			; page 0 address for SETEXV

.PAGE
	.SBTTL	OWN STORAGE
	.PSECT	RODATA,RD,NOWRT,NOEXE,LONG
;
TEST_MOD_NAME:
	.ASCIC	/SATSSF18/		; needed for SATSMS message
TEST_MOD_NAME_D:
	.ASCID	/SATSSF18/		; module name
TEST_MOD_BEGIN:
	.ASCIC	/begin/
TEST_MOD_SUCC:
	.ASCIC	/successful/
TEST_MOD_FAIL:
	.ASCIC	/failed/
CREPRC:
	.ASCIC	/CREPRC/
SETPRV:
	.ASCIC	/SETPRV/
UNWIND:
	.ASCIC	/UNWIND/
INADR:
	.LONG	NOACCESS,NOACCESS	; page address of noaccess psect
PROT:
	.LONG	PRT$C_NA		; protection code for no access psect
PRVHND_SXV41:				; read only access location
CS1:
	.ASCID	\Test !AC service name !AC step !UL failed.\
CS2:
	.ASCID	\Expected !AS = !XL received !AS = !XL\
CS3:
	.ASCID	\Expected !AS!UB = !XL received !AS!UB = !XL\
EXP:
	.ASCID	\status\
NAME_CRE0:				; 0 length string
	.ASCID	\\
NAME_CRE16:				; 16 length string
	.ASCID	\ABCDEFGHIJKLMNOP\
QUOTA_ILLEGAL:				; illegal quota list
	.BYTE	-1
QUOTA_LIST:
	.BYTE	PQL$_ASTLM		; minimum quota list
	.LONG	2
	.BYTE	PQL$_BIOLM
	.LONG	2
	.BYTE	PQL$_BYTLM
	.LONG	1024
	.BYTE	PQL$_CPULM
	.LONG	0
	.BYTE	PQL$_DIOLM
	.LONG	2
	.BYTE	PQL$_FILLM
	.LONG	2
	.BYTE	PQL$_PGFLQUOTA
	.LONG	256
	.BYTE	PQL$_PRCLM
	.LONG	0
	.BYTE	PQL$_TQELM
	.LONG	0
	.BYTE	PQL$_WSDEFAULT
	.LONG	100
	.BYTE	PQL$_WSQUOTA
	.LONG	100
	.BYTE	PQL$_LISTEND
STSFLG_ILLEGAL:
	.LONG	^X200			; illegal STS flag bit
STSFLG1:
	.LONG	4			; inhibit process swapping
NAME_CREPRC:
	.ASCID	/F17_PROC/		; legal process name
GET_LIST:
	.WORD	4			; JPI list to get current privs
	.WORD	JPI$_CURPRIV
	.LONG	PRIVS
	.LONG	0
	.LONG	0
.PAGE
;
	.SBTTL	R/W PSECT
	.PSECT	RWDATA,RD,WRT,NOEXE,LONG
;
TPID:
	.LONG	0			; PID for this process
CURRENT_TC:
	.LONG	0			; ptr to current test case
	.ALIGN LONG
REG_SAVE_AREA:
	.BLKL	15			; register save area
MOD_MSG_CODE:
	.LONG	UETP$_SATSMS		; test module message code for putmsg
TMN_ADDR:
	.ADDRESS TEST_MOD_NAME
TMD_ADDR:
	.ADDRESS TEST_MOD_BEGIN
PRVPRT:
	.BYTE	0			; protection return byte for SETPRT
PRIVMASK:
	.QUAD	0			; priv. mask
CHM_CONT:
	.LONG	0			; change mode continue address
RETADR:
	.BLKL	2			; returned address's from SETPRT
CRE:
	$CREPRC	0,0,0			; CREPRC parameter list
SET:
	$SETPRV	0,0,0			; SETPRV parameter list
UNW:
	$UNWIND	0,0			; UNWIND parameter list
REG:
	.ASCID	\register R\
REGNUM:
	.LONG	0			; register number
MSGL:
	.LONG	80			; buffer desc.
	.ADDRESS BUF
BUF:
	.BLKB	80
MESSAGEL:
	.LONG	0			; message desc.
	.ADDRESS	BUF
SERV_NAME:
	.LONG	0			; service name pointer
PRIVS:
	.QUAD	0			; privilege storage location
DEPTH:
	.LONG	0			; depth storage location for UNWIND
WORK:
	.LONG	0			; scratch storage location for UNWIND
	.PAGE
	.PSECT	SATS_ACCVIO_1,RD,WRT,NOEXE,PAGE
EMPTY:		.BLKB	512	; reserve a page of space
;
; + 
; ******************************************************************
; *                                                                *
; * 	THE ORDER OF STATEMENTS IN THIS PSECT IS CRITICAL.         *
; *	DO NOT RE-ARRANGE THE VARIABLES. CONSULT SATS              *
; *	FUNCTIONAL SPECIFICATION FOR A DESCRIPTION OF THE USE      *
; *	OF THE EMPTY PSECT (AND ITS COMPANION PSECT, NOACCESS).    *
; *                                                                *
; ******************************************************************
; -
;
PRVHND_SXV42	= . - 1		; prvhnd arg for SETEXV (last byte in the page)
		. = . - 13	; allow room for string descriptor
; type AAAAA_SSSX5 go here:
		.LONG	6	; string length (will cross psect boundary)
		.ADDRESS .+4	; string address
; type AAAAA_SSSX3 go here:
		.BLKB	1	; low-order byte of string length
; type AAAAA_SSSX2 go here:
		.BLKL	1	; string length
;
;
;
;
	.PSECT	SATS_ACCVIO_2,RD,WRT,NOEXE,PAGE
NOACCESS:	.BLKB	512	; reserve a page of space
		. = . - 512	; return loc ctr to beginning of psect
		.ADDRESS EMPTY	; address of accessible string
		.ADDRESS EMPTY/^X100 ; address of accessible string
;+
; *** NOTE -- DO NOT CHANGE LOCATION OR SEQUENCE OF ABOVE STATEMENTS!
; ***         THIS PSECT (NOACCESS) MUST APPEAR IN MEMORY IMMEDIATELY
; ***         FOLLOWING THE EMPTY PSECT. PSECT NAMES AND OPTIONS WILL BE 
; ***         CHOSEN TO FORCE THE DESIRED PSECT ORDERING.
;-
;
;
;
;
.PAGE
	.PSECT	SATSSF18,RD,WRT,EXE,LONG
	.SBTTL	SATSSF18
;++
; FUNCTIONAL DESCRIPTION:
;
;	After performing some initial housekeeping, such as
; printing the module begin message and acquiring needed privileges,
; the system services are tested in each of their failure conditions.
; Detected failures are identified and  an error message is printed
; on the terminal.  Upon completion of the test a success or fail
; message is printed on the terminal.
;
; CALLING SEQUENCE:
;
;	$ RUN SATSSF18  ...  (DCL COMMAND)
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	Messages to SYS$OUTPUT are the only output from SATSSF18.
;	They are of the form:
;
;		%UETP-S-SATSMS, TEST MODULE SATSSF18 BEGUN ... (BEGIN MSG)
;		%UETP-S-SATSMS, TEST MODULE SATSSF18 SUCCESSFUL ... (END MSG)
;		%UETP-E-SATSMS, TEST MODULE SATSSF18 FAILED ... (END MSG)
;		%UETP-I-TEXT, ... (VARIABLE INFORMATION ABOUT A TEST MODULE FAILURE)
;
; COMPLETION CODES:
;
;	The SATSSF18 routine terminates with a $EXIT to the
;	operating system with a status code defined by UETP$_SATSMS.
;
; SIDE EFFECTS:
;
;	none
;
;--



	TEST_START SATSSF18		; let the test begin
	$SETPRT_S INADR=W^INADR, RETADR=W^RETADR, -
		  PROT=W^PROT, PRVPRT=W^PRVPRT ; set noaccess psect
					   ; ... for no user access

	.SBTTL CREPRC TESTS
;+
;
; $CREPRC tests
;
; test unaccessable PIDADR = page 0 access
;
;-
	MOVAL	W^CREPRC,W^SERV_NAME		; set service name
	$CREPRC_S PIDADR = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PIDADR = read-only psect
;
;-
	NEXT_TEST
	$CREPRC_S PIDADR = W^PRVHND_SXV41	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PIDADR = noaccess protect
;
;-
	NEXT_TEST
	$CREPRC_S PIDADR = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable IMAGE = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S IMAGE = W^PRVHND_SXV40	; try page 0 access
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable IMAGE = noaccess protection
;
;-
	NEXT_TEST
	$CREPRC_S IMAGE = W^PRVHND_SXV42	; try noaccess prot
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable INPUT = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S INPUT = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable INPUT = noaccess protect
;
;-
	NEXT_TEST
	$CREPRC_S INPUT = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO
;+
;
; test unaccessable OUTPUT = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S OUTPUT = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable OUTPUT = noaccess protect
;
;-
	NEXT_TEST
	$CREPRC_S OUTPUT = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable ERROR = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S ERROR = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable ERROR = noaccess protect
;
;-
	NEXT_TEST
	$CREPRC_S ERROR = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRVADR = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S PRVADR = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRVADR = noaccess protect
;
;-
	NEXT_TEST
	$CREPRC_S PRVADR = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable QUOTA = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S QUOTA = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable QUOTA = noaccess protect
;
;-
	NEXT_TEST
	MOVB	#PQL$_ASTLM,W^PRVHND_SXV42	; set an initial quota in the first byte
	$CREPRC_S QUOTA = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRCNAM = page 0 access
;
;-
	NEXT_TEST
	$CREPRC_S PRCNAM = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRCNAM = noaccess protect
;
;-
	NEXT_TEST
	$CREPRC_S PRCNAM = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test PRCNAM = 16 length string
;
;-
	NEXT_TEST
	$CREPRC_S PRCNAM = W^NAME_CRE16		; try it
	FAIL_CHECK SS$_IVLOGNAM			; check failure
;+
;
; test SS$_IVQUOTAL
;
;-
	NEXT_TEST
	$CREPRC_S QUOTA = W^QUOTA_ILLEGAL	; try it
	FAIL_CHECK SS$_IVQUOTAL			; check failure
;+
;
; test SS$_IVSTSFLG
;
;-
	NEXT_TEST
	$CREPRC_S STSFLG = W^STSFLG_ILLEGAL	; try it
	FAIL_CHECK SS$_IVSTSFLG			; check failure
;+
;
; test SS$_NOPRIV
;
;-
	NEXT_TEST
	$CREPRC_S STSFLG = W^STSFLG1		; try it
	FAIL_CHECK SS$_NOPRIV			; check failure
;+
;
; test SS$_DUPLNAM
;
;-
	NEXT_TEST
	$CREPRC_S PRCNAM = W^NAME_CREPRC,-
		  QUOTA  = W^QUOTA_LIST		; make a legal process
	$CREPRC_S PRCNAM = W^NAME_CREPRC	; try an illegal one
	FAIL_CHECK SS$_DUPLNAM			; check failure
	$DELPRC_S PRCNAM = W^NAME_CREPRC	; clean up the mess
.PAGE
	.SBTTL SETPRV TESTS
;+
;
;	$SETPRV tests
;
; test unaccessable PRVADR = page 0 access
;
;-
	NEXT_TEST
	MOVAL	W^SETPRV,W^SERV_NAME		; set service name
	$SETPRV_S PRVADR = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRVADR = noaccess protect
;
;-
	NEXT_TEST
	$SETPRV_S PRVADR = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check the failure
;+
;
; test unaccessable PRVPRV = page 0 access
;
;-
	NEXT_TEST
	$SETPRV_S PRVPRV = W^PRVHND_SXV40	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRVPRV = read-only psect
;
;-
	NEXT_TEST
	$SETPRV_S PRVPRV = W^PRVHND_SXV41	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
;+
;
; test unaccessable PRVPRV = noaccess protect
;
;-
	NEXT_TEST
	$SETPRV_S PRVPRV = W^PRVHND_SXV42	; try it
	FAIL_CHECK SS$_ACCVIO			; check failure
.PAGE
.SBTTL UNWIND TESTS
;+
;
; $UNWIND tests
;
; test SS$_NOSIGNAL
;
;-
	NEXT_TEST
	MOVAL	W^UNWIND,W^SERV_NAME		; set service name
	MOVL	#1,W^DEPTH			; set the depth
	$UNWIND_S DEPADR = W^DEPTH		; try it
	FAIL_CHECK SS$_NOSIGNAL			; check failure
;+
;
; test SS$_INSFRAME
;
;-
	NEXT_TEST
	INCL	W^DEPTH				; set the unwind depth
	MOVL	SP,W^WORK			; remember the stack pointer
	CALLS	#0,B^10$			; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)			; set the handler address
	CLRL	SF$L_SAVE_FP(SP)		; put a stop in the stack unwind chain
	CHMU	#0				; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	B^CHF$L_SIGARGLST(AP),R2	; get signal array address
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$UNWIND_S DEPADR = W^DEPTH,NEWPC = B^30$ ; do it
	CLRL	@SF$L_SAVE_FP(FP)		; disable the handler for error msg
	MOVL	W^WORK,SP			; reset the stack pointer
	MOVL	SP,FP				; reset the FP
	FAIL_CHECK SS$_INSFRAME			; check failure
30$:
;+
;
; test SS$_UNWINDING
;
;-
	NEXT_TEST
	DECL	W^DEPTH				; set to a legal depth
	CALLS	#0,B^10$			; put a call frame on the stack
10$:
	.WORD	0
	MOVAL	B^20$,(FP)			; set the handler address
	CHMU	#0				; cause an exception
20$:
	.WORD	^M<R2>
	MOVL	CHF$L_SIGARGLST(AP),R2		; get the signal array address
	PUSHL	#0				; push a dummy parameter
	CALLS	#1,W^REG_SAVE			; save a reg snapshot
	$UNWIND_S DEPADR = W^DEPTH,NEWPC = B^30$ ; do it
	CMPL	#SS$_UNWIND,B^CHF$L_SIG_NAME(R2) ; are we unwinding?
	BEQL	15$				; br if yes
	CLRL	@SF$L_SAVE_FP(FP)		; disable the handler
	FAIL_CHECK SS$_NORMAL			; check failure
	MOVAL	B^20$,@SF$L_SAVE_FP(FP)		; enable the handler
	BRB	17$				; continue in common
15$:
	CLRL	@SF$L_SAVE_FP(FP)		; disable the handler
	FAIL_CHECK SS$_UNWINDING		; check failure
	MOVAL	B^20$,@SF$L_SAVE_FP(FP)		; enable the handler
17$:
	RET					; giver heck
30$:
;+
;
; Testing SS$_ACCVIO will not be done because of the hostile results
; that can occur from intentionally corrupting the STACK.
;
;-
	TEST_END				; thats all folks
.PAGE
.SBTTL REG_SAVE
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to save R2-R11 in the register save location.
;
; CALLING SEQUENCE:
;	PUSHL	#0		; save a dummy parameter
;	CALLS	#1,W^REG_SAVE	; save R2-R11
;
; INPUT PARAMETERS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
;--

REG_SAVE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; save the registers in the program
	RET
	.SBTTL	REG_CHECK
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to test R0 & R2-R11 for proper content after a service
;	execution. A snapshot is taken by the REG_SAVE routine at the
;	beginning of each step and this routine is executed after the
;	services have been executed.
;
; CALLING SEQUENCE:
;	PUSHL	#SS$_XXXXXX	; push expected R0 contents
;	CALLS	#1,W^REG_CHECK	; execute this routine
;
; INPUT PARAMETERS:
;	expected R0 contents on the stack
;
; OUTPUT PARAMETERS:
;	possible error messages printed using $PUTMSG
;
;--

REG_CHECK:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CMPL	4(AP),R0			; is this the right fail code?
	BEQL	10$				; br if yes
	PUSHL	R0				; push received data
	PUSHL	4(AP)				; push expected data
	PUSHAL	W^EXP				; push the string variable
	CALLS	#3,W^PRINT_FAIL			; print the error message
10$:
	CMPC3	#4*10,^X14(FP),W^REG_SAVE_AREA	; check all but R0
	BEQL	20$				; br if O.K.
	SUBL3	#REG_SAVE_AREA,R3,R6		; calculate the register number
	DIVL2	#4,R6
	ADDB3	#^X2,R6,W^REGNUM		; put it in the string
	BICL2	#3,R1				; backup to register boundry
	BICL2	#3,R3
	PUSHL	W^REGNUM			; push register number
	PUSHL	(R1)				; push received data
	PUSHL	(R3)				; push expected data
	PUSHAL	W^REG				; set string pntr param.
	CALLS	#4,W^PRINT_FAIL			; print the error message
20$:
	RET
	.SBTTL	PRINT_FAIL
;++
; FUNCTIONAL DESCRIPTION:
;	Subroutine to report failures using $PUTMSG
;
; CALLING SEQUENCE:
; Mode  #1	PUSHL EXPECTED	Mode    #2	PUSHL REG_NUMBER
;		PUSHL RECEIVED			PUSHL EXPECTED
;		PUSHAL STRING_VAR		PUSHL RECEIVED
;		CALLS #3,W^PRINT_FAIL		PUSHAL STRING_VAR
;						CALLS #4,W^PRINT_FAIL
;
; INPUT PARAMETERS:
;	listed above
;
; OUTPUT PARAMETERS:
;	an error message is printed using $PUTMSG
;
;--

PRINT_FAIL:
	.WORD	^M<R2,R3,R4,R5>
	$FAO_S	W^CS1,W^MESSAGEL,W^MSGL,#TEST_MOD_NAME,W^SERV_NAME,W^CURRENT_TC
	PUTMSG	<#UETP$_TEXT,#1,#MESSAGEL>	; print the message
	CMPB	(AP),#4				; is this a register message?
	BEQL	10$				; br if yes
	$FAO_S	W^CS2,W^MESSAGEL,W^MSGL,4(AP),8(AP),4(AP),12(AP)
	BRB	20$				; goto output message
10$:
	$FAO_S	W^CS3,W^MESSAGEL,W^MSGL,4(AP),16(AP),8(AP),4(AP),16(AP),12(AP)
20$:
	PUTMSG	<#UETP$_TEXT,#1,#MESSAGEL>	; print the message
	MOVAL	W^TEST_MOD_FAIL,W^TMD_ADDR	; set failure message address
	INSV	#ERROR,#0,#3,W^MOD_MSG_CODE	; set severity code
	RET
.PAGE
	.SBTTL	MOD_MSG_PRINT
MOD_MSG_PRINT:
;
;  *****************************************************************
;  *                                                               *
;  *  PRINTS THE TEST MODULE BEGUN/SUCCESSFUL/FAILED MESSAGES      *
;  *	   (USING THE PUTMSG MACRO).                               *
;  *                                                               *
;  *****************************************************************
;
	PUTMSG	<W^MOD_MSG_CODE,#2,W^TMN_ADDR,W^TMD_ADDR> ; PRINT MSG
	RSB				; ... AND RETURN TO CALLER
;
	.SBTTL	CHMRTN
CHMRTN:
; ******************************************************************
; *								   *
; *	CHANGE MODE ROUTINE. THIS ROUTINE GETS CONTROL WHENEVER    *
; *	A CMKRNL, CMEXEC, OR CMSUP SYSTEM SERVICE IS ISSUED	   *
; *	BY THE MODE MACRO ('TO' OPTION).  IT MERELY DOES 	   *
; *	A JUMP INDIRECT ON A FIELD SET UP BY MODE. IT HAS 	   *
; *	THE EFFECT OF RETURNING TO THE END OF THE MODE		   *
; *	MACRO EXPANSION.					   *
; *								   *
; ******************************************************************
;
	.WORD	0			; ENTRY MASK
	JMP	@CHM_CONT		; RETURN TO MODE MACRO IN NEW MODE
;
; *	RET INSTR WILL BE ISSUED IN EXPANSION OF 'MODE FROM, ....' MACRO
;
	.END	SATSSF18
