	.NLIST

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; this macro is being included at the beginning of all rms test programs
; since it is a private macro and not in any system libraries
;

	.MACRO	$BEGIN MODNAM,IDNUM,PSNAME,TITL,PSATR=NOWRT
	.TITLE	MODNAM TITL		;
	.IDENT	'V03-000'
	.MACRO	$DPSECT
	.PSECT	PSNAME,GBL,PSATR
	.ENDM
	$DPSECT
	$$.PSECT_EP=0
	$$RMSTEST=30			; get test point increment, user mode priv, rmsbug,

;
; and optional debug code
;

	$$RMS_UMODE=4
	$$RMS_TBUGCHK=8
	$$RMS_PBUGCHK=16
	.DSABL	DBG
	.ENDM	$BEGIN

;
;  the $begin macro defines the following switches for rms assembly
;	(bits in $$rmstest):
;
;	bit 0			include tstpt global symbols
;	bit 1			include tstpt counter increment
;	bit 2	($$rms_umode)	assemble code for user mode
;	bit 3	($$rms_tbugchk)	include optional debugging code
;	bit 4	($$rms_pbugchk)	include "semi-permanent" debugging code
;
;

	.LIST
	$BEGIN	RMSTEST2,004,__RMSTEST,<BLOCK I/O TEST PROGRAM>,<GBL,LONG>

;

	.ENABL	DBG

;
;  this program provides several tests of the block i/o facility
;  including mixed block and record operations
;
;  currently tests sequential file org only.
;
;

	$RMSDEF
	.NLIST	MEB

;
;  macros:
;

	.MACRO	BUFF NAM,SIZE
NAM'BUF::
	.BLKB	SIZE
	NAM'BSZ==SIZE
	.ENDM	BUFF

;
;
;

	.MACRO	TYPE STRING, ?L
	STORE	<STRING>
	BLBC	VERBOSITY,L
	MOVL	#$$.TMPX,CMDORAB+RAB$L_RBF
	MOVW	#$$.TMPX1,CMDORAB+RAB$W_RSZ
	$PUT	RAB=CMDORAB,ERR=REPORT_ERROR
	BSBW	ERR
L:
	.ENDM	TYPE

;

	.MACRO	STORE STRING,PRE
	.SAVE
	.PSECT	__$RMSNAM
	$$.TMPX=.
	PRE				; store any carriage control info
	.ASCII	%STRING%
	$$.TMPX1=.-$$.TMPX
	.RESTORE
	.ENDM	STORE

;


	.MACRO	BEGIN TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,BEG_DESCR+4	; addr
	MOVL	#$$.TMPX1,BEG_DESCR	; len
	BSBW	BEGPUT
	.ENDM	BEGIN
	.MACRO	FINISH TSTNAM
	STORE	<TSTNAM>
	MOVL	#$$.TMPX,FIN_DESCR+4	; addr
	MOVL	#$$.TMPX1,FIN_DESCR	; len
	BSBW	FINPUT
	.ENDM	FINISH
	.MACRO	FIELD FLDNAM
	STORE	<FLDNAM>
	MOVL	#$$.TMPX,FLD_DESCR+4	; addr
	MOVL	#$$.TMPX1,FLD_DESCR	; len
	BSBW	FLDPUT
	.ENDM	FIELD
	.MACRO	MBPT,?L
	BLBC	VERBOSITY,L
	BPT
L:
	.ENDM	MBPT

;



;

	.PSECT	__RMSTEST,GBL,LONG
T2START::
	.ALIGN	LONG
T2FAB::	$FAB	FAC=<BIO,PUT>,FNM=<TST$DISK:T2FILE.DAT;1>,org=seq,rfm=fix,-
	RAT=BLK,MRS=128,NAM=NAMBLK,FOP=<SUP>,ALQ=10,DEQ=10
T2RAB::	$RAB	FAB=T2FAB,UBF=CPYBUF,USZ=CPYBSZ,RBF=CPYBUF,MBC=4,MBF=2,-
	RSZ=512,ROP=<WBH>
RFASAV:	.BLKW	4

;
;

TST$BLOCKIO::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	BEGIN	<BLOCK I/O TESTS>
	$CREATE	FAB=T2FAB,ERR=REPORT_ERROR
	BSBW	ERR
	MOVAL	T2RAB,R11
	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	CLRL	R8			; vbn count
	CLRL	R7

;
;  fill block buffer
;

FILBUF:	MOVAB	@RAB$L_RBF(R11),R3	; get buff addr
10$:	INCL	R7			; next rec
	MOVC5	#0,(SP),R7,#128,(R3)	; build rec
	BITL	#3,R7			; 4th rec
	BNEQ	10$			; branch if not
	$WRITE	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	INCL	R8			; bump vbn
	CMPL	R8,RAB$W_RFA(R11)	; match?
	BEQL	RFAOK
	FIELD	<RFA>
	MBPT
RFAOK:
	CMPL	R8,#63			; end?
	BLEQU	FILBUF			; not yet

;

	$CLOSE	FAB=T2FAB,ERR=REPORT_ERROR
	BSBW	ERR
	CLRW	RAB$W_ISI(R11)		; allow rab reuse
	TYPE	<FINISHED TEST 1 - BEGINNING TEST 2>
	BRB	TEST2

;



;
;  re-read file created in test 1 and try random and sequential gets & reads
;

TEST2:	BISL2	#FAB$M_NAM,T2FAB+FAB$L_FOP
	MOVB	#FAB$M_BRO!FAB$M_GET!FAB$M_PUT,T2FAB+FAB$B_FAC
	BICL	#FAB$M_CBT!FAB$M_CTG,FAB$L_FOP+T2FAB; for ctg/cbt test
	$OPEN	FAB=T2FAB,ERR=REPORT_ERROR
	BSBW	ERR
	BBC	#FAB$V_CTG,FAB$L_FOP+T2FAB,CTGOK
	FIELD	<CTG BIT SET, THEREFORE>
CTGOK:
	BBC	#FAB$V_CBT,FAB$L_FOP+T2FAB,BACK
	FIELD	<CBT BIT SET, THEREFORE>
BACK:

;
;	movw	#128,rab$w_rsz(r11)	;\needed?\
;

	MOVL	#RAB$M_RAH,RAB$L_ROP(R11)
	$CONNECT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR

;
;  try doing gets on all records sequentially
;

	CLRL	R7			; record count
GETREC:	$GET	R11
	BLBS	R0,10$
	CMPL	R0,#RMS$_EOF
	BEQL	T2EOF
	MOVL	R11,R10
	BSBW	REPORT_ERR
	BSBW	ERR
10$:	INCL	R7			; bump rec count
	CMPC5	#128,@RAB$L_RBF(R11),R7,#0,(SP); data ok?
	BEQL	RECOK
	FIELD	<RECORD CONTENTS>
RECOK:
	CMPW	RAB$W_RSZ(R11),#128
	BEQL	RSZOK
	FIELD	<RECORD SIZE>
	MBPT
RSZOK:
	BRB	GETREC

;

T2EOF:	CMPL	R7,#256
	BEQL	TEST2A
	MOVL	R11,R10
	BSBW	EOFPUT			; replaced type <bad eof>
	MBPT

;



;
;  now try sequential reads
;

TEST2A:
	TYPE	<FINISHED TEST 2 - BEGINNING TEST 2A>
	MOVL	#1,RAB$L_BKT(R11)
	CLRL	R8			; vbn
READVB:	$READ	R11
	BLBS	R0,10$
	CMPL	R0,#RMS$_EOF
	BEQL	T2AEOF
	BSBW	ERR
10$:	INCL	R8
	BSBW	CHKBLK			; verify contents
	CLRL	RAB$L_BKT(R11)		; get sequential operation
	BRB	READVB

;

T2AEOF:	CMPL	R8,#64
	BEQL	TEST2B
	MOVL	R11,R10
	BSBW	EOFPUT			; replaced type <bad eof>
	MBPT


;
;  now try mixed reads, writes, gets, and puts
;

TEST2B:
	TYPE	<FINISHED TEST 2A - BEGINNING TEST 2B>

;
;  multiple block test
;

	MOVW	#516,RAB$W_USZ(R11)
	MOVL	#9,RAB$L_BKT(R11)
	$READ	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVL	#9,R8
	BSBW	CHKBLK
	CLRL	RAB$L_BKT(R11)
	$READ	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVL	#11,R8
	BSBW	CHKBLK
	CMPL	CPYBUF+512,#^X2D2D2D2D
	BEQL	TEST2B2
	FIELD	<DATA>
	MBPT

;
;  test short block write and auto extend of file
;

TEST2B2:
	CLRL	CPYBUF
	MOVW	#4,RAB$W_RSZ(R11)
	MOVL	#80,RAB$L_BKT(R11)	; cause file extend
	$WRITE	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	CLRW	RAB$W_RSZ(R11)
	MOVW	#512,RAB$W_USZ(R11)
	$READ	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR

;
;SINCE BKT IS STILL 80, READ THAT BLK
;USED TO EXPECT EOF ERROR, NO LONGER
;

	CMPW	RAB$W_RSZ(R11),#4
	BEQL	RSZOK1
	FIELD	<RECORD SIZE>
	MBPT
RSZOK1:
	TSTL	CPYBUF			; test first four bytes of block
					; (since that's all we wrote
	BEQL	TEST2B3
	FIELD	<DATA>
	MBPT
TEST2B3:
	MOVB	#RAB$C_RFA,RAB$B_RAC(R11); get rfa access
	MOVL	#80,RAB$W_RFA(R11)	; give the rfa
	CLRW	RAB$W_RFA+4(R11)
	MOVL	#1,CPYBUF
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	CMPC5	#128,CPYBUF,#0,#0,(SP)
	BEQL	TEST2B4
	FIELD	<DATA>
	MBPT


;
;  check that  we can put to eof
;

TEST2B4:
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11); sequential mode
	MOVL	#4783,CPYBUF		; funny data
	$PUT	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVC3	#6,RAB$W_RFA(R11),RFASAV
	MOVL	#1,RAB$L_BKT(R11)	; read blk 1 in between
	$READ	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	MOVL	#1,R8
	BSBW	CHKBLK
	MOVB	#RAB$C_RFA,RAB$B_RAC(R11)
	MOVC3	#6,RFASAV,RAB$W_RFA(R11)
	$GET	RAB=R11,ERR=REPORT_ERROR
	BSBW	ERR
	CMPL	CPYBUF,#4783		; funny data back?
	BEQL	TESTEND
	FIELD	<DATA>
	MBPT

;

TESTEND:
	$CLOSE	FAB=T2FAB,ERR=REPORT_ERROR
	BSBW	ERR
	FINISH	<BLOCK I/O TESTS>
	CLRW	RAB$W_ISI(R11)		; make test restartable
	MOVL	#FAB$M_SUP,T2FAB+FAB$L_FOP
	MOVB	#FAB$M_PUT!FAB$M_BIO,T2FAB+FAB$B_FAC
	MOVL	#RAB$M_WBH,RAB$L_ROP(R11)
	MOVW	#512,RAB$W_RSZ(R11)
	CLRL	RAB$L_BKT(R11)
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)

;
; but first erase the file by namblk
;

	BISL2	#FAB$M_NAM,FAB$L_FOP+T2FAB
	CLRL	FAB$L_FNA+T2FAB
	CLRB	FAB$B_FNS+T2FAB
	$ERASE	FAB=T2FAB,ERR=REPORT_ERROR
	BSBW	ERR
	TYPE	<T2FILE.DAT HAS BEEN ERASED BY NAMBLK>
	BICL	#FAB$M_NAM,FAB$L_FOP+T2FAB; for re-entry
	RET


;
;  chkblk subroutine to verify we read the right block
;

CHKBLK:	CMPL	R8,RAB$W_RFA(R11)
	BEQL	CHKB1
	FIELD	<RFA>
	MBPT
CHKB1:	CMPW	RAB$W_RSZ(R11),RAB$W_USZ(R11)
	BEQL	CHKB2
	FIELD	<RSZ>
	MBPT
CHKB2:	ROTL	#2,R8,R6
	SUBL2	#3,R6			; get starting  rec #
	MOVAB	@RAB$L_RBF(R11),R1
RIGHT:	CMPC5	#128,(R1),R6,#0,(SP)	; right data?
	BEQL	AOK
	FIELD	<DATA>
	MBPT
AOK:	INCL	R6			; next record
	CMPZV	#0,#2,R6,#1		; done with block?
	BNEQ	RIGHT
	RSB

;

	.END
