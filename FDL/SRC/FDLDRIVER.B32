%TITLE	'FDL$PARSE'
%SBTTL	'FDL Parse Table Drivers'
MODULE	FDLDRIVER	( IDENT='V03-002'
			) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	RMS-32 FDL Utilities
!
! Abstract:
!
! Contents:
!		GET_LINE
!		UPCASE
!		SET_PRIMARY
!		SET_SECONDARY
!		START_STR
!		END_STR
!		SET_DATE_TIME
!		SET_COMMENT
!		SYNTAX_ERROR
!		ERROR_CHK
!		READ_ERROR
!		RMS_ERROR
!		RMS_OPEN_ERROR
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	January-1981
!
!
! Modified by:
!
!	V03-002	KBT0029		Keith Thompson		30-Mar-1982
!		Add upcase/lowercase processing and date/time routine
!
!	V03-001	KBT0019		Keith Thompson		22-Mar-1982
!		Fix error message processing
!
!****


PSECT
	OWN	= _FDL$OWN	(PIC),
	GLOBAL	= _FDL$GLOBAL	(PIC),
	PLIT	= _FDL$PLIT	(SHARE,PIC),
	CODE	= _FDL$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:STARLET';
REQUIRE	'SRC$:FDLUTIL';
REQUIRE	'SRC$:FDLPARDEF';

EXTERNAL ROUTINE
	LIB$GET_VM	: ADDRESSING_MODE( GENERAL ),
	STR$TRIM	: ADDRESSING_MODE( GENERAL ),
	SYS$BINTIM	: ADDRESSING_MODE( GENERAL );

DEFINE_ERROR_CODES;

FORWARD ROUTINE
	UPCASE			: NOVALUE,
	FDL$$SET_PRIMARY,
	FDL$$SET_SECONDARY,
	FDL$$START_STR,
	FDL$$END_STR,
	FDL$$SET_COMMENT,
	FDL$$SYNTAX_ERROR,
	FDL$$ERROR_CHK,
	READ_ERROR		: NOVALUE;

EXTERNAL

!	Parse control
!
	FDL$AB_LINE		: DESC_BLK,
	FDL$AB_UPCASED		: DESC_BLK,
	FDL$AB_CTRL		: BLOCK [ ,BYTE ],
	FDL$GL_PRIMARY,
	FDL$GL_PRINUM,
	FDL$AB_PRICTRL		: BLOCK [ ,BYTE ],
	FDL$GL_SECONDARY,
	FDL$GL_SECNUM,
	FDL$AB_SECCTRL		: BLOCK [ ,BYTE ],
	FDL$GL_QUALIFIER,
	FDL$GL_NUMBER,
	FDL$GL_NUMTYPE,
	FDL$GL_SWITCH,
	FDL$GL_PROTECTION,
	FDL$AL_DATE_TIME	: VECTOR [ ,LONG ],
	FDL$AB_STRING		: DESC_BLK,
	FDL$AB_COMMENT		: DESC_BLK,
	FDL$GL_LINECNT,

	FDL$AB_DESC_BUF		: VECTOR [ ,BYTE ],

	FDL$AB_FDL_RAB		: $RAB_DECL;

LITERAL
	SMALL_A		= 97,		! ASCII character "a"
	SMALL_Z		= 122,		! ASCII character "z"
	UPCASE_MASK	= 32,		! Mask to convert to upercase ASCII
	COMMENT_MARK	= 33,		! ASCII character "!"
	QUOTE_CHAR	= 39;		! ASCII character "'"

OWN
	STRING_DESC	: DESC_BLK;

%SBTTL	'GET_LINE'
GLOBAL ROUTINE	FDL$$GET_LINE =
!++
!
! Functional Description:
!
!	Reads from the input file untill it gets a non zero length
!	record. It then upcases it inits some values and returns
!
! Calling Sequence:
!
!	Called from the parse tables
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL	STATUS;

    STATUS = SS$_NORMAL;

    ! Get the new line from the FDL file
    ! If success and not blank then up-case the line
    ! while putting it in the upcase buffer pointed to by TPA$_STRINGPTR
    !
    WHILE ( STATUS = $GET ( RAB=FDL$AB_FDL_RAB,ERR=READ_ERROR ) )
    DO
	BEGIN

	FDL$GL_LINECNT = .FDL$GL_LINECNT + 1;

	! If this is not a blank line upcase and exit else ignore it 
	!
	IF .FDL$AB_FDL_RAB [ RAB$W_RSZ ] NEQ 0
	THEN
	    BEGIN
	    FDL$AB_LINE [ DSC$W_LENGTH ] = .FDL$AB_FDL_RAB [ RAB$W_RSZ ];

	    ! Up case the whole line and move it into the upcase buffer
	    !
	    UPCASE();

	    ! Point the tables to the upcased line
	    !
	    TPARSE_BLOCK [ TPA$L_STRINGCNT ] = .FDL$AB_UPCASED [ DSC$W_LENGTH ];
	    TPARSE_BLOCK [ TPA$L_STRINGPTR ] = .FDL$AB_UPCASED [ DSC$A_POINTER ];

	    ! Since there is a new secondary for each line clear some flags
	    !
	    FDL$GL_SECONDARY	= _CLEAR;
	    FDL$GL_SECNUM	= _CLEAR;
	    FDL$GL_NUMTYPE	= _CLEAR;
	    FDL$GL_SWITCH	= _CLEAR;
	    FDL$GL_PROTECTION	= _CLEAR;
	    FDL$AB_STRING [ DSC$W_LENGTH ] = 0;
	    FDL$AB_CTRL [ FDL$V_WARNING ] = _CLEAR;
	    FDL$AB_CTRL [ FDL$V_COMMENT ] = _CLEAR;
	    FDL$AB_CTRL [ FDL$V_LINECMT ] = _CLEAR;

	    EXITLOOP

	    END

	END;

    RETURN .STATUS

    END;

%SBTTL	'UPCASE'
ROUTINE	UPCASE : NOVALUE =
!++
!
! Functional Description:
!
!	Upcases the input line while moving it into the upcase buffer
!
! Calling Sequence:
!
!	UPCASE()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	FDL$AB_LINE	- Descriptor of the input line
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	FDL$AB_UPCASED	- Descriptor of the upcased input line
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	CHAR	: REF VECTOR [ ,BYTE ],
	UPCR	: REF VECTOR [ ,BYTE ];

    ! Point to the string of characters and the upcase buffer
    !
    CHAR = .FDL$AB_LINE [ DSC$A_POINTER ];
    UPCR = .FDL$AB_UPCASED [ DSC$A_POINTER ];

    ! Loop for all the characters in a line
    !
    INCR I FROM 0 TO ( .FDL$AB_LINE [ DSC$W_LENGTH ] - 1 ) BY 1
    DO

	! If the char. is a lower case letter upcase it
	! else just copy it over
	!
	IF ( .CHAR [ .I ] GEQU SMALL_A ) AND ( .CHAR [ .I ] LEQU SMALL_Z )
	THEN
	    UPCR [ .I ] = .CHAR [ .I ] AND ( NOT UPCASE_MASK )
	ELSE
	    UPCR [ .I ] = .CHAR [ .I ];

    ! Set the length of the upcased line
    !
    FDL$AB_UPCASED [ DSC$W_LENGTH ] = .FDL$AB_LINE [ DSC$W_LENGTH ];

    RETURN

    END;

%SBTTL	'SET_PRIMARY'
GLOBAL ROUTINE	FDL$$SET_PRIMARY =
!++
!
! Functional Description:
!
! Calling Sequence:
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    OWN
	NXTPRINUM;	! The next key or area primary number

    LOCAL
	PRIMASK;

    PRIMASK = .TPARSE_BLOCK [ TPA$L_PARAM ];

    ! If this is the first call then clear an go else check to make sure a
    ! secondary was processed.
    !
    IF .FDL$AB_CTRL [ FDL$V_INITIAL ]
    THEN
	FDL$AB_CTRL [ FDL$V_INITIAL ] = _CLEAR
    ELSE

	! If a secondary was processed the ok else null primary warning
	!
	IF .FDL$AB_CTRL [ FDL$V_SECONDARY ]
	THEN
	    FDL$AB_CTRL [ FDL$V_SECONDARY ] = _CLEAR
	ELSE
	    SIGNAL ( FDL$_NULLPRI );

    ! If this primary has been defied before check to see if it's a
    ! key or area primary
    !
    IF ( .PRIMASK AND .FDL$AB_PRICTRL ) NEQU 0
    THEN

	! Is it a key, area, analysis_of_key or analysis_of_area primary
	! check the order in case the last was the same
	!
	IF ( .PRIMASK AND ( FDL$M_KEY OR FDL$M_AREA OR FDL$M_ANALK OR
							FDL$M_ANALA ) ) NEQU 0
	THEN

	    ! Was the last primary a key primary
	    !
	    IF .FDL$GL_PRIMARY EQLU FDL$C_KEY
	    THEN

		! If so check to see if the number is correct
		!
		IF .FDL$GL_PRINUM EQLU .NXTPRINUM
		THEN
		    NXTPRINUM = .NXTPRINUM + 1
		ELSE
		    BEGIN
		    SIGNAL( FDL$_OUTORDER,1,.FDL$GL_LINECNT );
		    RETURN FDL$_SYNTAX
		    END

	    ! Was the last primary an area primary
	    !
	    ELSE IF .FDL$GL_PRIMARY EQLU FDL$C_AREA
	    THEN

		! If so check to see if the number is correct
		!
		IF .FDL$GL_PRINUM EQLU .NXTPRINUM
		THEN
		    NXTPRINUM = .NXTPRINUM + 1
		ELSE
		    BEGIN
		    SIGNAL( FDL$_OUTORDER,1,.FDL$GL_LINECNT );
		    RETURN FDL$_SYNTAX
		    END

	    ! Was the last primary an analysis_of_key primary
	    !
	    ELSE IF .FDL$GL_PRIMARY EQLU FDL$C_ANALK
	    THEN

		! If so check to see if the number is correct
		!
		IF .FDL$GL_PRINUM EQLU .NXTPRINUM
		THEN
		    NXTPRINUM = .NXTPRINUM + 1
		ELSE
		    BEGIN
		    SIGNAL( FDL$_OUTORDER,1,.FDL$GL_LINECNT );
		    RETURN FDL$_SYNTAX
		    END

	    ! Was the last primary an analysis_of_area primary
	    !
	    ELSE IF .FDL$GL_PRIMARY EQLU FDL$C_ANALA
	    THEN

		! If so check to see if the number is correct
		!
		IF .FDL$GL_PRINUM EQLU .NXTPRINUM
		THEN
		    NXTPRINUM = .NXTPRINUM + 1
		ELSE
		    BEGIN
		    SIGNAL( FDL$_OUTORDER,1,.FDL$GL_LINECNT );
		    RETURN FDL$_SYNTAX
		    END

	    ELSE
		NXTPRINUM = 0

	ELSE

	    ! Multiple primaries is only a warning
	    !
	    SIGNAL( FDL$_MULPRI,1,.FDL$GL_LINECNT )

    ELSE

	! Is it a first key or area or ect. primary check the number
	!
	IF ( .PRIMASK AND ( FDL$M_KEY OR FDL$M_AREA OR FDL$M_ANALK OR
							FDL$M_ANALA ) ) NEQU 0
	THEN

	    ! If so check to see if the number is correct
	    !
	    IF .FDL$GL_PRINUM EQLU 0
	    THEN
		NXTPRINUM = 1
	    ELSE
		BEGIN
		SIGNAL( FDL$_OUTORDER,1,.FDL$GL_LINECNT );
		RETURN FDL$_SYNTAX
		END;

    ! Flag it for latter
    !
    FDL$AB_PRICTRL = .FDL$AB_PRICTRL OR .PRIMASK;

    ! Clear FDL$PRIMARY so that tparse can set it on return
    !
    FDL$GL_PRIMARY = _CLEAR;

    ! Indicate that a new primary has been found
    !
    FDL$AB_CTRL [ FDL$V_NEWPRI ] = _SET;

    ! Get ready for a new set of secondaries
    !
    FDL$AB_SECCTRL = _CLEAR;

    RETURN SS$_NORMAL

    END;

%SBTTL	'SET_SECONDARY'
GLOBAL ROUTINE	FDL$$SET_SECONDARY =
!++
!
! Functional Description:
!
! Calling Sequence:
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL
	SECMASK;

    SECMASK = .TPARSE_BLOCK [ TPA$L_PARAM ];

    ! See if the secondary has been defined before
    !
    IF ( .SECMASK AND .FDL$AB_SECCTRL ) NEQU 0
    THEN

	! If it has then see if it was a key segment thing
	!
	IF ( .SECMASK AND ( FDL$M_SEGPOS OR FDL$M_SEGLEN OR FDL$M_SEGTYP ) )
									NEQU 0
	THEN
	    BEGIN

	    ! If it's out of bounds it's an error
	    !
	    IF .FDL$GL_SECNUM GTRU 7
	    THEN
		BEGIN
		SIGNAL( FDL$_UNSECKW,3,
			FDL$GL_LINECNT,
			.TPARSE_BLOCK [ TPA$L_TOKENCNT ],
			.TPARSE_BLOCK [ TPA$L_TOKENPTR ] );
		RETURN FDL$_SYNTAX
		END
	    END
	ELSE

	    ! If it has been defined before it's only a warning
	    !
	    SIGNAL( FDL$_MULSEC,1,.FDL$GL_LINECNT )
    ELSE

	! Flag it for next time
	!
	FDL$AB_SECCTRL = .FDL$AB_SECCTRL OR .SECMASK;

    ! Get ready for a new an wonderous qualifier
    !
    FDL$GL_QUALIFIER = _CLEAR;

    RETURN SS$_NORMAL

    END;

%SBTTL	'START_STR'
GLOBAL ROUTINE	FDL$$START_STR =
!++
!
! Functional Description:
!
!	Initializes the string descriptor
!
! Calling Sequence:
!
!	Called from the parse tables
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    ! Start the makings of a descriptor
    !
    FDL$AB_STRING [ DSC$A_POINTER ] = .TPARSE_BLOCK [ TPA$L_TOKENPTR ];

    ! Process blanks
    !
    TPARSE_BLOCK [ TPA$V_BLANKS ] = _SET;

    RETURN SS$_NORMAL

    END;

%SBTTL	'END_STR'
GLOBAL ROUTINE	FDL$$END_STR =
!++
!
! Functional Description:
!	
!	Terminates the processing of a string and determines the
!	the length
!
! Calling Sequence:
!
!	Called from the parse tables
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL	CUT_LEN : WORD;

    TPARSE_BLOCK [ TPA$V_BLANKS ] = _CLEAR;

    ! The size is from where we are minus from where we is
    !
    FDL$AB_STRING [ DSC$W_LENGTH ] = .TPARSE_BLOCK [ TPA$L_STRINGPTR ] -
					.FDL$AB_STRING [ DSC$A_POINTER ];

    ! If the last char was a "!" then subtract one
    !
    IF .TPARSE_BLOCK [ TPA$B_CHAR ] EQL COMMENT_MARK
    THEN
	FDL$AB_STRING [ DSC$W_LENGTH ] = .FDL$AB_STRING [ DSC$W_LENGTH ] - 1;

    ! Remove trailing blanks
    !
    STR$TRIM ( FDL$AB_STRING,FDL$AB_STRING,CUT_LEN );

    ! Set the final length
    !
    FDL$AB_STRING [ DSC$W_LENGTH ] = .CUT_LEN;

    ! Adjust the pointer so that we are looking into the original input line
    !
    FDL$AB_STRING [ DSC$A_POINTER ] = .FDL$AB_STRING [ DSC$A_POINTER ] -
								FDL$K_MAXLINE;
    RETURN SS$_NORMAL

    END;

%SBTTL	'SET_DATE_TIME'
GLOBAL ROUTINE	FDL$$SET_DATE_TIME =
!++
!
! Functional Description:
!
!	Sets up the date/time quadword
!
! Calling Sequence:
!
!	Called from the parse tables
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL
	TEMP_DESC	: DESC_BLK;

    ! We must adjust the pointer so it points to the upcased buffer
    !
    TEMP_DESC [ DSC$W_LENGTH ] = .FDL$AB_STRING [ DSC$W_LENGTH ];
    TEMP_DESC [ DSC$A_POINTER ] = .FDL$AB_STRING [ DSC$A_POINTER ] + FDL$K_MAXLINE;

    ! If there is an error signal it and return failure
    !
    IF NOT SYS$BINTIM( TEMP_DESC,FDL$AL_DATE_TIME )
    THEN
	BEGIN

	BUILTIN CALLG;

	TPARSE_BLOCK [ TPA$L_PARAM ] = FDL$_INVDATIM;

	CALLG( .TPARSE_BLOCK,FDL$$SYNTAX_ERROR );

	RETURN 0

	END;

    RETURN SS$_NORMAL

    END;

%SBTTL	'SET_COMMENT'
GLOBAL ROUTINE	FDL$$SET_COMMENT =
!++
!
! Functional Description:
!
!	Sets up the comment descriptor
!
! Calling Sequence:
!
!	Called from the parse tables
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    ! The comment is the rest of the line
    !
    FDL$AB_COMMENT [ DSC$W_LENGTH ] = .TPARSE_BLOCK [ TPA$L_STRINGCNT ] + 1;
    FDL$AB_COMMENT [ DSC$A_POINTER ] = .TPARSE_BLOCK [ TPA$L_STRINGPTR ] - 1;

    ! Adjust the pointer so that we are looking into the original input line
    !
    FDL$AB_COMMENT [ DSC$A_POINTER ] = .FDL$AB_COMMENT [ DSC$A_POINTER ] -
								FDL$K_MAXLINE;

    RETURN SS$_NORMAL

    END;

%SBTTL	'SYNTAX_ERRROR'
GLOBAL ROUTINE	FDL$$SYNTAX_ERROR =
!++
!
! Functional Description:
!
!	Syntax_error has two functions: If called with the argument fdl$_abkw
!	or fdl$_abprikw it checks if there has been an ambigous keyword, if
!	there has been then it signals the error else it returns failure. If
!	it is called with some other error it is signaled and return is normal.
!	
! Calling Sequence:
!
!	Called from the parse tables
!
!	Can be called from a bliss routine by:
!
!	BUILTIN CALLG;
!
!	CALLG( tparse_block,FDL$$SYNTAX_ERROR )
!
! Input Parameters:
!
!	Error code in the tpa$l_param field of the tparse_block
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	ss$_normal or 0 (see above)
!
! Side Effects:
!
!	Signals an error
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL	STATUS	: LONG;

    BIND	CODE = STATUS : BLOCK [ 4,BYTE ];

    ! Get the error code passed to us by the parse tables
    !
    STATUS = .TPARSE_BLOCK [ TPA$L_PARAM ];

    ! If this is a ambiguity check and there is none return failure
    ! else signal the error
    !
    IF ( ( .STATUS EQLU FDL$_ABKW ) OR ( .STATUS EQLU FDL$_ABPRIKW ) ) AND
					( NOT .TPARSE_BLOCK [ TPA$V_AMBIG ] )
    THEN
	RETURN 0;

    ! If this is not a information message the set some error flags
    !
    IF ( NOT ( .CODE [ STS$V_SEVERITY ] EQLU STS$K_INFO ) )
    THEN

	! Say that there is an error on this secondary
	!
	FDL$AB_CTRL [ FDL$V_WARNING ] = _SET;

    ! Signal the error with:
    !
    !	a) Line number
    !	b) Length of the current token
    !	c) Pointer to the token
    !	d) Length of the remainer of the line
    !	e) Pointer to the rest of the line
    !
    SIGNAL ( .TPARSE_BLOCK [ TPA$L_PARAM ],5,
		.FDL$GL_LINECNT,
		.TPARSE_BLOCK [ TPA$L_TOKENCNT ],
		.TPARSE_BLOCK [ TPA$L_TOKENPTR ],
		.TPARSE_BLOCK [ TPA$L_STRINGCNT ],
		.TPARSE_BLOCK [ TPA$L_STRINGPTR ] );

    RETURN SS$_NORMAL

    END;

%SBTTL	'ERRROR_CHK'
GLOBAL ROUTINE	FDL$$ERROR_CHK =
!++
!
! Functional Description:
!
!	Does a check if there was a warning
!
! Calling Sequence:
!
!	Called from the parse tables
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	Value of fdl$ab_ctrl [ fdl$v_warning ]
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    ! If there is a warning return true else fail
    !
    RETURN .FDL$AB_CTRL [ FDL$V_WARNING ]

    END;


%SBTTL	'READ_ERROR'
ROUTINE	READ_ERROR : NOVALUE =
!++
!
! Functional Description:
!
!	This routine will signal an rms error and stop execution if the RMS
!	error is NOT end of file.  It is to be used for detecting errors
!	during rms $GETs or $READs.
!
! Calling Sequence:
!
!	This routine is call as an AST by RMS
!
! Input Parameters:
!
!	AST argument block which has a pointer to a RAB
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SIGNAL_STOP
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	AP;

    BIND
	AST_BLOCK = AP : REF VECTOR [ ,LONG ];

    LOCAL
	RAB : REF BLOCK [ ,BYTE ],
	FAB : REF BLOCK [ ,BYTE ],
	NAM : REF BLOCK [ ,BYTE ];

    ! Get the rab (Pointer to by the second ast parameter)
    !
    RAB = .AST_BLOCK [ 1 ];

    ! If this is only an end of file then return
    !
    IF .RAB [ RAB$L_STS ] EQLU RMS$_EOF
    THEN
	RETURN;

    ! Now get the fab it points to
    !
    FAB = .RAB [ RAB$L_FAB ];

    ! Get the name block
    !
    NAM = .FAB [ FAB$L_NAM ];

    ! Signal the FDL error with the best file name string
    !
    ! First try the resultant string
    !
    IF .NAM [ NAM$B_RSL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_RSL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_RSA ]
	END

    ! Next try the expanded string
    !
    ELSE IF .NAM [ NAM$B_ESL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_ESL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_ESA ]
	END

    ! If all else fails use the name string
    !
    ELSE
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .FAB [ FAB$B_FNS ];
	STRING_DESC [ DSC$A_POINTER ] = .FAB [ FAB$L_FNA ]
	END;

    SIGNAL_STOP( .RAB [ RAB$L_CTX ],1,STRING_DESC,
		 .RAB [ FAB$L_STS ],.RAB [ FAB$L_STV ] )

    END;


%SBTTL	'FDL$$RMS_ERROR'
GLOBAL ROUTINE	FDL$$RMS_ERROR	: NOVALUE =
!++
!
! Functional Description:
!
!	This routine will signal and rms error and stop execution.  It is
!	to be primarly used for detecting errors during asynchronous operations
!
! Calling Sequence:
!
!	This routine is call as an AST by RMS
!
! Input Parameters:
!
!	AST argument block which has a pointer to a rms block
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SIGNAL_STOP
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN AP;

    BIND
	AST_BLOCK = AP : REF VECTOR [ ,LONG ];

    LOCAL
	RMS_BLOCK : REF BLOCK [ ,BYTE ];

    ! Get the rms control block (second argument in the block)
    !
    RMS_BLOCK = .AST_BLOCK [ 1 ];

    ! NOTE: We use the RAB$x_zzz codes but they are valid for the FAB as well

    ! Signal the FDL error
    !
    SIGNAL_STOP( .RMS_BLOCK [ RAB$L_CTX ],
		 .RMS_BLOCK [ RAB$L_STS ],.RMS_BLOCK [ RAB$L_STV ] )

    END;


%SBTTL	'FDL$$RMS_OPEN_ERROR'
GLOBAL ROUTINE	FDL$$RMS_OPEN_ERROR : NOVALUE =
!++
!
! Functional Description:
!
!	This routine will signal an rms error and stop execution.  It is
!	to be primarly used for detecting errors during file opens.
!
! Calling Sequence:
!
!	This routine is call as an AST by RMS
!
! Input Parameters:
!
!	AST argument block which has a pointer to a FAB
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	SIGNAL_STOP
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	AP;

    BIND
	AST_BLOCK = AP : REF VECTOR [ ,LONG ];

    LOCAL
	FAB : REF BLOCK [ ,BYTE ],
	NAM : REF BLOCK [ ,BYTE ];

    ! Get the fab (Pointer to by the second ast parameter)
    !
    FAB = .AST_BLOCK [ 1 ];

    ! If this is really a RAB (from a connect) then get the fab it points to
    !
    IF .FAB [ FAB$B_BID ] EQLU RAB$C_BID
    THEN
	FAB = .FAB [ RAB$L_FAB ];	! This looks strange but it's ok!

    ! Get the name block
    !
    NAM = .FAB [ FAB$L_NAM ];

    ! Signal the FDL error with the best file name string
    !
    ! First try the resultant string
    !
    IF .NAM [ NAM$B_RSL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_RSL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_RSA ]
	END

    ! Next try the expanded string
    !
    ELSE IF .NAM [ NAM$B_ESL ] NEQU 0
    THEN
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .NAM [ NAM$B_ESL ];
	STRING_DESC [ DSC$A_POINTER ] = .NAM [ NAM$L_ESA ]
	END

    ! If all else fails use the name string
    !
    ELSE
	BEGIN
	STRING_DESC [ DSC$W_LENGTH ] = .FAB [ FAB$B_FNS ];
	STRING_DESC [ DSC$A_POINTER ] = .FAB [ FAB$L_FNA ]
	END;

    SIGNAL_STOP( .FAB [ RAB$L_CTX ],1,STRING_DESC,
		 .FAB [ FAB$L_STS ],.FAB [ FAB$L_STV ] )

    END;

END ELUDOM
