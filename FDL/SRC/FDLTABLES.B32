%TITLE	'FDLTABLES'
%SBTTL	'FDL T-Parse Transision Tables'
MODULE	FDLTABLES	( IDENT='V03-001'
			) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	RMS-32 FDL Utilities
!
! Abstract:
!
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	January-1981
!
!
! Modified by:
!
!	V03-001	KBT0032		Keith Thompson		31-Mar-1982
!		Change date/time parsing
!
!****


LIBRARY	'SYS$LIBRARY:STARLET';
LIBRARY	'SYS$LIBRARY:TPAMAC';
REQUIRE	'SRC$:FDLUTIL';
REQUIRE	'SRC$:FDLPARDEF';

DEFINE_ERROR_CODES;

EXTERNAL ROUTINE

!	Driver routines needed for parsing
!
	FDL$$GET_LINE,
	FDL$$SET_PRIMARY,
	FDL$$SET_SECONDARY,
	FDL$$START_STR,
	FDL$$END_STR,
	FDL$$SET_DATE_TIME,
	FDL$$SET_COMMENT,
	FDL$$SYNTAX_ERROR,
	FDL$$ERROR_CHK,

!	Action Routine called when a line has been parsed
!
	FDL$$LINE_PARSED;

EXTERNAL
	FDL$AB_CTRL,
	FDL$GL_PRIMARY,
	FDL$GL_PRINUM,
	FDL$GL_SECONDARY,
	FDL$GL_SECNUM,
	FDL$GL_QUALIFIER,
	FDL$GL_NUMBER,
	FDL$GL_NUMTYPE,
	FDL$GL_SWITCH,
	FDL$GL_UIC_GROUP,
	FDL$GL_UIC_MEMBER,
	FDL$GL_PROTECTION,
	FDL$GL_FID1,
	FDL$GL_FID2,
	FDL$GL_FID3;

LITERAL
	QUOTE		= 34,
	SINGLEQUOTE	= 39;


!	Syntax Rules
!
!	1) Multiple re-defines result in a warning-class message with
!	   the first encountered definition taking presidence.
!
!	2) Null (empty) primaries result in a warning message.
!
!	3) Both AREA and KEY primary must be defined in order and contigous.
!
!	4) All  keywords  must  be  spelled  out  enough  to   establish
!	   uniqueness.
!
!	5) Comments start with "!" and can appear any where.  The comment
!	   continues to the end of line.
!
!	6) The Journaling section will not be implimented until  VMS  V3
!	   Edition B.
!
!	7) When  encountered  primary  keywords  establish a block which
!	   exists until another 1st level keyword is encountered.
!

!	How the state table works:
!
!	$STATE	(S_primary,						! State called from the primary parse
!									!  tables
!		((S_COMMENT),	,		FDL$$LINE_PARSED)	! Parse any comments on the end of
!									!  the primary
!		);							! If line_parse returns with an error
!									!  we fail
!	$STATE	(S_primary_S,						! Start of loop to parse secondaries
!									!
!		(TPA$_LAMBDA,	,		FDL$$GET_LINE),		! Get a line
!									!
!		(TPA$_LAMBDA,	TPA$_EXIT)				! If end of line (or error) return
!									!
!		);							!
!									!
!	$STATE	(,							! After get_line we end up here
!									!
!									! Parse a secondary
!		((S_primary_ATTR),,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
!									!
!									! If ok say that one has been parsed
!									!   and drop through.  If it fails
!		(TPA$_LAMBDA,	S_PARSE)				!   Return to the primary parse
!									!
!		);							!
!									!
!	$STATE	(,							! We got a secondary
!									!
!		(TPA$_LAMBDA,	S_primary_S,	FDL$$ERROR_CHK),	! If there was some warning during
!									!  the secondary then try again
!		(TPA$_LAMBDA,	S_primary_S,	FDL$$LINE_PARSED)	! If secondary ok parse it and loop
!									!  for more secondaries.  Again if
!		);							!  line_parse fails we exit
!									!
!
!	$STATE	(S_primary_ATTR,					! Secondary parse table
!									!
!									! Check for comments first
!		('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
!									!				xxxxx
!									! Parse the actual secondary keyword
!									!  If we found one call set_secondary
!									!  with the secondary_mask.  If the
!									!  call succedes set fdl$secondary
!									!  and parse the secondary_qualifier
!		('secondary',	secondary_qual,	FDL$$SET_SECONDARY,secondary_code,	FDL$GL_SECONDARY,secondary_mask),
!				.					!
!				.					! One for each secondary
!				.					!
!									! If no secondary was parsed then
!									!  check for a ambigous keyword
!		(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
!									!
!		(TPA$_LAMBDA,	TPA$_FAIL)				! If it was not that then fail
!									!
!		);							!
!									!
!


!	Initialize the State Table
!
$INIT_STATE( FDL$AB_STATE_TABLE,FDL$AB_KEY_TABLE );


!	****	The Primary Level State Table	****
!
!
!	ANALYSIS_OF_AREA		number
!	ANALYSIS_OF_KEY			number
!	AREA				number
!	DATE
!	FILE
!	IDENT				string
!	JOURNALING
!	KEY				number
!	RECORD
!	SYSTEM
!	TITLE				string
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_START,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(S_PARSE,
	(TPA$_EOS,	S_START),
	('!',		S_LINECMT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('ANALYSIS_OF_AREA',	S_ANALA_N),
	('ANALYSIS_OF_KEY',	S_ANALK_N),
	('AREA',		S_AREA_N),
	('DATE',	S_DATE,		FDL$$SET_PRIMARY,FDL$C_DATE,	FDL$GL_PRIMARY,	FDL$M_DATE),
	('FILE',	S_FILE,		FDL$$SET_PRIMARY,FDL$C_FILE,	FDL$GL_PRIMARY,	FDL$M_FILE),
	('IDENT',	S_IDENT,	FDL$$SET_PRIMARY,FDL$C_IDENT,	FDL$GL_PRIMARY,	FDL$M_IDENT),
!	('JOURNALING',	S_JOURNALING,	FDL$$SET_PRIMARY,FDL$C_JNL,	FDL$GL_PRIMARY,	FDL$M_JNL),
	('KEY',			S_KEY_N),
	('RECORD',	S_RECORD,	FDL$$SET_PRIMARY,FDL$C_RECORD,	FDL$GL_PRIMARY,	FDL$M_RECORD),
	('SYSTEM',	S_SYSTEM,	FDL$$SET_PRIMARY,FDL$C_SYSTEM,	FDL$GL_PRIMARY,	FDL$M_SYSTEM),
	('TITLE',	S_TITLE,	FDL$$SET_PRIMARY,FDL$C_TITLE,	FDL$GL_PRIMARY,	FDL$M_TITLE),
	(TPA$_STRING,	S_START,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABPRIKW),
	(TPA$_STRING,	S_START,	FDL$$SYNTAX_ERROR,,		,		FDL$_UNPRIKW),
	(TPA$_LAMBDA,	TPA$_FAIL,	FDL$$SYNTAX_ERROR,,		,		FDL$_SYNTAX)
	);

$STATE	(S_ANALA_N,
	((S_PRINUM),	S_ANALA,	FDL$$SET_PRIMARY,FDL$C_ANALA,	FDL$GL_PRIMARY,	FDL$M_ANALA),
	(TPA$_LAMBDA,	S_START)
	);

$STATE	(S_ANALK_N,
	((S_PRINUM),	S_ANALK,	FDL$$SET_PRIMARY,FDL$C_ANALK,	FDL$GL_PRIMARY,	FDL$M_ANALK),
	(TPA$_LAMBDA,	S_START)
	);

$STATE	(S_AREA_N,
	((S_PRINUM),	S_AREA,		FDL$$SET_PRIMARY,FDL$C_AREA,	FDL$GL_PRIMARY,	FDL$M_AREA),
	(TPA$_LAMBDA,	S_START)
	);

$STATE	(S_KEY_N,
	((S_PRINUM),	S_KEY,		FDL$$SET_PRIMARY,FDL$C_KEY,	FDL$GL_PRIMARY,	FDL$M_KEY),
	(TPA$_LAMBDA,	S_START)
	);

$STATE	(S_PRINUM,
	(TPA$_DECIMAL,	TPA$_EXIT,	,		,		FDL$GL_PRINUM),
	(TPA$_EOS,	TPA$_FAIL,	FDL$$SYNTAX_ERROR,,		,		FDL$_VALPRI),
	(TPA$_LAMBDA,	TPA$_FAIL,	FDL$$SYNTAX_ERROR,,		,		FDL$_SYNTAX)
	);

!	To not have a ident or a title string is only a imformation message
!
$STATE	(S_IDENT,
	((S_STRING),	S_START,	FDL$$LINE_PARSED,FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_START,	FDL$$SYNTAX_ERROR,FDL$M_SECONDARY,FDL$AB_CTRL,	FDL$_TITLE)
	);

$STATE	(S_TITLE,
	((S_STRING),	S_START,	FDL$$LINE_PARSED,FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_START,	FDL$$SYNTAX_ERROR,FDL$M_SECONDARY,FDL$AB_CTRL,	FDL$_TITLE)
	);

!	Line comment
!
$STATE	(S_LINECMT,
	(TPA$_LAMBDA,	S_START,	FDL$$LINE_PARSED)
	);

!
!	****	The ANALYSIS_OF_AREA Block State Table
!
!   ANALYSIS_OF_AREA
!	RECLAIMED_SPACE			number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_ANALA,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_ANALA_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_ANALA_ATTR),,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_ANALA_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_ANALA_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_ANALA_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('RECLAIMED_SPACE',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_RECL,	FDL$GL_SECONDARY,FDL$M_RECL),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);


!
!	****	The ANALYSIS_OF_KEY Block State Table
!
!   ANALYSIS_OF_KEY
!	DATA_FILL			number
!	DATA_KEY_COMPRESSION		number
!	DATA_RECORD_COMPRESSION		number
!	DATA_RECORDS_COUNT		number
!	DATA_SPACE_OCCUPIED		number
!	DELETIONS			number
!	DEPTH				number
!	DUPLICATES_PER_SIDR		number
!	INDEX_COMPRESSION		number
!	INDEX_FILL			number
!	INDEX_SPACE_OCCUPIED		number
!	MEAN_DATA_LENGTH		number
!	MEAN_INDEX_LENGTH		number
!	RANDOM_ACCESS			number
!	RANDOM_INSERTS			number
!	SEQUENTIAL_ACCESS		number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_ANALK,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_ANALK_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_ANALK_ATTR),,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_ANALK_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_ANALK_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_ANALK_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('DATA_FILL',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DFIL,	FDL$GL_SECONDARY,FDL$M_DFIL),
	('DATA_KEY_COMPRESSION',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DKC,	FDL$GL_SECONDARY,FDL$M_DKC),
	('DATA_RECORD_COMPRESSION',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DRC,	FDL$GL_SECONDARY,FDL$M_DRC),
	('DATA_RECORD_COUNT',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DREC,	FDL$GL_SECONDARY,FDL$M_DREC),
	('DATA_SPACE_OCCUPIED',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DSPC,	FDL$GL_SECONDARY,FDL$M_DSPC),
!	('DELETIONS',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DELE,	FDL$GL_SECONDARY,FDL$M_DELE),
	('DEPTH',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DEPTH,	FDL$GL_SECONDARY,FDL$M_DEPTH),
	('DUPLICATES_PER_SIDR',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DUPL,	FDL$GL_SECONDARY,FDL$M_DUPL),
	('INDEX_COMPRESSION',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_ICOMP,	FDL$GL_SECONDARY,FDL$M_ICOMP),
	('INDEX_FILL',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_IFIL,	FDL$GL_SECONDARY,FDL$M_IFIL),
	('INDEX_SPACE_OCCUPIED',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_ISPC,	FDL$GL_SECONDARY,FDL$M_ISPC),
	('MEAN_DATA_LENGTH',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_MDL,	FDL$GL_SECONDARY,FDL$M_MDL),
	('MEAN_INDEX_LENGTH',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_MIL,	FDL$GL_SECONDARY,FDL$M_MIL),
!	('RANDOM_ACCESS',
!			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_RANACC,FDL$GL_SECONDARY,FDL$M_RANACC),
!	('RANDOM_INSERTS',
!			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_RANINS,FDL$GL_SECONDARY,FDL$M_RANINS),
!	('SEQUENTIAL_ACCESS',
!			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_SEQACC,FDL$GL_SECONDARY,FDL$M_SEQACC),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);


!	****	The AREA Block State Table	****
!
!    AREA				number
!	ALLOCATION			number
!	BEST_TRY_CONTIGUOUS		switch
!	BUCKET_SIZE			number
!	CONTIGUOUS			switch
!	EXACT_POSITIONING		switch
!	EXTENSION			number
!	POSITION			ANY_CYLINDER
!					CLUSTER		number
!					CYLINDER	number
!					FILE_ID		fid
!					FILE_NAME	string
!					LOGICAL		number
!					NONE
!					VIRTUAL		number
!	VOLUME				number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_AREA,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_AREA_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_AREA_ATTR),	,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_AREA_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_AREA_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_AREA_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('ALLOCATION',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_ALLOC,	FDL$GL_SECONDARY,FDL$M_ALLOC),
	('BEST_TRY_CONTIGUOUS',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_BTCONT,FDL$GL_SECONDARY,FDL$M_BTCONT),
	('BUCKET_SIZE',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_BKT,	FDL$GL_SECONDARY,FDL$M_BKT),
	('CONTIGUOUS',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_CONTG,	FDL$GL_SECONDARY,FDL$M_CONTG),
	('EXACT_POSITIONING',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_EXACT,	FDL$GL_SECONDARY,FDL$M_EXACT),
	('EXTENSION',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_EXTND,	FDL$GL_SECONDARY,FDL$M_EXTND),
	('POSITION',	S_POSITION,	FDL$$SET_SECONDARY,FDL$C_POSI,	FDL$GL_SECONDARY,FDL$M_POSI),
	('VOLUME',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_VOLU,	FDL$GL_SECONDARY,FDL$M_VOLU),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);

$STATE	(S_POSITION,
	('ANY_CYLINDER',S_COMMENT,	,		FDL$C_ANYPOS,	FDL$GL_QUALIFIER),
!	('CLUSTER',	S_NUMBER,	,		FDL$C_CLUSPOS,	FDL$GL_QUALIFIER),
	('CYLINDER',	S_NUMBER,	,		FDL$C_CYLPOS,	FDL$GL_QUALIFIER),
	('FILE_ID',	S_FID,		,		FDL$C_FIDPOS,	FDL$GL_QUALIFIER),
	('FILE_NAME',	S_STRING,	,		FDL$C_FNMPOS,	FDL$GL_QUALIFIER),
	('LOGICAL',	S_NUMBER,	,		FDL$C_LOGPOS,	FDL$GL_QUALIFIER),
	('NONE',	S_COMMENT,	,		FDL$C_NOPOS,	FDL$GL_QUALIFIER),
	('VIRTUAL',	S_NUMBER,	,		FDL$C_VIRPOS,	FDL$GL_QUALIFIER),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);


!	****	The DATE Block State Table	****
!
!   DATE
!	BACKUP				date
!	CREATION			date
!	EXPIRATION			date
!	REVISION			date
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_DATE,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_DATE_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_DATE_ATTR),	,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_DATE_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_DATE_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_DATE_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('BACKUP',	S_DATE_TIME,	FDL$$SET_SECONDARY,FDL$C_BACKUP,FDL$GL_SECONDARY,FDL$M_BACKUP),
	('CREATION',	S_DATE_TIME,	FDL$$SET_SECONDARY,FDL$C_CREAT,	FDL$GL_SECONDARY,FDL$M_CREAT),
	('EXPIRATION',	S_DATE_TIME,	FDL$$SET_SECONDARY,FDL$C_EXPR,	FDL$GL_SECONDARY,FDL$M_EXPR),
	('REVISION',	S_DATE_TIME,	FDL$$SET_SECONDARY,FDL$C_REV,	FDL$GL_SECONDARY,FDL$M_REV),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);

$STATE	(S_DATE_TIME,
	((S_STRING),	S_COMMENT,	FDL$$SET_DATE_TIME),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);

!	****	The FILE Block State Table	****
!
!   FILE
!	ALLOCATION			number
!	BACKUP				switch
!	BEST_TRY_CONTIGUOUS             switch
!	BUCKET_SIZE                     number
!	CLUSTER_SIZE			number	(RMS-11 RSTS/E only)
!	CONTIGUOUS                      switch
!	DEFAULT_NAME			string
!	DELETE_ON_CLOSE			switch
!	DIRECTORY_ENTRY			switch
!	EXTENSION			number
!	GLOBAL_BUFFER_COUNT		number
!	MAGTAPE_BLOCK_SIZE              number
!	MAGTAPE_CURRENT_POSITION	switch
!	MAGTAPE_PROTECTION		'character'
!					number
!	MAGTAPE_REWIND                  switch
!	MAX_RECORD_NUMBER		number
!	MAXIMIZE_VERSION		switch
!	NAME				string
!	ORGANIZATION			SEQUENTIAL
!					RELATIVE
!					INDEXED
!	OWNER				uic
!	PRINT_ON_CLOSE			switch
!	PROTECTION			protection_specificaton
!	READ_CHECK                      switch
!	REVISION			number
!	SUBMIT_ON_CLOSE			switch
!	SUPERSEDE                       switch
!	TRUNCATE_ON_CLOSE		switch
!	WRITE_CHECK                     switch
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_FILE,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_FILE_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_FILE_ATTR),	,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_FILE_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_FILE_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_FILE_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('ALLOCATION',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_ALL,	FDL$GL_SECONDARY,FDL$M_ALL),
!	('BACKUP',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_BKTUP,	FDL$GL_SECONDARY,FDL$M_BKTUP),
	('BEST_TRY_CONTIGUOUS',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_BTC,	FDL$GL_SECONDARY,FDL$M_BTC),
	('BUCKET_SIZE',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_BKTSIZ,FDL$GL_SECONDARY,FDL$M_BKTSIZ),
!	('CLUSTER_SIZE',S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_CLUSIZ,FDL$GL_SECONDARY,FDL$M_CLUSIZ),
	('CONTIGUOUS',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_CONT,	FDL$GL_SECONDARY,FDL$M_CONT),
	('DEFAULT_NAME',S_STRING,	FDL$$SET_SECONDARY,FDL$C_DFNAM,	FDL$GL_SECONDARY,FDL$M_DFNAM),
	('DELETE_ON_CLOSE',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_DOC,	FDL$GL_SECONDARY,FDL$M_DOC),
	('DIRECTORY_ENTRY',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_DIR,	FDL$GL_SECONDARY,FDL$M_DIR),
!	('ERASE_ON_DELETE',
!			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_EODEL,	FDL$GL_SECONDARY,FDL$M_EODEL),
	('EXTENSION',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_EXTEN,	FDL$GL_SECONDARY,FDL$M_EXTEN),
	('GLOBAL_BUFFER_COUNT',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_GBC,	FDL$GL_SECONDARY,FDL$M_GBC),
	('MAGTAPE_BLOCK_SIZE',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_MTBLSIZ,FDL$GL_SECONDARY,FDL$M_MTBLSIZ),
	('MAGTAPE_CURRENT_POSITION',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_MTCP,	FDL$GL_SECONDARY,FDL$M_MTCP),
	('MAGTAPE_PROTECTION',
			S_PROT_VALUE,	FDL$$SET_SECONDARY,FDL$C_MTPRO,	FDL$GL_SECONDARY,FDL$M_MTPRO),
	('MAGTAPE_REWIND',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_MTREW,	FDL$GL_SECONDARY,FDL$M_MTREW),
	('MAX_RECORD_NUMBER',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_MAXRECN,FDL$GL_SECONDARY,FDL$M_MAXRECN),
	('MAXIMIZE_VERSION',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_MAXVER,FDL$GL_SECONDARY,FDL$M_MAXVER),
	('NAME',	S_STRING,	FDL$$SET_SECONDARY,FDL$C_NAME,	FDL$GL_SECONDARY,FDL$M_NAME),
	('ORGANIZATION',S_ORG,		FDL$$SET_SECONDARY,FDL$C_ORG,	FDL$GL_SECONDARY,FDL$M_ORG),
	('OWNER',	S_UIC,		FDL$$SET_SECONDARY,FDL$C_OWNER,	FDL$GL_SECONDARY,FDL$M_OWNER),
	('PRINT_ON_CLOSE',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_POC,	FDL$GL_SECONDARY,FDL$M_POC),
	('PROTECTION',	S_PROT,		FDL$$SET_SECONDARY,FDL$C_PROT,	FDL$GL_SECONDARY,FDL$M_PROT),
	('READ_CHECK',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_READC,	FDL$GL_SECONDARY,FDL$M_READC),
	('REVISION',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_REVISN,FDL$GL_SECONDARY,FDL$M_REVISN),
	('SUBMIT_ON_CLOSE',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_SOC,	FDL$GL_SECONDARY,FDL$M_SOC),
	('SUPERSEDE',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_SUPER,	FDL$GL_SECONDARY,FDL$M_SUPER),
	('TRUNCATE_ON_CLOSE',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_TOC,	FDL$GL_SECONDARY,FDL$M_TOC),
	('WRITE_CHECK',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_WRITEC,FDL$GL_SECONDARY,FDL$M_WRITEC),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);

$STATE	(S_PROT_VALUE,
	(TPA$_DECIMAL,	TPA$_EXIT,	,		,		FDL$GL_QUALIFIER),
	((S_PROT_CHAR),	TPA$_EXIT),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_PROT_CHAR,
	(SINGLEQUOTE)
	);
$STATE	(,
	(TPA$_ANY,	,		,		,		FDL$GL_QUALIFIER)
	);
$STATE	(,
	(SINGLEQUOTE,	TPA$_EXIT)
	);

$STATE	(S_ORG,
	('INDEXED',	S_COMMENT,	,		FAB$C_IDX,	FDL$GL_QUALIFIER),
	('RELATIVE',	S_COMMENT,	,		FAB$C_REL,	FDL$GL_QUALIFIER),
	('SEQUENTIAL',	S_COMMENT,	,		FAB$C_SEQ,	FDL$GL_QUALIFIER),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);


!	****	The JOURNALING Block State Table	****
!
!   JOURNALING
!	AFTER_IMAGE			switch
!	AUDIT_TRAIL			ALL
!					NONE
!					ACCESSES
!					READS
!					WRITES
!	BEFORE_IMAGE			switch
!	RECOVERY_UNIT			DURING_RU
!					RU_REQUIRED
!					NONE
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!


!	****	The KEY Block State Table	****
!
!   KEY					number
!	CHANGES                         switch
!	DATA_AREA			number
!	DATA_FILL                       number
!	DATA_KEY_COMPRESSION		switch
!	DATA_INDEX_COMPRESSION		switch
!	DUPLICATES                      switch
!	INDEX_AREA			number
!	INDEX_COMPRESSION		switch
!	INDEX_FILL                      number
!	LENGTH                          number
!	LEVEL1_INDEX_AREA		number
!	NAME                            string
!	NULL_KEY                        switch
!	NULL_VALUE			'character'
!					number
!	POSITION                        number
!	PROLOGUE			number
!	SEGn_LENGTH			number		0 <= n <= 7
!	SEGn_POSITION			number		0 <= n <= 7
!	SEGn_TYPE			DECIMAL		0 <= n <= 7
!					INT2
!					INT4
!					STRING
!					BIN2
!					BIN4
!	TYPE				DECIMAL
!					INT2
!					INT4
!					STRING
!					BIN2
!					BIN4
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_KEY,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_KEY_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_KEY_ATTR),	,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_KEY_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_KEY_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_KEY_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('CHANGES',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_CHANGE,FDL$GL_SECONDARY,FDL$M_CHANGE),
	('DATA_AREA',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DAREA,	FDL$GL_SECONDARY,FDL$M_DAREA),
	('DATA_FILL',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_DFILL,	FDL$GL_SECONDARY,FDL$M_DFILL),
	('DATA_KEY_COMPRESSION',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_DATKC,	FDL$GL_SECONDARY,FDL$M_DATKC),
	('DATA_RECORD_COMPRESSION',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_DATRC,	FDL$GL_SECONDARY,FDL$M_DATRC),
	('DUPLICATES',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_DUPS,	FDL$GL_SECONDARY,FDL$M_DUPS),
	('INDEX_AREA',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_IAREA,	FDL$GL_SECONDARY,FDL$M_IAREA),
	('INDEX_COMPRESSION',
			S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_IDXC,	FDL$GL_SECONDARY,FDL$M_IDXC),
	('INDEX_FILL',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_IFILL,	FDL$GL_SECONDARY,FDL$M_IFILL),
	('LENGTH',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_SEGLEN,FDL$GL_SECONDARY,FDL$M_SEGLEN),
	('LEVEL1_INDEX_AREA',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_LAREA,	FDL$GL_SECONDARY,FDL$M_LAREA),
	('NAME',	S_STRING,	FDL$$SET_SECONDARY,FDL$C_KYNAME,FDL$GL_SECONDARY,FDL$M_KYNAME),
	('NULL_KEY',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_NULL,	FDL$GL_SECONDARY,FDL$M_NULL),
	('NULL_VALUE',	S_NULL_VALUE,	FDL$$SET_SECONDARY,FDL$C_NULLVAL,FDL$GL_SECONDARY,FDL$M_NULLVAL),
	('POSITION',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_SEGPOS,FDL$GL_SECONDARY,FDL$M_SEGPOS),
	('PROLOGUE',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_PROL,	FDL$GL_SECONDARY,FDL$M_PROL),
	((S_SEGLEN),	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_SEGLEN,FDL$GL_SECONDARY,FDL$M_SEGLEN),
	((S_SEGPOS),	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_SEGPOS,FDL$GL_SECONDARY,FDL$M_SEGPOS),
!	((S_SEGTYP),	S_TYPE,		FDL$$SET_SECONDARY,FDL$C_SEGTYP,FDL$GL_SECONDARY,FDL$M_SEGTYP),
	('TYPE',	S_TYPE,		FDL$$SET_SECONDARY,FDL$C_SEGTYP,FDL$GL_SECONDARY,FDL$M_SEGTYP),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);

$STATE	(S_SEGLEN,
	((S_SEG))
	);
$STATE	(,
	('LENGTH',	TPA$_EXIT)
	);

$STATE	(S_SEGPOS,
	((S_SEG))
	);
$STATE	(,
	('POSITION',	TPA$_EXIT)
	);

$STATE	(S_SEGTYP,
	((S_SEG))
	);
$STATE	(,
	('TYPE',	TPA$_EXIT)
	);

$STATE	(S_SEG,
	('S')
	);
$STATE	(,
	('E')
	);
$STATE	(,
	('G')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		FDL$GL_SECNUM)
	);
$STATE	(,
	('_',	TPA$_EXIT)
	);

$STATE	(S_TYPE,
	('BIN2',	S_COMMENT,	,		XAB$C_BN2,	FDL$GL_QUALIFIER),
	('BIN4',	S_COMMENT,	,		XAB$C_BN4,	FDL$GL_QUALIFIER),
	('DECIMAL',	S_COMMENT,	,		XAB$C_PAC,	FDL$GL_QUALIFIER),
	('INT2',	S_COMMENT,	,		XAB$C_IN2,	FDL$GL_QUALIFIER),
	('INT4',	S_COMMENT,	,		XAB$C_IN4,	FDL$GL_QUALIFIER),
	('STRING',	S_COMMENT,	,		XAB$C_STG,	FDL$GL_QUALIFIER),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_NULL_VALUE,
	(TPA$_DECIMAL,	TPA$_EXIT,	,		,		FDL$GL_QUALIFIER),
	((S_NULL_CHAR),	TPA$_EXIT),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_NULL_CHAR,
	(SINGLEQUOTE)
	);
$STATE	(,
	(TPA$_ANY,	,		,		,		FDL$GL_QUALIFIER)
	);
$STATE	(,
	(SINGLEQUOTE,	TPA$_EXIT)
	);

!	****	The RECORD Block State Table	****
!
!   RECORD
!	BLOCK_SPAN			switch
!	CARRIAGE_CONTROL		FORTRAN
!					PRINT
!					NONE
!					CARRIAGE_RETURN
!	CONTROL_FIELD_SIZE		number
!	FORMAT				FIXED
!					STREAM
!					STREAM_CR
!					STREAM_LF
!					UNDEFINED
!					VARIABLE
!					VFC
!	SIZE				number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_RECORD,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_RECORD_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_RECORD_ATTR),,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_RECORD_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_RECORD_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_RECORD_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('BLOCK_SPAN',	S_SWITCH,	FDL$$SET_SECONDARY,FDL$C_BLKSPN,FDL$GL_SECONDARY,FDL$M_BLKSPN),
	('CARRIAGE_CONTROL',
			S_CRCTRL,	FDL$$SET_SECONDARY,FDL$C_CARCTRL,FDL$GL_SECONDARY,FDL$M_CARCTRL),
	('CONTROL_FIELD_SIZE',
			S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_VFCSIZ,FDL$GL_SECONDARY,FDL$M_VFCSIZ),
	('FORMAT',	S_FORMAT,	FDL$$SET_SECONDARY,FDL$C_FMT,	FDL$GL_SECONDARY,FDL$M_FMT),
	('SIZE',	S_NUMBER,	FDL$$SET_SECONDARY,FDL$C_SIZE,	FDL$GL_SECONDARY,FDL$M_SIZE),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);

$STATE	(S_CRCTRL,
	('CARRIAGE_RETURN',
			S_COMMENT,	,		FDL$C_CR,	FDL$GL_QUALIFIER),
	('FORTRAN',	S_COMMENT,	,		FDL$C_FTN,	FDL$GL_QUALIFIER),
	('NONE',	S_COMMENT,	,		FDL$C_NONE,	FDL$GL_QUALIFIER),
	('PRINT',	S_COMMENT,	,		FDL$C_PRINT,	FDL$GL_QUALIFIER),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_FORMAT,
	('FIXED',	S_COMMENT,	,		FAB$C_FIX,	FDL$GL_QUALIFIER),
	('STREAM',	S_COMMENT,	,		FAB$C_STM,	FDL$GL_QUALIFIER),
	('STREAM_CR',	S_COMMENT,	,		FAB$C_STMCR,	FDL$GL_QUALIFIER),
	('STREAM_LF',	S_COMMENT,	,		FAB$C_STMLF,	FDL$GL_QUALIFIER),
	('UNDEFINED',	S_COMMENT,	,		FAB$C_UDF,	FDL$GL_QUALIFIER),
	('VARIABLE',	S_COMMENT,	,		FAB$C_VAR,	FDL$GL_QUALIFIER),
	('VFC',		S_COMMENT,	,		FAB$C_VFC,	FDL$GL_QUALIFIER),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,	,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

!	****	The SYSTEM Block State Table	****
!
!    SYSTEM
!	DEVICE				string
!	SOURCE				IAS
!					RSTS/E
!					RSX-11M
!					RSX-11M-PLUS
!					RT-11
!					TRAX-11
!					VAX/VMS
!	TARGET				IAS
!					RSTS/E
!					RSX-11M
!					RSX-11M-PLUS
!					RT-11
!					TRAX-11
!					VAX/VMS
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_SYSTEM,
	((S_COMMENT),	,		FDL$$LINE_PARSED)
	);
$STATE	(S_SYSTEM_S,
	(TPA$_LAMBDA,	,		FDL$$GET_LINE),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);
$STATE	(,
	((S_SYSTEM_ATTR),,		,		FDL$M_SECONDARY,FDL$AB_CTRL),
	(TPA$_LAMBDA,	S_PARSE)
	);
$STATE	(,
	(TPA$_LAMBDA,	S_SYSTEM_S,	FDL$$ERROR_CHK),
	(TPA$_LAMBDA,	S_SYSTEM_S,	FDL$$LINE_PARSED)
	);

$STATE	(S_SYSTEM_ATTR,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_LINECMT,	FDL$AB_CTRL),
	('DEVICE',	S_STRING,	FDL$$SET_SECONDARY,FDL$C_DEVICE,FDL$GL_SECONDARY,FDL$M_DEVICE),
	('SOURCE',	,		FDL$$SET_SECONDARY,FDL$C_SOURCE,FDL$GL_SECONDARY,FDL$M_SOURCE),
	('TARGET',	,		FDL$$SET_SECONDARY,FDL$C_TARGET,FDL$GL_SECONDARY,FDL$M_TARGET),
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_ABKW),
	(TPA$_LAMBDA,	TPA$_FAIL)
	);
$STATE	(,
	('IAS',		S_COMMENT,	,		FDL$C_IAS,	FDL$GL_QUALIFIER),
	('RSTS/E',	S_COMMENT,	,		FDL$C_RSTS,	FDL$GL_QUALIFIER),
	('RSX-11M',	S_COMMENT,	,		FDL$C_M,	FDL$GL_QUALIFIER),
	('RSX-11M-PLUS',S_COMMENT,	,		FDL$C_MPLUS,	FDL$GL_QUALIFIER),
	('RT-11',	S_COMMENT,	,		FDL$C_RT,	FDL$GL_QUALIFIER),
	('TRAX-11',	S_COMMENT,	,		FDL$C_TRAX,	FDL$GL_QUALIFIER),
	('VAX/VMS',	S_COMMENT,	,		FDL$C_VMS,	FDL$GL_QUALIFIER),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

!	****	Misc. State Tables	****
!
!	For Parsing Strings
!
!	Note: Ignore characters in quotes '"'
!

!
!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_STRING,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_COMMENT,	FDL$AB_CTRL),
	(TPA$_ANY,	S_STR,		FDL$$START_STR),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);

$STATE	(S_STR,
	('!',		,		FDL$$END_STR),
	(QUOTE,		S_QUOTE),
	(TPA$_ANY,	S_STR),
	(TPA$_LAMBDA,	TPA$_EXIT,	FDL$$END_STR)
	);
$STATE	(,
	(TPA$_LAMBDA,	TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_COMMENT,	FDL$AB_CTRL)
	);

$STATE	(S_QUOTE,
	(QUOTE,		S_STR),
	(TPA$_ANY,	S_QUOTE),
	(TPA$_LAMBDA,	TPA$_EXIT,	FDL$$END_STR)
	);

!	For Numbers
!
!	(-)number	nothing
!			BLOCKS
!			BYTES
!			CHARACTERS
!			RECORDS
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!

$STATE	(S_NUMBER,
	((S_POSITIVE)),
	((S_NEGATIVE),	,		,		%X'80000000',	FDL$GL_NUMBER),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);
$STATE	(,
	('BLOCKS',	S_COMMENT,	,		FDL$C_BLOCKS,	FDL$GL_NUMTYPE),
	('BYTES',	S_COMMENT,	,		FDL$C_BYTES,	FDL$GL_NUMTYPE),
	('CHARACTERS',	S_COMMENT,	,		FDL$C_CHAR,	FDL$GL_NUMTYPE),
	('RECORDS',	S_COMMENT,	,		FDL$C_RECORDS,	FDL$GL_NUMTYPE),
	(TPA$_LAMBDA,	S_COMMENT)							! Default
	);

$STATE	(S_NEGATIVE,
	('-')
	);
$STATE	(S_POSITIVE,
	(TPA$_DECIMAL,	TPA$_EXIT,	,		,		FDL$GL_NUMBER)
	);

!	For Switch
!
!		FALSE
!		NO
!		TRUE
!		YES
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_SWITCH,
	('FALSE',	S_COMMENT),
	('NO',		S_COMMENT),
	('TRUE',	S_COMMENT,	,		FDL$C_TRUE,	FDL$GL_SWITCH),
	('YES',		S_COMMENT,	,		FDL$C_TRUE,	FDL$GL_SWITCH),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

!	For File ID (FID)
!
!	( n,n,n )	! Where n is a decimal number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_FID,
	((S_FID_P),	S_COMMENT),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_FID_P,
	('(')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		FDL$GL_FID1)
	);
$STATE	(,
	(',')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		FDL$GL_FID2)
	);
$STATE	(,
	(',')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		FDL$GL_FID3)
	);
$STATE	(,
	(')',		TPA$_EXIT)
	);

!	For UIC
!
!	[ nnn,nnn ]	! Where nnn is an octal number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_UIC,
	((S_UIC_P),	S_COMMENT),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_UIC_P,
	('[')
	);
$STATE	(,
	(TPA$_OCTAL,	,		,		,		FDL$GL_UIC_GROUP)
	);
$STATE	(,
	(',')
	);
$STATE	(,
	(TPA$_OCTAL,	,		,		,		FDL$GL_UIC_MEMBER)
	);
$STATE	(,
	(']',		TPA$_EXIT)
	);

!	For Protection Spec
!
!	(SYSTEM:RWED,OWNER:....)	or
!
!	(SYSTEM=RWED,OWNER=....)
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_PROT,
	((S_PROT_P),	S_COMMENT),
	(TPA$_LAMBDA,	S_QUAL_ERROR)
	);

$STATE	(S_PROT_P,
	('(')
	);
$STATE	(S_NEXT_PROT,
	('SYSTEM',	S_SYSPR),
	('OWNER',	S_OWNPR),
	('GROUP',	S_GROPR),
	('WORLD',	S_WORPR)
	);

$STATE	(S_SYSPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_SYSPRO,
	('R',		S_SYSPRO,	,		%X'0001',	FDL$GL_PROTECTION),
	('W',		S_SYSPRO,	,		%X'0002',	FDL$GL_PROTECTION),
	('E',		S_SYSPRO,	,		%X'0004',	FDL$GL_PROTECTION),
	('D',		S_SYSPRO,	,		%X'0008',	FDL$GL_PROTECTION),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_OWNPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_OWNPRO,
	('R',		S_OWNPRO,	,		%X'0010',	FDL$GL_PROTECTION),
	('W',		S_OWNPRO,	,		%X'0020',	FDL$GL_PROTECTION), 
	('E',		S_OWNPRO,	,		%X'0040',	FDL$GL_PROTECTION),
	('D',		S_OWNPRO,	,		%X'0080',	FDL$GL_PROTECTION),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_GROPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_GROPRO,
	('R',		S_GROPRO,	,		%X'0100',	FDL$GL_PROTECTION),
	('W',		S_GROPRO,	,		%X'0200',	FDL$GL_PROTECTION),
	('E',		S_GROPRO,	,		%X'0400',	FDL$GL_PROTECTION),
	('D',		S_GROPRO,	,		%X'0800',	FDL$GL_PROTECTION),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_WORPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_WORPRO,
	('R',		S_WORPRO,	,		%X'1000',	FDL$GL_PROTECTION),
	('W',		S_WORPRO,	,		%X'2000',	FDL$GL_PROTECTION),
	('E',		S_WORPRO,	,		%X'4000',	FDL$GL_PROTECTION),
	('D',		S_WORPRO,	,		%X'8000',	FDL$GL_PROTECTION),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_END_PRO,
	(',',		S_NEXT_PROT),
	(')',		TPA$_EXIT)
	);

!	For Comments
!
!	! text
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_COMMENT,
	('!',		TPA$_EXIT,	FDL$$SET_COMMENT,FDL$M_COMMENT,	FDL$AB_CTRL),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);


!	For Errors
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_QUAL_ERROR,
	(TPA$_STRING,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_UNQUAKW),
	(TPA$_EOS,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_NOQUAL),
	(TPA$_LAMBDA,	TPA$_EXIT,	FDL$$SYNTAX_ERROR,,		,		FDL$_SYNTAX)
	);

END ELUDOM
