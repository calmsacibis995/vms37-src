%TITLE	'FDL$PARSE'
%SBTTL	'FDL Parse Action Routines'
MODULE	FDLPARSE	( IDENT='V03-002',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:
!		RMS-32 FDL Utilities
!
! Environment:
!		VAX/VMS Operating System
!
! Abstract:
!		Routines which fill the rms control blocks
!		for the FDL parser
!
! Contents:
!		INIT_PARSE
!		LINE_PARSED
!		SET_AREA_P
!		SET_DATE_P
!		SET_FILE_P
!		SET_KEY_P
!		SET_RECORD_P
!		SET_PROT
!		ALLOCATE_XAB
!		FIND_ID
!		GET_VM
!
!--

!
! Author:	Keith B Thompson	Creation date:	July-1981
!
!
! Modified by:
!
!		V03-002	KBT0030		Keith Thompson		30-Mar-1982
!			Fix error processing of the date & time stuff
!
!		V03-001	KFH0001		Ken Henderson	29 March 1982
!			Fixed SET_AREA_P to set LBN
!			instead of VBN for volume placement
!
!****


PSECT
	OWN	= _FDL$OWN	(PIC),
	GLOBAL	= _FDL$GLOBAL	(PIC),
	PLIT	= _FDL$PLIT	(SHARE,PIC),
	CODE	= _FDL$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:STARLET';
REQUIRE	'SRC$:FDLUTIL';
REQUIRE	'SRC$:FDLPARDEF';

EXTERNAL ROUTINE
	LIB$GET_VM		: ADDRESSING_MODE( GENERAL ),
	LIB$FREE_VM		: ADDRESSING_MODE( GENERAL ),
	FDL$$RMS_ERROR		: NOVALUE;

DEFINE_ERROR_CODES;

FORWARD ROUTINE
	SET_AREA_P	: NOVALUE,
	SET_DATE_P	: NOVALUE,
	SET_FILE_P	: NOVALUE,
	SET_KEY_P	: NOVALUE,
	SET_RECORD_P	: NOVALUE,
	SET_PROT	: NOVALUE,
	ALLOCATE_XAB,
	FIND_ID		: NOVALUE,
	FDL$$GET_VM;

EXTERNAL
	FDL$AB_TPARSE_BLOCK	: BLOCK [ ,BYTE ],
	FDL$AB_CTRL		: BLOCK [ ,BYTE ],
	FDL$GL_PCALL,
	FDL$GL_LINECNT,
	FDL$GL_PRIMARY,
	FDL$GL_PRINUM,
	FDL$AB_PRICTRL,
	FDL$GL_SECONDARY,
	FDL$GL_SECNUM,
	FDL$GL_QUALIFIER,
	FDL$GL_NUMBER,
	FDL$GL_NUMTYPE,
	FDL$GL_SWITCH,
	FDL$GL_UIC_GROUP,
	FDL$GL_UIC_MEMBER,
	FDL$GL_PROTECTION,
	FDL$GL_FID1,
	FDL$GL_FID2,
	FDL$GL_FID3,
	FDL$AL_DATE_TIME	: VECTOR [,LONG ],
	FDL$AB_STRING		: DESC_BLK,
	
	FDL$AB_PARSED_FAB	: REF $FAB_DECL;		! Current FAB

LITERAL
	SPACE	= 32;

OWN
	TPA_BLOCK	: REF BLOCK [ ,BYTE ],
	HIGHEST_AREA_NO	: BYTE,
	CURRENT_XAB	: REF BLOCK [ ,BYTE ],
	AREA_BKZ	: REF VECTOR [ ,BYTE ],

	DATE_XAB	: REF $XABDAT_DECL,	! Date XAB
	REVISION_XAB	: REF $XABRDT_DECL,	! Revision Date and Time XAB
	PROTECTION_XAB	: REF $XABPRO_DECL;	! Protection XAB


%SBTTL	'INIT_PARSE'
GLOBAL ROUTINE	FDL$$INIT_PARSE : NOVALUE =
!++
!
! Functional Description:
!
!	Init variables and allocate a buffer for the area bucket sizes
!
! Calling Sequence:
!
!	fdl$$init_parse()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	lib$get_vm
!
! Side Effects:
!
!	Allocates a buffer pointed to by area_bkz
!
!--

    BEGIN

    LOCAL
	BYTES;

    ! Set the parse control bits
    !
    FDL$AB_CTRL [ FDL$V_STATUS ] = _SET;
    FDL$AB_CTRL [ FDL$V_INITIAL ] = _SET;

    ! Clear other CTRL bits (except PCALL or DCL)
    !
    FDL$AB_CTRL [ FDL$V_WARNING ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_PRIMARY ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_NEWPRI ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_SECONDARY ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_COMMENT ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_LINECMT ] = _CLEAR;

    ! Clear the pointers to xabs
    !
    DATE_XAB		= _CLEAR;
    REVISION_XAB	= _CLEAR;
    PROTECTION_XAB	= _CLEAR;

    ! Clear misc
    !
    FDL$GL_LINECNT	= 0;
    FDL$AB_PRICTRL	= _CLEAR;
    CURRENT_XAB		= _CLEAR;
    HIGHEST_AREA_NO	= 0;

    ! Allocate memory for the area bucket size array NOTE: Use lib$get_vm so
    ! we can return this in fdl$$finish_parse
    !
    BYTES = 256;

    LIB$GET_VM ( BYTES,AREA_BKZ );

    ! Zero the values
    !
    CH$FILL( 0,.BYTES,.AREA_BKZ );

    RETURN

    END;

%SBTTL	'FINISH_PARSE'
GLOBAL ROUTINE	FDL$$FINISH_PARSE =
!++
!
! Functional Description:
!
!	Ties up any loose ends and returns with the final status value
!
! Calling Sequence:
!
!	status = fdl$$finish_parse()
!
! Input Parameters:
!
!	none
!
! Implicit Inputs:
!
!	none
!
! Output Parameters:
!
!	none
!
! Implicit Outputs:
!
!	none
!
! Routine Value:
!
!	SS$_NORMAL	- If everything completed corectly
!	FDL$_WARNING	- If there were warnings duing processing
!	FDL$_FDLERROR	- If there were real problems
!
! Routines Called:
!
!	lib$free_vm
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	STATUS,
	XAB	: REF BLOCK [ ,BYTE ],
	BYTES;

    ! If successful then continue and return ok
    !
    IF .FDL$AB_CTRL [ FDL$V_STATUS ]
    THEN
	STATUS = SS$_NORMAL
    ELSE

	! If the problem was a warning then continue and return fdl$_warning
	! else return imeditaly
	!
	IF .FDL$AB_CTRL [ FDL$V_STATUS ] EQLU STS$K_WARNING
	THEN
	    STATUS = FDL$_WARNING
	ELSE
	    RETURN FDL$_FDLERROR;

    ! Travel through the xabs and fix up random things
    !
    XAB = .FDL$AB_PARSED_FAB [ FAB$L_XAB ];

    WHILE .XAB NEQU 0
    DO
	BEGIN

	! If this is a key xab fix the fill factors if neccary
	!
	IF .XAB [ XAB$B_COD ] EQLU XAB$C_KEY
	THEN
	    BEGIN

	    ! Make sure the area numbers are valid if not simply exit
	    ! RMS will catch it during the create
	    !
	    IF ( .XAB [ XAB$B_DAN ] GTRU .HIGHEST_AREA_NO ) OR
		( .XAB [ XAB$B_IAN ] GTRU .HIGHEST_AREA_NO )
	    THEN
		EXITLOOP;

	    ! Data level fill
	    !
	    XAB [ XAB$W_DFL ] = ( .AREA_BKZ [ .XAB [ XAB$B_DAN ] ] * BLOCK_SIZE *
						.XAB [ XAB$W_DFL ] ) / 100;

	    ! Index level fill
	    !
	    XAB [ XAB$W_IFL ] = ( .AREA_BKZ [ .XAB [ XAB$B_IAN ] ] * BLOCK_SIZE *
						.XAB [ XAB$W_IFL ] ) / 100
	    END;

	XAB = .XAB [ XAB$L_NXT ]

	END;

    ! Allocate memory for the area bucket size array
    !
    BYTES = 256;
    LIB$FREE_VM ( BYTES,AREA_BKZ );

    RETURN .STATUS

    END;

%SBTTL	'LINE_PARSED'
GLOBAL ROUTINE	FDL$$LINE_PARSED =
!++
!
! Functional Description:
!
!	Main parsing routine.  Called by the parse tables it in turn
!	calles the appropiate routines to parse the fdl line.
!
! Calling Sequence:
!
!	Called from parse tables
!
! Input Parameters:
!
!	fdl$gl_primary	- Primary code
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	Values returned by called routines
!
! Routines Called:
!
!	.fdl$gl_pcall
!	set_area_p
!	set_date_p
!	set_file_p
!	set_key_p
!	set_record_p
!
! Side Effects:
!	none
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL
	STATUS;

    STATUS = SS$_NORMAL;

    ! Stuff the address of the tparse block being used so that
    ! others may get at it
    !
    TPA_BLOCK = .TPARSE_BLOCK;

    ! If we have processed some really bad stuff then dont bother
    !
    IF .FDL$AB_CTRL [ FDL$V_STATUS ] EQLU STS$K_ERROR
    THEN
	RETURN .STATUS;

    ! If this is a editdef call then let them process the command
    !
    IF .FDL$AB_CTRL [ FDL$V_PCALL ]
    THEN
	STATUS = (.FDL$GL_PCALL)()
    ELSE

	! If this is a primary only or line comment call ignore it
	!
	IF NOT ( .FDL$AB_CTRL [ FDL$V_NEWPRI ] OR .FDL$AB_CTRL [ FDL$V_LINECMT ] )
	THEN
	    CASE .FDL$GL_PRIMARY FROM FDL$C_ANALA TO FDL$C_TITLE OF
			SET

			[ FDL$C_AREA ]	: SET_AREA_P();

			[ FDL$C_DATE ]	: SET_DATE_P();

			[ FDL$C_FILE ]	: SET_FILE_P();

			[ FDL$C_KEY ]	: SET_KEY_P();

			[ FDL$C_RECORD ]: SET_RECORD_P();

			[ INRANGE ]	: 0;	! Catch all for non usefull
						! primaries

			TES;

    ! Clear new primary in case it was set
    !
    FDL$AB_CTRL [ FDL$V_NEWPRI ] = _CLEAR;

    RETURN .STATUS

    END;

%SBTTL 'SET_AREA_P'
ROUTINE	SET_AREA_P : NOVALUE =
!++
!
! Functional Description:
!
!	Fill in the blanks for the allocation xab
!
! Calling Sequence:
!
!	set_area_p()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	fdl$secondary	- Secondary code
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	allocate_xab
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! To aviod some duplication of code ....
    ! Find out if there is a current xab  if not then get one
    ! OR If the current xab is not the same type or number of what we want
    ! then get a new one
    !
    IF ( IF .CURRENT_XAB EQLU 0
	 THEN 1
	 ELSE
	 IF ( .CURRENT_XAB [ XAB$B_COD ] NEQ XAB$C_ALL ) OR
	    ( .CURRENT_XAB [ XAB$B_AID ] NEQ .FDL$GL_PRINUM )
	 THEN 1
	 ELSE 0 )
    THEN
	BEGIN

	! Allocate memory for the new xab
	!
	ALLOCATE_XAB ( XAB$C_ALL );

	! Set the area number in the xab
	!
	CURRENT_XAB [ XAB$B_AID ] = .FDL$GL_PRINUM;

	! If this is area 0 then copy the allocation etc. from the fab (this
	! is because using areas overide the fab allocation and this
	! makes it look like it doesen't)
	!
	IF .CURRENT_XAB [ XAB$B_AID ] EQLU 0
	THEN
	    BEGIN

	    ! Copy Allocation, Bucket size and Extention
	    !
	    CURRENT_XAB [ XAB$L_ALQ ] = .FDL$AB_PARSED_FAB [ FAB$L_ALQ ];
	    CURRENT_XAB [ XAB$B_BKZ ] = .FDL$AB_PARSED_FAB [ FAB$B_BKS ];
	    CURRENT_XAB [ XAB$W_DEQ ] = .FDL$AB_PARSED_FAB [ FAB$W_DEQ ];
	    CURRENT_XAB [ XAB$L_ALQ ] = .FDL$AB_PARSED_FAB [ FAB$L_ALQ ];
	    AREA_BKZ [ 0 ] = .FDL$AB_PARSED_FAB [ FAB$B_BKS ];

	    ! Also get the duplicated contigous options:
	    !
	    ! Contigous best try
	    !
	    IF .FDL$AB_PARSED_FAB [ FAB$V_CBT ]
	    THEN
		CURRENT_XAB [ XAB$V_CBT ] = _SET;

	    ! Contigous
	    !
	    IF .FDL$AB_PARSED_FAB [ FAB$V_CTG ]
	    THEN
		CURRENT_XAB [ XAB$V_CTG ] = _SET

	    END
	ELSE

	    ! Count this area
	    !
	    HIGHEST_AREA_NO = .HIGHEST_AREA_NO + 1

	END;

    ! Set the fields in the area xab
    !
    CASE .FDL$GL_SECONDARY FROM FDL$C_ALLOC TO FDL$C_VOLU OF
    SET
	[ FDL$C_ALLOC ]	: CURRENT_XAB [ XAB$L_ALQ ] = .FDL$GL_NUMBER;

	[ FDL$C_BTCONT ]: CURRENT_XAB [ XAB$V_CBT ] = .FDL$GL_SWITCH;

	[ FDL$C_BKT ]	: BEGIN

			  CURRENT_XAB [ XAB$B_BKZ ] = .FDL$GL_NUMBER;

			  ! Fill in the table for figuring fill numbers latter
			  !
			  AREA_BKZ [ .FDL$GL_PRINUM ] = .FDL$GL_NUMBER

			  END;

	[ FDL$C_CONTG ]	: CURRENT_XAB [ XAB$V_CTG ] = .FDL$GL_SWITCH;

	[ FDL$C_EXACT ]	: CURRENT_XAB [ XAB$V_HRD ] = .FDL$GL_SWITCH;

	[ FDL$C_EXTND ]	: CURRENT_XAB [ XAB$W_DEQ ] = .FDL$GL_NUMBER;

	[ FDL$C_POSI ]	: CASE .FDL$GL_QUALIFIER FROM
						FDL$C_ANYPOS TO FDL$C_VIRPOS OF
		  SET
		      [ FDL$C_ANYPOS ] : CURRENT_XAB [ XAB$V_ONC ] = _SET;

		      [ FDL$C_CLUSPOS ]: 0;

		      [ FDL$C_CYLPOS ] : BEGIN
					 CURRENT_XAB [ XAB$B_ALN ] = XAB$C_CYL;
					 CURRENT_XAB [ XAB$L_LOC ] = .FDL$GL_NUMBER
					 END;

		      [ FDL$C_FIDPOS ] : BEGIN
					 CURRENT_XAB [ XAB$W_RFI0 ] = .FDL$GL_FID1;
					 CURRENT_XAB [ XAB$W_RFI2 ] = .FDL$GL_FID2;
					 CURRENT_XAB [ XAB$W_RFI4 ] = .FDL$GL_FID3
					 END;

		      [ FDL$C_FNMPOS ] : BEGIN
					 FIND_ID();
					 CURRENT_XAB [ XAB$W_RFI0 ] = .FDL$GL_FID1;
					 CURRENT_XAB [ XAB$W_RFI2 ] = .FDL$GL_FID2;
					 CURRENT_XAB [ XAB$W_RFI4 ] = .FDL$GL_FID3
					 END;

		      [ FDL$C_LOGPOS ] : BEGIN
					 CURRENT_XAB [ XAB$B_ALN ] = XAB$C_LBN;
					 CURRENT_XAB [ XAB$L_LOC ] = .FDL$GL_NUMBER
					 END;

		      [ FDL$C_NOPOS ]  : CURRENT_XAB [ XAB$B_ALN ] = _CLEAR;

		      [ FDL$C_VIRPOS ] : BEGIN
					 CURRENT_XAB [ XAB$B_ALN ] = XAB$C_VBN;
					 CURRENT_XAB [ XAB$L_LOC ] = .FDL$GL_NUMBER
					 END;
		  TES;

	[ FDL$C_VOLU ]	: BEGIN
			  CURRENT_XAB [ XAB$W_VOL ] = .FDL$GL_NUMBER;

			  ! If the guy didn't give any placement do it for him
			  !
			  IF .CURRENT_XAB [ XAB$B_ALN ] EQLU _CLEAR
			  THEN
			      CURRENT_XAB [ XAB$B_ALN ] = XAB$C_LBN;

			  END;

    TES;

    RETURN

    END;

%SBTTL 'SET_DATE_P'
ROUTINE	SET_DATE_P : NOVALUE =
!++
!
! Functional Description:
!
!	Fill in the blanks for the revision date and time xab
!
! Calling Sequence:
!
!	set_date_p()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	fdl$secondary	- Secondary code
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	sys$bintim
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! See which xab we need
    !
    IF .FDL$GL_SECONDARY EQLU FDL$C_REV
    THEN
	BEGIN

	! If the revision xab has not been connected then connect it
	!
	IF .REVISION_XAB EQLU 0
	THEN

	    ! Allocate the xab an enter it into the chain
	    !
	    REVISION_XAB = ALLOCATE_XAB ( XAB$C_RDT )

	END
    ELSE

	! If the date xab has not been allocated then get one
	!
	IF .DATE_XAB EQLU 0
	THEN

	    ! Allocate the xab an enter it into the chain
	    !
	    DATE_XAB = ALLOCATE_XAB ( XAB$C_DAT );

    ! Fill in the correct field
    !
    CASE .FDL$GL_SECONDARY FROM FDL$C_BACKUP TO FDL$C_REV OF
    SET
	[ FDL$C_BACKUP ]: BEGIN
			  DATE_XAB [ XAB$L_BDT0 ] = .FDL$AL_DATE_TIME [ 0 ];
			  DATE_XAB [ XAB$L_BDT4 ] = .FDL$AL_DATE_TIME [ 1 ]
			  END;

	[ FDL$C_CREAT ]	: BEGIN
			  DATE_XAB [ XAB$L_CDT0 ] = .FDL$AL_DATE_TIME [ 0 ];
			  DATE_XAB [ XAB$L_CDT4 ] = .FDL$AL_DATE_TIME [ 1 ]
			  END;

	[ FDL$C_EXPR ]	: BEGIN
			  DATE_XAB [ XAB$L_EDT0 ] = .FDL$AL_DATE_TIME [ 0 ];
			  DATE_XAB [ XAB$L_EDT4 ] = .FDL$AL_DATE_TIME [ 1 ]
			  END;

	[ FDL$C_REV ]	: BEGIN
			  REVISION_XAB [ XAB$L_RDT0 ] = .FDL$AL_DATE_TIME [ 0 ];
			  REVISION_XAB [ XAB$L_RDT4 ] = .FDL$AL_DATE_TIME [ 1 ]
			  END;

    TES;

    RETURN

    END;

%SBTTL	'SET_FILE_P'
ROUTINE	SET_FILE_P : NOVALUE =
!++
!
! Functional Description:
!
!	Fill in the blanks for the fab
!
! Calling Sequence:
!
!	set_file_p()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	fdl$secondary	- Secondary code
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	SS$_NORMAL or error from set_prot
!
! Routines Called:
!
!	fdl$$get_vm
!	set_prot
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Set the fab according to the secondary parsed
    !
    CASE .FDL$GL_SECONDARY FROM FDL$C_ALL TO FDL$C_WRITEC OF
    SET
	[ FDL$C_ALL ]	: FDL$AB_PARSED_FAB [ FAB$L_ALQ ] = .FDL$GL_NUMBER;

	[ FDL$C_BKTUP ]	: 0;

	[ FDL$C_BTC ]	: FDL$AB_PARSED_FAB [ FAB$V_CBT ] = .FDL$GL_SWITCH;

	[ FDL$C_BKTSIZ ]: BEGIN

			  FDL$AB_PARSED_FAB [ FAB$B_BKS ] = .FDL$GL_NUMBER;

			  ! Stuff the bucket size into the array for latter
			  !
			  AREA_BKZ [ 0 ] = .FDL$GL_NUMBER

			  END;

	[ FDL$C_CLUSIZ ]: 0;

	[ FDL$C_CONT ]	: FDL$AB_PARSED_FAB [ FAB$V_CTG ] = .FDL$GL_SWITCH;

	[ FDL$C_DFNAM ]	: BEGIN

			  ! Allocate a buffer for the string and copy it into it
			  !
			  FDL$AB_PARSED_FAB [ FAB$L_DNA ] =
				FDL$$GET_VM( .FDL$AB_STRING [ DSC$W_LENGTH ] );

			  CH$MOVE( .FDL$AB_STRING [ DSC$W_LENGTH ],
				   .FDL$AB_STRING [ DSC$A_POINTER ],
				   .FDL$AB_PARSED_FAB [ FAB$L_DNA ] );

			  FDL$AB_PARSED_FAB [ FAB$B_DNS ] =
						.FDL$AB_STRING [ DSC$W_LENGTH ]
			  END;

	[ FDL$C_DOC ]	: FDL$AB_PARSED_FAB [ FAB$V_DLT ] = .FDL$GL_SWITCH;

	[ FDL$C_DIR ] 	: FDL$AB_PARSED_FAB [ FAB$V_TMP ] = .FDL$GL_SWITCH;

	[ FDL$C_EODEL ]	: 0; ! FDL$AB_PARSED_FAB [ FAB$V_TMD ] = .FDL$GL_SWITCH;

	[ FDL$C_EXTEN ]	: FDL$AB_PARSED_FAB [ FAB$W_DEQ ] = .FDL$GL_NUMBER;

	[ FDL$C_GBC ]	: FDL$AB_PARSED_FAB [ FAB$W_GBC ] = .FDL$GL_NUMBER;

	[ FDL$C_MTBLSIZ]: FDL$AB_PARSED_FAB [ FAB$W_BLS ] = .FDL$GL_NUMBER;

	[ FDL$C_MTCP ]	: FDL$AB_PARSED_FAB [ FAB$V_POS ] = .FDL$GL_SWITCH;

	[ FDL$C_MTPRO ]	: SET_PROT();

	[ FDL$C_MTREW ]	: FDL$AB_PARSED_FAB [ FAB$V_RWO ] = .FDL$GL_SWITCH;

	[ FDL$C_MAXRECN]: FDL$AB_PARSED_FAB [ FAB$L_MRN ] = .FDL$GL_NUMBER;

	[ FDL$C_MAXVER]	: FDL$AB_PARSED_FAB [ FAB$V_MXV ] = .FDL$GL_SWITCH;

	[ FDL$C_NAME ]	: BEGIN

			  ! Allocate a buffer for the string and copy it
			  !
			  FDL$AB_PARSED_FAB [ FAB$L_FNA ] =
				FDL$$GET_VM( .FDL$AB_STRING [ DSC$W_LENGTH ] );

			  CH$MOVE( .FDL$AB_STRING [ DSC$W_LENGTH ],
				   .FDL$AB_STRING [ DSC$A_POINTER ],
				   .FDL$AB_PARSED_FAB [ FAB$L_FNA ] );

			  FDL$AB_PARSED_FAB [ FAB$B_FNS ] =
						.FDL$AB_STRING [ DSC$W_LENGTH ]
			  END;

	[ FDL$C_ORG ]	: FDL$AB_PARSED_FAB [ FAB$B_ORG ] = .FDL$GL_QUALIFIER;

	[ FDL$C_OWNER ]	: SET_PROT();

	[ FDL$C_POC ]	: FDL$AB_PARSED_FAB [ FAB$V_SPL ] = .FDL$GL_SWITCH;

	[ FDL$C_PROT ]	: SET_PROT();

	[ FDL$C_READC ]	: FDL$AB_PARSED_FAB [ FAB$V_RCK ] = .FDL$GL_SWITCH;

	[ FDL$C_REVISN ]: BEGIN

			  ! If the revision xab has not been connected then connect it
			  !
			  IF .REVISION_XAB EQLU 0
			  THEN

			      ! Allocate the xab an enter it into the chain
			      !
			      REVISION_XAB = ALLOCATE_XAB ( XAB$C_RDT );

			  REVISION_XAB [ XAB$W_RVN ] = .FDL$GL_NUMBER

			  END;

	[ FDL$C_SOC ] 	: FDL$AB_PARSED_FAB [ FAB$V_SCF ] = .FDL$GL_SWITCH;

	[ FDL$C_SUPER ]	: FDL$AB_PARSED_FAB [ FAB$V_SUP ] = .FDL$GL_SWITCH;

	[ FDL$C_TOC ]	: FDL$AB_PARSED_FAB [ FAB$V_TEF ] = .FDL$GL_SWITCH;

	[ FDL$C_WRITEC ]: FDL$AB_PARSED_FAB [ FAB$V_WCK ] = .FDL$GL_SWITCH;

    TES;

    RETURN

    END;

%SBTTL	'SET_KEY_P'
ROUTINE	SET_KEY_P : NOVALUE =
!++
!
! Functional Description:
!
!	Fill in the blanks for the key xab
!
! Calling Sequence:
!
!	set_key_p()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	fdl$secondary	- Secondary code
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	allocate_xab
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Find out if there is a current xab  if not then get one
    !
    IF .CURRENT_XAB EQL 0
    THEN
	BEGIN

	ALLOCATE_XAB ( XAB$C_KEY );

	CURRENT_XAB [ XAB$B_REF ] = .FDL$GL_PRINUM

	END
    ELSE

	! If the current xab is not the same type or number of what we want
	! then get a new one
	!
	IF ( .CURRENT_XAB [ XAB$B_COD ] NEQ XAB$C_KEY ) OR
	   ( .CURRENT_XAB [ XAB$B_REF ] NEQ .FDL$GL_PRINUM )
	THEN
	    BEGIN

	    ALLOCATE_XAB ( XAB$C_KEY );

	    CURRENT_XAB [ XAB$B_REF ] = .FDL$GL_PRINUM

	    END;

    ! Set the key xab fields
    !
    CASE .FDL$GL_SECONDARY FROM FDL$C_CHANGE TO FDL$C_SEGTYP OF
    SET
	[ FDL$C_CHANGE ]: CURRENT_XAB [ XAB$V_CHG ] = .FDL$GL_SWITCH;

	[ FDL$C_DAREA ]	: CURRENT_XAB [ XAB$B_DAN ] = .FDL$GL_NUMBER;

	[ FDL$C_DFILL ]	: CURRENT_XAB [ XAB$W_DFL ] = .FDL$GL_NUMBER;

	[ FDL$C_DATKC ]	: CURRENT_XAB [ XAB$V_KEY_NCMPR ] = NOT .FDL$GL_SWITCH;

	[ FDL$C_DATRC ]	: CURRENT_XAB [ XAB$V_DAT_NCMPR ] = NOT .FDL$GL_SWITCH;

	[ FDL$C_DUPS ]	: CURRENT_XAB [ XAB$V_DUP ] = .FDL$GL_SWITCH;

	[ FDL$C_IAREA ]	: CURRENT_XAB [ XAB$B_IAN ] = .FDL$GL_NUMBER;

	[ FDL$C_IDXC ]	: CURRENT_XAB [ XAB$V_IDX_NCMPR ] = NOT .FDL$GL_SWITCH;

	[ FDL$C_IFILL ]	: CURRENT_XAB [ XAB$W_IFL ] = .FDL$GL_NUMBER;

	[ FDL$C_KYNAME ]: BEGIN
			  CURRENT_XAB [ XAB$L_KNM ] = .CURRENT_XAB + XAB$C_KEYLEN;
			  CH$COPY( .FDL$AB_STRING [ DSC$W_LENGTH ],
				   .FDL$AB_STRING [ DSC$A_POINTER ],
				   SPACE,32,
				   .CURRENT_XAB [ XAB$L_KNM ] )
			  END;

	[ FDL$C_LAREA ]	: CURRENT_XAB [ XAB$B_LAN ] = .FDL$GL_NUMBER;

	[ FDL$C_NULL ]	: CURRENT_XAB [ XAB$V_NUL ] = .FDL$GL_SWITCH;

	[ FDL$C_NULLVAL]: CURRENT_XAB [ XAB$B_NUL ] = .FDL$GL_QUALIFIER;

	[ FDL$C_PROL ]	: IF .CURRENT_XAB [ XAB$B_REF ] EQLU 0
			  THEN
			      CURRENT_XAB [ XAB$B_PROLOG ] = .FDL$GL_NUMBER;

	[ FDL$C_SEGLEN ]: CASE .FDL$GL_SECNUM FROM 0 TO 7 OF
			  SET
			      [ 0 ] : CURRENT_XAB [ XAB$B_SIZ0 ] = .FDL$GL_NUMBER;
			      [ 1 ] : CURRENT_XAB [ XAB$B_SIZ1 ] = .FDL$GL_NUMBER;
			      [ 2 ] : CURRENT_XAB [ XAB$B_SIZ2 ] = .FDL$GL_NUMBER;
			      [ 3 ] : CURRENT_XAB [ XAB$B_SIZ3 ] = .FDL$GL_NUMBER;
			      [ 4 ] : CURRENT_XAB [ XAB$B_SIZ4 ] = .FDL$GL_NUMBER;
			      [ 5 ] : CURRENT_XAB [ XAB$B_SIZ5 ] = .FDL$GL_NUMBER;
			      [ 6 ] : CURRENT_XAB [ XAB$B_SIZ6 ] = .FDL$GL_NUMBER;
			      [ 7 ] : CURRENT_XAB [ XAB$B_SIZ7 ] = .FDL$GL_NUMBER;
			  TES;

	[ FDL$C_SEGPOS ]: CASE .FDL$GL_SECNUM FROM 0 TO 7 OF
			  SET
			      [ 0 ] : CURRENT_XAB [ XAB$W_POS0 ] = .FDL$GL_NUMBER;
			      [ 1 ] : CURRENT_XAB [ XAB$W_POS1 ] = .FDL$GL_NUMBER;
			      [ 2 ] : CURRENT_XAB [ XAB$W_POS2 ] = .FDL$GL_NUMBER;
			      [ 3 ] : CURRENT_XAB [ XAB$W_POS3 ] = .FDL$GL_NUMBER;
			      [ 4 ] : CURRENT_XAB [ XAB$W_POS4 ] = .FDL$GL_NUMBER;
			      [ 5 ] : CURRENT_XAB [ XAB$W_POS5 ] = .FDL$GL_NUMBER;
			      [ 6 ] : CURRENT_XAB [ XAB$W_POS6 ] = .FDL$GL_NUMBER;
			      [ 7 ] : CURRENT_XAB [ XAB$W_POS7 ] = .FDL$GL_NUMBER;
			  TES;

	[ FDL$C_SEGTYP ]: CASE .FDL$GL_SECNUM FROM 0 TO 7 OF
			  SET
			      [ 0 ] : BEGIN
				      CURRENT_XAB [ XAB$B_DTP ] = .FDL$GL_QUALIFIER;
				      CURRENT_XAB [ XAB$B_TYP0 ] = .FDL$GL_QUALIFIER
				      END;
			      [ 1 ] : CURRENT_XAB [ XAB$B_TYP1 ] = .FDL$GL_QUALIFIER;
			      [ 2 ] : CURRENT_XAB [ XAB$B_TYP2 ] = .FDL$GL_QUALIFIER;
			      [ 3 ] : CURRENT_XAB [ XAB$B_TYP3 ] = .FDL$GL_QUALIFIER;
			      [ 4 ] : CURRENT_XAB [ XAB$B_TYP4 ] = .FDL$GL_QUALIFIER;
			      [ 5 ] : CURRENT_XAB [ XAB$B_TYP5 ] = .FDL$GL_QUALIFIER;
			      [ 6 ] : CURRENT_XAB [ XAB$B_TYP6 ] = .FDL$GL_QUALIFIER;
			      [ 7 ] : CURRENT_XAB [ XAB$B_TYP7 ] = .FDL$GL_QUALIFIER;
			  TES;

    TES;

    RETURN

    END;

%SBTTL	'SET_RECORD_P'
ROUTINE	SET_RECORD_P : NOVALUE =
!++
!
! Functional Description:
!
!	Fill in the blanks for the fab fields concering the record
!
! Calling Sequence:
!
!	set_record_p()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	fdl$secondary	- Secondary code
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Set em up
    !
    CASE .FDL$GL_SECONDARY FROM FDL$C_BLKSPN TO FDL$C_SIZE OF
    SET
	[ FDL$C_BLKSPN ]: FDL$AB_PARSED_FAB [ FAB$V_BLK ] = NOT .FDL$GL_SWITCH;

	[ FDL$C_CARCTRL]: CASE .FDL$GL_QUALIFIER FROM FDL$C_NONE TO FDL$C_PRINT OF
		    SET
			! We must clear the other flags while setting the one
			! we want (without clearing BLK if set)
			!
			[ FDL$C_NONE ]  : FDL$AB_PARSED_FAB [ FAB$B_RAT ] =
					  .FDL$AB_PARSED_FAB [ FAB$B_RAT ] AND
							FAB$M_BLK;
			[ FDL$C_CR ]    : FDL$AB_PARSED_FAB [ FAB$B_RAT ] =
					  ( .FDL$AB_PARSED_FAB [ FAB$B_RAT ] AND
						FAB$M_BLK ) OR FAB$M_CR;
			[ FDL$C_FTN ]   : FDL$AB_PARSED_FAB [ FAB$B_RAT ] =
					  ( .FDL$AB_PARSED_FAB [ FAB$B_RAT ] AND
						FAB$M_BLK ) OR FAB$M_FTN;
			[ FDL$C_PRINT ] : FDL$AB_PARSED_FAB [ FAB$B_RAT ] =
					  ( .FDL$AB_PARSED_FAB [ FAB$B_RAT ] AND
						FAB$M_BLK ) OR FAB$M_PRN;
		    TES;

	[ FDL$C_VFCSIZ ]: FDL$AB_PARSED_FAB [ FAB$B_FSZ ] = .FDL$GL_NUMBER;

	[ FDL$C_FMT ]	: FDL$AB_PARSED_FAB [ FAB$B_RFM ] = .FDL$GL_QUALIFIER;

	[ FDL$C_SIZE ]	: FDL$AB_PARSED_FAB [ FAB$W_MRS ] = .FDL$GL_NUMBER;
    TES;

    RETURN

    END;

%SBTTL	'SET_PROT'
ROUTINE	SET_PROT : NOVALUE =
!++
!
! Functional Description:
!
!	Fill in the blanks for the protection xab
!
! Calling Sequence:
!
!	set_prot()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	fdl$secondary	- Secondary code
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! See if the protection xab has been allocated yet
    !
    IF .PROTECTION_XAB EQLU 0
    THEN

	! Allocate the xab an enter it into the chain
	!
	PROTECTION_XAB = ALLOCATE_XAB ( XAB$C_PRO );

    ! Set the fields according to the secondary
    !
    SELECTONEU .FDL$GL_SECONDARY OF
    SET
	[ FDL$C_MTPRO ]	: PROTECTION_XAB [ XAB$B_MTACC ] = .FDL$GL_QUALIFIER;

	[ FDL$C_PROT ]	: PROTECTION_XAB [ XAB$W_PRO ] = NOT .FDL$GL_PROTECTION;

	[ FDL$C_OWNER ]	: BEGIN
			  PROTECTION_XAB [ XAB$W_GRP ] = .FDL$GL_UIC_GROUP;
			  PROTECTION_XAB [ XAB$W_MBM ] = .FDL$GL_UIC_MEMBER
			  END;
    TES;

    RETURN

    END;

%SBTTL	'ALLOCATE_XAB'
ROUTINE	ALLOCATE_XAB ( XAB_TYPE ) =
!++
!
! Functional Description:
!
!	Allocates an RMS extended attribute block from virtual memory
!
! Calling Sequence:
!
!	allocate_xab( xab_type )
!
! Input Parameters:
!
!	xab_type	- The RMS code for the type of xab wanted ie. XAB$C_xab
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	Pointer to the new xab (also pointed to by current xab)
!
! Routines Called:
!
!	fdl$$get_vm
!
! Side Effects:
!
!	current_xab pointes to the new xab
!
!--

    BEGIN

    LOCAL
	XAB_LEN,
	NEW_XAB;

    ! Find the size of the type of xab we want. NOTE: key xab has an extra
    ! 32 bytes for the key name buffer
    !
    XAB_LEN = ( SELECTONEU .XAB_TYPE OF
		SET
		[ XAB$C_ALL ] : XAB$C_ALLLEN;
		[ XAB$C_DAT ] : XAB$C_DATLEN;
		[ XAB$C_KEY ] : XAB$C_KEYLEN + 32;
		[ XAB$C_PRO ] : XAB$C_PROLEN;
		[ XAB$C_RDT ] : XAB$C_RDTLEN;
		TES );

    ! Allocate a buffer for the new xab
    !
    NEW_XAB = FDL$$GET_VM( .XAB_LEN );

    ! If this is the first xab link it to the fab else just connect it to
    ! the last xab in the chain
    !
    IF .FDL$AB_PARSED_FAB [ FAB$L_XAB ] EQL 0
    THEN
	FDL$AB_PARSED_FAB [ FAB$L_XAB ] = .NEW_XAB
    ELSE
	CURRENT_XAB [ XAB$L_NXT ] = .NEW_XAB;

    ! Account for the key name buffer
    !
    IF .XAB_TYPE EQLU XAB$C_KEY
    THEN
	XAB_LEN = .XAB_LEN - 32;

    ! Make this xab the current one
    !
    CURRENT_XAB = .NEW_XAB;

    ! Init. some stuff in it
    !
    CURRENT_XAB [ XAB$B_COD ] = .XAB_TYPE;
    CURRENT_XAB [ XAB$B_BLN ] = .XAB_LEN;
    CURRENT_XAB [ XAB$L_NXT ] = 0;

    RETURN .CURRENT_XAB

    END;

%SBTTL	'FIND_ID'
ROUTINE FIND_ID : NOVALUE =
!++
!
! Functional Description:
!
!	Finds a file ID of a file specified by the FDL$STRING descriptor
!
! Calling Sequence:
!
!	find_id()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	fdl$$get_vm
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	FAB	: REF BLOCK [ ,BYTE ],
	NAM	: REF BLOCK [ ,BYTE ];

    ! Get the address space for the FAB and the Name block
    !
    FAB = FDL$$GET_VM( FAB$K_BLN );

    NAM = FDL$$GET_VM( NAM$K_BLN );

    ! Init the blocks and fill in all of the good stuff
    !
    $FAB_INIT ( FAB = .FAB,
		FNA = .FDL$AB_STRING [ DSC$A_POINTER ],
		FNS = .FDL$AB_STRING [ DSC$W_LENGTH ],
		NAM = .NAM );

    $NAM_INIT ( NAM = .NAM );

    ! Parse and search for the file
    !
    IF $PARSE( FAB=.FAB )
    THEN

	IF $SEARCH( FAB=.FAB )
	THEN
	    BEGIN

	    ! Get the old file ID
	    !
	    FDL$GL_FID1 = .NAM [ NAM$W_FID_NUM ];
	    FDL$GL_FID2 = .NAM [ NAM$W_FID_SEQ ];
	    FDL$GL_FID3 = .NAM [ NAM$W_FID_RVN ]

	    END
	ELSE
	    SIGNAL( FDL$_RFLOC )
    ELSE
	SIGNAL( FDL$_RFLOC );

    RETURN

    END;

%SBTTL	'GET_VM'
GLOBAL ROUTINE FDL$$GET_VM( BYTES ) =
!++
!
! Functional Description:
!
!	Allocate virtural memory and zeros it
!
! Calling Sequence:
!
!	fdl$$get_vm( bytes )
!
! Input Parameters:
!
!	bytes	- number of bytes to allocate
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	address of the start of the buffer
!
! Routine Called:
!
!	lib$get_vm
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	VM_POINTER;

    ! If we don't succede signal an error and stop
    !
    IF NOT LIB$GET_VM ( BYTES,VM_POINTER )
    THEN
	SIGNAL_STOP ( FDL$_INSVIRMEM );

    RETURN .VM_POINTER

    END;

END ELUDOM
