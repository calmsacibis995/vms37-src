%TITLE	'VAX-11 FDL Utilities'
MODULE	FDLCALL	( IDENT='V03-001'
		) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 FDL Utilities
!
! Abstract:
!		Callable routines
!
! Contents:
!		FDL$CREATE
!		PARSE
!		HANDLER
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation Date	June-81
!
!
! Modified by:
!
!		V03-001	KFH0001		Ken Henderson		26 March 1982
!			Added calls to LIB$ANALYZE_SDESC to generalize string
!			handling; and added call to LIB$SCOPY_DXDX to move
!			the result string to the output also add buffer for
!			upcasing to.
!
!****


PSECT
	OWN	= _FDL$OWN	(PIC),
	GLOBAL	= _FDL$GLOBAL	(PIC),
	PLIT	= _FDL$PLIT	(SHARE,PIC),
	CODE	= _FDL$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:STARLET';
REQUIRE	'SRC$:FDLUTIL';
REQUIRE	'SRC$:FDLPARDEF';

EXTERNAL ROUTINE
	LIB$ANALYZE_SDESC	: ADDRESSING_MODE ( GENERAL ),
	LIB$SCOPY_DXDX		: ADDRESSING_MODE ( GENERAL ),
	LIB$ESTABLISH		: ADDRESSING_MODE ( GENERAL ),
	LIB$SIG_TO_RET		: ADDRESSING_MODE ( GENERAL ),
	LIB$GET_VM		: ADDRESSING_MODE ( GENERAL ),
	LIB$FREE_VM		: ADDRESSING_MODE ( GENERAL ),
	LIB$TPARSE		: ADDRESSING_MODE ( GENERAL ),
	FDL$$GET_VM,
	FDL$$INIT_PARSE		: NOVALUE,
	FDL$$FINISH_PARSE,
	FDL$$RMS_OPEN_ERROR	: NOVALUE;

FORWARD ROUTINE
	FDL$$PARSE,
	HANDLER;

EXTERNAL
	FDL$AB_CTRL		: BLOCK [ ,BYTE ],
	FDL$AB_LINE		: DESC_BLK,
	FDL$AB_UPCASED		: DESC_BLK,
	FDL$AB_KEY_TABLE,
	FDL$AB_STATE_TABLE,
	FDL$AB_TPARSE_BLOCK	: BLOCK [ ,BYTE ];

DEFINE_ERROR_CODES;

GLOBAL
	FDL$AB_PARSED_FAB	: REF BLOCK [ ,BYTE ];	! Parsed fab is a
							! REF to the real one

GLOBAL	! This has to be global so GET_LINE can get at it

	FDL$AB_FDL_RAB	: $RAB_DECL;


%SBTTL	'FDL$CREATE'
GLOBAL ROUTINE FDL$CREATE  =
!++
!
! Functional Description:
!
!	User entry point to the fdl parsing utility.  This routine parses
!	a fdl file and creates a file using the definitions parsed
!
! Calling Sequence:
!
!	fdl$create( fdl_desc[,file_name][,default_name][,result_name][,fid_block] )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    OWN
	CREATE_DESC	: DESC_BLK;

    LOCAL
	COUNT,
	CREATE_FAB	: REF BLOCK [ ,BYTE ],
	NAME_BLOCK	: REF BLOCK [ ,BYTE ],
	STATUS		: LONG;

    BIND
	STATUS_CODE	= STATUS : BLOCK [ 4,BYTE ];

    ! Check the validity of the call
    !
    ! Get the number of arguments
    !
    COUNT = ACTUALCOUNT();

    ! Check if the number is legal ie. 1 thru 5
    !
    IF ( .COUNT LSS 1 ) OR ( .COUNT GTR 5 )
    THEN
	RETURN FDL$_ILL_ARG;

    ! If not from a DCL utility then return all errors signaled
    !
    IF NOT .FDL$AB_CTRL [ FDL$V_DCL ]
    THEN
	LIB$ESTABLISH ( LIB$SIG_TO_RET );

    ! Clear the fab pointer so we get a new one (see fdl$parse)
    !
    CREATE_FAB = 0;

    BEGIN

    LOCAL FDL_DESC_PTR;

    ! The first argument should be the FDL file spec.
    !
    FDL_DESC_PTR = ACTUALPARAMETER(1);

    ! Parse the FDL file
    !
    IF NOT ( STATUS = FDL$$PARSE( .FDL_DESC_PTR,CREATE_FAB ) )
    THEN

	! If there was an error just signal it and try to create the file
	! else return (error and severe)
	!
	IF .STATUS_CODE [ STS$V_SEVERITY ] EQLU STS$K_WARNING
	THEN
	    SIGNAL( .STATUS )
	ELSE
	    RETURN .STATUS

    END;

    ! See if the a second parameter was given. If so the this is the name
    ! to be used for the created file.
    !
    IF .COUNT GTR 1
    THEN
	BEGIN

	LOCAL	NAME_DESC : REF DESC_BLK;

	NAME_DESC = ACTUALPARAMETER(2);

	IF .NAME_DESC NEQ 0
	THEN
	    BEGIN

	    IF ..NAME_DESC NEQ 0
	    THEN
		BEGIN

		LOCAL
			LENGTH	: WORD,
			ADDR	: LONG;

		! Allow for wierd strings (like VARYING or byte-arrays)
		!
		RET_ON_ERROR( LIB$ANALYZE_SDESC( .NAME_DESC,LENGTH,ADDR ) );

		! If a file name was given to replace any given in the FDL spec.
		!
		CREATE_FAB [ FAB$B_FNS ] = .LENGTH;
		CREATE_FAB [ FAB$L_FNA ] = .ADDR;

		END;
	    END;
	END;

    ! See if the 3rd parameter was given. If so this is the default name
    ! to be used for the created file.
    !
    IF .COUNT GTR 2
    THEN
	BEGIN

	LOCAL
	    DEFAULT_DESC : REF DESC_BLK;

	DEFAULT_DESC = ACTUALPARAMETER(3);

	IF .DEFAULT_DESC NEQ 0
	THEN
	    BEGIN

	    IF ..DEFAULT_DESC NEQ 0
	    THEN
		BEGIN

		LOCAL
			LENGTH	: WORD,
			ADDR	: LONG;

		! Allow for wierd strings (like VARYING or byte-arrays)
		!
		RET_ON_ERROR( LIB$ANALYZE_SDESC( .DEFAULT_DESC,LENGTH,ADDR ) );

		! If a default name was given, put it in the FAB as well.
		!
		CREATE_FAB [ FAB$B_DNS ] = .LENGTH;
		CREATE_FAB [ FAB$L_DNA ] = .ADDR;

		END;
	    END;
	END;

    ! Build a name block for the fab returned by fdl$$parse
    !
    ! Allocate the space for the name block and buffers:
    !
    !		|-----------------------|
    !		|	nam		| nam$k_bln
    !		|-----------------------|
    !		|  expanded str buffer	| esa_buf_siz
    !		|-----------------------|
    !		| resultant str buffer	| rsa_buf_siz
    !		-------------------------
    !
    ! Allocate the space. NOTE: We can't give it back since we may pass
    ! the user a pointer to this area. Therefore use fdl$$get_vm
    !
    NAME_BLOCK = FDL$$GET_VM( NAM$K_BLN + ESA_BUF_SIZ + RSA_BUF_SIZ );

    ! Init the name block
    !
    $NAM_INIT ( NAM = .NAME_BLOCK,
		ESA = .NAME_BLOCK + NAM$K_BLN,
		ESS = ESA_BUF_SIZ,
		RSA = .NAME_BLOCK + NAM$K_BLN + ESA_BUF_SIZ,
		RSS = RSA_BUF_SIZ );

    ! Connect the name block
    !
    CREATE_FAB [ FAB$L_NAM ] = .NAME_BLOCK;

    ! Create the file
    !
    ! Errors will be create error
    !
    CREATE_FAB [ FAB$L_CTX ] = FDL$_CREATE;

    ! If this is from dcl then set the error handler to signal fdl error
    ! and the rms error else return normally
    !
    IF .FDL$AB_CTRL [ FDL$V_DCL ]
    THEN
	STATUS = $CREATE( FAB=.CREATE_FAB,ERR=FDL$$RMS_OPEN_ERROR )
    ELSE
	STATUS = $CREATE( FAB=.CREATE_FAB );

    ! If there was an error creating the file return fdl$_create to the user
    !
    IF NOT .STATUS
    THEN
	STATUS = FDL$_CREATE;

    $CLOSE( FAB=.CREATE_FAB );

    ! See if the 4th parameter was given. If so return the result name.
    ! NOTE: This is where the user can get access to allocated memory
    !
    IF .COUNT GTR 3
    THEN
	BEGIN

	LOCAL
	    RESULT_DESC : REF DESC_BLK,
	    TEMP_DESC	: DESC_BLK  PRESET ( [ DSC$B_CLASS ] = DSC$K_CLASS_S,
	    				     [ DSC$B_DTYPE ] = DSC$K_DTYPE_T );

	RESULT_DESC = ACTUALPARAMETER(4);

	IF .RESULT_DESC NEQ 0
	THEN
	    BEGIN

	    IF ..RESULT_DESC NEQ 0
	    THEN
		BEGIN

		! If a result name desc was given, stuff it with
		! the best name for file which was created (or attempted)
		!
		! First try the resultant string
		!
		IF .NAME_BLOCK [ NAM$B_RSL ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .NAME_BLOCK [ NAM$B_RSL ];
		    TEMP_DESC [ DSC$A_POINTER ] = .NAME_BLOCK [ NAM$L_RSA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.RESULT_DESC ) )

		    END

		! Next try the expanded string
		!
		ELSE IF .NAME_BLOCK [ NAM$B_ESL ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .NAME_BLOCK [ NAM$B_ESL ];
		    TEMP_DESC [ DSC$A_POINTER ] = .NAME_BLOCK [ NAM$L_ESA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.RESULT_DESC ) )

		    END

		! If all else fails use the name string
		!
		ELSE
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .CREATE_FAB [ FAB$B_FNS ];
		    TEMP_DESC [ DSC$A_POINTER ] = .CREATE_FAB [ FAB$L_FNA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.RESULT_DESC ) )

		    END;

		END;
	    END;
	END;

    ! If the caller wants a file id get it
    !
    IF .COUNT GTR 4
    THEN
	BEGIN

	LOCAL FID_BLOCK : REF VECTOR [,LONG ];

	FID_BLOCK = ACTUALPARAMETER(5);

	IF FID_BLOCK NEQ 0
	THEN
	    BEGIN

	    FID_BLOCK [0] = .NAME_BLOCK [ NAM$W_FID_NUM ];
	    FID_BLOCK [1] = .NAME_BLOCK [ NAM$W_FID_SEQ ];
	    FID_BLOCK [2] = .NAME_BLOCK [ NAM$W_FID_RVN ];

	    END;
	END;

    RETURN .STATUS

    END;


%SBTTL	'PARSE'
GLOBAL ROUTINE	FDL$$PARSE =
!++
!
! Functional Description:
!
!	Entry point for the fdl parsing routine. This is not a user interface
!	but both CONVERT and EDF call it.  So if changes are made check with
!	the other facilities
!
!	This routine stuffs a fab created from virtural memory according to
!	what was parsed form a fdl fab.  The address of the fab is returned
!	to the caller
!
! Calling Sequence:
!
!	fdl$parse( fdl_file_name,fdl_fab_pointer )
!
! Input Parameters:
!
!	fdl_file_name	- descriptor of the input fdl file name string (required)
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	fab_pointer	- address of a longword to receive the address of the
!			  filled in fab (required)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	fdl$$get_vm
!	lib$get_vm
!	lib$free_vm
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	LENGTH		: WORD,
	ADDR,
	FDL_FAB_PTR,			! Pointer to the input fab
	BYTES,
	FAB_POINTER,
	STATUS,
	FDL_FILE_NAM	: REF DESC_BLK;

    ! Get the number of arguments and see if it's right (ie. 2)
    !
    IF ( ACTUALCOUNT() NEQ 2 )
    THEN
	RETURN FDL$_ILL_ARG;

    ! Set up handler to control errors
    !
    LIB$ESTABLISH ( HANDLER );

    ! Get the FDL file name
    !
    FDL_FILE_NAM = ACTUALPARAMETER(1);

    ! Set up the fab and name block
    !
    ! Find the number of bytes needed for all of this which is:
    ! Space for the fab, name block, expanded and resultant string buffers
    ! the user buffer in the rab and the upcase buffer. NOTE: The upcase buffer
    ! MUST be allocated directly after the user buffer.
    !
    ! The space is allocated:
    !
    !		-------------------------
    !		|	fab		| fab$k_bln
    !		|-----------------------|
    !		|	nam		| nam$k_bln
    !		|-----------------------|
    !		|  expanded str buffer	| esa_buf_siz
    !		|-----------------------|
    !		| resultant str buffer	| rsa_buf_siz
    !		|-----------------------|
    !		|     user buffer	| fdl$k_maxline
    !		|-----------------------|
    !		|    upcase buffer	| fdl$k_maxline
    !		-------------------------
    !
    !
    ! Get the address space. NOTE: Since the user never sees this buffer we
    ! can deallocate it when we exit so use lib$get_vm
    !
    BYTES = FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ + RSA_BUF_SIZ +
							( FDL$K_MAXLINE * 2);

    IF NOT LIB$GET_VM( BYTES,FDL_FAB_PTR )
    THEN
	RETURN FDL$_INSVIRMEM;

    ! Allow for wierd strings (like VARYING or byte-arrays)
    !
    RET_ON_ERROR( LIB$ANALYZE_SDESC( .FDL_FILE_NAM,LENGTH,ADDR ) );

    ! Initialize all of the fabs and rabs
    !
    $FAB_INIT ( FAB = .FDL_FAB_PTR,
		CTX = FDL$_OPENFDL,
		DNM = '.FDL',
		FAC = GET,
		FNS = .LENGTH,
		FNA = .ADDR,
		FOP = <SQO,NAM>,
		NAM = .FDL_FAB_PTR + FAB$K_BLN );

    $NAM_INIT ( NAM = .FDL_FAB_PTR + FAB$K_BLN,
		ESA = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN,
		ESS = ESA_BUF_SIZ,
		RSA = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ,
		RSS = RSA_BUF_SIZ );

    $RAB_INIT ( RAB = FDL$AB_FDL_RAB,
		CTX = FDL$_OPENFDL,
		FAB = .FDL_FAB_PTR,
		RAC = SEQ,
		ROP = RAH,
		UBF = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ + RSA_BUF_SIZ,
		USZ = FDL$K_MAXLINE );

    ! Open the file
    !
    $OPEN( FAB=.FDL_FAB_PTR,ERR=FDL$$RMS_OPEN_ERROR );

    ! Connect a stream
    !
    $CONNECT( RAB=FDL$AB_FDL_RAB,ERR=FDL$$RMS_OPEN_ERROR );

    ! Errors from now on are read errors
    !
    FDL$AB_FDL_RAB [ RAB$L_CTX ] = FDL$_READERR;

    ! Get the address space for the fab
    !
    FDL$AB_PARSED_FAB = FDL$$GET_VM( FAB$K_BLN );

    ! Init the fab (Set some defaults as well)
    !
    $FAB_INIT ( FAB = .FDL$AB_PARSED_FAB,
		FOP = <MXV,NAM>,
		ORG = SEQ,
		RAT = CR,
		RFM = VAR );

    ! Get the address of the of where the caller wants his FAB
    !
    FAB_POINTER = ACTUALPARAMETER(2);

    ! Give the fab to the user
    !
    .FAB_POINTER = .FDL$AB_PARSED_FAB;

    ! Initialize the line buffer and the upcase buffer
    !
    FDL$AB_LINE [ DSC$A_POINTER ] = .FDL$AB_FDL_RAB [ RAB$L_UBF ];

    FDL$AB_UPCASED [ DSC$A_POINTER ] = .FDL$AB_LINE [ DSC$A_POINTER ] +
								FDL$K_MAXLINE;

    ! Initialize the parser
    !
    FDL$$INIT_PARSE();

    ! Parse the file
    !
    LIB$TPARSE( FDL$AB_TPARSE_BLOCK,FDL$AB_STATE_TABLE,FDL$AB_KEY_TABLE );

    STATUS = FDL$$FINISH_PARSE();

    ! Close down the FDL file and exit
    !
    $DISCONNECT( RAB=FDL$AB_FDL_RAB );

    $CLOSE( FAB=.FDL_FAB_PTR );

    ! Deallocate the memory for the fab etc
    !
    LIB$FREE_VM( BYTES,FDL_FAB_PTR );

    RETURN .STATUS

    END;

%SBTTL	'HANDLER'
ROUTINE	HANDLER ( SIGNAL_VECTOR : REF BLOCK [ ,BYTE ],MECH_VECTOR ) =
!++
!
! Functional Description:
!
!	Condition handler for the fdl parser
!
! Calling Sequence:
!
! Input Parameters:
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	CONDITION_CODE	: BLOCK [ 4,BYTE ];

    ! Get the condition code
    !
    CONDITION_CODE = .SIGNAL_VECTOR [ CHF$L_SIG_NAME ];

    ! If an unwind is in progress return
    !
    IF .CONDITION_CODE EQLU SS$_UNWIND
    THEN
	RETURN;

    ! If this is not a warning skip it otherwise stuff the status
    ! with the greater of the errors
    !
    IF .CONDITION_CODE [ STS$V_SEVERITY ] NEQU STS$K_INFO
    THEN

	! If the current condition is ok OR this worse then anything weve seen
	! then make this the new error
	!
	IF .FDL$AB_CTRL [ FDL$V_STATUS ] OR
		( .CONDITION_CODE [ STS$V_SEVERITY ] GTRU
					.FDL$AB_CTRL [ FDL$V_STATUS ] )
	THEN
	    FDL$AB_CTRL [ FDL$V_STATUS ] = .CONDITION_CODE [ STS$V_SEVERITY ];

    RETURN SS$_RESIGNAL

    END;

END	ELUDOM
