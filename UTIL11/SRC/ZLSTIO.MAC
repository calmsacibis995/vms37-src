; BLIS11 V.76078	Thursday 4-Nov-76 3:16.45	ZLSTIO.B11	Page 1
;
;      	0001	MODULE ZLSTIO(IDENT=/V03000/)=
;      	0002	BEGIN
;      	0003	!
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;      	0021	!
;      	0022	! WRITTEN BY
;      	0023	!	M. JACK
;      	0024	!
;      	0025	! MODULE FUNCTION
;      	0026	!	ASCII OUTPUT AND INTERNAL TO ASCII NUMERIC CONVERSIONS
;      	0027	!	FOR THE TASK IMAGE PATCH UTILITY
;      	0028	
;      	0029	LINKAGE
;      	0030		REG0 = BLISS(REGISTER=0);
;      	0031	
;      	0032	FORWARD
;      	0033		REG0 OUTC,	! SINGLE CHARACTER OUTPUT
;      	0034		REG0 OUTSA,	! ASCIZ STRING OUTPUT
;      	0035		REG0 OUTR50,	! RADIX50 STRING OUTPUT
;      	0036		OUTN;		! NUMERIC CONVERSION ROUTINE
;      	0037	
;      	0038	REQUIRE STDMAC.BEG;
;      	0039	!	STDMAC.BEG - WIDELY USED STANDARD MACROS
;      	0040	!
;      	0061	SWITCHES LIST; SWITCHES LIST;
;      	0062	!	VERSION 000101
;      	0063	!	LAST MODIFIED 10/27/75 RBG
;      	0112	SWITCHES LIST; SWITCHES LIST;
;      	0113	!	STDMAC.BEG LAST LINE
;      	0114	
;      	0115	REQUIRE STDSTR.BEG;
;      	0116	!	STDSTR.BEG - WIDELY USED STANDARD STRUCTURES
;      	0117	!
;      	0138	SWITCHES LIST; SWITCHES LIST;
;      	0139	!	VERSION 000003
;      	0140	!	LAST MODIFIED 02/28/74 RBG

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.47	STDSTR.BEG	Page 1-1
;
;      	0154	SWITCHES LIST; SWITCHES LIST;
;      	0155	!	STDSTR.BEG LAST LINE
;      	0156	
;      	0157	PSECT
;      	0158		CODE=" ", GLOBAL="$GBL", OWN=" ", PLIT="$PLIT";
;      	0159	
;      	0160	EXTERNAL
;      	0161		OUTPTR;		! NEXT CHARACTER POSITION IN OUTPUT BUFFER
;      	0162	
;      	0163	OWN
;      	0164		OWNBUF[4];	! A SHORT OWN BUFFER
;      	0165	
;      	0166	
;      	0167	
;      	0168	MACRO
;     M	0169		OUTCHAR(X)= ((.OPTR)<0,8>=(X);
;      	0170			      OPTR=.OPTR+1;)$;
;      	0171	
;      	0172	COMMENT ! OUTC(X)
;      	0173	!
;      	0174	! FUNCTION
;      	0175	!	PLACE A SINGLE CHARACTER IN OUTPUT BUFFER
;      	0176	! INPUTS
;      	0177	!	X	- ASCII CHARACTER
;      	0178	!	OUTPTR	- OUTPUT BUFFER POINTER
;      	0179	! OUTPUTS
;      	0180	!	VALUE	- NONE
;      	0181	!	OUTPTR	- UPDATED
;      	0182	!
;      	0183	GLOBAL ROUTINE REG0 OUTC(X)=
;      	0184	    BEGIN
;      	0185	    BIND OPTR=OUTPTR;
;      	0186	    OUTCHAR(.X);
;      	0187	    NOVALUE
;      	0188	    END;
	.TITLE	ZLSTIO
	.IDENT	/000003/
	.PSECT	 

R$0=%0
R$1=%1
R$2=%2
R$3=%3
R$4=%4
R$5=%5
SP=%6
PC=%7


	.SBTTL	OUTC
OUTC:
	MOVB	R$0,@OUTPTR

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.47	ZLSTIO.B11	Page 1-2
;
	INC	OUTPTR
	RTS	PC

; Routine Size:  5





;      	0189	COMMENT ! OUTSA(P)
;      	0190	!
;      	0191	! FUNCTION
;      	0192	!	COPY AN ASCIZ STRING TO OUTPUT BUFFER
;      	0193	! INPUTS
;      	0194	!	P	- POINTER TO ASCIZ STRING
;      	0195	!	OUTPTR	- OUTPUT BUFFER POINTER
;      	0196	! OUTPUTS
;      	0197	!	VALUE	- NONE
;      	0198	!	OUTPTR	- UPDATED
;      	0199	!
;      	0200	GLOBAL ROUTINE REG0 OUTSA(P)=
;      	0201	    BEGIN
;      	0202	    REGISTER IPTR,OPTR;
;      	0203	    MACRO INCHAR=(.IPTR)<0,8>$;
;      	0204	    OPTR=.OUTPTR;
;      	0205	    IPTR=.P;
;      	0206	    UNTIL .INCHAR EQL 0 DO
;      	0207		BEGIN
;      	0208		OUTCHAR(.INCHAR);
;      	0209		IPTR=.IPTR+1;
;      	0210		END;
;      	0211	    OUTPTR=.OPTR;
;      	0212	    NOVALUE
;      	0213	    END;


	.SBTTL	OUTSA
OUTSA:
	JSR	R$1,$SAV2
	MOV	OUTPTR,R$1
	MOV	R$0,R$2
L$4:	TSTB	@R$2
	BEQ	U$2
	MOVB	(R$2)+,(R$1)+
	BR	L$4
U$2:	MOV	R$1,OUTPTR
	RTS	PC

; Routine Size:  12


; BLIS11 V.76078	Thursday 4-Nov-76 3:16.48	ZLSTIO.B11	Page 1-3
;




;      	0214	COMMENT ! OUTR50(P)
;      	0215	!
;      	0216	! FUNCTION
;      	0217	!	CONVERT AND OUTPUT RADIX50 WORD
;      	0218	! INPUTS
;      	0219	!	P	-  RADIX50 WORD
;      	0220	! OUTPUTS
;      	0221	!	VALUE	- NONE
;      	0222	!	OUTPTR	- UPDATED
;      	0223	!
;      	0224	GLOBAL ROUTINE REG0 OUTR50(P)=
;      	0225	    BEGIN
;      	0226	
;      	0227	    BIND
;      	0228		DIVTAB = UPLIT(1, #50, #3100);
;      	0229	    LOCAL
;      	0230		J;
;      	0231	
;      	0232	    DECR I FROM 2 TO 0 DO
;      	0233		BEGIN
;      	0234		J = 0;
;      	0235		UNTIL ((P = .P - .DIVTAB[.I]) ROT 1) DO J = .J + 1;
;      	0236		P = .P + .DIVTAB[.I];
;      	0237		IF .J NEQ 0
;      	0238		THEN
;      	0239		    BEGIN
;      	0240		    IF .J NEQ #33
;      	0241		    THEN
;      	0242			BEGIN
;      	0243			IF .J LSS #33 THEN J = .J + #56;
;      	0244			J = .J + #11;
;      	0245			END;
;      	0246		    J = .J + #11;
;      	0247		    END;
;      	0248		OUTC(.J);
;      	0249		END;
;      	0250	    NOVALUE
;      	0251	    END;


	.SBTTL	OUTR50
OUTR50:
	JSR	R$1,$SAV4
	MOV	R$0,R$3
	MOV	#2,R$4
L$10:	CLR	R$2
	MOV	R$4,R$1
	ASL	R$1

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.50	ZLSTIO.B11	Page 1-4
;
	MOV	P$AAA(R$1),R$1
L$12:	SUB	R$1,R$3
	MOV	R$3,R$0
	ROL	R$0
	ROR	R$0
	BLO	U$10
	INC	R$2
	BR	L$12
U$10:	ADD	R$1,R$3
	TST	R$2
	BEQ	L$16
	CMP	R$2,#33
	BEQ	L$18
	BGE	L$20
	ADD	#56,R$2
L$20:	ADD	#11,R$2
L$18:	ADD	#11,R$2
L$16:	MOV	R$2,R$0
	JSR	PC,OUTC
	DEC	R$4
	BPL	L$10
	RTS	PC

; Routine Size:  36


	.PSECT	$PLIT
P$AAA:	.WORD	1,50,3100



;      	0252	COMMENT ! OUTN(NUM,REQ)
;      	0253	!
;      	0254	! FUNCTION
;      	0255	!	OCTAL CONVERSION ACCORDING TO SPECIFIED WIDTH
;      	0256	!	CONVERTED NUMBER IS PLACE IN OUTPUT BUFFER
;      	0257	!	AS POINTED TO BY OUTPTR.
;      	0258	! INPUTS
;      	0259	!	NUM	- 16-BIT QUANTITY TO BE CONVERTED
;      	0260	!	REQ	- WIDTH SPECIFICATION
;      	0261	! OUTPUTS
;      	0262	!	VALUE	- NONE
;      	0263	!	OUTPTR	- UPDATED
;      	0264	!
;      	0265	GLOBAL ROUTINE OUTN(NUM,REQ)=
;      	0266	    BEGIN
;      	0267	    BIND
;      	0268		N  =OWNBUF[0],	! VALUE BEING CONVERTED
;      	0269		RD =OWNBUF[1];	! REMAINING FIELD WIDTH TO FILL
;      	0270	    BIND OPTR=OUTPTR;
;      	0271	

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.51	ZLSTIO.B11	Page 1-5
;
;      	0272	    ROUTINE XN=		! RECURSIVE DIVISION ROUTINE
;      	0273		BEGIN
;      	0274		LOCAL
;      	0275		    R;		! REMAINDER ON DIVISION (RECURSIVELY LOCAL)
;      	0276		IF .N EQL 0
;      	0277		    THEN WHILE (RD=.RD-1) GEQ 0
;      	0278			    DO OUTCHAR("0")
;      	0279		    ELSE
;      	0280			BEGIN
;      	0281			R = .N<0,4>;
;      	0282			N = .N<4,12>;
;      	0283			RD=.RD-1;
;      	0284			XN();
;      	0285			OUTCHAR(.R + (IF .R LEQ 9 THEN "0" ELSE ("A"-10)));
;      	0286			END;
;      	0287		NOVALUE
;      	0288		END;
;      	0289	

	.PSECT	 

	.SBTTL	XN
XN:
	JSR	R$1,$SAV2
	MOV	#OWNBUF+2,R$0
	MOV	#OUTPTR,R$1
	TST	OWNBUF
	BNE	L$27
L$26:	DEC	@R$0
	BMI	L$31
	MOVB	#60,@0(R$1)
	INC	@R$1
	BR	L$26
L$27:	MOVB	OWNBUF,R$2
	BIC	#177760,R$2
	MOV	OWNBUF,-(SP)
	ASR	@SP
	ASR	@SP
	ASR	@SP
	ASR	@SP
	MOV	(SP)+,OWNBUF
	BIC	#170000,OWNBUF
	DEC	@R$0
	JSR	PC,XN
	CMP	R$2,#11
	BGT	L$33
	MOV	#60,R$0
	BR	L$34
L$33:	MOV	#67,R$0
L$34:	ADD	R$2,R$0
	MOVB	R$0,@0(R$1)
	INC	@R$1

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.53	ZLSTIO.B11	Page 1-6
;
L$31:	RTS	PC

; Routine Size:  47





;      	0290	    RD = .REQ;
;      	0291	    IF (N=.NUM) EQL 0
;      	0292		THEN
;      	0293		    BEGIN
;      	0294		    WHILE (RD=.RD-1) GEQ 0
;      	0295			DO OUTCHAR("0");
;      	0296		    RETURN NOVALUE;
;      	0297		    END;
;      	0298	    XN();
;      	0299	    NOVALUE
;      	0300	    END;
;      	0301	


	.SBTTL	OUTN
OUTN:
	MOV	#OWNBUF+2,R$0
	MOV	2(SP),@R$0
	MOV	4(SP),OWNBUF
	BNE	L$38
L$37:	DEC	@R$0
	BMI	L$36
	MOVB	#60,@OUTPTR
	INC	OUTPTR
	BR	L$37
L$38:	JMP	XN
L$36:	RTS	PC

; Routine Size:  19





;      	0302	END
;      	0303	ELUDOM


	.SBTTL	ZLSTIO
ZLSTIO:


; BLIS11 V.76078	Thursday 4-Nov-76 3:16.55	ZLSTIO.B11	Page 1-7
;
; Routine Size:  0


	.PSECT	 
OWNBUF:	.BLKW	4
	.GLOBL	ZLSTIO
	.GLOBL	OUTN
	.GLOBL	OUTSA
	.GLOBL	OUTR50
	.GLOBL	OUTC
	.GLOBL	OUTPTR

	.GLOBL	$SAV4
	.GLOBL	$SAV2









; Size:  119+7
; Run Time:  6 Seconds
; Core Used:  15K
; Compilation Complete

	.END	



