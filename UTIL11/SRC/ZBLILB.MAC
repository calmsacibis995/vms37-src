	.TITLE	ZBLILB
	.IDENT	/V03000/

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

; WRITTEN BY
;	R. GROVE
;	P. KNUEVEN

; THIS MODULE PROVIDES RUN-TIME, OUT-OF-LINE SUPPORT
; FOR BLISS COMPILER-GENERATED CALLS.
; IN PARTICULAR, SUPPORT ROUTINES HAVING NO REASONABLE
; EXPRESSION IN BLISS ARE INCLUDED IN THIS MODULE.

	.MACRO	CHKSP
	CMP	SP,STKLIM
	BLOS	STKOV
	.ENDM

	.SBTTL	SIGNAL/ENABLE CALLING SEQUENCES
;   ENABLE
;
;	MOV	#N,R0		STACK OFFSET TO ENABLE FRAME
;	JSR	PC,$ENABL	SET UP ENABLE FRAME
; A:	.WORD	B-(A+2)
; A+2:	SELECT BODY FOR ENABLE
;	. . .
;	END OF ENABLE BODY
; B:

;   SIGNAL .V
;	MOV	V,R0
;	JMP	$SIGNL

;   RE-SIGNAL FROM ENABLE BODY (SIGNAL .SIGVAL)
;	JMP	$SIGN1

; SIGNAL/ENABLE DATA STRUCTURE
;
;   AN ENABLE STACK FRAME LOOKS LIKE:
;		+4: SAVED PC	ENA.PC
;		+2: SAVED SP	ENA.SP
;   SIGREG--->  +0: OLD SIGREG	ENA.SIGREG

	.SBTTL	SIGNAL/ENABLE ROUTINES
; GLOBAL ROUTINE REGISTER0 $ENABL(R0)=
;
; FUNCTION
;	BUILD AN ENABLE FRAME AS DESCRIBED ABOVE
; INPUTS
;	R0	- STACK DISPLACEMENT TO LAST WORD OF ENABLE FRAME
; OUTPUTS
;	VALUE	- NONE
;	STACK	- ENABLE FRAME POINTED AT BY SIGREG
; STACK PICTURE ON ENTRY
;	+N  :  ENA.PC
;	+N-2:  ENA.SP
;	+N-4:  ENA.SIGREG
;	...
;	+0  : A (RETURN ADDRESS)

$ENABL::
	ADD	SP,R0		; R0 NOW POINTS TO ENA.PC
	MOV	(SP),(R0)
	ADD	#2,(R0)		; ENA.PC = A+2
	MOV	@0(SP),(SP)	; PICK UP (B-(A+2)) FROM CODE
	ADD	(R0),(SP)	; RETURN FROM $ENABL = B

	MOV	SP,-(R0)
	ADD	#2,(R0)		; ENA.SP = .SP+2

	MOV	SIGREG,-(R0)	; ENA.SIGREG = .SIGREG
	MOV	R0,SIGREG	; ADD NEW FRAME TO CHAIN
	RTS	PC

; GLOBAL ENTRY REGISTER0 $SIGNL(R0)=
$SIGNL::
	MOV	R0,SIGVAL	; SET VALUE SIGNALLED

; GLOBAL ENTRY $SIGN1=
$SIGN1::
	MOV	SIGREG,R0	; GET POINTER TO LAST ENABLE FRAME
	MOV	(R0)+,SIGREG	; POP ENABLE STACK ONE LEVEL
	MOV	(R0)+,SP	; RESTORE STACK
	JMP	@(R0)+		; GO TO ENABLE BODY


	.SBTTL	SIGNAL/ENABLE GLOBAL VARIABLES

	.PSECT	$GBL
SIGVAL::.BLKW
SIGREG::.WORD	-1		; ODD ADDRESS FAULT FORCED AT LEVEL 0
	.PSECT

	.SBTTL	REGISTER SAVE/RESTORE COROUTINES

; THE ROUTINE $SAVN IS CALLED AT THE BEGINNING OF A
; ROUTINE WHICH MODIFIES THE CONTENTS OF R1-RN
; THE CALLING SEQUENCE IS
;	JSR	R1,$SAVN
;
; NOTES: 1. BLISS-11 DOES NOT GENERATE CALLS FOR $SAV1
;	 2. STACK OVERFLOW CHECKING IS INCLUDED IN THESE ROUTINES
;	    A "SIGNAL 1" IS EXECUTED ON STACK OVERFLOW

$SAV2::	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	4(SP),R1
	CHKSP
	JSR	PC,@(SP)+
	BR	RE2

$SAV3::	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R1,-(SP)
	MOV	6(SP),R1
	CHKSP
	JSR	PC,@(SP)+
	BR	RE3

$SAV4::	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	R1,-(SP)
	MOV	8.(SP),R1
	CHKSP
	JSR	PC,@(SP)+
	BR	RE4

$SAV5::	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)	; STACK NOW HAS R1,R2,R3,R4,R5
	MOV	R1,-(SP)	; RESUME POINT FOR COROUTINE CALL
	MOV	10.(SP),R1	; RESTORE ORIGINAL R1
	CHKSP
	JSR	PC,@(SP)+

	MOV	(SP)+,R5	; RESTORE SAVED REGISTERS
RE4:	MOV	(SP)+,R4
RE3:	MOV	(SP)+,R3
RE2:	MOV	(SP)+,R2
RE1:	MOV	(SP)+,R1
	RTS	PC

STKOV:	MOV	#1,R0		; SIGNAL 1 ON STACK LIMIT
	BR	$SIGNL

	.END

