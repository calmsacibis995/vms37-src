; BLIS11 V.76078	Thursday 4-Nov-76 3:16.29	ZIN11M.B11	Page 1
;
;      	0001	MODULE ZINIT(IDENT=/V03000/)=
;      	0002	BEGIN
;      	0003	
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;      	0021	!
;      	0022	! WRITTEN BY
;      	0023	!	M. JACK
;      	0024	!
;      	0025	! MODULE FUNCTION
;      	0026	!	TASK-IMAGE PATCHING UTILITY FOR USE WITH RSX-11D AND RSX-11M
;      	0027	!
;      	0028	!
;      	0029	
;      	0030	LINKAGE
;      	0031		REG0 = BLISS(REGISTER=0);
;      	0032	
;      	0033	FORWARD
;      	0034		ZAPINIT,
;      	0035		DOOVERLAY;
;      	0036	
;      	0037	
;      	0038	REQUIRE STDMAC.BEG;
;      	0039	!	STDMAC.BEG - WIDELY USED STANDARD MACROS
;      	0040	!
;      	0061	SWITCHES LIST; SWITCHES LIST;
;      	0062	!	VERSION 000101
;      	0063	!	LAST MODIFIED 10/27/75 RBG
;      	0112	SWITCHES LIST; SWITCHES LIST;
;      	0113	!	STDMAC.BEG LAST LINE
;      	0114	
;      	0115	REQUIRE STDSTR.BEG;
;      	0116	!	STDSTR.BEG - WIDELY USED STANDARD STRUCTURES
;      	0117	!
;      	0138	SWITCHES LIST; SWITCHES LIST;
;      	0139	!	VERSION 000003
;      	0140	!	LAST MODIFIED 02/28/74 RBG

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.31	STDSTR.BEG	Page 1-1
;
;      	0154	SWITCHES LIST; SWITCHES LIST;
;      	0155	!	STDSTR.BEG LAST LINE
;      	0156	
;      	0157	REQUIRE ZAP.BEG;
;      	0158	!	ZAP.BEG - BEGIN FILE FOR ZAP
;      	0159	!
;      	0180	SWITCHES LIST; SWITCHES LIST;
;      	0181	!
;      	0182	!	VERSION 000003
;      	0183	!	LAST MODIFIED 08/06/76
;      	0184	!
;      	0185	
;      	0186	STRUCTURE
;      	0187		BUFFER[I] = (.BUFFER + .I)<0,16>;
;      	0188	
;      	0189	BIND
;      	0190		SEGSIZ=	5;		! LENGTH OF SEGMENT TABLE ENTRY
;      	0191	
;      	0192	MACRO
;      	0193		SEGBLK=	0,0,16$,	! STARTING DISK BLOCK (SEGMENT "NAME")
;      	0194		SEGLOW=	1,0,16$,	! LOW ADDRESS
;      	0195		SEGHIGH=2,0,16$,	! HIGH ADDRESS PLUS ONE
;      	0196		SEGVIRT=3,0,16$,	! VIRTUAL ORIGIN DATA
;      	0197		SEGVIR1=3,0,16$,	! HIGH ORDER WORD OF SEGVIRT
;      	0198		SEGVIR0=4,0,16$,	! LOW ORDER WORD OF SEGVIRT
;      	0199		SEGVIRW=4,0,9$,		! WORD OFFSET PART OF SEGVIRT
;      	0200		SEGNEXT=5,0,16$;	! OFFSET TO NEXT ENTRY
;      	0201	
;      	0202	MACRO
;      	0203		ABSOLUTE=0,0,1$,	! /AB SWITCH BIT
;      	0204		READONLY=0,1,1$,	! /RO SWITCH BIT
;      	0205		LISTING=0,2,1$;		! /LI SWITCH BIT
;      	0206	
;      	0207	BIND
;      	0208		NORELO=	0,		! NO SUCH RELOCATION REGISTER
;      	0209		ADROOB=	1,		! ADDRESS NOT WITHIN SEGMENT
;      	0210		NOSEGM=	2,		! NO SUCH SEGMENT
;      	0211		BADARG=	3,		! BAD ARGUMENT COUNT
;      	0212		NOSPEC=	4,		! NO SUCH SPECIAL REGISTER
;      	0213		BADCMD=	5,		! UNRECOGNIZABLE COMMAND
;      	0214		NOOPEN=	6,		! NO OPEN LOCATION
;      	0215		NOBYTE=	7,		! CANNOT USE IN BYTE MODE
;      	0216		BADTSK=	12,		! BAD TASK IMAGE
;      	0217		VFYREJ=	13,		! VERIFY REJECT
;      	0218		NOTYET=	14,		! NOT YET IMPLEMENTED
;      	0219		OVFLSG=	15;		! SEGMENT TABLE OVERFLOW
;      	0220	
;      	0221	BIND
;      	0222		SIGXIT=	-1,		! SIGNAL VALUE FOR EXIT
;      	0223		SIGADR=	-2;		! SIGNAL VALUE FOR ADDRESS ERROR
;      	0224	
;      	0225	!

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.32	ZAP.BEG	Page 1-2
;
;      	0226	!	ZAP.BEG LAST LINE
;      	0227	
;      	0228	
;      	0229	PSECT
;      	0230		CODE=" ", OWN=" ", GLOBAL="$GBL", PLIT="$PLIT";
;      	0231	
;      	0232	MACRO
;      	0233		SGBLK=	0,0,12$,	! DISK BLOCK
;      	0234		SGDISK=	0,14,1$,	! NO DISK ALLOCATION FLAG
;      	0235		SGLDA=	1,0,16$,	! LOAD ADDRESS
;      	0236		SGLNG=	2,0,16$,	! LENGTH
;      	0237		SGUP=	3,0,16$,	! LINK UP
;      	0238		SGNXT=	5,0,16$;	! LINK NEXT
;      	0239	
;      	0240	!	RSX-11M SPECIFIC TASK HEADER/LABEL BLOCK DEFINITIONS
;      	0241	MACRO
;      	0242		LBLBHRB= #356$,		! HEADER BLOCK OFFSET
;      	0243		LBLBLDZ= #16$,		! TASK LOAD SIZE (ROOT SEGMENT SIZE)
;      	0244		LBLBSA=  #10$,		! TASK BASE ADDRESS
;      	0245		LBLBSEG= #26$,		! SEGMENT DESCRIPTOR SIZE
;      	0246		HDROVLY= #54$;		! POINTER TO ON-DISK SEGMENT DESCRIPTORS
;      	0247	
;      	0248	EXTERNAL
;      	0249		OPENLOC,		! OPEN A LOCATION IN TASK SPACE
;      	0250		FCSOPEN,		! OPEN FILES
;      	0251		REG0 FCSREAD,		! READ TASK IMAGE BLOCK
;      	0252		REG0 VIRTZERO,		! CALCULATE OVERLAY VIRTUAL ZERO
;      	0253		ROVZRO,			! VIRTUAL-ZERO CALC FOR RO PSECTS
;      	0254		REG0 OUTC,		! OUTPUT CHARACTER
;      	0255		REG0 OUTSA,		! OUTPUT ASCIZ STRING
;      	0256		OUTN,			! OUTPUT NUMBER
;      	0257		REG0 ERRPRT,		! ERROR MESSAGE OUTPUT
;      	0258		EOL;			! OUTPUT RECORD
;      	0259	
;      	0260	EXTERNAL
;      	0261		REALDOT,		! VALUE OF DOT IN BUFFER
;      	0262		SEGTAB,			! SEGMENT TABLE BASE ADDRESS
;      	0263		SEGEND,			! SEGMENT TABLE END ADDRESS + 1
;      	0264		PBLOCK SEGMAX,		! UPPER LIMIT OF SEGTAB
;      	0265		BLOCK SWITCH,		! COMMAND SWITCHES
;      	0266		BUFFER BLKBUF;		! TASK IMAGE BLOCK BUFFER
;      	0267	
;      	0268	OWN
;      	0269		ROOTSEG;		! SEGMENT-ID OF ROOT SEGMENT
;      	0270	
;      	0271	
;      	0272	
;      	0273	
;      	0274	
;      	0275	COMMENT ! ZAPINIT
;      	0276	!
;      	0277	! FUNCTION

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.32	ZIN11M.B11	Page 1-3
;
;      	0278	!	CONSTRUCT THE SEGMENT TABLE INTERNAL TO ZAP
;      	0279	!
;      	0280	! INPUTS
;      	0281	!	ON-DISK DATA STRUCTURE
;      	0282	!
;      	0283	! OUTPUTS
;      	0284	!	SEGTAB	- DESCRIPTIONS OF EACH SEGMENT
;      	0285	!	ROOTSEG	- SEGMENT-ID OF THE ROOT SEGMENT
;      	0286	!	VALUE	- NONE
;      	0287	!
;      	0288	
;      	0289	GLOBAL ROUTINE ZAPINIT=
;      	0290	    BEGIN
;      	0291	
;      	0292	    BIND
;      	0293		LBLVBN = UPLIT(0,1),
;      	0294		HDRVBN = UPLIT(0,4);
;      	0295	
;      	0296	    LOCAL
;      	0297		PTR,			! POINTER TO OVERLAY DATA
;      	0298		PBLOCK S,		! POINTER TO SEGMENT TABLE
;      	0299		BLOCK SG,		! FIRST WORD OF SEGMENT DESCRIPTOR
;      	0300		SGSIZE;			! SEGMENT DESCRIPTOR SIZE
;      	0301	
;      	0302	
;      	0303	    ENABLE
;      	0304		SIGADR: (ERRPRT(BADTSK);  SIGNAL SIGXIT)
;      	0305	    ELBANE;
;      	0306	
;      	0307	    FCSOPEN();
;      	0308	
;      	0309	    SEGMAX = .SEGTAB;
;      	0310	    SEGMAX[SEGBLK] = 0;
;      	0311	    SEGMAX[SEGLOW] = 0;
;      	0312	    SEGMAX[SEGHIGH] = #177777;
;      	0313	    SEGMAX[SEGVIR1] = 0;
;      	0314	    IF NOT .SWITCH[ABSOLUTE]
;      	0315	    THEN
;      	0316		BEGIN
;      	0317		FCSREAD(LBLVBN);
;      	0318		SGSIZE = .BLKBUF[LBLBSEG];
;      	0319		SEGMAX[SEGBLK] = ROOTSEG = .BLKBUF[LBLBHRB];
;      	0320		SEGMAX[SEGLOW] = .BLKBUF[LBLBSA];
;      	0321		SEGMAX[SEGHIGH] = .SEGMAX[SEGLOW] + .BLKBUF[LBLBLDZ]*64;
;      	0322		VIRTZERO(.SEGMAX,1);
;      	0323		IF (PTR = OPENLOC(.ROOTSEG,.SEGMAX[SEGLOW]+HDROVLY)) NEQ 0
;      	0324		THEN
;      	0325		    IF OPENLOC(.ROOTSEG,.PTR) NEQ 0
;      	0326		    THEN
;      	0327			BEGIN
;      	0328			PTR = OPENLOC(.ROOTSEG,.PTR+2);	! .PTR+2 == N.STBL
;      	0329			WHILE

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.34	ZIN11M.B11	Page 1-4
;
;      	0330			    (OPENLOC(.ROOTSEG,.PTR) AND BIT3(SGDISK)) NEQ 0
;      	0331			DO
;      	0332			    PTR = .PTR + .SGSIZE;
;      	0333	
;      	0334			IF ..REALDOT NEQ 0
;      	0335			THEN
;      	0336			    DOOVERLAY(.PTR)
;      	0337			END;
;      	0338	
;      	0339	
;      	0340		IF .SWITCH[LISTING]
;      	0341		THEN
;      	0342		    BEGIN
;      	0343		    OUTSA(UPLIT ASCIZ "SEGMENT TABLE");
;      	0344		    EOL();
;      	0345		    S = .SEGTAB;
;      	0346		    DO
;      	0347			BEGIN
;      	0348			OUTN(.S[SEGBLK],6);
;      	0349			OUTC(":");
;      	0350			OUTC(" ");
;      	0351			OUTN(.S[SEGLOW],6);
;      	0352			OUTC("-");
;      	0353			OUTN(.S[SEGHIGH]-1,6);
;      	0354			EOL();
;      	0355			S = S[SEGNEXT];
;      	0356			END
;      	0357		    UNTIL
;      	0358			.S GEQU .SEGMAX;
;      	0359		    END;
;      	0360		END;
;      	0361	    NOVALUE
;      	0362	    END;
;      	0363	
	.TITLE	ZINIT
	.IDENT	/11M013/
	.PSECT	 

R$0=%0
R$1=%1
R$2=%2
R$3=%3
R$4=%4
R$5=%5
SP=%6
PC=%7


	.SBTTL	ZAPINIT
ZAPINIT:
	JSR	R$1,$SAV5
	SUB	#6,SP

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.39	ZIN11M.B11	Page 1-5
;
	MOV	#6,R$0
	JSR	PC,$ENABL
	.WORD	L$6-L$5
L$5:	CMP	SIGVAL,#-2
	BNE	L$7
	MOV	#14,R$0
	JSR	PC,ERRPRT
	MOV	#-1,R$0
	JMP	$SIGNL
L$7:	JMP	$SIGN1
L$6:	JSR	PC,FCSOPEN
	MOV	SEGTAB,SEGMAX
	MOV	SEGMAX,R$5
	CLR	@R$5
	CLR	2(R$5)
	MOV	#-1,4(R$5)
	CLR	6(R$5)
	BITB	#1,SWITCH
	BEQ	L$29
	JMP	L$10
L$29:	MOV	#P$AAA,R$0
	JSR	PC,FCSREAD
	MOV	BLKBUF+26,R$4
	MOV	SEGMAX,R$0
	MOV	BLKBUF+356,ROOTSEG
	MOV	ROOTSEG,@R$0
	MOV	BLKBUF+10,2(R$0)
	MOV	BLKBUF+16,R$5
	ASL	R$5
	ASL	R$5
	ASL	R$5
	ASL	R$5
	ASL	R$5
	ASL	R$5
	ADD	BLKBUF+10,R$5
	MOV	R$5,4(R$0)
	MOV	#1,-(SP)
	JSR	PC,VIRTZERO
	MOV	ROOTSEG,@SP
	MOV	SEGMAX,R$5
	MOV	2(R$5),R$5
	ADD	#54,R$5
	MOV	R$5,-(SP)
	JSR	PC,OPENLOC
	MOV	R$0,R$5
	BEQ	L$12
	MOV	ROOTSEG,-(SP)
	MOV	R$5,-(SP)
	JSR	PC,OPENLOC
	TST	R$0
	BEQ	L$14
	MOV	ROOTSEG,-(SP)

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.39	ZIN11M.B11	Page 1-6
;
	MOV	R$5,-(SP)
	ADD	#2,@SP
	JSR	PC,OPENLOC
	MOV	R$0,R$5
L$15:	MOV	ROOTSEG,-(SP)
	MOV	R$5,-(SP)
	JSR	PC,OPENLOC
	CMP	(SP)+,(SP)+
	BIT	#40000,R$0
	BEQ	U$2
	ADD	R$4,R$5
	BR	L$15
U$2:	TST	@REALDOT
	BEQ	L$19
	MOV	R$5,@SP
	JSR	PC,DOOVERLAY
L$19:	CMP	(SP)+,(SP)+
L$14:	CMP	(SP)+,(SP)+
L$12:	BITB	#4,SWITCH
	BEQ	L$23
	MOV	#P$AAC,R$0
	JSR	PC,OUTSA
	JSR	PC,EOL
	MOV	SEGTAB,R$5
L$25:	MOV	@R$5,-(SP)
	MOV	#6,-(SP)
	JSR	PC,OUTN
	MOV	#72,R$0
	JSR	PC,OUTC
	MOV	#40,R$0
	JSR	PC,OUTC
	MOV	2(R$5),@SP
	MOV	#6,-(SP)
	JSR	PC,OUTN
	MOV	#55,R$0
	JSR	PC,OUTC
	MOV	4(R$5),@SP
	DEC	@SP
	MOV	#6,-(SP)
	JSR	PC,OUTN
	JSR	PC,EOL
	ADD	#12,R$5
	ADD	#10,SP
	CMP	R$5,SEGMAX
	BLO	L$25
L$23:	CMP	(SP)+,(SP)+
L$10:	MOV	@SIGREG,SIGREG
	ADD	#6,SP
	RTS	PC

; Routine Size:  181

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.39	ZIN11M.B11	Page 1-7
;


	.PSECT	$PLIT
P$AAA:	.WORD	0,1
P$AAB:	.WORD	0,4
P$AAC:	.WORD	42523,46507,47105
	.WORD	20124,40524,46102
	.WORD	105



;      	0364	COMMENT ! DOOVERLAY(INITADR)
;      	0365	!
;      	0366	! FUNCTION
;      	0367	!	A RECURSIVE PROCEDURE TO SCAN THE OVERLAY SEGMENT
;      	0368	!	DESCRIPTORS AND BUILD THE SEGMENT TABLE
;      	0369	!
;      	0370	! INPUTS
;      	0371	!	INITADR	- THE ADDRESS OF A SEGMENT DESCRIPTOR
;      	0372	!		IN TASK ADDRESS SPACE
;      	0373	!	ON-DISK DATA STRUCTURE
;      	0374	!
;      	0375	! OUTPUTS
;      	0376	!	SEGMENT TABLE ENTRIES FOR ALL DESCENDANTS OF THE
;      	0377	!	INITADR
;      	0378	!	VALUE	- NONE
;      	0379	!
;      	0380	
;      	0381	ROUTINE DOOVERLAY(INITADR)=
;      	0382	    BEGIN
;      	0383	
;      	0384	    LOCAL
;      	0385		BLOCK BLK,		! TEMPORARY
;      	0386		PBLOCK CURADR;		! CURRENT SEGMENT TABLE ADDRESS
;      	0387	
;      	0388	
;      	0389	    CURADR = .INITADR;
;      	0390	    DO
;      	0391		BEGIN
;      	0392		MACRO W(I,P,S)=I,0,16$;
;      	0393		BLK = OPENLOC(.ROOTSEG,CURADR[W(SGBLK)]);
;      	0394		IF .BLK[SGDISK]
;      	0395		THEN
;      	0396		    BEGIN
;      	0397		    SEGMAX[SEGBLK] = -1;
;      	0398		    SEGMAX[SEGLOW] = 0;
;      	0399		    SEGMAX[SEGHIGH] = 0;
;      	0400		    END
;      	0401		ELSE
;      	0402		    BEGIN
;      	0403		    SEGMAX[SEGBLK] = .BLK[SGBLK] + .ROOTSEG;
;      	0404		    SEGMAX[SEGLOW] = OPENLOC(.ROOTSEG,CURADR[SGLDA]);

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.40	ZIN11M.B11	Page 1-8
;
;      	0405		    SEGMAX[SEGHIGH] =
;      	0406			.SEGMAX[SEGLOW] + OPENLOC(.ROOTSEG,CURADR[SGLNG]);
;      	0407		    VIRTZERO(.SEGMAX, 1);
;      	0408		    END;
;      	0409		SEGMAX = SEGMAX[SEGNEXT];
;      	0410		IF .SEGMAX GEQU .SEGEND
;      	0411		THEN
;      	0412		    BEGIN
;      	0413		    ERRPRT(OVFLSG);
;      	0414		    SIGNAL SIGXIT
;      	0415		    END;
;      	0416		IF OPENLOC(.ROOTSEG,CURADR[SGUP]) NEQ 0
;      	0417		THEN
;      	0418		    DOOVERLAY(..REALDOT);
;      	0419		END
;      	0420	    UNTIL
;      	0421		(CURADR = OPENLOC(.ROOTSEG,CURADR[SGNXT])) EQL .INITADR;
;      	0422	    NOVALUE
;      	0423	    END;
;      	0424	

	.PSECT	 

	.SBTTL	DOOVERLAY
DOOVERLAY:
	JSR	R$1,$SAV5
	MOV	16(SP),-(SP)
	TST	-(SP)
L$32:	MOV	#OPENLOC,R$5
	MOV	#ROOTSEG,R$2
	MOV	@R$2,-(SP)
	MOV	4(SP),-(SP)
	JSR	PC,@R$5
	MOV	R$0,4(SP)
	MOV	#SEGMAX,R$3
	MOV	@R$3,R$0
	MOV	R$0,R$1
	ADD	#2,R$1
	BIT	#40000,4(SP)
	BEQ	L$33
	MOV	#-1,@R$0
	CLR	@R$1
	CLR	4(R$0)
	BR	L$35
L$33:	MOV	4(SP),R$4
	BIC	#170000,R$4
	ADD	@R$2,R$4
	MOV	R$4,@R$0
	MOV	@R$2,-(SP)
	MOV	10(SP),-(SP)
	ADD	#2,@SP
	JSR	PC,@R$5

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.43	ZIN11M.B11	Page 1-9
;
	MOV	R$0,@R$1
	MOV	@R$3,R$1
	MOV	@R$2,@SP
	MOV	12(SP),-(SP)
	ADD	#4,@SP
	JSR	PC,@R$5
	MOV	R$0,R$4
	MOV	@R$3,R$0
	ADD	2(R$0),R$4
	MOV	R$4,4(R$1)
	MOV	@R$3,R$0
	MOV	#1,@SP
	JSR	PC,VIRTZERO
	ADD	#6,SP
L$35:	ADD	#12,@R$3
	CMP	@R$3,SEGEND
	BLO	L$37
	MOV	#17,R$0
	JSR	PC,ERRPRT
	MOV	#-1,R$0
	JMP	$SIGNL
L$37:	MOV	@R$2,@SP
	MOV	6(SP),-(SP)
	ADD	#6,@SP
	JSR	PC,@R$5
	TST	R$0
	BEQ	L$41
	MOV	@REALDOT,@SP
	JSR	PC,DOOVERLAY
L$41:	CMP	(SP)+,(SP)+
	MOV	@R$2,@SP
	MOV	4(SP),-(SP)
	ADD	#12,@SP
	JSR	PC,@R$5
	MOV	R$0,6(SP)
	CMP	(SP)+,(SP)+
	CMP	2(SP),22(SP)
	BNE	L$32
	CMP	(SP)+,(SP)+
	RTS	PC

; Routine Size:  105





;      	0425	END ELUDOM


	.SBTTL	ZINIT

; BLIS11 V.76078	Thursday 4-Nov-76 3:16.44	ZIN11M.B11	Page 1-10
;
ZINIT:

; Routine Size:  0


	.PSECT	 
ROOTSEG:	.BLKW
	.GLOBL	ZINIT
	.GLOBL	OUTN
	.GLOBL	BLKBUF
	.GLOBL	FCSREAD
	.GLOBL	SEGMAX
	.GLOBL	VIRTZERO
	.GLOBL	OPENLOC
	.GLOBL	OUTSA
	.GLOBL	SEGEND
	.GLOBL	SEGTAB
	.GLOBL	SWITCH
	.GLOBL	OUTC
	.GLOBL	ZAPINIT
	.GLOBL	REALDOT
	.GLOBL	FCSOPEN
	.GLOBL	EOL
	.GLOBL	ROVZRO
	.GLOBL	ERRPRT

	.GLOBL	$SAV5
	.GLOBL	$ENABL
	.GLOBL	$SIGN1
	.GLOBL	$SIGNL
	.GLOBL	SIGREG
	.GLOBL	SIGVAL









; Size:  286+12
; Run Time:  10 Seconds
; Core Used:  15K
; Compilation Complete

	.END	



