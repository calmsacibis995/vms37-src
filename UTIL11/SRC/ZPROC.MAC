; BLIS11 V.76078	Thursday 4-Nov-76 3:46.48	ZPROC.B11	Page 1
;
;      	0001	MODULE ZPROC(IDENT=/V03000/)=
;      	0002	BEGIN
;      	0003	
;      	0004	
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;      	0022	!
;      	0023	! WRITTEN BY
;      	0024	!	M. JACK
;      	0025	!
;      	0026	! MODULE FUNCTION
;      	0027	!	TASK-IMAGE PATCHING UTILITY FOR USE WITH RSX-11D AND RSX-11M
;      	0028	!
;      	0029	!
;      	0030	
;      	0031	LINKAGE
;      	0032		REG0 = BLISS(REGISTER=0);
;      	0033	
;      	0034	FORWARD
;      	0035		ZAPPROC,
;      	0036		PARSE,
;      	0037		GETCHAR,
;      	0038		GETNUMANDDEL,
;      	0039		REG0 LOOKUP,
;      	0040		EXECUTE,
;      	0041		OPENANDTYPE,
;      	0042		SELRELREG;
;      	0043	
;      	0044	
;      	0045	REQUIRE STDMAC.BEG;
;      	0046	!	STDMAC.BEG - WIDELY USED STANDARD MACROS
;      	0047	!
;      	0068	SWITCHES LIST; SWITCHES LIST;
;      	0069	!	VERSION 000101
;      	0070	!	LAST MODIFIED 10/27/75 RBG
;      	0119	SWITCHES LIST; SWITCHES LIST;
;      	0120	!	STDMAC.BEG LAST LINE

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.49	STDMAC.BEG	Page 1-1
;
;      	0121	
;      	0122	REQUIRE STDSTR.BEG;
;      	0123	!	STDSTR.BEG - WIDELY USED STANDARD STRUCTURES
;      	0124	!
;      	0145	SWITCHES LIST; SWITCHES LIST;
;      	0146	!	VERSION 000003
;      	0147	!	LAST MODIFIED 02/28/74 RBG
;      	0161	SWITCHES LIST; SWITCHES LIST;
;      	0162	!	STDSTR.BEG LAST LINE
;      	0163	
;      	0164	REQUIRE ZAP.BEG;
;      	0165	!	ZAP.BEG - BEGIN FILE FOR ZAP
;      	0166	!
;      	0187	SWITCHES LIST; SWITCHES LIST;
;      	0188	!
;      	0189	!	VERSION 000003
;      	0190	!	LAST MODIFIED 08/06/76
;      	0191	!
;      	0192	
;      	0193	STRUCTURE
;      	0194		BUFFER[I] = (.BUFFER + .I)<0,16>;
;      	0195	
;      	0196	BIND
;      	0197		SEGSIZ=	5;		! LENGTH OF SEGMENT TABLE ENTRY
;      	0198	
;      	0199	MACRO
;      	0200		SEGBLK=	0,0,16$,	! STARTING DISK BLOCK (SEGMENT "NAME")
;      	0201		SEGLOW=	1,0,16$,	! LOW ADDRESS
;      	0202		SEGHIGH=2,0,16$,	! HIGH ADDRESS PLUS ONE
;      	0203		SEGVIRT=3,0,16$,	! VIRTUAL ORIGIN DATA
;      	0204		SEGVIR1=3,0,16$,	! HIGH ORDER WORD OF SEGVIRT
;      	0205		SEGVIR0=4,0,16$,	! LOW ORDER WORD OF SEGVIRT
;      	0206		SEGVIRW=4,0,9$,		! WORD OFFSET PART OF SEGVIRT
;      	0207		SEGNEXT=5,0,16$;	! OFFSET TO NEXT ENTRY
;      	0208	
;      	0209	MACRO
;      	0210		ABSOLUTE=0,0,1$,	! /AB SWITCH BIT
;      	0211		READONLY=0,1,1$,	! /RO SWITCH BIT
;      	0212		LISTING=0,2,1$;		! /LI SWITCH BIT
;      	0213	
;      	0214	BIND
;      	0215		NORELO=	0,		! NO SUCH RELOCATION REGISTER
;      	0216		ADROOB=	1,		! ADDRESS NOT WITHIN SEGMENT
;      	0217		NOSEGM=	2,		! NO SUCH SEGMENT
;      	0218		BADARG=	3,		! BAD ARGUMENT COUNT
;      	0219		NOSPEC=	4,		! NO SUCH SPECIAL REGISTER
;      	0220		BADCMD=	5,		! UNRECOGNIZABLE COMMAND
;      	0221		NOOPEN=	6,		! NO OPEN LOCATION
;      	0222		NOBYTE=	7,		! CANNOT USE IN BYTE MODE
;      	0223		BADTSK=	12,		! BAD TASK IMAGE
;      	0224		VFYREJ=	13,		! VERIFY REJECT
;      	0225		NOTYET=	14,		! NOT YET IMPLEMENTED

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.51	ZAP.BEG	Page 1-2
;
;      	0226		OVFLSG=	15;		! SEGMENT TABLE OVERFLOW
;      	0227	
;      	0228	BIND
;      	0229		SIGXIT=	-1,		! SIGNAL VALUE FOR EXIT
;      	0230		SIGADR=	-2;		! SIGNAL VALUE FOR ADDRESS ERROR
;      	0231	
;      	0232	!
;      	0233	!	ZAP.BEG LAST LINE
;      	0234	
;      	0235	
;      	0236	PSECT
;      	0237		CODE=" ", OWN=" ", GLOBAL="$GBL", PLIT="$PLIT";
;      	0238	
;      	0239	EXTERNAL
;      	0240		REG0 ERRPRT,		! OUTPUT ERROR MESSAGE
;      	0241		OPENLOC,		! OPEN LOCATION IN TASK SPACE
;      	0242		COMAND,			! GET COMMAND
;      	0243		REG0 BYTSXT,		! BYTE SIGN EXTENSION
;      	0244		REG0 OUTC,		! OUTPUT CHARACTER
;      	0245		OUTN,			! OUTPUT NUMBER
;      	0246		EOL,			! OUTPUT RECORD
;      	0247		REG0 OUTR50;		! OUTPUT RADIX50
;      	0248	
;      	0249	EXTERNAL
;      	0250		REALDOT,		! POINT TO "DOT" IN BUFFER
;      	0251		WRITBK,			! BLOCK WRITE-BACK FLAG
;      	0252		PBYTVECT CMLADR,	! POINTER TO COMMAND LINE ADDRESS
;      	0253		CMLLEN;			! POINTER TO COMMAND LINE LENGTH
;      	0254	
;      	0255	BIND
;      	0256		PARSIZ=	2,		! SIZE OF PARSE TABLE ENTRY
;      	0257		PARENT=	3;		! NUMBER OF PARSE TABLE ENTRIES
;      	0258	
;      	0259	MACRO
;      	0260		PARVAL=	0,0,16$,	! PARTAB - VALUE FIELD
;      	0261		PARREG=	0,0,3$,		! PARTAB - REGISTER FIELD
;      	0262		PARSEG=	1,0,16$,	! PARTAB - SEGMENT FIELD
;      	0263		PARNEXT=2,0,16$;	! PARTAB - NEXT ENTRY
;      	0264	
;      	0265	OWN
;      	0266		COUNT,			! DIGIT COUNT IN NUM
;      	0267		ARGS,			! ARGUMENT COUNT
;      	0268		INTREGS[23] = 		! INTERNAL REGISTERS
;      	0269		    (0,0,0,0,0,-1,0,8:-1,8:0),
;      	0270		BWMODE,			! MODE OF OPEN LOCATION
;      	0271		VRMODE,			! VIRTUAL OR SPECIAL-REG ADDRESS FLAG
;      	0272		FORM,			! TYPEOUT FORMAT
;      	0273		CHARNDX,		! INDEX INTO COMMAND LINE
;      	0274		BLOCK PFLAG,		! PARSE FLAGS
;      	0275		NUM,			! NUMBER
;      	0276		DEL,			! ITS RIGHT DELIMITER
;      	0277		VECBLOCK PARTAB[PARENT,PARSIZ],	! PARSE RESULTS

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.51	ZPROC.B11	Page 1-3
;
;      	0278		TYPE,			! COMMAND TYPE CODE
;      	0279		SAVEDOT,		! SAVED DOT FOR "<" COMMAND
;      	0280		VIRTDOT,		! VIRTUAL VALUE OF DOT
;      	0281		VIRTSEG;		! SEGMENT PART OF DOT
;      	0282	
;      	0283	BIND
;      	0284		ARGREG=	INTREGS[0],	! $A REGISTER
;      	0285		CONREG=	INTREGS[1],	! $C REGISTER
;      	0286		FMTREG=	INTREGS[2],	! $F REGISTER
;      	0287		HIGHREG=INTREGS[3],	! $H REGISTER
;      	0288		LOWREG=	INTREGS[4],	! $L REGISTER
;      	0289		MASKREG=INTREGS[5],	! $M REGISTER
;      	0290		QUANREG=INTREGS[6],	! $Q REGISTER
;      	0291		RELOCV=	INTREGS[7],	! $R REGISTERS
;      	0292		RELOCS=	INTREGS[15];
;      	0293	
;      	0294	MACRO
;      	0295		SYMBNUM=0,0,1$,		! PFLAG - SYMBOLIC NUMBER
;      	0296		SPECREG=0,1,1$;		! PFLAG - SPECIAL REGISTER
;      	0297	
;      	0298	MACRO
;      	0299		INDEX(STR)=
;      	0300		    LOOKUP(UPLIT ASCIZ STR)$;
;      	0301	
;      	0302	
;      	0303	
;      	0304	
;      	0305	
;      	0306	COMMENT ! ZAPPROC
;      	0307	!
;      	0308	! FUNCTION
;      	0309	!	PROCESSING DRIVER
;      	0310	!
;      	0311	! INPUTS
;      	0312	!	NONE
;      	0313	!
;      	0314	! OUTPUTS
;      	0315	!	NONE
;      	0316	!
;      	0317	
;      	0318	GLOBAL ROUTINE ZAPPROC=
;      	0319	    BEGIN
;      	0320	
;      	0321	    REPEAT
;      	0322		BEGIN
;      	0323		COMAND();
;      	0324		PARSE();
;      	0325		EXECUTE();
;      	0326		END;
;      	0327	
;      	0328	    END;
;      	0329	

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.52	ZPROC.B11	Page 1-4
;
	.TITLE	ZPROC
	.IDENT	/000006/
	.PSECT	 

R$0=%0
R$1=%1
R$2=%2
R$3=%3
R$4=%4
R$5=%5
SP=%6
PC=%7


	.SBTTL	ZAPPROC
ZAPPROC:
L$3:	JSR	PC,COMAND
	JSR	PC,PARSE
	JSR	PC,EXECUTE
	BR	L$3

; Routine Size:  7





;      	0330	COMMENT ! PARSE
;      	0331	!
;      	0332	! FUNCTION
;      	0333	!	PARSE A USER COMMAND
;      	0334	!
;      	0335	! INPUTS
;      	0336	!	CMLADR	- ADDRESS OF USER'S COMMAND (IN ASCII)
;      	0337	!	CMLLEN	- LENGTH OF USER'S COMMAND IN BYTES
;      	0338	!
;      	0339	! OUTPUTS
;      	0340	!	PARTAB	- THE PARSED ADDRESSES
;      	0341	!	ARGS	- THE ARGUMENT COUNT
;      	0342	!	TYPE	- THE COMMAND TYPE
;      	0343	!	VALUE	- NONE
;      	0344	!
;      	0345	
;      	0346	ROUTINE PARSE=
;      	0347	    BEGIN
;      	0348	    LOCAL
;      	0349		OP;			! PREVIOUS OPERATOR
;      	0350	    BIND
;      	0351		SEG = PARTAB[0,PARSEG],	! SEGMENT PART OF CURRENT EXPRESSION
;      	0352		EXP = PARTAB[0,PARVAL];	! VALUE PART OF CURRENT EXPRESSION
;      	0353	

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.52	ZPROC.B11	Page 1-5
;
;      	0354	    TYPE = -2;
;      	0355	    CHARNDX = -1;
;      	0356	    EXP = SEG = COUNT = OP = ARGS = PFLAG = 0;
;      	0357	
;      	0358	    REPEAT
;      	0359		BEGIN
;      	0360		GETNUMANDDEL();
;      	0361		EXP =
;      	0362		    BEGIN
;      	0363		    CASE .OP OF
;      	0364			SET
;      	0365	
;      	0366			.NUM;					! 0 - NONE
;      	0367	
;      	0368			.EXP + .NUM;				! 1 - PLUS
;      	0369	
;      	0370			.EXP - .NUM;				! 2 - MINUS
;      	0371	
;      	0372			BEGIN LOCAL T;				! 3 - STAR
;      	0373			T = .EXP * 4;
;      	0374			(.T + .EXP) * #10 + .NUM
;      	0375			END;
;      	0376	
;      	0377			TES
;      	0378		    END;
;      	0379		OP = 0;
;      	0380	
;      	0381		CASE INDEX(":,;+-*.?1Q$")+1 OF
;      	0382		    SET
;      	0383	
;      	0384		    ! 0 - NOT FOUND
;      	0385		    !
;      	0386		    EXITLOOP;
;      	0387	
;      	0388		    ! 1 - COLON
;      	0389		    !
;      	0390		    BEGIN
;      	0391		    SEG = .EXP;
;      	0392		    EXP = 0
;      	0393		    END;
;      	0394	
;      	0395		    ! 2 - COMMA
;      	0396		    !
;      	0397		    IF .EXP GTRU 7
;      	0398		    THEN
;      	0399			RETURN ERRPRT(NORELO)
;      	0400		    ELSE
;      	0401			BEGIN
;      	0402			SEG = .RELOCS[.EXP];
;      	0403			EXP = .RELOCV[.EXP];
;      	0404			OP = 1;
;      	0405			END;

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.53	ZPROC.B11	Page 1-6
;
;      	0406	
;      	0407		    ! 3 - SEMICOLON
;      	0408		    !
;      	0409		    IF
;      	0410			(ARGS = .ARGS + 1) LEQ 2
;      	0411		    THEN
;      	0412			BEGIN
;      	0413			LOCAL
;      	0414			    PTR1,PTR2;
;      	0415			PTR1 = PARTAB[PARENT-1,PARNEXT];
;      	0416			PTR2 = PARTAB[PARENT-2,PARNEXT];
;      	0417			DECR I FROM PARSIZ*(PARENT-1)-1 TO 0 DO
;      	0418			    BEGIN
;      	0419			    PTR1 = .PTR1 - 2;
;      	0420			    PTR2 = .PTR2 - 2;
;      	0421			    .PTR1 = ..PTR2
;      	0422			    END;
;      	0423			SEG = EXP = COUNT = 0
;      	0424			END
;      	0425		    ELSE
;      	0426			RETURN ERRPRT(BADARG);
;      	0427	
;      	0428		    ! 4 - PLUS
;      	0429		    !
;      	0430		    OP = 1;
;      	0431	
;      	0432		    ! 5 - MINUS
;      	0433		    !
;      	0434		    OP = 2;
;      	0435	
;      	0436		    ! 6 - STAR
;      	0437		    !
;      	0438		    OP = 3;
;      	0439	
;      	0440		    ! 7 - DOT
;      	0441		    !
;      	0442		    BEGIN
;      	0443		    SEG = .VIRTSEG;
;      	0444		    NUM = .VIRTDOT;
;      	0445		    PFLAG[SYMBNUM] = TRUE
;      	0446		    END;
;      	0447	
;      	0448		    ! 8 - C
;      	0449		    !
;      	0450		    BEGIN
;      	0451		    NUM = .CONREG;
;      	0452		    PFLAG[SYMBNUM] = TRUE
;      	0453		    END;
;      	0454	
;      	0455		    ! 9 - Q
;      	0456		    !
;      	0457		    BEGIN

; BLIS11 V.76078	Thursday 4-Nov-76 3:46.54	ZPROC.B11	Page 1-7
;
;      	0458		    NUM = .QUANREG;
;      	0459		    PFLAG[SYMBNUM] = TRUE
;      	0460		    END;
;      	0461	
;      	0462		    ! 10 - DOLLAR
;      	0463		    !
;      	0464		    BEGIN
;      	0465		    GETNUMANDDEL();
;      	0466		    IF .DEL EQL "R"
;      	0467		    THEN
;      	0468			IF .NUM GTRU 7
;      	0469			THEN
;      	0470			    RETURN ERRPRT(NORELO)
;      	0471			ELSE
;      	0472			    NUM = RELOCV[.NUM]
;      	0473		    ELSE
;      	0474			IF (NUM = INDEX("ACFHLMQ")) LSS 0
;      	0475			THEN
;      	0476			    RETURN ERRPRT(NOSPEC)
;      	0477			ELSE
;      	0478			    NUM = INTREGS[.NUM];
;      	0479		    PFLAG[SPECREG] = PFLAG[SYMBNUM] = TRUE;
;      	0480		    END
;      	0481	
;      	0482		    TES
;      	0483		END;
;      	0484	
;      	0485	    IF .ARGS NEQ 0 OR .COUNT NEQ 0
;      	0486	    THEN
;      	0487		ARGS = .ARGS + 1;
;      	0488	    TYPE = INDEX("X?M?J^_@></\""'%=K?1WN?1ORLV");
;      	0489	    NOVALUE
;      	0490	    END;
;      	0491	


	.SBTTL	PARSE
PARSE:
	JSR	R$1,$SAV5
	TST	-(SP)
	MOV	#-2,TYPE
	MOV	#-1,CHARNDX
	MOV	#PARTAB,R$1
	MOV	#PARTAB+2,R$5
	MOV	#ARGS,R$4
	CLR	PFLAG
	CLR	@R$4
	CLR	-(SP)
	CLR	COUNT
	CLR	@R$5
L$49:	CLR	@R$1
L$7:	JSR	PC,GETNUMANDD

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.01	ZPROC.B11	Page 1-8
;
	MOV	#NUM,R$3
	MOV	@SP,R$2
	ASL	R$2
	ADD	L$8(R$2),PC
L$8:	.WORD	L$10-L$8
	.WORD	L$11-L$8
	.WORD	L$12-L$8
	.WORD	L$13-L$8
	.WORD	L$14-L$8
L$10:	MOV	@R$3,@R$1
	BR	L$9
L$11:	ADD	@R$3,@R$1
	BR	L$9
L$12:	SUB	@R$3,@R$1
	BR	L$9
L$13:	MOV	@R$1,R$2
	ASL	R$2
	ASL	R$2
	ADD	@R$1,R$2
	ASL	R$2
	ASL	R$2
	ASL	R$2
	ADD	@R$3,R$2
	MOV	R$2,@R$1
	BR	L$9
L$14:	CLR	@R$1
L$9:	CLR	@SP
	MOV	#P$AAA,R$0
	JSR	PC,LOOKUP
	INC	R$0
	ASL	R$0
	ADD	L$15(R$0),PC
L$15:	.WORD	U$4-L$15
	.WORD	L$18-L$15
	.WORD	L$19-L$15
	.WORD	L$20-L$15
	.WORD	L$21-L$15
	.WORD	L$22-L$15
	.WORD	L$23-L$15
	.WORD	L$24-L$15
	.WORD	L$25-L$15
	.WORD	L$26-L$15
	.WORD	L$27-L$15
L$18:	MOV	@R$1,@R$5
	BR	L$49
L$19:	CMP	@R$1,#7
	BLOS	L$29
L$56:	CLR	R$0
	BR	L$53
L$29:	MOV	@R$1,R$2
	ASL	R$2
	MOV	INTREGS+36(R$2),@R$5

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.01	ZPROC.B11	Page 1-9
;
	MOV	@R$1,R$2
	ASL	R$2
	MOV	INTREGS+16(R$2),@R$1
	BR	L$21
L$20:	INC	@R$4
	CMP	@R$4,#2
	BGT	L$32
	MOV	#PARTAB+14,R$0
	MOV	#PARTAB+10,R$2
	MOV	#3,2(SP)
L$33:	MOV	-(R$2),-(R$0)
	DEC	2(SP)
	BPL	L$33
	CLR	COUNT
	CLR	@R$1
	CLR	@R$5
L$57:	BR	L$7
L$32:	MOV	#3,R$0
	BR	L$53
L$21:	MOV	#1,@SP
	BR	L$7
L$22:	MOV	#2,@SP
	BR	L$7
L$23:	MOV	#3,@SP
	BR	L$7
L$24:	MOV	VIRTSEG,@R$5
	MOV	VIRTDOT,@R$3
	BR	L$55
L$25:	MOV	INTREGS+2,@R$3
	BR	L$55
L$26:	MOV	INTREGS+14,@R$3
L$55:	BISB	#1,PFLAG
	BR	L$7
L$27:	JSR	PC,GETNUMANDD
	CMP	DEL,#122
	BNE	L$37
	CMP	@R$3,#7
	BHI	L$56
	MOV	@R$3,R$2
	ASL	R$2
	ADD	#INTREGS+16,R$2
	BR	L$50
L$37:	MOV	#P$AAB,R$0
	JSR	PC,LOOKUP
	MOV	R$0,@R$3
	BGE	L$43
	MOV	#4,R$0
L$53:	JSR	PC,ERRPRT
	BR	L$6
L$43:	MOV	@R$3,R$2
	ASL	R$2
	ADD	#INTREGS,R$2

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.01	ZPROC.B11	Page 1-10
;
L$50:	MOV	R$2,@R$3
	BISB	#3,PFLAG
	BR	L$57
U$4:	TST	@R$4
	BNE	L$45
	TST	COUNT
	BEQ	L$47
L$45:	INC	@R$4
L$47:	MOV	#P$AAC,R$0
	JSR	PC,LOOKUP
	MOV	R$0,TYPE
L$6:	CMP	(SP)+,(SP)+
	RTS	PC

; Routine Size:  183


	.PSECT	$PLIT
P$AAA:	.WORD	26072,25473,25055
	.WORD	77456,22121,0
P$AAB:	.WORD	41501,44106,46514
	.WORD	121
P$AAC:	.WORD	6530,57012,40137
	.WORD	36076,56057,23442
	.WORD	36445,77513,47127
	.WORD	47577,46122,126



;      	0492	COMMENT ! GETCHAR
;      	0493	!
;      	0494	! FUNCTION
;      	0495	!	GET ONE CHARACTER FROM THE USER COMMAND
;      	0496	!
;      	0497	! INPUTS
;      	0498	!	USER COMMAND BUFFER
;      	0499	!	CHARNDX	- INDEX OF THE NEXT CHARACTER TO BE SCANNED
;      	0500	!
;      	0501	! OUTPUTS
;      	0502	!	VALUE	- CHARACTER
;      	0503	!		A NULL LINE IS TRANSLATED TO <LF>
;      	0504	!		BLANK IS TRANSLATED TO PLUS
;      	0505	!		A <CR> IS RETURNED WHEN THE COUNT IS EXHAUSTED
;      	0506	!
;      	0507	
;      	0508	ROUTINE GETCHAR=
;      	0509	    BEGIN
;      	0510	    IF .CMLLEN EQL 0
;      	0511	    THEN
;      	0512		"?J"
;      	0513	    ELSE

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.02	ZPROC.B11	Page 1-11
;
;      	0514		IF (CHARNDX = .CHARNDX + 1) GEQ .CMLLEN
;      	0515		THEN
;      	0516		    "?M"
;      	0517		ELSE
;      	0518		    IF .CMLADR[.CHARNDX] EQL " "
;      	0519		    THEN
;      	0520			"+"
;      	0521		    ELSE
;      	0522			.CMLADR[.CHARNDX]
;      	0523	    END;
;      	0524	

	.PSECT	 

	.SBTTL	GETCHAR
GETCHAR:
	MOV	R$1,-(SP)
	TST	CMLLEN
	BNE	L$60
	MOV	#12,R$0
	BR	L$67
L$60:	MOV	#CHARNDX,R$1
	INC	@R$1
	CMP	@R$1,CMLLEN
	BLT	L$63
	MOV	#15,R$0
	BR	L$67
L$63:	MOV	CMLADR,R$0
	ADD	@R$1,R$0
	CMPB	@R$0,#40
	BNE	L$66
	MOV	#53,R$1
	MOV	R$1,R$0
	BR	L$67
L$66:	MOVB	@R$0,R$0
	BIC	#177400,R$0
L$67:	MOV	(SP)+,R$1
	RTS	PC

; Routine Size:  31





;      	0525	COMMENT ! GETNUMANDDEL
;      	0526	!
;      	0527	! FUNCTION
;      	0528	!	RETURN A NUMERIC QUANTITY AND ITS FOLLOWING DELIMITER
;      	0529	!	FROM THE COMMAND STRING
;      	0530	!

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.02	ZPROC.B11	Page 1-12
;
;      	0531	! INPUTS
;      	0532	!	PFLAG	- SET IF A SYMBOLIC NUMBER (LIKE C OR Q OR DOT)
;      	0533	!		PRECEDED
;      	0534	!
;      	0535	! OUTPUTS
;      	0536	!	NUM	- VALUE OF THE NUMERIC QUANTITY (ZERO IF NONE)
;      	0537	!	DEL	- DELIMITER CHARACTER (ASCII)
;      	0538	!	COUNT	- COUNT OF NUMERIC DIGITS
;      	0539	!	VALUE	- NONE
;      	0540	!
;      	0541	
;      	0542	ROUTINE GETNUMANDDEL=
;      	0543	    BEGIN
;      	0544	    IF .PFLAG[SYMBNUM]
;      	0545	    THEN
;      	0546		BEGIN
;      	0547		PFLAG[SYMBNUM] = FALSE;
;      	0548		COUNT = .COUNT + 1;
;      	0549		END
;      	0550	    ELSE
;      	0551		NUM = 0;
;      	0552	
;      	0553	    DEL = GETCHAR();
;      	0554	    WHILE
;      	0555		(.DEL GEQ "0" AND .DEL LEQ "9") OR
;      	0556		(.DEL GEQ "A" AND .DEL LEQ "F")
;      	0557	    DO
;      	0558		BEGIN
;      	0559		NUM = .NUM*16 + .DEL - (IF .DEL LEQ "9" THEN "0" ELSE ("A"-10));
;      	0560		COUNT = .COUNT + 1;
;      	0561		DEL = GETCHAR();
;      	0562		END;
;      	0563	    NOVALUE
;      	0564	    END;
;      	0565	


	.SBTTL	GETNUMANDD
GETNUMANDD:
	JSR	R$1,$SAV5
	MOV	#COUNT,R$1
	MOV	#NUM,R$2
	BITB	#1,PFLAG
	BEQ	L$70
	BICB	#1,PFLAG
	INC	@R$1
	BR	L$72
L$70:	CLR	@R$2
L$72:	MOV	#DEL,R$3
L$83:	JSR	PC,GETCHAR
	MOV	R$0,@R$3
	MOV	R$0,R$4

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.05	ZPROC.B11	Page 1-13
;
	CMP	R$4,#60
	BLT	L$75
	CMP	R$4,#71
	BLE	L$76
L$75:	CMP	R$4,#101
	BLT	U$104
	CMP	R$4,#106
	BGT	U$104
L$76:	MOV	@R$2,R$0
	ASL	R$0
	ASL	R$0
	ASL	R$0
	ASL	R$0
	ADD	R$4,R$0
	CMP	R$4,#71
	BGT	L$80
	MOV	#60,R$5
	BR	L$81
L$80:	MOV	#67,R$5
L$81:	SUB	R$5,R$0
	MOV	R$0,@R$2
	INC	@R$1
	BR	L$83
U$104:	RTS	PC

; Routine Size:  53





;      	0566	COMMENT ! LOOKUP(P0)
;      	0567	!
;      	0568	! FUNCTION
;      	0569	!	SEARCH FOR A CHARACTER AND RETURN ITS INDEX IN AN ASCIZ STRING
;      	0570	!
;      	0571	! INPUTS
;      	0572	!	P0	- POINTER TO AN ASCIZ STRING
;      	0573	!	DEL	- CHARACTER TO BE SEARCHED FOR
;      	0574	!
;      	0575	! OUTPUTS
;      	0576	!	VALUE	- INDEX OF THE CHARACTER (-1 IF NOT PRESENT)
;      	0577	!
;      	0578	
;      	0579	ROUTINE REG0 LOOKUP(P0)=
;      	0580	    BEGIN
;      	0581	    LOCAL
;      	0582		PBYTVECT P;
;      	0583	    P = .P0;
;      	0584	    UNTIL
;      	0585		.P[0] EQL 0

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.05	ZPROC.B11	Page 1-14
;
;      	0586	    DO
;      	0587		BEGIN
;      	0588		IF .DEL<0,8> EQL .P[0]
;      	0589		    THEN EXITLOOP .P-.P0;
;      	0590		P = .P + 1
;      	0591		END
;      	0592	    END;
;      	0593	


	.SBTTL	LOOKUP
LOOKUP:
	JSR	R$1,$SAV2
	MOV	R$0,R$2
	MOV	R$2,R$1
L$86:	TSTB	@R$1
	BEQ	L$87
	CMPB	DEL,@R$1
	BNE	L$90
	MOV	R$1,R$0
	SUB	R$2,R$0
	RTS	PC
L$90:	INC	R$1
	BR	L$86
L$87:	MOV	#-1,R$0
U$124:	RTS	PC

; Routine Size:  17





;      	0594	COMMENT ! EXECUTE
;      	0595	!
;      	0596	! FUNCTION
;      	0597	!	EXECUTE THE USER COMMAND
;      	0598	!
;      	0599	! INPUTS
;      	0600	!	TYPE	- COMMAND TYPE
;      	0601	!	PARTAB	- THE PARSED ADDRESSES
;      	0602	!	ARGS	- ARGUMENT COUNT
;      	0603	!
;      	0604	! OUTPUTS
;      	0605	!	THE COMMAND EXECUTED
;      	0606	!	VALUE	- NONE
;      	0607	!
;      	0608	
;      	0609	ROUTINE EXECUTE=
;      	0610	    BEGIN
;      	0611	    BIND

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.06	ZPROC.B11	Page 1-15
;
;      	0612		BYTVECT CASEVAL = UPLIT(BYTS(
;      	0613		    0,1,11,2,2,2,2,2,2,2,3,3,3,3,3,4,5,6,6,6,7,8,9,10,12,0)),
;      	0614		BYTVECT SUBCASE = UPLIT(BYTS(
;      	0615		    0,0,0,0,1,2,4,5,6,3,0,3,1,4,2,0,0,0,0,0,0,0,0,0,0,0)),
;      	0616		BYTVECT MAXARGS = UPLIT(BYTS(
;      	0617		    3,3,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,2,2,3,1,0));
;      	0618	    LOCAL
;      	0619		SUBC;
;      	0620	
;      	0621	
;      	0622	    IF .MAXARGS[.TYPE+2] LSS .ARGS<0,8>
;      	0623		THEN RETURN ERRPRT(BADARG);
;      	0624	
;      	0625	    SUBC = .SUBCASE[.TYPE+2];
;      	0626	    CASE .CASEVAL[.TYPE+2] OF
;      	0627		SET
;      	0628	
;      	0629		! 0 - ERROR
;      	0630		!
;      	0631		0;
;      	0632	
;      	0633		! 1 - NOT FOUND
;      	0634		!
;      	0635		ERRPRT(BADCMD);
;      	0636	
;      	0637		! 2 - <CR>, <LF>, ^, _, @, >, <
;      	0638		!
;      	0639		BEGIN
;      	0640		IF .ARGS NEQ 0
;      	0641		THEN
;      	0642		    CASE .BWMODE+.VRMODE OF
;      	0643			SET
;      	0644	
;      	0645			! 0 - NO OPEN LOCATION
;      	0646			!
;      	0647			ERRPRT(NOOPEN);
;      	0648	
;      	0649			! 1 - OPEN AS BYTE
;      	0650			!
;      	0651			BEGIN
;      	0652			(.REALDOT)<0,8> = .PARTAB[0,PARVAL];
;      	0653			WRITBK = TRUE;
;      	0654			END;
;      	0655	
;      	0656			! 2 - OPEN AS WORD
;      	0657			!
;      	0658			BEGIN
;      	0659			.REALDOT = .PARTAB[0,PARVAL];
;      	0660			WRITBK = TRUE;
;      	0661			END;
;      	0662	
;      	0663			! 3 - SPECIAL REGISTER OPEN AS BYTE

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.07	ZPROC.B11	Page 1-16
;
;      	0664			!
;      	0665			(.REALDOT)<0,8> = .PARTAB[0,PARVAL];
;      	0666	
;      	0667			! 4 - SPECIAL REGISTER OPEN AS WORD
;      	0668			!
;      	0669			.REALDOT = .PARTAB[0,PARVAL]
;      	0670	
;      	0671			TES;
;      	0672		IF .SUBC NEQ 0
;      	0673		THEN
;      	0674		    IF .SUBC GEQ 4 AND .BWMODE
;      	0675		    THEN
;      	0676			BEGIN
;      	0677			ERRPRT(NOBYTE);
;      	0678			BWMODE = VRMODE = 0
;      	0679			END
;      	0680		    ELSE
;      	0681			BEGIN
;      	0682			VIRTDOT =
;      	0683			    BEGIN
;      	0684			    CASE .SUBC-1 OF
;      	0685				SET
;      	0686	
;      	0687				! LINEFEED
;      	0688				!
;      	0689				SAVEDOT = .VIRTDOT + .BWMODE;
;      	0690	
;      	0691				! UP-ARROW
;      	0692				!
;      	0693				SAVEDOT = .VIRTDOT - .BWMODE;
;      	0694	
;      	0695				! LESS THAN
;      	0696				!
;      	0697				.SAVEDOT + .BWMODE;
;      	0698	
;      	0699				! BACK-ARROW
;      	0700				!
;      	0701				.VIRTDOT + ..REALDOT + 2;
;      	0702	
;      	0703				! AT SIGN
;      	0704				!
;      	0705				..REALDOT;
;      	0706	
;      	0707				! GREATER THAN
;      	0708				!
;      	0709				.VIRTDOT + BYTSXT(..REALDOT)*2 + 2
;      	0710	
;      	0711				TES
;      	0712			    END;
;      	0713			IF .VIRTDOT THEN BWMODE = 1;
;      	0714			OPENANDTYPE()
;      	0715			END

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.08	ZPROC.B11	Page 1-17
;
;      	0716		END;
;      	0717	
;      	0718		! 3 - /, \, ", ', %
;      	0719		!
;      	0720		BEGIN
;      	0721		BIND
;      	0722		    BYTVECT FORMTAB = UPLIT(BYTS(
;      	0723			0,2,4,0,2,0));
;      	0724	
;      	0725		IF .ARGS NEQ 0
;      	0726		THEN
;      	0727		    BEGIN
;      	0728		    VIRTSEG = .PARTAB[0,PARSEG];
;      	0729		    VIRTDOT = SAVEDOT = .PARTAB[0,PARVAL];
;      	0730		    VRMODE = .PFLAG[SPECREG] * 2;
;      	0731		    END;
;      	0732		BWMODE =
;      	0733		    BEGIN
;      	0734		    IF .SUBC GEQ 3 OR .VIRTDOT
;      	0735		    THEN
;      	0736			1
;      	0737		    ELSE
;      	0738			2
;      	0739		    END;
;      	0740		FORM = .FORMTAB[.SUBC];
;      	0741		OPENANDTYPE()
;      	0742		END;
;      	0743	
;      	0744		! 4 - =
;      	0745		!
;      	0746		BEGIN
;      	0747		OUTN(QUANREG=.PARTAB[0,PARVAL],4);
;      	0748		EOL();
;      	0749		END;
;      	0750	
;      	0751		! 5 - K
;      	0752		!
;      	0753		BEGIN
;      	0754		IF .ARGS NEQ 2
;      	0755		THEN
;      	0756		    BEGIN
;      	0757		    PARTAB[1,PARSEG] = .VIRTSEG;
;      	0758		    PARTAB[1,PARVAL] = .VIRTDOT
;      	0759		    END;
;      	0760		IF .ARGS NEQ 0
;      	0761		THEN
;      	0762		    IF
;      	0763			(PARTAB[0,PARVAL] =
;      	0764			    SELRELREG(.PARTAB[1,PARSEG],.PARTAB[1,PARVAL]))
;      	0765			LSS 0
;      	0766		    THEN
;      	0767			RETURN ERRPRT(NORELO);

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.11	ZPROC.B11	Page 1-18
;
;      	0768		OUTC("=");
;      	0769		OUTC(.PARTAB[0,PARREG] + "0");
;      	0770		OUTC(",");
;      	0771		OUTN(QUANREG=.PARTAB[1,PARVAL]-.RELOCV[.PARTAB[0,PARREG]],4);
;      	0772		EOL()
;      	0773		END;
;      	0774	
;      	0775		! 6 - E, W, N
;      	0776		!
;      	0777		ERRPRT(NOTYET);
;      	0778	
;      	0779		! 7 - F
;      	0780		!
;      	0781		ERRPRT(NOTYET);
;      	0782	
;      	0783		! 8 - O
;      	0784		!
;      	0785		BEGIN
;      	0786		LOCAL
;      	0787		    N;
;      	0788		N = (IF .ARGS NEQ 1 THEN .PARTAB[1,PARVAL] ELSE .VIRTDOT);
;      	0789		OUTC("_");
;      	0790		OUTN(N=.PARTAB[0,PARVAL] - .N - 2, 4);
;      	0791		OUTC(" ");
;      	0792		OUTC(">");
;      	0793		OUTN(QUANREG=.N/2, 4);
;      	0794		EOL()
;      	0795		END;
;      	0796	
;      	0797		! 9 - R
;      	0798		!
;      	0799		CASE .ARGS OF
;      	0800		    SET
;      	0801	
;      	0802		    ! 0 - CLEAR ALL
;      	0803		    !
;      	0804		    DECR I FROM 7 TO 0 DO
;      	0805			BEGIN
;      	0806			RELOCV[.I] = #177777;
;      	0807			RELOCS[.I] = 0;
;      	0808			END;
;      	0809	
;      	0810		    ! 1 - CLEAR ONE
;      	0811		    !
;      	0812		    IF .PARTAB[0,PARVAL] GTRU 7
;      	0813		    THEN
;      	0814			ERRPRT(NORELO)
;      	0815		    ELSE
;      	0816			BEGIN
;      	0817			RELOCV[.PARTAB[0,PARVAL]] = #177777;
;      	0818			RELOCS[.PARTAB[0,PARVAL]] = 0;
;      	0819			END;

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.14	ZPROC.B11	Page 1-19
;
;      	0820	
;      	0821		    ! 2 - SET ONE
;      	0822		    !
;      	0823		    IF .PARTAB[0,PARVAL] GTRU 7
;      	0824		    THEN
;      	0825			ERRPRT(NORELO)
;      	0826		    ELSE
;      	0827			BEGIN
;      	0828			RELOCV[.PARTAB[0,PARVAL]] = .PARTAB[1,PARVAL];
;      	0829			RELOCS[.PARTAB[0,PARVAL]] = .PARTAB[1,PARSEG];
;      	0830			END
;      	0831	
;      	0832		    TES;
;      	0833	
;      	0834		! 10 - L
;      	0835		!
;      	0836		ERRPRT(NOTYET);
;      	0837	
;      	0838		! 11 - X
;      	0839		!
;      	0840		SIGNAL SIGXIT;
;      	0841	
;      	0842		! 12 - V
;      	0843		!
;      	0844		IF .QUANREG NEQ .PARTAB[0,PARVAL]
;      	0845		THEN
;      	0846		    BEGIN
;      	0847		    ERRPRT(VFYREJ);
;      	0848		    SIGNAL SIGXIT
;      	0849		    END
;      	0850	
;      	0851		TES;
;      	0852	    NOVALUE
;      	0853	    END;
;      	0854	


	.SBTTL	EXECUTE
EXECUTE:
	JSR	R$1,$SAV5
	TST	-(SP)
	MOV	TYPE,R$5
	CMPB	P$AAF+2(R$5),ARGS
	BHIS	L$95
	MOV	#3,R$0
	BR	L$200
L$95:	MOV	TYPE,R$1
	CLR	@SP
	BISB	P$AAE+2(R$1),@SP
	MOV	#VIRTDOT,R$3
	MOV	#PARTAB,R$5
	MOV	#PARTAB+6,R$4

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.30	ZPROC.B11	Page 1-20
;
	MOV	#BWMODE,R$2
	MOVB	P$AAD+2(R$1),R$1
	ASL	R$1
	BIC	#177000,R$1
	ADD	L$97(R$1),PC
L$97:	.WORD	L$98-L$97
	.WORD	L$100-L$97
	.WORD	L$101-L$97
	.WORD	L$102-L$97
	.WORD	L$103-L$97
	.WORD	L$104-L$97
	.WORD	L$109-L$97
	.WORD	L$109-L$97
	.WORD	L$107-L$97
	.WORD	L$108-L$97
	.WORD	L$109-L$97
	.WORD	L$110-L$97
	.WORD	L$111-L$97
L$100:	MOV	#5,R$0
L$200:	JMP	L$183
L$101:	MOV	#REALDOT,R$1
	TST	ARGS
	BEQ	L$113
	MOV	@R$2,R$0
	ADD	VRMODE,R$0
	ASL	R$0
	ADD	L$114(R$0),PC
L$114:	.WORD	L$116-L$114
	.WORD	L$117-L$114
	.WORD	L$118-L$114
	.WORD	L$119-L$114
	.WORD	L$120-L$114
L$116:	MOV	#6,R$0
	JSR	PC,ERRPRT
	BR	L$113
L$117:	MOVB	@R$5,@0(R$1)
	BR	L$176
L$118:	MOV	@R$5,@0(R$1)
L$176:	MOV	#1,WRITBK
	BR	L$113
L$119:	MOVB	@R$5,@0(R$1)
	BR	L$113
L$120:	MOV	@R$5,@0(R$1)
L$113:	TST	@SP
	BEQ	L$201
	CMP	@SP,#4
	BLT	L$125
	BITB	#1,@R$2
	BEQ	L$125
	MOV	#7,R$0
	JSR	PC,ERRPRT
	CLR	VRMODE

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.30	ZPROC.B11	Page 1-21
;
	CLR	@R$2
	BR	L$201
L$125:	MOV	@SP,R$0
	DEC	R$0
	ASL	R$0
	ADD	L$128(R$0),PC
L$128:	.WORD	L$130-L$128
	.WORD	L$131-L$128
	.WORD	L$132-L$128
	.WORD	L$133-L$128
	.WORD	L$134-L$128
	.WORD	L$135-L$128
L$130:	MOV	@R$3,R$0
	ADD	@R$2,R$0
	BR	L$178
L$131:	MOV	@R$3,R$0
	SUB	@R$2,R$0
L$178:	MOV	R$0,SAVEDOT
	BR	L$197
L$132:	MOV	SAVEDOT,R$0
	ADD	@R$2,R$0
	BR	L$197
L$133:	MOV	@R$3,R$0
	ADD	@0(R$1),R$0
	BR	L$198
L$134:	MOV	@0(R$1),@R$3
	BR	L$129
L$135:	MOV	@0(R$1),R$0
	JSR	PC,BYTSXT
	ASL	R$0
	ADD	@R$3,R$0
L$198:	ADD	#2,R$0
L$197:	MOV	R$0,@R$3
L$129:	BITB	#1,@R$3
	BEQ	L$187
	MOV	#1,@R$2
	BR	L$187
L$102:	TST	ARGS
	BEQ	L$141
	MOV	PARTAB+2,VIRTSEG
	MOV	@R$5,SAVEDOT
	MOV	@R$5,@R$3
	MOVB	PFLAG,R$1
	BIC	#177775,R$1
	MOV	R$1,VRMODE
L$141:	CMP	@SP,#3
	BGE	L$143
	BITB	#1,@R$3
	BEQ	L$145
L$143:	MOV	#1,@R$2
	BR	L$146
L$145:	MOV	#2,@R$2

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.30	ZPROC.B11	Page 1-22
;
L$146:	CLR	FORM
	MOV	@SP,R$4
	BISB	P$AAG(R$4),FORM
L$187:	JSR	PC,OPENANDTYP
L$201:	BR	L$203
L$103:	MOV	@R$5,INTREGS+14
	MOV	@R$5,-(SP)
	BR	L$191
L$104:	CMP	ARGS,#2
	BEQ	L$148
	MOV	VIRTSEG,@R$4
	MOV	@R$3,PARTAB+4
L$148:	TST	ARGS
	BEQ	L$151
	MOV	@R$4,-(SP)
	MOV	PARTAB+4,-(SP)
	JSR	PC,SELRELREG
	MOV	R$0,@R$5
	BGE	L$153
	CLR	R$0
	JSR	PC,ERRPRT
	BR	L$188
L$153:	CMP	(SP)+,(SP)+
L$151:	MOV	#75,R$0
	JSR	PC,OUTC
	MOVB	@R$5,R$0
	BIC	#177770,R$0
	ADD	#60,R$0
	JSR	PC,OUTC
	MOV	#54,R$0
	JSR	PC,OUTC
	MOVB	@R$5,R$0
	ASL	R$0
	BIC	#177760,R$0
	MOV	INTREGS+16(R$0),R$0
	NEG	R$0
	ADD	PARTAB+4,R$0
	MOV	R$0,INTREGS+14
	MOV	R$0,-(SP)
L$191:	MOV	#4,-(SP)
	JSR	PC,OUTN
	JSR	PC,EOL
L$188:	CMP	(SP)+,(SP)+
	BR	L$98
L$107:	CMP	ARGS,#1
	BEQ	L$157
	MOV	PARTAB+4,R$1
	BR	L$158
L$157:	MOV	@R$3,R$1
L$158:	MOV	#137,R$0
	JSR	PC,OUTC
	MOV	@R$5,R$0

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.30	ZPROC.B11	Page 1-23
;
	SUB	R$1,R$0
	SUB	#2,R$0
	MOV	R$0,R$1
	MOV	R$1,-(SP)
	MOV	#4,-(SP)
	JSR	PC,OUTN
	MOV	#40,R$0
	JSR	PC,OUTC
	MOV	#76,R$0
	JSR	PC,OUTC
	MOV	R$1,@SP
	ASR	@SP
	MOV	@SP,INTREGS+14
	MOV	#4,-(SP)
	JSR	PC,OUTN
	JSR	PC,EOL
	ADD	#6,SP
L$203:	BR	L$98
L$108:	MOV	ARGS,R$1
	ASL	R$1
	ADD	L$159(R$1),PC
L$159:	.WORD	L$161-L$159
	.WORD	L$162-L$159
	.WORD	L$163-L$159
L$161:	MOV	#7,R$0
L$164:	MOV	R$0,R$1
	ASL	R$1
	MOV	#-1,INTREGS+16(R$1)
	CLR	INTREGS+36(R$1)
	DEC	R$0
	BMI	L$98
	BR	L$164
L$162:	CMP	@R$5,#7
	BHI	L$199
	MOV	@R$5,R$0
	ASL	R$0
	MOV	#-1,INTREGS+16(R$0)
	CLR	INTREGS+36(R$0)
	BR	L$98
L$163:	CMP	@R$5,#7
	BLOS	L$170
L$199:	CLR	R$0
	BR	L$183
L$170:	MOV	@R$5,R$0
	ASL	R$0
	MOV	PARTAB+4,INTREGS+16(R$0)
	MOV	@R$4,INTREGS+36(R$0)
	BR	L$98
L$109:	MOV	#16,R$0
L$183:	JSR	PC,ERRPRT
	BR	L$98
L$110:	MOV	#-1,R$0

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.30	ZPROC.B11	Page 1-24
;
	JMP	$SIGNL
L$111:	CMP	INTREGS+14,@R$5
	BEQ	L$98
	MOV	#15,R$0
	JSR	PC,ERRPRT
	BR	L$110
L$98:	TST	(SP)+
	RTS	PC

; Routine Size:  348


	.PSECT	$PLIT
P$AAD:	.WORD	400,1013,1002
	.WORD	1002,1002,1403
	.WORD	1403,2003,3005
	.WORD	3006,4007,5011
	.WORD	14
P$AAE:	.WORD	0,0,1001
	.WORD	2404,1406,1400
	.WORD	2001,2,0
	.WORD	0,0,0
	.WORD	0
P$AAF:	.WORD	1403,400,401
	.WORD	401,401,401
	.WORD	401,401,1002
	.WORD	1002,1001,1402
	.WORD	1
P$AAG:	.WORD	1000,4,2



;      	0855	COMMENT ! OPENANDTYPE
;      	0856	!
;      	0857	! FUNCTION
;      	0858	!	OPEN AND TYPE A LOCATION IN THE CURRENT TYPEOUT FORMAT
;      	0859	!
;      	0860	! INPUTS
;      	0861	!	VRMODE	- ZERO IF IN TASK ADDRESS SPACE, NONZERO IF IN
;      	0862	!		REAL ADDRESS SPACE (AS FOR DOLLAR REGISTERS)
;      	0863	!	VIRTSEG	- SEGMENT-ID FOR ADDRESS
;      	0864	!	VIRTDOT	- ADDRESS
;      	0865	!	BWMODE	- OPEN LOCATION FORMAT
;      	0866	!		0 - NONE;  1 - BYTE;  2 - WORD
;      	0867	!
;      	0868	! OUTPUTS
;      	0869	!	LOCATION OPENED AND CONTENTS TYPED
;      	0870	!	VALUE	- NONE
;      	0871	!
;      	0872	
;      	0873	ROUTINE OPENANDTYPE=

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.31	ZPROC.B11	Page 1-25
;
;      	0874	    BEGIN
;      	0875	    BIND
;      	0876		VECTOR REGIDS = UPLIT(
;      	0877		    "A","C","F","H","L","M","Q",
;      	0878		    "0R","1R","2R","3R","4R","5R","6R","7R"),
;      	0879		BYTVECT FORMCHAR = UPLIT
;      	0880		    "/\""'%%";
;      	0881	    LOCAL
;      	0882		C,
;      	0883		REG,
;      	0884		FORMAT,
;      	0885		VAL;
;      	0886	
;      	0887	    ENABLE
;      	0888		SIGADR: (BWMODE=VRMODE=VIRTSEG=VIRTDOT=0;  NOVALUE)
;      	0889	    ELBANE;
;      	0890	
;      	0891	    IF .VRMODE EQL 0
;      	0892	    THEN
;      	0893		BEGIN
;      	0894		OPENLOC(.VIRTSEG,.VIRTDOT AND NOT 1);
;      	0895		IF .VIRTDOT THEN REALDOT = .REALDOT + 1;
;      	0896		END
;      	0897	    ELSE
;      	0898		BEGIN
;      	0899		REALDOT = .VIRTDOT;
;      	0900		IF
;      	0901		    .REALDOT GEQU ARGREG AND
;      	0902		    .REALDOT LSSU RELOCV[8]
;      	0903		THEN
;      	0904		    C = .REGIDS[(.REALDOT-ARGREG)/2]
;      	0905		ELSE
;      	0906		    BEGIN
;      	0907		    BWMODE = VRMODE = 0;
;      	0908		    RETURN ERRPRT(NOSPEC)
;      	0909		    END
;      	0910		END;
;      	0911	
;      	0912	    FORMAT = .FORM + .BWMODE<0,1>;
;      	0913	
;      	0914	    VAL =
;      	0915		BEGIN
;      	0916		CASE .BWMODE OF
;      	0917		    SET
;      	0918	
;      	0919		    RETURN NOVALUE;
;      	0920	
;      	0921		    .(.REALDOT)<0,8>;
;      	0922	
;      	0923		    ..REALDOT
;      	0924	
;      	0925		    TES

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.32	ZPROC.B11	Page 1-26
;
;      	0926		END;
;      	0927	
;      	0928	    IF .VRMODE EQL 0
;      	0929	    THEN
;      	0930		BEGIN
;      	0931		OUTN(.VIRTSEG,(IF .VIRTSEG<8,8> NEQ 0 THEN 4 ELSE 2));
;      	0932		OUTC(":");
;      	0933		IF
;      	0934		    (REG = SELRELREG(.VIRTSEG,.VIRTDOT)) LSS 0
;      	0935		    OR .FMTREG NEQ 0
;      	0936		THEN
;      	0937		    OUTN(.VIRTDOT,4)
;      	0938		ELSE
;      	0939		    BEGIN
;      	0940		    OUTN(.REG,1);
;      	0941		    OUTC(",");
;      	0942		    OUTN(.VIRTDOT - .RELOCV[.REG],4)
;      	0943		    END
;      	0944		END
;      	0945	    ELSE
;      	0946		BEGIN
;      	0947		OUTC("$");
;      	0948		OUTC(.C);
;      	0949		OUTC(.C<8,8>)
;      	0950		END;
;      	0951	    OUTC(.FORMCHAR[.FORMAT]);
;      	0952	    OUTC(" ");
;      	0953	
;      	0954	    QUANREG = .VAL;
;      	0955	
;      	0956	    CASE .FORMAT OF
;      	0957		SET
;      	0958	
;      	0959		OUTN(.VAL,4);
;      	0960	
;      	0961		OUTN(.VAL,2);
;      	0962	
;      	0963		BEGIN
;      	0964		OUTC(.VAL);
;      	0965		OUTC(.VAL<8,8>)
;      	0966		END;
;      	0967	
;      	0968		OUTC(.VAL);
;      	0969	
;      	0970		OUTR50(.VAL);
;      	0971	
;      	0972		OUTR50(.VAL)
;      	0973	
;      	0974		TES;
;      	0975	
;      	0976	    EOL();
;      	0977	    NOVALUE

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.34	ZPROC.B11	Page 1-27
;
;      	0978	    END;
;      	0979	

	.PSECT	 

	.SBTTL	OPENANDTYP
OPENANDTYP:
	JSR	R$1,$SAV5
	SUB	#6,SP
	MOV	#6,R$0
	JSR	PC,$ENABL
	.WORD	L$207-L$206
L$206:	CMP	SIGVAL,#-2
	BNE	L$208
	CLR	VIRTDOT
	CLR	VIRTSEG
	CLR	VRMODE
	CLR	BWMODE
	BR	L$247
L$208:	JMP	$SIGN1
L$207:	MOV	VIRTDOT,R$5
	TST	VRMODE
	BNE	L$210
	MOV	VIRTSEG,-(SP)
	MOV	R$5,-(SP)
	BIC	#1,@SP
	JSR	PC,OPENLOC
	BITB	#1,VIRTDOT
	BEQ	L$211
	INC	REALDOT
L$211:	CMP	(SP)+,(SP)+
	BR	L$218
L$210:	MOV	R$5,REALDOT
	CMP	R$5,#INTREGS
	BLO	L$216
	CMP	#INTREGS+36,R$5
	BLOS	L$216
	SUB	#INTREGS,R$5
	ASR	R$5
	ASL	R$5
	MOV	P$AAH(R$5),R$2
	BR	L$218
L$216:	CLR	VRMODE
	CLR	BWMODE
	MOV	#4,R$0
	JSR	PC,ERRPRT
	BR	L$222
L$218:	MOV	FORM,R$3
	CLR	R$5
	BITB	#1,BWMODE
	BEQ	L$219
	INC	R$5

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.38	ZPROC.B11	Page 1-28
;
L$219:	ADD	R$5,R$3
	MOV	BWMODE,R$5
	ASL	R$5
	ADD	L$220(R$5),PC
L$220:	.WORD	L$222-L$220
	.WORD	L$223-L$220
	.WORD	L$224-L$220
L$222:	MOV	@SP,SIGREG
L$247:	JMP	U$314
L$223:	CLR	R$4
	BISB	@REALDOT,R$4
	BR	L$221
L$224:	MOV	@REALDOT,R$4
L$221:	TST	VRMODE
	BNE	L$226
	MOV	VIRTSEG,-(SP)
	TSTB	VIRTSEG+1
	BEQ	L$228
	MOV	#4,-(SP)
	BR	L$229
L$228:	MOV	#2,-(SP)
L$229:	JSR	PC,OUTN
	MOV	#72,R$0
	JSR	PC,OUTC
	MOV	VIRTSEG,@SP
	MOV	VIRTDOT,-(SP)
	JSR	PC,SELRELREG
	MOV	R$0,R$5
	BLT	L$230
	TST	INTREGS+4
	BEQ	L$232
L$230:	MOV	VIRTDOT,-(SP)
	MOV	#4,-(SP)
	JSR	PC,OUTN
	BR	L$233
L$232:	MOV	R$5,-(SP)
	MOV	#1,-(SP)
	JSR	PC,OUTN
	MOV	#54,R$0
	JSR	PC,OUTC
	MOV	R$5,@SP
	ASL	@SP
	MOV	@SP,R$5
	MOV	INTREGS+16(R$5),@SP
	NEG	@SP
	ADD	VIRTDOT,@SP
	MOV	#4,-(SP)
	JSR	PC,OUTN
	TST	(SP)+
L$233:	ADD	#12,SP
	BR	L$234
L$226:	MOV	#44,R$0

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.38	ZPROC.B11	Page 1-29
;
	JSR	PC,OUTC
	MOV	R$2,R$0
	JSR	PC,OUTC
	MOV	R$2,R$0
	CLRB	R$0
	SWAB	R$0
	JSR	PC,OUTC
L$234:	CLR	R$0
	BISB	P$AAI(R$3),R$0
	JSR	PC,OUTC
	MOV	#40,R$0
	JSR	PC,OUTC
	MOV	R$4,INTREGS+14
	MOV	R$3,R$0
	ASL	R$0
	ADD	L$235(R$0),PC
L$235:	.WORD	L$237-L$235
	.WORD	L$238-L$235
	.WORD	L$239-L$235
	.WORD	L$240-L$235
	.WORD	L$241-L$235
	.WORD	L$241-L$235
L$237:	MOV	R$4,-(SP)
	MOV	#4,-(SP)
	BR	L$244
L$238:	MOV	R$4,-(SP)
	MOV	#2,-(SP)
L$244:	JSR	PC,OUTN
	CMP	(SP)+,(SP)+
	BR	L$236
L$239:	MOV	R$4,R$0
	JSR	PC,OUTC
	MOV	R$4,R$0
	CLRB	R$0
	SWAB	R$0
	BR	L$245
L$240:	MOV	R$4,R$0
L$245:	JSR	PC,OUTC
	BR	L$236
L$241:	MOV	R$4,R$0
	JSR	PC,OUTR50
L$236:	JSR	PC,EOL
	MOV	@SIGREG,SIGREG
U$314:	ADD	#6,SP
	RTS	PC

; Routine Size:  223


	.PSECT	$PLIT
P$AAH:	.WORD	101,103,106

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.38	ZPROC.B11	Page 1-30
;
	.WORD	110,114,115
	.WORD	121,51060,51061
	.WORD	51062,51063,51064
	.WORD	51065,51066,51067
P$AAI:	.WORD	56057,23442,22445



;      	0980	COMMENT ! SELRELREG(SEG,OFF)
;      	0981	!
;      	0982	! FUNCTION
;      	0983	!	SELECT A RELOCATION REGISTER FOR TYPEOUT
;      	0984	!
;      	0985	! INPUTS
;      	0986	!	SEG	- SEGMENT-ID
;      	0987	!	OFF	- ADDRESS
;      	0988	!
;      	0989	! OUTPUTS
;      	0990	!	VALUE	- RELOCATION REGISTER (-1 IF NONE)
;      	0991	!		WHOSE SEGMENT-ID MATCHES AND WHOSE CONTENTS
;      	0992	!		ARE CLOSEST TO AND LESS THAN THE ADDRESS
;      	0993	!
;      	0994	
;      	0995	ROUTINE SELRELREG(SEG,OFF)=
;      	0996	    BEGIN
;      	0997	    LOCAL
;      	0998		REG,
;      	0999		DIST;
;      	1000	
;      	1001	    DIST = REG = -1;
;      	1002	    DECR I FROM 7 TO 0 DO
;      	1003		BEGIN
;      	1004		IF
;      	1005		    .SEG EQL .RELOCS[.I] AND
;      	1006		    .OFF GEQU .RELOCV[.I] AND
;      	1007		    .OFF-.RELOCV[.I] LEQU .DIST
;      	1008		THEN
;      	1009		    BEGIN
;      	1010		    REG = .I;
;      	1011		    DIST = .OFF - .RELOCV[.I];
;      	1012		    END
;      	1013		END;
;      	1014	    .REG
;      	1015	    END;
;      	1016	

	.PSECT	 

	.SBTTL	SELRELREG
SELRELREG:
	JSR	R$1,$SAV4
	MOV	#-1,R$0

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.40	ZPROC.B11	Page 1-31
;
	MOV	R$0,R$3
	MOV	#7,R$4
L$250:	MOV	R$4,R$2
	ASL	R$2
	CMP	16(SP),INTREGS+36(R$2)
	BNE	L$253
	CMP	14(SP),INTREGS+16(R$2)
	BLO	L$253
	MOV	14(SP),R$1
	SUB	INTREGS+16(R$2),R$1
	CMP	R$3,R$1
	BLO	L$253
	MOV	R$4,R$0
	MOV	14(SP),R$3
	SUB	INTREGS+16(R$2),R$3
L$253:	DEC	R$4
	BPL	L$250
	RTS	PC

; Routine Size:  31





;      	1017	END
;      	1018	ELUDOM


	.SBTTL	ZPROC
ZPROC:

; Routine Size:  0


	.PSECT	 
BWMODE:	.BLKW
DEL:	.BLKW
NUM:	.BLKW
INTREGS:	.WORD	0,0,0
	.WORD	0,0,177777
	.WORD	0,177777,177777
	.WORD	177777,177777,177777
	.WORD	177777,177777,177777
	.WORD	0,0,0
	.WORD	0,0,0
	.WORD	0,0
PFLAG:	.BLKW
VIRTSEG:	.BLKW
TYPE:	.BLKW

; BLIS11 V.76078	Thursday 4-Nov-76 3:47.41	ZPROC.B11	Page 1-32
;
VRMODE:	.BLKW
SAVEDOT:	.BLKW
COUNT:	.BLKW
PARTAB:	.BLKW	6
FORM:	.BLKW
CHARNDX:	.BLKW
VIRTDOT:	.BLKW
ARGS:	.BLKW
	.GLOBL	ZPROC
	.GLOBL	COMAND
	.GLOBL	OUTN
	.GLOBL	CMLADR
	.GLOBL	BYTSXT
	.GLOBL	OPENLOC
	.GLOBL	OUTR50
	.GLOBL	OUTC
	.GLOBL	REALDOT
	.GLOBL	WRITBK
	.GLOBL	EOL
	.GLOBL	CMLLEN
	.GLOBL	ZAPPROC
	.GLOBL	ERRPRT

	.GLOBL	$SAV5
	.GLOBL	$SAV4
	.GLOBL	$SAV2
	.GLOBL	$ENABL
	.GLOBL	$SIGN1
	.GLOBL	$SIGNL
	.GLOBL	SIGREG
	.GLOBL	SIGVAL









; Size:  893+124
; Run Time:  39 Seconds
; Core Used:  21K
; Compilation Complete

	.END	



