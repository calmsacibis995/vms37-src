	.TITLE	SLPR11
	.IDENT	/V03000/

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; VERSION 11
;
; D.N. CUTLER 4-JAN-72
;
; MODIFICATIONS:
;
;	C. MONIA  11-SEP-75
;
;		CM001 -- ADD USER-SPECIFIED AUDIT TRAIL
;
;	C. MONIA  17-JAN-77
;
;		CM003 -- ADD /CM SWITCH. INCREASE INDIRECT FILE DEPTH.
;
;	E. BAATZ  10-MAR-77
;
;		EB029 -- MAKE GCML PASS LOWER-CASE CHARACTERS
;
;	E. BAATZ 28-JUN-77
;
;		EB061 -- A "-" AS THE LAST CHARACTER OF A LINE SHOULD NOT
;			INDICATE A CONTINUATION LINE
;
;	JAK001	24-AUG-77	ADD EXIT WITH STATUS
;
;	R. NEWLAND  03-OCT-78
;
;		RN001 -- 132 CHARACTER LINES, VAX CONDITIONALS, FIRST
;			 AUDIT TRAIL CHARACTER, AUDIT TRAIL TRUNCATION
;
;
;	B. ALIMONTI	31-OCT-78
;
;		BA003	--  ADDITION OF CRC CHECKSUM CALCULATION
;
;
;	B. ALIMONTI	1-NOV-78
;
;		BA004  --  IMPLEMENT SOME TAILORED FCS ROUTINES TO BRING
;			  DOWN MEMORY SIZE
;
;
;	B. ALIMONTI	8-NOV-78
;
;		BA005  --  ADDITION OF TRUNCATION SWITCH TO TURN ON
;			   AND OFF (DEFAULT IS OFF) LINE TRUNCATION MSG
;
;
;	B. ALIMONTI	
;
;		BA006  --  CORRECTIONS BA003 AND BA004
;
; SOURCE LANGUAGE INPUT PROGRAM (SLIPR)
;
; MACRO LIBRARY CALLS
;

	.MCALL	GCMLD$
	GCMLD$			;DEFINE GET COMMAND LINE CONTROL BLOCK

;
; EQUATED SYMBOLS
;
; OPTION SWITCH WORD BIT DEFINITIONS
;

AP$ND==000001			;APPEND ";**-NEW**" AND COMPRESS (0=YES)
DB$LL==000002			;DOUBLE SPACE LINE LISTING (1=YES)
DE$LF==000004			;DELETE CORECTION INPUT FILE (1=YES)
ID$RT==000010			;INDIRECT FILE RECOGNIZATION (0=YES)
CR$FI==000020			;CORECTION INPUT FILE SPECIFIED (1=YES)
LL$ST==000040			;LINE LISTING FILE SPECIFIED (1=YES)
SR$CO==000100			;SOURCE OUTPUT FILE SPECIFIED (1=YES)
BL$NK==000200			;BLANK FILL TO PAD LINES (0=YES)
SP$OL==000400			;SPOOL LISTING FILE (0=YES)
CM$PR==001000			;COMPRESS AUDIT TRAILS (1=YES)
LN$TR==002000			;LINE WAS TRUNCATED BY AUDIT TRAIL (1=YES)	;RN001
CK$SM==004000			;CALCULATE CRC VALUE				;BA003
TR$UN==010000			;LINE TRUNCATION SWITCH VALUE			;BA005

;
; MACRO LIBRARY CALLS
;

	.MCALL	CLOSE$,EXIT$S,FINIT$,PUT$S,RCML$				;BA006
										;**-1
;
; LOCAL DATA
;
; MISC VARIABLES-ADJACENCY ASSUMED
;

$AUBEG::.BLKW	1		;ADDRESS OF AUDIT TRAIL FIRST BYTE
$AULGH::.BLKW	1		;LENGTH OF AUDIT SEGMENT
$CFNMB::.BLKW	1		;CORRECTION INPUT FILE LINE NUMBER
$CMFLG::.BLKW	1		;COMMAND INPUT SOLICATION FLAG
$CMLGH::.BLKW	1		;MAX. SIZE OF COMPRESSED LINE
$LNDEL::.BLKW	1		;NUMBER OF LINES DELETED
$LNUMB::.BLKW	1		;CURRENT LINE NUMBER
$PDSIZ::.BLKW	1		;PAD SPECIFIED BY USER
$PDLGH::.BLKW	1		;LENGTH OF PAD FIELD
$PLNMB::.BLKW	1		;LINE IN CURRENT PAGE
$SWTCH::.BLKW	1		;OPTION SWITCH WORD
$HDSIZ::.BLKW	1		;SIZE OF HEADING IN BYTES
	.WORD	$HEADG		;HEADER BUFFER POINTER
$HEADG::.BLKW	46.		;PAGE HEADING
$OUTBF::.BLKW	40.		;ERROR MESSAGE OUTPUT BUFFER
	.IF DF $VAX								;RN001
RECRS:	.WORD	0		;RECURSION FLAG					;RN001
	.ENDC									;RN001
TEMP:	.BLKB	100		;TEMP CSI BUFFER
SPSAV:	.BLKW	1		;INITIAL SP VALUE
$EXSTS::.BLKW	1		; EXIT STATUS WORD
$LNLGH::.BLKW	1		; LINE LENGTH					;RN001
$TRNCT::.BLKW	1		;NUMBER OF LINES TRUNCATED BY AUDIT TRAIL	;RN001
 										;BA003
 										;BA003
;										;BA003
; LOCATIONS FOR OUTPUT OF CRC CHECKSUM VALUE					;BA003
;										;BA003
 										;BA003
ARGBLK:	.BLKW 	1		;ARGUEMENT BLOCK FOR CRC VALUE OF $EDMSG	;BA003
CSMSG1:	.ASCIZ	<15><12><12>/SLP -- COMMAND FILE CHECKSUM IS %P/		;BA003
CSMSG2:	.ASCIZ	<15><12><12>/SLP -- *DIAG*-ERROR IN COMMAND FILE %X CHECKSUM/	;BA003
	.EVEN									;BA003
$ERFLG::.WORD	0		;SEVER ERROR FLAG, 1=DON'T OUT CRC, 0=OK	;BA003
$FCOML::.WORD	0		;FIRST COMMAND LINE FLAG, 1=YES, 0=NO		;BA003
$CSSV::.WORD	0		;CS SWITCH VALUE (USER SPECIFIED CHECKSUM)	;BA003
 										;BA003
 										;BA003

;
; FORM CONTROL
;

FORM:	.BYTE	14		;FORM FEED

;
; CONTROL BYTE STRING
;

CNTRL:	.BYTE	'<,'/,'-,'%,'\	;

;
; INITIAL LINE SUFFIX
;

NEW:	.ASCIZ	/;**NEW**/	;

	.EVEN

;
; USER AUDIT TRAIL
;
	.PSECT	$$AUD0,D,OVR
$NEW::				;
	.BLKB	8.		;
	.PSECT	$$AUD1,D
ENEW:	.BYTE	0		;

	.EVEN

	.PSECT


;-
; **-$SLIPR-SOURCE LANGUAGE INPUT PROGRAM
;-

$SLIPR::FINIT$			;INITIALIZE FILE STORAGE REGION
	MOV	$CMIPT,R0	;GET COMMAND INPUT RECORD BLOCK ADDRESS
	MOV	#EX$SUC,$EXSTS		; ASSUME SUCCESS
	BICB	#GE.CON!GE.CLO,G.MODE(R0) ;CLEAR CONTINUATION LINE
				; AND CLEAR CLOSE AFTER BITS
	BISB	#GE.LC,G.MODE(R0) ;SET TO PASS LOWER-CASE THROUGH
	MOV	SP,SPSAV	;SAVE INITIAL SP VALUE
SLIPR1:	MOV	#$SWTCH,R3	;GET ADDRESS OF SWITCH OPTION WORD
	CLR	$ERFLG		;CLEAR SEVER ERROR FLAG				;BA003
	CLR	$CRCVL		;CLR CRC CKSUM VALUE IN PREP OF CRC CALCULATION	;BA003
	CLR	$CSSV		;CLEAR CS SWITCH VALUE IN PREP OF CSI$2 MACRO	;BA003
	MOV	SPSAV,SP	;SET INITIAL SP VALUE
	MOV	#$CFNMB,R0	;GET ADDRESS OF MISC DATA
	MOV	#<$HDSIZ-$CFNMB>/2+1,R1 ; GET NUMBER TO CLEAR
5$:	CLR	(R0)+		; CLEAR SPECIFIED LOCATIONS
	DEC	R1		; DECREMENT COUNT
	BNE	5$		; IF NE GO AGAIN
	MOV	#<$LNBEN-$LNBST>,$LNLGH ; SET MAX LINE LENGTH			;RN001
	BIS	#AP$ND,(R3)	; SURPRESS AUDIT TRAIL
	INC	$FCOML		;INDICATE FIRST COMMAND LINE OF COMMAND FILE	;BA003
	CALL	$GTCML		;GET COMMAND INPUT LINE
SLIPR3:	BCC	10$		;IF CC OKAY
	JMP	SLPXT		;EXIT
10$:										;RN001
	.IF DF $VAX								;RN001
	TST	RECRS		;COMMAND RECURSION?				;RN001
	BNE	15$		;IF NE NO					;RN001
	INC	RECRS		;SET COMMAND RECURSION FLAG			;RN001
	MOV	$CMIPT,R0	;GET ADDRESS OF COMMAND INPUT BLOCK		;RN001
	CALL	.GCML4		;RESET COMMAND BLOCK				;RN001
15$:										;RN001
	.ENDC									;RN001
	CALL	$CMPRS		;COMPRESS LINE					;RN001
	CLR	$FCOML		;CLEAR FIRST COMMAND LINE FLAG			;BA003
	CLR	(R3)		;SET INITIAL OPTION SWITCH WORD			;**-1
	MOV	#L$LGTH-A$UDEF+7&^C7,$PDLGH ; SET DEFAULT MARGIN
	MOV	#A$UDEF,$AULGH	; SET DEFAULT AUDIT FIELD SIZE
	MOV	#$LNDES,R0	;GET ADDRESS OF LINE DESCRIPTOR
	TST	(R0)		;NULL LINE?
	BEQ	SLIPR1		;IF EQ YES
	CMPB	#'/,$LNBUF	;EXIT COMMAND?
	BNE	20$		;IF NE CONTINUE
	JMP	SLPXT		;EXIT
20$:	MOV	#TEMP,R1	;GET ADDRESS OF CSI BUFFER
	CALL	$SYNTX		;ANALYZE SYNTAX OF LINE
	BCS	SLIPR1		;IF CS SYNTAX ERROR
	MOV	$SRCPT,R0	;GET SOURCE OUTPUT RECORD BLOCK
	MOV	#TEMP,R1	;GET ADDRESS OF CSI BLOCK
	CALL	$SCANO		;SCAN FOR OUTPUT FILE
	BCS	31$		;IF CS NO OUTPUT FILE
	BIS	#SR$CO,(R3)	;SET SOURCE OUTPUT BIT
31$:	MOV	$LSTPT,R0	;GET LINE LISTING RECORD BLOCK
	MOV	#TEMP,R1	;GET ADDRESS OF CSI BLOCK
	CALL	$SCANO		;SCAN FOR OUTPUT FILE
	BCS	4$		;IF CS NO OUTPUT FILE
	BIS	#LL$ST,(R3)	;SET LINE LISTING BIT
	PUT$S	$LSTPT,#FORM,#1	;OUTPUT A FORM FEED				;BA004
4$:	MOV	$CFIPT,R0	;GET CORRECTION INPUT FILE RECORD BLOCK		;**-1
	MOV	#TEMP,R1	;GET ADDRESS OF CSI BLOCK
	CALL	$SCANI		;SCAN FOR INPUT FILE
	BCS	5$		;IF CS NO INPUT FILE
	BIS	#CR$FI,(R3)	;SET CORRECTION FILE BIT
5$:	BIT	#CR$FI!LL$ST!SR$CO,(R3);ANY FILE SPECIFIED?
	BEQ	SLIPR1		;IF EQ NO-IGNOR LINE
	CALL	$OPNFL		;OPEN ALL FILES
	BCC	51$		; IF C/C OK
	JMP	$RSTRT		; ELSE RESTART
51$:	MOV	#$LNDES,R0	; GET LINE DESCRIPTOR ADDRESS
	MOV	(R0)+,$HDSIZ	;SET SIZE OF HEADING IN BYTES
	ADD	#10,$HDSIZ	;ALLOW FOR LINE SPACING CHARACTERS
	MOV	(R0),R0		;GET ADDRESS OF LINE BUFFER
	MOV	#$HEADG,R1	;GET ADDRESS OF HEADING BUFFER
6$:	MOVB	(R0)+,(R1)+	;MOVE LINE TO HEADING
	BNE	6$		;
	DEC	R1		;BACK UP R1
	MOV	(PC)+,R0	;GET CR,LF
	.BYTE	15,12		;
	MOV	#10,R2		;SET REPEAT COUNT
61$:	MOVB	R0,(R1)+	;STORE A BYTE
	SWAB	R0		;SWAP HALVES
	DEC	R2		;REPEAT?
	BGT	61$		;IF GT YES
	INC	$CMFLG		;SET NON COMMAND INPUT
	CMP	$AULGH,#ENEW-$NEW ; LEGAL AUDIT LENGTH?
	BHI	90$		;IF HI NO
60$:	MOV	#$PDSIZ,R0	;GET LENGTH OF PAD FIELD
	TST	(R0)+		;PAD FIELD SPECIFIED?
	BEQ	63$		;IF EQ NO
	MOV	-2(R0),(R0)	;SET UP MARGIN
63$:	ADD	#7,(R0)		;ROUND UP TO NEXT TAB LIMIT
	BCS	90$		;IF C/S ERROR
	BIC	#7,(R0)		;CLEAR EXCESS
	MOV	$AULGH,R1	;GET AUDIT FIELD SIZE
	ADD	(R0),R1		;ADD PAD LENGTH
	BCS	90$		;IF C/S ERROR
	CMP	R1,$LNLGH	;LEGAL LENGTH					;RN001
	BLOS	95$		;IF LOS YES					;**-1
90$:				;
	JMP	ERXT		;ELSE ERROR
95$:				;
	MOV	#NEW,R0		;GET ADDRESS OF DEFAULT AUDIT TRAIL
	MOV	#$NEW,R1	;GET ADDRESS OF BUFFER
	MOVB	(R0),AUDTCH	;RESET FIRST CHARACTER OF DELETE AUDIT TRAIL	;RN001
100$:	MOVB	(R0)+,(R1)+	;SETUP STRING
	BNE	100$		; LOOP UNTIL END OF STRING
	MOV	#$CMLGH,R0	;GET ADDRESS OF TRUNCATION LENGTH
	TST	(R0)		;TRUNCATION LENGTH SPECIFIED?
	BNE	97$		;IF NE YES
	MOV	$PDLGH,(R0)	;SET DEFAULT TRUNCATION LENGTH
97$:				;
	ADD	#7,(R0)		;ROUND TO TAB STOP
	BCS	ERXT		;IF C/S ERROR
	BIC	#7,(R0)		;
	CLR	$TRNCT		;INITIALISE LINES TRUNCATED COUNT		;RN001
	CALL	SLPR11		;CALL EDITOR
	BCS	SLPXT		;IF CS EXIT
	BIT	#SP$OL,$SWTCH	;SPOOL OUTPUT?
	BNE	$RSTRT		;IF NE NO
	MOV	$LSTPT,R0	;POINT R0 TO LISTING FILE FDB			;BA004
	CALL	.PRINT		;PRINT LISTING FILE				;BA004
$RSTRT::BIT	#DE$LF,$SWTCH	;DELETE CORRECTION INPUT FILE?			;**-1
	BEQ	10$		;IF EQ NO
	MOV	$CFIPT,R0	;POINT R0 TO CORRECTION INPUT FILE FDB		;BA004
	CALL	.DLFNB		;DELETE CORRECTION INPUT FILE			;BA004
10$:	CLOSE$	$CFIPT		;CLOSE CORRECTION INPUT FILE			;**-1
	CLOSE$	$LSTPT		;CLOSE LINE LISTING FILE
	CLOSE$	$SRCPT		;CLOSE SOURCE OUTPUT FILE
	BIT	#CK$SM,$SWTCH	;CHECKSUM WANTED?				;BA003
	BEQ	20$		;IF EQ, NO, SO DON'T "TELL" CRC CHECKSUM VALUE	;BA003
	TST	$ERFLG		;WAS THERE A SEVER ERROR?			;BA003
	BNE	20$		;IF NE, YES, SO DON'T OUTPUT CRC CHECKSUM VALUE	;BA003
	CALL	$CRCTL		;"TELL" CRC CHECKSUM VALUE			;BA003
	BCC	20$		;IF CC, NO I/O ERROR				;BA003
	MOV	#EX$SEV,$EXSTS	;SET EXIT STATUS				;BA003
	RCML$	$CMIPT		;RESET GCML LEVEL TO 0				;BA003
20$:	JMP	SLIPR1		;GO AGAIN					;BA003
										;**-1
;
; ERROR EXIT
;

ERXT:	MOV	#$LNDES,R2	;GET ADDRESS OF LINE DESCIPTOR
	MOV	#S$V2*400!E$R14,R1 ;GET ERROR, SEVERITY
	CALL	$ERMSG		; ISSUE ERROR MESSAGE
	JMP	SLPR1		; GO AGAIN


;
;	EXIT SEQUENCE
;

SLPXT:	CLOSE$	$CFIPT		;CLOSE CORRECTION INPUT FILE
	CLOSE$	$CMIPT		;CLOSE COMMAND INPUT FILE
	CLOSE$	$LSTPT		;CLOSE LINE LISTING FILE
	CLOSE$	$SRCPT		;CLOSE SOURCE OUTPUT FILE
	MOV	$EXSTS,R0	; GET EXIT STATUS
	CALL	$EXST		; CALL EXIT ROUTINE

 										;BA003
;+										;BA003
; **-$CRCTL--"TELL" CRC VALUE							;BA003
;										;BA003
; INPUTS:									;BA003
;										;BA003
;	$CRCVL = CRC VALUE							;BA003
;	$SVCRC = CRC VALUE SPECIFIED IN FIRST COMMAND LINE			;BA003
;		    IF ZERO, "TELL" CALCULATED CRC VALUE			;BA003
;		    IF NONZERO, COMPARE CALCULATED CRC VALUE TO CKSUM SPECIFIED	;BA003
;			BY USER							;BA003
;										;BA003
; OUTPUTS:									;BA003
; 										;BA003
;	R0, R1, R2, R3 = DESTROYED						;BA003
;	CRC VALUE OUTPUTTED TO TI:						;BA003
;										;BA003
;-										;BA003
 										;BA003
 										;BA003
$CRCTL:	MOV	#$OUTBF,R0	;POINT R0 TO OUTPUT BUFFER			;BA003
	TST	$CSSV		;DID USER WANT TO COMPARE CHECKSUM VALUES?	;BA003
	BEQ	20$		;IF EQ, NO, SO JUST "TELL"			;BA003
	CMP	$CSSV,$CRCVL	;DOES CS VALUE = CALCULATED CRC CKSUM VALUE?	;BA003
	BEQ	40$		;IF EQ, YES, SO DON'T REPORT ANYTHING		;BA003
	MOV	#CSMSG2,R1	;POINT R1 TO COMPARE MSG			;BA003
	MOV	$CMIPT,R2	;POINT TO TO COMMAND FILE			;BA003
	ADD	#F.FNB+N.FNAM,R2 ;POINT R2 TO COMMAND FILE NAME			;BA003
	BR	30$		;FORMAT THIS PART OF MESSAGE, PRINT, AND RETURN	;BA003
20$:	MOV	#CSMSG1,R1	;POINT R1 TO CRC REPORT MSG			;BA003
	MOV	#ARGBLK,R2	;POINT R2 TO ARGUEMENT BLOCK			;BA003
	MOV	$CRCVL,(R2)	;MOVE THE CRC VALUE TO ARGUEMENT BLK		;BA003
30$:	CALL	$EDMSG		;FORMAT MESSAGE					;BA003
	MOV	#$OUTBF,R0	;POINT R0 TO OUTPUT BUFFER			;BA003
	CALL	$MGOUT		;OUTPUT CRC VALUE MESSAGE TO TI:		;BA003
40$:	RETURN									;BA003
 										;BA003
 										;BA003
 										;BA003
;+
; **-MAIN BODY OF ACTUAL EDITOR
;
; INPUTS:
;
;	R3=ADDRESS OF OPTION SWITCH WORD.
;
; OUTPUTS:
;
;	C=1 IF PREMATURE EOF OR ERROR ON COMMAND INPUT FILE.
;	C=0 IF SUCESSFUL REQUEST.
;-

SLPR11:	SAVRG			;SAVE NONVOLITILE REGISTERS
SLPR1:	CALL	$GTCML		;GET COMMAND INPUT LINE
	BCS	1$		;IF CS EOF OR ERROR
	MOV	#$LNBUF,R0	;GET ADDRESS OF LINE BUFFER
	MOVB	(R0)+,R5	;GET FIRST BYTE
	MOV	#CNTRL,R4	;GET ADDRESS OF CONTROL BYTE STRING
	JOL	2$		;SHIFT?
	JOL	4$		;FILE MARK?
	BIT	#CR$FI,(R3)	;CORRECTION INPUT FILE?
	BEQ	3$		;IF EQ NO
	JOL	6$		;MINUS?
	JOL	7$		;ENABLE AUDIT TRAIL?
	JOL	8$		;DISABLE AUDIT TRAIL?
	BR	3$		;

;
; EOF OR ERROR ON COMMAND INPUT FILE
;

1$:	CLR	R2		;SET DUMMY PARAMETER BLOCK ADDRESS
	MOV	(PC)+,R1	;PREMATURE EOF OR ERROR
	.BYTE	E$R15,S$V0	;DIAGNOSTIC
	CALL	$ERMSG		;OUTPUT ERROR MESSAGE
	CALL	$COPYF		;COPY REMAINDER OF CORRECTION FILE
	CALL	$TRNMS		;OUTPUT TRUNCATION MESSAGE			;RN001
	SEC			;SET CARRY
	BR	5$		;COMMON EXIT

;
; SHIFT COMMAND (<)
;

2$:	CALL	$SHIFT		;SHIFT LINE LEFT ONE CHARACTER
3$:	CALL	$PUTLN		;PUT LINE IN OUTPUT FILES
	BR	SLPR1		;GO AGAIN

;
; FILE MARK (/)
;

4$:	CALL	$COPYF		;COPY REMAINDER OF FILE
	CALL	$TRNMS		;OUTPUT TRUNCATION MESSAGE			;RN001
	CLC			;CLEAR CARRY
5$:	RETURN			;

;
; POSITION/DELETION COMMAND (-N OR -N,M)
;

6$:	CALL	$POSIT		;POSITION FILE
	BR	SLPR1		;CONTINUE

;
; ENABLE AUDIT TRAIL (%)
;

7$:	BIT	#AP$ND,(R3)	;AUDIT TRAIL ENABLED?
	BEQ	SLPR1		;IF EQ YES, CONTINUE
	CLR	$LNDEL		;CLEAR DELETION COUNT
	BIC	#AP$ND,(R3)	;ENABLE AUDIT TRAIL
	BR	SLPR1		;CONTINUE

;
; DISABLE AUDIT TRAIL (\)
;

8$:	BIS	#AP$ND,(R3)	;DISABLE AUDIT TRAIL
	BR	SLPR1		;CONTINUE

	.END	$SLIPR
