MODULE EXTIDX (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine extends the volume's index file.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Apr-1977  10:44
!
! MODIFIED BY:
!
!	V03-001	ACG0274		Andrew C. Goldstein,	23-Mar-1982  11:25
!		Allow use of alternate index file header
!
!	V02-002	STJ34965	Steven T. Jeffreys,	28-Feb-1981
!		Temporary fix to set FIB$V_NOCHARGE bit for the
!		index file, so that if will not be charged for diskquota.
!
!	B0101	ACG0121		Andrew C. Goldstein,	16-Jan-1980  21:39
!		Make context save and restore into subroutines
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE EXTEND_INDEX (FILE_NUMBER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extends the volume's index file.
!
! CALLING SEQUENCE:
!	EXTEND_INDEX (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: next file number to be created
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: address of volume VCB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	index file extended, index file window and index file FCB modified
!
!--

BEGIN

LOCAL
	FIB		: REF BBLOCK,	! address of FIB for extend operation
	HEADER		: REF BBLOCK,	! address of index file header
	FCB		: REF BBLOCK,	! address of index file FCB
	WINDOW		: REF BBLOCK,	! address of index file window
	FREE_POINTERS,			! number of free retrieval pointers
					! in index file window
	FILES_TO_GO,			! number of files likely to be created
					! on this volume
	BLOCKS_NEEDED;			! amount to extend index file by

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	USER_STATUS	: VECTOR,	! I/O status block of user
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume in process
	PRIMARY_FCB	: REF BBLOCK,	! address of FCB in process
	CURRENT_WINDOW	: REF BBLOCK,	! address of window in process
	SECOND_FIB	: BBLOCK;	! FIB for secondary operation

EXTERNAL ROUTINE
	SAVE_CONTEXT,			! save reentrant context area
	RESTORE_CONTEXT,		! restore reentrant context area
	READ_IDX_HEADER,		! read index file header
	TURN_WINDOW,			! update file window
	EXTEND,				! extend a file
	CHECKSUM,			! compute file header checksum
	WRITE_HEADER,			! write back file header
	RESET_LBN,			! reassign LBN of buffer
	WRITE_BLOCK,			! write a disk block
	INVALIDATE,			! invalidate buffer
	INIT_FCB2;			! update file control block


! Extending the index file is a secondary operation, so we must save away the
! primary context, and then set up the appropriate context for this operation.
!

SAVE_CONTEXT ();
FIB = SECOND_FIB;
CH$FILL (0, FIB$C_LENGTH, .FIB);
FIB[FIB$W_FID_NUM] = 1;
FIB[FIB$W_FID_SEQ] = 1;

PRIMARY_FCB = FCB = .CURRENT_VCB[VCB$L_FCBFL];
CURRENT_WINDOW = WINDOW = .FCB[FCB$L_WLFL];

! Read the index file header.
!

HEADER = READ_IDX_HEADER ();

! Turn the index file window to VBN 3. Then compute the number of free
! retrieval pointers in the index file window, discounting pointers (if
! any) that only map the boot and home block.
!

KERNEL_CALL (TURN_WINDOW, .WINDOW, .HEADER, 3, 1);

FREE_POINTERS = (.WINDOW[WCB$W_SIZE]-WCB$C_LENGTH)/6 - .WINDOW[WCB$W_NMAP];
IF .WINDOW[WCB$L_STVBN] + .WINDOW[WCB$W_P1_COUNT] LEQU 3
THEN
    BEGIN
    FREE_POINTERS = .FREE_POINTERS + 1;
    IF .WINDOW[WCB$L_STVBN] + .WINDOW[WCB$W_P1_COUNT] + .WINDOW[WCB$W_P2_COUNT] LEQU 3
    THEN FREE_POINTERS = .FREE_POINTERS + 1;
    END;
IF .FREE_POINTERS LEQ 0 THEN FREE_POINTERS = 1;

! Compute the number of files likely to still be created on the volume.  This
! is the minimum of the number permitted minus the current number and a
! fraction of the number of free blocks on the volume. The amount to extend
! the index file by is this quantity divided by the number of available
! retrieval pointers in the index file window.
!

FILES_TO_GO = MINU (.CURRENT_VCB[VCB$L_MAXFILES] - .FILE_NUMBER + 1,
		.CURRENT_VCB[VCB$L_FREE] / .CURRENT_VCB[VCB$W_CLUSTER] / 4);

BLOCKS_NEEDED = MINU (.FILES_TO_GO / .FREE_POINTERS, 1000);

! Build the extend control in the FIB and call the EXTEND routine.
!

FIB[FIB$L_EXSZ] = .BLOCKS_NEEDED;
FIB[FIB$V_ALCON] = 1;
FIB[FIB$V_ALCONB] = 1;
FIB[FIB$V_ALDEF] = 1;
FIB[FIB$V_NOHDREXT] = 1;

! Set NOCHARGE bit so the index file will not be charged for diskquota.
!
FIB [FIB$V_NOCHARGE] = 1;

EXTEND (.FIB, .HEADER);

BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.FIB[FIB$L_EXSZ]+.FIB[FIB$L_EXVBN]-1, 16);
BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_EFBLK] = ROT (.FCB[FCB$L_EFBLK]+1, 16);

! Now write the header, update the FCB, and restore the primary context.
!

CHECKSUM (.HEADER);
WRITE_HEADER ();
RESET_LBN (.HEADER, .CURRENT_VCB[VCB$L_IXHDR2LBN]);
WRITE_BLOCK (.HEADER);
INVALIDATE (.HEADER);
KERNEL_CALL (INIT_FCB2, .FCB, .HEADER);

RESTORE_CONTEXT ();
USER_STATUS[1] = 0;

END;					! end of routine EXTEND_INDEX

END
ELUDOM
