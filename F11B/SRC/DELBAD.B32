MODULE DELBAD (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL = GENERAL),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine removes the indicated blocks from the given file header
!	and appends them to the bad block file.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-May-1978  22:43
!
! MODIFIED BY:
!
!	V02-003	ACG0230		Andrew C. Goldstein,	24-Dec-1981  0:16
!		Go to longword external addressing
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE DEALLOCATE_BAD (FIB, FILE_HEADER, POINTER, LAST_COUNT) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the indicated blocks from the given file header
!	and appends them to the bad block file.
!
!
! CALLING SEQUENCE:
!	DEALLOCATE_BAD (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of user FIB
!	ARG2: address of file header
!	ARG3: address of map pointer at which to start
!	ARG4: new value for last pointer block count
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file header updated, bad block log file updated, bad block file extended
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! user FIB argument
	FILE_HEADER	: REF BBLOCK;	! address of file header

LINKAGE
	L_MAP_POINTER	= JSB :
			GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8),

	L_MAKE_POINTER	= CALL :
			GLOBAL (BUILD_POINTER = 9);

GLOBAL REGISTER
	COUNT		= 6,		! count of blocks returned
	LBN		= 7,		! LBN of map entry
	MAP_POINTER	= 8 : REF BBLOCK, ! pointer to scan map
	BUILD_POINTER	= 9 : REF BBLOCK; ! pointer to build new map entry

LOCAL
	HEADER		: REF BBLOCK,	! local address of file header
	EXT_HEADER	: REF BBLOCK;	! address of extension header

EXTERNAL
	CURRENT_VCB	: REF BBLOCK,	! address of VCB of volume
	CURRENT_WINDOW	: REF BBLOCK,	! window of file if open
	PRIMARY_FCB	: REF BBLOCK;	! FCB of file if open

EXTERNAL ROUTINE
	GET_MAP_POINTER : L_MAP_POINTER, ! get value of next map entry
	MAKE_POINTER	: L_MAKE_POINTER, ! build new map entry
	NEXT_HEADER,			! read next extension header
	MARK_DIRTY,			! mark buffer for rewrite
	UPDATE_FILESIZE,		! update file size in FCB
	ZERO_WINDOWS,			! invalidate windows of file
	CHECKSUM,			! compute file header checksum
	READ_HEADER,			! read file header
	EXTEND_HEADER,			! create extention header
	SCAN_BADLOG;			! scan pending bad block log file


! Construct pointers into the file header and get the current contents of the
! last map pointer.
!

HEADER = .FILE_HEADER;
MAP_POINTER = .POINTER;

GET_MAP_POINTER ();

! Now append the blocks to the bad block file.
!

PRIMARY_FCB = 0;			! no longer dealing with current file
CURRENT_WINDOW = 0;

LBN = .LBN + .LAST_COUNT;		! compute LBN of bad cluster
COUNT = .COUNT - .LAST_COUNT;

HEADER = READ_HEADER (UPLIT WORD (BADBLK_FID, BADBLK_FID, 0), 0);
WHILE 1 DO
    BEGIN
    EXT_HEADER = NEXT_HEADER (.HEADER, 0);
    IF .EXT_HEADER EQL 0 THEN EXITLOOP;
    HEADER = .EXT_HEADER;
    END;
MARK_DIRTY (.HEADER);
BUILD_POINTER = .HEADER + (.HEADER[FH2$B_MPOFFSET] + .HEADER[FH2$B_MAP_INUSE]) * 2;

IF NOT MAKE_POINTER (.COUNT, .LBN, .HEADER)
THEN
    BEGIN
    HEADER = EXTEND_HEADER (UPLIT BYTE (REP FIB$C_LENGTH OF (0)), .HEADER, 0);
    BUILD_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET] * 2;
    MAKE_POINTER (.COUNT, .LBN, .HEADER);
    END;

BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] =
	ROT (ROT (.BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK], 16) + .COUNT, 16);
CHECKSUM (.HEADER);

! Finally, remove the bad block cluster from the volume pending bad block log
! file, if it was there.
!

SCAN_BADLOG (0, 0, .LBN, REMOVE_BADBLOCK, .COUNT);

END;					! end of routine DEALLOCATE_BAD

END
ELUDOM
