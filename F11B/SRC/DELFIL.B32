MODULE DELFIL (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module deletes a file, returning its blocks to the storage map
!	and releasing the file header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  4-Apr-1977  15:50
!
! MODIFIED BY:
!
!	V02-007	ACG0229		Andrew C. Goldstein,	23-Dec-1981  21:59
!		Count file ID cache hits and misses
!
!	V02-006	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	DELETE_FILE	: NOVALUE,	! complete file deletion
	DELETE_FID	: NOVALUE,	! just release file header
	RETURN_FILE_NUM,		! return file number to cache
	REMOVE_FILE_NUM;		! remove file numbers from cache

GLOBAL ROUTINE DELETE_FILE (FIB, FILEHEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes a file by releasing its blocks to the storage
!	bitmap and then releasing the header.
!
! CALLING SEQUENCE:
!	DELETE_FILE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: FIB of operation
!	ARG2: address of file header buffer
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	File deleted, storage map and index file bitmap modified, VCB modified
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! address of user FIB
	FILEHEADER	: REF BBLOCK;	! address of file header

LOCAL
	HEADER		: REF BBLOCK,	! local address of file header
	FCB		: REF BBLOCK,	! FCB of header in process
	FILE_NUMBER,			! file number of header being deleted
	EXT_FID		: BBLOCK [FID$C_LENGTH], ! extension file ID
	EX_SEGNUM,			! header extension segment number
	FILESIZE;			! size of file section

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CURRENT_VCB	: REF BBLOCK,	! VCB of this volume
	FILE_HEADER	: REF BBLOCK,	! global file header address
	NEW_FID,			! file number of unrecorded header
	NEW_FID_RVN,			! RVN of above
	CURRENT_RVN;			! RVN of current volume

EXTERNAL ROUTINE
	SEARCH_FCB,			! search FCB list for FCB
	MARK_DIRTY,			! mark buffer for write-back
	MARKDEL_FCB,			! mark FCB for deletion
	FILE_SIZE,			! compute file section size
	CHARGE_QUOTA,			! charge user's disk quota
	CHECKSUM,			! compute file header checksum
	SEND_BADSCAN,			! start bad block scan process
	FLUSH_FID,			! flush file from buffer pool
	WRITE_BLOCK,			! write block to disk
	INVALIDATE,			! invalidate block buffer
	TRUNCATE_HEADER,		! truncate file header
	NEXT_HEADER;			! read next file extension header


! If the file looks like a directory file flush it from the buffer pool
! to avoid retaining stale directory data.
!


HEADER = .FILEHEADER;
IF .HEADER[FH2$V_DIRECTORY]
THEN FLUSH_FID (HEADER[FH2$W_FID]);

! If the file is marked bad and is not empty, we do not delete the file,
! but rather send it to the bad block scanner, who will analyze the file and
! delete it piecemeal.
!

IF  .HEADER[FH2$V_BADBLOCK]
AND (   .HEADER[FH2$B_MAP_INUSE] NEQ 0
    OR  .HEADER[FH2$W_EX_FIDNUM] NEQ 0
    OR  .HEADER[FH2$W_EX_FIDRVN] NEQ 0)
THEN
    BEGIN
    CHECKSUM (.HEADER);
    SEND_BADSCAN (HEADER[FH2$W_FID]);
    RETURN;
    END;

! Loop for all headers, releasing the blocks mapped and the headers.
! If this is an extension header, search the FCB list for the off chance
! that this header is open as a file. If so, mark it for delete and get out.
! First write out the deleted file header. Thus, if the system bombs during
! the delete, we will not have a valid header on the disk mapping blocks
! that may have been returned to the storage map.
!

WHILE 1 DO
    BEGIN
    IF .HEADER[FH2$W_SEG_NUM] NEQ 0
    THEN
	BEGIN
	FCB = SEARCH_FCB (HEADER[FH2$W_FID]);
	IF .FCB NEQ 0
	THEN
	    BEGIN
	    HEADER[FH2$V_MARKDEL] = 1;
	    CHECKSUM (.HEADER);
	    MARK_DIRTY (.HEADER);
	    KERNEL_CALL (MARKDEL_FCB, .FCB);
	    RETURN;
	    END;
	END;

    FILE_NUMBER = .HEADER[FH2$W_FID_NUM];
    IF .CURRENT_VCB[VCB$V_EXTFID]
    THEN FILE_NUMBER<16,8> = .HEADER[FH2$B_FID_NMX];
    NEW_FID = .FILE_NUMBER;		! record file number for cleanup
    NEW_FID_RVN = .CURRENT_RVN;

    HEADER[FH2$W_FID_NUM] = 0;		! deleted header has zero file number
    HEADER[FH2$W_FID_RVN] = 0;
    HEADER[FH2$W_CHECKSUM] = 0;		! and zero checksum
    FILE_HEADER = 0;
    WRITE_BLOCK (.HEADER);
    INVALIDATE (.HEADER);

! Credit the header and the blocks it maps to the owner's disk quota.
!

    FILESIZE = 0;
    IF NOT .CLEANUP_FLAGS[CLF_NOTCHARGED]
    THEN FILESIZE = FILE_SIZE (.HEADER);
    IF NOT .CLEANUP_FLAGS[CLF_HDRNOTCHG]
    THEN FILESIZE = .FILESIZE + 1;
    CHARGE_QUOTA (.HEADER[FH2$L_FILEOWNER], -.FILESIZE, BITLIST (QUOTA_CHARGE));

! Now return the blocks mapped by the header to the storage map.
! Then extract the extension header data.
!

    TRUNCATE_HEADER (.FIB, .HEADER);

    EX_SEGNUM = .HEADER[FH2$W_SEG_NUM] + 1;
    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_EXT_FID], EXT_FID);

! Now free the header in the index file bitmap. Then chain to the next header,
! if any, and repeat.
!

    NEW_FID = 0;
    DELETE_FID (.FILE_NUMBER);

    HEADER = NEXT_HEADER (0, 0, EXT_FID, .EX_SEGNUM);
    IF .HEADER EQL 0 THEN EXITLOOP;
    END;

END;					! end of routine DELETE_FILE

GLOBAL ROUTINE DELETE_FID (FILENUM) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine marks the indicated file header free in the index
!	file bitmap.
!
! CALLING SEQUENCE:
!	DELETE_HEADER (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: file number of header
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Header deleted - index file bitmap & VCB altered
!
!--

BEGIN

LOCAL
	FID_CACHE	: REF BBLOCK,	! address of file number cache
	VBN,				! relative block in bitmap
	BEST_VBN,			! best block to return bits to
	COUNT,				! number of FID's in current block
	BEST_COUNT,			! number if FID's in best block
	BLOCK,				! block number of current entry
	BUFFER;				! bitmap buffer

EXTERNAL
	CURRENT_VCB	: REF BBLOCK,	! VCB of operation
	CURRENT_UCB	: REF BBLOCK,	! UCB of operation
	PMS$GL_FIDHIT	: ADDRESSING_MODE (GENERAL),
					! count of file ID cache hits
	PMS$GL_FIDMISS	: ADDRESSING_MODE (GENERAL);
					! count of file ID cache misses

EXTERNAL ROUTINE
	READ_BLOCK,			! read a block from the disk
	WRITE_BLOCK;			! write it back


! If this is not a flush call, we delete the file number by returning it
! to the file number cache. If the cache fills up, the kernel mode routine
! returns LBC. We then scan the cache, looking for the largest group of file
! numbers that are all in the same bitmap block (up to half of the cache),
! and then flush those from the cache. If this is a cache flush call or
! the volume is marked for dismount, however, we flush the entire cache.
!

IF .FILENUM NEQ 0
THEN
    IF KERNEL_CALL (RETURN_FILE_NUM, .FILENUM)
    THEN
	BEGIN
	PMS$GL_FIDHIT = .PMS$GL_FIDHIT + 1;
	RETURN;
	END;

FID_CACHE = .BBLOCK [.CURRENT_VCB[VCB$L_CACHE], VCA$L_FIDCACHE];

IF .FILENUM NEQ 0
THEN
    BEGIN
    PMS$GL_FIDMISS = .PMS$GL_FIDMISS + 1;
    BEST_COUNT = 0;
    VBN = -1;
    INCR J FROM 1 TO .FID_CACHE[VCA$W_FIDCOUNT]
    DO
	BEGIN
	BLOCK = (.VECTOR [FID_CACHE[VCA$L_FIDLIST], .J-1] - 1) / 4096;
	IF .BLOCK NEQ .VBN
	THEN
	    BEGIN
	    VBN = .BLOCK;
	    COUNT = 0;
	    END;
	COUNT = .COUNT + 1;
	IF .COUNT GTRU .BEST_COUNT
	THEN
	    BEGIN
	    BEST_COUNT = .COUNT;
	    BEST_VBN = .VBN;
	    END;
	IF .BEST_COUNT GEQU .FID_CACHE[VCA$W_FIDCOUNT]/2
	THEN EXITLOOP;
	END;

! Read the appropriate block, return the desired number of file numbers to
! it, and write it back.
!

    IF .BEST_VBN GEQU .CURRENT_VCB[VCB$B_IBMAPSIZE]
    THEN BUG_CHECK (BADFID, FATAL, 'ACP file number out of range for this volume');

    BUFFER = READ_BLOCK (.BEST_VBN + .CURRENT_VCB[VCB$L_IBMAPLBN], 1, INDEX_TYPE);
    KERNEL_CALL (REMOVE_FILE_NUM, .BEST_COUNT, .BEST_VBN, .BUFFER);
    WRITE_BLOCK (.BUFFER);
    END

! If this is a cache flush, loop for all the blocks represented in the
! cache, read the block, return the file numbers, and write it.
!

ELSE
    BEGIN
    UNTIL .FID_CACHE[VCA$W_FIDCOUNT] EQL 0
    DO
	BEGIN
	VBN = (.FID_CACHE[VCA$L_FIDLIST] - 1) / 4096;
	IF .VBN GEQU .CURRENT_VCB[VCB$B_IBMAPSIZE]
	THEN BUG_CHECK (BADFID, FATAL, 'ACP file number out of range for this volume');

	BUFFER = READ_BLOCK (.VBN + .CURRENT_VCB[VCB$L_IBMAPLBN], 1, INDEX_TYPE);
	KERNEL_CALL (REMOVE_FILE_NUM, 0, .VBN, .BUFFER);
	WRITE_BLOCK (.BUFFER);
	END;
    END;

END;					! end of routine DELETE_HEADER

ROUTINE RETURN_FILE_NUM (FILE_NUMBER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a file number to the volume's file number
!	cache. If the cache fills up as a result, it also sorts the
!	entries and returns failure status to signal the caller that the
!	cache should be emptied.
!
!
! CALLING SEQUENCE:
!	RETURN_FILE_NUM (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: file number to return
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	CURRENT_UCB: UCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if success
!	0 if cache is now full
!
! SIDE EFFECTS:
!	file ID cache modified
!
!--

BEGIN

LOCAL
	FID_CACHE	: REF BBLOCK,	! address of file number cache
	J;				! cache index

EXTERNAL
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	CURRENT_UCB	: REF BBLOCK;	! UCB of volume


! Scan the cache for an entry higher than the file number being returned.
! Shuffle the cache upward and insert the file number in order. If the
! cache fills up, return failure to cause a cache flush.
!

FID_CACHE = .BBLOCK [.CURRENT_VCB[VCB$L_CACHE], VCA$L_FIDCACHE];
J = 0;
UNTIL .J GEQU .FID_CACHE[VCA$W_FIDCOUNT]
DO
    BEGIN
    IF .VECTOR [FID_CACHE[VCA$L_FIDLIST], .J] GTRU .FILE_NUMBER
    THEN EXITLOOP;
    IF .VECTOR [FID_CACHE[VCA$L_FIDLIST], .J] EQL .FILE_NUMBER
    THEN RETURN 1;
    J = .J + 1;
    END;

CH$MOVE ((.FID_CACHE[VCA$W_FIDCOUNT]-.J)*4,
	 VECTOR [FID_CACHE[VCA$L_FIDLIST], .J],
	 VECTOR [FID_CACHE[VCA$L_FIDLIST], .J+1]);
VECTOR [FID_CACHE[VCA$L_FIDLIST], .J] = .FILE_NUMBER;
FID_CACHE[VCA$W_FIDCOUNT] = .FID_CACHE[VCA$W_FIDCOUNT] + 1;

RETURN .FID_CACHE[VCA$W_FIDCOUNT] LSSU .FID_CACHE[VCA$W_FIDSIZE];

END;					! end of routine RETURN_FILE_NUM

ROUTINE REMOVE_FILE_NUM (COUNT, VBN, BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the specified entries from the file ID cache
!	and marks then free in the index file bitmap block supplied.
!
!
! CALLING SEQUENCE:
!	REMOVE_FILE_NUM (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: number of entrues to remove (0 to remove all)
!	ARG2: VBN of bitmap buffer
!	ARG3: address of bitmap buffer
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: address of volume VCB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	file ID cache altered, bitmap buffer modified
!
!--

BEGIN

MAP
	BUFFER		: REF BITVECTOR; ! bitmap buffer

LOCAL
	FID_CACHE	: REF BBLOCK,	! address of file number cache
	K,				! counter of entries removed
	J,				! index into cache
	FILE_NUMBER,			! file number-1 of entry
	BITPOS;				! bit position in buffer

EXTERNAL
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume


! Scan the file ID cache for entries whose bitmap VBN match those of the
! buffer. When one is found, clear the corresponding bit in the bitmap,
! decrement the count in the cache, and shuffle down the remaining entries
! to keep the cache compacted.
!

FID_CACHE = .BBLOCK [.CURRENT_VCB[VCB$L_CACHE], VCA$L_FIDCACHE];
K = .COUNT;
J = 1;
DO
    BEGIN
    FILE_NUMBER = .VECTOR [FID_CACHE[VCA$L_FIDLIST], .J-1] - 1;
    IF .FILE_NUMBER / 4096 EQL .VBN
    THEN
	BEGIN
	BITPOS = .FILE_NUMBER<0,12>;
	BUFFER[.BITPOS] = 0;
	CH$MOVE ((.FID_CACHE[VCA$W_FIDCOUNT]-.J)*4,
		 VECTOR [FID_CACHE[VCA$L_FIDLIST], .J],
		 VECTOR [FID_CACHE[VCA$L_FIDLIST], .J-1]);
	FID_CACHE[VCA$W_FIDCOUNT] = .FID_CACHE[VCA$W_FIDCOUNT] - 1;
	J = .J - 1;
	K = .K - 1;
	END;
    J = .J + 1;
    END
UNTIL .K EQL 0 OR .J GTRU .FID_CACHE[VCA$W_FIDCOUNT];

! If we have freed file numbers in a block that precedes the current bitmap
! scan point, reset the scan point.
!

IF .VBN LSSU .CURRENT_VCB[VCB$B_IBMAPVBN]
THEN CURRENT_VCB[VCB$B_IBMAPVBN] = .VBN;

1
END;					! end of routine RETURN_FILE_NUM

END
ELUDOM
