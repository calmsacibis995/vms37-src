MODULE SELVOL (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine selects a suitable volume for the creation of a file
!	or the continuation of a file on some other volume.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  21-Nov-1978  16:59
!
! MODIFIED BY:
!
!	B0104	ACG0082		Andrew C. Goldstein,	8-Nov-1979  22:25
!		Skip over write locked volumes
!
!	B0103	ACG0071		Andrew C. Goldstein,	12-Oct-1979  10:58
!		Range check placement RVN in volume selection
!
!	B0102	ACG0039		Andrew C. Goldstein,  16-May-1979  13:02
!	Do correct error exit on contig allocation failure
!
!	B0101	ACG0008		Andrew C. Goldstein,  26-Dec-1978  18:32
!	Add placement control support
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE SELECT_VOLUME (FIB, BLOCKS_NEEDED) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans the RVT for the volume with the most free space,
!	or, if a contiguous allocation is asked for, the volume with the
!	most free space and sufficient contiguous space.
!
!
! CALLING SEQUENCE:
!	SELECT_VOLUME (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of user FIB
!	ARG2: number of blocks to be allocated
!
! IMPLICIT INPUTS:
!	LOC_RVN: placement RVN or 0
!	CURRENT_VCB: VCB of current volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	CURRENT_UCB, CURRENT_VCB, CURRENT_RVN: set to volume switched to
!	UNREC_COUNT, UNREC_BLOCKS: count and LBN of blocks preallocated, if any
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	context switched to new volume, blocks may be allocated
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK;	! user FIB arg

LOCAL
	STATUS,				! error status to return
	SIZE_LIMIT,			! size of last volume tried
	BEST_SIZE,			! largest volume of current scan
	BEST_RVN,			! RVN of above volume
	LAST_RVN,			! RVN of last volume tried
	PROT_FAILURE,			! protection failure flag
	RVT		: REF BBLOCK,	! address of relative volume table
	UCB		: REF BBLOCK,	! UCB under consideration
	VCB		: REF BBLOCK;	! VCB under consideration

LITERAL
	READ_BIT	= 1,		! read protection bit
	WRITE_BIT	= 2,		! write protection bit
	CREATE_BIT	= 4;		! create protection bit

EXTERNAL
	CURRENT_VCB	: REF BBLOCK,	! address of VCB in process
	LOC_RVN,			! specified RVN to place allocation or 0
	LOC_LBN,			! placement LBN or 0
	CURRENT_UCB	: REF BBLOCK,	! address of UCB in process
	UNREC_COUNT,			! count of unrecorded blocks
	UNREC_LBN,			! LBN of above
	UNREC_RVN;			! RVN of above

EXTERNAL ROUTINE
	GET_ACCESS,			! get access protection bits of object
	SWITCH_VOLUME,			! switch context to new volume
	ALLOC_BLOCKS;			! allocate blocks from storage map


! We scan the volumes of the volume set in reverse size order. If a non-
! contiguous allocation is being done, we simply return with the volume with
! the most free space. If a contiguous request is made, try to do the allocation
! on each volume until it succeeds. The first pass (J = 0) is used to
! process RVN placement, if given.
!

RVT = .CURRENT_VCB[VCB$L_RVT];
IF .RVT EQL .CURRENT_UCB THEN RETURN;	! noop if not a volume set

IF .LOC_RVN GTRU .RVT[RVT$B_NVOLS]	! discard garbage RVN's
THEN LOC_RVN = 0;

SIZE_LIMIT = -1;
LAST_RVN = 0;
PROT_FAILURE = 0;
STATUS = SS$_DEVICEFULL;		! assume device full status

INCR J FROM (.LOC_RVN EQL 0) TO .RVT[RVT$B_NVOLS]
DO
    BEGIN
    BEST_SIZE = 0;

! The inner loop scans the RVT for the volume (mounted) with the most free
! space smaller than the last one tried, to which the caller is allowed access
! and which is not write locked.
!

    INCR K FROM (IF .J EQL 0 THEN .LOC_RVN ELSE 1)
	   TO   (IF .J EQL 0 THEN .LOC_RVN ELSE .RVT[RVT$B_NVOLS])
    DO
	BEGIN
	UCB = .VECTOR [RVT[RVT$L_UCBLST], .K-1];
	IF .UCB NEQ 0
	THEN
	    BEGIN
	    VCB = .UCB[UCB$L_VCB];
	    IF  .VCB[VCB$L_FREE] GTRU .BEST_SIZE
	    AND (
		.VCB[VCB$L_FREE] LSSU .SIZE_LIMIT
		OR (.VCB[VCB$L_FREE] LEQU .SIZE_LIMIT
		    AND .K GTRU .LAST_RVN)
		)
	    THEN
		BEGIN
		IF (NOT GET_ACCESS (.UCB[UCB$L_OWNUIC], .UCB[UCB$W_VPROT])
		    AND (READ_BIT OR WRITE_BIT OR CREATE_BIT)) NEQ 0
		THEN
		    STATUS = SS$_NOPRIV

		ELSE IF .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SWL]
		     OR .VCB[VCB$V_NOALLOC]
		THEN
		    STATUS = SS$_WRITLCK

		ELSE
		    BEGIN
		    BEST_SIZE = .VCB[VCB$L_FREE];
		    BEST_RVN = .K;
		    END;
		END;
	    END;
	END;

! Having picked a volume, check it for usefullness. A size of zero means the
! whole volume set is full. If we are trying for contiguous space, check if
! there is at least that much space and try the allocation.
!

    IF (
	IF .FIB[FIB$V_ALCON]
	THEN .BEST_SIZE LSSU .BLOCKS_NEEDED
	ELSE .BEST_SIZE EQL 0
	)
    THEN
	BEGIN
	IF .J NEQ 0
	THEN EXITLOOP;
	END

    ELSE
	BEGIN
	SWITCH_VOLUME (.BEST_RVN);
	UNREC_RVN = .BEST_RVN;
	IF (
	    IF .BLOCKS_NEEDED NEQ 0
	    THEN ALLOC_BLOCKS (.FIB, .BLOCKS_NEEDED, UNREC_LBN, UNREC_COUNT)
	    ELSE 1
	    )
	THEN RETURN;

	IF .J NEQ 0
	THEN
	    BEGIN
	    LAST_RVN = .BEST_RVN;
	    SIZE_LIMIT = .BEST_SIZE;
	    END;
	END;

    LOC_RVN = 0;			! discard placement after first try
    LOC_LBN = 0;
    END;				! end of outer retry loop

! We exit or fall out of the loop if we have tried all volumes in the set
! that seemed worth trying, and couldn't get anything.
!

ERR_EXIT (.STATUS);

END;					! end of routine SELECT_VOLUME

END
ELUDOM
