MODULE CREATE (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module processes the create function. It creates a file with the
!	attributes requested, enters it in a directory if desired, and
!	accesses it if requested.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  28-Mar-1977  15:05
!
! MODIFIED BY:
!
!	V03-001	LMP0016		L. Mark Pilant,		25-Mar-1982  13:18
!		Remove diddling of the COMPLETE bit in the window segments.
!
!	V02-021	ACG0265		Andrew C. Goldstein,	15-Feb-1982  9:50
!		Fix order of expiration date handling
!
!	V02-020	ACG0258		Andrew C. Goldstein,	26-Jan-1982  16:57
!		Fix reference to RVN 1 in expiration date processing
!
!	V02-019	ACG0230		Andrew C. Goldstein,	23-Dec-1981  22:59
!		Add expiration date support
!
!	V02-018	ACG0247		Andrew C. Goldstein,	23-Dec-1981  20:44
!		Set revision date to creation date
!
!	V02-017	ACG0245		Andrew C. Goldstein,	23-Dec-1981  20:40
!		Don't write back link if file is a spool file
!
!	V02-016	LMP0003		L. Mark Pilant,	 8-Dec-1981  10:20
!		Added byte limit quota check on window creation.
!
!	V02-015	ACG0238		Andrew C. Goldstein,	11-Dec-1981  23:30
!		Allow creation of dummy directory entries
!
!	V02-014	ACG0208		Andrew C. Goldstein,	17-Nov-1981  15:16
!		Add segmented directory record support
!
!	V02-013	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	CREATE,				! CREATE function routine
	CHECK_DIR_ACC,			! check write access to directory
	CHECK_HANDLER;			! condition handler for above

GLOBAL ROUTINE CREATE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the CREATE function. It creates a file with the
!	attributes requested, enters it in a directory if desired, and
!	accesses the file if requested.
!
! CALLING SEQUENCE:
!	CREATE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	IO_PACKET: packet of this I/O request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: FCB of file if accessed
!	CURRENT_WINDOW: window of file if accessed
!	USER_STATUS: I/O status block of user
!
! ROUTINE VALUE:
!	1 if successful
!	0 if error
!
! SIDE EFFECTS:
!	File created, blocks allocated, directory modified, file accessed, etc.
!
!--

BEGIN

BUILTIN
	CMPM,
	SUBM;

LOCAL
	PACKET		: REF BBLOCK,	! address of I/O packet
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! file identification block
	RESULT_LENGTH,			! length of result string from ENTER
	RESULT		: VECTOR [FILENAME_LENGTH+6, BYTE],
					! result string from ENTER
	LINK_DID	: BBLOCK [FID$C_LENGTH], ! header back link
	IDENT_AREA	: REF BBLOCK,	! pointer to file header ident area
	ARB		: REF BBLOCK,	! access rights block of caller
	MAP_AREA	: REF BBLOCK,	! file header map area
	IDX_FCB		: REF BBLOCK,	! FCB of index file
	FCB		: REF BBLOCK,	! FCB address
	UCB		: REF BBLOCK,	! UCB pointer for RVN 1
	PRIMARY_VCB	: REF BBLOCK,	! VCB of root volume
	HEADER		: REF BBLOCK,	! address of file header
	FUNCTION	: BLOCK [1];	! function code qualifiers

EXTERNAL
	USER_STATUS	: VECTOR,	! I/O status block of user
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	CURRENT_RVT	: REF BBLOCK,	! RVT of volume set
	PRIMARY_FCB	: REF BBLOCK,	! FCB of file
	CURRENT_WINDOW	: REF BBLOCK,	! window for file
	IO_PACKET	: REF BBLOCK,	! I/O request packet
	FILE_HEADER	: REF BBLOCK,	! global address of file header
	CURRENT_RVN,			! RVN of current volume
	LOC_RVN,			! placement RVN or 0
	LOC_LBN,			! placement LBN or 0
	NEW_FID,			! unrecorded file ID
	HEADER_LBN,			! LBN of current file header
	PREV_LINK	: BBLOCK,	! previous contents of back link
	PREV_INAME	: VECTOR [,BYTE], ! previous file name
	SUPER_FID	: BBLOCK,	! file ID of superseded file
	SECOND_FIB	: BBLOCK,	! FIB for secondary operation
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	ACP$GB_WRITBACK	: BITVECTOR ADDRESSING_MODE (ABSOLUTE);
					! ACP write back cache enable

EXTERNAL ROUTINE
	GET_FIB,			! get FIB for operation
	GET_LOC_ATTR,			! get placement data form attribute list
	GET_LOC,			! get placament data
	SWITCH_VOLUME,			! switch context to specified volume
	SELECT_VOLUME,			! find volume in volume set for create
	CHECK_PROTECT,			! check file protection
	CHARGE_QUOTA,			! charge blocks to user's disk quota
	CREATE_HEADER,			! create a file ID and header
	CHECKSUM,			! compute header checksum
	MARK_DIRTY,			! mark buffer for write-back
	READ_HEADER,			! read file header
	ENTER,				! enter file in directory
	COPY_NAME,			! copy file name to result string
	APPLY_RVN,			! use current RVN if zero
	DEFAULT_RVN,			! use 0 if RVN is current
	CREATE_FCB,			! create an FCB
	CREATE_WINDOW,			! create a window
	SET_EXPIRE,			! enable expiration date recording
	MAKE_ACCESS,			! complete the access
	MARKDEL_FCB,			! mark FCB for delete
	WRITE_ATTRIB,			! write attributes
	EXTEND,				! extend the file
	SAVE_CONTEXT,			! save reentrant context area
	RESTORE_CONTEXT,		! restore reentrant context area
	MARK_DELETE,			! mark file for delete
	NEXT_HEADER,			! read next extension file header
	UPDATE_FCB,			! update file control block
	REMAP_FILE;			! remap the file completely


! Enable the deaccess cleanup if an access is taking place.
!

PACKET = .IO_PACKET;
FUNCTION = .PACKET[IRP$W_FUNC];
IF .FUNCTION[IO$V_ACCESS]
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_ZCHANNEL] = 1;
    CLEANUP_FLAGS[CLF_DELWINDOW] = 1;
    END;

! Set up pointers to interesting control blocks.
!

					! pointer to buffer descriptors
ABD = .BBLOCK [.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);			! pointer to FIB

IF .FIB[FIB$V_TRUNC]
OR .FIB[FIB$W_VERLIMIT] GTRU 32767
OR (.FUNCTION[IO$V_DELETE] AND NOT .FUNCTION[IO$V_ACCESS])
OR (NOT .FUNCTION[IO$V_CREATE]
    AND (.FIB[FIB$V_EXTEND]
	OR .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	OR .FUNCTION[IO$V_ACCESS]
	)
    )
THEN ERR_EXIT (SS$_BADPARAM);

IF .CURRENT_VCB[VCB$V_NOALLOC]
THEN ERR_EXIT (SS$_WRITLCK);

! Do the create if requested. Start by allocating a file number from the
! index file bitmap and reading in the initial file header.
!

IF .FUNCTION[IO$V_CREATE]
THEN
    BEGIN
    IF .FIB[FIB$V_ALLOCATR]
    THEN GET_LOC_ATTR (.ABD, .FIB);
    GET_LOC (.FIB, LOC_RVN, LOC_LBN);
    IF .LOC_RVN NEQ 0
    AND .FIB[FIB$V_EXACT]
    THEN
	SWITCH_VOLUME (.LOC_RVN)
    ELSE
	SELECT_VOLUME (.FIB, (IF .FIB[FIB$V_EXTEND]
			      THEN .FIB[FIB$L_EXSZ]
			      ELSE 0));

    CHECK_PROTECT (CREATE_ACCESS, 0, 0);
    IF .CURRENT_VCB[VCB$V_NOALLOC]
    THEN ERR_EXIT (SS$_WRITLCK);

    HEADER = CREATE_HEADER (FIB[FIB$W_FID]);

! Now build an initialized file header in the buffer.
!

    HEADER[FH2$B_IDOFFSET] = FH2$C_LENGTH / 2;
    HEADER[FH2$B_MPOFFSET] = (FH2$C_LENGTH+FI2$C_LENGTH) / 2;
    HEADER[FH2$B_ACOFFSET] = ($BYTEOFFSET (FH2$W_CHECKSUM)) / 2;
    HEADER[FH2$B_RSOFFSET] = ($BYTEOFFSET (FH2$W_CHECKSUM)) / 2;
    HEADER[FH2$W_SEG_NUM] = 0;
    HEADER[FH2$W_STRUCLEV] = FH2$C_LEVEL2 + 1;

    CH$FILL (0, 512 - $BYTEOFFSET(FH2$W_EXT_FID), HEADER[FH2$W_EXT_FID]);
    ARB = .PACKET[IRP$L_ARB];
    HEADER[FH2$L_FILEOWNER] = .ARB[ARB$L_UIC];

    IF .FUNCTION[IO$V_DELETE]
    THEN HEADER[FH2$V_MARKDEL] = 1;

    IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
    THEN HEADER[FH2$V_SPOOL] = 1;

    NEW_FID = 0;			! new file ID is no longer unrecorded
    CLEANUP_FLAGS[CLF_DELFILE] = 1;
    CLEANUP_FLAGS[CLF_HDRNOTCHG] = 1;
    FILE_HEADER = .HEADER;		! record header address for cleanup
    CHECKSUM (.HEADER);

    END;

! If a non-zero directory ID is supplied, enter the file in the directory.
! Otherwise, just copy down the name string (if any) into the result string.
! Note that directory operations are also nooped on spool files operations.
!

IF .CLEANUP_FLAGS[CLF_DIRECTORY] AND NOT .CLEANUP_FLAGS[CLF_SPOOLFILE]
THEN
    ENTER (.ABD, .FIB, RESULT_LENGTH, RESULT)
ELSE
    BEGIN
    KERNEL_CALL (COPY_NAME, .ABD);
    RESULT_LENGTH = MINU (.ABD[ABD$C_NAME, ABD$W_COUNT], FI2$S_FILENAME);
    CH$MOVE (.RESULT_LENGTH,
	.ABD[ABD$C_NAME, ABD$W_TEXT] + ABD[ABD$C_NAME, ABD$W_TEXT] + 1, RESULT);
    END;

! Read the file header, regardless of the operation. Do a protection check
! on the directory pointed to by the present back link. If it is not valid,
! or if write access is allowed, then overwrite the back link with the new
! directory ID. Copy the file string into the header ident area. Then write
! attributes as specified.
!

IF .FIB[FIB$W_FID_NUM] NEQ 65535
OR .FIB[FIB$W_FID_SEQ] NEQ 65535
OR .FIB[FIB$W_FID_RVN] NEQ 255^8
THEN
    BEGIN
    HEADER = READ_HEADER (FIB[FIB$W_FID], 0);
    IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET]*2;

    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_BACKLINK], PREV_LINK);
    IF ((.PREV_LINK[FID$W_NUM] EQL 0
	 AND .PREV_LINK[FID$W_RVN] EQL 0)
	OR (
	    BEGIN
	    LOCAL STATUS, SAVE_STATUS;
	    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_BACKLINK], LINK_DID);
	    APPLY_RVN (LINK_DID[FID$W_RVN]);
	    SAVE_STATUS = .USER_STATUS;
	    STATUS = CHECK_DIR_ACC (LINK_DID);
	    HEADER = READ_HEADER (FIB[FIB$W_FID], 0);
	    IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET]*2;
	    USER_STATUS = .SAVE_STATUS;
	    .STATUS
	    END
	    )
	)
    THEN
	BEGIN
	IF NOT .CLEANUP_FLAGS[CLF_SPOOLFILE]
	THEN
	    BEGIN
	    CH$MOVE (FID$C_LENGTH, FIB[FIB$W_DID], HEADER[FH2$W_BACKLINK]);
	    DEFAULT_RVN (HEADER[FH2$W_BK_FIDRVN]);
	    CLEANUP_FLAGS[CLF_FIXLINK] = 1;
	    END;

	CH$MOVE (FI2$S_FILENAME, IDENT_AREA[FI2$T_FILENAME], PREV_INAME);
	CH$COPY (.RESULT_LENGTH, RESULT, ' ', FI2$S_FILENAME, IDENT_AREA[FI2$T_FILENAME]);
	END;

! Set up file dates; then write the attributes.
!

    IF .FUNCTION[IO$V_CREATE]
    THEN
	BEGIN
	$GETTIM (TIMADR = IDENT_AREA[FI2$Q_CREDATE]);
	CH$MOVE (FI2$S_CREDATE, IDENT_AREA[FI2$Q_CREDATE], IDENT_AREA[FI2$Q_REVDATE]);

	IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	THEN
	    BEGIN
	    WRITE_ATTRIB (.HEADER, .ABD);
	    HEADER = .FILE_HEADER;
	    END;

	CHARGE_QUOTA (.HEADER[FH2$L_FILEOWNER], 1, BITLIST (QUOTA_CHECK, QUOTA_CHARGE));
	CLEANUP_FLAGS[CLF_HDRNOTCHG] = 0;

! If access is requested, access the file.
!

	IF .FUNCTION[IO$V_ACCESS]
	THEN
	    BEGIN
	    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
	    PRIMARY_FCB = .FCB;

	    CURRENT_WINDOW = KERNEL_CALL (CREATE_WINDOW, .FIB[FIB$L_ACCTL],
		.FIB[FIB$B_WSIZE], .HEADER, .PACKET[IRP$L_PID], .FCB);
	    IF .CURRENT_WINDOW EQL 0 THEN ERR_EXIT (SS$_EXBYTLM);
	    KERNEL_CALL (MAKE_ACCESS, .FCB, .CURRENT_WINDOW, .ABD);
	    IF .FUNCTION[IO$V_DELETE]
	    THEN KERNEL_CALL (MARKDEL_FCB, .FCB);
	    END;

! If file retention is enabled on the volume or volume set, set
! the expiration date according to the retention period. Note that
! in a volume set we use the parameters of the root volume.
!

	PRIMARY_VCB = .CURRENT_VCB;
	IF .PRIMARY_VCB[VCB$W_RVN] NEQ 0
	THEN
	    BEGIN
	    UCB = .VECTOR [CURRENT_RVT[RVT$L_UCBLST], 0];
	    IF .UCB EQL 0
	    THEN ERR_EXIT (SS$_DEVNOTMOUNT);
	    PRIMARY_VCB = .UCB[UCB$L_VCB];
	    END;

	IF CMPM (2, PRIMARY_VCB[VCB$Q_RETAINMAX], UPLIT (0, 0)) NEQ 0
	THEN
	    BEGIN
	    SUBM (2,
		  PRIMARY_VCB[VCB$Q_RETAINMAX],
		  IDENT_AREA[FI2$Q_CREDATE],
		  IDENT_AREA[FI2$Q_EXPDATE]);
	    IF .FUNCTION[IO$V_ACCESS]
	    THEN KERNEL_CALL (SET_EXPIRE);
	    END;

! Now extend the file if requested.
!

	IF .FIB[FIB$V_EXTEND] THEN EXTEND (.FIB, .HEADER);
	HEADER = .FILE_HEADER;
	KERNEL_CALL (UPDATE_FCB, .HEADER);
	END;

    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);

! Perform the remap operation if necessary to account for any initial extend.
!

    IF .FUNCTION[IO$V_ACCESS] AND .FIB[FIB$V_EXTEND]
    THEN IF .CURRENT_WINDOW[WCB$V_CATHEDRAL]
    THEN REMAP_FILE ();
    END;

! If this is a supersede operation, delete the file that was removed during
! the enter operation above. This must be done last since we cannot undo
! a delete in cleaning up from a subsequent error. We first copy the primary
! context into the context save area since this is a secondary operation.
!

IF .CLEANUP_FLAGS[CLF_SUPERSEDE]
THEN
    BEGIN
    SAVE_CONTEXT ();
    CH$COPY (FID$C_LENGTH, SUPER_FID, 0,
	     FIB$C_LENGTH - $BYTEOFFSET (FIB$W_FID), SECOND_FIB[FIB$W_FID]);
    MARK_DELETE (SECOND_FIB, 1);
    RESTORE_CONTEXT ();
    END;


RETURN 1;

END;					! end of routine CREATE

ROUTINE CHECK_DIR_ACC (FILE_ID) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks for write accessibility of the specified
!	directory. A protection check is done against the directory FCB
!	if it exists, or against the header if it must be read.
!
!
! CALLING SEQUENCE:
!	CHECK_DIR_ACC (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of file ID of directory
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if access granted or file ID is not valid
!	0 if access denied
!
! SIDE EFFECTS:
!	directory file header may be read
!
!--

BEGIN

MAP
	FILE_ID		: REF BBLOCK;	! file ID argument

LOCAL
	TEMP,				! temp to save header address
	FCB		: REF BBLOCK,	! FCB address
	HEADER		: REF BBLOCK;	! directory header address

EXTERNAL
	FILE_HEADER	: REF BBLOCK;	! global file header address

EXTERNAL ROUTINE
	SWITCH_VOLUME,			! switch to correct volume
	SEARCH_FCB,			! search FCB list
	READ_HEADER,			! read file header
	CHECK_PROTECT;			! check file protection


ENABLE CHECK_HANDLER;

! Switch context to the volume of the specified RVN.
!

SWITCH_VOLUME (.FILE_ID[FID$W_RVN]);

! First find the FCB of the directory, if any exists.
!

FCB = SEARCH_FCB (.FILE_ID);

! If there was no FCB, or it is an accessed file, read the header.
! If the FCB is in the LRU, check the sequence number since no
! one else does.
!

HEADER = 0;				! assume no header
IF (IF .FCB EQL 0 THEN 1 ELSE (NOT .FCB[FCB$V_DIR]))
THEN
    BEGIN
    TEMP = .FILE_HEADER;
    HEADER = READ_HEADER (.FILE_ID, .FCB);
    FILE_HEADER = .TEMP;		! restore main header address
    END
ELSE
    IF .FCB[FCB$W_FID_SEQ] NEQ .FILE_ID[FID$W_SEQ]
    THEN RETURN 1;

! Check directory file protection.
!

CHECK_PROTECT (1, .HEADER, .FCB);

RETURN 1;

END;					! end of routine CHECK_DIR_ACC

ROUTINE CHECK_HANDLER (SIGNAL, MECHANISM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for the directory protection
!	check. It unwinds and returns failure on a protection violation,
!	and success on other error conditions.
!
!
! CALLING SEQUENCE:
!	CHECK_HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_RESIGNAL or none if unwind
!
! SIDE EFFECTS:
!	NONE
!
!--


BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal arg array
	MECHANISM	: REF BBLOCK;	! mechanism arg array


! If the condition is change mode to user (error exit) cause an unwind to
! return to the protection check's caller, setting the appropriate return
! status. Otherwise, just resignal the condition.
!

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
THEN
    BEGIN
    MECHANISM[CHF$L_MCH_SAVR0] =  .SIGNAL[CHF$L_SIG_ARG1] NEQ SS$_NOPRIV;
    $UNWIND ();
    END;

RETURN SS$_RESIGNAL;			! status is irrelevant if unwinding

END;					! end of routine CHECK_HANDLER

END
ELUDOM
