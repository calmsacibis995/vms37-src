MODULE RDHEDR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine reads the desired file header, checks it for
!	validity and correctness, and returns its address.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  13-Dec-1976  22:00
!
! MODIFIED BY:
!
!	V02-004	ACG0156		Andrew C. Goldstein,	12-Mar-1980  15:23
!		Fix header invalidation bug
!
!	B0103	ACG0120		Andrew C. Goldstein,	16-Jan-1980  21:18
!		Reorder header consistency checking
!
!	B0102	ACG0083		Andrew C. Goldstein,	15-Nov-1979  0:59
!		Invalidate file header if bad
!
!	B0101	ACG0003		Andrew C. Goldstein,  10-Nov-1978  18:55
!	Add multi-volume support
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE READ_HEADER (FILE_ID, FCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the desired file header, checks it for
!	validity and correctness, and returns its address.
!
! CALLING SEQUENCE:
!	READ_HEADER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of file ID or 0
!	ARG2: FCB address or 0 if none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB contains address of VCB in process
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	HEADER_LBN contains LBN of header read
!	FILE_HEADER contains address of header buffer
!
! ROUTINE VALUE:
!	address of file header
!
! SIDE EFFECTS:
!	index file window may be turned
!
!--

BEGIN

MAP
	FILE_ID		: REF BBLOCK,	! file ID arg
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	STATUS,				! general status value
	VBN,				! VBN of header
	LBN,				! LBN of header
	HEADER		: REF BBLOCK,	! address of header block
	FID		: REF BBLOCK,	! local file ID pointer
	IDX_FCB		: REF BBLOCK;	! address of index file FCB

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup_action flags
	HEADER_LBN,			! longword to get LBN of header
	FILE_HEADER	: REF BBLOCK,	! longword to get buffer address
	CURRENT_VCB	: REF BBLOCK;	! address of VCB in process

EXTERNAL ROUTINE
	SWITCH_VOLUME,			! switch to correct volume
	MAP_VBN,			! map virtual to logical
	READ_BLOCK,			! read a disk block
	CHECK_HEADER2,			! check header for correctness
	INVALIDATE;			! invalidate block buffer

! Switch context to the volume of the specified RVN.
!

SWITCH_VOLUME (IF .FCB NEQ 0
		THEN .FCB[FCB$W_FID_RVN]
		ELSE .FILE_ID[FID$W_RVN]
		);

! Get the LBN of the file header. If an FCB is supplied, it contains
! the LBN. If not, derive it from the file number.
!

LBN =
    BEGIN
    IF .FCB NEQ 0
    THEN .FCB[FCB$L_HDLBN]
    ELSE
	BEGIN
	VBN = .FILE_ID[FID$W_NUM];
	IF .CURRENT_VCB[VCB$V_EXTFID]
	THEN VBN<16,8> = .FILE_ID[FID$B_NMX];
	IF .VBN EQL 0 THEN ERR_EXIT (SS$_NOSUCHFILE);
	VBN = .VBN + .CURRENT_VCB[VCB$B_IBMAPSIZE] + .CURRENT_VCB[VCB$W_CLUSTER]*4;
	IDX_FCB = .CURRENT_VCB[VCB$L_FCBFL];
	MAP_VBN (.VBN, .IDX_FCB[FCB$L_WLFL])
	END
    END;

IF .LBN EQL -1 THEN ERR_EXIT (SS$_NOSUCHFILE);

! Now read the header and check it for correctness. If a file ID
! was supplied, use the file number and file sequence number from
! it; else use the arguments. If the file operation is being done on a
! spooled device, the file must be marked as spooled.
!

HEADER = READ_BLOCK (.LBN, 1, HEADER_TYPE);

IF .FILE_ID NEQ 0
THEN
    FID = .FILE_ID
ELSE
    FID = FCB[FCB$W_FID];

IF NOT (STATUS = CHECK_HEADER2 (.HEADER, .FID))
THEN
    BEGIN
    IF .STATUS LSSU 4
    THEN INVALIDATE (.HEADER);
    ERR_EXIT ();
    END;

IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
AND NOT .HEADER[FH2$V_SPOOL]
AND (.HEADER[FH2$W_FID_NUM] GTRU .CURRENT_VCB[VCB$B_RESFILES]
    OR (.CURRENT_VCB[VCB$V_EXTFID]
	AND .HEADER[FH2$B_FID_NMX] NEQ 0)
    )
THEN ERR_EXIT (SS$_NOSUCHFILE);

HEADER_LBN = .LBN;			! return LBN of header
FILE_HEADER = .HEADER;			! and address
RETURN .HEADER;				! and the header itself
END;					! end of routine READ_HEADER

END
ELUDOM
