MODULE SNDSMB (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine constructs and sends a message to the symbiont manager
!	to cause a file to be spooled and deleted.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  5-Jun-1978  11:23
!
! MODIFIED BY:
!
!	V02-004	ACG0245		Andrew C. Goldstein,	23-Dec-1981  21:21
!		Check error return from queue manager
!
!	V02-003	SPF0025		Steve Forgey		08-Sep-1981
!		Add new header fields to symbiont manager message.
!
!	V02-001	GWF0043		Gary W. Fowler		12-May-1981  15:20
!		Add file size option and file size to message sent to job
!		controller.
!
!	V02-000	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	SEND_SYMBIONT	: NOVALUE,	! main routine
	MAKE_JBCMAILBOX	: NOVALUE,	! create new job controller mailbox
	SEND_MESSAGE;			! kernel mode routine

!+
!
! Format of the message sent to the symbiont manager to queue a single file.
!
!-

MACRO
	SMB_IDENT	= 00, 0, 16, 0%,	! message identification code
	SMB_REPLYMBX	= 02, 0, 16, 0%,	! reply mailbox unit
	SMB_PRIV	= 04, 0, 00, 0%,	! process privileges (64 bits)
	SMB_UIC		= 12, 0, 32, 0%,	! sender UIC
	SMB_USERNAME	= 16, 0, 00, 0%,	! user name + account name
	SMB_PRIO	= 36, 0, 08, 0%,	! priority
	SMB_PID		= 40, 0, 32, 0%,	! process ID
	SMB_STS		= 44, 0, 32, 0%,	! process status
	SMB_OWNER	= 48, 0, 32, 0%,	! owner process ID
	SMB_TERMINAL	= 52, 0, 00, 0%,	! terminal name
	SMB_SYSTIME	= 60, 0, 00, 0%,	! current system time
	SMB_FUNC	= 68, 0, 16, 0%,	! symbiont manager function code
	SMB_QNAME	= 70, 0, 00, 0%,	! queue name
	SMB_DEVNAME	= 86, 0, 00, 0%,	! device name
	SMB_FID		= 102, 0, 00, 0%,	! file ID
	SMB_DID		= 108, 0, 00, 0%,	! directory ID
	SMB_FILENAME	= 114, 0, 00, 0%,	! file name
	SMB_OPTIONS	= 134,0, 08, 0%,	! delete option byte
	SMB_FILOPT	= 135,0, 08, 0%,	! file size option byte
	SMB_FILSIZ	= 136,0, 32, 0%;	! file size

LITERAL
	SMB_USER_LEN	= 20,			! length of user + account name
	SMB_TNAMELEN	= 08,			! length of terminal name field
	SMB_QNAMELEN	= 16,			! length of queue name
	SMB_DEVNAMELEN	= 16,			! length of device name
	SMB_FILENAMELEN	= 20,			! length of file name
	SMB_LENGTH	= 140,			! length of message buffer
	RPL_LENGTH	= 8;			! length of reply buffer

!
! The message is embedded within a buffer containing an extra longword at
! each end; they are used to lock down the message.
!

MACRO
	END_POINTER	= 00, 0, 32, 0%,	! top word points to end
	BUFFER_END	= 144,0, 32, 0%;	! end longword

!
! Format of the job controller reply message.
!

MACRO
	RPL_IDENT	= 00, 0, 16, 0%,	! reply message ID
	RPL_JOBID	= 02, 0, 16, 0%,	! job number
	RPL_STATUS	= 04, 0, 32, 0%;	! status code

GLOBAL ROUTINE SEND_SYMBIONT (ABD, HEADER, FCB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine constructs and sends a message to the symbiont manager
!	to cause a file to be spooled and deleted.
!
!
! CALLING SEQUENCE:
!	SEND_SYMBIONT (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of buffer descriptor packet
!	ARG2: address of file header
!	ARG3: address of file control block
!
! IMPLICIT INPUTS:
!	IO_PACKET: address of I/O packet of this request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	message sent to symbiont manager, header may be altered
!
!--

BEGIN

MAP
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH], ! buffer descriptor arg
	HEADER		: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! file control block arg

LINKAGE
	L_IOC_CVT	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 5;
			       REGISTER = 1) :
			  NOTUSED (6, 7, 8, 9, 10, 11);

LOCAL
	P,				! string scan pointer
	STATUS,				! general status value
	LENGTH,				! length of converted device name
	DATA_BUFFER	: BBLOCK [SMB_LENGTH+8], ! message buffer
	REPLY_BUFFER	: BBLOCK [RPL_LENGTH], ! reply message buffer
	MBX_STATUS	: VECTOR [4, WORD], ! I/O status from reading mailbox
	IDENT_AREA	: REF BBLOCK,	! address of file header ident area
	PCB		: REF BBLOCK,	! address of user process control block
	UCB		: REF BBLOCK,	! UCB of spooled device
	VCB		: REF BBLOCK;	! VCB of spooled device

BIND
	MSG_BUFFER	= DATA_BUFFER + 4 : BBLOCK, ! the message itself
	TEN_SECONDS	= UPLIT (-10*10000000, -1); ! 10 second time value

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	USER_STATUS	: VECTOR,	! status returned to user
	JBC_MAILBOX	: WORD,		! job controller mailbox channel
	JBC_MBX_UNIT,			! unit number of mailbox
	IO_PACKET	: REF BBLOCK,	! I/O packet of user request
	CURRENT_UCB	: REF BBLOCK,	! UCB of current device
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
					! System PCB vector

EXTERNAL ROUTINE
	MARK_DIRTY,			! mark buffer for rewrite
	CHECKSUM,			! compute file header checksum
	IOC$CVT_DEVNAM	: L_IOC_CVT ADDRESSING_MODE (GENERAL);
					! get device name of UCB


! Jam the system and owner protection fields of the file header to zero, to
! guarantee access by the spooler.
!

(HEADER[FH2$W_FILEPROT])<0,8> = 0;
MARK_DIRTY (.HEADER);
CHECKSUM (.HEADER);

! Now initialize the message buffer and construct the message in it.
!

CH$FILL (0, SMB_LENGTH, MSG_BUFFER);
MSG_BUFFER[SMB_IDENT]	= MSG$_SNDSMB;
MSG_BUFFER[SMB_REPLYMBX] = .JBC_MBX_UNIT;
MSG_BUFFER[SMB_UIC]	= .FCB[FCB$L_FILEOWNER];

CH$COPY (.ABD[ABD$C_NAME, ABD$W_COUNT],
	ABD[ABD$C_NAME, ABD$W_TEXT] + .ABD[ABD$C_NAME, ABD$W_TEXT] + 1,
	' ', SMB_USER_LEN, MSG_BUFFER[SMB_USERNAME]);

MSG_BUFFER[SMB_PRIO]	= 31 - .IO_PACKET[IRP$B_PRI];
MSG_BUFFER[SMB_PID]	= .IO_PACKET[IRP$L_PID];
PCB			= .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];
MSG_BUFFER[SMB_STS]	= .PCB[PCB$L_STS];
MSG_BUFFER[SMB_OWNER]	= .PCB[PCB$L_OWNER];
CH$COPY (.(PCB[PCB$T_TERMINAL])<0,8> + 1,
	PCB[PCB$T_TERMINAL],
	0, SMB_TNAMELEN, MSG_BUFFER[SMB_TERMINAL]);
$GETTIM (TIMADR = MSG_BUFFER[SMB_SYSTIME]);
MSG_BUFFER[SMB_FUNC]	= SMR$K_ENTER;

UCB = .IO_PACKET[IRP$L_MEDIA];
VCB = .UCB[UCB$L_VCB];
CH$COPY (.VCB[VCB$B_QNAMECNT] + 1,
	VCB[VCB$B_QNAMECNT],
	0, SMB_QNAMELEN, MSG_BUFFER[SMB_QNAME]);

IOC$CVT_DEVNAM (SMB_DEVNAMELEN - 1, MSG_BUFFER[SMB_DEVNAME] + 1,
		.CURRENT_UCB; LENGTH);
(MSG_BUFFER[SMB_DEVNAME])<0,8> = .LENGTH - 1;

CH$MOVE (FID$C_LENGTH, FCB[FCB$W_FID], MSG_BUFFER[SMB_FID]);
IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET] * 2;
P = CH$FIND_CH (FI2$S_FILENAME, IDENT_AREA[FI2$T_FILENAME], ' ');
IF CH$FAIL (.P) THEN P = IDENT_AREA[FI2$T_FILENAME] + FI2$S_FILENAME - 1;
(MSG_BUFFER[SMB_FILENAME])<0,8> = .P - IDENT_AREA[FI2$T_FILENAME];
CH$MOVE (.P-IDENT_AREA[FI2$T_FILENAME], IDENT_AREA[FI2$T_FILENAME],
	MSG_BUFFER[SMB_FILENAME]+1);

MSG_BUFFER[SMB_OPTIONS] = SMO$K_DELETE;
MSG_BUFFER[SMB_FILOPT]	= SMO$K_FILESIZ;
MSG_BUFFER[SMB_FILSIZ]	= ROT (.BBLOCK[HEADER[FH2$W_RECATTR],FAT$L_EFBLK], 16);
IF .MSG_BUFFER[SMB_FILSIZ] NEQ 0
AND .BBLOCK[HEADER[FH2$W_RECATTR],FAT$W_FFBYTE] EQL 0
THEN MSG_BUFFER[SMB_FILSIZ] = .MSG_BUFFER[SMB_FILSIZ] - 1;

! The actual send is done in kernel mode, since the channel assignment must
! be done as a back door assignment.
!

STATUS = KERNEL_CALL (SEND_MESSAGE, DATA_BUFFER);
IF NOT .STATUS
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_DELFILE] = 1;
    USER_STATUS[1] = .STATUS;
    ERR_EXIT (SS$_NOTPRINTED);
    END;

! Now wait for a response in the reply mailbox. This is done under a
! timer to avoid hanging the ACP.
!

IF .JBC_MAILBOX EQL 0
THEN RETURN;
STATUS = $SETIMR (EFN = TIMER_EFN, DAYTIM = TEN_SECONDS);
IF NOT .STATUS
THEN
    BEGIN
    USER_STATUS[1] = .STATUS;
    ERR_EXIT (SS$_JBCERROR);
    END;
STATUS = $QIO (CHAN = .JBC_MAILBOX,
	       FUNC = IO$_READLBLK,
	       EFN  = MAILBOX_EFN,
	       IOSB = MBX_STATUS,
	       P1   = REPLY_BUFFER,
	       P2   = RPL_LENGTH
	       );
IF NOT .STATUS
THEN
    BEGIN
    $CANTIM ();
    USER_STATUS[1] = .STATUS;
    ERR_EXIT (SS$_JBCERROR);
    END;

! Wait for the reply. If the wait times out, we delete and re-create
! the job controller mailbox, because the reply could still come in later,
! and we are not longer interested. This way, the mailbox no longer
! exists and the belated reply is neatly ratholed.
!

$WFLOR (EFN = MAILBOX_EFN, MASK = 1^MAILBOX_EFN OR 1^TIMER_EFN);
IF $CLREF (EFN = MAILBOX_EFN) EQL SS$_WASSET
THEN
    $CANTIM ()
ELSE
    BEGIN
    MAKE_JBCMAILBOX ();
    USER_STATUS[1] = SS$_TIMEOUT;
    ERR_EXIT (SS$_JBCERROR);
    END;

IF NOT .MBX_STATUS
THEN
    BEGIN
    USER_STATUS[1] = .MBX_STATUS;
    ERR_EXIT (SS$_JBCERROR);
    END;

! Check the reply message. If a queue manager error has occurred,
! report it and delete the file. If errors occur in getting the reply,
! however, we hope for the best and let the file go (while reporting
! the error). If we are wrong, the result is a lost file.
!

IF .REPLY_BUFFER[RPL_IDENT] NEQ MSG$_SMBRSP
THEN ERR_EXIT (SS$_JBCERROR);

STATUS = .REPLY_BUFFER[RPL_STATUS];
IF NOT .STATUS
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_DELFILE] = 1;
    USER_STATUS[1] = .STATUS;
    ERR_EXIT (SS$_NOTPRINTED);
    END;

END;					! end of routine SEND_SYMBIONT

GLOBAL ROUTINE MAKE_JBCMAILBOX : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates a new mailbox to receive job controller
!	reply messages.
!
! CALLING SEQUENCE:
!	MAKE_JBCMAILBOX ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	JBC_MAILBOX: channel assigned to current mailbox
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	JBC_MAILBOX: channel assigned to current mailbox
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	mailbox created and possibly deleted
!
!--

BEGIN

LITERAL
	EXEC_MODE	= 1;

EXTERNAL
	JBC_MAILBOX,			! channel number of job controller mailbox
	JBC_MBX_UNIT;			! unit number of above


! First delete any existing job controller mailbox by deassigning
! the channel.
!

IF .JBC_MAILBOX NEQ 0
THEN $DASSGN (CHAN = .JBC_MAILBOX);
JBC_MAILBOX = 0;
JBC_MBX_UNIT = 0;

! Now create a new mailbox. We do not check for status since there's
! nothing we can do about it anyway. If the mailbox fails to create,
! we simply do without it.
!

IF $CREMBX (CHAN = JBC_MAILBOX,
	    MAXMSG = 132,
	    BUFQUO = 132,
	    PROMSK = %X'FF00',
	    ACMODE = EXEC_MODE
	    )
THEN
    $GETDVI (CHAN = .JBC_MAILBOX,
	     ITMLST = UPLIT (WORD (4, DVI$_UNIT),
			     LONG (JBC_MBX_UNIT, 0, 0))
	     );

END;					! End of routine MAKE_JBCMAILBOX

LOCK_CODE;				! code must not page fault

ROUTINE SEND_MESSAGE (MESSAGE_ARG) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine assigns a channel to the job controller mailbox and sends
!	the message to print a file.
!
!
! CALLING SEQUENCE:
!	SEND_MESSAGE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of message buffer
!
! IMPLICIT INPUTS:
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	message sent to symbiont manager
!
!--

BEGIN

REGISTER
	MESSAGE		= 4 : REF BBLOCK;! local pointer to message

LINKAGE
	L_WRTMAILBOX	= JSB (REGISTER = 3, REGISTER = 4, REGISTER = 5) :
			  NOPRESERVE (2)
			  NOTUSED (6, 7, 8, 9, 10, 11);

EXTERNAL
	SYS$GL_JOBCTLMB	: BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! job controller mailbox

EXTERNAL ROUTINE
	EXE$WRTMAILBOX	: L_WRTMAILBOX ADDRESSING_MODE (GENERAL);
					! system subroutine to write mailbox


! The job controller mailbox is inaccessible through the normal QIO
! mechanism; we use the system subroutine to write it. First touch the
! message to fault in the page(s).
!

MESSAGE = .MESSAGE_ARG;
MESSAGE[END_POINTER] = MESSAGE[BUFFER_END];
MESSAGE[BUFFER_END] = IPL$_ASTDEL;
SET_IPL (..MESSAGE[END_POINTER]);

IF .SYS$GL_JOBCTLMB[UCB$W_REFC] NEQ 0
THEN EXE$WRTMAILBOX (SMB_LENGTH, .MESSAGE+4, SYS$GL_JOBCTLMB);

SET_IPL (0);
RETURN 1;

END;					! end of routine SEND_MESSAGE

END
ELUDOM
