MODULE MAKNMB (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine converts a file name string into the
!	RAD-50 name block format.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-Jan-1977  17:06
!
! MODIFIED BY:
!
!	A0101	ACG0057		Andrew C. Goldstein,	10-Aug-1979  16:41
!		Wild card interface changes
!
!	A0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:03
!	Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


! Linkages to subroutines in this module.
!

LINKAGE
	L_GETCHAR	= JSB :
			  NOPRESERVE (5)
			  GLOBAL (COUNT = 6, STRINGP = 7, FCOUNT = 8),

	L_GETSTAR	= JSB :
			  GLOBAL (COUNT = 6, STRINGP = 7),

	L_TYPE		= JSB :
			  GLOBAL (COUNT = 6, STRINGP = 7);

! Routines in this module
!

FORWARD ROUTINE
	MAKE_NAMEBLOCK	: NOVALUE,	! main routine
	GETCHAR		: L_GETCHAR,	! get RAD-50 set character
	GETSTAR		: L_GETSTAR,	! get star character, if any
	TYPE		: L_TYPE;	! determine type of current character

GLOBAL ROUTINE MAKE_NAMEBLOCK (LENGTH, STRING, NAMEBLOCK) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts a file name string into the
!	RAD-50 name block format.
!
! CALLING SEQUENCE:
!	MAKE_NAMEBLOCK (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: length of file name string
!	ARG2: address of file name string
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG3: address of file name block
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	NAMEBLOCK	: REF BBLOCK;	! name block arg

GLOBAL REGISTER
	COUNT	= 6,			! characters remaining in string
	STRINGP	= 7	: REF VECTOR [,BYTE],  ! string pointer
	FCOUNT	= 8;			! count of chars in current field

LOCAL
	VERSION,			! file version number
	P,				! string scan pointer
	BLOCKP		: REF VECTOR [,WORD]; ! pointer into name block

EXTERNAL ROUTINE
	LIB$CVT_DTB	: ADDRESSING_MODE (ABSOLUTE);
					! decimal to binary convert

! Initialize all the locals.
!

CH$FILL (0, NMB$C_LENGTH, .NAMEBLOCK);	! zero the entire block
STRINGP = .STRING;			! set up string pointer
P = CH$FIND_CH (.LENGTH, .STRINGP, ' '); ! look for a terminating space
COUNT = .P - .STRINGP;			! compute count
IF CH$FAIL (.P)
THEN COUNT = .LENGTH;			! use whole string if no space
BLOCKP = NAMEBLOCK[NMB$W_NAME];		! point to name field in block
FCOUNT = 0;				! init chars in field count


! Build the name field, consisting of 3 words of 3 RAD-50 characters per word.
!

DECR I FROM 3 TO 1 DO
    BEGIN
    DECR J FROM 3 TO 1 DO
	BLOCKP[0] = .BLOCKP[0] * 40 + GETCHAR ();
    BLOCKP = .BLOCKP + 2;
    END;

IF GETSTAR ()				! set wild card bits if star
THEN
    BEGIN
    NAMEBLOCK[NMB$V_WILD] = 1;
    NAMEBLOCK[NMB$V_ALLNAM] = 1;
    END;

! Pick up the name delimiter, which is either dot or end of string.
!

CASE TYPE () FROM 1 TO 5 OF
    SET
    [1,2,3,4]:	ERR_EXIT (SS$_BADFILENAME);
    [5]:	BEGIN
		COUNT = .COUNT - 1;	! pick up the character
		STRINGP = .STRINGP + 1;
		END;
    [OUTRANGE]:	0;
    TES;

! Now build the type field, consisting of 1 word of 3 RAD-50 characters.
!

FCOUNT = 0;				! re-init chars in field count

DECR J FROM 3 TO 1 DO
    BLOCKP[0] = .BLOCKP[0] * 40 + GETCHAR ();

IF GETSTAR ()				! set wild card bits if star
THEN
    BEGIN
    NAMEBLOCK[NMB$V_WILD] = 1;
    NAMEBLOCK[NMB$V_ALLTYP] = 1;
    END;

! Pick up the type delimiter, which may be dot, semicolon, or end of string.
!

CASE TYPE () FROM 1 TO 6 OF
    SET
    [1,2,3,4]:	ERR_EXIT (SS$_BADFILENAME);
    [5,6]:	BEGIN
		COUNT = .COUNT - 1;	! pick up the character
		STRINGP = .STRINGP + 1;
		END;
    [OUTRANGE]:	0;
    TES;

! If the version is not wild card and there are still characters present,
! get the binary version number.
!

IF GETSTAR ()				! set wild card bits if star
THEN
    BEGIN
    NAMEBLOCK[NMB$V_WILD] = 1;
    NAMEBLOCK[NMB$V_ALLVER] = 1;
    END
ELSE IF .COUNT GTR 0
THEN
    BEGIN
    BLOCKP = .BLOCKP + 2;
    IF NOT LIB$CVT_DTB (.COUNT, .STRINGP, VERSION)
    THEN ERR_EXIT (SS$_BADFILENAME);
    IF .VERSION GTRU 32767
    THEN ERR_EXIT (SS$_BADFILEVER);
    (.BLOCKP)<0,16> = .VERSION;
    END;

RETURN 1;

END;					! end of routine MAKE_NAMEBLOCK

ROUTINE GETCHAR : L_GETCHAR =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the RAD-50 code of the next character in the
!	input string if it is in the RAD-50 set. If it is not, or end of
!	string has been reached, it returns zero.
!
! CALLING SEQUENCE:
!	GETCHAR ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	COUNT: characters remaining in string
!	STRINGP: string pointer
!	FCOUNT: chars in current field
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	character code
!
! SIDE EFFECTS:
!	COUNT decremented and STRINGP advanced if legal character.
!
!--

BEGIN

REGISTER
	CHAR		= 5;		! character in process

EXTERNAL REGISTER
	COUNT	= 6,			! characters remaining in string
	STRINGP	= 7	: REF VECTOR [,BYTE],  ! string pointer
	FCOUNT	= 8;			! count of chars in current field


! Get the next character from the string and dispatch in its type.
!

CHAR = .STRINGP[0];

CASE TYPE () FROM 0 TO 6 OF
    SET
    [0,5,6]:				! end, dot, or semicolon
	CHAR = 0;
    [1]:				! upper case alpha
	BEGIN
	CHAR = .CHAR - 'A' + 1;		! convert to RAD-50 code
	COUNT = .COUNT - 1;		! advance to next character
	STRINGP = .STRINGP + 1;
	FCOUNT = .FCOUNT + 1;		! count character in field
	END;
    [2]:				! lower case alpha
	BEGIN
	CHAR = .CHAR - 'a' + 1;		! convert to RAD-50 code
	COUNT = .COUNT - 1;		! advance to next character
	STRINGP = .STRINGP + 1;
	FCOUNT = .FCOUNT + 1;		! count character in field
	END;
    [3]:				! numeric
	BEGIN
	CHAR = .CHAR - '0' + 30;	! convert to RAD-50 code
	COUNT = .COUNT - 1;		! advance to next character
	STRINGP = .STRINGP + 1;
	FCOUNT = .FCOUNT + 1;		! count character in field
	END;
    [4]:				! star - legal as only char in field
	BEGIN
	CHAR = 0;
	IF .FCOUNT NEQ 0 THEN ERR_EXIT (SS$_BADFILENAME);
	END;
    TES;

RETURN .CHAR;

END;					! end of routine GETCHAR

ROUTINE GETSTAR : L_GETSTAR =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine gobbles the next character in the input string
!	if it is a star.
!
! CALLING SEQUENCE:
!	GETSTAR ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	COUNT: number of characters in input string
!	STRINGP: input string pointer
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if character was a star
!	0 otherwise
!
! SIDE EFFECTS:
!	COUNT decremented, STRINGP incremented if character was star.
!
!--

BEGIN

EXTERNAL REGISTER
	COUNT	= 6,			! characters remaining in string
	STRINGP	= 7	: REF VECTOR [,BYTE];  ! string pointer

IF .COUNT GTR 0 AND .STRINGP[0] EQL '*'
THEN
    BEGIN
    COUNT = .COUNT - 1;
    STRINGP = .STRINGP + 1;
    1
    END
ELSE
    0

END;					! end of routine GETSTAR

ROUTINE TYPE : L_TYPE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines the type code of the current character
!	in the string.
!
! CALLING SEQUENCE:
!	TYPE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	COUNT: number of characters left in string
!	STRINGP: string pointer
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	type code of character:
!	0: end of string or non-RAD-50
!	1: upper case alpha
!	2: lower case alpha
!	3: numeric
!	4: star
!	5: dot
!	6: semicolon
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

EXTERNAL REGISTER
	COUNT	= 6,		! characters remaining in string
	STRINGP	= 7	: REF VECTOR [,BYTE]; ! string pointer

! Character match tables. First is low character of range, second is
! high character. Type is table index of the matching range.
!

BIND
	LOWCHAR		= UPLIT BYTE (0, 'Aa0*.;') : VECTOR [,BYTE],
	HIGHCHAR	= UPLIT BYTE (0, 'Zz9*.;') : VECTOR [,BYTE];

! If the string is empty return 0 as the type. Else search the tables.
!

IF .COUNT LEQ 0 THEN RETURN 0;

INCR I FROM 1 TO 6 DO
    IF .STRINGP[0] GEQU .LOWCHAR[.I]
    AND .STRINGP[0] LEQU .HIGHCHAR[.I]
    THEN RETURN .I;

ERR_EXIT (SS$_BADFILENAME);		! other characters are illegal


END;					! end of routine TYPE

END
ELUDOM
