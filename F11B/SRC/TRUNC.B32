MODULE TRUNC (
		LANGUAGE (BLISS32),
		IDENT = 'V03-002'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine truncates a file by deallocating the indicated blocks.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  21-Mar-1977  10:41
!
! MODIFIED BY:
!
!	V03-002	ACG0287		Andrew C. Goldstein,	14-Apr-1982  17:16
!		Check for index file in header rather than FCB
!
!	V03-001	LMP0023		L. Mark Pilant,		 7-Apr-1982  16:45
!		Give a privilege violation if attempting to truncate the
!		index file (INDEXF.SYS).
!
!	V02-011	ACG35898	Andrew C. Goldstein,	10-Mar-1981  22:15
!		Update HIBLK in the primary header
!
!	V02-010	ACG0170		Andrew C. Goldstein,	7-May-1980  18:27
!		Fix handling of map pointer use count
!
!	V02-009	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:28
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	TRUNCATE	: NOVALUE,	! truncate file
	TRUNCATE_HEADER	: NOVALUE;	! truncate individual file header

GLOBAL ROUTINE TRUNCATE (FIB, FILE_HEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine truncates a file to the size indicated in the FIB by
!	deallocating the necessary blocks. The erase flag controls whether
!	the retrieval pointers are erased in the header. The deallocate flag
!	controls whether or not the blocks are actually returned to the
!	storage map.
!
! CALLING SEQUENCE:
!	TRUNCATE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of FIB for operation
!	ARG2: address of file header
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	storage bitmap altered
!	file header altered
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! FIB for operation
	FILE_HEADER	: REF BBLOCK;	! file header

LINKAGE
	L_MAP_POINTER	= JSB :
			  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8),

	L_MAKE_POINTER	= CALL :
			  GLOBAL (PREV_POINTER = 9);

GLOBAL REGISTER
	COUNT		= 6,		! count of blocks returned
	LBN		= 7,		! LBN of map entry
	MAP_POINTER	= 8 : REF BBLOCK, ! pointer to scan map
	PREV_POINTER	= 9 : REF BBLOCK; ! pointer to build new map entry

LOCAL
	FCB		: REF BBLOCK,	! FCB of current file header
	HEADER		: REF BBLOCK,	! address of current file header
	ALT_HEADER	: REF BBLOCK,	! address of header copy to free blocks
	NEW_HEADER	: REF BBLOCK,	! address of extension file header
	TRUNC_POINTER,			! pointer to start of truncation
	MAP_END,			! pointer to end of map area
	VBN,				! relative VBN of operation
	HEADER_VBN,			! value of VBN at start of this header
	HEADER_SIZE,			! number of blocks mapped by header
	EXT_FID		: BBLOCK [FID$C_LENGTH], ! file ID of extension header
	EX_SEGNUM,			! segment number of ext header
	REREAD,				! flag to reread primary header
	REREAD2;			! flag to update primary header

LABEL
	DO_TRUNCATE,			! main body of truncate processing code
	VBN_LOOP;			! main loop to scan for starting VBN

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	IO_PACKET	: REF BBLOCK,	! I/O packet for this request
	USER_STATUS	: VECTOR,	! I/O status block of user
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	PRIMARY_FCB	: REF BBLOCK;	! FCB of file

EXTERNAL ROUTINE
	PMS_START_SUB,			! start subfunction metering
	PMS_END_SUB,			! end subfunction metering
	FILE_SIZE,			! compute size mapped by header
	SEARCH_FCB,			! search FCB list for FCB
	CHARGE_QUOTA,			! charge blocks to user's quota
	DEALLOCATE_BAD,			! mark blocks bad
	MARK_DIRTY,			! mark buffer for write-back
	CHECKSUM,			! checksum file header
	GET_MAP_POINTER	: L_MAP_POINTER, ! get value of next map pointer
	MAKE_POINTER	: L_MAKE_POINTER, ! build a new map pointer
	NEXT_HEADER,			! read next extension header
	CREATE_BLOCK,			! allocate a block buffer
	INVALIDATE,			! invalidate a block buffer
	UPDATE_FILESIZE,		! update file size in primary FCB
	INIT_FCB2,			! initialize FCB
	WRITE_HEADER,			! write file header
	READ_HEADER,			! read file header
	DEL_EXTFCB,			! delete extension FCB's
	DELETE_FILE;			! delete remainder of file


! Start metering for this subfunction.
!

PMS_START_SUB (PMS_ALLOC);

! Establish the basic pointers. Round up the starting VBN to the next cluster
! boundary and adjust it to a zero start. The block count must be zero (default).
! If the operation calls for the blocks to be turned over to the bad block
! file, the caller must be system; also, round down the file size.
!

IF .FIB[FIB$V_MARKBAD]
AND NOT .CLEANUP_FLAGS[CLF_SYSPRV]
THEN ERR_EXIT (SS$_NOPRIV);

HEADER = .FILE_HEADER;
FCB = .PRIMARY_FCB;

! Check for the index file INDEXF.SYS
!

IF  .HEADER[FH2$W_FID_NUM] EQL FID$C_INDEXF
AND .HEADER[FH2$W_FID_SEQ] EQL FID$C_INDEXF
AND .HEADER[FH2$B_FID_NMX] EQL 0
THEN ERR_EXIT (SS$_NOPRIV);

VBN = .FIB[FIB$L_EXVBN] - 1;

IF .FIB[FIB$L_EXSZ] NEQ 0 THEN ERR_EXIT (SS$_BADPARAM);

! Init the user's return parameters.
!

FIB[FIB$L_EXVBN] = 1;
FIB[FIB$L_EXSZ] = 0;
REREAD = 0;

! Now scan the file headers for the retrieval pointer containing the starting
! VBN. If the VBN is off the end of file, report the error; if it coincides,
! the operation is a noop.
!

DO_TRUNCATE:
BEGIN

VBN_LOOP:
BEGIN
WHILE 1 DO
    BEGIN
    MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
    MAP_END = .MAP_POINTER + .HEADER[FH2$B_MAP_INUSE]*2;
    PREV_POINTER = .MAP_POINTER;
    HEADER_VBN = .VBN;

    UNTIL .MAP_POINTER GEQA .MAP_END DO
	BEGIN
	GET_MAP_POINTER ();
	IF .COUNT GEQU .VBN THEN LEAVE VBN_LOOP;
	VBN = .VBN - .COUNT;
	FIB[FIB$L_EXVBN] = .FIB[FIB$L_EXVBN] + .COUNT;
	IF .COUNT NEQ 0
	THEN PREV_POINTER = .MAP_POINTER;
	END;

! We have scanned through an entire header. Chain to the next header if it
! exists. If we run out of headers, then the truncate point is beyond end
! of file.
!

    NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
    IF .NEW_HEADER EQL 0 THEN EXITLOOP;
    REREAD = 1;
    HEADER = .NEW_HEADER;

    IF .FCB NEQ 0
    THEN FCB = .FCB[FCB$L_EXFCB]
    ELSE IF SEARCH_FCB (HEADER[FH2$W_FID]) NEQ 0
    THEN ERR_EXIT (SS$_ACCONFLICT);
    END;				! end of header scan loop

IF .VBN NEQ 0
THEN ERR_EXIT (SS$_ENDOFFILE)
END;					! end of VBN_LOOP

! We are now pointing at the retrieval pointer in which the truncation starts.
! VBN contains the number of blocks to retain in that pointer. We must now
! round it down or up to the next cluster boundary, depending on whether or
! not the blocks are to be marked bad, respectively.
!

USER_STATUS[1] = - .VBN;
VBN = ((.VBN
	+ (IF NOT .FIB[FIB$V_MARKBAD]
	  THEN .CURRENT_VCB[VCB$W_CLUSTER] - 1
	  ELSE 0)
	)
	 / .CURRENT_VCB[VCB$W_CLUSTER]) * .CURRENT_VCB[VCB$W_CLUSTER];
USER_STATUS[1] = .USER_STATUS[1] + .VBN;
FIB[FIB$L_EXVBN] = .FIB[FIB$L_EXVBN] + .VBN;
HEADER_VBN = .HEADER_VBN + .USER_STATUS[1];

! See if rounding up is causing us to keep the entire map pointer. If so,
! bump to the next pointer. If that takes us to the end of the map area of
! a header with no extension, return with no action. (This case is common
! enough to be worth checking for.)
!

IF .VBN EQL .COUNT
THEN
    BEGIN
    VBN = 0;
    PREV_POINTER = .MAP_POINTER;
    IF .PREV_POINTER GEQA .MAP_END
    AND .HEADER[FH2$W_EX_FIDNUM] EQL 0
    AND .HEADER[FH2$W_EX_FIDRVN] EQL 0
    THEN  LEAVE DO_TRUNCATE;
    END;

! If we are turning blocks over to the bad block file, check that
! (1) the pointer given is the last pointer in the header,
! (2) the header is the last one for the file, and (3) that the quantity
! being deallocated is exactly one cluster, this being the only condition
! we can correctly handle.
!

IF .FIB[FIB$V_MARKBAD]
THEN
    IF .MAP_POINTER NEQ .MAP_END
    OR .COUNT - .VBN NEQ .CURRENT_VCB[VCB$W_CLUSTER]
    OR .HEADER[FH2$W_EX_FIDNUM] NEQ 0
    OR .HEADER[FH2$W_EX_FIDSEQ] NEQ 0
    THEN ERR_EXIT (SS$_BADPARAM);

! Do the real truncate. Set up cleanup status and get control blocks in shape.
!

CLEANUP_FLAGS[CLF_FIXFCB] = 1;
CLEANUP_FLAGS[CLF_INVWINDOW] = 1;
KERNEL_CALL (UPDATE_FILESIZE, .FIB[FIB$L_EXVBN] - 1);

! Update the HIBLK field in the record attributes to reflect the new file
! size, if this is the primary header..
!

IF NOT .REREAD
THEN BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.FIB[FIB$L_EXVBN]-1, 16);

! Make a copy of the file header with which to free the blocks. In the original,
! zero out the map pointers being freed and write the header back before
! deallocating the blocks, so that we do not get a file header mapping free
! blocks if the system crashes while this is going on.
!

ALT_HEADER = CREATE_BLOCK (-1, 1, HEADER_TYPE);
INVALIDATE (.ALT_HEADER);
CH$MOVE (512, .HEADER, .ALT_HEADER);
TRUNC_POINTER = .PREV_POINTER - .HEADER + .ALT_HEADER;

HEADER[FH2$B_MAP_INUSE] = (.PREV_POINTER - .HEADER) / 2 - .HEADER[FH2$B_MPOFFSET];
IF .VBN NEQ 0
THEN
    BEGIN
    MAP_POINTER = .PREV_POINTER;
    GET_MAP_POINTER ();
    IF .PREV_POINTER[FM2$V_FORMAT] EQL FM2$C_PLACEMENT
    THEN PREV_POINTER = .PREV_POINTER + FM2$C_LENGTH0;
    MAKE_POINTER (.VBN, .LBN, .HEADER);
    END;
CH$FILL (0, .MAP_END - .PREV_POINTER, .PREV_POINTER);

EX_SEGNUM = .HEADER[FH2$W_SEG_NUM] + 1;
CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_EXT_FID], EXT_FID);
CH$FILL (0, FID$C_LENGTH, HEADER[FH2$W_EXT_FID]);
CHECKSUM (.HEADER);
WRITE_HEADER ();

IF .FCB NEQ 0 AND .FCB NEQ .PRIMARY_FCB
THEN KERNEL_CALL (INIT_FCB2, .FCB, .HEADER);

! Compute the number of blocks being deallocated and credit them to the
! file owner. We compute this by taking the total space mapped by the header,
! less the number of blocks passed over in the scan.
!

IF NOT .CLEANUP_FLAGS[CLF_NOTCHARGED]
THEN
    BEGIN
    HEADER_SIZE = FILE_SIZE (.ALT_HEADER);
    CHARGE_QUOTA (.HEADER[FH2$L_FILEOWNER], - (.HEADER_SIZE - .HEADER_VBN),
		  BITLIST (QUOTA_CHARGE));
    END;

! Now we can free the blocks being truncated off. They are turned over
! either to the storage map, or to the bad block file.
!

IF .FIB[FIB$V_MARKBAD]
THEN
    DEALLOCATE_BAD (.FIB, .ALT_HEADER, .TRUNC_POINTER, .VBN)
ELSE
    TRUNCATE_HEADER (.FIB, .ALT_HEADER, .TRUNC_POINTER, .VBN);

REREAD2 = .REREAD;
IF .EXT_FID[FID$W_NUM] NEQ 0
OR .EXT_FID[FID$W_RVN] NEQ 0
THEN
    BEGIN
    REREAD = 1;
    HEADER = NEXT_HEADER (0, .FCB, EXT_FID, .EX_SEGNUM);
    KERNEL_CALL (DEL_EXTFCB, .FCB);
    DELETE_FILE (.FIB, .HEADER);
    END;

END;					! end of block DO_TRUNCATE

! If this was a truncate of a multi-header file, reread the primary header
! and update the HIBLK field in the record attributes to reflect the new file
! size.
!

IF .REREAD
THEN HEADER = READ_HEADER (FIB[FIB$W_FID], .PRIMARY_FCB);

IF .REREAD2
THEN
    BEGIN
    BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.FIB[FIB$L_EXVBN]-1, 16);
    MARK_DIRTY (.HEADER);
    END;


! Stop metering of this subfunction
!

PMS_END_SUB ();

END;					! end of routine TRUNCATE

GLOBAL ROUTINE TRUNCATE_HEADER (FIB, HEADER, POINTER, LAST_COUNT) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the indicated retrieval pointers in the given
!	file header to the storage map.
!
!
! CALLING SEQUENCE:
!	TRUNCATE_HEADER (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of FIB of operation
!	ARG2: address of file header
!	ARG3: address of first retrieval pointer to process, if present
!	ARG4: new count field of first pointer, if present
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file header altered, storage map altered
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! user FIB
	HEADER		: REF BBLOCK;	! file header

LINKAGE
	L_MAP_POINTER	= JSB :
			  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8);

GLOBAL REGISTER
	COUNT		= 6,		! count of blocks returned
	LBN		= 7,		! LBN of map entry
	MAP_POINTER	= 8 : REF BBLOCK; ! pointer to scan map

LOCAL
	MAP_END;			! address of end of map area

EXTERNAL ROUTINE
	GET_MAP_POINTER	: L_MAP_POINTER, ! get value of next map entry
	RETURN_BLOCKS;			! return blocks to storage map


! Establish pointers into the file header. If explicit args are supplied, use
! them; else default to releasing the entire file header.
!

MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
MAP_END = .MAP_POINTER + .HEADER[FH2$B_MAP_INUSE]*2;

IF ACTUALCOUNT GEQ 4
THEN
    BEGIN
    MAP_POINTER = .POINTER;
    IF .LAST_COUNT NEQ 0
    THEN
	BEGIN
	GET_MAP_POINTER ();
	RETURN_BLOCKS (.LBN+.LAST_COUNT, .COUNT-.LAST_COUNT);
	FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] + .COUNT - .LAST_COUNT;
	END;
    END;

! Now scan the map area, cleaning out pointers and releasing blocks.
!

UNTIL .MAP_POINTER GEQA .MAP_END DO
    BEGIN
    GET_MAP_POINTER ();
    RETURN_BLOCKS (.LBN, .COUNT);
    FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] + .COUNT;
    END;

END;					! end of routine TRUNCATE_HEADER

END
ELUDOM
