MODULE FILUTL (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL = GENERAL),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains routines used to access random files by the
!	ACP itself.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-May-1978  19:13
!
! MODIFIED BY:
!
!	V02-006	ACG0259		Andrew C. Goldstein,	27-Jan-1982  20:38
!		Change to longword external addressing
!
!	V02-004	LMP0003		L. Mark Pilant,		 8-Dec-1981  11:31
!		Make sure the primary window was actually created.  It may
!		not have been due to the byte limit quota being exceeded.
!
!	B0104	ACG0112		Andrew C. Goldstein,	15-Jan-1980  22:55
!		Limit data read to file's EOF
!
!	B0103	ACG0092		Andrew C. Goldstein,	6-Dec-1979  19:23
!		Set proper RVN on file being opened
!
!	B0102	ACG0008		Andrew C. Goldstein,  18-Dec-1978  22:57
!	Add map only access for placement use, support multi-header files
!
!	B0101	ACG0003		Andrew C. Goldstein,  10-Nov-1978  19:01
!	Add multi-volume support, restrict to single header files
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	OPEN_FILE,			! open a file
	READ_DATA,			! read data from file
	CLOSE_FILE	: NOVALUE;	! close a file

GLOBAL ROUTINE OPEN_FILE (FID, WRITE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the file of the given file ID. It constructs an
!	FCB and window and returns the address of the latter.
!
!
! CALLING SEQUENCE:
!	OPEN_FILE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of file ID of file to open
!	ARG2: = 0 to open read only
!		1 to open read/write
!		2 to bypass interlocks (just map the file)
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: address of FCB created or found
!	CURRENT_WINDOW: address of window created
!
! ROUTINE VALUE:
!	address of window created
!
! SIDE EFFECTS:
!	FCB and window created
!
!--

BEGIN

MAP
	FID		: REF BBLOCK;	! file ID arg

LOCAL
	FCB_CREATED,			! flag indicating FCB creation
	FCB		: REF BBLOCK,	! file control block address
	WINDOW		: REF BBLOCK,	! window address
	HEADER		: REF BBLOCK,	! file header address
	NEW_HEADER	: REF BBLOCK;	! address of extension header

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	PRIMARY_FCB	: REF BBLOCK,	! global FCB address
	CURRENT_WINDOW	: REF BBLOCK;	! global window address

EXTERNAL ROUTINE
	APPLY_RVN,			! default zero RVN to current
	SWITCH_VOLUME,			! switch to correct volume
	SEARCH_FCB,			! search for FCB of file
	READ_HEADER,			! read file header
	NEXT_HEADER,			! read extension header
	CREATE_FCB,			! create a file control block
	CREATE_WINDOW,			! create a file window
	MAKE_EXTFCB,			! build extension FCB
	UPDATE_FCB;			! update FCB contents


! Switch context to the volume of the specified RVN.
!

APPLY_RVN (FID[FID$W_RVN]);
SWITCH_VOLUME (.FID[FID$W_RVN]);

! Search the FCB list for the given file ID. If found, arbitrate access
! interlocks. Note that if we create an FCB, we do not bother with access
! counts, etc., since it will disappear at the end of this call.
!

FCB = SEARCH_FCB (.FID);
IF .FCB NEQ 0 AND .WRITE NEQ 2
THEN
    IF .FCB[FCB$V_EXCL]
    OR .WRITE AND .FCB[FCB$W_LCNT] NEQ 0
    THEN ERR_EXIT (SS$_ACCONFLICT);

HEADER = READ_HEADER (.FID, .FCB);
FCB_CREATED = 0;
IF .FCB EQL 0
THEN
    BEGIN
    FCB_CREATED = 1;
    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
    END;
PRIMARY_FCB = .FCB;
CLEANUP_FLAGS[CLF_CLOSEFILE] = 1;

CURRENT_WINDOW = WINDOW = KERNEL_CALL (CREATE_WINDOW, 0, 0, .HEADER, 0, .FCB);

IF .CURRENT_WINDOW EQL 0 THEN ERR_EXIT (SS$_EXBYTLM);

! If the file is multi-header, read the extension headers and create
! extension FCB's as necessary. Finally read back the primary header.
!

IF .FCB_CREATED
THEN
    BEGIN
    WHILE 1 DO
	BEGIN
	NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
	IF .NEW_HEADER EQL 0 THEN EXITLOOP;
	HEADER = .NEW_HEADER;
	FCB = KERNEL_CALL (MAKE_EXTFCB, .HEADER, .FCB, 1);
	END;

    IF .FCB NEQ .PRIMARY_FCB
    THEN
	BEGIN
	FCB = .PRIMARY_FCB;
	HEADER = READ_HEADER (0, .FCB);
	KERNEL_CALL (UPDATE_FCB, .HEADER);
	END;
    END;

RETURN .WINDOW;

END;					! end of routine OPEN_FILE

GLOBAL ROUTINE READ_DATA (WINDOW, VBN, COUNT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the specified data block(s) from the file indicated
!	by the given window address. Note that the actual number of blocks
!	read may be less than the number desired due to mapping fragmentation
!	or cache limitations.
!
!
! CALLING SEQUENCE:
!	READ_DATA (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: window address
!	ARG2: starting VBN to read
!	ARG3: count of blocks to read
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of buffer read
!
! SIDE EFFECTS:
!	block read, window may be turned
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;	! window argument

LOCAL
	FCB		: REF BBLOCK,	! address of file's FCB
	LBN,				! LBN of starting virtual block
	UNMAPPED,			! number of desired blocks not mapped
	BUFFER		: REF BBLOCK;	! address of block read

EXTERNAL ROUTINE
	MAP_VBN,			! map virtual to logical
	READ_BLOCK;			! read a disk block


! Map the VBN to LBN using the supplied window. If the map fails, return a
! zero buffer address.
!

FCB = .WINDOW[WCB$L_FCB];
IF .VBN GTRU .FCB[FCB$L_EFBLK]
THEN RETURN 0;

LBN = MAP_VBN (.VBN, .WINDOW, .COUNT, UNMAPPED);
IF .LBN EQL -1 THEN RETURN 0;

BUFFER = READ_BLOCK (.LBN, .COUNT - .UNMAPPED, DATA_TYPE);
RETURN .BUFFER;

END;					! end of routine READ_DATA

GLOBAL ROUTINE CLOSE_FILE (WINDOW) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes the file indicated by the supplied window
!	by releasing the window and FCB.
!
!
! CALLING SEQUENCE:
!	CLOSE_FILE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of window
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: 0
!	CURRENT_WINDOW: 0
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB and window deallocated
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;	! window argument

LOCAL
	FCB		: REF BBLOCK;	! FCB of file

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	PRIMARY_FCB	: REF BBLOCK,	! global FCB address
	CURRENT_WINDOW	: REF BBLOCK;	! global window address

EXTERNAL ROUTINE
	DEL_EXTFCB,			! delete extension FCB's
	DEALLOCATE,			! deallocate dynamic memory
	FLUSH_FID;			! flush file from buffer pool


! Find the FCB. Deallocate the window, and the FCB if it is not otherwise
! accessed. Also flush data blocks of the file from the buffer pool.
!

FCB = .WINDOW[WCB$L_FCB];
FLUSH_FID (FCB[FCB$W_FID]);

IF .FCB[FCB$W_ACNT] EQL 0
AND NOT .FCB[FCB$V_DIR]
THEN
    BEGIN
    KERNEL_CALL (DEL_EXTFCB, .FCB);
    KERNEL_CALL (DEALLOCATE, .FCB);
    END;
KERNEL_CALL (DEALLOCATE, .WINDOW);

PRIMARY_FCB = 0;
CURRENT_WINDOW = 0;
CLEANUP_FLAGS[CLF_CLOSEFILE] = 0;

END;					! end of routine CLOSE_FILE

END
ELUDOM
