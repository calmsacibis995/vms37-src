MODULE COMMON (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This module is the common impure area of FCP, including the
!	routine that initializes it for each request.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Dec-1976  23:42
!
! MODIFIED BY:
!
!	V02-010	ACG0245		Andrew C. Goldstein,	23-Dec-1981  20:36
!		Add job controller mailbox channel
!
!	V02-009	ACG0208		Andrew C. Goldstein,	30-Oct-1981  19:28
!		Add segmented directory record support
!
!	V02-008	ACG38100	Andrew C. Goldstein,	3-Jun-1981  11:57
!		Fix granting of SYSPRV to volume owner
!
!	V02-007	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	INIT_COMMON	: NOVALUE,	! initialize common storage
	SAVE_CONTEXT	: NOVALUE,	! save reentrant context area
	RESTORE_CONTEXT	: NOVALUE;	! restore reentrant context area

!+
!
! ACP global impure data area
!
!-

GLOBAL
	QUEUE_HEAD	: REF BBLOCK,	! pointer to ACP queue header
	IO_CHANNEL,			! channel number for I/O
	PREV_CHANNEL,			! secondary channel number
	JBC_MAILBOX,			! channel assigned to job controller mailbox
	JBC_MBX_UNIT,			! unit number of above
	DISK_UCB	: REF BBLOCK,	! original UCB of our channel
	DISK_UCB2	: REF BBLOCK,	! original UCB of secondary channel

! The remaining locations are initialized to known values (mainly zero)
! by the routine.
!
	USER_STATUS	: VECTOR [2],	! I/O status to be returned to user
	IO_STATUS	: VECTOR [2],	! status block for FCP I/O
	IO_PACKET	: REF BBLOCK,	! address of current I/O request packet
	CURRENT_UCB	: REF BBLOCK,	! address of UCB of current request
	PREV_UCB	: REF BBLOCK,	! address of UCB of previously used volume
	CURRENT_VCB	: REF BBLOCK,	! address of VCB of current request
	CURRENT_RVT	: REF BBLOCK,	! RVT of current volume set, or UCB
	CURRENT_RVN,			! RVN of current volume
	NEW_FID,			! file number of unrecorded file ID
	NEW_FID_RVN,			! RVN of above
	HEADER_LBN,			! LBN of last file header read
	DIR_FCB		: REF BBLOCK,	! FCB of directory file
	BITMAP_VBN,			! VBN of current storage map block
	BITMAP_RVN,			! RVN of current storage map block
	BITMAP_BUFFER	: REF BBLOCK,	! address of current storage map block
	QUOTA_RECORD,			! record number of quota file entry
	FREE_QUOTA,			! record number of free quota file entry
	REAL_Q_REC	: REF BBLOCK,	! buffer address of quota record read
	QUOTA_INDEX,			! cache index of cache entry found
	DUMMY_REC	: BBLOCK [DQF$C_LENGTH], ! dummy quota record for cache contents
	DIR_CONTEXT	: BBLOCK [DCX_LENGTH], ! current directory context
	DIR_RECORD,			! record number of found directory entry
	PREV_VERSION,			! version number of previous directory entry
	PREV_NAME	: VECTOR [FILENAME_LENGTH+1, BYTE], ! name of previous entry
	PREV_INAME	: VECTOR [FILENAME_LENGTH+6, BYTE], ! previous internal file name
	SUPER_FID	: BBLOCK [FID$C_LENGTH], ! file ID of superseded file
	LOCAL_FIB	: BBLOCK [FIB$C_LENGTH], ! primary FIB of this operation
	SECOND_FIB	: BBLOCK [FIB$C_LENGTH], ! FIB for secondary file operation
	LOCAL_ARB	: BBLOCK [ARB$C_LENGTH], ! local copy of caller's ARB

					! The following locations are the re-enterable
					! context area and must be saved when an
					! secondary operation is performed.
	CONTEXT_START	: VECTOR [0],	! ***** The next item must be CLEANUP_FLAGS
	CLEANUP_FLAGS	: BITVECTOR [32], ! cleanup action flags
	FILE_HEADER	: REF BBLOCK,	! address of current file header
	LOC_RVN,			! RVN specified by placement data
	LOC_LBN,			! LBN specified by placement data
	UNREC_LBN,			! start LBN of unrecorded blocks
	UNREC_COUNT,			! count of unrecorded blocks
	UNREC_RVN,			! RVN containing unrecorded blocks
	PRIMARY_FCB	: REF BBLOCK,	! address of primary file FCB
	CURRENT_WINDOW	: REF BBLOCK,	! address of file window
	CURRENT_FIB	: REF BBLOCK,	! pointer to FIB currently in use
	PREV_LINK	: BBLOCK [FID$C_LENGTH], ! old back link of file
	CONTEXT_END	: VECTOR [0];

GLOBAL LITERAL
	CONTEXT_SIZE	= CONTEXT_END - CONTEXT_START; ! byte count of context area

GLOBAL
	CONTEXT_SAVE	: VECTOR [CONTEXT_SIZE, BYTE], ! area to save primary context

	IMPURE_END	: VECTOR [0];	! end of impure area

GLOBAL LITERAL
	IMPURE_SIZE	= IMPURE_END - USER_STATUS; ! byte count of impure area

PSECT
	GLOBAL	= $CODE;

GLOBAL
	CODE_START	: VECTOR [0];	! label for start of executable code

GLOBAL ROUTINE INIT_COMMON : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine contains the impure data base for FCP, and is called
!	to initialize it.
!
! CALLING SEQUENCE:
!	INIT_COMMON ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	DATABASE INITIALIZED
!
!--

BEGIN

EXTERNAL
	BUFFER_COUNT,			! number of buffers in buffer pool
	BUFFER_NEW	: BITVECTOR;	! newly modified flag vector

! Initialization consists of zeroing the impure area and then setting the
! user request status to 1 (success).
!

CH$FILL (0, IMPURE_SIZE, USER_STATUS);
USER_STATUS[0] = 1;
CH$FILL (0, (.BUFFER_COUNT+7)/8, .BUFFER_NEW);

END;					! end of routine INIT_COMMON

GLOBAL ROUTINE SAVE_CONTEXT : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine saves the reentrant context area in the context save
!	area and initializes the context for a secondary operation.
!
!
! CALLING SEQUENCE:
!	SAVE_CONTEXT ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	ACP impure area
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	CONTEXT_SAVE	: BITVECTOR;	! map saved copy of cleanup flags


! Check for excessive recursion in the ACP; then save the context and do the
! setup.
!

IF .CONTEXT_SAVE NEQ 0
THEN BUG_CHECK (ACPRECURS, FATAL, 'Attempted recursion in ACP secondary operation');

CH$MOVE (CONTEXT_SIZE, CONTEXT_START, CONTEXT_SAVE);
CH$FILL (0, CONTEXT_SIZE, CONTEXT_START);
CH$FILL (0, FIB$C_LENGTH, SECOND_FIB);
CURRENT_FIB = SECOND_FIB;
CONTEXT_SAVE[CLF_CLEANUP] = 1;

END;					! end of routine SAVE_CONTEXT

GLOBAL ROUTINE RESTORE_CONTEXT : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine restores the reentrant context area from the context save
!	area.
!
!
! CALLING SEQUENCE:
!	RESTORE_CONTEXT ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	ACP impure area
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	CONTEXT_SAVE	: BITVECTOR;	! map saved copy of cleanup flags


! Check for excessive unstacking in the ACP; then restore the context.
!

IF .CONTEXT_SAVE EQL 0
THEN BUG_CHECK (ACPUNSTAK, FATAL, 'Attempted unstack in ACP primary context');

CH$MOVE (CONTEXT_SIZE, CONTEXT_SAVE, CONTEXT_START);
CLEANUP_FLAGS[CLF_CLEANUP] = 0;
CONTEXT_SAVE = 0;

END;					! end of routine RESTORE_CONTEXT

END
ELUDOM
