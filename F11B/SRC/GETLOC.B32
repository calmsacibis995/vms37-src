MODULE GETLOC (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine computes the desired placement LBN and RVN from the
!	placement control data supplied by the caller.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  11-Dec-1978  10:41
!
! MODIFIED BY:
!
!	B0101	ACG0121		Andrew C. Goldstein,	16-Jan-1980  21:44
!		Make context save and restore into subroutines
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE GET_LOC (FIB, LOC_RVN, LOC_LBN) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine computes the desired placement LBN and RVN from the
!	placement control data supplied by the caller.
!
!
! CALLING SEQUENCE:
!	GET_LOC (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of user FIB
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume in process
!	CURRENT_UCB: UCB of volume in process
!
! OUTPUT PARAMETERS:
!	ARG2: address to return placement RVN
!	ARG3: address to return placement LBN
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	volume context may be switched
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK;	! user FIB arg

LITERAL
	MAX_CODE	= MAXU (FIB$C_CYL, ! highest alignment code
				FIB$C_LBN,
				FIB$C_VBN,
				FIB$C_RFI);

LOCAL
	LBN,				! LBN resulting from map operation
	WINDOW		: REF BBLOCK;	! window used to map related file

EXTERNAL
	SECOND_FIB	: BBLOCK,	! FIB for secondary operations
	CURRENT_UCB	: REF BBLOCK,	! UCB of current volume
	CURRENT_VCB	: REF BBLOCK,	! VCB of current volume
	CURRENT_RVN;			! RVN of current volume

EXTERNAL ROUTINE
	SWITCH_VOLUME,			! switch context to specified volume
	SAVE_CONTEXT,			! save reentrant context area
	RESTORE_CONTEXT,		! restore reentrant context area
	OPEN_FILE,			! open file for internal use
	MAP_VBN,			! map virtual to logical block
	CLOSE_FILE;			! close internal file


! Case on the different alignment types, converting each to RVN and LBN.
!

CASE .FIB[FIB$B_ALALIGN] FROM 0 TO MAX_CODE OF
    SET

    [0]:				! zero means no placement
	BEGIN
	.LOC_RVN = 0;
	.LOC_LBN = 0;
	END;

    [FIB$C_CYL]:			! cylinder number supplied
	BEGIN
	SWITCH_VOLUME (.FIB[FIB$W_LOC_RVN]);
	.LOC_LBN = .FIB[FIB$L_LOC_ADDR] *
		   .CURRENT_UCB[UCB$B_SECTORS] *
		   .CURRENT_UCB[UCB$B_TRACKS] /
		   .CURRENT_VCB[VCB$B_BLOCKFACT];
	.LOC_RVN = (IF .CURRENT_VCB[VCB$V_EXTFID]
		    THEN .FIB[FIB$B_LOC_RVN]
		    ELSE .FIB[FIB$W_LOC_RVN]
		   );
	END;

    [FIB$C_LBN]:			! LBN suppplied
	BEGIN
	.LOC_LBN = .FIB[FIB$L_LOC_ADDR];
	.LOC_RVN = (IF .CURRENT_VCB[VCB$V_EXTFID]
		    THEN .FIB[FIB$B_LOC_RVN]
		    ELSE .FIB[FIB$W_LOC_RVN]
		   );
	END;

! For both related file and VBN placement (the latter being being a special
! subset of the former), we open the specified file in secondary context and
! map the given VBN.
!

    [FIB$C_VBN, FIB$C_RFI]:
	BEGIN
	SAVE_CONTEXT ();
	CH$MOVE (FID$C_LENGTH, FIB[FIB$W_FID], SECOND_FIB[FIB$W_FID]);
	IF .FIB[FIB$B_ALALIGN] EQL FIB$C_RFI
	AND (.FIB[FIB$W_LOC_NUM] NEQ 0
	     OR .FIB[FIB$W_LOC_RVN] NEQ 0)
	THEN CH$MOVE (FID$C_LENGTH, FIB[FIB$W_LOC_FID], SECOND_FIB[FIB$W_FID]);

	WINDOW = OPEN_FILE (SECOND_FIB[FIB$W_FID], 2);
	LBN = MAP_VBN (.FIB[FIB$L_LOC_ADDR], .WINDOW);
	IF .LBN EQL -1
	THEN LBN = MAP_VBN (.BBLOCK [.WINDOW[WCB$L_FCB], FCB$L_FILESIZE], .WINDOW);

	CLOSE_FILE (.WINDOW);
	RESTORE_CONTEXT ();

	.LOC_LBN = .LBN + 1;		! convert -1 result to 0
	.LOC_RVN = .CURRENT_RVN;

	END;

    [OUTRANGE]:
	ERR_EXIT (SS$_BADPARAM);

    TES;

END;					! end of routine GET_LOC

END
ELUDOM
