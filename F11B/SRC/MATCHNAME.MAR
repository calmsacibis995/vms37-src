	.TITLE	MATCHNAME	Match General Wild Card Specification
	.IDENT 	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  Files-11 Structure Level 2
;
; ABSTRACT:
;
;	This routine performs the general embedded wild card matching
;	algorithm.
;
; ENVIRONMENT:
;
;	VAX/VMS Operating System
;
;--
;
;
; AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  10-Aug-1979  11:36
;
; MODIFIED BY:
;
;	V02-001	MLJ0031		Martin L. Jack,	4-Aug-1981  6:32
;		Reorganize for simplicity and speed.
;
;**

	.SBTTL	FMG$MATCH_NAME, general wild card matching

;++
;
; Functional Description:
;	This routine performs the general embedded wild card matching
;	algorithm.
;
; Calling Sequence:
;	JSB
;
; Input Parameters:
;	R2 = Length of candidate string.
;	R3 = Address of candidate string.
;	R4 = Length of pattern string.
;	R5 = Address of pattern string.
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	none
;
; Routine Value:
;	True if the strings match.
;
; Signals:
;	none
;
; Side Effects:
;	R1-R5 destroyed.
;
;--

	.PSECT	$CODE$,NOWRT,EXE,WORD

FMG$MATCH_NAME::
	PUSHR	#^M<R6,R7,R8,R9>	; Save registers 
	CLRL	R0			; Assume failure
	CLRL	R6			; Clear saved candidate count
;
; Main scanning loop.
;
10$:	DECL	R4			; Pattern exhausted?
	BLSS	30$			; Branch if yes
	MOVZBL	(R5)+,R1		; Get next character in pattern
	CMPB	R1,#^A'*'		; Pattern specifies wild string?
	BEQL	60$			; Branch if yes
	DECL	R2			; Candidate exhausted?
	BLSS	50$			; Branch if yes
	CMPB	R1,(R3)+		; Compare pattern to candidate
	BEQL	10$			; Branch if pattern equals candidate
	CMPB	R1,#^A'%'		; Pattern specifies wild character?
	BEQL	10$			; Branch if yes
;
; We have detected a mismatch, or we are out of pattern while there is
; candidate left.  Back up to the last '*', advance a candidate character,
; and try again.
;
20$:	DECL	R6			; Count a saved candidate character
	BLSS	50$			; Branch if no saved candidate
	INCL	R7			; Set to try next character
	MOVQ	R6,R2			; Restore descriptors to backup point
	MOVQ	R8,R4			;
	BRB	10$			; Continue testing
;
; Here when pattern is exhausted.
;
30$:	TSTL	R2			; Candidate exhausted?
	BNEQ	20$			; Branch if no
;
; Here to return.
;
40$:	MOVL	#1,R0			; Set success return
50$:	POPR	#^M<R6,R7,R8,R9>	; Restore registers 
	RSB				; Return
;
; We have detected a '*' in the pattern.  Save the pointers for backtracking.
;
60$:	TSTL	R4			; Pattern null after '*'?
	BEQL	40$			; Branch if yes
	MOVQ	R2,R6			; Save descriptors of both strings
	MOVQ	R4,R8			;
	BRB	10$			; Continue testing

	.END
