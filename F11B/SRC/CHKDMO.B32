MODULE CHKDMO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL = GENERAL),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine dismounts the volume in use if it should be.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-Apr-1977  17:19
!
! MODIFIED BY:
!
!	V02-007	ACG0226		Andrew C. Goldstein,	24-Nov-1981  22:16
!		Issue IO$_AVAILABLE on DISMOUNT/NOUNLOAD
!
!	V02-006	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


!
! Part of this routine runs at IPL$_SYNCH, so it must be locked into the
! working set.
!

LOCK_CODE;


FORWARD ROUTINE
	CHECK_DISMOUNT	: NOVALUE,	! check volume for dismount
	UPDATE_DIRSEQ;			! bump volume directory sequence count

GLOBAL ROUTINE CHECK_DISMOUNT : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks if the volume in use is marked for dismount and
!	idle. If so, it completes the dismount.
!
! CALLING SEQUENCE:
!	CHECK_DISMOUNT ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of unit in use
!	CURRENT_VCB: VCB of volume in use
!	ACP$AQB0: queue header for ACP
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Volume dismounted if appropriate
!
!--

BEGIN

LOCAL
	J,				! loop index
	RVT_LENGTH,			! number of entries in RVT
	RVT		: REF BBLOCK,	! address of RVT (or UCB if not a set)
	UCB		: REF BBLOCK,	! local address of UCB
	UCB2		: REF BBLOCK,	! second UCB pointer
	VCB		: REF BBLOCK,	! local address of VCB
	FCB		: REF BBLOCK;	! local address of FCB

EXTERNAL
	IO_CHANNEL,			! channel number for all I/O
	CURRENT_UCB	: REF BBLOCK,	! UCB of unit in process
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume in process
	QUEUE_HEAD	: REF BBLOCK;	! address of ACP queue header

EXTERNAL ROUTINE
	LOCK_IODB,			! lock I/O data base mutex
	UNLOCK_IODB,			! unlock I/O data base mutex
	DEALLOCATE,			! deallocate dynamic memory
	SWITCH_CHANNEL,			! switch channels to specified UCB
	FLUSH_FID,			! flush blocks from the buffer pool
	SEND_ERRLOG;			! send message to error logger


! Get the RVT address and iterate on the whole volume set, since deaccessing
! a multi-volume file could make several volumes eligible for dismount. If
! this is not a volume set we special case and exit.
!

J = 1;
RVT = .CURRENT_VCB[VCB$L_RVT];
IF .RVT NEQ .CURRENT_UCB
THEN RVT_LENGTH = .RVT[RVT$B_NVOLS];

DO
    BEGIN
    UCB = .RVT;				! assume not volume set

    IF .UCB NEQ .CURRENT_UCB		! get UCB if volume set
    THEN UCB = .VECTOR [RVT[RVT$L_UCBLST], .J-1];

! First check the mark for dismount bit.
!

    IF .UCB NEQ 0
    THEN IF .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_DMT]
    THEN
	BEGIN

! Do volume switch if necessary.
!

	IF .UCB NEQ .CURRENT_UCB
	THEN SWITCH_CHANNEL (.UCB);

! The volume is marked for dismount. The remainder of the tests and the
! dismount bit twiddling must be done interlocked.
!

	LOCK_IODB ();
	SET_IPL (IPL$_SYNCH);

	VCB = .UCB[UCB$L_VCB];
	IF .VCB[VCB$W_TRANS] EQL 1 
	THEN
	    BEGIN

! The volume is marked for dismount and idle. Make an error log entry to
! record the dismount.
!

	    SEND_ERRLOG (0, .UCB);

! Mark the volume dismounted and disconnect the VCB from the UCB.
!

	    UPDATE_DIRSEQ ();
	    BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_MNT] = 0;
	    BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_DMT] = 0;
	    BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SWL] = 0;
	    UCB[UCB$V_VALID] = 0;
	    UCB[UCB$L_VCB] = 0;
	    UCB[UCB$W_VPROT] = 0;
	    UCB[UCB$L_OWNUIC] = 0;

! We can now release the locks while we proceed to clean up the mounted
! volume data base. Note that it is safe to do this since none of the
! structures are reachable any more. In particular, if the reference count
! of the RVT goes to 0 then it is unreachable and has no hazard.
!

	    UNLOCK_IODB ();

	    IF .RVT NEQ .CURRENT_UCB
	    THEN
		BEGIN
		VECTOR [RVT[RVT$L_UCBLST], .VCB[VCB$W_RVN]-1] = 0;
		RVT[RVT$W_REFC] = .RVT[RVT$W_REFC] - 1;
		IF .RVT[RVT$W_REFC] EQL 0
		THEN
		    BEGIN
		    DEALLOCATE (.RVT[RVT$L_RVX]);
		    DEALLOCATE (.RVT);
		    END;
		END;

	    FCB = .VCB[VCB$L_FCBFL];		! index file FCB
	    DEALLOCATE (.FCB[FCB$L_WLFL]);	! release index file window

	    WHILE 1 DO
		BEGIN
		IF REMQUE (.VCB[VCB$L_FCBFL], FCB) THEN EXITLOOP;
		DEALLOCATE (.FCB);		! release all FCB's
		END;

	    DEALLOCATE (.VCB[VCB$L_CACHE]);	! release the cache block
	    IF .VCB[VCB$L_QUOCACHE] NEQ 0	! release quota cache if present
	    THEN DEALLOCATE (.VCB[VCB$L_QUOCACHE]);
	    DEALLOCATE (.VCB);			! release the VCB

! Flush the buffer pool of any blocks of this volume.
!

	    FLUSH_FID (0);

! Issue an unload function if unload was requested.
!

	    $QIOW (
		   CHAN = .IO_CHANNEL,
		   EFN  = EFN,
		   FUNC = (IF .UCB[UCB$V_UNLOAD]
			   THEN IO$_UNLOAD
			   ELSE IO$_AVAILABLE)
		   );

	    QUEUE_HEAD[AQB$B_MNTCNT] = .QUEUE_HEAD[AQB$B_MNTCNT] - 1;
	    END				! end of dismount processing

	ELSE
	    UNLOCK_IODB ();

	END;				! end of dismount condition

    IF .RVT EQL .CURRENT_UCB THEN EXITLOOP;

    J = .J + 1;				! bump loop index
    END					! end of multi-volume loop
UNTIL .J GTRU .RVT_LENGTH;

END;					! end of routine CHECK_DISMOUNT

GLOBAL ROUTINE UPDATE_DIRSEQ =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine bumps the directory sequence count in the UCB to invalidate
!	RMS directory caches on the volume.
!
!
! CALLING SEQUENCE:
!	UPDATE_DIRSEQ ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of device in use
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	directory sequence count incremented
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	UCB		: REF BBLOCK;	! UCB address

EXTERNAL
	CURRENT_RVT	: REF BBLOCK,	! RVT of volume set
	CURRENT_UCB	: REF BBLOCK;	! UCB of device


! Iterate over the mounted volumes of a volume set if there is one.
!

UCB = .CURRENT_UCB;
IF .CURRENT_RVT NEQ .UCB
THEN
    INCR J FROM 1 TO .CURRENT_RVT[RVT$B_NVOLS]
    DO
	BEGIN
	UCB = .VECTOR [CURRENT_RVT[RVT$L_UCBLST], .J-1];
	IF .UCB NEQ 0
	THEN UCB[UCB$W_DIRSEQ] = .UCB[UCB$W_DIRSEQ] + 1;
	END

ELSE
    UCB[UCB$W_DIRSEQ] = .UCB[UCB$W_DIRSEQ] + 1;

RETURN 1;

END;					! end of routine UPDATE_DIRSEQ

END
ELUDOM
