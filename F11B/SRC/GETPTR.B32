MODULE GETPTR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine returns the value of a header map pointer.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  21-Nov-1977  17:12
!
! MODIFIED BY:
!
!	B0101	ACG0008		Andrew C. Goldstein,  26-Dec-1978  19:20
!	Skip placement pointers (for placement support)
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


LINKAGE
	L_MAP_POINTER	= JSB :
			  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8);

GLOBAL ROUTINE GET_MAP_POINTER : L_MAP_POINTER NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the contents of a file header map pointer and
!	advances the map area pointer to the next map pointer.
!
!
! CALLING SEQUENCE:
!	GET_MAP_POINTER ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	R8 = address of header map pointer
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	R6 = block count 
!	R7 = starting LBN
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	R8 advanced to next pointer (placement pointers are transparently skipped)
!
!--

BEGIN

EXTERNAL REGISTER
	COUNT		= 6,		! retrieval pointer block count
	LBN		= 7,		! retrieval pointer start LBN
	MAP_POINTER	= 8 : REF BBLOCK; ! address of map pointer


! Determine the type of the map pointer and interpret it appropriately.
!

IF .MAP_POINTER[FM2$V_FORMAT] EQL FM2$C_PLACEMENT
THEN MAP_POINTER = .MAP_POINTER + FM2$C_LENGTH0;

CASE .MAP_POINTER[FM2$V_FORMAT] FROM 0 TO 3 OF
    SET

    [FM2$C_PLACEMENT]:  BEGIN
			COUNT = 0;
			LBN = 0;
			MAP_POINTER = .MAP_POINTER + 2;
			END;

    [FM2$C_FORMAT1]:    BEGIN
			COUNT = .MAP_POINTER[FM2$B_COUNT1];
			LBN<16,16> = .MAP_POINTER[FM2$V_HIGHLBN];
			LBN<0,16> = .MAP_POINTER[FM2$W_LOWLBN];
			MAP_POINTER = .MAP_POINTER + 4;
			COUNT = .COUNT + 1;
			END;

    [FM2$C_FORMAT2]:    BEGIN
			COUNT = .MAP_POINTER[FM2$V_COUNT2];
			LBN = .MAP_POINTER[FM2$L_LBN2];
			MAP_POINTER = .MAP_POINTER + 6;
			COUNT = .COUNT + 1;
			END;

    [FM2$C_FORMAT3]:    BEGIN
			COUNT = (ROT (..MAP_POINTER, 16) AND (1^30-1));
			LBN = .MAP_POINTER[FM2$L_LBN3];
			MAP_POINTER = .MAP_POINTER + 8;
			COUNT = .COUNT + 1;
			END;

    TES;

END;					! end of routine GET_MAP_POINTER

END
ELUDOM
