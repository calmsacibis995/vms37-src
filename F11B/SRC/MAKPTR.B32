MODULE MAKPTR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine constructs retrieval pointer in the file header map area
!	for the indicated blocks.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1977  17:13
!
! MODIFIED BY:
!
!	B0103	ACG0122		Andrew C. Goldstein,	17-Jan-1980  15:54
!		Get bug check codes up to date
!
!	B0102	ACG0096		Andrew C. Goldstein,	18-Dec-1979  18:59
!		Add zero count bug trap
!
!	B0101	ACG0008		Andrew C. Goldstein,  28-Dec-1978  19:27
!	Add placement control support
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

LINKAGE
	L_MAKE_POINTER	= CALL :
			  GLOBAL (MAP_POINTER = 9),

	L_CHECK_POINTER	= CALL :
			  GLOBAL (HEADER = 8);

FORWARD ROUTINE
	MAKE_POINTER	: L_MAKE_POINTER,	! build map pointer
	CHECK_POINTER	: L_CHECK_POINTER;	! check if pointer will fit

GLOBAL ROUTINE MAKE_POINTER (COUNT, LBN, FILE_HEADER, PLACEMENT_CODE) : L_MAKE_POINTER =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine constructs retrieval pointer in the file header map area
!	for the indicated blocks.
!
!
! CALLING SEQUENCE:
!	MAKE_POINTER (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: block count
!	ARG2: start LBN
!	ARG3: address of file header
!	ARG4: if present, placement data to record or 0
!
! IMPLICIT INPUTS:
!	R9 = address to receive pointer
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	R9 = address past pointer
!
! ROUTINE VALUE:
!	1 if OK
!	0 if pointer won't fit
!
! SIDE EFFECTS:
!	pointer added to header map area
!
!--

BEGIN

EXTERNAL REGISTER
	MAP_POINTER	= 9 : REF BBLOCK; ! pointer to map area

MAP
	FILE_HEADER	: REF BBLOCK;	! buffer containing file header

GLOBAL REGISTER
	HEADER		= 8 : REF BBLOCK; ! local pointer to file header

LOCAL
	PLACEMENT,			! copy of placement data
	POINTER_SIZE;			! size needed for map pointer


! Check the specified count; it must not be zero.
!

IF .COUNT EQL 0
THEN BUG_CHECK (MAPCNTZER, FATAL, 'Attempted to generate zero length map pointer');
! See if placement is specified.
!

PLACEMENT = 0;
POINTER_SIZE = 2;
IF ACTUALCOUNT GEQU 4
THEN
    BEGIN
    PLACEMENT = .PLACEMENT_CODE;
    IF .PLACEMENT NEQ 0
    THEN POINTER_SIZE = .POINTER_SIZE + 1;
    END;

! Get the address of the file header for the check routine.
! Then determine the format of the pointer and build it.
!

HEADER = .FILE_HEADER;

IF .COUNT LEQU 256 AND .LBN LSSU 1^22
THEN
    BEGIN
    IF NOT CHECK_POINTER (.POINTER_SIZE) THEN RETURN 0;
    IF .PLACEMENT NEQ 0
    THEN
	BEGIN
	(.MAP_POINTER)<0,16> = .PLACEMENT;
	MAP_POINTER = .MAP_POINTER + 2;
	END;

    MAP_POINTER[FM2$V_FORMAT] = FM2$C_FORMAT1;
    MAP_POINTER[FM2$B_COUNT1] = .COUNT - 1;
    MAP_POINTER[FM2$V_HIGHLBN] = .LBN<16,6>;
    MAP_POINTER[FM2$W_LOWLBN] = .LBN<0,16>;
    MAP_POINTER = .MAP_POINTER + 4;
    END

ELSE
BEGIN
POINTER_SIZE = .POINTER_SIZE + 1;
IF .COUNT LEQU 16384
THEN
    BEGIN
    IF NOT CHECK_POINTER (.POINTER_SIZE) THEN RETURN 0;
    IF .PLACEMENT NEQ 0
    THEN
	BEGIN
	(.MAP_POINTER)<0,16> = .PLACEMENT;
	MAP_POINTER = .MAP_POINTER + 2;
	END;

    MAP_POINTER[FM2$V_FORMAT] = FM2$C_FORMAT2;
    MAP_POINTER[FM2$V_COUNT2] = .COUNT - 1;
    MAP_POINTER[FM2$L_LBN2] = .LBN;
    MAP_POINTER = .MAP_POINTER + 6;
    END

ELSE
BEGIN
POINTER_SIZE = .POINTER_SIZE + 1;
IF .COUNT LEQU 1^30
THEN
    BEGIN
    IF NOT CHECK_POINTER (.POINTER_SIZE) THEN RETURN 0;
    IF .PLACEMENT NEQ 0
    THEN
	BEGIN
	(.MAP_POINTER)<0,16> = .PLACEMENT;
	MAP_POINTER = .MAP_POINTER + 2;
	END;

    .MAP_POINTER = ROT (.COUNT-1, 16);
    MAP_POINTER[FM2$V_FORMAT] = FM2$C_FORMAT3;
    MAP_POINTER[FM2$L_LBN3] = .LBN;
    MAP_POINTER = .MAP_POINTER + 8;
    END

ELSE BUG_CHECK (PTRCNT, FATAL, 'ACP block count exceeds retrieval pointer size');
END;
END;

RETURN 1;

END;					! end of routine MAKE_POINTER

ROUTINE CHECK_POINTER (SIZE) : L_CHECK_POINTER =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines whether a map pointer of the given size
!	will fit in the file header.
!
!
! CALLING SEQUENCE:
!	CHECK_POINTER (ARG1)
! INPUT PARAMETERS:
!	ARG1: map pointer size in words
!
! IMPLICIT INPUTS:
!	R8: address of file header
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if pointer fits
!	0 if not
!
! SIDE EFFECTS:
!	header map in use count updated if pointer fits
!
!--

BEGIN

EXTERNAL REGISTER
	HEADER		= 8 : REF BBLOCK; ! file header address


IF .HEADER[FH2$B_MAP_INUSE] + .SIZE GTRU
    .HEADER[FH2$B_ACOFFSET] - .HEADER[FH2$B_MPOFFSET]
THEN RETURN 0;

HEADER[FH2$B_MAP_INUSE] = .HEADER[FH2$B_MAP_INUSE] + .SIZE;

RETURN 1;

END;					! end of routine CHECK_POINTER

END
ELUDOM
