MODULE BADSCN (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine scans the pending bad block list and enters or removes
!	entries.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-May-1978  10:33
!
! MODIFIED BY:
!
!	B0101	ACG0121		Andrew C. Goldstein,	16-Jan-1980  21:36
!		Make context save and restore into subroutines
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  19:59
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE SCAN_BADLOG (FID, BASE_VBN, BASE_LBN, MODE, BLOCK_COUNT) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans the volume bad block log for the specified block(s)
!	ande enters or removes them, depending on the mode.
!
!
! CALLING SEQUENCE:
!	SCAN_BADLOG (ARG1, ARG2, ARG3, ARG4, ARG5)
!
! INPUT PARAMETERS:
!	ARG1: file ID of file containing bad block
!	ARG2: VBN in file of bad block
!	ARG3: LBN of bad block
!	ARG4: mode of operation
!		REMOVE_BADBLOCK	= 0
!		ENTER_READERR	= 1
!		ENTER_WRITERR	= 2
!	ARG5: count of blocks to process (remove only)
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	volume bad block list file altered
!
!--

BEGIN

MAP
	FID		: REF BBLOCK;	! file ID argument

LABEL
	SEARCH_LOOP;			! bad block list search

LOCAL
	VBN,				! VBN of current block of file
	LBN,				! LBN of current block
	FIRST_FREE,			! VBN containing first free slot
	FREE_OFFSET,			! byte offset in block of free slot
	P		: REF BBLOCK,	! record pointer
	FIB		: REF BBLOCK,	! local pointer to secondary FIB
	WINDOW		: REF BBLOCK,	! address of bad block file window
	FCB		: REF BBLOCK,	! address of bad block file FCB
	HEADER		: REF BBLOCK;	! address of bad block file header

EXTERNAL
	SECOND_FIB	: BBLOCK,	! FIB for secondary operations
	CURRENT_VCB	: REF BBLOCK;	! VCB of this volume

EXTERNAL ROUTINE
	SAVE_CONTEXT,			! save reentrant context area
	RESTORE_CONTEXT,		! restore reentrant context area
	OPEN_FILE,			! open a data file
	READ_DATA,			! read a file block
	CLOSE_FILE,			! close the data file
	CREATE_BLOCK,			! fabricate a block buffer
	MARK_DIRTY,			! mark buffer dirty
	READ_HEADER,			! read file header
	EXTEND,				! extend a file
	CHECKSUM,			! checksum file header
	WRITE_HEADER,			! write a file header
	MAP_VBN;			! map virtual to logical


! Check the reserved file count to see if there is a bad block list file.
! If not, forget the whole thing. If there is, set up secondary context and
! open the file.
!

IF .CURRENT_VCB[VCB$B_RESFILES] LSSU BADLOG_FID THEN RETURN;

SAVE_CONTEXT ();
FIB = SECOND_FIB;
FIB[FIB$W_FID_NUM] = BADLOG_FID;
FIB[FIB$W_FID_SEQ] = BADLOG_FID;

WINDOW = OPEN_FILE (FIB[FIB$W_FID], 1);

! Scan the pending bad block file for a match on the given LBN (in remove mode,
! scan for the given range). Also look for the first available free space.
!

FIRST_FREE = 0;
VBN = 0;

SEARCH_LOOP: BEGIN
WHILE 1 DO
    BEGIN
    VBN = .VBN + 1;
    P = READ_DATA (.WINDOW, .VBN, 1);
    IF .P EQL 0 THEN EXITLOOP;

    INCR J FROM 0 TO 512/PBB$C_LENGTH - 1
    DO
	BEGIN
	IF .MODE EQL REMOVE_BADBLOCK
	THEN
	    BEGIN
	    IF  .P[PBB$L_LBN] GEQU .BASE_LBN
	    AND .P[PBB$L_LBN] LSSU .BASE_LBN + .BLOCK_COUNT
	    THEN
		BEGIN
		CH$FILL (0, PBB$C_LENGTH, .P);
		MARK_DIRTY (.P);
		END;
	    END
	ELSE
	    BEGIN
	    IF .P[PBB$B_FLAGS] EQL 0
	    AND .FIRST_FREE EQL 0
	    THEN
		BEGIN
		FIRST_FREE = .VBN;
		FREE_OFFSET = .J * PBB$C_LENGTH;
		END;
	    IF .P[PBB$L_LBN] EQL .BASE_LBN
	    THEN
		BEGIN
		IF .P[PBB$B_COUNT] LSSU 255
		THEN P[PBB$B_COUNT] = .P[PBB$B_COUNT] + 1;
		IF .MODE EQL ENTER_READERR
		THEN P[PBB$V_READERR] = 1
		ELSE P[PBB$V_WRITERR] = 1;
		MARK_DIRTY (.P);
		LEAVE SEARCH_LOOP;
		END;
	    END;

	P = .P + PBB$C_LENGTH;
	END;				! end of loop within block
    END;				! end of loop scanning blocks

! We get here if we fail to match on the block (or were scanning to remove).
! On a remove, we are now done. For an enter, take the first free slot found.
! If there was none, we have to extend the file.
!

IF .MODE EQL REMOVE_BADBLOCK THEN LEAVE SEARCH_LOOP;

IF .FIRST_FREE EQL 0
THEN
    BEGIN
    FCB = .WINDOW[WCB$L_FCB];
    HEADER = READ_HEADER (0, .FCB);

    IF .FCB[FCB$L_EFBLK] GEQU .FCB[FCB$L_FILESIZE]
    THEN
	BEGIN
	FIB[FIB$L_EXSZ] = 1;
	FIB[FIB$V_NOHDREXT] = 1;
	EXTEND (.FIB, .HEADER);
	END;

    BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_EFBLKL] =
		.BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_EFBLKL] + 1;
    CHECKSUM (.HEADER);
    WRITE_HEADER ();

    LBN = MAP_VBN (.VBN, .WINDOW);
    IF .LBN EQL -1
    THEN BUG_CHECK (HDRNOTMAP, FATAL, 'Block just created not mapped');
    P = CREATE_BLOCK (.LBN, 1, DATA_TYPE);
    FREE_OFFSET = 0;
    END

ELSE
    P = READ_DATA (.WINDOW, .FIRST_FREE, 1);

! Now build the new bad block list entry.
!

P = .P + .FREE_OFFSET;

CH$COPY (FID$C_LENGTH, .FID, 0, PBB$C_LENGTH, P[PBB$W_FID]);
P[PBB$L_VBN] = .BASE_VBN;
P[PBB$L_LBN] = .BASE_LBN;
P[PBB$B_COUNT] = .P[PBB$B_COUNT] + 1;
IF .MODE EQL ENTER_READERR
THEN P[PBB$V_READERR] = 1
ELSE P[PBB$V_WRITERR] = 1;

MARK_DIRTY (.P);

END;					! end of block SEARCH_LOOP

CLOSE_FILE (.WINDOW);			! close the bad block list file
RESTORE_CONTEXT ();

END;					! end of routine SCAN_BADLOG

END
ELUDOM
