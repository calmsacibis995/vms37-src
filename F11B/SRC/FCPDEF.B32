!
! DEFINITION FILE FOR FCP COMPILATION
!
!	Version 'V03-000'
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	These are the data stucture definitions and random macros
!	used to compile FCP.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system calls
!	and internal system subroutines.
!
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	CREATION DATE:  9-Dec-1976  10:53
!
! MODIFIED BY:
!
!	V02-013	ACG0230		Andrew C. Goldstein,	29-Dec-1981  14:42
!		Add expiration date maintenance
!
!	V02-012	ACG0245		Andrew C. Goldstein,	23-Dec-1981  20:09
!		Clean up handling of implicitly spooled files
!
!	V02-011	LMP0003		L. Mark Pilant,		 8-Dce-1981  11:30
!		Add cleanup flag CLF_REMAP to force a rebuild of the files
!		windows.  (This is necessary if an extend fails due to the
!		user's byte limit quota being exceeded.)
!
!	V02-010	ACG0208		Andrew C. Goldstein,	30-Oct-1981  19:12
!		Add segmented directory record support
!
!	V02-009	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:26
!		Previous revision history moved to F11B.REV
!**

!
! Declare PSECT usage to minimize page breakage.
!
PSECT
	OWN	= $LOCKEDD1$,
	GLOBAL	= $LOCKEDD1$,
	PLIT	= $CODE$ (EXECUTE);
!
! Declare VAX built in functions.
!
BUILTIN
	TESTBITSS,
	TESTBITSC,
	TESTBITCS,
	TESTBITCC,
	FFS,
	FFC,
	EMUL,
	EDIV,
	ROT,
	REMQUE,
	INSQUE,
	CHMU,
	MTPR,
	HALT;
!
! Structure declarations used for system defined structures to
! save typing.
!

STRUCTURE
	BBLOCK [O, P, S, E; N] =
	    [N]
	    (BBLOCK+O)<P,S,E>,

	BBLOCKVECTOR [I, O, P, S, E; N, BS] =
	    [N*BS]
	    ((BBLOCKVECTOR+I*BS)+O)<P,S,E>;
!
! Assorted macros used in FCP code
!

MACRO
					! set processor IPL
	SET_IPL (LEVEL) = MTPR (%REF (LEVEL), PR$_IPL)%;
!
! Declare code that must be locked into the working set.
!

MACRO
	LOCK_CODE	=
		PSECT	CODE	= $LOCKEDC1$,
			PLIT	= $LOCKEDC1$,
			OWN	= $LOCKEDD1$,
			GLOBAL	= $LOCKEDD1$;
			%;
!
! ***** Note: The following two macros violate the Bliss language definition
! ***** in that they make use of the value of SP while building the arg list.
! ***** It is the opinion of the Bliss maintainers that this usage is safe
! ***** from planned future optimizations.
!
! Macro to call the change mode to kernel system service.
! Macro call format is "KERNEL_CALL (ROUTINE, ARG1, ARG2, ... )".
!
MACRO
	KERNEL_CALL (R) =
	    BEGIN
	    EXTERNAL ROUTINE SYS$CMKRNL : ADDRESSING_MODE (ABSOLUTE);
	    BUILTIN SP;
	    SYS$CMKRNL (R, .SP, %LENGTH-1
			%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)
	    END%;
!
! Macro to call the change mode to exec system service.
! Macro call format is "EXEC_CALL (ROUTINE, ARG1, ARG2, ... )".
!
MACRO
	EXEC_CALL (R) =
	    BEGIN
	    EXTERNAL ROUTINE SYS$CMEXEC : ADDRESSING_MODE (ABSOLUTE);
	    BUILTIN SP;
	    SYS$CMEXEC (R, .SP, %LENGTH-1
			%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)
	    END%;
!
! Macro used to signal fatal errors (internal consistency checks).
!
MACRO
	BUG_CHECK (CODE, TYPE, MESSAGE) =
		BEGIN
		BUILTIN BUGW;
		EXTERNAL LITERAL %NAME('BUG$_',CODE);
		BUGW (%NAME('BUG$_',CODE) OR 4)
		END
		%;
!
! Macro to signal an error status and continue.
!
MACRO
	ERR_STATUS [CODE] =
	    BEGIN
	    EXTERNAL USER_STATUS : WORD;
	    IF .USER_STATUS
	    THEN USER_STATUS = CODE;
	    END%;
!
! Macro to signal an error status and exit.
! Implemented as a change mode to user instruction followed by a RET.
!
MACRO
	ERR_EXIT (CODE) =
	    (CHMU (%REF (%IF %NULL (CODE) %THEN 0 %ELSE CODE %FI));
	    RETURN (BUILTIN R0; .R0))
	    %;
!
! Macro to generate a string with a descriptor.
!
MACRO
	DESCRIPTOR (STRING) =
		UPLIT (%CHARCOUNT (STRING), UPLIT BYTE (STRING))%;
!
! Macro to generate a bitmask from a list of bit numbers.
!
MACRO
	BITLIST (ITEM) [] =
		%IF %COUNT NEQ 0 %THEN OR %FI 1^ITEM BITLIST (%REMAINING)
		%;
!
! Macro to return the number of actual parameters supplied to a routine
! call.
!
MACRO
	ACTUALCOUNT =
	    BEGIN
	    BUILTIN AP;
	    .(.AP)<0,8>
	    END
	    %;
!
! Macro to check assumed values.
!
MACRO
	ASSUME (Q) =
		%IF NOT (Q)
		%THEN %WARN ('Assumption ', Q, ' is not true')
		%FI
		%;
!
! Macros to do quadword arithmetic. The bizarre coding of compare
! is used because evidently CASE is the only construct that the compiler
! flows correctly in conditionals.
!
MACRO
	SUBQ (SOURCE, DEST, DEST2) =
		BEGIN
		BUILTIN SUBM;
		SUBM (2,
		      SOURCE,
		      DEST,
		      %IF %NULL (DEST2) %THEN DEST %ELSE DEST2 %FI
		      )
		END
		%;
MACRO
	ADDQ (SOURCE, DEST, DEST2) =
		BEGIN
		BUILTIN ADDM;
		ADDM (2,
		      SOURCE,
		      DEST,
		      %IF %NULL (DEST2) %THEN DEST %ELSE DEST2 %FI
		      )
		END
		%;
MACRO
	CMPQ (SOURCE, REL, DEST) =
		BEGIN
		BUILTIN CMPM;
		CASE CMPM (2, SOURCE, DEST)
		FROM -1 TO 1 OF
		    SET
		    [-1]:   %STRING (REL) EQL 'LSS'
			 OR %STRING (REL) EQL 'LEQ'
			 OR %STRING (REL) EQL 'NEQ';
		    [0]:    %STRING (REL) EQL 'GEQ'
			 OR %STRING (REL) EQL 'LEQ'
			 OR %STRING (REL) EQL 'EQL';
		    [1]:    %STRING (REL) EQL 'GTR'
			 OR %STRING (REL) EQL 'GEQ'
			 OR %STRING (REL) EQL 'NEQ';
		    TES
		END
		%;
!
! File ID's that are known constants
!
LITERAL
	INDEX_FID	= 1,		! index file
	BITMAP_FID	= 2,		! storage map file
	BADBLK_FID	= 3,		! bad block file
	MFD_FID		= 4,		! MFD
	CORIMG_FID	= 5,		! core image file
	VOLSET_FID	= 6,		! volume set list file
	CONTIN_FID	= 7,		! continuation file
	BACKUP_FID	= 8,		! backup journal file
	BADLOG_FID	= 9;		! bad block log file
!
! Constants used in protection checking
!
LITERAL
	SYSTEM_UIC	= 8,		! highest UIC group of system UIC's

	READ_ACCESS	= 0,		! file access modes
	WRITE_ACCESS	= 1,
	DELETE_ACCESS	= 2,
	CREATE_ACCESS	= 3,
	RDATT_ACCESS	= 4,
	WRATT_ACCESS	= 5,
	EXEC_ACCESS	= 6;
!
! Type codes used to identify blocks being read by READ_BLOCK.
! Note that READ_BLOCK contains a table indexed by these codes.
!
LITERAL
	HEADER_TYPE	= 0,		! file header
	BITMAP_TYPE	= 1,		! storage bitmap
	DIRECTORY_TYPE	= 2,		! directory block
	INDEX_TYPE	= 3,		! other index file blocks
	DATA_TYPE	= 4,		! random data file blocks
	QUOTA_TYPE	= 5;		! disk quota file blocks
!
! Type codes used to identify blocks of memory requested from the
! allocator. Note that these codes index into a table in ALLOCATE.
!
LITERAL
	FCB_TYPE	= 0,		! file control block
	WCB_TYPE	= 1,		! window block
	VCB_TYPE	= 2,		! volume control block
	RVT_TYPE	= 3,		! relative volume table
	MVL_TYPE	= 4,		! magtape volume list
	AQB_TYPE	= 5,		! ACP queue control block
	CACHE_TYPE	= 6;		! cache data block
!
! Mode codes for the bad block log file scan routine
!
LITERAL
	REMOVE_BADBLOCK	= 0,		! remove log entry
	ENTER_READERR	= 1,		! log read error
	ENTER_WRITERR	= 2;		! log write error
!
! Mode flags for the routine CHARGE_QUOTA.
!
LITERAL
	QUOTA_CHECK	= 0,		! check space requested against quota
	QUOTA_CHARGE	= 1;		! charge the space to the quota file
!
! Index codes for the subfunctions in the performance measurement data base.
!
LITERAL
	PMS_FIND	= 6,		! directory searches
	PMS_ENTER	= 7,		! directory entries
	PMS_ALLOC	= 8,		! storage map allocation and deallocation
	PMS_RWATT	= 9;		! read/write attributes
!
! Random constants.
!
LITERAL
	EFN		= 1,		! event flag for I/O
	MBX_EFN		= 2,		! event flag for asynchronous mailbox I/O
	TIMER_EFN	= 3,		! EFN for timers
	MAILBOX_EFN	= 4,		! EFN for job controller reply mailbox
	FILENAME_LENGTH	= 80,		! maximum file name length
	MIN_WINDOW	= 1,		! minimum window size
	MAX_WINDOW	= 80;		! maximum window size (in pointers)
!
! Modes to call TRUNCATE routine.
!
LITERAL
	ERASE_POINTERS	= 1,		! erase retrieval pointers removed
	DEALLOC_BLOCKS	= 1;		! deallocate the blocks

!
! Normal termination cleanup flags
!
LITERAL
	CLF_FIXFCB	= 1,		! update FCB from header
	CLF_DOSPOOL	= 2,		! send file to print queue
	CLF_INVWINDOW	= 4,		! invalidate all windows
	CLF_SUPERSEDE	= 5,		! supersede old file
	CLF_DIRECTORY	= 6, 		! directory operation enabled
	CLF_SPOOLFILE	= 7,		! operation is on spool file
	CLF_SYSPRV	= 8,		! user has SYSTEM privilege or equivalent
	CLF_CLEANUP	= 9,		! cleanup is in progress
	CLF_INCOMPLETE	= 10,		! file is not completely mapped
!
! Error termination cleanup flags
!
	CLF_DEACCESS	= 16,		! deaccess file
	CLF_ZCHANNEL	= 17,		! clean out user's channel
	CLF_TRUNCATE	= 18,		! undo extend operation
	CLF_FLUSHFID	= 19,		! flush file ID cache
	CLF_DELFID	= 20,		! delete file ID
	CLF_DELFILE	= 21,		! delete complete file
	CLF_REMOVE	= 22,		! remove directory entry
	CLF_REENTER	= 23,		! put directory entry back
	CLF_CLOSEFILE	= 24,		! close internal file
	CLF_DEACCQFILE	= 25,		! deaccess quota file
	CLF_DELWINDOW	= 26,		! deallocate window
	CLF_HDRNOTCHG	= 27,		! file header not charged to user
	CLF_DELEXTFID	= 28,		! delete extension header
	CLF_NOTCHARGED	= 29,		! disk blocks not charged to user yet
	CLF_FIXLINK	= 30,		! restore old file back link
	CLF_REMAP	= 31;		! remap the file to fix up the windows
!
! Cleanup actions that modify the disk, and are to be turned off in case
! of a write error.
!
LITERAL
	CLF_M_WRITEDISK	=
		1^CLF_SUPERSEDE		! supersede old file
		OR 1^CLF_TRUNCATE	! undo extend operation
		OR 1^CLF_DELFID		! delete file ID
		OR 1^CLF_DELFILE	! delete complete file
		OR 1^CLF_REMOVE		! remove directory entry
		OR 1^CLF_REENTER	! put directory entry back
		OR 1^CLF_DELEXTFID;	! delete extension header
!
! Structure definitions for the file name descriptor block.
!

MACRO
	FND_FLAGS	= 0, 0, 16, 0%,	! file name flag bits
	FND_WILD_NAME	= 0, $BITPOSITION (FIB$V_ALLNAM), 1, 0%,	! wild card name
	FND_WILD_TYPE	= 0, $BITPOSITION (FIB$V_ALLTYP), 1, 0%,	! wild card type
	FND_WILD_VER	= 0, $BITPOSITION (FIB$V_ALLVER), 1, 0%,	! wild card version
	FND_WILD	= 0, $BITPOSITION (FIB$V_WILD),   1, 0%,	! wild card in name
	FND_MAX_VER	= 0, $BITPOSITION (FIB$V_NEWVER), 1, 0%,	! maximize version
	FND_FIND_FID	= 0, $BITPOSITION (FIB$V_FINDFID), 1, 0%,	! search for file ID
	FND_COUNT	= 4, 0, 32, 0%,	! name string length
	FND_STRING	= 8, 0, 32, 0%,	! name string address
	FND_VERSION	= 12,0, 16, 1%;	! version number

LITERAL
	FND_LENGTH	= 16;		! length of filename descriptor

! Structure of directory scan context block.
!

MACRO
	DCX_VBN		= 0, 0, 32, 0%,	! directory VBN
	DCX_BUFFER	= 4, 0, 32, 0%,	! address of current buffer
	DCX_ENTRY	= 8, 0, 32, 0%,	! address of current record
	DCX_VERSION	= 12,0, 32, 0%,	! address of current version
	DCX_END		= 16,0, 32, 0%,	! address of end of data
	DCX_PRED	= 20,0, 32, 0%,	! address of predecessor record
	DCX_VERLIMIT	= 24,0, 16, 0%,	! version limit of current name
	DCX_VERCOUNT	= 26,0, 16, 0%,	! number of versions traversed
	DCX_NAME	= 28,0, 00, 0%;	! name string of prev. entry

LITERAL
	DCX_LENGTH	= 28+FILENAME_LENGTH+1+3 AND NOT 3;
					! length of context block

! Macro to define direct access names for the standard directory context
! block.
!

MACRO
	DIR_CONTEXT_DEF	=
	    BIND
		DIR_VBN		= DIR_CONTEXT[DCX_VBN],
		DIR_BUFFER	= DIR_CONTEXT[DCX_BUFFER]	: REF BBLOCK,
		DIR_ENTRY	= DIR_CONTEXT[DCX_ENTRY]	: REF BBLOCK,
		DIR_VERSION	= DIR_CONTEXT[DCX_VERSION]	: REF BBLOCK,
		DIR_END		= DIR_CONTEXT[DCX_END]		: REF BBLOCK,
		DIR_PRED	= DIR_CONTEXT[DCX_PRED]		: REF BBLOCK,
		VERSION_LIMIT	= DIR_CONTEXT[DCX_VERLIMIT]	: WORD,
		VERSION_COUNT	= DIR_CONTEXT[DCX_VERCOUNT]	: WORD,
		LAST_ENTRY	= DIR_CONTEXT[DCX_NAME]		: VECTOR [,BYTE]
	    %;
