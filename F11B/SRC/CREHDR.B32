MODULE CREHDR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine creates a new file ID by allocating a file number from the
!	index file bitmap. It returns an empty file header, verified for use.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  28-Mar-1977  13:49
!
! MODIFIED BY:
!
!	V03-001	ACG0273		Andrew C. Goldstein,	23-Mar-1982  10:50
!		Use random file sequence number if old header is junk,
!		use alternate index file header if primary is suspect
!
!	V02-007	ACG0229		Andrew C. Goldstein,	23-Dec-1981  21:53
!		Count file ID cache hits and misses
!
!	V02-006	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	CREATE_HEADER,			! create file ID and header
	GET_FILE_NUM,			! get file number from cache
	BASH_HEADERS,			! trash contents of file headers
	BUMP_IDXEOF,			! increment index file EOF
	READ_NEW_HEADER,		! read new file header block
	HANDLER,			! local condition handler
	READ_IDX_HEADER;		! read index file header

GLOBAL ROUTINE CREATE_HEADER (FILE_ID) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates a new file ID by searching the volume's index
!	file bitmap for the first free file number. It also checks that a header
!	for the file number is present in the index file. It reads the old
!	header and establishes the file sequence number for the new one.
!
! CALLING SEQUENCE:
!	CREATE_HEADER (ARG1)
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: address of volume's VCB
!
! OUTPUT PARAMETERS:
!	ARG1: address to store file ID of created header
!
! IMPLICIT OUTPUTS:
!	NEW_FID: file number of header created
!	NEW_FID_RVN: RVN of above
!
! ROUTINE VALUE:
!	address of buffer containing new header
!
! SIDE EFFECTS:
!	VCB and index file bitmap altered, header block read
!
!--

BEGIN

MAP
	FILE_ID		: REF BBLOCK;	! new file ID of header
LOCAL
	VCB		: REF BBLOCK,	! local copy of VCB address
	FID_CACHE	: REF BBLOCK,	! pointer to file ID cache
	VBN,				! relative block number in bitmap
	BUFFER		: REF BITVECTOR, ! address of index file bitmap buffer
	ADDRESS		: REF BITVECTOR, ! address of byte in buffer
	COUNT,				! number of index blocks to bash
	EOF_VBN,			! VBN of index blocks to bash
	FILE_NUMBER,			! file number allocated
	IDX_FCB		: REF BBLOCK,	! FCB of index file
	NO_READ,			! flag to not read old file header
	LBN,				! LBN of new file header
	HEADER		: REF BBLOCK,	! address of header buffer
	STATUS,				! value of CHECK_HEADER call
	SAVE_STATUS;			! save I/O status during CHECK_HEADER call

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup status flags
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	CURRENT_RVN,			! RVN of current volume
	NEW_FID,			! pending file ID
	NEW_FID_RVN,			! RVN of above
	HEADER_LBN,			! LBN of created file header
	USER_STATUS	: VECTOR,	! I/O status block of user
	PMS$GL_FIDHIT	: ADDRESSING_MODE (GENERAL),
					! count of file ID cache hits
	PMS$GL_FIDMISS	: ADDRESSING_MODE (GENERAL),
					! count of file ID cache misses
	EXE$GQ_SYSTIME	: ADDRESSING_MODE (GENERAL);
					! system time of day

EXTERNAL ROUTINE
	READ_BLOCK,			! read block from disk
	WRITE_BLOCK,			! write block to disk
	EXTEND_INDEX,			! extend the index file
	MAP_VBN,			! map virtual to logical block
	CHECKSUM,			! compute file header checksum
	WRITE_HEADER,			! write current file header
	RESET_LBN,			! change backing LBN of buffer
	INVALIDATE,			! invalidate a buffer
	CREATE_BLOCK,			! materialize a block buffer
	CHECK_HEADER2,			! verify file header
	MARK_DIRTY;			! mark buffer for write-back


! The outer loop performs retries if blocks in the index file are bad or
! are valid file headers. A block containing a valid file header is never
! used to create a new file; it is simply left marked in use for recovery.
! Bad header blocks are simply left marked in use in the index file bitmap;
! they will show up in a verify but are otherwise harmless.
!

VCB = .CURRENT_VCB;
WHILE 1 DO
    BEGIN

! See if a file number is available in the file number cache. If not,
! we scan the index file bitmap for the first free (zero) bit. This is done
! by starting with the block recorded in the VCB and looking at each block
! with a character scan.
!

    FID_CACHE = .BBLOCK [.VCB[VCB$L_CACHE], VCA$L_FIDCACHE];
    IF .FID_CACHE[VCA$W_FIDCOUNT] EQL 0
    THEN
	BEGIN
	PMS$GL_FIDMISS = .PMS$GL_FIDMISS + 1;
	VBN = .VCB[VCB$B_IBMAPVBN];

	IF
	    BEGIN
	    UNTIL .VBN GEQ .VCB[VCB$B_IBMAPSIZE] DO
		BEGIN
		BUFFER = READ_BLOCK (.VBN + .VCB[VCB$L_IBMAPLBN], 1, INDEX_TYPE);
		IF NOT CH$FAIL (ADDRESS = CH$FIND_NOT_CH (512, .BUFFER, 255))
		THEN EXITLOOP 0;
		VBN = .VBN + 1;
		END
	    END

! If we fall through the loop, the entire bitmap is full.
!

	THEN ERR_EXIT (SS$_IDXFILEFULL);

! Having found a bitmap block with free files in it, fill the file ID cache
! and return one entry. Then write the bitmap block. If we have allocated
! file numbers past the index file EOF, also bash the current contents of
! the header blocks. It is essential to do this to prevent valid file headers
! from a previous use of the disk from reappearing if the cache entries are
! lost due to a system crash.
!

	FILE_NUMBER = KERNEL_CALL (GET_FILE_NUM, .VCB, .BUFFER, .VBN, COUNT, EOF_VBN);
	IF .FILE_NUMBER EQL 0
	THEN ERR_EXIT (SS$_IDXFILEFULL);

	CLEANUP_FLAGS[CLF_FLUSHFID] = 1;
	IF .COUNT NEQ 0
	THEN
	    BEGIN
	    STATUS = BASH_HEADERS (.COUNT, .EOF_VBN);
	    IF NOT .STATUS
	    THEN
		BEGIN
		INVALIDATE (.BUFFER);
		ERR_EXIT (.STATUS);
		END;
	    END;
	WRITE_BLOCK (.BUFFER);
	CLEANUP_FLAGS[CLF_FLUSHFID] = 0;
	END

! If the file ID cache had entries in it, all we have to do is check one out.
!

    ELSE
	BEGIN
	PMS$GL_FIDHIT = .PMS$GL_FIDHIT + 1;
	FILE_NUMBER = KERNEL_CALL (GET_FILE_NUM, .VCB);
	IF .FILE_NUMBER EQL 0
	THEN ERR_EXIT (SS$_IDXFILEFULL);
	END;

    NEW_FID = .FILE_NUMBER;
    NEW_FID_RVN = .CURRENT_RVN;		! record for cleanup

! See if the header allocated is mapped by the index file. If not, extend
! the index file.
!

    IDX_FCB = .VCB[VCB$L_FCBFL];
    VBN = .FILE_NUMBER + .VCB[VCB$B_IBMAPSIZE] + .VCB[VCB$W_CLUSTER]*4;
    IF .VBN GTRU .IDX_FCB[FCB$L_FILESIZE]
    THEN
	BEGIN
	EXTEND_INDEX (.FILE_NUMBER);
	STATUS = BASH_HEADERS (32, .VBN);
	IF NOT .STATUS
	THEN ERR_EXIT (.STATUS);
	END;

! Now get the header block. If the header is beyond the current EOF of the
! index file, we do not read a block but simply materialize one in memory.
! We also update the EOF in the index file FCB; every 20th update we also
! update the EOF in the index file header.
!

    FILE_ID[FID$W_NUM] = .FILE_NUMBER<0,16>;
    FILE_ID[FID$B_NMX] = .FILE_NUMBER<16,8>;
    FILE_ID[FID$B_RVN] = .CURRENT_RVN;

    IDX_FCB = .VCB[VCB$L_FCBFL];
    LBN = MAP_VBN (.VBN, .IDX_FCB[FCB$L_WLFL]);
    IF .LBN EQL -1 THEN BUG_CHECK (HDRNOTMAP, FATAL, 'Allocated file header not mapped');

    NO_READ =  .VBN GTRU .IDX_FCB[FCB$L_EFBLK];
    IF .NO_READ
    OR .VCB[VCB$B_EOFDELTA] GTRU 20
    THEN
	BEGIN
	IF KERNEL_CALL (BUMP_IDXEOF, .VBN)
	THEN
	    BEGIN
	    HEADER = READ_IDX_HEADER ();
	    BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_EFBLK] = ROT (.IDX_FCB[FCB$L_EFBLK]+1, 16);
	    BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_FFBYTE] = 0;
	    CHECKSUM (.HEADER);
	    WRITE_HEADER ();
	    RESET_LBN (.HEADER, .VCB[VCB$L_IXHDR2LBN]);
	    WRITE_BLOCK (.HEADER);
	    INVALIDATE (.HEADER);
	    END;
	END;

    IF .NO_READ
    THEN
	HEADER = CREATE_BLOCK (.LBN, 1, HEADER_TYPE)

! Else if the new header is within the index file EOF, read it.
! Then check the block read for resemblence to a file header.
!

    ELSE
	HEADER = READ_NEW_HEADER (.LBN);

    IF .HEADER NEQ 0
    THEN
	BEGIN
	FILE_ID[FID$W_SEQ] = .HEADER[FH2$W_FID_SEQ];
	SAVE_STATUS = .USER_STATUS[0];
	STATUS = CHECK_HEADER2 (.HEADER, .FILE_ID);
	USER_STATUS[0] = .SAVE_STATUS; ! restore status, bashed by CHECK_HEADER

! Make the final checks that the block is acceptable as a file header. We do
! not use valid file headers. Also, we skip file numbers with the low 16 bits
! all zero to avoid confusing the old FCS-11.
!

	IF .FILE_ID[FID$W_NUM] EQL 0
	THEN
	    WRITE_BLOCK (.HEADER)
	ELSE
	    IF NOT .STATUS
	    THEN EXITLOOP;
	END;
    END;				! end of file number allocation loop

HEADER_LBN = .LBN;			! record LBN of new header

IF .STATUS EQL 0
AND NOT .NO_READ
THEN FILE_ID[FID$W_SEQ] = .EXE$GQ_SYSTIME<16,16>;
FILE_ID[FID$W_SEQ] = .FILE_ID[FID$W_SEQ] + 1;
CH$MOVE (FID$C_LENGTH, .FILE_ID, HEADER[FH2$W_FID]);
HEADER[FH2$B_FID_RVN] = 0;

MARK_DIRTY (.HEADER);
RETURN .HEADER;

END;					! end of routine CREATE_HEADER

ROUTINE GET_FILE_NUM (VCB, BUFFER, VBN, COUNT, EOF_VBN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes an entry from the file ID cache and returns
!	it. If the optional arguments are present, it refills the cache
!	first from the supplied bitmap buffer. If headers were allocated
!	past the index file EOF, it returns the count and VBN of blocks
!	that must be bashed to prevent phantom file headers. This routine
!	must be called in kernel mode.
!
!
! CALLING SEQUENCE:
!	GET_FILE_NUM (ARG1, ARG2, ARG3, ARG4, ARG5)
!
! INPUT PARAMETERS:
!	ARG1: address of volume VCB
!	ARG2: (optional) address of bitmap buffer
!	ARG3: (optional) relative block number in bitmap
!
! IMPLICIT INPUTS:
!
! OUTPUT PARAMETERS:
!	ARG4: (optional) address to return count of headers to bash
!	ARG5: (optional) address to return index file VBN of headers to bash
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	file number found, or 0 if failure
!
! SIDE EFFECTS:
!	file ID cache modified
!
!--

BEGIN

MAP
	VCB		: REF BBLOCK,	! local copy of VCB address
	BUFFER		: REF BITVECTOR; ! address of index file bitmap buffer

LOCAL
	FID_CACHE	: REF BBLOCK,	! pointer to file ID cache
	ADDRESS		: REF BITVECTOR, ! address of byte in buffer
	FREE_COUNT,			! count of cache entries to fill
	BITPOS,				! bit positon of free bit within byte
	BITPOS2,			! bit positon of first used bit
	NEW_VBN,			! VBN of index blocks to bash
	IDX_VBN,			! current block in index bitmap
	FILE_NUMBER;			! file number allocated

EXTERNAL
	CURRENT_UCB	: REF BBLOCK;	! UCB of device


! If the optional arguments are present, fill the cache from the supplied
! bitmap buffer. Find each byte containing a free bit, and then find the
! free bit.
!

FID_CACHE = .BBLOCK [.VCB[VCB$L_CACHE], VCA$L_FIDCACHE];
IF ACTUALCOUNT GEQU 5
THEN
    BEGIN
    .COUNT = 0;
    ADDRESS = .BUFFER;
    FREE_COUNT = .FID_CACHE[VCA$W_FIDSIZE]/2 - .FID_CACHE[VCA$W_FIDCOUNT] + 1;

    WHILE 1 DO
	BEGIN
	IF CH$FAIL (ADDRESS = CH$FIND_NOT_CH (.BUFFER+512-.ADDRESS, .ADDRESS, 255))
	THEN EXITLOOP;
	FFC (%REF (0), %REF (8), .ADDRESS, BITPOS);
	FILE_NUMBER = .VBN*4096 + (.ADDRESS-.BUFFER)*8 + .BITPOS + 1;

	IF .FILE_NUMBER GTRU .VCB[VCB$L_MAXFILES]
	THEN EXITLOOP;

	ADDRESS[.BITPOS] = 1;
	FID_CACHE[VCA$W_FIDCOUNT] = .FID_CACHE[VCA$W_FIDCOUNT] + 1;
	VECTOR [FID_CACHE[VCA$L_FIDLIST], .FID_CACHE[VCA$W_FIDCOUNT]-1] = .FILE_NUMBER;
	FREE_COUNT = .FREE_COUNT - 1;
	IF .FREE_COUNT LEQ 0
	OR .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_DMT]
	OR .VCB[VCB$V_WRITE_IF]
	THEN EXITLOOP;

! See if the file number just allocated is past the index file EOF. If so,
! allocate up to 32 more, but only as far as they are contiguous with the
! first. Then return the arguments to cause that space of the index file to
! be bashed.
!

	NEW_VBN = .FILE_NUMBER + .VCB[VCB$B_IBMAPSIZE] + .VCB[VCB$W_CLUSTER]*4;
	IF .NEW_VBN GTRU .BBLOCK [.VCB[VCB$L_FCBFL], FCB$L_EFBLK]
	THEN
	    BEGIN
	    BITPOS = .BITPOS + 1;
	    FFS (BITPOS, %REF (MINU (32, .FREE_COUNT, (.BUFFER+512-.ADDRESS)*8-.BITPOS)),
		 .ADDRESS, BITPOS2);
	    .COUNT = .BITPOS2 - .BITPOS + 1;
	    .EOF_VBN = .NEW_VBN;
	    DECR J FROM .BITPOS2-.BITPOS TO 1
	    DO
		BEGIN
		ADDRESS[.BITPOS] = 1;
		BITPOS = .BITPOS + 1;
		FILE_NUMBER = .FILE_NUMBER + 1;
		FID_CACHE[VCA$W_FIDCOUNT] = .FID_CACHE[VCA$W_FIDCOUNT] + 1;
		VECTOR [FID_CACHE[VCA$L_FIDLIST], .FID_CACHE[VCA$W_FIDCOUNT]-1] = .FILE_NUMBER;
		END;
	    EXITLOOP;
	    END;

	END;				! end of bitmap processing loop

    IDX_VBN = .VBN;			! update current VBN of index file bitmap
    IF .FILE_NUMBER<0,12> EQL 0
    THEN IDX_VBN = .IDX_VBN + 1;
    VCB[VCB$B_IBMAPVBN] = .IDX_VBN;
    END;				! end of bitmap processing conditional

! Finally do what we came for: get a file number from the cache and return it.
!

IF .FID_CACHE[VCA$W_FIDCOUNT] EQL 0
THEN RETURN 0;

FILE_NUMBER = .FID_CACHE[VCA$L_FIDLIST];
FID_CACHE[VCA$W_FIDCOUNT] = .FID_CACHE[VCA$W_FIDCOUNT] - 1;
CH$MOVE (.FID_CACHE[VCA$W_FIDCOUNT]*4,
	  FID_CACHE[VCA$L_FIDLIST]+4,
	  FID_CACHE[VCA$L_FIDLIST]);

RETURN .FILE_NUMBER;

END;					! end of routine GET_FILE_NUM

ROUTINE BASH_HEADERS (COUNT, VBN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes garbage into the indicated file headers, provided
!	they are present. The reason for this is as follows: If the system
!	crashes while there are entries in the file ID cache, the disk will
!	be left with unused headers marked in use. If they are past the
!	index file EOF, they might be untouched since the last use of the
!	disk, and could contain valid file headers from the previous use.
!	These headers must be bashed to prevent phantom files from appearing.
!
!
! CALLING SEQUENCE:
!	BASH_HEADERS (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: count of blocks to write
!	ARG2: index file VBN at which to start
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	header blocks written
!
!--

BEGIN

LOCAL
	STATUS,				! status return value
	BLOCK_COUNT,			! actual count of blocks to write
	CURRENT_VBN,			! next VBN to be written
	LBN,				! LBN about to be written
	UNMAPPED,			! count of blocks not mapped
	BYTE_COUNT,			! number of bytes to write
	IDX_WINDOW	: REF BBLOCK;	! index file window

EXTERNAL
	PMS_TOT_WRITE,			! count of total blocks written
	CODE_START,			! start of ACP code
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	IO_CHANNEL,			! channel number for I/O
	IO_STATUS	: VECTOR [,WORD]; ! I/O status block

EXTERNAL ROUTINE
	MAP_VBN;			! map virtual to logical block


! Loop, mapping and writing blocks. We quit when the count runs out or if
! the map fails (indicating end of allocated space).
!

IDX_WINDOW = .BBLOCK [.CURRENT_VCB[VCB$L_FCBFL], FCB$L_WLFL];
BLOCK_COUNT = .COUNT;
CURRENT_VBN = .VBN;

UNTIL .BLOCK_COUNT EQL 0
DO
    BEGIN
    LBN = MAP_VBN (.VBN, .IDX_WINDOW, .BLOCK_COUNT, UNMAPPED);
    IF .LBN EQL -1 THEN RETURN 1;
    BYTE_COUNT = (.BLOCK_COUNT - .UNMAPPED) * 512;

! Loop to skip over write errors (they will be dealt with when we actually
! try to use that block for a header).
!

    UNTIL .BYTE_COUNT EQL 0
    DO
	BEGIN
	PMS_TOT_WRITE = .PMS_TOT_WRITE + 1;
	STATUS = $QIOW (CHAN = .IO_CHANNEL,
			FUNC = IO$_WRITELBLK,
			IOSB = IO_STATUS,
			P1   = CODE_START,
			P2   = .BYTE_COUNT,
			P3   = .LBN
			);
	IF NOT .STATUS
	THEN RETURN .STATUS;
	IF .IO_STATUS THEN EXITLOOP;
	LBN = .LBN + 1;
	BYTE_COUNT = .BYTE_COUNT - 512;
	END;

    CURRENT_VBN = .CURRENT_VBN + .BLOCK_COUNT - .UNMAPPED;
    BLOCK_COUNT = .UNMAPPED;
    END;

1
END;					! end of routine BASH_HEADERS

GLOBAL ROUTINE BUMP_IDXEOF (VBN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the end of file mark for the index file to
!	the given VBN and counts the update.
!
! CALLING SEQUENCE:
!	BUMP_IDXEOF (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: new end of file VBN
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if index file header should be updated
!	0 if not
!
! SIDE EFFECTS:
!	VBN written into VCB
!
!--

BEGIN

LOCAL
	IDX_FCB		: REF BBLOCK;	! FCB of index file

EXTERNAL
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume


! Store the EOF into the index file FCB. Also bump the change count in the
! VCB. If it exceeds 20, clear it and return true, calling for an update.
!

IDX_FCB = .CURRENT_VCB[VCB$L_FCBFL];
IF .VBN GTRU .IDX_FCB[FCB$L_EFBLK]
THEN
    BEGIN
    CURRENT_VCB[VCB$B_EOFDELTA] = .CURRENT_VCB[VCB$B_EOFDELTA]
				+ .VBN - .IDX_FCB[FCB$L_EFBLK];
    IDX_FCB[FCB$L_EFBLK] = .VBN;
    END;

IF .CURRENT_VCB[VCB$B_EOFDELTA] GTRU 20
THEN
    BEGIN
    CURRENT_VCB[VCB$B_EOFDELTA] = 0;
    RETURN 1;
    END
ELSE
    RETURN 0;

END;					! end of routine BUMP_IDXEOF

ROUTINE READ_NEW_HEADER (LBN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the block about to be used for a new file header.
!	It uses a local condition handler to fix up errors.
!
!
! CALLING SEQUENCE:
!	READ_NEW_HEADER (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: LBN of block to read
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of buffer containing block or 0 if bad
!
! SIDE EFFECTS:
!	block read and/or written
!
!--

BEGIN

LOCAL
	HEADER		: REF BBLOCK;	! address of block read

EXTERNAL ROUTINE
	READ_BLOCK,			! read a block
	WRITE_BLOCK,			! write a block
	INVALIDATE,			! invalidate a buffer
	CREATE_BLOCK;			! create a new block buffer

! Under control of the condition handler, we read the block. If the read
! fails, we attempt to rewrite the block and then read it again. If either
! of the latter fails, we return failure.
!

ENABLE HANDLER;

HEADER = READ_BLOCK (.LBN, 1, HEADER_TYPE);

IF .HEADER EQL 0
THEN
    BEGIN
    HEADER = CREATE_BLOCK (.LBN, 1, HEADER_TYPE);
    WRITE_BLOCK (.HEADER);
    INVALIDATE (.HEADER);
    HEADER = READ_BLOCK (.LBN, 1, HEADER_TYPE);
    END;

RETURN .HEADER;

END;					! end of routine READ_NEW_HEADER

ROUTINE HANDLER (SIGNAL, MECHANISM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for the initial header read.
!	On surface errors, it unwinds and causes a return of 0 to the caller
!	of the I/O routine to indicate error. Hard drive errors cause the
!	usual error exit.
!
! CALLING SEQUENCE:
!	HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_RESIGNAL or none if unwind
!
! SIDE EFFECTS:
!	NONE
!
!--


BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal arg array
	MECHANISM	: REF BBLOCK;	! mechanism arg array

EXTERNAL
	IO_STATUS	: VECTOR;	! I/O status block of last operation


! If the condition is change mode to user (error exit) and the status is
! read error, zero the return R0 and unwind to the the establisher. On
! most write errors, zero the return R0 and unwind to the caller.
! Otherwise, just resignal the condition.
!

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
THEN
    BEGIN
    MECHANISM[CHF$L_MCH_SAVR0] = 0;

    IF .SIGNAL[CHF$L_SIG_ARG1] EQL SS$_PARITY
    OR .SIGNAL[CHF$L_SIG_ARG1] EQL SS$_DATACHECK
    OR .SIGNAL[CHF$L_SIG_ARG1] EQL SS$_FORMAT
    THEN
	$UNWIND (DEPADR = MECHANISM[CHF$L_MCH_DEPTH])
    END;

RETURN SS$_RESIGNAL;			! status is irrelevant if unwinding

END;					! end of routine HANDLER

GLOBAL ROUTINE READ_IDX_HEADER =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volume's index file header, using the
!	alternate if it seems appropriate.
!
! CALLING SEQUENCE:
!	READ_IDX_HEADER ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of file header read
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN


LOCAL
	HEADER		: REF BBLOCK,	! address of header read
	SAVE_STATUS,			! save USER_STATUS while checking headers
	FCB		: REF BBLOCK;	! address of index file FCB

EXTERNAL
	USER_STATUS	: VECTOR,	! I/O status block of user
	FILE_HEADER	: REF BBLOCK,	! global file header pointer
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume in process

EXTERNAL ROUTINE
	FILE_SIZE,			! compute file header file size
	READ_HEADER,			! read file header
	READ_BLOCK,			! read a disk block
	CHECK_HEADER2,			! validate file header
	RESET_LBN,			! reassign LBN of buffer
	INVALIDATE;			! invalidate buffer


! Read the index file header. Check the file size against the
! file size in the FCB. A mismatch indicates a failure in writing the
! header the last time; if this occurrs, try the alternate header instead.
!

SAVE_STATUS = .USER_STATUS;

FCB = .CURRENT_VCB[VCB$L_FCBFL];
HEADER = READ_HEADER (0, .FCB);
IF FILE_SIZE (.HEADER) NEQ .FCB[FCB$L_FILESIZE]
THEN
    BEGIN
    FILE_HEADER = 0;
    INVALIDATE (.HEADER);
    HEADER = READ_BLOCK (.CURRENT_VCB[VCB$L_IXHDR2LBN], 1, HEADER_TYPE);
    IF NOT CHECK_HEADER2 (.HEADER, UPLIT WORD (FID$C_INDEXF, FID$C_INDEXF, 0))
    THEN
	BEGIN
	INVALIDATE (.HEADER);
	ERR_EXIT (0);
	END;
    IF FILE_SIZE (.HEADER) NEQ .FCB[FCB$L_FILESIZE]
    THEN ERR_EXIT (SS$_BADFILEHDR);
    FILE_HEADER = .HEADER;
    RESET_LBN (.HEADER, .FCB[FCB$L_HDLBN]);
    END;

USER_STATUS = .SAVE_STATUS;

.HEADER
END;					! end of routine READ_IDX_HEADER

END
ELUDOM
