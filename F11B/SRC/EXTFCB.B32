MODULE EXTFCB (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine updates an FCB for one extension header of the file.
!	If the file is accessed, it creates an extension FCB. Regardless,
!	it updates the file size in the primary FCB.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. This routine must be called in
!	kernel mode.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  25-Jul-1977  10:55
!
! MODIFIED BY:
!
!	V03-001	ACG0272		Andrew C. Goldstein,	23-Mar-1982  10:17
!		Clean up use of dummy FCB
!
!	B0102	ACG26369	Andrew C. Goldstein,	28-Dec-1979  15:44
!		Fix multi-header interlock bug
!
!	B0101	ACG0003		Andrew C. Goldstein,  19-Dec-1978  17:40
!	Add multi-volume support
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE MAKE_EXTFCB (HEADER, FCB, MODE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates an FCB for one extension header of the file.
!	If the file is accessed, it creates an extension FCB. Regardless,
!	it updates the file size in the primary FCB.
!
!
! CALLING SEQUENCE:
!	MAKE_EXTFCB (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of extension file header
!	ARG2: address of last file FCB or 0
!	ARG3: 0 if just building primary FCB for read attributes
!	      1 if file is being accessed (to create new FCB)
!	      2 if file is being extended (creating new header)
!
! IMPLICIT INPUTS:
!	PRIMARY_FCB: address of primary FCB of file
!	CURRENT_WINDOW: address of file window or 0
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of new FCB created or 0
!
! SIDE EFFECTS:
!	new FCB created, primary FCB modified, window modified
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	NEW_FCB		: REF BBLOCK;	! address of new FCB created

EXTERNAL
	PRIMARY_FCB	: REF BBLOCK,	! address of primary FCB of file
	CURRENT_WINDOW	: REF BBLOCK,	! address of file window if any
	CURRENT_FIB	: REF BBLOCK,	! FIB of operation
	CURRENT_VCB	: REF BBLOCK;	! VCB of current volume

EXTERNAL ROUTINE
	FILE_SIZE,			! compute file size of file header
	CREATE_FCB,			! create a new FCB
	INIT_FCB2;			! initialize existing FCB


! If the file is not accessed, this is for a read attributes which just needs
! a primary FCB. All we do is compute the file size of the header and add
! it into the primary FCB.
!

IF .MODE EQL 0
THEN
    BEGIN
    PRIMARY_FCB[FCB$L_FILESIZE] = .PRIMARY_FCB[FCB$L_FILESIZE] + FILE_SIZE (.HEADER);
    RETURN 0;
    END

! If the file is accessed, we create a new FCB and link it in. On an extend
! we must compute the new FCB starting VBN from the extend data lying around,
! since the primary FCB isn't updated until the very end.
!

ELSE
    BEGIN
    NEW_FCB = CREATE_FCB (.HEADER);
    NEW_FCB[FCB$W_ACNT] = 1;
    FCB[FCB$L_EXFCB] = .NEW_FCB;
    INSQUE (.NEW_FCB, .CURRENT_VCB[VCB$L_FCBBL]);
    CURRENT_VCB[VCB$W_TRANS] = .CURRENT_VCB[VCB$W_TRANS] + 1;
    IF .MODE
    THEN
	BEGIN
	NEW_FCB[FCB$L_STVBN] = .NEW_FCB[FCB$L_STVBN] + .PRIMARY_FCB[FCB$L_FILESIZE];
	PRIMARY_FCB[FCB$L_FILESIZE] = .PRIMARY_FCB[FCB$L_FILESIZE] + .NEW_FCB[FCB$L_FILESIZE];
	END
    ELSE
	NEW_FCB[FCB$L_STVBN] = .NEW_FCB[FCB$L_STVBN] + .PRIMARY_FCB[FCB$L_FILESIZE]
			     + .CURRENT_FIB[FIB$L_EXSZ];

    RETURN .NEW_FCB;
    END;

END;					! end of routine MAKE_EXTFCB

END
ELUDOM
