MODULE QUOTAUTIL (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains routines that inplement the ACP control
!	functions that operate on the quota file.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  31-May-1979  15:18
!
! MODIFIED BY:
!
!	V02-005	ACG0213		Andrew C. Goldstein,	13-Aug-1981  13:42
!		Remove write lock from quota file
!
!	V02-004	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:27
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	QUOTA_FILE_OP	: NOVALUE,	! general quota file operations
	FLUSH_QUO_CACHE	: NOVALUE,	! flush dirty entries from quota cache
	DEACC_QFILE,			! deaccess the quota file
	RET_QENTRY,			! return quota file entry to user
	CONN_QFILE	: NOVALUE,	! connect the quota file
	MAKE_QFCB;			! complete quota file access

GLOBAL ROUTINE QUOTA_FILE_OP (ABD, FIB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine implements most of the quota file ACP control functions
!	(i.e., the ones that are performed on the open quota file).
!
! CALLING SEQUENCE:
!	QUOTA_FILE_OP (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of buffer descriptor packet
!	ARG2: address of user FIB
!
! IMPLICIT INPUTS:
!	CLEANUP_FLAGS: cleanup action and status flags
!	CURRENT_VCB: VCB of current volume
!	IO_PACKET: I/O packet being processed
!	QUOTA_RECORD: record number of found quota file record
!	FREE_QUOTA: record number of first free quota file record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: FCB of quota file
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	quota file searched, modified, etc.
!
!--

BEGIN

MAP
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptor vector
	FIB		: REF BBLOCK;	! user FIB

LITERAL
	RECS_PER_BLOCK	= 512 / DQF$C_LENGTH,

	MAX_QFUNC	= MAXU (FIB$C_DSA_QUOTA,
				FIB$C_EXA_QUOTA,
				FIB$C_REM_QUOTA,
				FIB$C_MOD_QUOTA,
				FIB$C_ADD_QUOTA
				),

	MIN_QFUNC	= MINU (FIB$C_DSA_QUOTA,
				FIB$C_EXA_QUOTA,
				FIB$C_REM_QUOTA,
				FIB$C_MOD_QUOTA,
				FIB$C_ADD_QUOTA
				);

LOCAL
	TEMP1,				! random temp storage
	TEMP2,				! more of the same
	FCB		: REF BBLOCK,	! address of quota file FCB
	BUFFER		: REF BBLOCK,	! disk block buffer
	Q_RECORD	: REF BBLOCK,	! record found in quota file
	Q_BLOCK		: REF BBLOCK;	! quota arg block from user

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action and status flags
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	PRIMARY_FCB	: REF BBLOCK,	! FCB of current file
	IO_PACKET	: REF BBLOCK,	! I/O packet of request
	QUOTA_RECORD,			! record number of found quota file entry
	FREE_QUOTA;			! record number of free quota file entry

EXTERNAL ROUTINE
	SWITCH_VOLUME,			! switch volume context
	SEARCH_QUOTA,			! find entry in quota file
	CHECK_PROTECT,			! check file protection
	FLUSH_FID,			! flush a file from the buffer pool
	READ_BLOCK,			! read a disk block
	WRITE_BLOCK,			! write a disk block
	CHECKSUM,			! compute block checksum
	EXTEND_CONTIG,			! extend a contiguous file
	WRITE_QUOTA;			! write quota file record


! Do the preliminary setup and validation. All operations handled by this
! routine operate on RVN 1 of a volume set and require the quota file to
! be connected.
!

SWITCH_VOLUME (1);
PRIMARY_FCB = FCB = .CURRENT_VCB[VCB$L_QUOTAFCB];
IF .FCB EQL 0
THEN ERR_EXIT (SS$_QFNOTACT);

! Do additional validation which is common for several functions. All but
! the disable function require a quota file search and require the quota
! argument block (P2) to be present.
!

IF .FIB[FIB$W_CNTRLFUNC] NEQ FIB$C_DSA_QUOTA
THEN
    BEGIN
    IF .ABD[ABD$C_NAME, ABD$W_COUNT] LSSU DQF$C_LENGTH
    THEN ERR_EXIT (SS$_INSFARG);
    Q_BLOCK = ABD[ABD$C_NAME, ABD$W_TEXT] + .ABD[ABD$C_NAME, ABD$W_TEXT] + 1;

    Q_RECORD = SEARCH_QUOTA (.Q_BLOCK[DQF$L_UIC], .FIB[FIB$L_CNTRLVAL], .FIB[FIB$L_WCC], 0);
    IF .FIB[FIB$V_ALL_MEM]
    OR .FIB[FIB$V_ALL_GRP]
    THEN FIB[FIB$L_WCC] = .QUOTA_RECORD;

! All functions except disable and examine require write access to the
! quota file; examine requires read access except when examining one's
! own quota.
!

    IF .FIB[FIB$W_CNTRLFUNC] NEQ FIB$C_EXA_QUOTA
    THEN
	CHECK_PROTECT (WRITE_ACCESS, 0, .FCB)
    ELSE
	BEGIN
	IF .FIB[FIB$V_ALL_MEM]
	OR .FIB[FIB$V_ALL_GRP]
	OR .Q_BLOCK[DQF$L_UIC] NEQ
	    .BBLOCK [.IO_PACKET[IRP$L_ARB], ARB$L_UIC]
	THEN CHECK_PROTECT (READ_ACCESS, 0, .FCB);
	END;

! All functions except disable and add require the quota file search to be
! successful.
!

    IF .FIB[FIB$W_CNTRLFUNC] NEQ FIB$C_ADD_QUOTA
    THEN
	IF .Q_RECORD EQL 0
	THEN ERR_EXIT (SS$_NODISKQUOTA);
    END;

! Dispatch on the function and do it.
!

CASE .FIB[FIB$W_CNTRLFUNC] FROM MIN_QFUNC TO MAX_QFUNC OF
    SET

    [FIB$C_DSA_QUOTA]:			! disable disk quotas
	BEGIN
	IF NOT .CLEANUP_FLAGS[CLF_SYSPRV]
	THEN ERR_EXIT (SS$_NOPRIV);
	FLUSH_QUO_CACHE ();
	FLUSH_FID (FCB[FCB$W_FID]);
	KERNEL_CALL (DEACC_QFILE);
	BUFFER = READ_BLOCK (.CURRENT_VCB[VCB$L_SBMAPLBN]-1, 1, BITMAP_TYPE);
	BUFFER[SCB$V_QUODIRTY] = 0;
	CHECKSUM (.BUFFER);
	WRITE_BLOCK (.BUFFER);
	END;

    [FIB$C_EXA_QUOTA]:			! examine quota file entry
	BEGIN
	KERNEL_CALL (RET_QENTRY, .Q_RECORD, .ABD);
	END;

    [FIB$C_REM_QUOTA]:			! remove quota file entry
	BEGIN
	IF .Q_RECORD[DQF$L_USAGE] NEQ 0
	THEN ERR_STATUS (SS$_OVRDSKQUOTA);
	KERNEL_CALL (RET_QENTRY, .Q_RECORD, .ABD);
	CH$FILL (0, DQF$C_LENGTH, .Q_RECORD);
	WRITE_QUOTA (.Q_RECORD);
	END;

    [FIB$C_MOD_QUOTA]:			! modify quota file entry
	BEGIN
	IF .FIB[FIB$V_MOD_USE]
	THEN
	    BEGIN
	    IF NOT .CURRENT_VCB[VCB$V_NOALLOC]
	    THEN ERR_EXIT (SS$_ACCONFLICT);
	    Q_RECORD[DQF$L_USAGE] = .Q_BLOCK[DQF$L_USAGE];
	    END;
	IF .FIB[FIB$V_MOD_PERM]
	THEN
	    Q_RECORD[DQF$L_PERMQUOTA] = .Q_BLOCK[DQF$L_PERMQUOTA];
	IF .FIB[FIB$V_MOD_OVER]
	THEN
	    Q_RECORD[DQF$L_OVERDRAFT] = .Q_BLOCK[DQF$L_OVERDRAFT];
	IF .Q_RECORD[DQF$L_USAGE] GTRU .Q_RECORD[DQF$L_PERMQUOTA]
	THEN ERR_STATUS (SS$_OVRDSKQUOTA);
	WRITE_QUOTA (.Q_RECORD);
	KERNEL_CALL (RET_QENTRY, .Q_RECORD, .ABD);
	END;

    [FIB$C_ADD_QUOTA]:			! add quota file entry
	BEGIN
	IF .Q_RECORD NEQ 0
	THEN ERR_EXIT (SS$_DUPDSKQUOTA);
	IF .FREE_QUOTA EQL 0
	THEN
	    BEGIN
	    TEMP1 = .FIB[FIB$W_CNTRLFUNC];
	    TEMP2 = .FIB[FIB$L_CNTRLVAL];
	    Q_RECORD = EXTEND_CONTIG (.FIB, .FCB, 1);
	    FIB[FIB$W_CNTRLFUNC] = .TEMP1;
	    FIB[FIB$L_CNTRLVAL] = .TEMP2;
	    FIB[FIB$L_EXVBN] = 0;
	    END
	ELSE
	    BEGIN
	    Q_RECORD = READ_BLOCK ((.FREE_QUOTA-1)/RECS_PER_BLOCK + .FCB[FCB$L_STLBN],
				    1, QUOTA_TYPE);
	    Q_RECORD = .Q_RECORD + ((.FREE_QUOTA-1) MOD RECS_PER_BLOCK) * DQF$C_LENGTH;
	    END;

	CH$FILL (0, DQF$C_LENGTH, .Q_RECORD);
	Q_RECORD[DQF$V_ACTIVE] = 1;
	Q_RECORD[DQF$L_UIC] = .Q_BLOCK[DQF$L_UIC];
	Q_RECORD[DQF$L_USAGE] = .Q_BLOCK[DQF$L_USAGE];
	Q_RECORD[DQF$L_PERMQUOTA] = .Q_BLOCK[DQF$L_PERMQUOTA];
	Q_RECORD[DQF$L_OVERDRAFT] = .Q_BLOCK[DQF$L_OVERDRAFT];
	WRITE_QUOTA (.Q_RECORD);
	END;

    [INRANGE, OUTRANGE]:	0;	! should not be called with other functions

    TES;

END;					! end of routine QUOTA_FILE_OP

GLOBAL ROUTINE FLUSH_QUO_CACHE : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine flushes dirty entries in the quota cache back to the
!	quota file.
!
!
! CALLING SEQUENCE:
!	FLUSH_QUO_CACHE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	context set to RVN 1
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	quota cache flushed, quota file modified
!
!--

BEGIN

LITERAL
	RECS_PER_BLOCK	= 512 / DQF$C_LENGTH;

LOCAL
	QUOTA_CACHE	: REF BBLOCK,	! address of quota cache
	QUOTA_LIST	: REF BBLOCKVECTOR [,VCA$C_QUOLENGTH],
					! address of cache entries
	FCB		: REF BBLOCK,	! address of quota file FCB
	REC_NUM,			! record number to read
	Q_RECORD	: REF BBLOCK;	! address of record read


EXTERNAL
	CURRENT_VCB	: REF BBLOCK;	! address of VCB of volume

EXTERNAL ROUTINE
	READ_BLOCK,			! read a disk block
	CLEAN_QUO_CACHE;		! flush cache entry to record


! Scan the quota cache, looking for valid dirty entries. If one is found,
! read its record from the quota file, update the record, and write it back.
!

QUOTA_CACHE = .CURRENT_VCB[VCB$L_QUOCACHE];
IF .QUOTA_CACHE EQL 0 THEN RETURN;	! nop if no quota cache
FCB = .CURRENT_VCB[VCB$L_QUOTAFCB];
QUOTA_LIST = QUOTA_CACHE[VCA$L_QUOLIST];
INCR J FROM 1 TO .QUOTA_CACHE[VCA$W_QUOSIZE]
DO
    BEGIN
    IF  .QUOTA_LIST[.J-1, VCA$V_QUODIRTY]
    AND .QUOTA_LIST[.J-1, VCA$L_QUORECNUM] NEQ 0
    THEN
	BEGIN
	REC_NUM = .QUOTA_LIST[.J-1, VCA$L_QUORECNUM] - 1;
	Q_RECORD = READ_BLOCK (.REC_NUM / RECS_PER_BLOCK
			       + .FCB[FCB$L_STLBN], 1, QUOTA_TYPE)
		   + (.REC_NUM MOD RECS_PER_BLOCK) * DQF$C_LENGTH;
	KERNEL_CALL (CLEAN_QUO_CACHE, .J, .Q_RECORD);
	END;
    END;

END;					! end of routine FLUSH_QUO_CACHE

GLOBAL ROUTINE DEACC_QFILE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deaccesses the quota file and releases the FCB if it
!	is idle. This routine must be aclled in kernel mode.
!
! CALLING SEQUENCE:
!	DEACC_QFILE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	context set to RVN 1
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	quota file disconnected from VCB, FCB deallocated
!
!--

BEGIN

LOCAL
	FCB		: REF BBLOCK;	! FCB of quota file

EXTERNAL
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume

EXTERNAL ROUTINE
	DEALLOCATE;			! deallocate system dynamic memory


! Decrement access and lock counts on the FCB. The lock count is only
! decremented if there is a lock on the index file FCB (i.e., the volume
! was not mounted /UNLOCK).
!

FCB = .CURRENT_VCB[VCB$L_QUOTAFCB];
CURRENT_VCB[VCB$L_QUOTAFCB] = 0;

FCB[FCB$W_WCNT] = .FCB[FCB$W_WCNT] - 1;
FCB[FCB$W_TCNT] = .FCB[FCB$W_TCNT] - 1;
FCB[FCB$W_ACNT] = .FCB[FCB$W_ACNT] - 1;

! If the access count went to zero, we can release the FCB. The general
! cleanup will do the actual deallocation.
!

IF .FCB[FCB$W_ACNT] EQL 0
THEN REMQUE (.FCB, FCB);

! Unlink and deallocate the quota cache block.
!

DEALLOCATE (.CURRENT_VCB[VCB$L_QUOCACHE]);
CURRENT_VCB[VCB$L_QUOCACHE] = 0;

RETURN 1;

END;					! end of routine DEACC_QFILE

GLOBAL ROUTINE RET_QENTRY (Q_RECORD, ABD) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies the specified quota file record into the
!	result string area of the buffer descriptor packet. This routine
!	must be called in kernel mode.
!
! CALLING SEQUENCE:
!	RET_QENTRY (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of quota file record
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG2: address of buffer descriptor packet
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	Q_RECORD	: REF BBLOCK,	! quota file record
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH];
					! descriptor arg

! If the user provided a result length buffer, give him the length
! of the record.
!

IF .ABD[ABD$C_RESL, ABD$W_COUNT] GEQ 2
THEN
    BEGIN
    (.ABD[ABD$C_RESL, ABD$W_TEXT] + ABD[ABD$C_RESL, ABD$W_TEXT] + 1)<0,16> = DQF$C_LENGTH;
    END;

! If the user provided a result string buffer, return as much of the
! quota record as will fit (zero filling the buffer).
!

CH$COPY (DQF$C_LENGTH, .Q_RECORD, 0,
    .ABD[ABD$C_RES, ABD$W_COUNT],
    .ABD[ABD$C_RES, ABD$W_TEXT] + ABD[ABD$C_RES, ABD$W_TEXT] + 1);

RETURN 1;

END;					! end of routine RET_QENTRY

GLOBAL ROUTINE CONN_QFILE (ABD, FIB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine causes the quota file for the volume set to be
!	connected and made active.
!
! CALLING SEQUENCE:
!	CONN_QFILE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of buffer descriptor vector
!	ARG2: address of user FIB
!
! IMPLICIT INPUTS:
!	CLEANUP_FLAGS: cleanup action and status flags
!	CURRENT_RVN: RVN of currently selected volume
!	CURRENT_VCB: VCB of currently selected volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: FCB created for quota file
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	directory searched, quota file accessed (FCB created, etc.)
!
!--

BEGIN

MAP
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptor arg
	FIB		: REF BBLOCK;	! user FIB

LOCAL
	FCB		: REF BBLOCK,	! FCB of quota file
	HEADER		: REF BBLOCK,	! file header of quota file
	BUFFER		: REF BBLOCK;	! disk block buffer

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CURRENT_RVN,			! RVN of current volume
	CURRENT_VCB	: REF BBLOCK,	! address of VCB of volume
	PRIMARY_FCB	: REF BBLOCK;	! address of FCB in process

EXTERNAL ROUTINE
	FIND,				! find file in directory
	SWITCH_VOLUME,			! switch volume context
	SEARCH_FCB,			! search FCB list
	READ_HEADER,			! read file header
	CREATE_FCB,			! create an FCB
	READ_BLOCK,			! read a disk block
	WRITE_BLOCK,			! write a disk block
	CHECKSUM;			! compute block checksum


! Check caller privilege - must be "system".
!

IF NOT .CLEANUP_FLAGS[CLF_SYSPRV]
THEN ERR_EXIT (SS$_NOPRIV);

! Find the quota file in the directory. The quota file must be located
! RVN 1 if this is a volume set.
!

IF .CLEANUP_FLAGS[CLF_DIRECTORY]
THEN FIND (.ABD, .FIB, 0);
SWITCH_VOLUME (.FIB[FIB$W_FID_RVN]);
IF .CURRENT_RVN GTRU 1
THEN ERR_EXIT (SS$_BADQFILE);

! Make sure the quota file is not already active.
!

IF .CURRENT_VCB[VCB$L_QUOTAFCB] NEQ 0
THEN ERR_EXIT (SS$_QFACTIVE);

! Find the FCB, if any, and read the header.
!

FCB = SEARCH_FCB (FIB[FIB$W_FID]);
HEADER = READ_HEADER (FIB[FIB$W_FID]);

! Create an FCB if none exists.
!

IF .FCB EQL 0
THEN PRIMARY_FCB = FCB = KERNEL_CALL (CREATE_FCB, .HEADER);

! Check the quota file for suitability (contiguous, file format, etc.)
!

IF NOT .HEADER[FH2$V_CONTIG]
OR .BBLOCK [HEADER[FH2$W_RECATTR], FAT$B_RTYPE] NEQ FAT$C_FIXED
OR .BBLOCK [HEADER[FH2$W_RECATTR], FAT$B_RATTRIB] NEQ 0
OR .BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_RSIZE] NEQ DQF$C_LENGTH
THEN ERR_EXIT (SS$_BADQFILE);

! Check access interlocks.
!

IF .FCB[FCB$V_EXCL]
OR .FCB[FCB$W_LCNT] NEQ 0
THEN ERR_EXIT (SS$_ACCONFLICT);

! Now hook up the quota file FCB.
!

IF NOT KERNEL_CALL (MAKE_QFCB, .FCB)
THEN ERR_EXIT (SS$_INSFMEM);		! allocation failure on quota cache

! Read the storage control block and turn on the quota file dirty flag.
! Then checksum and rewrite the block.
!

IF .BBLOCK [.CURRENT_VCB[VCB$L_QUOCACHE], VCA$W_QUOSIZE] GEQU 2
THEN
    BEGIN
    BUFFER = READ_BLOCK (.CURRENT_VCB[VCB$L_SBMAPLBN]-1, 1, BITMAP_TYPE);
    BUFFER[SCB$V_QUODIRTY] = 1;
    CHECKSUM (.BUFFER);
    WRITE_BLOCK (.BUFFER);
    END;

END;					! end of routine CONN_QFILE

GLOBAL ROUTINE MAKE_QFCB (FCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine hooks up the specified FCB to be the FCB for the
!	volume (set) quota file. This routine must be called in kernel mode.
!
! CALLING SEQUENCE:
!	MAKE_QFCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of FCB to hook up
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if successful
!	0 if allocation failure on cache block
!
! SIDE EFFECTS:
!	quota file FCB hooked into FCB list and quota pointer
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK;	! FCB to hook up

LOCAL
	QUOTA_CACHE	: REF BBLOCK;	! quota cache block allocated

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume

EXTERNAL ROUTINE
	ALLOCATE;			! allocate system dynamic memory


! Allocate the cache block and link it to the VCB.
!

QUOTA_CACHE = ALLOCATE (MAXU (.CURRENT_VCB[VCB$W_QUOSIZE], 1) * VCA$C_QUOLENGTH
			+ $BYTEOFFSET (VCA$L_QUOLIST), CACHE_TYPE);
IF .QUOTA_CACHE EQL 0
THEN RETURN 0;
QUOTA_CACHE[VCA$W_QUOSIZE] = MAXU (.CURRENT_VCB[VCB$W_QUOSIZE], 1);
CURRENT_VCB[VCB$L_QUOCACHE] = .QUOTA_CACHE;

! If the quota file is currently not accessed, link it into the FCB list.
!

IF .FCB[FCB$W_ACNT] EQL 0
THEN INSQUE (.FCB, .CURRENT_VCB[VCB$L_FCBBL]);

! Bump up the access counts in the FCB to show a write accessed file. Also
! bump up the lock count unless the volume is mounted /UNLOCK (shown by a
! zero lock count in the index file FCB).
!

FCB[FCB$W_ACNT] = .FCB[FCB$W_ACNT] + 1;
FCB[FCB$W_WCNT] = .FCB[FCB$W_WCNT] + 1;
FCB[FCB$W_TCNT] = .FCB[FCB$W_TCNT] + 1;

! Finally enter the quota file pointer in the VCB.
!

CURRENT_VCB[VCB$L_QUOTAFCB] = .FCB;

CLEANUP_FLAGS[CLF_DEACCQFILE] = 1;

RETURN 1;

END;					! end of routine MAKE_QFCB

END
ELUDOM
