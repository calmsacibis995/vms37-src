MODULE REMOVE (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine removes a directory entry.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  15-Jan-1978  20:19
!
! MODIFIED BY:
!
!	V02-007	ACG0259		Andrew C. Goldstein,	26-Jan-1982  19:14
!		Add mode to keep a name with no versions for autopurge;
!		remove updating of directory index.
!
!	V02-006	ACG0208		Andrew C. Goldstein,	12-Nov-1981  11:24
!		Change declaration of directory context
!
!	V02-005	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:27
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE REMOVE (KEEP_NAME) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes a directory entry.
!
!
! CALLING SEQUENCE:
!	REMOVE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: 0 to remove name if all versions are gone
!	      1 to keep a name with no versions
!
! IMPLICIT INPUTS:
!	DIR_VBN: VBN of current directory block
!	DIR_BUFFER: address of directory block buffer
!	DIR_ENTRY: address of directory record found
!	DIR_VERSION: address of directory version entry
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	DIR_END: address of end of directory data
!	PREV_NAME: file name of directory entry
!	PREV_VERSION: version number of directory entry
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	directory entry removed, block(s) written
!
!--

BEGIN

LOCAL
	P,				! character scan pointer
	RECORD_SIZE;			! size of directory record

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	DIR_FCB		: REF BBLOCK,	! FCB of directory file
	DIR_CONTEXT	: BBLOCK,	! directory context area
	PREV_NAME	: VECTOR [,BYTE], ! file name of directory entry
	PREV_VERSION;			! version number of directory entry

DIR_CONTEXT_DEF;

EXTERNAL ROUTINE
	NEXT_REC,			! get next directory record
	MARK_DIRTY,			! mark buffer for write back
	SHUFFLE_DIR,			! compress directory
	UPDATE_DIRSEQ;			! update directory sequence count


! First scan to the end of the directory records and compute the size of the
! current record. Also save name and version for the cleanup.
!

DIR_END = .DIR_ENTRY;
UNTIL .DIR_END[DIR$W_SIZE] EQL 65535
DO DIR_END = NEXT_REC (.DIR_END);
DIR_END = .DIR_END + 2;

RECORD_SIZE = .DIR_ENTRY[DIR$W_SIZE] + 2;
IF NOT .CLEANUP_FLAGS[CLF_CLEANUP]
THEN
    BEGIN
    PREV_VERSION = .DIR_VERSION[DIR$W_VERSION];
    CH$MOVE (.DIR_ENTRY[DIR$B_NAMECOUNT]+1, DIR_ENTRY[DIR$B_NAMECOUNT], PREV_NAME);
    CLEANUP_FLAGS[CLF_REENTER] = 1;
    END;

! Determine if the entry being removed is of the form xxx.DIR;1. If so, bump
! the directory sequence count in the UCB to invalidate RMS caches.
!

IF .DIR_VERSION[DIR$W_VERSION] EQL 1	! simple tests first
THEN
    BEGIN
    P = CH$FIND_SUB (.DIR_ENTRY[DIR$B_NAMECOUNT], DIR_ENTRY[DIR$T_NAME],
		     4, UPLIT BYTE ('.DIR'));
    IF NOT CH$FAIL (.P)
    AND .P + 4 EQL DIR_ENTRY[DIR$T_NAME] + .DIR_ENTRY[DIR$B_NAMECOUNT]
    THEN KERNEL_CALL (UPDATE_DIRSEQ);
    END;

! Determine if the record contains one or more versions. If there are
! more than one or if we are to keep the name, we just squish out the
! indicated version.
!

IF .KEEP_NAME
OR .RECORD_SIZE GTRU (.DIR_ENTRY[DIR$B_NAMECOUNT]
			 + DIR$C_LENGTH + DIR$C_VERSION + 1 AND NOT 1)
THEN
    BEGIN
    CH$COPY (.DIR_END - .DIR_VERSION - DIR$C_VERSION, .DIR_VERSION + DIR$C_VERSION,
	     0, .DIR_END - .DIR_VERSION, .DIR_VERSION);
    DIR_ENTRY[DIR$W_SIZE] = .DIR_ENTRY[DIR$W_SIZE] - DIR$C_VERSION;
    END

! If the record contains only one version, we remove the entire record.
!

ELSE
    BEGIN
    CH$COPY (.DIR_END - .DIR_ENTRY - .RECORD_SIZE, .DIR_ENTRY + .RECORD_SIZE,
	     0, .DIR_END - .DIR_ENTRY, .DIR_ENTRY);
    DIR_VERSION = 0;
    END;

! If this leaves us with an empty block, squish it out. Otherwise, just
! write it. But don't squish out the last block of an empty directory.
!

IF .DIR_BUFFER[DIR$W_SIZE] EQL 65535
AND .DIR_FCB[FCB$L_EFBLK] GTRU 1
THEN
    SHUFFLE_DIR (-1)
ELSE
    MARK_DIRTY (.DIR_BUFFER);

END;					! end of routine REMOVE

END
ELUDOM
