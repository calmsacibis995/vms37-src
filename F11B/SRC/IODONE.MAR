	.TITLE	IODONE - POST REQUEST DONE TO USER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  F11ACP STRUCTURE LEVEL 1
;
; ABSTRACT:
;
;	THIS ROUTINE POSTS I/O COMPLETION FOR THE INDICATED FCP REQUEST.
;
; ENVIRONMENT:
;
;	STARLET OPERATING SYSTEM, INCLUDING PRIVILEGED SYSTEM SERVICES
;	AND INTERNAL EXEC ROUTINES. THIS ROUTINE MUST BE CALLED IN
;	KERNEL MODE.
;
;--
;
; AUTHOR:  ANDREW C. GOLDSTEIN, CREATION DATE:  20-DEC-1976  11:25
;
; MODIFIED BY:
;
;	V02-001	LJK0076		Lawrence J. Kenah	3-Nov-1981
;		Remove check for "queue previously not empty" when making
;		software interrupt request. The request is always made.
;
;**

;
; EQUATED SYMBOLS:
;
PACKET	=4				; ADDRESS OF I/O PACKET ARG

	$ABDDEF				; DEFINE BUFFER PACKET OFFSETS
	$FIBDEF				; DEFINE FIB OFFSETS
	$IRPDEF				; DEFINE I/O PACKET OFFSETS
	$UCBDEF				; DEFINE UCB OFFSETS
	$VCBDEF				; DEFINE VCB OFFSETS
	$IPLDEF				; DEFINE IPL SYMBOLS
	$PRDEF				; DEFINE PRIORITY LEVELS
	$IODEF				; DEFINE I/O FUNCTION CODES

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE POSTS I/O COMPLETION FOR THE INDICATED FCP REQUEST.
;
; CALLING SEQUENCE:
;	CALL	IODONE (ARG1)
;
; INPUT PARAMETERS:
;	ARG1: ADDRESS OF I/O PACKET
;
; IMPLICIT INPUTS:
;	USER_STATUS: STATUS OF I/O REQUEST
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	IOC$GL_PSBL: TAIL OF I/O POST QUEUE
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	I/O PACKET PLACED ON I/O POST QUEUE
;	VOLUME CHECKED FOR DISMOUNT
;
;--

	.PSECT	$CODE$,NOWRT,LONG

IO_DONE::
	.WORD	^M<R2,R3,R4,R5,R6,R7>	; SAVE REGISTERS
	MOVL	PACKET(AP),R6		; GET PACKET ADDRESS
	MOVQ	W^USER_STATUS,IRP$L_MEDIA(R6) ; SET STATUS IN PACKET
	EXTZV	#IRP$V_FCODE,#IRP$S_FCODE,-
		IRP$W_FUNC(R6),R7	; GET FUNCTION CODE WITHOUT QUALIFIERS
	CMPB	R7,#IO$_READPBLK	; IF READ PHYSICAL
	BEQL	10$
	CMPB	R7,#IO$_WRITEPBLK	; OR WRITE DO SPECIAL PROCESSING
	BEQL	10$
;
; POST PROCESSING FOR ALL ACP FUNCTIONS: BUMP DOWN THE VOLUME TRANSACTION
; COUNT AND DO THE FIXUPS FOR THE BUFFER PACKET.
;
	MOVL	IRP$L_UCB(R6),R4	; GET UCB ADDRESS
	MOVL	UCB$L_VCB(R4),R4	; TO GET VCB ADDRESS
	DECW	VCB$W_TRANS(R4)		; DEDUCT THIS REQ FROM TRANS COUNT
	BBC	#IRP$V_COMPLX,IRP$W_STS(R6),30$ ; BRANCH IF NO BUFFER PACKET
	MOVL	@IRP$L_SVAPTE(R6),R4	; GET BUFFER DESCRIPTOR ADDRESS
	CLRW	<ABD$C_NAME*ABD$C_LENGTH>+ABD$W_COUNT(R4)
					; INHIBIT WRITE-BACK OF NAME STRING
	MOVAB	<ABD$C_FIB*ABD$C_LENGTH>+ABD$W_TEXT(R4),R2
	MOVZWL	(R2),R3			; GET OFFSET ADDRESS OF FIB IN PACKET
	ADDL	R3,R2			; COMPUTE ABSOLUTE ADDRESS
	MOVC5	#FIB$C_LENGTH,W^LOCAL_FIB,#0,-
		<ABD$C_FIB*ABD$C_LENGTH>+ABD$W_COUNT(R4),1(R2)
					; COPY LOCAL FIB BACK INTO PACKET
	BBSS	#IRP$V_FUNC,IRP$W_STS(R6),30$ ; IF READ BIT IS SET, KEEP
	MOVW	#ABD$C_ATTRIB,IRP$W_BCNT(R6) ; ELSE DUMP ATTRIBUTE TEXT
	BRB	30$
;
; FOR READ/WRITE PHYSICAL, KNOCK DOWN THE VIRTUAL BIT IN THE PACKET. ONLY
; ERRORS COME THROUGH HERE, AND WE DON'T WANT TO SEE THEM AGAIN (I/O POST
; RECYCLES VIRTUAL I/O ERRORS FOR ACP ERROR PROCESSING). WE ALSO RESTORE
; THE ORIGINAL SVAPTE AND BYTE COUNT FROM WHERE THEY WERE SAVED IN THE PACKET
; SO THAT THE PAGES CAN BE UNLOCKED.
;
10$:	BBCC	#IRP$V_VIRTUAL,IRP$W_STS(R6),20$ ; CLEAR THE VIRTUAL BIT
20$:	MOVL	IRP$L_DIAGBUF(R6),IRP$L_SVAPTE(R6) ; RESTORE ORIGINAL PAGE ADDRESS
	MOVW	IRP$W_OBCNT(R6),IRP$W_BCNT(R6)	   ; AND BYTE COUNT FOR PAGE UNLOCK


30$:	INSQUE	(R6),@IOC$GL_PSBL	; INSERT PACKET INTO QUEUE
	SOFTINT	#IPL$_IOPOST		; SIGNAL I/O POST INTERRUPT
	CALLS	#0,W^CHECK_DISMOUNT	; CHECK THE VOLUME FOR DISMOUNT
	RET



	.END
