MODULE SNDBAD (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL = GENERAL),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine sends a message to the bad block analysis program to
!	deal with a file that is marked bad.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  26-May-1978  14:50
!
! MODIFIED BY:
!
!	V02-003	LMP0013		L. Mark Pilant,		15-Mar-1981 16:20
!		Remove unused and unneeded sorage (to fix Linker truncation
!		errors).
!
!	V02-002	ACG0230		Andrew C. Goldstein,	24-Dec-1981  0:17
!		Go to general mode addressing for externals
!
!	V02-001	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:28
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE SEND_BADSCAN (FID) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sends a message to the bad block analysis program to
!	deal with a file that is marked bad.
!
!
! CALLING SEQUENCE:
!	SEND_BADSCAN (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of file ID of file
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of device containing file
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	bad block scan process started
!
!--

BEGIN

MAP
	FID		: REF BBLOCK;	! file ID argument

LOCAL
	MESSAGE		: BBLOCK [BBS$C_LENGTH], ! message buffer
	MBX_CHANNEL	: WORD;		! channel number for mailbox

EXTERNAL
	CURRENT_UCB	: REF BBLOCK;	! UCB of current device


! Construct the message in the message buffer.
!

CH$FILL (0, BBS$C_LENGTH, MESSAGE);
MESSAGE[BBS$B_MSGTYPE] = MSG$_SCANBAD;
MESSAGE[BBS$W_SEQUENCE] = 0;
MESSAGE[BBS$L_UCB] = .CURRENT_UCB;
CH$MOVE (FID$C_LENGTH, .FID, MESSAGE[BBS$W_FID]);

! Assign a channel to the bad block scanner mailbox. Note that we simply
! give up on errors - the file will be left marked for delete and bad and
! can be picked up and retried later.
!

IF NOT $ASSIGN (CHAN = MBX_CHANNEL,
		DEVNAM = DESCRIPTOR ('ACP$BADBLOCK_MBX'))
THEN RETURN;

! Send the message. Then attempt to create the bad block scan process. If one
! is already active, the create will fail due to duplicate process names,
! and the message will simply be queued.
!

IF $QIO	(CHAN = .MBX_CHANNEL,
	 FUNC = IO$_WRITELBLK OR IO$M_NOW,
	 EFN  = MBX_EFN,
	 P1   = MESSAGE,
	 P2   = BBS$C_LENGTH
	)
THEN $CREPRC (
	IMAGE  = DESCRIPTOR ('SYS$SYSTEM:BADBLOCK.EXE'),
	INPUT  = DESCRIPTOR ('_TTA1:'),
	OUTPUT = DESCRIPTOR ('_TTA1:'),
	ERROR  = DESCRIPTOR ('_TTA1:'),
	PRVADR = UPLIT (-1, -1),
	PRCNAM = DESCRIPTOR ('BADBLOCK_SCAN'),
	BASPRI = 4,
	UIC    = 1^16 + 3
	);

$DASSGN (CHAN = .MBX_CHANNEL);

END;					! end of routine SEND_BADSCAN

END
ELUDOM
