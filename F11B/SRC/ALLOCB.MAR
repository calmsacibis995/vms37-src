	.TITLE	ALLOCB - ALLOCATE DYNAMIC MEMORY
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  F11ACP STRUCTURE LEVEL 2
;
; ABSTRACT:
;
;	THESE ROUTINES ALLOCATE AND DEALLOCATE SYSTEM NON-PAGED
;	DYNAMIC MEMORY FOR FCP CONTROL BLOCKS.
;
; ENVIRONMENT:
;
;	STARLET OPERATING SYSTEM, INCLUDING PRIVILEGED SYSTEM SERVICES
;	AND INTERNAL EXEC ROUTINES. NOTE THAT THIS ROUTINE MUST BE
;	CALLED IN KERNEL MODE.
;
;--
;
; AUTHOR:  ANDREW C. GOLDSTEIN, CREATION DATE:  14-DEC-1976  16:25
;
; MODIFIED BY:
;
;	V03-001	LMP0017		L. Mark Pilant,		29-Mar-1982  9:45
;		Put back in the quota checking.
;
;	V02-002	LMP0011		L. Mark Pilant,		23-Feb-1982 15:00
;		Remove the quota checking inserted in LMP0003.  This is for
;		the V3 FT2 release only.
;
;	V02-002	LMP0003		L. Mark Pilant,		4-Dec-1981  09:05
;		Charge the user for any windows created.
;
;	A0101	ACG0081		Andrew C. Goldstein,	6-Nov-1979  21:40
;		Add cache block for quota cacheing
;
;	A0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:04
;	Previous revision history moved to F11A.REV
;**

;
; INCLUDE FILES:
;
;	INCLUDE "FCPDEF.MAR"

;
; EQUATED SYMBOLS:
;
; ARG LIST OFFSETS
;
BYTES	= 4				; BYTE COUNT DESIRED
TYPE	= 8				; BLOCK TYPE BEING ALLOCATED
ADDRESS	= 4				; ADDRESS OF BLOCK BEING DEALLOCATED

	$DYNDEF	GLOBAL			; DEFINE STRUCTURE TYPE CODES
	$IPLDEF				; DEFINE SYSTEM IPL NAMES
	$IRPDEF				; DEFINE I/O PACKET OFFSETS
	$JIBDEF				; DEFINE JOB INFORMATION BLOCK FORMAT
	$PCBDEF				; DEFINE PROCESS CONTROL BLOCK FORMAT
	$PRDEF				; DEFINE PROCESSOR REGISTER NAMES
	$RSNDEF				; DEFINE RESOURCE NAMES
	$WCBDEF				; DEFINE WINDOW BLOCK FORMAT
					; USED ONLY FOR TAGS TO THE BLOCK TYPE
					; AND SIZE FIELDS

	.PSECT	$LOCKEDC1$,NOWRT,LONG
;
; OWN STORAGE:
;
BLOCK_TYPE:				; LIST OF SYSTEM TYPE CODES,
	.BYTE	DYN$C_FCB,-		; INDEXED BY FCP TYPE CODE
		DYN$C_WCB,-
		DYN$C_VCB,-
		DYN$C_RVT,-		; RELATIVE VOLUME TABLE CONTROL BLOCK
		DYN$C_MVL,-		; MAGNETIC TAPE VOLUME LIST
		DYN$C_AQB,-		; ACP QUEUE CONTROL BLOCK
		DYN$C_VCA		; ACP CACHE DATA BLOCK

	.ALIGN	2

;++
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE ALLOCATES THE REQUESTED BLOCK SIZE FROM SYSTEM
; NON-PAGED DYNAMIC MEMORY. THE BLOCK IS CLEARED, AND THE STANDARD
; SIZE AND TYPE DATA IS INSERTED.
;
; CALLING SEQUENCE:
;	CALL	ALLOCATE (ARG1, ARG2)
;
; INPUT PARAMETERS:
;	ARG1: NUMBER OF BYTES TO ALLOCATE
;	ARG2: TYPE OF BLOCK
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	ADDRESS OF BLOCK
;
; SIDE EFFECTS:
;	BLOCK ALLOCATED
;
;--

ALLOCATE::
	.WORD	^M<R2,R3,R4,R5>		; SAVE THE USUAL REGISTERS
10$:	MOVL	BYTES(AP),R1		; GET SIZE ARGUMENT
	ADDL2	#15,R1			; ASSUME 16 BYTE GRANULARITY
	BICL2	#15,R1
	SETIPL	#IPL$_SYNCH		; RAISE IPL TO SYNCHRONIZE
	CMPL	TYPE(AP),#WCB_TYPE	; IS THE BLOCK TO BE A WCB?
	BNEQ	30$			; XFER IF NOT, NO FURTHER CHECKS NEEDED
	TSTL	CONTEXT_SAVE		; ELSE CHECK FOR SECONDARY CONTEXT
	BNEQ	30$			; XFER IF IN SECONDARY CONTEXT, NO CHARGE
	MOVL	CURRENT_WINDOW,R0	; GET CURRENT WINDOW ADDRESS
	BEQL	15$			; XFER IF NONE, NO SHARING POSSIBLE
	TSTW	WCB$L_PID(R0)		; ELSE CHECK FOR SHARED WINDOWS
	BEQL	30$			; XFER IF SHARED, NO CHARGE
15$:	MOVL	IO_PACKET,R0		; ELSE GET ADDRESS OF THE IRP
	MOVZWL	IRP$L_PID(R0),R0	; GET PROCESS INDEX
	MOVL	@SCH$GL_PCBVEC[R0],R0	; GET PCB ADDRESS
	MOVL	PCB$L_JIB(R0),R0	; GET JIB ADDRESS
	SUBL3	R1,JIB$L_BYTCNT(R0),R2	; CALCULATE NEW BYTE COUNT
	BGTR	20$			; XFER IF ENOUGH QUOTA
	CLRL	R0			; ELSE SET AN ERROR
	SETIPL	#0			; RESTORE IPL
	BRB	40$			; GO FINISH UP
20$:	MOVL	R2,JIB$L_BYTCNT(R0)	; SET NEW BYTE COUNT
30$:	MOVPSL	-(SP)			; SAVE THE PSL FOR WAIT CALL BELOW
	JSB	@#EXE$ALONONPAGED	; GET BLOCK FROM EXEC
	BLBC	R0,50$			; BRANCH ON FAILURE
	SETIPL	#0			; RESTORE IPL
					; CLEAN PSL OFF STACK AND
	MOVL	R1,(SP)			; SAVE RETURNED BYTE COUNT
	PUSHL	R2			; AND ADDRESS
	MOVC5	#0,(R2),#0,R1,(R2)	; ZERO OUT THE BLOCK

	MOVL	(SP)+,R0		; GET BLOCK ADDRESS
	CVTLW	(SP)+,WCB$W_SIZE(R0)	; PUT IN SIZE WORD
	MOVL	TYPE(AP),R1		; GET BLOCK TYPE ARG
	MOVB	BLOCK_TYPE[R1],WCB$B_TYPE(R0)
40$:	RET				; AND RETURN
;
; WE GET HERE IF MEMORY IS NOT AVAILABLE
;
50$:	CLRL	R0
	CMPL	TYPE(AP),#CACHE_TYPE	; SEE IF THIS IS A CACHE BLOCK
	BEQL	40$			; BRANCH IF SO - DON'T WAIT
	MOVZWL	#RSN$_NPDYNMEM,R0	; GET APPROPRIATE RESOURCE CODE
	MOVL	@#SCH$GL_CURPCB,R4	; AND PROCESS PCB ADDRESS
	JSB	@#SCH$RWAIT		; AND WAIT FOR POOL TO APPEAR
	BRW	10$			; TRY AGAIN

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE DEALLOCATES THE INDICATED BLOCK OF MEMORY BACK
;	TO THE SYSTEM POOL OF NON-PAGED DYNAMIC MEMORY.
;
; CALLING SEQUENCE:
;	CALL	DEALLOCATE (ARG1)
;
; INPUT PARAMETERS:
;	ARG1: ADDRESS OF BLOCK BEING DEALLOCATED
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	BLOCK DEALLOCATED
;
;--

DEALLOCATE::
	.WORD	^M<R2,R3,R4,R5>		; SAVE REGISTERS
	MOVL	ADDRESS(AP),R0		; GET ADDRESS OF BLOCK
	MOVZWL	WCB$W_SIZE(R0),R1	; GET BLOCK SIZE
	SETIPL	#IPL$_SYNCH		; RAISE IPL TO SYNCHRONIZE
	CMPB	WCB$B_TYPE(R0),#DYN$C_WCB	; IS THE BLOCK A WCB?
	BNEQ	10$			; XFER IF NOT, NO FURTHER CHECKS
	TSTW	WCB$L_PID(R0)		; ELSE CHECK FOR SHARED WINDOWS
	BEQL	10$			; XFER IF NOT A SHARED WINDOW
	TSTL	CONTEXT_SAVE		; ELSE SEE IF IN SECONDARY CONTEXT
	BNEQ	10$			; XFER IF SO, NO CREDIT
	MOVL	IO_PACKET,R2		; ELSE GET IRP ADDRESS
	MOVZWL	IRP$L_PID(R2),R2	; GET PROCESS INDEX
	MOVL	@SCH$GL_PCBVEC[R2],R2	; GET PCB ADDRESS
	MOVL	PCB$L_JIB(R2),R2	; GET JIB ADDRESS
	ADDL2	R1,JIB$L_BYTCNT(R2)	; CREDIT THE USER
10$:	JSB	@#EXE$DEANONPAGED	; AND DEALLOCATE THRU EXEC
	SETIPL	#0			; RESTORE IPL
	RET



	.END
