MODULE CREFCB (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	These routines create and initialize a file control block
!	from the given file header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. These routines must be called in
!	kernel mode.

!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  16:48
!
! MODIFIED BY:
!
!	V02-003	ACG0241		Andrew C. Goldstein,	11-Dec-1981  23:01
!		Use common code in INIFC2 to set up FCB
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	CREATE_FCB,			! create a file ontrol block
	UPDATE_FCB	: NOVALUE;	! update contents of primary FCB

GLOBAL ROUTINE CREATE_FCB (HEADER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates an FCB and initializes it according to
!	the given file header.
!
! CALLING SEQUENCE:
!	CREATE_FCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of file header
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	ADDRESS OF FCB
!
! SIDE EFFECTS:
!	FCB created and initialized
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK;	! file header argument

LOCAL
	FCB		: REF BBLOCK;	! address of FCB created

EXTERNAL ROUTINE
	ALLOCATE,			! allocate dynamic memory
	INIT_FCB2;			! initialize contents of FCB

! Allocate an FCB sized and typed block. Then use the common routine
! to init it.
!

FCB = ALLOCATE (FCB$C_LENGTH, FCB_TYPE);
FCB[FCB$L_WLFL] = FCB[FCB$L_WLFL];	! init null window list
FCB[FCB$L_WLBL] = FCB[FCB$L_WLFL];
FCB[FCB$L_STVBN] = 1;			! init start VBN to 1
INIT_FCB2 (.FCB, .HEADER);
RETURN .FCB;

END;					! end of routine CREATE_FCB

GLOBAL ROUTINE UPDATE_FCB (HEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates the file attributes of the file's primary FCB,
!	if any, with the file attributes of the given header. The file size
!	is preserved.
!
!
! CALLING SEQUENCE:
!	UPDATE_FCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of file header
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: address of file FCB or 0
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB is updated if it exists
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK;	! file header arg

EXTERNAL
	PRIMARY_FCB	: REF BBLOCK;	! FCB of file in process

EXTERNAL ROUTINE
	FILL_FCB;			! fill in FCB from header

! All we do is call the common routine for the primary FCB.
!

IF .PRIMARY_FCB NEQ 0
THEN FILL_FCB (.PRIMARY_FCB, .HEADER);

END;					! end of routine UPDATE_FCB

END
ELUDOM
